# id;timestamp;commentText;codeText;commentWords;codeWords
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1411699723;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1411747799;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1413848647;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1417548636;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1426887271;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1429286144;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1429874322;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1431728285;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1461047077;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1463066690;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1467730834;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1473887989;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1480558671;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1485203320;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1485213173;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1496259743;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1496837955;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1497341397;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1498780456;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1500448076;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1521562905;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1526485251;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1530174524;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1530174524;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1530174524;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1531942400;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1532091916;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1532402679;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(inboundChannel, outboundChannel, brokerChannel, destinationPrefixes)__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,inbound,channel,outbound,channel,broker,channel,destination,prefixes
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1373756732;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1373924754;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1374083925;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1374099807;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1374115244;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1374422870;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1375392687;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1376961359;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1376961359;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1376961359;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1376961360;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1376961360;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1376961360;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1377656407;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1380226141;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1380245231;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1380565302;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1380573438;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1380589371;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1380675866;@return the passcode for a shared, "system" connection to the STOMP message broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1380745783;@return the passcode used by the "system" relay session to connect to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,by,the,system,relay,session,to,connect,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1381152424;@return the passcode used by the "system" relay session to connect to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,by,the,system,relay,session,to,connect,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1381799213;@return the passcode used by the "system" relay session to connect to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,by,the,system,relay,session,to,connect,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1382062574;@return the passcode used by the "system" relay session to connect to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,by,the,system,relay,session,to,connect,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1382062574;@return the passcode used by the "system" relay session to connect to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,by,the,system,relay,session,to,connect,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1382062575;@return the passcode used by the "system" connection to connect to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1382495681;@return the passcode used by the "system" connection to connect to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1382559988;@return the passcode used by the "system" connection to connect to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1384292065;@return the passcode used by the "system" connection to connect to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1385507478;@return the passcode used by the "system" connection to connect to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1386004713;@return the passcode used by the "system" connection to connect to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1386350678;@return the passcode used by the "system" connection to connect to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1386365044;@return the passcode used by the "system" connection to connect to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1387852827;@return the passcode used by the "system" connection to connect to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1387852827;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1393279654;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1394484373;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1394485082;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1395007965;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1395007965;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1395007965;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1395090675;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1395105194;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1395239748;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1396578670;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1397429525;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1397523793;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1398311203;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1398868011;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1398870027;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1398870703;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1400205617;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1403856366;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1404062102;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1404062122;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1404880787;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1404880799;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1409784938;@return the passcode used for the shared "system" connection to the STOMP broker;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1409790625;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1411389021;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1411699723;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1411747799;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1413848647;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1417548636;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1426887271;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1429286144;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1429874322;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1431728285;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1461047077;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1463066690;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1467730834;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1473887989;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1480558671;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1485203320;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1485213173;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1496259743;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1496837955;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1497341397;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1498780456;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1500448076;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1521562905;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1526485251;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1530174524;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1530174524;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1530174524;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1531942400;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1532091916;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public String getSystemPasscode();1532402679;Return the passcode used for the shared "system" connection to the STOMP broker.;public String getSystemPasscode() {_		return this.systemPasscode__	};return,the,passcode,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,passcode,return,this,system,passcode
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1374099807;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		Assert.notNull(messageChannel, "messageChannel is required")__		Assert.notNull(destinationPrefixes, "destinationPrefixes is required")__		this.messageChannel = messageChannel__		this.destinationPrefixes = destinationPrefixes.toArray(new String[destinationPrefixes.size()])__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,assert,not,null,destination,prefixes,destination,prefixes,is,required,this,message,channel,message,channel,this,destination,prefixes,destination,prefixes,to,array,new,string,destination,prefixes,size
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1374115244;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		Assert.notNull(messageChannel, "messageChannel is required")__		Assert.notNull(destinationPrefixes, "destinationPrefixes is required")__		this.messageChannel = messageChannel__		this.destinationPrefixes = destinationPrefixes.toArray(new String[destinationPrefixes.size()])__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,assert,not,null,destination,prefixes,destination,prefixes,is,required,this,message,channel,message,channel,this,destination,prefixes,destination,prefixes,to,array,new,string,destination,prefixes,size
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1374422870;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		Assert.notNull(messageChannel, "messageChannel is required")__		Assert.notNull(destinationPrefixes, "destinationPrefixes is required")__		this.messageChannel = messageChannel__		this.destinationPrefixes = destinationPrefixes.toArray(new String[destinationPrefixes.size()])__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,assert,not,null,destination,prefixes,destination,prefixes,is,required,this,message,channel,message,channel,this,destination,prefixes,destination,prefixes,to,array,new,string,destination,prefixes,size
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1375392687;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		Assert.notNull(messageChannel, "messageChannel is required")__		Assert.notNull(destinationPrefixes, "destinationPrefixes is required")__		this.messageChannel = messageChannel__		this.destinationPrefixes = destinationPrefixes.toArray(new String[destinationPrefixes.size()])__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,assert,not,null,destination,prefixes,destination,prefixes,is,required,this,message,channel,message,channel,this,destination,prefixes,destination,prefixes,to,array,new,string,destination,prefixes,size
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1376961359;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		Assert.notNull(messageChannel, "messageChannel is required")__		Assert.notNull(destinationPrefixes, "destinationPrefixes is required")__		this.messageChannel = messageChannel__		this.destinationPrefixes = destinationPrefixes.toArray(new String[destinationPrefixes.size()])__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,assert,not,null,destination,prefixes,destination,prefixes,is,required,this,message,channel,message,channel,this,destination,prefixes,destination,prefixes,to,array,new,string,destination,prefixes,size
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1376961359;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		Assert.notNull(messageChannel, "messageChannel is required")__		Assert.notNull(destinationPrefixes, "destinationPrefixes is required")__		this.messageChannel = messageChannel__		this.destinationPrefixes = destinationPrefixes.toArray(new String[destinationPrefixes.size()])__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,assert,not,null,destination,prefixes,destination,prefixes,is,required,this,message,channel,message,channel,this,destination,prefixes,destination,prefixes,to,array,new,string,destination,prefixes,size
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1376961359;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		Assert.notNull(messageChannel, "messageChannel is required")__		Assert.notNull(destinationPrefixes, "destinationPrefixes is required")__		this.messageChannel = messageChannel__		this.destinationPrefixes = destinationPrefixes.toArray(new String[destinationPrefixes.size()])__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,assert,not,null,destination,prefixes,destination,prefixes,is,required,this,message,channel,message,channel,this,destination,prefixes,destination,prefixes,to,array,new,string,destination,prefixes,size
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1376961360;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		Assert.notNull(messageChannel, "messageChannel is required")__		Assert.notNull(destinationPrefixes, "destinationPrefixes is required")__		this.messageChannel = messageChannel__		this.destinationPrefixes = destinationPrefixes.toArray(new String[destinationPrefixes.size()])__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,assert,not,null,destination,prefixes,destination,prefixes,is,required,this,message,channel,message,channel,this,destination,prefixes,destination,prefixes,to,array,new,string,destination,prefixes,size
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1376961360;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		Assert.notNull(messageChannel, "messageChannel is required")__		Assert.notNull(destinationPrefixes, "destinationPrefixes is required")__		this.messageChannel = messageChannel__		this.destinationPrefixes = destinationPrefixes.toArray(new String[destinationPrefixes.size()])__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,assert,not,null,destination,prefixes,destination,prefixes,is,required,this,message,channel,message,channel,this,destination,prefixes,destination,prefixes,to,array,new,string,destination,prefixes,size
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1376961360;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		Assert.notNull(messageChannel, "messageChannel is required")__		Assert.notNull(destinationPrefixes, "destinationPrefixes is required")__		this.messageChannel = messageChannel__		this.destinationPrefixes = destinationPrefixes.toArray(new String[destinationPrefixes.size()])__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,assert,not,null,destination,prefixes,destination,prefixes,is,required,this,message,channel,message,channel,this,destination,prefixes,destination,prefixes,to,array,new,string,destination,prefixes,size
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1377656407;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1380226141;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1380245231;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1380565302;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1380573438;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1380589371;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1380675866;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1380745783;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1381152424;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1381799213;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1382062574;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1382062574;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1382062575;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1382495681;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1382559988;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1384292065;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "messageChannel is required")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,is,required,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes);1385507478;@param messageChannel the channel to send messages from the STOMP broker to_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel messageChannel, Collection<String> destinationPrefixes) {_		super(destinationPrefixes)__		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};param,message,channel,the,channel,to,send,messages,from,the,stomp,broker,to,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,message,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
StompBrokerRelayMessageHandler -> private void openSystemSession();1373756732;Open a "system" session for sending messages from parts of the application_not assoicated with a client STOMP session.;private void openSystemSession() {__		RelaySession session = new RelaySession(STOMP_RELAY_SYSTEM_SESSION_ID) {_			@Override_			protected void sendMessageToClient(Message<?> message) {_				_				_			}_		}__		this.relaySessions.put(STOMP_RELAY_SYSTEM_SESSION_ID, session)___		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT)__		headers.setAcceptVersion("1.1,1.2")__		headers.setLogin(this.systemLogin)__		headers.setPasscode(this.systemPasscode)__		headers.setHeartbeat(0,0)_ __		if (logger.isDebugEnabled()) {_			logger.debug("Sending STOMP CONNECT frame to initialize \"system\" TCP connection")__		}_		Message<?> message = MessageBuilder.withPayload(new byte[0]).copyHeaders(headers.toMap()).build()__		session.open(message)__	};open,a,system,session,for,sending,messages,from,parts,of,the,application,not,assoicated,with,a,client,stomp,session;private,void,open,system,session,relay,session,session,new,relay,session,override,protected,void,send,message,to,client,message,message,this,relay,sessions,put,session,stomp,header,accessor,headers,stomp,header,accessor,create,stomp,command,connect,headers,set,accept,version,1,1,1,2,headers,set,login,this,system,login,headers,set,passcode,this,system,passcode,headers,set,heartbeat,0,0,if,logger,is,debug,enabled,logger,debug,sending,stomp,connect,frame,to,initialize,system,tcp,connection,message,message,message,builder,with,payload,new,byte,0,copy,headers,headers,to,map,build,session,open,message
StompBrokerRelayMessageHandler -> private void openSystemSession();1373924754;Open a "system" session for sending messages from parts of the application_not assoicated with a client STOMP session.;private void openSystemSession() {__		RelaySession session = new RelaySession(STOMP_RELAY_SYSTEM_SESSION_ID) {_			@Override_			protected void sendMessageToClient(Message<?> message) {_				_				_			}_		}__		this.relaySessions.put(STOMP_RELAY_SYSTEM_SESSION_ID, session)___		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT)__		headers.setAcceptVersion("1.1,1.2")__		headers.setLogin(this.systemLogin)__		headers.setPasscode(this.systemPasscode)__		headers.setHeartbeat(0,0)_ __		if (logger.isDebugEnabled()) {_			logger.debug("Sending STOMP CONNECT frame to initialize \"system\" TCP connection")__		}_		Message<?> message = MessageBuilder.withPayload(new byte[0]).copyHeaders(headers.toMap()).build()__		session.open(message)__	};open,a,system,session,for,sending,messages,from,parts,of,the,application,not,assoicated,with,a,client,stomp,session;private,void,open,system,session,relay,session,session,new,relay,session,override,protected,void,send,message,to,client,message,message,this,relay,sessions,put,session,stomp,header,accessor,headers,stomp,header,accessor,create,stomp,command,connect,headers,set,accept,version,1,1,1,2,headers,set,login,this,system,login,headers,set,passcode,this,system,passcode,headers,set,heartbeat,0,0,if,logger,is,debug,enabled,logger,debug,sending,stomp,connect,frame,to,initialize,system,tcp,connection,message,message,message,builder,with,payload,new,byte,0,copy,headers,headers,to,map,build,session,open,message
StompBrokerRelayMessageHandler -> private void openSystemSession();1374083925;Open a "system" session for sending messages from parts of the application_not assoicated with a client STOMP session.;private void openSystemSession() {__		RelaySession session = new RelaySession(STOMP_RELAY_SYSTEM_SESSION_ID) {_			@Override_			protected void sendMessageToClient(Message<?> message) {_				_				_			}_		}__		this.relaySessions.put(STOMP_RELAY_SYSTEM_SESSION_ID, session)___		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT)__		headers.setAcceptVersion("1.1,1.2")__		headers.setLogin(this.systemLogin)__		headers.setPasscode(this.systemPasscode)__		headers.setHeartbeat(0,0)_ __		if (logger.isDebugEnabled()) {_			logger.debug("Sending STOMP CONNECT frame to initialize \"system\" TCP connection")__		}_		Message<?> message = MessageBuilder.withPayloadAndHeaders(new byte[0], headers).build()__		session.open(message)__	};open,a,system,session,for,sending,messages,from,parts,of,the,application,not,assoicated,with,a,client,stomp,session;private,void,open,system,session,relay,session,session,new,relay,session,override,protected,void,send,message,to,client,message,message,this,relay,sessions,put,session,stomp,header,accessor,headers,stomp,header,accessor,create,stomp,command,connect,headers,set,accept,version,1,1,1,2,headers,set,login,this,system,login,headers,set,passcode,this,system,passcode,headers,set,heartbeat,0,0,if,logger,is,debug,enabled,logger,debug,sending,stomp,connect,frame,to,initialize,system,tcp,connection,message,message,message,builder,with,payload,and,headers,new,byte,0,headers,build,session,open,message
StompBrokerRelayMessageHandler -> private void openSystemSession();1374099807;Open a "system" session for sending messages from parts of the application_not assoicated with a client STOMP session.;private void openSystemSession() {__		RelaySession session = new RelaySession(STOMP_RELAY_SYSTEM_SESSION_ID) {_			@Override_			protected void sendMessageToClient(Message<?> message) {_				_				_			}_		}__		this.relaySessions.put(STOMP_RELAY_SYSTEM_SESSION_ID, session)___		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT)__		headers.setAcceptVersion("1.1,1.2")__		headers.setLogin(this.systemLogin)__		headers.setPasscode(this.systemPasscode)__		headers.setHeartbeat(0,0)_ __		if (logger.isDebugEnabled()) {_			logger.debug("Sending STOMP CONNECT frame to initialize \"system\" TCP connection")__		}_		Message<?> message = MessageBuilder.withPayloadAndHeaders(new byte[0], headers).build()__		session.open(message)__	};open,a,system,session,for,sending,messages,from,parts,of,the,application,not,assoicated,with,a,client,stomp,session;private,void,open,system,session,relay,session,session,new,relay,session,override,protected,void,send,message,to,client,message,message,this,relay,sessions,put,session,stomp,header,accessor,headers,stomp,header,accessor,create,stomp,command,connect,headers,set,accept,version,1,1,1,2,headers,set,login,this,system,login,headers,set,passcode,this,system,passcode,headers,set,heartbeat,0,0,if,logger,is,debug,enabled,logger,debug,sending,stomp,connect,frame,to,initialize,system,tcp,connection,message,message,message,builder,with,payload,and,headers,new,byte,0,headers,build,session,open,message
StompBrokerRelayMessageHandler -> private void openSystemSession();1374115244;Open a "system" session for sending messages from parts of the application_not assoicated with a client STOMP session.;private void openSystemSession() {__		RelaySession session = new RelaySession(STOMP_RELAY_SYSTEM_SESSION_ID) {_			@Override_			protected void sendMessageToClient(Message<?> message) {_				_				_			}_		}__		this.relaySessions.put(STOMP_RELAY_SYSTEM_SESSION_ID, session)___		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT)__		headers.setAcceptVersion("1.1,1.2")__		headers.setLogin(this.systemLogin)__		headers.setPasscode(this.systemPasscode)__		headers.setHeartbeat(0,0)_ __		if (logger.isDebugEnabled()) {_			logger.debug("Sending STOMP CONNECT frame to initialize \"system\" TCP connection")__		}_		Message<?> message = MessageBuilder.withPayloadAndHeaders(new byte[0], headers).build()__		session.open(message)__	};open,a,system,session,for,sending,messages,from,parts,of,the,application,not,assoicated,with,a,client,stomp,session;private,void,open,system,session,relay,session,session,new,relay,session,override,protected,void,send,message,to,client,message,message,this,relay,sessions,put,session,stomp,header,accessor,headers,stomp,header,accessor,create,stomp,command,connect,headers,set,accept,version,1,1,1,2,headers,set,login,this,system,login,headers,set,passcode,this,system,passcode,headers,set,heartbeat,0,0,if,logger,is,debug,enabled,logger,debug,sending,stomp,connect,frame,to,initialize,system,tcp,connection,message,message,message,builder,with,payload,and,headers,new,byte,0,headers,build,session,open,message
StompBrokerRelayMessageHandler -> private void openSystemSession();1374422870;Open a "system" session for sending messages from parts of the application_not assoicated with a client STOMP session.;private void openSystemSession() {__		RelaySession session = new RelaySession(STOMP_RELAY_SYSTEM_SESSION_ID) {_			@Override_			protected void sendMessageToClient(Message<?> message) {_				_				_			}_		}__		this.relaySessions.put(STOMP_RELAY_SYSTEM_SESSION_ID, session)___		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT)__		headers.setAcceptVersion("1.1,1.2")__		headers.setLogin(this.systemLogin)__		headers.setPasscode(this.systemPasscode)__		headers.setHeartbeat(0,0)_ __		if (logger.isDebugEnabled()) {_			logger.debug("Sending STOMP CONNECT frame to initialize \"system\" TCP connection")__		}_		Message<?> message = MessageBuilder.withPayloadAndHeaders(new byte[0], headers).build()__		session.open(message)__	};open,a,system,session,for,sending,messages,from,parts,of,the,application,not,assoicated,with,a,client,stomp,session;private,void,open,system,session,relay,session,session,new,relay,session,override,protected,void,send,message,to,client,message,message,this,relay,sessions,put,session,stomp,header,accessor,headers,stomp,header,accessor,create,stomp,command,connect,headers,set,accept,version,1,1,1,2,headers,set,login,this,system,login,headers,set,passcode,this,system,passcode,headers,set,heartbeat,0,0,if,logger,is,debug,enabled,logger,debug,sending,stomp,connect,frame,to,initialize,system,tcp,connection,message,message,message,builder,with,payload,and,headers,new,byte,0,headers,build,session,open,message
StompBrokerRelayMessageHandler -> private void openSystemSession();1375392687;Open a "system" session for sending messages from parts of the application_not associated with a client STOMP session.;private void openSystemSession() {__		RelaySession session = new RelaySession(STOMP_RELAY_SYSTEM_SESSION_ID) {_			@Override_			protected void sendMessageToClient(Message<?> message) {_				_				_			}_		}__		this.relaySessions.put(STOMP_RELAY_SYSTEM_SESSION_ID, session)___		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT)__		headers.setAcceptVersion("1.1,1.2")__		headers.setLogin(this.systemLogin)__		headers.setPasscode(this.systemPasscode)__		headers.setHeartbeat(0,0)_ __		if (logger.isDebugEnabled()) {_			logger.debug("Sending STOMP CONNECT frame to initialize \"system\" TCP connection")__		}_		Message<?> message = MessageBuilder.withPayloadAndHeaders(new byte[0], headers).build()__		session.open(message)__	};open,a,system,session,for,sending,messages,from,parts,of,the,application,not,associated,with,a,client,stomp,session;private,void,open,system,session,relay,session,session,new,relay,session,override,protected,void,send,message,to,client,message,message,this,relay,sessions,put,session,stomp,header,accessor,headers,stomp,header,accessor,create,stomp,command,connect,headers,set,accept,version,1,1,1,2,headers,set,login,this,system,login,headers,set,passcode,this,system,passcode,headers,set,heartbeat,0,0,if,logger,is,debug,enabled,logger,debug,sending,stomp,connect,frame,to,initialize,system,tcp,connection,message,message,message,builder,with,payload,and,headers,new,byte,0,headers,build,session,open,message
StompBrokerRelayMessageHandler -> private void openSystemSession();1376961359;Open a "system" session for sending messages from parts of the application_not associated with a client STOMP session.;private void openSystemSession() {__		RelaySession session = new RelaySession(STOMP_RELAY_SYSTEM_SESSION_ID) {_			@Override_			protected void sendMessageToClient(Message<?> message) {_				_				_			}_		}__		this.relaySessions.put(STOMP_RELAY_SYSTEM_SESSION_ID, session)___		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT)__		headers.setAcceptVersion("1.1,1.2")__		headers.setLogin(this.systemLogin)__		headers.setPasscode(this.systemPasscode)__		headers.setHeartbeat(0,0)_ __		if (logger.isDebugEnabled()) {_			logger.debug("Sending STOMP CONNECT frame to initialize \"system\" TCP connection")__		}_		Message<?> message = MessageBuilder.withPayloadAndHeaders(new byte[0], headers).build()__		session.open(message)__	};open,a,system,session,for,sending,messages,from,parts,of,the,application,not,associated,with,a,client,stomp,session;private,void,open,system,session,relay,session,session,new,relay,session,override,protected,void,send,message,to,client,message,message,this,relay,sessions,put,session,stomp,header,accessor,headers,stomp,header,accessor,create,stomp,command,connect,headers,set,accept,version,1,1,1,2,headers,set,login,this,system,login,headers,set,passcode,this,system,passcode,headers,set,heartbeat,0,0,if,logger,is,debug,enabled,logger,debug,sending,stomp,connect,frame,to,initialize,system,tcp,connection,message,message,message,builder,with,payload,and,headers,new,byte,0,headers,build,session,open,message
StompBrokerRelayMessageHandler -> private void openSystemSession();1376961359;Open a "system" session for sending messages from parts of the application_not associated with a client STOMP session.;private void openSystemSession() {__		RelaySession session = new RelaySession(STOMP_RELAY_SYSTEM_SESSION_ID) {_			@Override_			protected void sendMessageToClient(Message<?> message) {_				_				_			}_		}__		this.relaySessions.put(STOMP_RELAY_SYSTEM_SESSION_ID, session)___		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT)__		headers.setAcceptVersion("1.1,1.2")__		headers.setLogin(this.systemLogin)__		headers.setPasscode(this.systemPasscode)__		headers.setHeartbeat(0,0)_ __		if (logger.isDebugEnabled()) {_			logger.debug("Sending STOMP CONNECT frame to initialize \"system\" TCP connection")__		}_		Message<?> message = MessageBuilder.withPayloadAndHeaders(new byte[0], headers).build()__		session.open(message)__	};open,a,system,session,for,sending,messages,from,parts,of,the,application,not,associated,with,a,client,stomp,session;private,void,open,system,session,relay,session,session,new,relay,session,override,protected,void,send,message,to,client,message,message,this,relay,sessions,put,session,stomp,header,accessor,headers,stomp,header,accessor,create,stomp,command,connect,headers,set,accept,version,1,1,1,2,headers,set,login,this,system,login,headers,set,passcode,this,system,passcode,headers,set,heartbeat,0,0,if,logger,is,debug,enabled,logger,debug,sending,stomp,connect,frame,to,initialize,system,tcp,connection,message,message,message,builder,with,payload,and,headers,new,byte,0,headers,build,session,open,message
StompBrokerRelayMessageHandler -> private void openSystemSession();1376961359;Open a "system" session for sending messages from parts of the application_not associated with a client STOMP session.;private void openSystemSession() {__		RelaySession session = new RelaySession(STOMP_RELAY_SYSTEM_SESSION_ID) {__			@Override_			protected void sendMessageToClient(Message<?> message) {_				_				_			}__			@Override_			protected Composable<TcpConnection<String, String>> openConnection() {_				return tcpClient.open(new Reconnect() {_					@Override_					public Tuple2<InetSocketAddress, Long> reconnect(InetSocketAddress currentAddress, int attempt) {_						return Tuple.of(currentAddress, 5000L)__					}_				})__			}_		}___		this.relaySessions.put(STOMP_RELAY_SYSTEM_SESSION_ID, session)___		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT)__		headers.setAcceptVersion("1.1,1.2")__		headers.setLogin(this.systemLogin)__		headers.setPasscode(this.systemPasscode)__		headers.setHeartbeat(0,0)_ __		if (logger.isDebugEnabled()) {_			logger.debug("Sending STOMP CONNECT frame to initialize \"system\" TCP connection")__		}_		Message<?> message = MessageBuilder.withPayloadAndHeaders(new byte[0], headers).build()__		session.open(message)__	};open,a,system,session,for,sending,messages,from,parts,of,the,application,not,associated,with,a,client,stomp,session;private,void,open,system,session,relay,session,session,new,relay,session,override,protected,void,send,message,to,client,message,message,override,protected,composable,tcp,connection,string,string,open,connection,return,tcp,client,open,new,reconnect,override,public,tuple2,inet,socket,address,long,reconnect,inet,socket,address,current,address,int,attempt,return,tuple,of,current,address,5000l,this,relay,sessions,put,session,stomp,header,accessor,headers,stomp,header,accessor,create,stomp,command,connect,headers,set,accept,version,1,1,1,2,headers,set,login,this,system,login,headers,set,passcode,this,system,passcode,headers,set,heartbeat,0,0,if,logger,is,debug,enabled,logger,debug,sending,stomp,connect,frame,to,initialize,system,tcp,connection,message,message,message,builder,with,payload,and,headers,new,byte,0,headers,build,session,open,message
StompBrokerRelayMessageHandler -> private void openSystemSession();1376961360;Open a "system" session for sending messages from parts of the application_not associated with a client STOMP session.;private void openSystemSession() {__		RelaySession session = new RelaySession(STOMP_RELAY_SYSTEM_SESSION_ID) {__			@Override_			protected void sendMessageToClient(Message<?> message) {_				_				_			}__			@Override_			protected Composable<TcpConnection<String, String>> openConnection() {_				return tcpClient.open(new Reconnect() {_					@Override_					public Tuple2<InetSocketAddress, Long> reconnect(InetSocketAddress currentAddress, int attempt) {_						return Tuple.of(currentAddress, 5000L)__					}_				})__			}_		}___		this.relaySessions.put(STOMP_RELAY_SYSTEM_SESSION_ID, session)___		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT)__		headers.setAcceptVersion("1.1,1.2")__		headers.setLogin(this.systemLogin)__		headers.setPasscode(this.systemPasscode)__		headers.setHeartbeat(0,0)_ __		if (logger.isDebugEnabled()) {_			logger.debug("Sending STOMP CONNECT frame to initialize \"system\" TCP connection")__		}_		Message<?> message = MessageBuilder.withPayloadAndHeaders(new byte[0], headers).build()__		session.open(message)__	};open,a,system,session,for,sending,messages,from,parts,of,the,application,not,associated,with,a,client,stomp,session;private,void,open,system,session,relay,session,session,new,relay,session,override,protected,void,send,message,to,client,message,message,override,protected,composable,tcp,connection,string,string,open,connection,return,tcp,client,open,new,reconnect,override,public,tuple2,inet,socket,address,long,reconnect,inet,socket,address,current,address,int,attempt,return,tuple,of,current,address,5000l,this,relay,sessions,put,session,stomp,header,accessor,headers,stomp,header,accessor,create,stomp,command,connect,headers,set,accept,version,1,1,1,2,headers,set,login,this,system,login,headers,set,passcode,this,system,passcode,headers,set,heartbeat,0,0,if,logger,is,debug,enabled,logger,debug,sending,stomp,connect,frame,to,initialize,system,tcp,connection,message,message,message,builder,with,payload,and,headers,new,byte,0,headers,build,session,open,message
StompBrokerRelayMessageHandler -> private void openSystemSession();1376961360;Open a "system" session for sending messages from parts of the application_not associated with a client STOMP session.;private void openSystemSession() {__		RelaySession session = new RelaySession(STOMP_RELAY_SYSTEM_SESSION_ID) {__			@Override_			protected void sendMessageToClient(Message<?> message) {_				_				_			}__			@Override_			protected Composable<TcpConnection<String, String>> openConnection() {_				return tcpClient.open(new Reconnect() {_					@Override_					public Tuple2<InetSocketAddress, Long> reconnect(InetSocketAddress currentAddress, int attempt) {_						return Tuple.of(currentAddress, 5000L)__					}_				})__			}_		}___		this.relaySessions.put(STOMP_RELAY_SYSTEM_SESSION_ID, session)___		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT)__		headers.setAcceptVersion("1.1,1.2")__		headers.setLogin(this.systemLogin)__		headers.setPasscode(this.systemPasscode)__		headers.setHeartbeat(0,0)_ __		if (logger.isDebugEnabled()) {_			logger.debug("Sending STOMP CONNECT frame to initialize \"system\" TCP connection")__		}_		Message<?> message = MessageBuilder.withPayloadAndHeaders(new byte[0], headers).build()__		session.open(message)__	};open,a,system,session,for,sending,messages,from,parts,of,the,application,not,associated,with,a,client,stomp,session;private,void,open,system,session,relay,session,session,new,relay,session,override,protected,void,send,message,to,client,message,message,override,protected,composable,tcp,connection,string,string,open,connection,return,tcp,client,open,new,reconnect,override,public,tuple2,inet,socket,address,long,reconnect,inet,socket,address,current,address,int,attempt,return,tuple,of,current,address,5000l,this,relay,sessions,put,session,stomp,header,accessor,headers,stomp,header,accessor,create,stomp,command,connect,headers,set,accept,version,1,1,1,2,headers,set,login,this,system,login,headers,set,passcode,this,system,passcode,headers,set,heartbeat,0,0,if,logger,is,debug,enabled,logger,debug,sending,stomp,connect,frame,to,initialize,system,tcp,connection,message,message,message,builder,with,payload,and,headers,new,byte,0,headers,build,session,open,message
StompBrokerRelayMessageHandler -> public String getSystemLogin();1373756732;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1373924754;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1374083925;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1374099807;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1374115244;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1374422870;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1375392687;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1376961359;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1376961359;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1376961359;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1376961360;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1376961360;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1376961360;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1377656407;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1380226141;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1380245231;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1380565302;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1380573438;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1380589371;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1380675866;@return the login for a shared, "system" connection to the STOMP message broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,for,a,shared,system,connection,to,the,stomp,message,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1380745783;@return the login used by the "system" relay session to connect to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,by,the,system,relay,session,to,connect,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1381152424;@return the login used by the "system" relay session to connect to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,by,the,system,relay,session,to,connect,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1381799213;@return the login used by the "system" relay session to connect to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,by,the,system,relay,session,to,connect,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1382062574;@return the login used by the "system" relay session to connect to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,by,the,system,relay,session,to,connect,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1382062574;@return the login used by the "system" relay session to connect to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,by,the,system,relay,session,to,connect,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1382062575;@return the login used by the "system" connection to connect to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1382495681;@return the login used by the "system" connection to connect to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1382559988;@return the login used by the "system" connection to connect to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1384292065;@return the login used by the "system" connection to connect to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1385507478;@return the login used by the "system" connection to connect to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1386004713;@return the login used by the "system" connection to connect to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1386350678;@return the login used by the "system" connection to connect to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1386365044;@return the login used by the "system" connection to connect to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1387852827;@return the login used by the "system" connection to connect to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,by,the,system,connection,to,connect,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1387852827;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1393279654;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1394484373;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1394485082;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1395007965;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1395007965;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1395007965;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1395090675;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1395105194;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1395239748;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1396578670;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1397429525;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1397523793;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1398311203;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1398868011;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1398870027;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1398870703;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1400205617;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1403856366;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1404062102;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1404062122;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1404880787;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1404880799;@return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1409784938;Return the login used for the shared "system" connection to the STOMP broker;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1409790625;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1411389021;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1411699723;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1411747799;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1413848647;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1417548636;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1426887271;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1429286144;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1429874322;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1431728285;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1461047077;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1463066690;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1467730834;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1473887989;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1480558671;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1485203320;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1485213173;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1496259743;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1496837955;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1497341397;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1498780456;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1500448076;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1521562905;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1526485251;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1530174524;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1530174524;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1530174524;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1531942400;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1532091916;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> public String getSystemLogin();1532402679;Return the login used for the shared "system" connection to the STOMP broker.;public String getSystemLogin() {_		return this.systemLogin__	};return,the,login,used,for,the,shared,system,connection,to,the,stomp,broker;public,string,get,system,login,return,this,system,login
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1403856366;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failure while cleaning up state for TCP connection" +_								" in session " + this.sessionId, t)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failure,while,cleaning,up,state,for,tcp,connection,in,session,this,session,id,t
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1404062102;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failure while cleaning up state for TCP connection" +_								" in session " + this.sessionId, t)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failure,while,cleaning,up,state,for,tcp,connection,in,session,this,session,id,t
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1404062122;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failure while cleaning up state for TCP connection" +_								" in session " + this.sessionId, t)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failure,while,cleaning,up,state,for,tcp,connection,in,session,this,session,id,t
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1404880787;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failure while cleaning up state for TCP connection" +_								" in session " + this.sessionId, t)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failure,while,cleaning,up,state,for,tcp,connection,in,session,this,session,id,t
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1404880799;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failure while cleaning up state for TCP connection" +_								" in session " + this.sessionId, t)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failure,while,cleaning,up,state,for,tcp,connection,in,session,this,session,id,t
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1409784938;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isErrorEnabled()) {_						logger.error("Failure while cleaning up state for TCP connection in session " +_								this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,error,enabled,logger,error,failure,while,cleaning,up,state,for,tcp,connection,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1409790625;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isErrorEnabled()) {_						logger.error("Failure while cleaning up state for TCP connection in session " +_								this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,error,enabled,logger,error,failure,while,cleaning,up,state,for,tcp,connection,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1411389021;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isErrorEnabled()) {_						logger.error("Failure while cleaning up state for TCP connection in session " +_								this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,error,enabled,logger,error,failure,while,cleaning,up,state,for,tcp,connection,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1411699723;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isErrorEnabled()) {_						logger.error("Failure while cleaning up state for TCP connection in session " +_								this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,error,enabled,logger,error,failure,while,cleaning,up,state,for,tcp,connection,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1411747799;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1413848647;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1417548636;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1426887271;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1429286144;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1429874322;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1431728285;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1461047077;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1463066690;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1467730834;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1473887989;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1480558671;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1485203320;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, Throwable ex);1485213173;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions);1496837955;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,nullable,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions);1497341397;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,nullable,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions);1498780456;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,nullable,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions);1500448076;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,nullable,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions);1521562905;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,nullable,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions);1526485251;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,nullable,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions);1530174524;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,nullable,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions);1530174524;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,nullable,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions);1530174524;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,nullable,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions);1531942400;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,nullable,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions);1532091916;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,nullable,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions);1532402679;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(@Nullable Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,nullable,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1387852827;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1387852827;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1393279654;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1394484373;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1394485082;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1395007965;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1395007965;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1395007965;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1395090675;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1395105194;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1395239748;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1396578670;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1397429525;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1397523793;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1398311203;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1398868011;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1398870027;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1398870703;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1400205617;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1403856366;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1404062102;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1404062122;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1404880787;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1404880799;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1409784938;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1409790625;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1411389021;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1411699723;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1411747799;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1413848647;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1417548636;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1426887271;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1429286144;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1429874322;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1431728285;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1461047077;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1463066690;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1467730834;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1473887989;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1480558671;Get the configured TCP client. Never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized.;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1485203320;Get the configured TCP client (never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized).;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1485213173;Get the configured TCP client (never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized).;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public TcpOperations<byte[]> getTcpClient();1496259743;Get the configured TCP client (never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized).;public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1380745783;Set the maximum interval, in milliseconds, at which the "system" relay session_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the relay session to expect not to receive_heartbeats from the broker._<p>_The default value is 10000.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,relay,session,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,relay,session,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1381152424;Set the maximum interval, in milliseconds, at which the "system" relay session_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the relay session to expect not to receive_heartbeats from the broker._<p>_The default value is 10000.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,relay,session,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,relay,session,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1381799213;Set the maximum interval, in milliseconds, at which the "system" relay session_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the relay session to expect not to receive_heartbeats from the broker._<p>_The default value is 10000._<p>_See class-level documentation for more information on the "system" session.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,relay,session,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,relay,session,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,session;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1382062574;Set the maximum interval, in milliseconds, at which the "system" relay session_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the relay session to expect not to receive_heartbeats from the broker._<p>_The default value is 10000._<p>_See class-level documentation for more information on the "system" session.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,relay,session,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,relay,session,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,session;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1382062574;Set the maximum interval, in milliseconds, at which the "system" relay session_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the relay session to expect not to receive_heartbeats from the broker._<p>_The default value is 10000._<p>_See class-level documentation for more information on the "system" session.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,relay,session,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,relay,session,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,session;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1382062575;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>_The default value is 10000._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1382495681;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>_The default value is 10000._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1382559988;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>_The default value is 10000._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1384292065;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>_The default value is 10000._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1385507478;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1386004713;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1386350678;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1386365044;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1387852827;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1387852827;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1393279654;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1394484373;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1394485082;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1395007965;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1395007965;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1395007965;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1395090675;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1395105194;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1395239748;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1396578670;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1397429525;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1397523793;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1398311203;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1398868011;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1398870027;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1398870703;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1400205617;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1403856366;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1404062102;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1404062122;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1404880787;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1404880799;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1409784938;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1409790625;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1411389021;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1411699723;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1411747799;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1413848647;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1417548636;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1426887271;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1429286144;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1429874322;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1431728285;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1461047077;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1463066690;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1467730834;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1473887989;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1480558671;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1485203320;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1485213173;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1496259743;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1496837955;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1497341397;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1498780456;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1500448076;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1521562905;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1526485251;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1530174524;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1530174524;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1530174524;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1531942400;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1532091916;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval);1532402679;Set the maximum interval, in milliseconds, at which the "system" connection_expects, in the absence of any other data, to receive a heartbeat from the STOMP_broker. A value of zero will configure the connection to expect not to receive_heartbeats from the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {_		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval__	};set,the,maximum,interval,in,milliseconds,at,which,the,system,connection,expects,in,the,absence,of,any,other,data,to,receive,a,heartbeat,from,the,stomp,broker,a,value,of,zero,will,configure,the,connection,to,expect,not,to,receive,heartbeats,from,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,receive,interval,long,heartbeat,receive,interval,this,system,heartbeat,receive,interval,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1381799213;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>_By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1382062574;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>_By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1382062574;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>_By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1382062575;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>_By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1382495681;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>_By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1382559988;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>_By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1384292065;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>_By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1385507478;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1386004713;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1386350678;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1386365044;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1387852827;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1387852827;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1393279654;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1394484373;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1394485082;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1395007965;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1395007965;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1395007965;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1395090675;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1395105194;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1395239748;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1396578670;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1397429525;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1397523793;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1398311203;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1398868011;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1398870027;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1398870703;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1400205617;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1403856366;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1404062102;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1404062122;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1404880787;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1404880799;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1409784938;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1409790625;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1411389021;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1411699723;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1411747799;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1413848647;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1417548636;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1426887271;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1429286144;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1429874322;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1431728285;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1461047077;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1463066690;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1467730834;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1473887989;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1480558671;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1485203320;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1485213173;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1496259743;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1496837955;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1497341397;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(String virtualHost);1498780456;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1382062575;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1382495681;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1382559988;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1384292065;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1385507478;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1386004713;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1386350678;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1386365044;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1387852827;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1387852827;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1393279654;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1394484373;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1394485082;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1395007965;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1395007965;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1395007965;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1395090675;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1395105194;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1395239748;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1396578670;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1397429525;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1397523793;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1398311203;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1398868011;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1398870027;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1398870703;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1400205617;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1403856366;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1404062102;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1404062122;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1404880787;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1404880799;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1409784938;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1409790625;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1411389021;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1411699723;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1411747799;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1413848647;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1417548636;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1426887271;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1429286144;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1429874322;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1431728285;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1461047077;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1463066690;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1467730834;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1473887989;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1480558671;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1485203320;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1485213173;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1496259743;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1496837955;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1497341397;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1498780456;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1500448076;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1521562905;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1526485251;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1530174524;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1530174524;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1530174524;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1531942400;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1532091916;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void afterStompConnected(StompHeaderAccessor connectedHeaders);1532402679;Invoked after the STOMP CONNECTED frame is received. At this point the_connection is ready for sending STOMP messages to the broker.;protected void afterStompConnected(StompHeaderAccessor connectedHeaders) {_			this.isStompConnected = true__			stats.incrementConnectedCount()__			initHeartbeats(connectedHeaders)__		};invoked,after,the,stomp,connected,frame,is,received,at,this,point,the,connection,is,ready,for,sending,stomp,messages,to,the,broker;protected,void,after,stomp,connected,stomp,header,accessor,connected,headers,this,is,stomp,connected,true,stats,increment,connected,count,init,heartbeats,connected,headers
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1387852827;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1393279654;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1394484373;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1394485082;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1395007965;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1395007965;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1395007965;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1395090675;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1395105194;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1395239748;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1396578670;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1397429525;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1397523793;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1398311203;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1398868011;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1398870027;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1398870703;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1400205617;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1403856366;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1404062102;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1404062122;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1404880787;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1404880799;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemPasscode(String);public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode,string;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1409784938;Set the clientPasscode to use to create connections to the STOMP broker on_behalf of connected clients._<p> By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1409790625;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1411389021;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1411699723;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1411747799;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1413848647;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1417548636;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1426887271;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1429286144;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1429874322;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1431728285;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1461047077;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1463066690;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1467730834;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1473887989;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1480558671;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1485203320;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1485213173;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1496259743;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1496837955;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1497341397;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1498780456;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1500448076;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1521562905;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1526485251;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1530174524;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1530174524;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1530174524;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1531942400;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1532091916;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setClientPasscode(String clientPasscode);1532402679;Set the client passcode to use to create connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemPasscode;public void setClientPasscode(String clientPasscode) {_		Assert.hasText(clientPasscode, "clientPasscode must not be empty")__		this.clientPasscode = clientPasscode__	};set,the,client,passcode,to,use,to,create,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,passcode;public,void,set,client,passcode,string,client,passcode,assert,has,text,client,passcode,client,passcode,must,not,be,empty,this,client,passcode,client,passcode
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1382062575;Configure the TCP client to for managing STOMP over TCP connections to the message_broker. This is an optional property that can be used to replace the default_implementation used for example for testing purposes._<p>_By default an instance of {@link ReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,the,tcp,client,to,for,managing,stomp,over,tcp,connections,to,the,message,broker,this,is,an,optional,property,that,can,be,used,to,replace,the,default,implementation,used,for,example,for,testing,purposes,p,by,default,an,instance,of,link,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1382495681;Configure the TCP client to for managing STOMP over TCP connections to the message_broker. This is an optional property that can be used to replace the default_implementation used for example for testing purposes._<p>_By default an instance of {@link ReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,the,tcp,client,to,for,managing,stomp,over,tcp,connections,to,the,message,broker,this,is,an,optional,property,that,can,be,used,to,replace,the,default,implementation,used,for,example,for,testing,purposes,p,by,default,an,instance,of,link,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1387852827;Configure a TCP client for managing TCP connections to the STOMP broker. By default_{@link org.springframework.messaging.simp.stomp.StompReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,simp,stomp,stomp,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1387852827;Configure a TCP client for managing TCP connections to the STOMP broker. By default_{@link org.springframework.messaging.simp.stomp.StompReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,simp,stomp,stomp,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1393279654;Configure a TCP client for managing TCP connections to the STOMP broker. By default_{@link org.springframework.messaging.simp.stomp.StompReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,simp,stomp,stomp,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1394484373;Configure a TCP client for managing TCP connections to the STOMP broker. By default_{@link org.springframework.messaging.simp.stomp.StompReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,simp,stomp,stomp,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1394485082;Configure a TCP client for managing TCP connections to the STOMP broker. By default_{@link org.springframework.messaging.simp.stomp.StompReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,simp,stomp,stomp,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1395007965;Configure a TCP client for managing TCP connections to the STOMP broker. By default_{@link org.springframework.messaging.simp.stomp.StompReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,simp,stomp,stomp,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1395007965;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1395007965;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.ReactorTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1395090675;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.ReactorTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1395105194;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.ReactorTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1395239748;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.ReactorTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1396578670;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.ReactorTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1397429525;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.ReactorTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1397523793;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.ReactorTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1398311203;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1398868011;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1398870027;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1398870703;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1400205617;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1403856366;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1404062102;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1404062122;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1404880787;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1404880799;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1409784938;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1409790625;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1411389021;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1411699723;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1411747799;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1413848647;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1417548636;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1426887271;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1429286144;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link org.springframework.messaging.tcp.reactor.Reactor11TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,org,springframework,messaging,tcp,reactor,reactor11tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1429874322;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link Reactor2TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,reactor2tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1431728285;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link Reactor2TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,reactor2tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1461047077;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link Reactor2TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,reactor2tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1463066690;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link Reactor2TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,reactor2tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1467730834;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link Reactor2TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,reactor2tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1473887989;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link Reactor2TcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,reactor2tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1480558671;Configure a TCP client for managing TCP connections to the STOMP broker._By default {@link ReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,by,default,link,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1485203320;Configure a TCP client for managing TCP connections to the STOMP broker._<p>By default {@link ReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,p,by,default,link,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1485213173;Configure a TCP client for managing TCP connections to the STOMP broker._<p>By default {@link ReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,p,by,default,link,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1496259743;Configure a TCP client for managing TCP connections to the STOMP broker._<p>By default {@link ReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,p,by,default,link,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1496837955;Configure a TCP client for managing TCP connections to the STOMP broker._<p>By default {@link ReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,p,by,default,link,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1497341397;Configure a TCP client for managing TCP connections to the STOMP broker._<p>By default {@link ReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,p,by,default,link,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(TcpOperations<byte[]> tcpClient);1498780456;Configure a TCP client for managing TCP connections to the STOMP broker._<p>By default {@link ReactorNettyTcpClient} is used.;public void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,p,by,default,link,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions);1429286144;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions);1429874322;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions);1431728285;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions);1461047077;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions);1463066690;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions);1467730834;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions);1473887989;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions);1480558671;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions);1485203320;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions);1485213173;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions);1496259743;Configure one more destinations to subscribe to on the shared "system"_connection along with MessageHandler's to handle received messages._<p>This is for internal use in a multi-application server scenario where_servers forward messages to each other (e.g. unresolved user destinations)._@param subscriptions the destinations to subscribe to.;public void setSystemSubscriptions(Map<String, MessageHandler> subscriptions) {_		this.systemSubscriptions.clear()__		if (subscriptions != null) {_			this.systemSubscriptions.putAll(subscriptions)__		}_	};configure,one,more,destinations,to,subscribe,to,on,the,shared,system,connection,along,with,message,handler,s,to,handle,received,messages,p,this,is,for,internal,use,in,a,multi,application,server,scenario,where,servers,forward,messages,to,each,other,e,g,unresolved,user,destinations,param,subscriptions,the,destinations,to,subscribe,to;public,void,set,system,subscriptions,map,string,message,handler,subscriptions,this,system,subscriptions,clear,if,subscriptions,null,this,system,subscriptions,put,all,subscriptions
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1373756732;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1373924754;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1374083925;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1374099807;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1374115244;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1374422870;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1375392687;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1376961359;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1376961359;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1376961359;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1376961360;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1376961360;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1376961360;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1377656407;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1380226141;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1380245231;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1380565302;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1380573438;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1380589371;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1380675866;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1380745783;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1381152424;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1381799213;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1382062574;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1382062574;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1382062575;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1382495681;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1382559988;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1384292065;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1385507478;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1386004713;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1386350678;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1386365044;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1387852827;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1387852827;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1393279654;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1394484373;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1394485082;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1395007965;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1395007965;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1395007965;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1395090675;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1395105194;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1395239748;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1396578670;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1397429525;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1397523793;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1398311203;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1398868011;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1398870027;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1398870703;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1400205617;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1403856366;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1404062102;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1404062122;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1404880787;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1404880799;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1409784938;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1409790625;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1411389021;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1411699723;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1411747799;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1413848647;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1417548636;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1426887271;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1429286144;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1429874322;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1431728285;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1461047077;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1463066690;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1467730834;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1473887989;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1480558671;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1485203320;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1485213173;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1496259743;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1496837955;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1497341397;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1498780456;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1500448076;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1521562905;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1526485251;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1530174524;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1530174524;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1530174524;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1531942400;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1532091916;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public void setRelayHost(String relayHost);1532402679;Set the STOMP message broker host.;public void setRelayHost(String relayHost) {_		Assert.hasText(relayHost, "relayHost must not be empty")__		this.relayHost = relayHost__	};set,the,stomp,message,broker,host;public,void,set,relay,host,string,relay,host,assert,has,text,relay,host,relay,host,must,not,be,empty,this,relay,host,relay,host
StompBrokerRelayMessageHandler -> public String getStatsInfo();1404880787;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1404880799;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1409784938;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1409790625;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1411389021;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1411699723;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1411747799;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1413848647;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1417548636;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1426887271;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1429286144;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1429874322;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1431728285;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1461047077;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1463066690;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1467730834;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1473887989;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1480558671;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1485203320;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1485213173;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1496259743;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1496837955;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1497341397;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1498780456;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1500448076;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1521562905;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1526485251;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1530174524;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1530174524;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1530174524;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1531942400;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1532091916;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> public String getStatsInfo();1532402679;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
StompBrokerRelayMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1496837955;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1497341397;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1498780456;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1500448076;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1521562905;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1526485251;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1530174524;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1530174524;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1530174524;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1531942400;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1532091916;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1532402679;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1380745783;Set the interval, in milliseconds, at which the "system" relay session will,_in the absence of any other data being sent, send a heartbeat to the STOMP broker._A value of zero will prevent heartbeats from being sent to the broker._<p>_The default value is 10000.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,relay,session,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1381152424;Set the interval, in milliseconds, at which the "system" relay session will,_in the absence of any other data being sent, send a heartbeat to the STOMP broker._A value of zero will prevent heartbeats from being sent to the broker._<p>_The default value is 10000.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,relay,session,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1381799213;Set the interval, in milliseconds, at which the "system" relay session will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>_The default value is 10000._<p>_See class-level documentation for more information on the "system" session.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,relay,session,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,session;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1382062574;Set the interval, in milliseconds, at which the "system" relay session will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>_The default value is 10000._<p>_See class-level documentation for more information on the "system" session.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,relay,session,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,session;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1382062574;Set the interval, in milliseconds, at which the "system" relay session will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>_The default value is 10000._<p>_See class-level documentation for more information on the "system" session.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,relay,session,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,session;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1382062575;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>_The default value is 10000._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1382495681;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>_The default value is 10000._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1382559988;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>_The default value is 10000._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1384292065;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>_The default value is 10000._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1385507478;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1386004713;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1386350678;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1386365044;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1387852827;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1387852827;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1393279654;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1394484373;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1394485082;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1395007965;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1395007965;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1395007965;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1395090675;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1395105194;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1395239748;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1396578670;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1397429525;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1397523793;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1398311203;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1398868011;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1398870027;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1398870703;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1400205617;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1403856366;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1404062102;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1404062122;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1404880787;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1404880799;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1409784938;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1409790625;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1411389021;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1411699723;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1411747799;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1413848647;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1417548636;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1426887271;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1429286144;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1429874322;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1431728285;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1461047077;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1463066690;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1467730834;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1473887989;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1480558671;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1485203320;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1485213173;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1496259743;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1496837955;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1497341397;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1498780456;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1500448076;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1521562905;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1526485251;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1530174524;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1530174524;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1530174524;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1531942400;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1532091916;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval);1532402679;Set the interval, in milliseconds, at which the "system" connection will, in the_absence of any other data being sent, send a heartbeat to the STOMP broker. A value_of zero will prevent heartbeats from being sent to the broker._<p>The default value is 10000._<p>See class-level documentation for more information on the "system" connection.;public void setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {_		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval__	};set,the,interval,in,milliseconds,at,which,the,system,connection,will,in,the,absence,of,any,other,data,being,sent,send,a,heartbeat,to,the,stomp,broker,a,value,of,zero,will,prevent,heartbeats,from,being,sent,to,the,broker,p,the,default,value,is,10000,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,heartbeat,send,interval,long,system,heartbeat,send,interval,this,system,heartbeat,send,interval,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1387852827;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1393279654;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1394484373;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1394485082;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1395007965;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1395007965;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1395007965;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1395090675;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1395105194;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1395239748;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1396578670;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1397429525;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1397523793;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1398311203;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1398868011;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1398870027;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1398870703;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1400205617;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1403856366;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1404062102;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1404062122;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1404880787;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1404880799;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>_By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1409784938;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1409790625;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1411389021;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1411699723;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1411747799;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1413848647;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1417548636;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1426887271;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1429286144;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1429874322;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1431728285;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1461047077;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1463066690;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1467730834;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1473887989;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1480558671;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1485203320;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1485213173;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1496259743;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1496837955;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1497341397;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1498780456;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1500448076;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1521562905;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1526485251;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1530174524;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1530174524;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1530174524;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1531942400;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1532091916;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public void setClientLogin(String clientLogin);1532402679;Set the login to use when creating connections to the STOMP broker on_behalf of connected clients._<p>By default this is set to "guest"._@see #setSystemLogin(String);public void setClientLogin(String clientLogin) {_		Assert.hasText(clientLogin, "clientLogin must not be empty")__		this.clientLogin = clientLogin__	};set,the,login,to,use,when,creating,connections,to,the,stomp,broker,on,behalf,of,connected,clients,p,by,default,this,is,set,to,guest,see,set,system,login,string;public,void,set,client,login,string,client,login,assert,has,text,client,login,client,login,must,not,be,empty,this,client,login,client,login
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel outboundChannel, Collection<String> destinationPrefixes);1373756732;@param outboundChannel a channel for messages going out to clients_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel outboundChannel, Collection<String> destinationPrefixes) {_		Assert.notNull(outboundChannel, "outboundChannel is required")__		Assert.notNull(destinationPrefixes, "destinationPrefixes is required")__		this.outboundChannel = outboundChannel__		this.destinationPrefixes = destinationPrefixes.toArray(new String[destinationPrefixes.size()])__	};param,outbound,channel,a,channel,for,messages,going,out,to,clients,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,outbound,channel,collection,string,destination,prefixes,assert,not,null,outbound,channel,outbound,channel,is,required,assert,not,null,destination,prefixes,destination,prefixes,is,required,this,outbound,channel,outbound,channel,this,destination,prefixes,destination,prefixes,to,array,new,string,destination,prefixes,size
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel outboundChannel, Collection<String> destinationPrefixes);1373924754;@param outboundChannel a channel for messages going out to clients_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel outboundChannel, Collection<String> destinationPrefixes) {_		Assert.notNull(outboundChannel, "outboundChannel is required")__		Assert.notNull(destinationPrefixes, "destinationPrefixes is required")__		this.outboundChannel = outboundChannel__		this.destinationPrefixes = destinationPrefixes.toArray(new String[destinationPrefixes.size()])__	};param,outbound,channel,a,channel,for,messages,going,out,to,clients,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,outbound,channel,collection,string,destination,prefixes,assert,not,null,outbound,channel,outbound,channel,is,required,assert,not,null,destination,prefixes,destination,prefixes,is,required,this,outbound,channel,outbound,channel,this,destination,prefixes,destination,prefixes,to,array,new,string,destination,prefixes,size
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(MessageChannel outboundChannel, Collection<String> destinationPrefixes);1374083925;@param outboundChannel a channel for messages going out to clients_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(MessageChannel outboundChannel, Collection<String> destinationPrefixes) {_		Assert.notNull(outboundChannel, "outboundChannel is required")__		Assert.notNull(destinationPrefixes, "destinationPrefixes is required")__		this.outboundChannel = outboundChannel__		this.destinationPrefixes = destinationPrefixes.toArray(new String[destinationPrefixes.size()])__	};param,outbound,channel,a,channel,for,messages,going,out,to,clients,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,message,channel,outbound,channel,collection,string,destination,prefixes,assert,not,null,outbound,channel,outbound,channel,is,required,assert,not,null,destination,prefixes,destination,prefixes,is,required,this,outbound,channel,outbound,channel,this,destination,prefixes,destination,prefixes,to,array,new,string,destination,prefixes,size
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1380745783;@return The interval, in milliseconds, at which the "system" relay session will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,relay,session,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1381152424;@return The interval, in milliseconds, at which the "system" relay session will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,relay,session,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1381799213;@return The interval, in milliseconds, at which the "system" relay session will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,relay,session,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1382062574;@return The interval, in milliseconds, at which the "system" relay session will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,relay,session,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1382062574;@return The interval, in milliseconds, at which the "system" relay session will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,relay,session,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1382062575;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1382495681;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1382559988;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1384292065;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1385507478;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1386004713;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1386350678;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1386365044;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1387852827;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1387852827;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1393279654;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1394484373;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1394485082;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1395007965;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1395007965;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1395007965;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1395090675;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1395105194;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1395239748;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1396578670;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1397429525;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1397523793;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1398311203;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1398868011;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1398870027;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1398870703;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1400205617;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1403856366;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1404062102;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1404062122;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1404880787;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1404880799;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1409784938;@return The interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1409790625;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1411389021;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1411699723;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1411747799;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1413848647;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1417548636;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1426887271;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1429286144;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1429874322;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1431728285;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1461047077;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1463066690;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1467730834;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1473887989;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1480558671;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1485203320;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1485213173;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1496259743;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1496837955;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1497341397;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1498780456;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1500448076;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1521562905;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1526485251;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1530174524;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1530174524;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1530174524;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1531942400;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1532091916;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatSendInterval();1532402679;Return the interval, in milliseconds, at which the "system" connection will_send heartbeats to the STOMP broker.;public long getSystemHeartbeatSendInterval() {_		return this.systemHeartbeatSendInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,will,send,heartbeats,to,the,stomp,broker;public,long,get,system,heartbeat,send,interval,return,this,system,heartbeat,send,interval
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1382062575;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId=" + this.sessionId, ex)__			}_			resetTcpConnection()__			sendStompErrorToClient(errorMessage)__		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,reset,tcp,connection,send,stomp,error,to,client,error,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1382495681;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId=" + this.sessionId, ex)__			}_			resetTcpConnection()__			sendStompErrorToClient(errorMessage)__		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,reset,tcp,connection,send,stomp,error,to,client,error,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1382559988;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId=" + this.sessionId, ex)__			}_			resetTcpConnection()__			sendStompErrorToClient(errorMessage)__		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,reset,tcp,connection,send,stomp,error,to,client,error,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1384292065;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId=" + this.sessionId, ex)__			}_			resetTcpConnection()__			sendStompErrorToClient(errorMessage)__		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,reset,tcp,connection,send,stomp,error,to,client,error,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1385507478;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId=" + this.sessionId, ex)__			}_			resetTcpConnection()__			sendStompErrorToClient(errorMessage)__		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,reset,tcp,connection,send,stomp,error,to,client,error,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1386004713;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId=" + this.sessionId, ex)__			}_			resetTcpConnection()__			sendStompErrorToClient(errorMessage)__		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,reset,tcp,connection,send,stomp,error,to,client,error,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1386350678;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId=" + this.sessionId, ex)__			}_			resetTcpConnection()__			sendStompErrorToClient(errorMessage)__		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,reset,tcp,connection,send,stomp,error,to,client,error,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1386365044;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId=" + this.sessionId, ex)__			}_			resetTcpConnection()__			sendStompErrorToClient(errorMessage)__		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,reset,tcp,connection,send,stomp,error,to,client,error,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1387852827;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId=" + this.sessionId, ex)__			}_			resetTcpConnection()__			sendStompErrorToClient(errorMessage)__		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,reset,tcp,connection,send,stomp,error,to,client,error,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1387852827;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId=" + this.sessionId, ex)__			}_			resetTcpConnection()__			sendStompErrorToClient(errorMessage)__		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,reset,tcp,connection,send,stomp,error,to,client,error,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1393279654;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId=" + this.sessionId, ex)__			}_			resetTcpConnection()__			sendStompErrorToClient(errorMessage)__		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,reset,tcp,connection,send,stomp,error,to,client,error,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1394484373;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId=" + this.sessionId, ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1394485082;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId=" + this.sessionId, ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1395007965;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId '" + this.sessionId + "'", ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1395007965;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId '" + this.sessionId + "'", ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1395007965;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId '" + this.sessionId + "'", ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1395090675;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId '" + this.sessionId + "'", ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1395105194;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId '" + this.sessionId + "'", ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1395239748;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId '" + this.sessionId + "'", ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1396578670;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId '" + this.sessionId + "'", ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1397429525;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId '" + this.sessionId + "'", ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1397523793;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId '" + this.sessionId + "'", ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1398311203;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId '" + this.sessionId + "'", ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1398868011;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId '" + this.sessionId + "'", ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1398870027;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId '" + this.sessionId + "'", ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1398870703;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId '" + this.sessionId + "'", ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String errorMessage, Throwable ex);1400205617;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat.;protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error(errorMessage + ", sessionId '" + this.sessionId + "'", ex)__			}_			try {_				sendStompErrorToClient(errorMessage)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable t) {_					if (logger.isErrorEnabled()) {_						logger.error("Failed to close connection: " + t.getMessage())__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat;protected,void,handle,tcp,connection,failure,string,error,message,throwable,ex,if,logger,is,error,enabled,logger,error,error,message,session,id,this,session,id,ex,try,send,stomp,error,to,client,error,message,finally,try,clear,connection,catch,throwable,t,if,logger,is,error,enabled,logger,error,failed,to,close,connection,t,get,message
StompBrokerRelayMessageHandler -> public String[] getDestinationPrefixes();1373756732;@return the configured STOMP broker supported destination prefixes.;public String[] getDestinationPrefixes() {_		return destinationPrefixes__	};return,the,configured,stomp,broker,supported,destination,prefixes;public,string,get,destination,prefixes,return,destination,prefixes
StompBrokerRelayMessageHandler -> public String[] getDestinationPrefixes();1373924754;@return the configured STOMP broker supported destination prefixes.;public String[] getDestinationPrefixes() {_		return destinationPrefixes__	};return,the,configured,stomp,broker,supported,destination,prefixes;public,string,get,destination,prefixes,return,destination,prefixes
StompBrokerRelayMessageHandler -> public String[] getDestinationPrefixes();1374083925;@return the configured STOMP broker supported destination prefixes.;public String[] getDestinationPrefixes() {_		return destinationPrefixes__	};return,the,configured,stomp,broker,supported,destination,prefixes;public,string,get,destination,prefixes,return,destination,prefixes
StompBrokerRelayMessageHandler -> public String[] getDestinationPrefixes();1374099807;@return the configured STOMP broker supported destination prefixes.;public String[] getDestinationPrefixes() {_		return destinationPrefixes__	};return,the,configured,stomp,broker,supported,destination,prefixes;public,string,get,destination,prefixes,return,destination,prefixes
StompBrokerRelayMessageHandler -> public String[] getDestinationPrefixes();1374115244;@return the configured STOMP broker supported destination prefixes.;public String[] getDestinationPrefixes() {_		return destinationPrefixes__	};return,the,configured,stomp,broker,supported,destination,prefixes;public,string,get,destination,prefixes,return,destination,prefixes
StompBrokerRelayMessageHandler -> public String[] getDestinationPrefixes();1374422870;@return the configured STOMP broker supported destination prefixes.;public String[] getDestinationPrefixes() {_		return destinationPrefixes__	};return,the,configured,stomp,broker,supported,destination,prefixes;public,string,get,destination,prefixes,return,destination,prefixes
StompBrokerRelayMessageHandler -> public String[] getDestinationPrefixes();1375392687;@return the configured STOMP broker supported destination prefixes.;public String[] getDestinationPrefixes() {_		return destinationPrefixes__	};return,the,configured,stomp,broker,supported,destination,prefixes;public,string,get,destination,prefixes,return,destination,prefixes
StompBrokerRelayMessageHandler -> public String[] getDestinationPrefixes();1376961359;@return the configured STOMP broker supported destination prefixes.;public String[] getDestinationPrefixes() {_		return destinationPrefixes__	};return,the,configured,stomp,broker,supported,destination,prefixes;public,string,get,destination,prefixes,return,destination,prefixes
StompBrokerRelayMessageHandler -> public String[] getDestinationPrefixes();1376961359;@return the configured STOMP broker supported destination prefixes.;public String[] getDestinationPrefixes() {_		return destinationPrefixes__	};return,the,configured,stomp,broker,supported,destination,prefixes;public,string,get,destination,prefixes,return,destination,prefixes
StompBrokerRelayMessageHandler -> public String[] getDestinationPrefixes();1376961359;@return the configured STOMP broker supported destination prefixes.;public String[] getDestinationPrefixes() {_		return destinationPrefixes__	};return,the,configured,stomp,broker,supported,destination,prefixes;public,string,get,destination,prefixes,return,destination,prefixes
StompBrokerRelayMessageHandler -> public String[] getDestinationPrefixes();1376961360;@return the configured STOMP broker supported destination prefixes.;public String[] getDestinationPrefixes() {_		return destinationPrefixes__	};return,the,configured,stomp,broker,supported,destination,prefixes;public,string,get,destination,prefixes,return,destination,prefixes
StompBrokerRelayMessageHandler -> public String[] getDestinationPrefixes();1376961360;@return the configured STOMP broker supported destination prefixes.;public String[] getDestinationPrefixes() {_		return destinationPrefixes__	};return,the,configured,stomp,broker,supported,destination,prefixes;public,string,get,destination,prefixes,return,destination,prefixes
StompBrokerRelayMessageHandler -> public String[] getDestinationPrefixes();1376961360;@return the configured STOMP broker supported destination prefixes.;public String[] getDestinationPrefixes() {_		return destinationPrefixes__	};return,the,configured,stomp,broker,supported,destination,prefixes;public,string,get,destination,prefixes,return,destination,prefixes
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1386004713;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")____		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1386350678;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")____		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1386365044;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")____		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1387852827;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")____		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1387852827;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")____		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1393279654;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")____		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1394484373;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")____		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1394485082;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")____		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1395007965;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1395007965;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1395007965;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1395090675;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1395105194;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1395239748;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1396578670;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1397429525;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1397523793;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1398311203;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1398868011;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1398870027;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1398870703;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1400205617;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1403856366;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1404062102;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1404062122;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1404880787;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1404880799;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes.__@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1409784938;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)__		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1409790625;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)__		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1411389021;Create a StompBrokerRelayMessageHandler instance with the given message channels_and destination prefixes._@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes the broker supported destination prefixes_ destinations_that do not match the given prefix are ignored.;public StompBrokerRelayMessageHandler(SubscribableChannel clientInChannel, MessageChannel clientOutChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)__		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(clientOutChannel, "'clientOutChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		this.clientInboundChannel = clientInChannel__		this.clientOutboundChannel = clientOutChannel__		this.brokerChannel = brokerChannel__	};create,a,stomp,broker,relay,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,out,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,the,broker,supported,destination,prefixes,destinations,that,do,not,match,the,given,prefix,are,ignored;public,stomp,broker,relay,message,handler,subscribable,channel,client,in,channel,message,channel,client,out,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,client,out,channel,client,out,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,in,channel,this,client,outbound,channel,client,out,channel,this,broker,channel,broker,channel
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1394484373;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			this.isStompConnected = false___			try {_				TcpConnection<byte[]> conn = this.tcpConnection__				this.tcpConnection = null__				if (conn != null) {_					conn.close()__				}_			}_			finally {_				if (this.isRemoteClientSession) {_					StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__				}_			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,this,is,stomp,connected,false,try,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close,finally,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1394485082;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			this.isStompConnected = false___			try {_				TcpConnection<byte[]> conn = this.tcpConnection__				this.tcpConnection = null__				if (conn != null) {_					conn.close()__				}_			}_			finally {_				if (this.isRemoteClientSession) {_					StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__				}_			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,this,is,stomp,connected,false,try,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close,finally,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1395007965;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			this.isStompConnected = false___			try {_				TcpConnection<byte[]> conn = this.tcpConnection__				this.tcpConnection = null__				if (conn != null) {_					conn.close()__				}_			}_			finally {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("Removing session '" + sessionId + "' (total remaining=" +_								(StompBrokerRelayMessageHandler.this.connectionHandlers.size() - 1) + ")")__					}_					StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__				}_			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,this,is,stomp,connected,false,try,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close,finally,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,removing,session,session,id,total,remaining,stomp,broker,relay,message,handler,this,connection,handlers,size,1,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1395007965;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			this.isStompConnected = false___			try {_				TcpConnection<byte[]> conn = this.tcpConnection__				this.tcpConnection = null__				if (conn != null) {_					conn.close()__				}_			}_			finally {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("Removing session '" + sessionId + "' (total remaining=" +_								(StompBrokerRelayMessageHandler.this.connectionHandlers.size() - 1) + ")")__					}_					StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__				}_			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,this,is,stomp,connected,false,try,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close,finally,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,removing,session,session,id,total,remaining,stomp,broker,relay,message,handler,this,connection,handlers,size,1,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1395007965;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			this.isStompConnected = false___			try {_				TcpConnection<byte[]> conn = this.tcpConnection__				this.tcpConnection = null__				if (conn != null) {_					conn.close()__				}_			}_			finally {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("Removing session '" + sessionId + "' (total remaining=" +_								(StompBrokerRelayMessageHandler.this.connectionHandlers.size() - 1) + ")")__					}_					StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__				}_			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,this,is,stomp,connected,false,try,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close,finally,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,removing,session,session,id,total,remaining,stomp,broker,relay,message,handler,this,connection,handlers,size,1,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1395090675;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			if (this.isRemoteClientSession) {_				if (logger.isDebugEnabled()) {_					logger.debug("Removing session '" + sessionId + "' (total remaining=" +_							(StompBrokerRelayMessageHandler.this.connectionHandlers.size() - 1) + ")")__				}_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				conn.close()__			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,removing,session,session,id,total,remaining,stomp,broker,relay,message,handler,this,connection,handlers,size,1,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1395105194;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			if (this.isRemoteClientSession) {_				if (logger.isDebugEnabled()) {_					logger.debug("Removing session '" + sessionId + "' (total remaining=" +_							(StompBrokerRelayMessageHandler.this.connectionHandlers.size() - 1) + ")")__				}_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				conn.close()__			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,removing,session,session,id,total,remaining,stomp,broker,relay,message,handler,this,connection,handlers,size,1,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1395239748;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			if (this.isRemoteClientSession) {_				if (logger.isDebugEnabled()) {_					logger.debug("Removing session '" + sessionId + "' (total remaining=" +_							(StompBrokerRelayMessageHandler.this.connectionHandlers.size() - 1) + ")")__				}_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				conn.close()__			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,removing,session,session,id,total,remaining,stomp,broker,relay,message,handler,this,connection,handlers,size,1,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1396578670;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			if (this.isRemoteClientSession) {_				if (logger.isDebugEnabled()) {_					logger.debug("Removing session '" + sessionId + "' (total remaining=" +_							(StompBrokerRelayMessageHandler.this.connectionHandlers.size() - 1) + ")")__				}_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				conn.close()__			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,removing,session,session,id,total,remaining,stomp,broker,relay,message,handler,this,connection,handlers,size,1,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1397429525;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			if (this.isRemoteClientSession) {_				if (logger.isDebugEnabled()) {_					logger.debug("Removing session '" + sessionId + "' (total remaining=" +_							(StompBrokerRelayMessageHandler.this.connectionHandlers.size() - 1) + ")")__				}_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				conn.close()__			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,removing,session,session,id,total,remaining,stomp,broker,relay,message,handler,this,connection,handlers,size,1,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1397523793;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			if (this.isRemoteClientSession) {_				if (logger.isDebugEnabled()) {_					logger.debug("Removing session '" + sessionId + "' (total remaining=" +_							(StompBrokerRelayMessageHandler.this.connectionHandlers.size() - 1) + ")")__				}_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				conn.close()__			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,removing,session,session,id,total,remaining,stomp,broker,relay,message,handler,this,connection,handlers,size,1,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1398311203;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			if (this.isRemoteClientSession) {_				if (logger.isDebugEnabled()) {_					logger.debug("Removing session '" + sessionId + "' (total remaining=" +_							(StompBrokerRelayMessageHandler.this.connectionHandlers.size() - 1) + ")")__				}_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				conn.close()__			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,removing,session,session,id,total,remaining,stomp,broker,relay,message,handler,this,connection,handlers,size,1,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1398868011;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			if (this.isRemoteClientSession) {_				if (logger.isDebugEnabled()) {_					logger.debug("Removing session '" + sessionId + "' (total remaining=" +_							(StompBrokerRelayMessageHandler.this.connectionHandlers.size() - 1) + ")")__				}_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				conn.close()__			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,removing,session,session,id,total,remaining,stomp,broker,relay,message,handler,this,connection,handlers,size,1,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1398870027;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			if (this.isRemoteClientSession) {_				if (logger.isDebugEnabled()) {_					logger.debug("Removing session '" + sessionId + "' (total remaining=" +_							(StompBrokerRelayMessageHandler.this.connectionHandlers.size() - 1) + ")")__				}_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				conn.close()__			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,removing,session,session,id,total,remaining,stomp,broker,relay,message,handler,this,connection,handlers,size,1,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1398870703;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			if (this.isRemoteClientSession) {_				if (logger.isDebugEnabled()) {_					logger.debug("Removing session '" + sessionId + "' (total remaining=" +_							(StompBrokerRelayMessageHandler.this.connectionHandlers.size() - 1) + ")")__				}_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				conn.close()__			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,removing,session,session,id,total,remaining,stomp,broker,relay,message,handler,this,connection,handlers,size,1,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1400205617;Close the TCP connection to the broker and release the connection reference,_Any exception arising from closing the connection is propagated. The caller_must handle and log the exception accordingly.__<p>If the connection belongs to a client session, the connection handler_for the session (basically the current instance) is also released from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler}.;public void clearConnection() {__			if (this.isRemoteClientSession) {_				if (logger.isDebugEnabled()) {_					logger.debug("Removing session '" + sessionId + "' (total remaining=" +_							(StompBrokerRelayMessageHandler.this.connectionHandlers.size() - 1) + ")")__				}_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				conn.close()__			}_		};close,the,tcp,connection,to,the,broker,and,release,the,connection,reference,any,exception,arising,from,closing,the,connection,is,propagated,the,caller,must,handle,and,log,the,exception,accordingly,p,if,the,connection,belongs,to,a,client,session,the,connection,handler,for,the,session,basically,the,current,instance,is,also,released,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler;public,void,clear,connection,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,removing,session,session,id,total,remaining,stomp,broker,relay,message,handler,this,connection,handlers,size,1,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1403856366;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + sessionId + " (" +_						(getConnectionCount() - 1) + " remaining connections).")__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isInfoEnabled()) {_					logger.info("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,session,id,get,connection,count,1,remaining,connections,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,info,enabled,logger,info,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1404062102;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + sessionId + " (" +_						(getConnectionCount() - 1) + " remaining connections).")__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isInfoEnabled()) {_					logger.info("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,session,id,get,connection,count,1,remaining,connections,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,info,enabled,logger,info,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1404062122;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + sessionId + " (" +_						(getConnectionCount() - 1) + " remaining connections).")__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isInfoEnabled()) {_					logger.info("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,session,id,get,connection,count,1,remaining,connections,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,info,enabled,logger,info,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1404880787;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + sessionId + " (" +_						(getConnectionCount() - 1) + " remaining connections).")__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isInfoEnabled()) {_					logger.info("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,session,id,get,connection,count,1,remaining,connections,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,info,enabled,logger,info,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1404880799;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1409784938;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1409790625;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1411389021;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1411699723;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1411747799;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1413848647;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1417548636;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1426887271;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1429286144;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1429874322;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1431728285;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1461047077;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1463066690;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1467730834;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1473887989;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1480558671;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1485203320;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1485213173;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1496259743;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1496837955;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1497341397;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1498780456;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1500448076;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1521562905;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1526485251;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1530174524;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1530174524;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1530174524;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1531942400;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1532091916;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> StompConnectionHandler -> public void clearConnection();1532402679;Clean up state associated with the connection and close it._Any exception arising from closing the connection are propagated.;public void clearConnection() {_			if (logger.isDebugEnabled()) {_				logger.debug("Cleaning up connection state for session " + this.sessionId)__			}__			if (this.isRemoteClientSession) {_				StompBrokerRelayMessageHandler.this.connectionHandlers.remove(this.sessionId)__			}__			this.isStompConnected = false___			TcpConnection<byte[]> conn = this.tcpConnection__			this.tcpConnection = null__			if (conn != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Closing TCP connection in session " + this.sessionId)__				}_				conn.close()__			}_		};clean,up,state,associated,with,the,connection,and,close,it,any,exception,arising,from,closing,the,connection,are,propagated;public,void,clear,connection,if,logger,is,debug,enabled,logger,debug,cleaning,up,connection,state,for,session,this,session,id,if,this,is,remote,client,session,stomp,broker,relay,message,handler,this,connection,handlers,remove,this,session,id,this,is,stomp,connected,false,tcp,connection,byte,conn,this,tcp,connection,this,tcp,connection,null,if,conn,null,if,logger,is,debug,enabled,logger,debug,closing,tcp,connection,in,session,this,session,id,conn,close
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1397523793;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1398311203;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1398868011;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1398870027;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1398870703;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1400205617;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1403856366;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1404062102;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1404062122;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1404880787;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1404880799;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1409784938;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1409790625;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1411389021;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1411699723;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1411747799;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1413848647;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1417548636;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1426887271;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1429286144;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1429874322;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1431728285;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1461047077;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1463066690;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1467730834;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1473887989;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1480558671;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1485203320;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1485213173;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1496259743;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1496837955;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1497341397;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1498780456;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor accessor);1403856366;Forward the given message to the STOMP broker.__<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous.__<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases.__@param message the message to send, never {@code null}_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor accessor) {__			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " + message)__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " + message)__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (accessor.isHeartbeat()) {_				logger.trace("Forwarding heartbeat in session " + this.sessionId)__			}_			else if (StompCommand.SUBSCRIBE.equals(command) && logger.isDebugEnabled()) {_				logger.debug("Forwarding SUBSCRIBE: " + messageToSend)__			}_			else if (StompCommand.UNSUBSCRIBE.equals(command) && logger.isDebugEnabled()) {_				logger.debug("Forwarding UNSUBSCRIBE: " + messageToSend)__			}_			else if (StompCommand.DISCONNECT.equals(command) && logger.isInfoEnabled()) {_				logger.info("Forwarding DISCONNECT: " + messageToSend)__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + command + ": " + messageToSend)__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						clearConnection()__					}_				}_				@Override_				public void onFailure(Throwable t) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " + messageToSend, t)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + messageToSend)__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,message,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,message,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,accessor,is,heartbeat,logger,trace,forwarding,heartbeat,in,session,this,session,id,else,if,stomp,command,subscribe,equals,command,logger,is,debug,enabled,logger,debug,forwarding,subscribe,message,to,send,else,if,stomp,command,unsubscribe,equals,command,logger,is,debug,enabled,logger,debug,forwarding,unsubscribe,message,to,send,else,if,stomp,command,disconnect,equals,command,logger,is,info,enabled,logger,info,forwarding,disconnect,message,to,send,else,if,logger,is,trace,enabled,logger,trace,forwarding,command,message,to,send,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,clear,connection,override,public,void,on,failure,throwable,t,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,message,to,send,t,else,if,logger,is,error,enabled,logger,error,failed,to,forward,message,to,send,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor accessor);1404062102;Forward the given message to the STOMP broker.__<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous.__<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases.__@param message the message to send, never {@code null}_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor accessor) {__			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " + message)__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " + message)__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (accessor.isHeartbeat()) {_				logger.trace("Forwarding heartbeat in session " + this.sessionId)__			}_			else if (StompCommand.SUBSCRIBE.equals(command) && logger.isDebugEnabled()) {_				logger.debug("Forwarding SUBSCRIBE: " + messageToSend)__			}_			else if (StompCommand.UNSUBSCRIBE.equals(command) && logger.isDebugEnabled()) {_				logger.debug("Forwarding UNSUBSCRIBE: " + messageToSend)__			}_			else if (StompCommand.DISCONNECT.equals(command) && logger.isInfoEnabled()) {_				logger.info("Forwarding DISCONNECT: " + messageToSend)__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + command + ": " + messageToSend)__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						clearConnection()__					}_				}_				@Override_				public void onFailure(Throwable t) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " + messageToSend, t)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + messageToSend)__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,message,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,message,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,accessor,is,heartbeat,logger,trace,forwarding,heartbeat,in,session,this,session,id,else,if,stomp,command,subscribe,equals,command,logger,is,debug,enabled,logger,debug,forwarding,subscribe,message,to,send,else,if,stomp,command,unsubscribe,equals,command,logger,is,debug,enabled,logger,debug,forwarding,unsubscribe,message,to,send,else,if,stomp,command,disconnect,equals,command,logger,is,info,enabled,logger,info,forwarding,disconnect,message,to,send,else,if,logger,is,trace,enabled,logger,trace,forwarding,command,message,to,send,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,clear,connection,override,public,void,on,failure,throwable,t,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,message,to,send,t,else,if,logger,is,error,enabled,logger,error,failed,to,forward,message,to,send,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor accessor);1404062122;Forward the given message to the STOMP broker.__<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous.__<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases.__@param message the message to send, never {@code null}_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor accessor) {__			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " + message)__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " + message)__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (accessor.isHeartbeat()) {_				logger.trace("Forwarding heartbeat in session " + this.sessionId)__			}_			else if (StompCommand.SUBSCRIBE.equals(command) && logger.isDebugEnabled()) {_				logger.debug("Forwarding SUBSCRIBE: " + messageToSend)__			}_			else if (StompCommand.UNSUBSCRIBE.equals(command) && logger.isDebugEnabled()) {_				logger.debug("Forwarding UNSUBSCRIBE: " + messageToSend)__			}_			else if (StompCommand.DISCONNECT.equals(command) && logger.isInfoEnabled()) {_				logger.info("Forwarding DISCONNECT: " + messageToSend)__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + command + ": " + messageToSend)__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable t) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " + messageToSend, t)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + messageToSend)__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,message,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,message,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,accessor,is,heartbeat,logger,trace,forwarding,heartbeat,in,session,this,session,id,else,if,stomp,command,subscribe,equals,command,logger,is,debug,enabled,logger,debug,forwarding,subscribe,message,to,send,else,if,stomp,command,unsubscribe,equals,command,logger,is,debug,enabled,logger,debug,forwarding,unsubscribe,message,to,send,else,if,stomp,command,disconnect,equals,command,logger,is,info,enabled,logger,info,forwarding,disconnect,message,to,send,else,if,logger,is,trace,enabled,logger,trace,forwarding,command,message,to,send,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,t,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,message,to,send,t,else,if,logger,is,error,enabled,logger,error,failed,to,forward,message,to,send,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor accessor);1404880787;Forward the given message to the STOMP broker.__<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous.__<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases.__@param message the message to send, never {@code null}_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor accessor) {__			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " + message)__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " + message)__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (accessor.isHeartbeat()) {_				logger.trace("Forwarding heartbeat in session " + this.sessionId)__			}_			else if (StompCommand.SUBSCRIBE.equals(command) && logger.isDebugEnabled()) {_				logger.debug("Forwarding SUBSCRIBE: " + messageToSend)__			}_			else if (StompCommand.UNSUBSCRIBE.equals(command) && logger.isDebugEnabled()) {_				logger.debug("Forwarding UNSUBSCRIBE: " + messageToSend)__			}_			else if (StompCommand.DISCONNECT.equals(command) && logger.isInfoEnabled()) {_				logger.info("Forwarding DISCONNECT: " + messageToSend)__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + command + ": " + messageToSend)__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable t) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " + messageToSend, t)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + messageToSend)__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,message,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,message,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,accessor,is,heartbeat,logger,trace,forwarding,heartbeat,in,session,this,session,id,else,if,stomp,command,subscribe,equals,command,logger,is,debug,enabled,logger,debug,forwarding,subscribe,message,to,send,else,if,stomp,command,unsubscribe,equals,command,logger,is,debug,enabled,logger,debug,forwarding,unsubscribe,message,to,send,else,if,stomp,command,disconnect,equals,command,logger,is,info,enabled,logger,info,forwarding,disconnect,message,to,send,else,if,logger,is,trace,enabled,logger,trace,forwarding,command,message,to,send,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,t,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,message,to,send,t,else,if,logger,is,error,enabled,logger,error,failed,to,forward,message,to,send,return,future
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1500448076;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1521562905;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1526485251;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1530174524;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1530174524;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1530174524;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1531942400;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1532091916;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1532402679;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code StompBrokerRelayMessageHandler} that_are sent to the client outbound message channel._<p>By default this property is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,stomp,broker,relay,message,handler,that,are,sent,to,the,client,outbound,message,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompBrokerRelayMessageHandler -> public String getRelayHost();1373756732;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1373924754;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1374083925;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1374099807;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1374115244;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1374422870;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1375392687;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1376961359;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1376961359;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1376961359;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1376961360;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1376961360;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1376961360;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1377656407;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1380226141;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1380245231;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1380565302;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1380573438;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1380589371;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1380675866;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1380745783;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1381152424;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1381799213;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1382062574;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1382062574;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1382062575;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1382495681;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1382559988;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1384292065;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1385507478;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1386004713;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1386350678;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1386365044;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1387852827;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1387852827;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1393279654;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1394484373;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1394485082;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1395007965;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1395007965;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1395007965;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1395090675;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1395105194;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1395239748;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1396578670;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1397429525;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1397523793;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1398311203;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1398868011;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1398870027;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1398870703;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1400205617;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1403856366;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1404062102;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1404062122;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1404880787;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1404880799;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1409784938;@return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1409790625;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1411389021;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1411699723;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1411747799;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1413848647;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1417548636;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1426887271;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1429286144;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1429874322;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1431728285;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1461047077;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1463066690;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1467730834;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1473887989;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1480558671;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1485203320;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1485213173;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1496259743;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1496837955;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1497341397;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1498780456;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1500448076;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1521562905;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1526485251;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1530174524;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1530174524;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1530174524;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1531942400;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1532091916;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> public String getRelayHost();1532402679;Return the STOMP message broker host.;public String getRelayHost() {_		return this.relayHost__	};return,the,stomp,message,broker,host;public,string,get,relay,host,return,this,relay,host
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor headerAccessor);1397429525;Forward the given message to the STOMP broker.__<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at trace level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous.__<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases.__@param message the message to send, never {@code null}_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor headerAccessor) {__			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isTraceEnabled()) {_						logger.trace("Ignoring client message received " + message +_								(conn != null ? "before CONNECTED frame" : "after TCP connection closed"))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages on system connection " +_							(conn != null ? "before STOMP CONNECTED frame" : "while inactive") +_							". Try listening for BrokerAvailabilityEvent ApplicationContext events.")___				}_			}__			if (logger.isDebugEnabled()) {_				if (headerAccessor.isHeartbeat()) {_					logger.trace("Forwarding heartbeat to broker")__				}_				else {_					logger.debug("Forwarding message to broker")__				}_			}__			if (headerAccessor.isMutable() && headerAccessor.isModified()) {_				message = MessageBuilder.createMessage(message.getPayload(), headerAccessor.getMessageHeaders())__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) message)___			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (headerAccessor.getCommand() == StompCommand.DISCONNECT) {_						clearConnection()__					}_				}_				@Override_				public void onFailure(Throwable t) {_					if (tcpConnection == null) {_						_					}_					else {_						handleTcpConnectionFailure("Failed to send message " + headerAccessor, t)__					}_				}_			})___			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,trace,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,message,message,final,stomp,header,accessor,header,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,trace,enabled,logger,trace,ignoring,client,message,received,message,conn,null,before,connected,frame,after,tcp,connection,closed,return,else,throw,new,illegal,state,exception,cannot,forward,messages,on,system,connection,conn,null,before,stomp,connected,frame,while,inactive,try,listening,for,broker,availability,event,application,context,events,if,logger,is,debug,enabled,if,header,accessor,is,heartbeat,logger,trace,forwarding,heartbeat,to,broker,else,logger,debug,forwarding,message,to,broker,if,header,accessor,is,mutable,header,accessor,is,modified,message,message,builder,create,message,message,get,payload,header,accessor,get,message,headers,listenable,future,void,future,conn,send,message,byte,message,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,header,accessor,get,command,stomp,command,disconnect,clear,connection,override,public,void,on,failure,throwable,t,if,tcp,connection,null,else,handle,tcp,connection,failure,failed,to,send,message,header,accessor,t,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor headerAccessor);1397523793;Forward the given message to the STOMP broker.__<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at trace level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous.__<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases.__@param message the message to send, never {@code null}_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor headerAccessor) {__			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isTraceEnabled()) {_						logger.trace("Ignoring client message received " + message +_								(conn != null ? "before CONNECTED frame" : "after TCP connection closed"))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages on system connection " +_							(conn != null ? "before STOMP CONNECTED frame" : "while inactive") +_							". Try listening for BrokerAvailabilityEvent ApplicationContext events.")___				}_			}__			if (logger.isDebugEnabled()) {_				if (headerAccessor.isHeartbeat()) {_					logger.trace("Forwarding heartbeat to broker")__				}_				else {_					logger.debug("Forwarding message to broker")__				}_			}__			if (headerAccessor.isMutable() && headerAccessor.isModified()) {_				message = MessageBuilder.createMessage(message.getPayload(), headerAccessor.getMessageHeaders())__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) message)___			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (headerAccessor.getCommand() == StompCommand.DISCONNECT) {_						clearConnection()__					}_				}_				@Override_				public void onFailure(Throwable t) {_					if (tcpConnection == null) {_						_					}_					else {_						handleTcpConnectionFailure("Failed to send message " + headerAccessor, t)__					}_				}_			})___			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,trace,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,message,message,final,stomp,header,accessor,header,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,trace,enabled,logger,trace,ignoring,client,message,received,message,conn,null,before,connected,frame,after,tcp,connection,closed,return,else,throw,new,illegal,state,exception,cannot,forward,messages,on,system,connection,conn,null,before,stomp,connected,frame,while,inactive,try,listening,for,broker,availability,event,application,context,events,if,logger,is,debug,enabled,if,header,accessor,is,heartbeat,logger,trace,forwarding,heartbeat,to,broker,else,logger,debug,forwarding,message,to,broker,if,header,accessor,is,mutable,header,accessor,is,modified,message,message,builder,create,message,message,get,payload,header,accessor,get,message,headers,listenable,future,void,future,conn,send,message,byte,message,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,header,accessor,get,command,stomp,command,disconnect,clear,connection,override,public,void,on,failure,throwable,t,if,tcp,connection,null,else,handle,tcp,connection,failure,failed,to,send,message,header,accessor,t,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor headerAccessor);1398311203;Forward the given message to the STOMP broker.__<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at trace level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous.__<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases.__@param message the message to send, never {@code null}_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor headerAccessor) {__			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isTraceEnabled()) {_						logger.trace("Ignoring client message received " + message +_								(conn != null ? "before CONNECTED frame" : "after TCP connection closed"))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages on system connection " +_							(conn != null ? "before STOMP CONNECTED frame" : "while inactive") +_							". Try listening for BrokerAvailabilityEvent ApplicationContext events.")___				}_			}__			if (logger.isDebugEnabled()) {_				if (headerAccessor.isHeartbeat()) {_					logger.trace("Forwarding heartbeat to broker")__				}_				else {_					logger.debug("Forwarding message to broker")__				}_			}__			if (headerAccessor.isMutable() && headerAccessor.isModified()) {_				message = MessageBuilder.createMessage(message.getPayload(), headerAccessor.getMessageHeaders())__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) message)___			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (headerAccessor.getCommand() == StompCommand.DISCONNECT) {_						clearConnection()__					}_				}_				@Override_				public void onFailure(Throwable t) {_					if (tcpConnection == null) {_						_					}_					else {_						handleTcpConnectionFailure("Failed to send message " + headerAccessor, t)__					}_				}_			})___			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,trace,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,message,message,final,stomp,header,accessor,header,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,trace,enabled,logger,trace,ignoring,client,message,received,message,conn,null,before,connected,frame,after,tcp,connection,closed,return,else,throw,new,illegal,state,exception,cannot,forward,messages,on,system,connection,conn,null,before,stomp,connected,frame,while,inactive,try,listening,for,broker,availability,event,application,context,events,if,logger,is,debug,enabled,if,header,accessor,is,heartbeat,logger,trace,forwarding,heartbeat,to,broker,else,logger,debug,forwarding,message,to,broker,if,header,accessor,is,mutable,header,accessor,is,modified,message,message,builder,create,message,message,get,payload,header,accessor,get,message,headers,listenable,future,void,future,conn,send,message,byte,message,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,header,accessor,get,command,stomp,command,disconnect,clear,connection,override,public,void,on,failure,throwable,t,if,tcp,connection,null,else,handle,tcp,connection,failure,failed,to,send,message,header,accessor,t,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor headerAccessor);1398868011;Forward the given message to the STOMP broker.__<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at trace level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous.__<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases.__@param message the message to send, never {@code null}_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor headerAccessor) {__			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring client message received " + message +_								(conn != null ? "before CONNECTED frame" : "after TCP connection closed"))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages on system connection " +_							(conn != null ? "before STOMP CONNECTED frame" : "while inactive") +_							". Try listening for BrokerAvailabilityEvent ApplicationContext events.")___				}_			}__			if (logger.isDebugEnabled()) {_				if (headerAccessor.isHeartbeat()) {_					logger.trace("Forwarding heartbeat to broker")__				}_				else {_					logger.debug("Forwarding message to broker")__				}_			}__			if (headerAccessor.isMutable() && headerAccessor.isModified()) {_				message = MessageBuilder.createMessage(message.getPayload(), headerAccessor.getMessageHeaders())__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) message)___			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (headerAccessor.getCommand() == StompCommand.DISCONNECT) {_						clearConnection()__					}_				}_				@Override_				public void onFailure(Throwable t) {_					if (tcpConnection == null) {_						_					}_					else {_						handleTcpConnectionFailure("Failed to send message " + headerAccessor, t)__					}_				}_			})___			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,trace,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,message,message,final,stomp,header,accessor,header,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,ignoring,client,message,received,message,conn,null,before,connected,frame,after,tcp,connection,closed,return,else,throw,new,illegal,state,exception,cannot,forward,messages,on,system,connection,conn,null,before,stomp,connected,frame,while,inactive,try,listening,for,broker,availability,event,application,context,events,if,logger,is,debug,enabled,if,header,accessor,is,heartbeat,logger,trace,forwarding,heartbeat,to,broker,else,logger,debug,forwarding,message,to,broker,if,header,accessor,is,mutable,header,accessor,is,modified,message,message,builder,create,message,message,get,payload,header,accessor,get,message,headers,listenable,future,void,future,conn,send,message,byte,message,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,header,accessor,get,command,stomp,command,disconnect,clear,connection,override,public,void,on,failure,throwable,t,if,tcp,connection,null,else,handle,tcp,connection,failure,failed,to,send,message,header,accessor,t,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor headerAccessor);1398870027;Forward the given message to the STOMP broker.__<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at trace level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous.__<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases.__@param message the message to send, never {@code null}_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor headerAccessor) {__			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring client message received " + message +_								(conn != null ? "before CONNECTED frame" : "after TCP connection closed"))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages on system connection " +_							(conn != null ? "before STOMP CONNECTED frame" : "while inactive") +_							". Try listening for BrokerAvailabilityEvent ApplicationContext events.")___				}_			}__			if (logger.isDebugEnabled()) {_				if (headerAccessor.isHeartbeat()) {_					logger.trace("Forwarding heartbeat to broker")__				}_				else {_					logger.debug("Forwarding message to broker")__				}_			}__			if (headerAccessor.isMutable() && headerAccessor.isModified()) {_				message = MessageBuilder.createMessage(message.getPayload(), headerAccessor.getMessageHeaders())__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) message)___			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (headerAccessor.getCommand() == StompCommand.DISCONNECT) {_						clearConnection()__					}_				}_				@Override_				public void onFailure(Throwable t) {_					if (tcpConnection == null) {_						_					}_					else {_						handleTcpConnectionFailure("Failed to send message " + headerAccessor, t)__					}_				}_			})___			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,trace,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,message,message,final,stomp,header,accessor,header,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,ignoring,client,message,received,message,conn,null,before,connected,frame,after,tcp,connection,closed,return,else,throw,new,illegal,state,exception,cannot,forward,messages,on,system,connection,conn,null,before,stomp,connected,frame,while,inactive,try,listening,for,broker,availability,event,application,context,events,if,logger,is,debug,enabled,if,header,accessor,is,heartbeat,logger,trace,forwarding,heartbeat,to,broker,else,logger,debug,forwarding,message,to,broker,if,header,accessor,is,mutable,header,accessor,is,modified,message,message,builder,create,message,message,get,payload,header,accessor,get,message,headers,listenable,future,void,future,conn,send,message,byte,message,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,header,accessor,get,command,stomp,command,disconnect,clear,connection,override,public,void,on,failure,throwable,t,if,tcp,connection,null,else,handle,tcp,connection,failure,failed,to,send,message,header,accessor,t,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor headerAccessor);1398870703;Forward the given message to the STOMP broker.__<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at trace level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous.__<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases.__@param message the message to send, never {@code null}_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor headerAccessor) {__			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring client message received " + message +_								(conn != null ? "before CONNECTED frame" : "after TCP connection closed"))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages on system connection " +_							(conn != null ? "before STOMP CONNECTED frame" : "while inactive") +_							". Try listening for BrokerAvailabilityEvent ApplicationContext events.")___				}_			}__			if (logger.isDebugEnabled()) {_				if (headerAccessor.isHeartbeat()) {_					logger.trace("Forwarding heartbeat to broker")__				}_				else {_					logger.debug("Forwarding message to broker")__				}_			}__			if (headerAccessor.isMutable() && headerAccessor.isModified()) {_				message = MessageBuilder.createMessage(message.getPayload(), headerAccessor.getMessageHeaders())__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) message)___			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (headerAccessor.getCommand() == StompCommand.DISCONNECT) {_						clearConnection()__					}_				}_				@Override_				public void onFailure(Throwable t) {_					if (tcpConnection == null) {_						_					}_					else {_						handleTcpConnectionFailure("Failed to send message " + headerAccessor, t)__					}_				}_			})___			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,trace,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,message,message,final,stomp,header,accessor,header,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,ignoring,client,message,received,message,conn,null,before,connected,frame,after,tcp,connection,closed,return,else,throw,new,illegal,state,exception,cannot,forward,messages,on,system,connection,conn,null,before,stomp,connected,frame,while,inactive,try,listening,for,broker,availability,event,application,context,events,if,logger,is,debug,enabled,if,header,accessor,is,heartbeat,logger,trace,forwarding,heartbeat,to,broker,else,logger,debug,forwarding,message,to,broker,if,header,accessor,is,mutable,header,accessor,is,modified,message,message,builder,create,message,message,get,payload,header,accessor,get,message,headers,listenable,future,void,future,conn,send,message,byte,message,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,header,accessor,get,command,stomp,command,disconnect,clear,connection,override,public,void,on,failure,throwable,t,if,tcp,connection,null,else,handle,tcp,connection,failure,failed,to,send,message,header,accessor,t,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor headerAccessor);1400205617;Forward the given message to the STOMP broker.__<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at trace level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous.__<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases.__@param message the message to send, never {@code null}_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAccessor headerAccessor) {__			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring client message received " + message +_								(conn != null ? "before CONNECTED frame" : "after TCP connection closed"))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages on system connection " +_							(conn != null ? "before STOMP CONNECTED frame" : "while inactive") +_							". Try listening for BrokerAvailabilityEvent ApplicationContext events.")___				}_			}__			if (logger.isDebugEnabled()) {_				if (headerAccessor.isHeartbeat()) {_					logger.trace("Forwarding heartbeat to broker")__				}_				else {_					logger.debug("Forwarding message to broker")__				}_			}__			if (headerAccessor.isMutable() && headerAccessor.isModified()) {_				message = MessageBuilder.createMessage(message.getPayload(), headerAccessor.getMessageHeaders())__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) message)___			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (headerAccessor.getCommand() == StompCommand.DISCONNECT) {_						clearConnection()__					}_				}_				@Override_				public void onFailure(Throwable t) {_					if (tcpConnection == null) {_						_					}_					else {_						handleTcpConnectionFailure("Failed to send message " + headerAccessor, t)__					}_				}_			})___			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,trace,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,message,message,final,stomp,header,accessor,header,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,ignoring,client,message,received,message,conn,null,before,connected,frame,after,tcp,connection,closed,return,else,throw,new,illegal,state,exception,cannot,forward,messages,on,system,connection,conn,null,before,stomp,connected,frame,while,inactive,try,listening,for,broker,availability,event,application,context,events,if,logger,is,debug,enabled,if,header,accessor,is,heartbeat,logger,trace,forwarding,heartbeat,to,broker,else,logger,debug,forwarding,message,to,broker,if,header,accessor,is,mutable,header,accessor,is,modified,message,message,builder,create,message,message,get,payload,header,accessor,get,message,headers,listenable,future,void,future,conn,send,message,byte,message,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,header,accessor,get,command,stomp,command,disconnect,clear,connection,override,public,void,on,failure,throwable,t,if,tcp,connection,null,else,handle,tcp,connection,failure,failed,to,send,message,header,accessor,t,return,future
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1373756732;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1373924754;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1374083925;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1374099807;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1374115244;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1374422870;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1375392687;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1376961359;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1376961359;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1376961359;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1376961360;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1376961360;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1376961360;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1377656407;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1380226141;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1380245231;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1380565302;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1380573438;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1380589371;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1380675866;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1380745783;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1381152424;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1381799213;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1382062574;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1382062574;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1382062575;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1382495681;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1382559988;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1384292065;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1385507478;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1386004713;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1386350678;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1386365044;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1387852827;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1387852827;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1393279654;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1394484373;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1394485082;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1395007965;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1395007965;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1395007965;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1395090675;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1395105194;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1395239748;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1396578670;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1397429525;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1397523793;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1398311203;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1398868011;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1398870027;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1398870703;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1400205617;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1403856366;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1404062102;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1404062122;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1404880787;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1404880799;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1409784938;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1409790625;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1411389021;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1411699723;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1411747799;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1413848647;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1417548636;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1426887271;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1429286144;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1429874322;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1431728285;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1461047077;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1463066690;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1467730834;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1473887989;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1480558671;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1485203320;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1485213173;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1496259743;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1496837955;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1497341397;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1498780456;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1500448076;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1521562905;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1526485251;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1530174524;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1530174524;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1530174524;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1531942400;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1532091916;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setRelayPort(int relayPort);1532402679;Set the STOMP message broker port.;public void setRelayPort(int relayPort) {_		this.relayPort = relayPort__	};set,the,stomp,message,broker,port;public,void,set,relay,port,int,relay,port,this,relay,port,relay,port
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1373756732;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1373924754;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1374083925;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1374099807;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1374115244;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1374422870;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1375392687;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1376961359;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1376961359;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1376961359;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1376961360;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1376961360;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1376961360;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1377656407;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1380226141;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1380245231;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1380565302;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1380573438;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1380589371;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1380675866;Set the passcode for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1380745783;Set the passcode for the "system" relay session used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,system,relay,session,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1381152424;Set the passcode for the "system" relay session used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,system,relay,session,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1381799213;Set the passcode for the "system" relay session used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>_See class-level documentation for more information on the "system" session.;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,system,relay,session,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,session;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1382062574;Set the passcode for the "system" relay session used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>_See class-level documentation for more information on the "system" session.;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,system,relay,session,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,session;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1382062574;Set the passcode for the "system" relay session used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>_See class-level documentation for more information on the "system" session.;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,system,relay,session,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,session;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1382062575;Set the passcode for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1382495681;Set the passcode for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1382559988;Set the passcode for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1384292065;Set the passcode for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1385507478;Set the passcode for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>See class-level documentation for more information on the "system" connection.;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1386004713;Set the passcode for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>See class-level documentation for more information on the "system" connection.;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1386350678;Set the passcode for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>See class-level documentation for more information on the "system" connection.;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1386365044;Set the passcode for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>See class-level documentation for more information on the "system" connection.;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1387852827;Set the passcode for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>See class-level documentation for more information on the "system" connection.;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1387852827;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1393279654;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1394484373;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1394485082;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1395007965;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1395007965;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1395007965;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1395090675;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1395105194;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1395239748;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1396578670;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1397429525;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1397523793;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1398311203;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1398868011;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1398870027;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1398870703;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1400205617;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1403856366;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1404062102;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1404062122;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1404880787;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1404880799;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1409784938;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1409790625;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1411389021;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1411699723;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1411747799;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1413848647;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1417548636;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1426887271;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1429286144;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1429874322;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1431728285;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1461047077;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1463066690;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1467730834;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1473887989;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1480558671;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1485203320;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1485213173;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1496259743;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1496837955;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1497341397;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1498780456;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1500448076;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1521562905;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1526485251;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1530174524;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1530174524;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1530174524;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1531942400;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1532091916;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public void setSystemPasscode(String systemPasscode);1532402679;Set the passcode for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemPasscode(String systemPasscode) {_		this.systemPasscode = systemPasscode__	};set,the,passcode,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,passcode,string,system,passcode,this,system,passcode,system,passcode
StompBrokerRelayMessageHandler -> public int getConnectionCount();1403856366;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1404062102;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1404062122;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1404880787;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1404880799;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1409784938;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1409790625;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1411389021;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1411699723;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1411747799;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1413848647;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1417548636;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1426887271;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1429286144;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1429874322;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1431728285;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1461047077;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1463066690;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1467730834;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1473887989;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1480558671;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1485203320;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1485213173;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1496259743;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1496837955;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1497341397;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1498780456;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1500448076;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1521562905;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1526485251;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1530174524;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1530174524;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1530174524;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1531942400;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1532091916;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> public int getConnectionCount();1532402679;Return the current count of TCP connection to the broker.;public int getConnectionCount() {_		return this.connectionHandlers.size()__	};return,the,current,count,of,tcp,connection,to,the,broker;public,int,get,connection,count,return,this,connection,handlers,size
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1404880799;Forward the given message to the STOMP broker.__<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous.__<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases.__@param message the message to send, never {@code null}_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {___			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage((byte[]) message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage((byte[]) message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() &&_					StompCommand.SEND.equals(command) ||_					StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) ||_					StompCommand.DISCONNECT.equals(command)) {_				logger.debug("Forwarding " + accessor.getShortLogMessage((byte[]) message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage((byte[]) message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable t) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage((byte[]) message.getPayload()), t)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " +_								accessor.getShortLogMessage((byte[]) message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,byte,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,byte,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,byte,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,byte,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,t,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,byte,message,get,payload,t,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,byte,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1409784938;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage((byte[]) message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage((byte[]) message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,byte,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,byte,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1409790625;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage((byte[]) message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,byte,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1411389021;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1411699723;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1411747799;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1413848647;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1417548636;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1426887271;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1429286144;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1429874322;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1431728285;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1461047077;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1463066690;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1467730834;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1473887989;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1480558671;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1485203320;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1485213173;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1496259743;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1496837955;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1497341397;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1498780456;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(@Nullable Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,nullable,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1500448076;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(@Nullable Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,nullable,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1521562905;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(@Nullable Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,nullable,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1526485251;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(@Nullable Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,nullable,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1530174524;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(@Nullable Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,nullable,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1530174524;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(@Nullable Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,nullable,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1530174524;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(@Nullable Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,nullable,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1531942400;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(@Nullable Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,nullable,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1532091916;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(@Nullable Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,nullable,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> StompConnectionHandler -> @SuppressWarnings("unchecked") 		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor);1532402679;Forward the given message to the STOMP broker._<p>The method checks whether we have an active TCP connection and have_received the STOMP CONNECTED frame. For client messages this should be_false only if we lose the TCP connection around the same time when a_client message is being forwarded, so we simply log the ignored message_at debug level. For messages from within the application being sent on_the "system" connection an exception is raised so that components sending_the message have a chance to handle it -- by default the broker message_channel is synchronous._<p>Note that if messages arrive concurrently around the same time a TCP_connection is lost, there is a brief period of time before the connection_is reset when one or more messages may sneak through and an attempt made_to forward them. Rather than synchronizing to guard against that, this_method simply lets them try and fail. For client sessions that may_result in an additional STOMP ERROR frame(s) being sent downstream but_code handling that downstream should be idempotent in such cases._@param message the message to send (never {@code null})_@return a future to wait for the result;@SuppressWarnings("unchecked")_		public ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {_			TcpConnection<byte[]> conn = this.tcpConnection___			if (!this.isStompConnected || conn == null) {_				if (this.isRemoteClientSession) {_					if (logger.isDebugEnabled()) {_						logger.debug("TCP connection closed already, ignoring " +_								accessor.getShortLogMessage(message.getPayload()))__					}_					return EMPTY_TASK__				}_				else {_					throw new IllegalStateException("Cannot forward messages " +_							(conn != null ? "before STOMP CONNECTED. " : "while inactive. ") +_							"Consider subscribing to receive BrokerAvailabilityEvent's from " +_							"an ApplicationListener Spring bean. Dropped " +_							accessor.getShortLogMessage(message.getPayload()))__				}_			}__			final Message<?> messageToSend = (accessor.isMutable() && accessor.isModified()) ?_					MessageBuilder.createMessage(message.getPayload(), accessor.getMessageHeaders()) : message___			StompCommand command = accessor.getCommand()__			if (logger.isDebugEnabled() && (StompCommand.SEND.equals(command) || StompCommand.SUBSCRIBE.equals(command) ||_					StompCommand.UNSUBSCRIBE.equals(command) || StompCommand.DISCONNECT.equals(command))) {_				logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()))__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()))__			}__			ListenableFuture<Void> future = conn.send((Message<byte[]>) messageToSend)__			future.addCallback(new ListenableFutureCallback<Void>() {_				@Override_				public void onSuccess(@Nullable Void result) {_					if (accessor.getCommand() == StompCommand.DISCONNECT) {_						afterDisconnectSent(accessor)__					}_				}_				@Override_				public void onFailure(Throwable ex) {_					if (tcpConnection != null) {_						handleTcpConnectionFailure("failed to forward " +_								accessor.getShortLogMessage(message.getPayload()), ex)__					}_					else if (logger.isErrorEnabled()) {_						logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()))__					}_				}_			})__			return future__		};forward,the,given,message,to,the,stomp,broker,p,the,method,checks,whether,we,have,an,active,tcp,connection,and,have,received,the,stomp,connected,frame,for,client,messages,this,should,be,false,only,if,we,lose,the,tcp,connection,around,the,same,time,when,a,client,message,is,being,forwarded,so,we,simply,log,the,ignored,message,at,debug,level,for,messages,from,within,the,application,being,sent,on,the,system,connection,an,exception,is,raised,so,that,components,sending,the,message,have,a,chance,to,handle,it,by,default,the,broker,message,channel,is,synchronous,p,note,that,if,messages,arrive,concurrently,around,the,same,time,a,tcp,connection,is,lost,there,is,a,brief,period,of,time,before,the,connection,is,reset,when,one,or,more,messages,may,sneak,through,and,an,attempt,made,to,forward,them,rather,than,synchronizing,to,guard,against,that,this,method,simply,lets,them,try,and,fail,for,client,sessions,that,may,result,in,an,additional,stomp,error,frame,s,being,sent,downstream,but,code,handling,that,downstream,should,be,idempotent,in,such,cases,param,message,the,message,to,send,never,code,null,return,a,future,to,wait,for,the,result;suppress,warnings,unchecked,public,listenable,future,void,forward,final,message,message,final,stomp,header,accessor,accessor,tcp,connection,byte,conn,this,tcp,connection,if,this,is,stomp,connected,conn,null,if,this,is,remote,client,session,if,logger,is,debug,enabled,logger,debug,tcp,connection,closed,already,ignoring,accessor,get,short,log,message,message,get,payload,return,else,throw,new,illegal,state,exception,cannot,forward,messages,conn,null,before,stomp,connected,while,inactive,consider,subscribing,to,receive,broker,availability,event,s,from,an,application,listener,spring,bean,dropped,accessor,get,short,log,message,message,get,payload,final,message,message,to,send,accessor,is,mutable,accessor,is,modified,message,builder,create,message,message,get,payload,accessor,get,message,headers,message,stomp,command,command,accessor,get,command,if,logger,is,debug,enabled,stomp,command,send,equals,command,stomp,command,subscribe,equals,command,stomp,command,unsubscribe,equals,command,stomp,command,disconnect,equals,command,logger,debug,forwarding,accessor,get,short,log,message,message,get,payload,else,if,logger,is,trace,enabled,logger,trace,forwarding,accessor,get,detailed,log,message,message,get,payload,listenable,future,void,future,conn,send,message,byte,message,to,send,future,add,callback,new,listenable,future,callback,void,override,public,void,on,success,nullable,void,result,if,accessor,get,command,stomp,command,disconnect,after,disconnect,sent,accessor,override,public,void,on,failure,throwable,ex,if,tcp,connection,null,handle,tcp,connection,failure,failed,to,forward,accessor,get,short,log,message,message,get,payload,ex,else,if,logger,is,error,enabled,logger,error,failed,to,forward,accessor,get,short,log,message,message,get,payload,return,future
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1429286144;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1429874322;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1431728285;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1461047077;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1463066690;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1467730834;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1473887989;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1480558671;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1485203320;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1485213173;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1496259743;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1496837955;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1497341397;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1498780456;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1500448076;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1521562905;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1526485251;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1530174524;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1530174524;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1530174524;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1531942400;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1532091916;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> public Map<String, MessageHandler> getSystemSubscriptions();1532402679;Return the configured map with subscriptions on the "system" connection.;public Map<String, MessageHandler> getSystemSubscriptions() {_		return this.systemSubscriptions__	};return,the,configured,map,with,subscriptions,on,the,system,connection;public,map,string,message,handler,get,system,subscriptions,return,this,system,subscriptions
StompBrokerRelayMessageHandler -> @Nullable 	public String getVirtualHost();1496837955;Return the configured virtual host value.;@Nullable_	public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;nullable,public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> @Nullable 	public String getVirtualHost();1497341397;Return the configured virtual host value.;@Nullable_	public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;nullable,public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> @Nullable 	public String getVirtualHost();1498780456;Return the configured virtual host value.;@Nullable_	public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;nullable,public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> @Nullable 	public String getVirtualHost();1500448076;Return the configured virtual host value.;@Nullable_	public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;nullable,public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> @Nullable 	public String getVirtualHost();1521562905;Return the configured virtual host value.;@Nullable_	public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;nullable,public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> @Nullable 	public String getVirtualHost();1526485251;Return the configured virtual host value.;@Nullable_	public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;nullable,public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> @Nullable 	public String getVirtualHost();1530174524;Return the configured virtual host value.;@Nullable_	public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;nullable,public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> @Nullable 	public String getVirtualHost();1530174524;Return the configured virtual host value.;@Nullable_	public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;nullable,public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> @Nullable 	public String getVirtualHost();1530174524;Return the configured virtual host value.;@Nullable_	public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;nullable,public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> @Nullable 	public String getVirtualHost();1531942400;Return the configured virtual host value.;@Nullable_	public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;nullable,public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> @Nullable 	public String getVirtualHost();1532091916;Return the configured virtual host value.;@Nullable_	public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;nullable,public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> @Nullable 	public String getVirtualHost();1532402679;Return the configured virtual host value.;@Nullable_	public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;nullable,public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient);1500448076;Configure a TCP client for managing TCP connections to the STOMP broker._<p>By default {@link ReactorNettyTcpClient} is used.;public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,p,by,default,link,reactor,netty,tcp,client,is,used;public,void,set,tcp,client,nullable,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient);1521562905;Configure a TCP client for managing TCP connections to the STOMP broker._<p>By default {@link ReactorNettyTcpClient} is used._<p><strong>Note:</strong> when this property is used, any_{@link #setRelayHost(String) host} or {@link #setRelayPort(int) port}_specified are effectively ignored.;public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,p,by,default,link,reactor,netty,tcp,client,is,used,p,strong,note,strong,when,this,property,is,used,any,link,set,relay,host,string,host,or,link,set,relay,port,int,port,specified,are,effectively,ignored;public,void,set,tcp,client,nullable,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient);1526485251;Configure a TCP client for managing TCP connections to the STOMP broker._<p>By default {@link ReactorNettyTcpClient} is used._<p><strong>Note:</strong> when this property is used, any_{@link #setRelayHost(String) host} or {@link #setRelayPort(int) port}_specified are effectively ignored.;public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,p,by,default,link,reactor,netty,tcp,client,is,used,p,strong,note,strong,when,this,property,is,used,any,link,set,relay,host,string,host,or,link,set,relay,port,int,port,specified,are,effectively,ignored;public,void,set,tcp,client,nullable,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient);1530174524;Configure a TCP client for managing TCP connections to the STOMP broker._<p>By default {@link ReactorNettyTcpClient} is used._<p><strong>Note:</strong> when this property is used, any_{@link #setRelayHost(String) host} or {@link #setRelayPort(int) port}_specified are effectively ignored.;public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,p,by,default,link,reactor,netty,tcp,client,is,used,p,strong,note,strong,when,this,property,is,used,any,link,set,relay,host,string,host,or,link,set,relay,port,int,port,specified,are,effectively,ignored;public,void,set,tcp,client,nullable,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient);1530174524;Configure a TCP client for managing TCP connections to the STOMP broker._<p>By default {@link ReactorNettyTcpClient} is used._<p><strong>Note:</strong> when this property is used, any_{@link #setRelayHost(String) host} or {@link #setRelayPort(int) port}_specified are effectively ignored.;public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,p,by,default,link,reactor,netty,tcp,client,is,used,p,strong,note,strong,when,this,property,is,used,any,link,set,relay,host,string,host,or,link,set,relay,port,int,port,specified,are,effectively,ignored;public,void,set,tcp,client,nullable,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient);1530174524;Configure a TCP client for managing TCP connections to the STOMP broker._<p>By default {@link ReactorNettyTcpClient} is used._<p><strong>Note:</strong> when this property is used, any_{@link #setRelayHost(String) host} or {@link #setRelayPort(int) port}_specified are effectively ignored.;public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,p,by,default,link,reactor,netty,tcp,client,is,used,p,strong,note,strong,when,this,property,is,used,any,link,set,relay,host,string,host,or,link,set,relay,port,int,port,specified,are,effectively,ignored;public,void,set,tcp,client,nullable,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient);1531942400;Configure a TCP client for managing TCP connections to the STOMP broker._<p>By default {@link ReactorNettyTcpClient} is used._<p><strong>Note:</strong> when this property is used, any_{@link #setRelayHost(String) host} or {@link #setRelayPort(int) port}_specified are effectively ignored.;public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,p,by,default,link,reactor,netty,tcp,client,is,used,p,strong,note,strong,when,this,property,is,used,any,link,set,relay,host,string,host,or,link,set,relay,port,int,port,specified,are,effectively,ignored;public,void,set,tcp,client,nullable,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient);1532091916;Configure a TCP client for managing TCP connections to the STOMP broker._<p>By default {@link ReactorNettyTcpClient} is used._<p><strong>Note:</strong> when this property is used, any_{@link #setRelayHost(String) host} or {@link #setRelayPort(int) port}_specified are effectively ignored.;public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,p,by,default,link,reactor,netty,tcp,client,is,used,p,strong,note,strong,when,this,property,is,used,any,link,set,relay,host,string,host,or,link,set,relay,port,int,port,specified,are,effectively,ignored;public,void,set,tcp,client,nullable,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient);1532402679;Configure a TCP client for managing TCP connections to the STOMP broker._<p>By default {@link ReactorNettyTcpClient} is used._<p><strong>Note:</strong> when this property is used, any_{@link #setRelayHost(String) host} or {@link #setRelayPort(int) port}_specified are effectively ignored.;public void setTcpClient(@Nullable TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};configure,a,tcp,client,for,managing,tcp,connections,to,the,stomp,broker,p,by,default,link,reactor,netty,tcp,client,is,used,p,strong,note,strong,when,this,property,is,used,any,link,set,relay,host,string,host,or,link,set,relay,port,int,port,specified,are,effectively,ignored;public,void,set,tcp,client,nullable,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public String getVirtualHost();1381799213;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1382062574;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1382062574;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1382062575;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1382495681;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1382559988;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1384292065;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1385507478;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1386004713;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1386350678;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1386365044;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1387852827;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1387852827;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1393279654;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1394484373;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1394485082;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1395007965;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1395007965;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1395007965;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1395090675;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1395105194;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1395239748;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1396578670;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1397429525;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1397523793;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1398311203;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1398868011;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1398870027;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1398870703;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1400205617;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1403856366;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1404062102;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1404062122;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1404880787;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1404880799;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1409784938;@return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1409790625;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1411389021;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1411699723;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1411747799;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1413848647;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1417548636;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1426887271;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1429286144;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1429874322;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1431728285;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1461047077;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1463066690;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1467730834;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1473887989;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1480558671;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1485203320;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1485213173;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getVirtualHost();1496259743;Return the configured virtual host value.;public String getVirtualHost() {_		return this.virtualHost__	};return,the,configured,virtual,host,value;public,string,get,virtual,host,return,this,virtual,host
StompBrokerRelayMessageHandler -> public String getClientPasscode();1387852827;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1393279654;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1394484373;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1394485082;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1395007965;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1395007965;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1395007965;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1395090675;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1395105194;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1395239748;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1396578670;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1397429525;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1397523793;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1398311203;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1398868011;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1398870027;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1398870703;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1400205617;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1403856366;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1404062102;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1404062122;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1404880787;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1404880799;@return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1409784938;Return the configured passocde to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passocde,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1409790625;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1411389021;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1411699723;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1411747799;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1413848647;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1417548636;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1426887271;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1429286144;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1429874322;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1431728285;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1461047077;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1463066690;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1467730834;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1473887989;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1480558671;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1485203320;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1485213173;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1496259743;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1496837955;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1497341397;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1498780456;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1500448076;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1521562905;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1526485251;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1530174524;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1530174524;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1530174524;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1531942400;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1532091916;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientPasscode();1532402679;Return the configured passcode to use for connections to the STOMP broker on_behalf of connected clients._@see #getSystemPasscode();public String getClientPasscode() {_		return this.clientPasscode__	};return,the,configured,passcode,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,passcode;public,string,get,client,passcode,return,this,client,passcode
StompBrokerRelayMessageHandler -> public String getClientLogin();1387852827;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1393279654;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1394484373;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1394485082;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1395007965;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1395007965;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1395007965;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1395090675;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1395105194;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1395239748;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1396578670;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1397429525;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1397523793;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1398311203;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1398868011;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1398870027;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1398870703;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1400205617;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1403856366;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1404062102;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1404062122;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1404880787;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1404880799;@return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1409784938;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1409790625;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1411389021;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1411699723;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1411747799;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1413848647;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1417548636;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1426887271;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1429286144;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1429874322;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1431728285;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1461047077;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1463066690;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1467730834;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1473887989;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1480558671;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1485203320;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1485213173;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1496259743;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1496837955;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1497341397;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1498780456;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1500448076;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1521562905;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1526485251;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1530174524;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1530174524;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1530174524;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1531942400;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1532091916;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> public String getClientLogin();1532402679;Return the configured login to use for connections to the STOMP broker_on behalf of connected clients._@see #getSystemLogin();public String getClientLogin() {_		return this.clientLogin__	};return,the,configured,login,to,use,for,connections,to,the,stomp,broker,on,behalf,of,connected,clients,see,get,system,login;public,string,get,client,login,return,this,client,login
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1404062122;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection.__@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				clearConnection()__			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,clear,connection
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1404880787;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection.__@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				clearConnection()__			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,clear,connection
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1404880799;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection.__@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				clearConnection()__			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,clear,connection
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1409784938;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				clearConnection()__			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,clear,connection
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1409790625;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				clearConnection()__			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,clear,connection
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1411389021;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				clearConnection()__			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,clear,connection
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1411699723;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				clearConnection()__			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,clear,connection
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1411747799;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1413848647;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1417548636;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1426887271;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1429286144;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1429874322;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1431728285;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1461047077;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1463066690;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1467730834;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1473887989;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1480558671;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1485203320;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1485213173;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1496259743;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1496837955;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1497341397;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1498780456;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1500448076;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1521562905;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1526485251;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1530174524;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1530174524;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1530174524;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1531942400;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1532091916;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> private void afterDisconnectSent(StompHeaderAccessor accessor);1532402679;After a DISCONNECT there should be no more client frames so we can_close the connection pro-actively. However, if the DISCONNECT has a_receipt header we leave the connection open and expect the server will_respond with a RECEIPT and then close the connection._@see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">_STOMP Specification 1.2 DISCONNECT</a>;private void afterDisconnectSent(StompHeaderAccessor accessor) {_			if (accessor.getReceipt() == null) {_				try {_					clearConnection()__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex)__					}_				}_			}_		};after,a,disconnect,there,should,be,no,more,client,frames,so,we,can,close,the,connection,pro,actively,however,if,the,disconnect,has,a,receipt,header,we,leave,the,connection,open,and,expect,the,server,will,respond,with,a,receipt,and,then,close,the,connection,see,a,href,http,stomp,github,io,stomp,specification,1,2,html,disconnect,stomp,specification,1,2,disconnect,a;private,void,after,disconnect,sent,stomp,header,accessor,accessor,if,accessor,get,receipt,null,try,clear,connection,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex);1496259743;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,nullable,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex);1496837955;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,nullable,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex);1497341397;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,nullable,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex);1498780456;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,nullable,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex);1500448076;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex) {_			if (logger.isErrorEnabled()) {_				logger.error("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,nullable,throwable,ex,if,logger,is,error,enabled,logger,error,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex);1521562905;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,nullable,throwable,ex,if,logger,is,warn,enabled,logger,warn,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex);1526485251;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,nullable,throwable,ex,if,logger,is,warn,enabled,logger,warn,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex);1530174524;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,nullable,throwable,ex,if,logger,is,warn,enabled,logger,warn,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex);1530174524;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,nullable,throwable,ex,if,logger,is,warn,enabled,logger,warn,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex);1530174524;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,nullable,throwable,ex,if,logger,is,warn,enabled,logger,warn,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex);1531942400;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,nullable,throwable,ex,if,logger,is,warn,enabled,logger,warn,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex);1532091916;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex) {_			if (logger.isInfoEnabled()) {_				logger.info("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,nullable,throwable,ex,if,logger,is,info,enabled,logger,info,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnectionHandler -> protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex);1532402679;Invoked when any TCP connectivity issue is detected, i.e. failure to establish_the TCP connection, failure to send a message, missed heartbeat, etc.;protected void handleTcpConnectionFailure(String error, @Nullable Throwable ex) {_			if (logger.isInfoEnabled()) {_				logger.info("TCP connection failure in session " + this.sessionId + ": " + error, ex)__			}_			try {_				sendStompErrorFrameToClient(error)__			}_			finally {_				try {_					clearConnection()__				}_				catch (Throwable ex2) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2)__					}_				}_			}_		};invoked,when,any,tcp,connectivity,issue,is,detected,i,e,failure,to,establish,the,tcp,connection,failure,to,send,a,message,missed,heartbeat,etc;protected,void,handle,tcp,connection,failure,string,error,nullable,throwable,ex,if,logger,is,info,enabled,logger,info,tcp,connection,failure,in,session,this,session,id,error,ex,try,send,stomp,error,frame,to,client,error,finally,try,clear,connection,catch,throwable,ex2,if,logger,is,debug,enabled,logger,debug,failure,while,clearing,tcp,connection,state,in,session,this,session,id,ex2
StompBrokerRelayMessageHandler -> StompConnection -> public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection();1380226141;Return the underlying {@link TcpConnection} but only after the CONNECTED STOMP_frame is received.;public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection() {_			return this.readyConnection.get()__		};return,the,underlying,link,tcp,connection,but,only,after,the,connected,stomp,frame,is,received;public,tcp,connection,message,byte,message,byte,get,ready,connection,return,this,ready,connection,get
StompBrokerRelayMessageHandler -> StompConnection -> public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection();1380245231;Return the underlying {@link TcpConnection} but only after the CONNECTED STOMP_frame is received.;public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection() {_			return this.readyConnection.get()__		};return,the,underlying,link,tcp,connection,but,only,after,the,connected,stomp,frame,is,received;public,tcp,connection,message,byte,message,byte,get,ready,connection,return,this,ready,connection,get
StompBrokerRelayMessageHandler -> StompConnection -> public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection();1380565302;Return the underlying {@link TcpConnection} but only after the CONNECTED STOMP_frame is received.;public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection() {_			return this.readyConnection.get()__		};return,the,underlying,link,tcp,connection,but,only,after,the,connected,stomp,frame,is,received;public,tcp,connection,message,byte,message,byte,get,ready,connection,return,this,ready,connection,get
StompBrokerRelayMessageHandler -> StompConnection -> public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection();1380573438;Return the underlying {@link TcpConnection} but only after the CONNECTED STOMP_frame is received.;public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection() {_			return this.readyConnection.get()__		};return,the,underlying,link,tcp,connection,but,only,after,the,connected,stomp,frame,is,received;public,tcp,connection,message,byte,message,byte,get,ready,connection,return,this,ready,connection,get
StompBrokerRelayMessageHandler -> StompConnection -> public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection();1380589371;Return the underlying {@link TcpConnection} but only after the CONNECTED STOMP_frame is received.;public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection() {_			return this.readyConnection.get()__		};return,the,underlying,link,tcp,connection,but,only,after,the,connected,stomp,frame,is,received;public,tcp,connection,message,byte,message,byte,get,ready,connection,return,this,ready,connection,get
StompBrokerRelayMessageHandler -> StompConnection -> public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection();1380675866;Return the underlying {@link TcpConnection} but only after the CONNECTED STOMP_frame is received.;public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection() {_			return this.readyConnection.get()__		};return,the,underlying,link,tcp,connection,but,only,after,the,connected,stomp,frame,is,received;public,tcp,connection,message,byte,message,byte,get,ready,connection,return,this,ready,connection,get
StompBrokerRelayMessageHandler -> StompConnection -> public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection();1380745783;Return the underlying {@link TcpConnection} but only after the CONNECTED STOMP_frame is received.;public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection() {_			return this.readyConnection.get()__		};return,the,underlying,link,tcp,connection,but,only,after,the,connected,stomp,frame,is,received;public,tcp,connection,message,byte,message,byte,get,ready,connection,return,this,ready,connection,get
StompBrokerRelayMessageHandler -> StompConnection -> public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection();1381152424;Return the underlying {@link TcpConnection} but only after the CONNECTED STOMP_frame is received.;public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection() {_			return this.readyConnection.get()__		};return,the,underlying,link,tcp,connection,but,only,after,the,connected,stomp,frame,is,received;public,tcp,connection,message,byte,message,byte,get,ready,connection,return,this,ready,connection,get
StompBrokerRelayMessageHandler -> StompConnection -> public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection();1381799213;Return the underlying {@link TcpConnection} but only after the CONNECTED STOMP_frame is received.;public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection() {_			return this.readyConnection.get()__		};return,the,underlying,link,tcp,connection,but,only,after,the,connected,stomp,frame,is,received;public,tcp,connection,message,byte,message,byte,get,ready,connection,return,this,ready,connection,get
StompBrokerRelayMessageHandler -> StompConnection -> public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection();1382062574;Return the underlying {@link TcpConnection} but only after the CONNECTED STOMP_frame is received.;public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection() {_			return this.readyConnection.get()__		};return,the,underlying,link,tcp,connection,but,only,after,the,connected,stomp,frame,is,received;public,tcp,connection,message,byte,message,byte,get,ready,connection,return,this,ready,connection,get
StompBrokerRelayMessageHandler -> StompConnection -> public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection();1382062574;Return the underlying {@link TcpConnection} but only after the CONNECTED STOMP_frame is received.;public TcpConnection<Message<byte[]>, Message<byte[]>> getReadyConnection() {_			return this.readyConnection.get()__		};return,the,underlying,link,tcp,connection,but,only,after,the,connected,stomp,frame,is,received;public,tcp,connection,message,byte,message,byte,get,ready,connection,return,this,ready,connection,get
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1397523793;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1398311203;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1398868011;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1398870027;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1398870703;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1400205617;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1403856366;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1404062102;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1404062122;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1404880787;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1404880799;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1409784938;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1409790625;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1411389021;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1411699723;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1411747799;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1413848647;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1417548636;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1426887271;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1429286144;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1429874322;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1431728285;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1461047077;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1463066690;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1467730834;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1473887989;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1480558671;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1485203320;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1485213173;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1496259743;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompBrokerRelayMessageHandler -> public void setVirtualHost(@Nullable String virtualHost);1500448076;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(@Nullable String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,nullable,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(@Nullable String virtualHost);1521562905;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(@Nullable String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,nullable,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(@Nullable String virtualHost);1526485251;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(@Nullable String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,nullable,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(@Nullable String virtualHost);1530174524;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(@Nullable String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,nullable,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(@Nullable String virtualHost);1530174524;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(@Nullable String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,nullable,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(@Nullable String virtualHost);1530174524;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(@Nullable String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,nullable,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(@Nullable String virtualHost);1531942400;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(@Nullable String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,nullable,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(@Nullable String virtualHost);1532091916;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(@Nullable String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,nullable,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setVirtualHost(@Nullable String virtualHost);1532402679;Set the value of the "host" header to use in STOMP CONNECT frames. When this_property is configured, a "host" header will be added to every STOMP frame sent to_the STOMP broker. This may be useful for example in a cloud environment where the_actual host to which the TCP connection is established is different from the host_providing the cloud-based STOMP service._<p>By default this property is not set.;public void setVirtualHost(@Nullable String virtualHost) {_		this.virtualHost = virtualHost__	};set,the,value,of,the,host,header,to,use,in,stomp,connect,frames,when,this,property,is,configured,a,host,header,will,be,added,to,every,stomp,frame,sent,to,the,stomp,broker,this,may,be,useful,for,example,in,a,cloud,environment,where,the,actual,host,to,which,the,tcp,connection,is,established,is,different,from,the,host,providing,the,cloud,based,stomp,service,p,by,default,this,property,is,not,set;public,void,set,virtual,host,nullable,string,virtual,host,this,virtual,host,virtual,host
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1373756732;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1373924754;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1374083925;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1374099807;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1374115244;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1374422870;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1375392687;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1376961359;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1376961359;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1376961359;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1376961360;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1376961360;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1376961360;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1377656407;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1380226141;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1380245231;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1380565302;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1380573438;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1380589371;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1380675866;Set the login for a "system" TCP connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,a,system,tcp,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1380745783;Set the login for the "system" relay session used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,system,relay,session,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1381152424;Set the login for the "system" relay session used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method).;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,system,relay,session,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1381799213;Set the login for the "system" relay session used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>_See class-level documentation for more information on the "system" session.;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,system,relay,session,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,session;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1382062574;Set the login for the "system" relay session used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>_See class-level documentation for more information on the "system" session.;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,system,relay,session,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,session;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1382062574;Set the login for the "system" relay session used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>_See class-level documentation for more information on the "system" session.;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,system,relay,session,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,session;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1382062575;Set the login for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1382495681;Set the login for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1382559988;Set the login for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1384292065;Set the login for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>_See class-level documentation for more information on the "system" connection.;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1385507478;Set the login for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>See class-level documentation for more information on the "system" connection.;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1386004713;Set the login for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>See class-level documentation for more information on the "system" connection.;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1386350678;Set the login for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>See class-level documentation for more information on the "system" connection.;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1386365044;Set the login for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>See class-level documentation for more information on the "system" connection.;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1387852827;Set the login for the "system" connection used to send messages to the STOMP_broker without having a client session (e.g. REST/HTTP request handling method)._<p>See class-level documentation for more information on the "system" connection.;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,system,connection,used,to,send,messages,to,the,stomp,broker,without,having,a,client,session,e,g,rest,http,request,handling,method,p,see,class,level,documentation,for,more,information,on,the,system,connection;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1387852827;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1393279654;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1394484373;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1394485082;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1395007965;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1395007965;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1395007965;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1395090675;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1395105194;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1395239748;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1396578670;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1397429525;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1397523793;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1398311203;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1398868011;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1398870027;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1398870703;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1400205617;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1403856366;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1404062102;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1404062122;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1404880787;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1404880799;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>_By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1409784938;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1409790625;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1411389021;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1411699723;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1411747799;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1413848647;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1417548636;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1426887271;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1429286144;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1429874322;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1431728285;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1461047077;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1463066690;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1467730834;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1473887989;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1480558671;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1485203320;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1485213173;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1496259743;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1496837955;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1497341397;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1498780456;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1500448076;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1521562905;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1526485251;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1530174524;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1530174524;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1530174524;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1531942400;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1532091916;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> public void setSystemLogin(String systemLogin);1532402679;Set the login for the shared "system" connection used to send messages to_the STOMP broker from within the application, i.e. messages not associated_with a specific client session (e.g. REST/HTTP request handling method)._<p>By default this is set to "guest".;public void setSystemLogin(String systemLogin) {_		Assert.hasText(systemLogin, "systemLogin must not be empty")__		this.systemLogin = systemLogin__	};set,the,login,for,the,shared,system,connection,used,to,send,messages,to,the,stomp,broker,from,within,the,application,i,e,messages,not,associated,with,a,specific,client,session,e,g,rest,http,request,handling,method,p,by,default,this,is,set,to,guest;public,void,set,system,login,string,system,login,assert,has,text,system,login,system,login,must,not,be,empty,this,system,login,system,login
StompBrokerRelayMessageHandler -> @Nullable 	public TcpOperations<byte[]> getTcpClient();1496837955;Get the configured TCP client (never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized).;@Nullable_	public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;nullable,public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> @Nullable 	public TcpOperations<byte[]> getTcpClient();1497341397;Get the configured TCP client (never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized).;@Nullable_	public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;nullable,public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> @Nullable 	public TcpOperations<byte[]> getTcpClient();1498780456;Get the configured TCP client (never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized).;@Nullable_	public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;nullable,public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> @Nullable 	public TcpOperations<byte[]> getTcpClient();1500448076;Get the configured TCP client (never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized).;@Nullable_	public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;nullable,public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> @Nullable 	public TcpOperations<byte[]> getTcpClient();1521562905;Get the configured TCP client (never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized).;@Nullable_	public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;nullable,public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> @Nullable 	public TcpOperations<byte[]> getTcpClient();1526485251;Get the configured TCP client (never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized).;@Nullable_	public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;nullable,public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> @Nullable 	public TcpOperations<byte[]> getTcpClient();1530174524;Get the configured TCP client (never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized).;@Nullable_	public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;nullable,public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> @Nullable 	public TcpOperations<byte[]> getTcpClient();1530174524;Get the configured TCP client (never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized).;@Nullable_	public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;nullable,public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> @Nullable 	public TcpOperations<byte[]> getTcpClient();1530174524;Get the configured TCP client (never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized).;@Nullable_	public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;nullable,public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> @Nullable 	public TcpOperations<byte[]> getTcpClient();1531942400;Get the configured TCP client (never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized).;@Nullable_	public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;nullable,public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> @Nullable 	public TcpOperations<byte[]> getTcpClient();1532091916;Get the configured TCP client (never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized).;@Nullable_	public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;nullable,public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> @Nullable 	public TcpOperations<byte[]> getTcpClient();1532402679;Get the configured TCP client (never {@code null} unless not configured_invoked and this method is invoked before the handler is started and_hence a default implementation initialized).;@Nullable_	public TcpOperations<byte[]> getTcpClient() {_		return this.tcpClient__	};get,the,configured,tcp,client,never,code,null,unless,not,configured,invoked,and,this,method,is,invoked,before,the,handler,is,started,and,hence,a,default,implementation,initialized;nullable,public,tcp,operations,byte,get,tcp,client,return,this,tcp,client
StompBrokerRelayMessageHandler -> public int getRelayPort();1373756732;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1373924754;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1374083925;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1374099807;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1374115244;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1374422870;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1375392687;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1376961359;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1376961359;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1376961359;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1376961360;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1376961360;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1376961360;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1377656407;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1380226141;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1380245231;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1380565302;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1380573438;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1380589371;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1380675866;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1380745783;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1381152424;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1381799213;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1382062574;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1382062574;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1382062575;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1382495681;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1382559988;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1384292065;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1385507478;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1386004713;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1386350678;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1386365044;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1387852827;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1387852827;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1393279654;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1394484373;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1394485082;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1395007965;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1395007965;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1395007965;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1395090675;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1395105194;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1395239748;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1396578670;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1397429525;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1397523793;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1398311203;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1398868011;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1398870027;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1398870703;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1400205617;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1403856366;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1404062102;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1404062122;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1404880787;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1404880799;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1409784938;@return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1409790625;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1411389021;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1411699723;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1411747799;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1413848647;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1417548636;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1426887271;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1429286144;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1429874322;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1431728285;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1461047077;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1463066690;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1467730834;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1473887989;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1480558671;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1485203320;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1485213173;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1496259743;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1496837955;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1497341397;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1498780456;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1500448076;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1521562905;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1526485251;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1530174524;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1530174524;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1530174524;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1531942400;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1532091916;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> public int getRelayPort();1532402679;Return the STOMP message broker port.;public int getRelayPort() {_		return this.relayPort__	};return,the,stomp,message,broker,port;public,int,get,relay,port,return,this,relay,port
StompBrokerRelayMessageHandler -> void setTcpClient(TcpOperations<byte[]> tcpClient);1382559988;Used for unit testing.;void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};used,for,unit,testing;void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> void setTcpClient(TcpOperations<byte[]> tcpClient);1384292065;Used for unit testing.;void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};used,for,unit,testing;void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> void setTcpClient(TcpOperations<byte[]> tcpClient);1385507478;Used for unit testing.;void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};used,for,unit,testing;void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> void setTcpClient(TcpOperations<byte[]> tcpClient);1386004713;Used for unit testing.;void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};used,for,unit,testing;void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> void setTcpClient(TcpOperations<byte[]> tcpClient);1386350678;Used for unit testing.;void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};used,for,unit,testing;void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> void setTcpClient(TcpOperations<byte[]> tcpClient);1386365044;Used for unit testing.;void setTcpClient(TcpOperations<byte[]> tcpClient) {_		this.tcpClient = tcpClient__	};used,for,unit,testing;void,set,tcp,client,tcp,operations,byte,tcp,client,this,tcp,client,tcp,client
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1380745783;@return The interval, in milliseconds, at which the "system" relay session expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,relay,session,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1381152424;@return The interval, in milliseconds, at which the "system" relay session expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,relay,session,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1381799213;@return The interval, in milliseconds, at which the "system" relay session expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,relay,session,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1382062574;@return The interval, in milliseconds, at which the "system" relay session expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,relay,session,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1382062574;@return The interval, in milliseconds, at which the "system" relay session expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,relay,session,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1382062575;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1382495681;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1382559988;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1384292065;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1385507478;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1386004713;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1386350678;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1386365044;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1387852827;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1387852827;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1393279654;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1394484373;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1394485082;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1395007965;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1395007965;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1395007965;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1395090675;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1395105194;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1395239748;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1396578670;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1397429525;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1397523793;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1398311203;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1398868011;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1398870027;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1398870703;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1400205617;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1403856366;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1404062102;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1404062122;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1404880787;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1404880799;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1409784938;@return The interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1409790625;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1411389021;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1411699723;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1411747799;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1413848647;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1417548636;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1426887271;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1429286144;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1429874322;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1431728285;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1461047077;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1463066690;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1467730834;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1473887989;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1480558671;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1485203320;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1485213173;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1496259743;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1496837955;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1497341397;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1498780456;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1500448076;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1521562905;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1526485251;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1530174524;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1530174524;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1530174524;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1531942400;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1532091916;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
StompBrokerRelayMessageHandler -> public long getSystemHeartbeatReceiveInterval();1532402679;Return the interval, in milliseconds, at which the "system" connection expects_to receive heartbeats from the STOMP broker.;public long getSystemHeartbeatReceiveInterval() {_		return this.systemHeartbeatReceiveInterval__	};return,the,interval,in,milliseconds,at,which,the,system,connection,expects,to,receive,heartbeats,from,the,stomp,broker;public,long,get,system,heartbeat,receive,interval,return,this,system,heartbeat,receive,interval
