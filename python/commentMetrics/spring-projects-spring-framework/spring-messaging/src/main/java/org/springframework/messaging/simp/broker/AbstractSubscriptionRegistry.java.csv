commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;35;;@Override public final void registerSubscription(Message<?> message) {     MessageHeaders headers = message.getHeaders().     SimpMessageType messageType = SimpMessageHeaderAccessor.getMessageType(headers).     if (!SimpMessageType.SUBSCRIBE.equals(messageType)) {         throw new IllegalArgumentException("Expected SUBSCRIBE: " + message).     }     String sessionId = SimpMessageHeaderAccessor.getSessionId(headers).     if (sessionId == null) {         if (logger.isErrorEnabled()) {             logger.error("No sessionId in  " + message).         }         return.     }     String subscriptionId = SimpMessageHeaderAccessor.getSubscriptionId(headers).     if (subscriptionId == null) {         if (logger.isErrorEnabled()) {             logger.error("No subscriptionId in " + message).         }         return.     }     String destination = SimpMessageHeaderAccessor.getDestination(headers).     if (destination == null) {         if (logger.isErrorEnabled()) {             logger.error("No destination in " + message).         }         return.     }     addSubscriptionInternal(sessionId, subscriptionId, destination, message). }
false;public,final;1;27;;@Override public final void unregisterSubscription(Message<?> message) {     MessageHeaders headers = message.getHeaders().     SimpMessageType messageType = SimpMessageHeaderAccessor.getMessageType(headers).     if (!SimpMessageType.UNSUBSCRIBE.equals(messageType)) {         throw new IllegalArgumentException("Expected UNSUBSCRIBE: " + message).     }     String sessionId = SimpMessageHeaderAccessor.getSessionId(headers).     if (sessionId == null) {         if (logger.isErrorEnabled()) {             logger.error("No sessionId in " + message).         }         return.     }     String subscriptionId = SimpMessageHeaderAccessor.getSubscriptionId(headers).     if (subscriptionId == null) {         if (logger.isErrorEnabled()) {             logger.error("No subscriptionId " + message).         }         return.     }     removeSubscriptionInternal(sessionId, subscriptionId, message). }
false;public,final;1;19;;@Override public final MultiValueMap<String, String> findSubscriptions(Message<?> message) {     MessageHeaders headers = message.getHeaders().     SimpMessageType type = SimpMessageHeaderAccessor.getMessageType(headers).     if (!SimpMessageType.MESSAGE.equals(type)) {         throw new IllegalArgumentException("Unexpected message type: " + type).     }     String destination = SimpMessageHeaderAccessor.getDestination(headers).     if (destination == null) {         if (logger.isErrorEnabled()) {             logger.error("No destination in " + message).         }         return EMPTY_MAP.     }     return findSubscriptionsInternal(destination, message). }
false;protected,abstract;4;2;;protected abstract void addSubscriptionInternal(String sessionId, String subscriptionId, String destination, Message<?> message).
false;protected,abstract;3;2;;protected abstract void removeSubscriptionInternal(String sessionId, String subscriptionId, Message<?> message).
false;protected,abstract;2;2;;protected abstract MultiValueMap<String, String> findSubscriptionsInternal(String destination, Message<?> message).
