# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMessageConverter -> protected Object convertToInternal(Object payload, MessageHeaders headers, Object conversionHint);1467726769;Convert the payload object to serialized form._@param payload the Object to convert_@param headers optional headers for the message (may be {@code null})_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the resulting payload for the message, or {@code null} if the converter_cannot perform the conversion_@since 4.2;protected Object convertToInternal(Object payload, MessageHeaders headers, Object conversionHint) {_		return null__	};convert,the,payload,object,to,serialized,form,param,payload,the,object,to,convert,param,headers,optional,headers,for,the,message,may,be,code,null,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,resulting,payload,for,the,message,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;protected,object,convert,to,internal,object,payload,message,headers,headers,object,conversion,hint,return,null
AbstractMessageConverter -> protected Object convertToInternal(Object payload, MessageHeaders headers, Object conversionHint);1467730834;Convert the payload object to serialized form._@param payload the Object to convert_@param headers optional headers for the message (may be {@code null})_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the resulting payload for the message, or {@code null} if the converter_cannot perform the conversion_@since 4.2;protected Object convertToInternal(Object payload, MessageHeaders headers, Object conversionHint) {_		return null__	};convert,the,payload,object,to,serialized,form,param,payload,the,object,to,convert,param,headers,optional,headers,for,the,message,may,be,code,null,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,resulting,payload,for,the,message,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;protected,object,convert,to,internal,object,payload,message,headers,headers,object,conversion,hint,return,null
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1386350678;Construct an {@code AbstractMessageConverter} with one supported MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,with,one,supported,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1393533834;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1393555253;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1397429525;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1405011420;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1413848647;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1424274301;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1432042540;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1432125256;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1437139543;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1437753031;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1439394346;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1467726769;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1467730834;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1495868221;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1496242568;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1496837955;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1498780456;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1502974979;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> protected AbstractMessageConverter(MimeType supportedMimeType);1518521509;Construct an {@code AbstractMessageConverter} supporting a single MIME type._@param supportedMimeType the supported MIME type;protected AbstractMessageConverter(MimeType supportedMimeType) {_		Assert.notNull(supportedMimeType, "supportedMimeType is required")__		this.supportedMimeTypes = Collections.<MimeType>singletonList(supportedMimeType)__	};construct,an,code,abstract,message,converter,supporting,a,single,mime,type,param,supported,mime,type,the,supported,mime,type;protected,abstract,message,converter,mime,type,supported,mime,type,assert,not,null,supported,mime,type,supported,mime,type,is,required,this,supported,mime,types,collections,mime,type,singleton,list,supported,mime,type
AbstractMessageConverter -> public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;1386350678;Convert the message payload from serialized form to an Object.;public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;convert,the,message,payload,from,serialized,form,to,an,object;public,abstract,object,convert,from,internal,message,message,class,target,class
AbstractMessageConverter -> public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;1393533834;Convert the message payload from serialized form to an Object.;public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;convert,the,message,payload,from,serialized,form,to,an,object;public,abstract,object,convert,from,internal,message,message,class,target,class
AbstractMessageConverter -> public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;1393555253;Convert the message payload from serialized form to an Object.;public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;convert,the,message,payload,from,serialized,form,to,an,object;public,abstract,object,convert,from,internal,message,message,class,target,class
AbstractMessageConverter -> public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;1397429525;Convert the message payload from serialized form to an Object.;public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;convert,the,message,payload,from,serialized,form,to,an,object;public,abstract,object,convert,from,internal,message,message,class,target,class
AbstractMessageConverter -> public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;1405011420;Convert the message payload from serialized form to an Object.;public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;convert,the,message,payload,from,serialized,form,to,an,object;public,abstract,object,convert,from,internal,message,message,class,target,class
AbstractMessageConverter -> public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;1413848647;Convert the message payload from serialized form to an Object.;public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;convert,the,message,payload,from,serialized,form,to,an,object;public,abstract,object,convert,from,internal,message,message,class,target,class
AbstractMessageConverter -> public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;1424274301;Convert the message payload from serialized form to an Object.;public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;convert,the,message,payload,from,serialized,form,to,an,object;public,abstract,object,convert,from,internal,message,message,class,target,class
AbstractMessageConverter -> public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;1432042540;Convert the message payload from serialized form to an Object.;public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;convert,the,message,payload,from,serialized,form,to,an,object;public,abstract,object,convert,from,internal,message,message,class,target,class
AbstractMessageConverter -> public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;1432125256;Convert the message payload from serialized form to an Object.;public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;convert,the,message,payload,from,serialized,form,to,an,object;public,abstract,object,convert,from,internal,message,message,class,target,class
AbstractMessageConverter -> public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;1437139543;Convert the message payload from serialized form to an Object.;public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass)_;convert,the,message,payload,from,serialized,form,to,an,object;public,abstract,object,convert,from,internal,message,message,class,target,class
AbstractMessageConverter -> @Nullable 	protected Object convertFromInternal(Message<?> message, Class<?> targetClass, @Nullable Object conversionHint);1495868221;Convert the message payload from serialized form to an Object._@param message the input message_@param targetClass the target class for the conversion_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the result of the conversion, or {@code null} if the converter cannot_perform the conversion_@since 4.2;@Nullable_	protected Object convertFromInternal(Message<?> message, Class<?> targetClass, @Nullable Object conversionHint) {_		return null__	};convert,the,message,payload,from,serialized,form,to,an,object,param,message,the,input,message,param,target,class,the,target,class,for,the,conversion,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,result,of,the,conversion,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;nullable,protected,object,convert,from,internal,message,message,class,target,class,nullable,object,conversion,hint,return,null
AbstractMessageConverter -> @Nullable 	protected Object convertFromInternal(Message<?> message, Class<?> targetClass, @Nullable Object conversionHint);1496242568;Convert the message payload from serialized form to an Object._@param message the input message_@param targetClass the target class for the conversion_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the result of the conversion, or {@code null} if the converter cannot_perform the conversion_@since 4.2;@Nullable_	protected Object convertFromInternal(Message<?> message, Class<?> targetClass, @Nullable Object conversionHint) {_		return null__	};convert,the,message,payload,from,serialized,form,to,an,object,param,message,the,input,message,param,target,class,the,target,class,for,the,conversion,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,result,of,the,conversion,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;nullable,protected,object,convert,from,internal,message,message,class,target,class,nullable,object,conversion,hint,return,null
AbstractMessageConverter -> @Nullable 	protected Object convertToInternal(Object payload, @Nullable MessageHeaders headers, @Nullable Object conversionHint);1495868221;Convert the payload object to serialized form._@param payload the Object to convert_@param headers optional headers for the message (may be {@code null})_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the resulting payload for the message, or {@code null} if the converter_cannot perform the conversion_@since 4.2;@Nullable_	protected Object convertToInternal(Object payload, @Nullable MessageHeaders headers, @Nullable Object conversionHint) {_		return null__	};convert,the,payload,object,to,serialized,form,param,payload,the,object,to,convert,param,headers,optional,headers,for,the,message,may,be,code,null,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,resulting,payload,for,the,message,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;nullable,protected,object,convert,to,internal,object,payload,nullable,message,headers,headers,nullable,object,conversion,hint,return,null
AbstractMessageConverter -> @Nullable 	protected Object convertToInternal(Object payload, @Nullable MessageHeaders headers, @Nullable Object conversionHint);1496242568;Convert the payload object to serialized form._@param payload the Object to convert_@param headers optional headers for the message (may be {@code null})_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the resulting payload for the message, or {@code null} if the converter_cannot perform the conversion_@since 4.2;@Nullable_	protected Object convertToInternal(Object payload, @Nullable MessageHeaders headers, @Nullable Object conversionHint) {_		return null__	};convert,the,payload,object,to,serialized,form,param,payload,the,object,to,convert,param,headers,optional,headers,for,the,message,may,be,code,null,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,resulting,payload,for,the,message,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;nullable,protected,object,convert,to,internal,object,payload,nullable,message,headers,headers,nullable,object,conversion,hint,return,null
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1393533834;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1393555253;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1397429525;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1405011420;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1413848647;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1424274301;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1432042540;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1432125256;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1437139543;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1437753031;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1439394346;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1467726769;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1467730834;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1495868221;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1496242568;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1496837955;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1498780456;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1502974979;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> public boolean isStrictContentTypeMatch();1518521509;Whether content type resolution must produce a value that matches one of_the supported MIME types.;public boolean isStrictContentTypeMatch() {_		return this.strictContentTypeMatch__	};whether,content,type,resolution,must,produce,a,value,that,matches,one,of,the,supported,mime,types;public,boolean,is,strict,content,type,match,return,this,strict,content,type,match
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1386350678;Construct an {@code AbstractMessageConverter} with multiple supported MIME type._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "SupportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<MimeType>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,with,multiple,supported,mime,type,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,mime,type,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1393533834;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "SupportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<MimeType>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,mime,type,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1393555253;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "SupportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<MimeType>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,mime,type,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1397429525;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "SupportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<MimeType>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,mime,type,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1405011420;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "SupportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<MimeType>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,mime,type,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1413848647;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "SupportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<MimeType>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,mime,type,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1424274301;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<MimeType>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,mime,type,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1432042540;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<MimeType>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,mime,type,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1432125256;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<MimeType>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,mime,type,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1437139543;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<MimeType>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,mime,type,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1437753031;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<MimeType>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,mime,type,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1439394346;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<MimeType>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,mime,type,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1467726769;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<MimeType>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,mime,type,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1467730834;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1495868221;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1496242568;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1496837955;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1498780456;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1502974979;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,supported,mime,types
AbstractMessageConverter -> protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes);1518521509;Construct an {@code AbstractMessageConverter} supporting multiple MIME types._@param supportedMimeTypes the supported MIME types;protected AbstractMessageConverter(Collection<MimeType> supportedMimeTypes) {_		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null")__		this.supportedMimeTypes = new ArrayList<>(supportedMimeTypes)__	};construct,an,code,abstract,message,converter,supporting,multiple,mime,types,param,supported,mime,types,the,supported,mime,types;protected,abstract,message,converter,collection,mime,type,supported,mime,types,assert,not,null,supported,mime,types,supported,mime,types,must,not,be,null,this,supported,mime,types,new,array,list,supported,mime,types
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1386350678;Configure the {@link ContentTypeResolver} to use._<p>The default value is {@code null}. However when {@link CompositeMessageConverter}_is used it configures all of its delegates with a default resolver.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,p,the,default,value,is,code,null,however,when,link,composite,message,converter,is,used,it,configures,all,of,its,delegates,with,a,default,resolver;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1393533834;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>_By default, no {@code ContentTypeResolver} is configured. When a resolver_is not configured, then {@link #setStrictContentTypeMatch(boolean)} should_be left {@code false} (the default) or otherwise this converter will ignore_all input messages.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,by,default,no,code,content,type,resolver,is,configured,when,a,resolver,is,not,configured,then,link,set,strict,content,type,match,boolean,should,be,left,code,false,the,default,or,otherwise,this,converter,will,ignore,all,input,messages;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1393555253;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>_Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>_By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1397429525;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>_Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>_By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1405011420;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>_Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>_By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1413848647;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>_Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>_By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1424274301;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1432042540;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1432125256;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1437139543;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1437753031;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1439394346;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1467726769;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1467730834;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1495868221;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1496242568;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(ContentTypeResolver resolver);1496837955;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> @Deprecated 	public Object convertToInternal(Object payload, MessageHeaders headers);1437753031;Convert the payload object to serialized form._@deprecated as of Spring 4.2, in favor of {@link #convertFromInternal(Message, Class, Object)}_(which is also protected instead of public);@Deprecated_	public Object convertToInternal(Object payload, MessageHeaders headers) {_		return null__	};convert,the,payload,object,to,serialized,form,deprecated,as,of,spring,4,2,in,favor,of,link,convert,from,internal,message,class,object,which,is,also,protected,instead,of,public;deprecated,public,object,convert,to,internal,object,payload,message,headers,headers,return,null
AbstractMessageConverter -> @Deprecated 	public Object convertToInternal(Object payload, MessageHeaders headers);1439394346;Convert the payload object to serialized form._@deprecated as of Spring 4.2, in favor of {@link #convertFromInternal(Message, Class, Object)}_(which is also protected instead of public);@Deprecated_	public Object convertToInternal(Object payload, MessageHeaders headers) {_		return null__	};convert,the,payload,object,to,serialized,form,deprecated,as,of,spring,4,2,in,favor,of,link,convert,from,internal,message,class,object,which,is,also,protected,instead,of,public;deprecated,public,object,convert,to,internal,object,payload,message,headers,headers,return,null
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1386350678;Return the default {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,default,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1393533834;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1393555253;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1397429525;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1405011420;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1413848647;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1424274301;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1432042540;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1432125256;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1437139543;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1437753031;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1439394346;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1467726769;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1467730834;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1495868221;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1496242568;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public ContentTypeResolver getContentTypeResolver();1496837955;Return the configured {@link ContentTypeResolver}.;public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> @SuppressWarnings("deprecation") 	protected Object convertFromInternal(Message<?> message, Class<?> targetClass, Object conversionHint);1437753031;Convert the message payload from serialized form to an Object._@param message the input message_@param targetClass the target class for the conversion_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the result of the conversion, or {@code null} if the converter cannot_perform the conversion_@since 4.2;@SuppressWarnings("deprecation")_	protected Object convertFromInternal(Message<?> message, Class<?> targetClass, Object conversionHint) {_		return convertFromInternal(message, targetClass)__	};convert,the,message,payload,from,serialized,form,to,an,object,param,message,the,input,message,param,target,class,the,target,class,for,the,conversion,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,result,of,the,conversion,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;suppress,warnings,deprecation,protected,object,convert,from,internal,message,message,class,target,class,object,conversion,hint,return,convert,from,internal,message,target,class
AbstractMessageConverter -> @SuppressWarnings("deprecation") 	protected Object convertFromInternal(Message<?> message, Class<?> targetClass, Object conversionHint);1439394346;Convert the message payload from serialized form to an Object._@param message the input message_@param targetClass the target class for the conversion_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the result of the conversion, or {@code null} if the converter cannot_perform the conversion_@since 4.2;@SuppressWarnings("deprecation")_	protected Object convertFromInternal(Message<?> message, Class<?> targetClass, Object conversionHint) {_		return convertFromInternal(message, targetClass)__	};convert,the,message,payload,from,serialized,form,to,an,object,param,message,the,input,message,param,target,class,the,target,class,for,the,conversion,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,result,of,the,conversion,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;suppress,warnings,deprecation,protected,object,convert,from,internal,message,message,class,target,class,object,conversion,hint,return,convert,from,internal,message,target,class
AbstractMessageConverter -> protected Object convertFromInternal(Message<?> message, Class<?> targetClass, Object conversionHint);1467726769;Convert the message payload from serialized form to an Object._@param message the input message_@param targetClass the target class for the conversion_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the result of the conversion, or {@code null} if the converter cannot_perform the conversion_@since 4.2;protected Object convertFromInternal(Message<?> message, Class<?> targetClass, Object conversionHint) {_		return null__	};convert,the,message,payload,from,serialized,form,to,an,object,param,message,the,input,message,param,target,class,the,target,class,for,the,conversion,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,result,of,the,conversion,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;protected,object,convert,from,internal,message,message,class,target,class,object,conversion,hint,return,null
AbstractMessageConverter -> protected Object convertFromInternal(Message<?> message, Class<?> targetClass, Object conversionHint);1467730834;Convert the message payload from serialized form to an Object._@param message the input message_@param targetClass the target class for the conversion_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the result of the conversion, or {@code null} if the converter cannot_perform the conversion_@since 4.2;protected Object convertFromInternal(Message<?> message, Class<?> targetClass, Object conversionHint) {_		return null__	};convert,the,message,payload,from,serialized,form,to,an,object,param,message,the,input,message,param,target,class,the,target,class,for,the,conversion,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,result,of,the,conversion,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;protected,object,convert,from,internal,message,message,class,target,class,object,conversion,hint,return,null
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1386350678;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class.equals(payloadClass) || String.class.equals(payloadClass),_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,equals,payload,class,string,class,equals,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1393533834;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class.equals(payloadClass) || String.class.equals(payloadClass),_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,equals,payload,class,string,class,equals,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1393555253;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class.equals(payloadClass) || String.class.equals(payloadClass),_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,equals,payload,class,string,class,equals,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1397429525;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class.equals(payloadClass) || String.class.equals(payloadClass),_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,equals,payload,class,string,class,equals,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1405011420;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class.equals(payloadClass) || String.class.equals(payloadClass),_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,equals,payload,class,string,class,equals,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1413848647;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class.equals(payloadClass) || String.class.equals(payloadClass),_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,equals,payload,class,string,class,equals,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1424274301;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class.equals(payloadClass) || String.class.equals(payloadClass),_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,equals,payload,class,string,class,equals,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1432042540;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class.equals(payloadClass) || String.class.equals(payloadClass),_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,equals,payload,class,string,class,equals,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1432125256;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class == payloadClass || String.class == payloadClass,_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,payload,class,string,class,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1437139543;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class == payloadClass || String.class == payloadClass,_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,payload,class,string,class,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1437753031;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class == payloadClass || String.class == payloadClass,_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,payload,class,string,class,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1439394346;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class == payloadClass || String.class == payloadClass,_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,payload,class,string,class,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1467726769;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class == payloadClass || String.class == payloadClass,_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,payload,class,string,class,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1467730834;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class == payloadClass || String.class == payloadClass,_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,payload,class,string,class,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1495868221;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class == payloadClass || String.class == payloadClass,_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,payload,class,string,class,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1496242568;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class == payloadClass || String.class == payloadClass,_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,payload,class,string,class,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1496837955;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class == payloadClass || String.class == payloadClass,_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,payload,class,string,class,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1498780456;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class == payloadClass || String.class == payloadClass,_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,payload,class,string,class,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1502974979;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class == payloadClass || String.class == payloadClass,_				"Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,payload,class,string,class,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> public void setSerializedPayloadClass(Class<?> payloadClass);1518521509;Configure the preferred serialization class to use (byte[] or String) when_converting an Object payload to a {@link Message}._<p>The default value is byte[]._@param payloadClass either byte[] or String;public void setSerializedPayloadClass(Class<?> payloadClass) {_		Assert.isTrue(byte[].class == payloadClass || String.class == payloadClass,_				() -> "Payload class must be byte[] or String: " + payloadClass)__		this.serializedPayloadClass = payloadClass__	};configure,the,preferred,serialization,class,to,use,byte,or,string,when,converting,an,object,payload,to,a,link,message,p,the,default,value,is,byte,param,payload,class,either,byte,or,string;public,void,set,serialized,payload,class,class,payload,class,assert,is,true,byte,class,payload,class,string,class,payload,class,payload,class,must,be,byte,or,string,payload,class,this,serialized,payload,class,payload,class
AbstractMessageConverter -> @Deprecated 	public Object convertFromInternal(Message<?> message, Class<?> targetClass);1437753031;Convert the message payload from serialized form to an Object._@deprecated as of Spring 4.2, in favor of {@link #convertFromInternal(Message, Class, Object)}_(which is also protected instead of public);@Deprecated_	public Object convertFromInternal(Message<?> message, Class<?> targetClass) {_		return null__	};convert,the,message,payload,from,serialized,form,to,an,object,deprecated,as,of,spring,4,2,in,favor,of,link,convert,from,internal,message,class,object,which,is,also,protected,instead,of,public;deprecated,public,object,convert,from,internal,message,message,class,target,class,return,null
AbstractMessageConverter -> @Deprecated 	public Object convertFromInternal(Message<?> message, Class<?> targetClass);1439394346;Convert the message payload from serialized form to an Object._@deprecated as of Spring 4.2, in favor of {@link #convertFromInternal(Message, Class, Object)}_(which is also protected instead of public);@Deprecated_	public Object convertFromInternal(Message<?> message, Class<?> targetClass) {_		return null__	};convert,the,message,payload,from,serialized,form,to,an,object,deprecated,as,of,spring,4,2,in,favor,of,link,convert,from,internal,message,class,object,which,is,also,protected,instead,of,public;deprecated,public,object,convert,from,internal,message,message,class,target,class,return,null
AbstractMessageConverter -> @Nullable 	protected Object convertFromInternal( 			Message<?> message, Class<?> targetClass, @Nullable Object conversionHint);1496837955;Convert the message payload from serialized form to an Object._@param message the input message_@param targetClass the target class for the conversion_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the result of the conversion, or {@code null} if the converter cannot_perform the conversion_@since 4.2;@Nullable_	protected Object convertFromInternal(_			Message<?> message, Class<?> targetClass, @Nullable Object conversionHint) {__		return null__	};convert,the,message,payload,from,serialized,form,to,an,object,param,message,the,input,message,param,target,class,the,target,class,for,the,conversion,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,result,of,the,conversion,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;nullable,protected,object,convert,from,internal,message,message,class,target,class,nullable,object,conversion,hint,return,null
AbstractMessageConverter -> @Nullable 	protected Object convertFromInternal( 			Message<?> message, Class<?> targetClass, @Nullable Object conversionHint);1498780456;Convert the message payload from serialized form to an Object._@param message the input message_@param targetClass the target class for the conversion_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the result of the conversion, or {@code null} if the converter cannot_perform the conversion_@since 4.2;@Nullable_	protected Object convertFromInternal(_			Message<?> message, Class<?> targetClass, @Nullable Object conversionHint) {__		return null__	};convert,the,message,payload,from,serialized,form,to,an,object,param,message,the,input,message,param,target,class,the,target,class,for,the,conversion,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,result,of,the,conversion,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;nullable,protected,object,convert,from,internal,message,message,class,target,class,nullable,object,conversion,hint,return,null
AbstractMessageConverter -> @Nullable 	protected Object convertFromInternal( 			Message<?> message, Class<?> targetClass, @Nullable Object conversionHint);1502974979;Convert the message payload from serialized form to an Object._@param message the input message_@param targetClass the target class for the conversion_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the result of the conversion, or {@code null} if the converter cannot_perform the conversion_@since 4.2;@Nullable_	protected Object convertFromInternal(_			Message<?> message, Class<?> targetClass, @Nullable Object conversionHint) {__		return null__	};convert,the,message,payload,from,serialized,form,to,an,object,param,message,the,input,message,param,target,class,the,target,class,for,the,conversion,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,result,of,the,conversion,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;nullable,protected,object,convert,from,internal,message,message,class,target,class,nullable,object,conversion,hint,return,null
AbstractMessageConverter -> @Nullable 	protected Object convertFromInternal( 			Message<?> message, Class<?> targetClass, @Nullable Object conversionHint);1518521509;Convert the message payload from serialized form to an Object._@param message the input message_@param targetClass the target class for the conversion_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the result of the conversion, or {@code null} if the converter cannot_perform the conversion_@since 4.2;@Nullable_	protected Object convertFromInternal(_			Message<?> message, Class<?> targetClass, @Nullable Object conversionHint) {__		return null__	};convert,the,message,payload,from,serialized,form,to,an,object,param,message,the,input,message,param,target,class,the,target,class,for,the,conversion,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,result,of,the,conversion,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;nullable,protected,object,convert,from,internal,message,message,class,target,class,nullable,object,conversion,hint,return,null
AbstractMessageConverter -> @Nullable 	protected MimeType getDefaultContentType(Object payload);1495868221;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;@Nullable_	protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;nullable,protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> @Nullable 	protected MimeType getDefaultContentType(Object payload);1496242568;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;@Nullable_	protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;nullable,protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> @Nullable 	protected MimeType getDefaultContentType(Object payload);1496837955;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;@Nullable_	protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;nullable,protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> @Nullable 	protected MimeType getDefaultContentType(Object payload);1498780456;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;@Nullable_	protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;nullable,protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> @Nullable 	protected MimeType getDefaultContentType(Object payload);1502974979;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;@Nullable_	protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;nullable,protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> @Nullable 	protected MimeType getDefaultContentType(Object payload);1518521509;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;@Nullable_	protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;nullable,protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1386350678;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1393533834;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1393555253;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1397429525;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1405011420;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1413848647;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1424274301;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1432042540;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1432125256;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1437139543;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1437753031;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1439394346;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1467726769;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1467730834;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1495868221;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1496242568;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1496837955;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1498780456;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1502974979;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> protected abstract boolean supports(Class<?> clazz)_;1518521509;Whether the given class is supported by this converter._@param clazz the class to test for support_@return {@code true} if supported_ {@code false} otherwise;protected abstract boolean supports(Class<?> clazz)_;whether,the,given,class,is,supported,by,this,converter,param,clazz,the,class,to,test,for,support,return,code,true,if,supported,code,false,otherwise;protected,abstract,boolean,supports,class,clazz
AbstractMessageConverter -> @SuppressWarnings("deprecation") 	protected Object convertToInternal(Object payload, MessageHeaders headers, Object conversionHint);1437753031;Convert the payload object to serialized form._@param payload the Object to convert_@param headers optional headers for the message (may be {@code null})_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the resulting payload for the message, or {@code null} if the converter_cannot perform the conversion_@since 4.2;@SuppressWarnings("deprecation")_	protected Object convertToInternal(Object payload, MessageHeaders headers, Object conversionHint) {_		return convertToInternal(payload, headers)__	};convert,the,payload,object,to,serialized,form,param,payload,the,object,to,convert,param,headers,optional,headers,for,the,message,may,be,code,null,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,resulting,payload,for,the,message,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;suppress,warnings,deprecation,protected,object,convert,to,internal,object,payload,message,headers,headers,object,conversion,hint,return,convert,to,internal,payload,headers
AbstractMessageConverter -> @SuppressWarnings("deprecation") 	protected Object convertToInternal(Object payload, MessageHeaders headers, Object conversionHint);1439394346;Convert the payload object to serialized form._@param payload the Object to convert_@param headers optional headers for the message (may be {@code null})_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the resulting payload for the message, or {@code null} if the converter_cannot perform the conversion_@since 4.2;@SuppressWarnings("deprecation")_	protected Object convertToInternal(Object payload, MessageHeaders headers, Object conversionHint) {_		return convertToInternal(payload, headers)__	};convert,the,payload,object,to,serialized,form,param,payload,the,object,to,convert,param,headers,optional,headers,for,the,message,may,be,code,null,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,resulting,payload,for,the,message,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;suppress,warnings,deprecation,protected,object,convert,to,internal,object,payload,message,headers,headers,object,conversion,hint,return,convert,to,internal,payload,headers
AbstractMessageConverter -> @Nullable 	public ContentTypeResolver getContentTypeResolver();1498780456;Return the configured {@link ContentTypeResolver}.;@Nullable_	public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;nullable,public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> @Nullable 	public ContentTypeResolver getContentTypeResolver();1502974979;Return the configured {@link ContentTypeResolver}.;@Nullable_	public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;nullable,public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> @Nullable 	public ContentTypeResolver getContentTypeResolver();1518521509;Return the configured {@link ContentTypeResolver}.;@Nullable_	public ContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,content,type,resolver;nullable,public,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1386350678;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1393533834;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1393555253;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1397429525;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1405011420;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1413848647;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1424274301;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1432042540;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1432125256;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1437139543;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1437753031;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1439394346;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1467726769;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1467730834;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1495868221;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1496242568;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1496837955;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1498780456;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1502974979;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public Class<?> getSerializedPayloadClass();1518521509;Return the configured preferred serialization payload class.;public Class<?> getSerializedPayloadClass() {_		return this.serializedPayloadClass__	};return,the,configured,preferred,serialization,payload,class;public,class,get,serialized,payload,class,return,this,serialized,payload,class
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1386350678;Return the configured supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,configured,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1393533834;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1393555253;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1397429525;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1405011420;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1413848647;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1424274301;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1432042540;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1432125256;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1437139543;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1437753031;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1439394346;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1467726769;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1467730834;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1495868221;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1496242568;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1496837955;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1498780456;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1502974979;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> public List<MimeType> getSupportedMimeTypes();1518521509;Return the supported MIME types.;public List<MimeType> getSupportedMimeTypes() {_		return Collections.unmodifiableList(this.supportedMimeTypes)__	};return,the,supported,mime,types;public,list,mime,type,get,supported,mime,types,return,collections,unmodifiable,list,this,supported,mime,types
AbstractMessageConverter -> @Nullable 	protected Object convertToInternal( 			Object payload, @Nullable MessageHeaders headers, @Nullable Object conversionHint);1496837955;Convert the payload object to serialized form._@param payload the Object to convert_@param headers optional headers for the message (may be {@code null})_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the resulting payload for the message, or {@code null} if the converter_cannot perform the conversion_@since 4.2;@Nullable_	protected Object convertToInternal(_			Object payload, @Nullable MessageHeaders headers, @Nullable Object conversionHint) {__		return null__	};convert,the,payload,object,to,serialized,form,param,payload,the,object,to,convert,param,headers,optional,headers,for,the,message,may,be,code,null,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,resulting,payload,for,the,message,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;nullable,protected,object,convert,to,internal,object,payload,nullable,message,headers,headers,nullable,object,conversion,hint,return,null
AbstractMessageConverter -> @Nullable 	protected Object convertToInternal( 			Object payload, @Nullable MessageHeaders headers, @Nullable Object conversionHint);1498780456;Convert the payload object to serialized form._@param payload the Object to convert_@param headers optional headers for the message (may be {@code null})_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the resulting payload for the message, or {@code null} if the converter_cannot perform the conversion_@since 4.2;@Nullable_	protected Object convertToInternal(_			Object payload, @Nullable MessageHeaders headers, @Nullable Object conversionHint) {__		return null__	};convert,the,payload,object,to,serialized,form,param,payload,the,object,to,convert,param,headers,optional,headers,for,the,message,may,be,code,null,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,resulting,payload,for,the,message,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;nullable,protected,object,convert,to,internal,object,payload,nullable,message,headers,headers,nullable,object,conversion,hint,return,null
AbstractMessageConverter -> @Nullable 	protected Object convertToInternal( 			Object payload, @Nullable MessageHeaders headers, @Nullable Object conversionHint);1502974979;Convert the payload object to serialized form._@param payload the Object to convert_@param headers optional headers for the message (may be {@code null})_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the resulting payload for the message, or {@code null} if the converter_cannot perform the conversion_@since 4.2;@Nullable_	protected Object convertToInternal(_			Object payload, @Nullable MessageHeaders headers, @Nullable Object conversionHint) {__		return null__	};convert,the,payload,object,to,serialized,form,param,payload,the,object,to,convert,param,headers,optional,headers,for,the,message,may,be,code,null,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,resulting,payload,for,the,message,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;nullable,protected,object,convert,to,internal,object,payload,nullable,message,headers,headers,nullable,object,conversion,hint,return,null
AbstractMessageConverter -> @Nullable 	protected Object convertToInternal( 			Object payload, @Nullable MessageHeaders headers, @Nullable Object conversionHint);1518521509;Convert the payload object to serialized form._@param payload the Object to convert_@param headers optional headers for the message (may be {@code null})_@param conversionHint an extra object passed to the {@link MessageConverter},_e.g. the associated {@code MethodParameter} (may be {@code null}}_@return the resulting payload for the message, or {@code null} if the converter_cannot perform the conversion_@since 4.2;@Nullable_	protected Object convertToInternal(_			Object payload, @Nullable MessageHeaders headers, @Nullable Object conversionHint) {__		return null__	};convert,the,payload,object,to,serialized,form,param,payload,the,object,to,convert,param,headers,optional,headers,for,the,message,may,be,code,null,param,conversion,hint,an,extra,object,passed,to,the,link,message,converter,e,g,the,associated,code,method,parameter,may,be,code,null,return,the,resulting,payload,for,the,message,or,code,null,if,the,converter,cannot,perform,the,conversion,since,4,2;nullable,protected,object,convert,to,internal,object,payload,nullable,message,headers,headers,nullable,object,conversion,hint,return,null
AbstractMessageConverter -> public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;1386350678;Convert the payload object to serialized form.;public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;convert,the,payload,object,to,serialized,form;public,abstract,object,convert,to,internal,object,payload,message,headers,headers
AbstractMessageConverter -> public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;1393533834;Convert the payload object to serialized form.;public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;convert,the,payload,object,to,serialized,form;public,abstract,object,convert,to,internal,object,payload,message,headers,headers
AbstractMessageConverter -> public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;1393555253;Convert the payload object to serialized form.;public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;convert,the,payload,object,to,serialized,form;public,abstract,object,convert,to,internal,object,payload,message,headers,headers
AbstractMessageConverter -> public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;1397429525;Convert the payload object to serialized form.;public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;convert,the,payload,object,to,serialized,form;public,abstract,object,convert,to,internal,object,payload,message,headers,headers
AbstractMessageConverter -> public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;1405011420;Convert the payload object to serialized form.;public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;convert,the,payload,object,to,serialized,form;public,abstract,object,convert,to,internal,object,payload,message,headers,headers
AbstractMessageConverter -> public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;1413848647;Convert the payload object to serialized form.;public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;convert,the,payload,object,to,serialized,form;public,abstract,object,convert,to,internal,object,payload,message,headers,headers
AbstractMessageConverter -> public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;1424274301;Convert the payload object to serialized form.;public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;convert,the,payload,object,to,serialized,form;public,abstract,object,convert,to,internal,object,payload,message,headers,headers
AbstractMessageConverter -> public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;1432042540;Convert the payload object to serialized form.;public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;convert,the,payload,object,to,serialized,form;public,abstract,object,convert,to,internal,object,payload,message,headers,headers
AbstractMessageConverter -> public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;1432125256;Convert the payload object to serialized form.;public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;convert,the,payload,object,to,serialized,form;public,abstract,object,convert,to,internal,object,payload,message,headers,headers
AbstractMessageConverter -> public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;1437139543;Convert the payload object to serialized form.;public abstract Object convertToInternal(Object payload, MessageHeaders headers)_;convert,the,payload,object,to,serialized,form;public,abstract,object,convert,to,internal,object,payload,message,headers,headers
AbstractMessageConverter -> protected MimeType getDefaultContentType(Object payload);1386350678;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> protected MimeType getDefaultContentType(Object payload);1393533834;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> protected MimeType getDefaultContentType(Object payload);1393555253;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> protected MimeType getDefaultContentType(Object payload);1397429525;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> protected MimeType getDefaultContentType(Object payload);1405011420;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> protected MimeType getDefaultContentType(Object payload);1413848647;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> protected MimeType getDefaultContentType(Object payload);1424274301;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> protected MimeType getDefaultContentType(Object payload);1432042540;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> protected MimeType getDefaultContentType(Object payload);1432125256;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> protected MimeType getDefaultContentType(Object payload);1437139543;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> protected MimeType getDefaultContentType(Object payload);1437753031;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> protected MimeType getDefaultContentType(Object payload);1439394346;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> protected MimeType getDefaultContentType(Object payload);1467726769;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> protected MimeType getDefaultContentType(Object payload);1467730834;Returns the default content type for the payload. Called when_{@link #toMessage(Object, MessageHeaders)} is invoked without message headers or_without a content type header._<p>By default, this returns the first element of the {@link #getSupportedMimeTypes()_supportedMimeTypes}, if any. Can be overridden in sub-classes._@param payload the payload being converted to message_@return the content type, or {@code null} if not known;protected MimeType getDefaultContentType(Object payload) {_		List<MimeType> mimeTypes = getSupportedMimeTypes()__		return (!mimeTypes.isEmpty() ? mimeTypes.get(0) : null)__	};returns,the,default,content,type,for,the,payload,called,when,link,to,message,object,message,headers,is,invoked,without,message,headers,or,without,a,content,type,header,p,by,default,this,returns,the,first,element,of,the,link,get,supported,mime,types,supported,mime,types,if,any,can,be,overridden,in,sub,classes,param,payload,the,payload,being,converted,to,message,return,the,content,type,or,code,null,if,not,known;protected,mime,type,get,default,content,type,object,payload,list,mime,type,mime,types,get,supported,mime,types,return,mime,types,is,empty,mime,types,get,0,null
AbstractMessageConverter -> public void setContentTypeResolver(@Nullable ContentTypeResolver resolver);1498780456;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(@Nullable ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,nullable,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(@Nullable ContentTypeResolver resolver);1502974979;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(@Nullable ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,nullable,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setContentTypeResolver(@Nullable ContentTypeResolver resolver);1518521509;Configure the {@link ContentTypeResolver} to use to resolve the content_type of an input message._<p>Note that if no resolver is configured, then_{@link #setStrictContentTypeMatch(boolean) strictContentTypeMatch} should_be left as {@code false} (the default) or otherwise this converter will_ignore all messages._<p>By default, a {@code DefaultContentTypeResolver} instance is used.;public void setContentTypeResolver(@Nullable ContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__	};configure,the,link,content,type,resolver,to,use,to,resolve,the,content,type,of,an,input,message,p,note,that,if,no,resolver,is,configured,then,link,set,strict,content,type,match,boolean,strict,content,type,match,should,be,left,as,code,false,the,default,or,otherwise,this,converter,will,ignore,all,messages,p,by,default,a,code,default,content,type,resolver,instance,is,used;public,void,set,content,type,resolver,nullable,content,type,resolver,resolver,this,content,type,resolver,resolver
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1393533834;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._A converter can configured to be strict only when a_{@link #setContentTypeResolver(ContentTypeResolver) contentTypeResolver}_is  configured and the list of {@link #getSupportedMimeTypes() supportedMimeTypes}_is not be empty.__then requires the content type of a message to be resolved__When set to true, #supportsMimeType(MessageHeaders) will return false if the_contentTypeResolver is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(),_					"A strict converter requires a non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(),_					"A strict converter requires a ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,then,requires,the,content,type,of,a,message,to,be,resolved,when,set,to,true,supports,mime,type,message,headers,will,return,false,if,the,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,a,strict,converter,requires,a,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,a,strict,converter,requires,a,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1393555253;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._A converter can configured to be strict only when a_{@link #setContentTypeResolver(ContentTypeResolver) contentTypeResolver}_is  configured and the list of {@link #getSupportedMimeTypes() supportedMimeTypes}_is not be empty.__then requires the content type of a message to be resolved__When set to true, #supportsMimeType(MessageHeaders) will return false if the_contentTypeResolver is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(),_					"A strict converter requires a non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(),_					"A strict converter requires a ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,then,requires,the,content,type,of,a,message,to,be,resolved,when,set,to,true,supports,mime,type,message,headers,will,return,false,if,the,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,a,strict,converter,requires,a,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,a,strict,converter,requires,a,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1397429525;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._A converter can configured to be strict only when a_{@link #setContentTypeResolver(ContentTypeResolver) contentTypeResolver}_is  configured and the list of {@link #getSupportedMimeTypes() supportedMimeTypes}_is not be empty.__then requires the content type of a message to be resolved__When set to true, #supportsMimeType(MessageHeaders) will return false if the_contentTypeResolver is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(),_					"A strict converter requires a non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(),_					"A strict converter requires a ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,then,requires,the,content,type,of,a,message,to,be,resolved,when,set,to,true,supports,mime,type,message,headers,will,return,false,if,the,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,a,strict,converter,requires,a,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,a,strict,converter,requires,a,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1405011420;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._A converter can configured to be strict only when a_{@link #setContentTypeResolver(ContentTypeResolver) contentTypeResolver}_is  configured and the list of {@link #getSupportedMimeTypes() supportedMimeTypes}_is not be empty.__then requires the content type of a message to be resolved__When set to true, #supportsMimeType(MessageHeaders) will return false if the_contentTypeResolver is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types.")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver.")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,then,requires,the,content,type,of,a,message,to,be,resolved,when,set,to,true,supports,mime,type,message,headers,will,return,false,if,the,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1413848647;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._A converter can configured to be strict only when a_{@link #setContentTypeResolver(ContentTypeResolver) contentTypeResolver}_is  configured and the list of {@link #getSupportedMimeTypes() supportedMimeTypes}_is not be empty.__then requires the content type of a message to be resolved__When set to true, #supportsMimeType(MessageHeaders) will return false if the_contentTypeResolver is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types.")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver.")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,then,requires,the,content,type,of,a,message,to,be,resolved,when,set,to,true,supports,mime,type,message,headers,will,return,false,if,the,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1424274301;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._<p>A converter can configured to be strict only when a_{@link #setContentTypeResolver contentTypeResolver} is configured and the_list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty._<p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}_will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}_is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,p,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,p,when,this,flag,is,set,to,code,true,link,supports,mime,type,message,headers,will,return,code,false,if,the,link,set,content,type,resolver,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1432042540;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._<p>A converter can configured to be strict only when a_{@link #setContentTypeResolver contentTypeResolver} is configured and the_list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty._<p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}_will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}_is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,p,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,p,when,this,flag,is,set,to,code,true,link,supports,mime,type,message,headers,will,return,code,false,if,the,link,set,content,type,resolver,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1432125256;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._<p>A converter can configured to be strict only when a_{@link #setContentTypeResolver contentTypeResolver} is configured and the_list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty._<p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}_will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}_is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,p,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,p,when,this,flag,is,set,to,code,true,link,supports,mime,type,message,headers,will,return,code,false,if,the,link,set,content,type,resolver,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1437139543;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._<p>A converter can configured to be strict only when a_{@link #setContentTypeResolver contentTypeResolver} is configured and the_list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty._<p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}_will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}_is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,p,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,p,when,this,flag,is,set,to,code,true,link,supports,mime,type,message,headers,will,return,code,false,if,the,link,set,content,type,resolver,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1437753031;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._<p>A converter can configured to be strict only when a_{@link #setContentTypeResolver contentTypeResolver} is configured and the_list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty._<p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}_will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}_is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,p,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,p,when,this,flag,is,set,to,code,true,link,supports,mime,type,message,headers,will,return,code,false,if,the,link,set,content,type,resolver,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1439394346;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._<p>A converter can configured to be strict only when a_{@link #setContentTypeResolver contentTypeResolver} is configured and the_list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty._<p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}_will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}_is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,p,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,p,when,this,flag,is,set,to,code,true,link,supports,mime,type,message,headers,will,return,code,false,if,the,link,set,content,type,resolver,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1467726769;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._<p>A converter can configured to be strict only when a_{@link #setContentTypeResolver contentTypeResolver} is configured and the_list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty._<p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}_will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}_is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,p,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,p,when,this,flag,is,set,to,code,true,link,supports,mime,type,message,headers,will,return,code,false,if,the,link,set,content,type,resolver,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1467730834;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._<p>A converter can configured to be strict only when a_{@link #setContentTypeResolver contentTypeResolver} is configured and the_list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty._<p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}_will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}_is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,p,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,p,when,this,flag,is,set,to,code,true,link,supports,mime,type,message,headers,will,return,code,false,if,the,link,set,content,type,resolver,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1495868221;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._<p>A converter can configured to be strict only when a_{@link #setContentTypeResolver contentTypeResolver} is configured and the_list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty._<p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}_will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}_is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,p,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,p,when,this,flag,is,set,to,code,true,link,supports,mime,type,message,headers,will,return,code,false,if,the,link,set,content,type,resolver,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1496242568;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._<p>A converter can configured to be strict only when a_{@link #setContentTypeResolver contentTypeResolver} is configured and the_list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty._<p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}_will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}_is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,p,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,p,when,this,flag,is,set,to,code,true,link,supports,mime,type,message,headers,will,return,code,false,if,the,link,set,content,type,resolver,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1496837955;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._<p>A converter can configured to be strict only when a_{@link #setContentTypeResolver contentTypeResolver} is configured and the_list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty._<p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}_will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}_is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,p,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,p,when,this,flag,is,set,to,code,true,link,supports,mime,type,message,headers,will,return,code,false,if,the,link,set,content,type,resolver,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1498780456;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._<p>A converter can configured to be strict only when a_{@link #setContentTypeResolver contentTypeResolver} is configured and the_list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty._<p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}_will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}_is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,p,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,p,when,this,flag,is,set,to,code,true,link,supports,mime,type,message,headers,will,return,code,false,if,the,link,set,content,type,resolver,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1502974979;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._<p>A converter can configured to be strict only when a_{@link #setContentTypeResolver contentTypeResolver} is configured and the_list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty._<p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}_will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}_is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,p,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,p,when,this,flag,is,set,to,code,true,link,supports,mime,type,message,headers,will,return,code,false,if,the,link,set,content,type,resolver,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
AbstractMessageConverter -> public void setStrictContentTypeMatch(boolean strictContentTypeMatch);1518521509;Whether this converter should convert messages for which no content type_could be resolved through the configured_{@link org.springframework.messaging.converter.ContentTypeResolver}._<p>A converter can configured to be strict only when a_{@link #setContentTypeResolver contentTypeResolver} is configured and the_list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty._<p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}_will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}_is not defined or if no content-type header is present.;public void setStrictContentTypeMatch(boolean strictContentTypeMatch) {_		if (strictContentTypeMatch) {_			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types")__			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver")__		}_		this.strictContentTypeMatch = strictContentTypeMatch__	};whether,this,converter,should,convert,messages,for,which,no,content,type,could,be,resolved,through,the,configured,link,org,springframework,messaging,converter,content,type,resolver,p,a,converter,can,configured,to,be,strict,only,when,a,link,set,content,type,resolver,content,type,resolver,is,configured,and,the,list,of,link,get,supported,mime,types,supported,mime,types,is,not,be,empty,p,when,this,flag,is,set,to,code,true,link,supports,mime,type,message,headers,will,return,code,false,if,the,link,set,content,type,resolver,content,type,resolver,is,not,defined,or,if,no,content,type,header,is,present;public,void,set,strict,content,type,match,boolean,strict,content,type,match,if,strict,content,type,match,assert,not,empty,get,supported,mime,types,strict,match,requires,non,empty,list,of,supported,mime,types,assert,not,null,get,content,type,resolver,strict,match,requires,content,type,resolver,this,strict,content,type,match,strict,content,type,match
