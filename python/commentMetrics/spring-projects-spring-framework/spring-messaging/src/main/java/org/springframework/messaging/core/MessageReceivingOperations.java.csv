commented;modifiers;parameterAmount;loc;comment;code
true;;0;2;/**  * Receive a message from a default destination.  * @return the received message, possibly {@code null} if the message could not  * be received, for example due to a timeout  */ ;/**  * Receive a message from a default destination.  * @return the received message, possibly {@code null} if the message could not  * be received, for example due to a timeout  */ @Nullable Message<?> receive() throws MessagingException.
true;;1;2;/**  * Receive a message from the given destination.  * @param destination the target destination  * @return the received message, possibly {@code null} if the message could not  * be received, for example due to a timeout  */ ;/**  * Receive a message from the given destination.  * @param destination the target destination  * @return the received message, possibly {@code null} if the message could not  * be received, for example due to a timeout  */ @Nullable Message<?> receive(D destination) throws MessagingException.
true;;1;2;/**  * Receive a message from a default destination and convert its payload to the  * specified target class.  * @param targetClass the target class to convert the payload to  * @return the converted payload of the reply message, possibly {@code null} if  * the message could not be received, for example due to a timeout  */ ;/**  * Receive a message from a default destination and convert its payload to the  * specified target class.  * @param targetClass the target class to convert the payload to  * @return the converted payload of the reply message, possibly {@code null} if  * the message could not be received, for example due to a timeout  */ @Nullable <T> T receiveAndConvert(Class<T> targetClass) throws MessagingException.
true;;2;2;/**  * Receive a message from the given destination and convert its payload to the  * specified target class.  * @param destination the target destination  * @param targetClass the target class to convert the payload to  * @return the converted payload of the reply message, possibly {@code null} if  * the message could not be received, for example due to a timeout  */ ;/**  * Receive a message from the given destination and convert its payload to the  * specified target class.  * @param destination the target destination  * @param targetClass the target class to convert the payload to  * @return the converted payload of the reply message, possibly {@code null} if  * the message could not be received, for example due to a timeout  */ @Nullable <T> T receiveAndConvert(D destination, Class<T> targetClass) throws MessagingException.
