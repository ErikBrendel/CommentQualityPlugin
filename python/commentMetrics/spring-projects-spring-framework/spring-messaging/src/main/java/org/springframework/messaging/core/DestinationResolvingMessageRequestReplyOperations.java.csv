# id;timestamp;commentText;codeText;commentWords;codeWords
DestinationResolvingMessageRequestReplyOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, 			Class<T> targetClass) throws MessagingException_;1386297052;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.support.converter.MessageConverter},_wrap it as a message with the given headers and send it to the resolved destination,_receive a reply and convert its body to the specified target class.__@param destinationName the name of the target destination_@param request the payload for the request message to send_@param headers the headers for the request message to send_@param targetClass the target class to convert the payload of the reply to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,_			Class<T> targetClass) throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,support,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,and,send,it,to,the,resolved,destination,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,headers,the,headers,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,map,string,object,headers,class,t,target,class,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, 			Class<T> targetClass) throws MessagingException_;1386350678;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers and send it to the resolved destination,_receive a reply and convert its body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param headers the headers for the request message to send_@param targetClass the target class to convert the payload of the reply to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,_			Class<T> targetClass) throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,and,send,it,to,the,resolved,destination,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,headers,the,headers,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,map,string,object,headers,class,t,target,class,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass, 			@Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;1497559506;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message, apply the given post process, and send the resulting_message to the resolved destination, then receive a reply and convert its_body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param targetClass the target class to convert the payload of the reply to_@param requestPostProcessor post process for the request message_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass,_			@Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,apply,the,given,post,process,and,send,the,resulting,message,to,the,resolved,destination,then,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,for,the,request,message,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,nullable,message,post,processor,request,post,processor,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass, 			@Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;1530174524;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message, apply the given post process, and send the resulting_message to the resolved destination, then receive a reply and convert its_body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param targetClass the target class to convert the payload of the reply to_@param requestPostProcessor post process for the request message_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass,_			@Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,apply,the,given,post,process,and,send,the,resulting,message,to,the,resolved,destination,then,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,for,the,request,message,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,nullable,message,post,processor,request,post,processor,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass, 			@Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;1542613849;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message, apply the given post process, and send the resulting_message to the resolved destination, then receive a reply and convert its_body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param targetClass the target class to convert the payload of the reply to_@param requestPostProcessor post process for the request message_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass,_			@Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,apply,the,given,post,process,and,send,the,resulting,message,to,the,resolved,destination,then,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,for,the,request,message,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,nullable,message,post,processor,request,post,processor,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, 			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;1386297052;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.support.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post process,_and send the resulting message to the resolved destination, then receive_a reply and convert its body to the specified target class.__@param destinationName the name of the target destination_@param request the payload for the request message to send_@param headers the headers for the request message to send_@param targetClass the target class to convert the payload of the reply to_@param requestPostProcessor post process for the request message_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,_			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,support,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,process,and,send,the,resulting,message,to,the,resolved,destination,then,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,headers,the,headers,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,for,the,request,message,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,map,string,object,headers,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, 			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;1386350678;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post process,_and send the resulting message to the resolved destination, then receive_a reply and convert its body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param headers the headers for the request message to send_@param targetClass the target class to convert the payload of the reply to_@param requestPostProcessor post process for the request message_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,_			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,process,and,send,the,resulting,message,to,the,resolved,destination,then,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,headers,the,headers,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,for,the,request,message,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,map,string,object,headers,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, 			Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;1497559506;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post process,_and send the resulting message to the resolved destination, then receive_a reply and convert its body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param headers the headers for the request message to send_@param targetClass the target class to convert the payload of the reply to_@param requestPostProcessor post process for the request message_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers,_			Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,process,and,send,the,resulting,message,to,the,resolved,destination,then,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,headers,the,headers,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,for,the,request,message,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,nullable,map,string,object,headers,class,t,target,class,nullable,message,post,processor,request,post,processor,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, 			Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;1530174524;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post process,_and send the resulting message to the resolved destination, then receive_a reply and convert its body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param headers the headers for the request message to send_@param targetClass the target class to convert the payload of the reply to_@param requestPostProcessor post process for the request message_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers,_			Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,process,and,send,the,resulting,message,to,the,resolved,destination,then,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,headers,the,headers,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,for,the,request,message,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,nullable,map,string,object,headers,class,t,target,class,nullable,message,post,processor,request,post,processor,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, 			Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;1542613849;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post process,_and send the resulting message to the resolved destination, then receive_a reply and convert its body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param headers the headers for the request message to send_@param targetClass the target class to convert the payload of the reply to_@param requestPostProcessor post process for the request message_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers,_			Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,process,and,send,the,resulting,message,to,the,resolved,destination,then,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,headers,the,headers,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,for,the,request,message,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,nullable,map,string,object,headers,class,t,target,class,nullable,message,post,processor,request,post,processor,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;1386297052;Resolve the given destination name to a destination and send the given message,_receive a reply and return it.__@param destinationName the name of the target destination_@param requestMessage the mesage to send_@return the received message, possibly {@code null} if the message could not_be received, for example due to a timeout;Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;resolve,the,given,destination,name,to,a,destination,and,send,the,given,message,receive,a,reply,and,return,it,param,destination,name,the,name,of,the,target,destination,param,request,message,the,mesage,to,send,return,the,received,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,send,and,receive,string,destination,name,message,request,message,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;1386350678;Resolve the given destination name to a destination and send the given message,_receive a reply and return it._@param destinationName the name of the target destination_@param requestMessage the mesage to send_@return the received message, possibly {@code null} if the message could not_be received, for example due to a timeout;Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;resolve,the,given,destination,name,to,a,destination,and,send,the,given,message,receive,a,reply,and,return,it,param,destination,name,the,name,of,the,target,destination,param,request,message,the,mesage,to,send,return,the,received,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,send,and,receive,string,destination,name,message,request,message,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> <T> T convertSendAndReceive(String destinationName, Object request, 			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;1386297052;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.support.converter.MessageConverter},_wrap it as a message, apply the given post process, and send the resulting_message to the resolved destination, then receive a reply and convert its_body to the specified target class.__@param destinationName the name of the target destination_@param request the payload for the request message to send_@param targetClass the target class to convert the payload of the reply to_@param requestPostProcessor post process for the request message_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request,_			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,support,converter,message,converter,wrap,it,as,a,message,apply,the,given,post,process,and,send,the,resulting,message,to,the,resolved,destination,then,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,for,the,request,message,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> <T> T convertSendAndReceive(String destinationName, Object request, 			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;1386350678;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message, apply the given post process, and send the resulting_message to the resolved destination, then receive a reply and convert its_body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param targetClass the target class to convert the payload of the reply to_@param requestPostProcessor post process for the request message_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request,_			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,apply,the,given,post,process,and,send,the,resulting,message,to,the,resolved,destination,then,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,for,the,request,message,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) 			throws MessagingException_;1495868221;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message and send it to the resolved destination, receive a reply_and convert its body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param targetClass the target class to convert the payload of the reply to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass)_			throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,and,send,it,to,the,resolved,destination,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) 			throws MessagingException_;1497559506;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message and send it to the resolved destination, receive a reply_and convert its body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param targetClass the target class to convert the payload of the reply to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass)_			throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,and,send,it,to,the,resolved,destination,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) 			throws MessagingException_;1530174524;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message and send it to the resolved destination, receive a reply_and convert its body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param targetClass the target class to convert the payload of the reply to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass)_			throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,and,send,it,to,the,resolved,destination,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) 			throws MessagingException_;1542613849;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message and send it to the resolved destination, receive a reply_and convert its body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param targetClass the target class to convert the payload of the reply to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass)_			throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,and,send,it,to,the,resolved,destination,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;1495868221;Resolve the given destination name to a destination and send the given message,_receive a reply and return it._@param destinationName the name of the target destination_@param requestMessage the mesage to send_@return the received message, possibly {@code null} if the message could not_be received, for example due to a timeout;@Nullable_	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;resolve,the,given,destination,name,to,a,destination,and,send,the,given,message,receive,a,reply,and,return,it,param,destination,name,the,name,of,the,target,destination,param,request,message,the,mesage,to,send,return,the,received,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,string,destination,name,message,request,message,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;1497559506;Resolve the given destination name to a destination and send the given message,_receive a reply and return it._@param destinationName the name of the target destination_@param requestMessage the mesage to send_@return the received message, possibly {@code null} if the message could not_be received, for example due to a timeout;@Nullable_	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;resolve,the,given,destination,name,to,a,destination,and,send,the,given,message,receive,a,reply,and,return,it,param,destination,name,the,name,of,the,target,destination,param,request,message,the,mesage,to,send,return,the,received,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,string,destination,name,message,request,message,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;1530174524;Resolve the given destination name to a destination and send the given message,_receive a reply and return it._@param destinationName the name of the target destination_@param requestMessage the mesage to send_@return the received message, possibly {@code null} if the message could not_be received, for example due to a timeout;@Nullable_	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;resolve,the,given,destination,name,to,a,destination,and,send,the,given,message,receive,a,reply,and,return,it,param,destination,name,the,name,of,the,target,destination,param,request,message,the,mesage,to,send,return,the,received,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,string,destination,name,message,request,message,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;1542613849;Resolve the given destination name to a destination and send the given message,_receive a reply and return it._@param destinationName the name of the target destination_@param requestMessage the message to send_@return the received message, possibly {@code null} if the message could not_be received, for example due to a timeout;@Nullable_	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;resolve,the,given,destination,name,to,a,destination,and,send,the,given,message,receive,a,reply,and,return,it,param,destination,name,the,name,of,the,target,destination,param,request,message,the,message,to,send,return,the,received,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,string,destination,name,message,request,message,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) 			throws MessagingException_;1386297052;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.support.converter.MessageConverter},_wrap it as a message and send it to the resolved destination, receive a reply_and convert its body to the specified target class.__@param destinationName the name of the target destination_@param request the payload for the request message to send_@param targetClass the target class to convert the payload of the reply to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass)_			throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,support,converter,message,converter,wrap,it,as,a,message,and,send,it,to,the,resolved,destination,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) 			throws MessagingException_;1386350678;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message and send it to the resolved destination, receive a reply_and convert its body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param targetClass the target class to convert the payload of the reply to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass)_			throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,and,send,it,to,the,resolved,destination,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, 			@Nullable Map<String, Object> headers, Class<T> targetClass) throws MessagingException_;1497559506;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers and send it to the resolved destination,_receive a reply and convert its body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param headers the headers for the request message to send_@param targetClass the target class to convert the payload of the reply to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request,_			@Nullable Map<String, Object> headers, Class<T> targetClass) throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,and,send,it,to,the,resolved,destination,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,headers,the,headers,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,nullable,map,string,object,headers,class,t,target,class,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, 			@Nullable Map<String, Object> headers, Class<T> targetClass) throws MessagingException_;1530174524;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers and send it to the resolved destination,_receive a reply and convert its body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param headers the headers for the request message to send_@param targetClass the target class to convert the payload of the reply to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request,_			@Nullable Map<String, Object> headers, Class<T> targetClass) throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,and,send,it,to,the,resolved,destination,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,headers,the,headers,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,nullable,map,string,object,headers,class,t,target,class,throws,messaging,exception
DestinationResolvingMessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, 			@Nullable Map<String, Object> headers, Class<T> targetClass) throws MessagingException_;1542613849;Resolve the given destination name, convert the payload request Object_to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers and send it to the resolved destination,_receive a reply and convert its body to the specified target class._@param destinationName the name of the target destination_@param request the payload for the request message to send_@param headers the headers for the request message to send_@param targetClass the target class to convert the payload of the reply to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request,_			@Nullable Map<String, Object> headers, Class<T> targetClass) throws MessagingException_;resolve,the,given,destination,name,convert,the,payload,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,and,send,it,to,the,resolved,destination,receive,a,reply,and,convert,its,body,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,the,payload,for,the,request,message,to,send,param,headers,the,headers,for,the,request,message,to,send,param,target,class,the,target,class,to,convert,the,payload,of,the,reply,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,nullable,map,string,object,headers,class,t,target,class,throws,messaging,exception
