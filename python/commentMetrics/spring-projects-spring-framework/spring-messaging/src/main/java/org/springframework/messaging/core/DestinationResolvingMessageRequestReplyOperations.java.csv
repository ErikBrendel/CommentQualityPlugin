commented;modifiers;parameterAmount;loc;comment;code
true;;2;2;/**  * Resolve the given destination name to a destination and send the given message,  * receive a reply and return it.  * @param destinationName the name of the target destination  * @param requestMessage the message to send  * @return the received message, possibly {@code null} if the message could not  * be received, for example due to a timeout  */ ;/**  * Resolve the given destination name to a destination and send the given message,  * receive a reply and return it.  * @param destinationName the name of the target destination  * @param requestMessage the message to send  * @return the received message, possibly {@code null} if the message could not  * be received, for example due to a timeout  */ @Nullable Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException.
true;;3;3;/**  * Resolve the given destination name, convert the payload request Object  * to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message and send it to the resolved destination, receive a reply  * and convert its body to the specified target class.  * @param destinationName the name of the target destination  * @param request the payload for the request message to send  * @param targetClass the target class to convert the payload of the reply to  * @return the converted payload of the reply message, possibly {@code null} if  * the message could not be received, for example due to a timeout  */ ;/**  * Resolve the given destination name, convert the payload request Object  * to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message and send it to the resolved destination, receive a reply  * and convert its body to the specified target class.  * @param destinationName the name of the target destination  * @param request the payload for the request message to send  * @param targetClass the target class to convert the payload of the reply to  * @return the converted payload of the reply message, possibly {@code null} if  * the message could not be received, for example due to a timeout  */ @Nullable <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException.
true;;4;3;/**  * Resolve the given destination name, convert the payload request Object  * to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message with the given headers and send it to the resolved destination,  * receive a reply and convert its body to the specified target class.  * @param destinationName the name of the target destination  * @param request the payload for the request message to send  * @param headers the headers for the request message to send  * @param targetClass the target class to convert the payload of the reply to  * @return the converted payload of the reply message, possibly {@code null} if  * the message could not be received, for example due to a timeout  */ ;/**  * Resolve the given destination name, convert the payload request Object  * to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message with the given headers and send it to the resolved destination,  * receive a reply and convert its body to the specified target class.  * @param destinationName the name of the target destination  * @param request the payload for the request message to send  * @param headers the headers for the request message to send  * @param targetClass the target class to convert the payload of the reply to  * @return the converted payload of the reply message, possibly {@code null} if  * the message could not be received, for example due to a timeout  */ @Nullable <T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass) throws MessagingException.
true;;4;3;/**  * Resolve the given destination name, convert the payload request Object  * to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message, apply the given post process, and send the resulting  * message to the resolved destination, then receive a reply and convert its  * body to the specified target class.  * @param destinationName the name of the target destination  * @param request the payload for the request message to send  * @param targetClass the target class to convert the payload of the reply to  * @param requestPostProcessor post process for the request message  * @return the converted payload of the reply message, possibly {@code null} if  * the message could not be received, for example due to a timeout  */ ;/**  * Resolve the given destination name, convert the payload request Object  * to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message, apply the given post process, and send the resulting  * message to the resolved destination, then receive a reply and convert its  * body to the specified target class.  * @param destinationName the name of the target destination  * @param request the payload for the request message to send  * @param targetClass the target class to convert the payload of the reply to  * @param requestPostProcessor post process for the request message  * @return the converted payload of the reply message, possibly {@code null} if  * the message could not be received, for example due to a timeout  */ @Nullable <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor) throws MessagingException.
true;;5;3;/**  * Resolve the given destination name, convert the payload request Object  * to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message with the given headers, apply the given post process,  * and send the resulting message to the resolved destination, then receive  * a reply and convert its body to the specified target class.  * @param destinationName the name of the target destination  * @param request the payload for the request message to send  * @param headers the headers for the request message to send  * @param targetClass the target class to convert the payload of the reply to  * @param requestPostProcessor post process for the request message  * @return the converted payload of the reply message, possibly {@code null} if  * the message could not be received, for example due to a timeout  */ ;/**  * Resolve the given destination name, convert the payload request Object  * to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message with the given headers, apply the given post process,  * and send the resulting message to the resolved destination, then receive  * a reply and convert its body to the specified target class.  * @param destinationName the name of the target destination  * @param request the payload for the request message to send  * @param headers the headers for the request message to send  * @param targetClass the target class to convert the payload of the reply to  * @param requestPostProcessor post process for the request message  * @return the converted payload of the reply message, possibly {@code null} if  * the message could not be received, for example due to a timeout  */ @Nullable <T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor) throws MessagingException.
