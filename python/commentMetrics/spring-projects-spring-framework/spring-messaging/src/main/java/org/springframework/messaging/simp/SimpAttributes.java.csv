commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Return the value for the attribute of the given name, if any.  * @param name the name of the attribute  * @return the current attribute value, or {@code null} if not found  */ ;/**  * Return the value for the attribute of the given name, if any.  * @param name the name of the attribute  * @return the current attribute value, or {@code null} if not found  */ @Nullable public Object getAttribute(String name) {     return this.attributes.get(name). }
true;public;2;3;/**  * Set the value with the given name replacing an existing value (if any).  * @param name the name of the attribute  * @param value the value for the attribute  */ ;/**  * Set the value with the given name replacing an existing value (if any).  * @param name the name of the attribute  * @param value the value for the attribute  */ public void setAttribute(String name, Object value) {     this.attributes.put(name, value). }
true;public;1;4;/**  * Remove the attribute of the given name, if it exists.  * <p>Also removes the registered destruction callback for the specified  * attribute, if any. However it <i>does not</i> execute the callback.  * It is assumed the removed object will continue to be used and destroyed  * independently at the appropriate time.  * @param name the name of the attribute  */ ;/**  * Remove the attribute of the given name, if it exists.  * <p>Also removes the registered destruction callback for the specified  * attribute, if any. However it <i>does not</i> execute the callback.  * It is assumed the removed object will continue to be used and destroyed  * independently at the appropriate time.  * @param name the name of the attribute  */ public void removeAttribute(String name) {     this.attributes.remove(name).     removeDestructionCallback(name). }
true;public;0;3;/**  * Retrieve the names of all attributes.  * @return the attribute names as String array, never {@code null}  */ ;/**  * Retrieve the names of all attributes.  * @return the attribute names as String array, never {@code null}  */ public String[] getAttributeNames() {     return StringUtils.toStringArray(this.attributes.keySet()). }
true;public;2;8;/**  * Register a callback to execute on destruction of the specified attribute.  * The callback is executed when the session is closed.  * @param name the name of the attribute to register the callback for  * @param callback the destruction callback to be executed  */ ;/**  * Register a callback to execute on destruction of the specified attribute.  * The callback is executed when the session is closed.  * @param name the name of the attribute to register the callback for  * @param callback the destruction callback to be executed  */ public void registerDestructionCallback(String name, Runnable callback) {     synchronized (getSessionMutex()) {         if (isSessionCompleted()) {             throw new IllegalStateException("Session id=" + getSessionId() + " already completed").         }         this.attributes.put(DESTRUCTION_CALLBACK_NAME_PREFIX + name, callback).     } }
false;private;1;5;;private void removeDestructionCallback(String name) {     synchronized (getSessionMutex()) {         this.attributes.remove(DESTRUCTION_CALLBACK_NAME_PREFIX + name).     } }
true;public;0;3;/**  * Return an id for the associated session.  * @return the session id as String (never {@code null})  */ ;/**  * Return an id for the associated session.  * @return the session id as String (never {@code null})  */ public String getSessionId() {     return this.sessionId. }
true;public;0;7;/**  * Expose the object to synchronize on for the underlying session.  * @return the session mutex to use (never {@code null})  */ ;/**  * Expose the object to synchronize on for the underlying session.  * @return the session mutex to use (never {@code null})  */ public Object getSessionMutex() {     Object mutex = this.attributes.get(SESSION_MUTEX_NAME).     if (mutex == null) {         mutex = this.attributes.     }     return mutex. }
true;public;0;3;/**  * Whether the {@link #sessionCompleted()} was already invoked.  */ ;/**  * Whether the {@link #sessionCompleted()} was already invoked.  */ public boolean isSessionCompleted() {     return (this.attributes.get(SESSION_COMPLETED_NAME) != null). }
true;public;0;8;/**  * Invoked when the session is completed. Executed completion callbacks.  */ ;/**  * Invoked when the session is completed. Executed completion callbacks.  */ public void sessionCompleted() {     synchronized (getSessionMutex()) {         if (!isSessionCompleted()) {             executeDestructionCallbacks().             this.attributes.put(SESSION_COMPLETED_NAME, Boolean.TRUE).         }     } }
false;private;0;12;;private void executeDestructionCallbacks() {     this.attributes.forEach((key, value) -> {         if (key.startsWith(DESTRUCTION_CALLBACK_NAME_PREFIX)) {             try {                 ((Runnable) value).run().             } catch (Throwable ex) {                 logger.error("Uncaught error in session attribute destruction callback", ex).             }         }     }). }
true;public,static;1;13;/**  * Extract the SiMP session attributes from the given message and  * wrap them in a {@link SimpAttributes} instance.  * @param message the message to extract session attributes from  */ ;/**  * Extract the SiMP session attributes from the given message and  * wrap them in a {@link SimpAttributes} instance.  * @param message the message to extract session attributes from  */ public static SimpAttributes fromMessage(Message<?> message) {     Assert.notNull(message, "Message must not be null").     MessageHeaders headers = message.getHeaders().     String sessionId = SimpMessageHeaderAccessor.getSessionId(headers).     Map<String, Object> sessionAttributes = SimpMessageHeaderAccessor.getSessionAttributes(headers).     if (sessionId == null) {         throw new IllegalStateException("No session id in " + message).     }     if (sessionAttributes == null) {         throw new IllegalStateException("No session attributes in " + message).     }     return new SimpAttributes(sessionId, sessionAttributes). }
