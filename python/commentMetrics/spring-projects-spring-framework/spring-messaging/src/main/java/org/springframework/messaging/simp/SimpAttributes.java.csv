# id;timestamp;commentText;codeText;commentWords;codeWords
SimpAttributes -> public String getSessionId();1399825877;Return an id for the associated session.__@return the session id as String (never {@code null});public String getSessionId() {_		return this.sessionId__	};return,an,id,for,the,associated,session,return,the,session,id,as,string,never,code,null;public,string,get,session,id,return,this,session,id
SimpAttributes -> public String getSessionId();1403611325;Return an id for the associated session._@return the session id as String (never {@code null});public String getSessionId() {_		return this.sessionId__	};return,an,id,for,the,associated,session,return,the,session,id,as,string,never,code,null;public,string,get,session,id,return,this,session,id
SimpAttributes -> public String getSessionId();1403856366;Return an id for the associated session._@return the session id as String (never {@code null});public String getSessionId() {_		return this.sessionId__	};return,an,id,for,the,associated,session,return,the,session,id,as,string,never,code,null;public,string,get,session,id,return,this,session,id
SimpAttributes -> public String getSessionId();1404880799;Return an id for the associated session._@return the session id as String (never {@code null});public String getSessionId() {_		return this.sessionId__	};return,an,id,for,the,associated,session,return,the,session,id,as,string,never,code,null;public,string,get,session,id,return,this,session,id
SimpAttributes -> public String getSessionId();1404937535;Return an id for the associated session._@return the session id as String (never {@code null});public String getSessionId() {_		return this.sessionId__	};return,an,id,for,the,associated,session,return,the,session,id,as,string,never,code,null;public,string,get,session,id,return,this,session,id
SimpAttributes -> public String getSessionId();1413848647;Return an id for the associated session._@return the session id as String (never {@code null});public String getSessionId() {_		return this.sessionId__	};return,an,id,for,the,associated,session,return,the,session,id,as,string,never,code,null;public,string,get,session,id,return,this,session,id
SimpAttributes -> public String getSessionId();1495868221;Return an id for the associated session._@return the session id as String (never {@code null});public String getSessionId() {_		return this.sessionId__	};return,an,id,for,the,associated,session,return,the,session,id,as,string,never,code,null;public,string,get,session,id,return,this,session,id
SimpAttributes -> public String getSessionId();1508532146;Return an id for the associated session._@return the session id as String (never {@code null});public String getSessionId() {_		return this.sessionId__	};return,an,id,for,the,associated,session,return,the,session,id,as,string,never,code,null;public,string,get,session,id,return,this,session,id
SimpAttributes -> public String getSessionId();1522103912;Return an id for the associated session._@return the session id as String (never {@code null});public String getSessionId() {_		return this.sessionId__	};return,an,id,for,the,associated,session,return,the,session,id,as,string,never,code,null;public,string,get,session,id,return,this,session,id
SimpAttributes -> public String getSessionId();1530174524;Return an id for the associated session._@return the session id as String (never {@code null});public String getSessionId() {_		return this.sessionId__	};return,an,id,for,the,associated,session,return,the,session,id,as,string,never,code,null;public,string,get,session,id,return,this,session,id
SimpAttributes -> public String getSessionId();1531942400;Return an id for the associated session._@return the session id as String (never {@code null});public String getSessionId() {_		return this.sessionId__	};return,an,id,for,the,associated,session,return,the,session,id,as,string,never,code,null;public,string,get,session,id,return,this,session,id
SimpAttributes -> public void removeAttribute(String name);1399825877;Remove the attribute of the given name, if it exists.__<p>Also removes the registered destruction callback for the specified_attribute, if any. However it <i>does not</i> execute</i> the callback._It is assumed the removed object will continue to be used and destroyed_independently at the appropriate time.__@param name the name of the attribute;public void removeAttribute(String name) {_		this.attributes.remove(name)__		removeDestructionCallback(name)__	};remove,the,attribute,of,the,given,name,if,it,exists,p,also,removes,the,registered,destruction,callback,for,the,specified,attribute,if,any,however,it,i,does,not,i,execute,i,the,callback,it,is,assumed,the,removed,object,will,continue,to,be,used,and,destroyed,independently,at,the,appropriate,time,param,name,the,name,of,the,attribute;public,void,remove,attribute,string,name,this,attributes,remove,name,remove,destruction,callback,name
SimpAttributes -> public void removeAttribute(String name);1403611325;Remove the attribute of the given name, if it exists._<p>Also removes the registered destruction callback for the specified_attribute, if any. However it <i>does not</i> execute</i> the callback._It is assumed the removed object will continue to be used and destroyed_independently at the appropriate time._@param name the name of the attribute;public void removeAttribute(String name) {_		this.attributes.remove(name)__		removeDestructionCallback(name)__	};remove,the,attribute,of,the,given,name,if,it,exists,p,also,removes,the,registered,destruction,callback,for,the,specified,attribute,if,any,however,it,i,does,not,i,execute,i,the,callback,it,is,assumed,the,removed,object,will,continue,to,be,used,and,destroyed,independently,at,the,appropriate,time,param,name,the,name,of,the,attribute;public,void,remove,attribute,string,name,this,attributes,remove,name,remove,destruction,callback,name
SimpAttributes -> public void removeAttribute(String name);1403856366;Remove the attribute of the given name, if it exists._<p>Also removes the registered destruction callback for the specified_attribute, if any. However it <i>does not</i> execute</i> the callback._It is assumed the removed object will continue to be used and destroyed_independently at the appropriate time._@param name the name of the attribute;public void removeAttribute(String name) {_		this.attributes.remove(name)__		removeDestructionCallback(name)__	};remove,the,attribute,of,the,given,name,if,it,exists,p,also,removes,the,registered,destruction,callback,for,the,specified,attribute,if,any,however,it,i,does,not,i,execute,i,the,callback,it,is,assumed,the,removed,object,will,continue,to,be,used,and,destroyed,independently,at,the,appropriate,time,param,name,the,name,of,the,attribute;public,void,remove,attribute,string,name,this,attributes,remove,name,remove,destruction,callback,name
SimpAttributes -> public void removeAttribute(String name);1404880799;Remove the attribute of the given name, if it exists._<p>Also removes the registered destruction callback for the specified_attribute, if any. However it <i>does not</i> execute</i> the callback._It is assumed the removed object will continue to be used and destroyed_independently at the appropriate time._@param name the name of the attribute;public void removeAttribute(String name) {_		this.attributes.remove(name)__		removeDestructionCallback(name)__	};remove,the,attribute,of,the,given,name,if,it,exists,p,also,removes,the,registered,destruction,callback,for,the,specified,attribute,if,any,however,it,i,does,not,i,execute,i,the,callback,it,is,assumed,the,removed,object,will,continue,to,be,used,and,destroyed,independently,at,the,appropriate,time,param,name,the,name,of,the,attribute;public,void,remove,attribute,string,name,this,attributes,remove,name,remove,destruction,callback,name
SimpAttributes -> public void removeAttribute(String name);1404937535;Remove the attribute of the given name, if it exists._<p>Also removes the registered destruction callback for the specified_attribute, if any. However it <i>does not</i> execute</i> the callback._It is assumed the removed object will continue to be used and destroyed_independently at the appropriate time._@param name the name of the attribute;public void removeAttribute(String name) {_		this.attributes.remove(name)__		removeDestructionCallback(name)__	};remove,the,attribute,of,the,given,name,if,it,exists,p,also,removes,the,registered,destruction,callback,for,the,specified,attribute,if,any,however,it,i,does,not,i,execute,i,the,callback,it,is,assumed,the,removed,object,will,continue,to,be,used,and,destroyed,independently,at,the,appropriate,time,param,name,the,name,of,the,attribute;public,void,remove,attribute,string,name,this,attributes,remove,name,remove,destruction,callback,name
SimpAttributes -> public void removeAttribute(String name);1413848647;Remove the attribute of the given name, if it exists._<p>Also removes the registered destruction callback for the specified_attribute, if any. However it <i>does not</i> execute</i> the callback._It is assumed the removed object will continue to be used and destroyed_independently at the appropriate time._@param name the name of the attribute;public void removeAttribute(String name) {_		this.attributes.remove(name)__		removeDestructionCallback(name)__	};remove,the,attribute,of,the,given,name,if,it,exists,p,also,removes,the,registered,destruction,callback,for,the,specified,attribute,if,any,however,it,i,does,not,i,execute,i,the,callback,it,is,assumed,the,removed,object,will,continue,to,be,used,and,destroyed,independently,at,the,appropriate,time,param,name,the,name,of,the,attribute;public,void,remove,attribute,string,name,this,attributes,remove,name,remove,destruction,callback,name
SimpAttributes -> public void removeAttribute(String name);1495868221;Remove the attribute of the given name, if it exists._<p>Also removes the registered destruction callback for the specified_attribute, if any. However it <i>does not</i> execute</i> the callback._It is assumed the removed object will continue to be used and destroyed_independently at the appropriate time._@param name the name of the attribute;public void removeAttribute(String name) {_		this.attributes.remove(name)__		removeDestructionCallback(name)__	};remove,the,attribute,of,the,given,name,if,it,exists,p,also,removes,the,registered,destruction,callback,for,the,specified,attribute,if,any,however,it,i,does,not,i,execute,i,the,callback,it,is,assumed,the,removed,object,will,continue,to,be,used,and,destroyed,independently,at,the,appropriate,time,param,name,the,name,of,the,attribute;public,void,remove,attribute,string,name,this,attributes,remove,name,remove,destruction,callback,name
SimpAttributes -> public void removeAttribute(String name);1508532146;Remove the attribute of the given name, if it exists._<p>Also removes the registered destruction callback for the specified_attribute, if any. However it <i>does not</i> execute</i> the callback._It is assumed the removed object will continue to be used and destroyed_independently at the appropriate time._@param name the name of the attribute;public void removeAttribute(String name) {_		this.attributes.remove(name)__		removeDestructionCallback(name)__	};remove,the,attribute,of,the,given,name,if,it,exists,p,also,removes,the,registered,destruction,callback,for,the,specified,attribute,if,any,however,it,i,does,not,i,execute,i,the,callback,it,is,assumed,the,removed,object,will,continue,to,be,used,and,destroyed,independently,at,the,appropriate,time,param,name,the,name,of,the,attribute;public,void,remove,attribute,string,name,this,attributes,remove,name,remove,destruction,callback,name
SimpAttributes -> public void removeAttribute(String name);1522103912;Remove the attribute of the given name, if it exists._<p>Also removes the registered destruction callback for the specified_attribute, if any. However it <i>does not</i> execute</i> the callback._It is assumed the removed object will continue to be used and destroyed_independently at the appropriate time._@param name the name of the attribute;public void removeAttribute(String name) {_		this.attributes.remove(name)__		removeDestructionCallback(name)__	};remove,the,attribute,of,the,given,name,if,it,exists,p,also,removes,the,registered,destruction,callback,for,the,specified,attribute,if,any,however,it,i,does,not,i,execute,i,the,callback,it,is,assumed,the,removed,object,will,continue,to,be,used,and,destroyed,independently,at,the,appropriate,time,param,name,the,name,of,the,attribute;public,void,remove,attribute,string,name,this,attributes,remove,name,remove,destruction,callback,name
SimpAttributes -> public void removeAttribute(String name);1530174524;Remove the attribute of the given name, if it exists._<p>Also removes the registered destruction callback for the specified_attribute, if any. However it <i>does not</i> execute the callback._It is assumed the removed object will continue to be used and destroyed_independently at the appropriate time._@param name the name of the attribute;public void removeAttribute(String name) {_		this.attributes.remove(name)__		removeDestructionCallback(name)__	};remove,the,attribute,of,the,given,name,if,it,exists,p,also,removes,the,registered,destruction,callback,for,the,specified,attribute,if,any,however,it,i,does,not,i,execute,the,callback,it,is,assumed,the,removed,object,will,continue,to,be,used,and,destroyed,independently,at,the,appropriate,time,param,name,the,name,of,the,attribute;public,void,remove,attribute,string,name,this,attributes,remove,name,remove,destruction,callback,name
SimpAttributes -> public void removeAttribute(String name);1531942400;Remove the attribute of the given name, if it exists._<p>Also removes the registered destruction callback for the specified_attribute, if any. However it <i>does not</i> execute the callback._It is assumed the removed object will continue to be used and destroyed_independently at the appropriate time._@param name the name of the attribute;public void removeAttribute(String name) {_		this.attributes.remove(name)__		removeDestructionCallback(name)__	};remove,the,attribute,of,the,given,name,if,it,exists,p,also,removes,the,registered,destruction,callback,for,the,specified,attribute,if,any,however,it,i,does,not,i,execute,the,callback,it,is,assumed,the,removed,object,will,continue,to,be,used,and,destroyed,independently,at,the,appropriate,time,param,name,the,name,of,the,attribute;public,void,remove,attribute,string,name,this,attributes,remove,name,remove,destruction,callback,name
SimpAttributes -> public boolean isSessionCompleted();1399825877;Whether the {@link #sessionCompleted()} was already invoked.;public boolean isSessionCompleted() {_		return (this.attributes.get(SESSION_COMPLETED_NAME) != null)__	};whether,the,link,session,completed,was,already,invoked;public,boolean,is,session,completed,return,this,attributes,get,null
SimpAttributes -> public boolean isSessionCompleted();1403611325;Whether the {@link #sessionCompleted()} was already invoked.;public boolean isSessionCompleted() {_		return (this.attributes.get(SESSION_COMPLETED_NAME) != null)__	};whether,the,link,session,completed,was,already,invoked;public,boolean,is,session,completed,return,this,attributes,get,null
SimpAttributes -> public boolean isSessionCompleted();1403856366;Whether the {@link #sessionCompleted()} was already invoked.;public boolean isSessionCompleted() {_		return (this.attributes.get(SESSION_COMPLETED_NAME) != null)__	};whether,the,link,session,completed,was,already,invoked;public,boolean,is,session,completed,return,this,attributes,get,null
SimpAttributes -> public boolean isSessionCompleted();1404880799;Whether the {@link #sessionCompleted()} was already invoked.;public boolean isSessionCompleted() {_		return (this.attributes.get(SESSION_COMPLETED_NAME) != null)__	};whether,the,link,session,completed,was,already,invoked;public,boolean,is,session,completed,return,this,attributes,get,null
SimpAttributes -> public boolean isSessionCompleted();1404937535;Whether the {@link #sessionCompleted()} was already invoked.;public boolean isSessionCompleted() {_		return (this.attributes.get(SESSION_COMPLETED_NAME) != null)__	};whether,the,link,session,completed,was,already,invoked;public,boolean,is,session,completed,return,this,attributes,get,null
SimpAttributes -> public boolean isSessionCompleted();1413848647;Whether the {@link #sessionCompleted()} was already invoked.;public boolean isSessionCompleted() {_		return (this.attributes.get(SESSION_COMPLETED_NAME) != null)__	};whether,the,link,session,completed,was,already,invoked;public,boolean,is,session,completed,return,this,attributes,get,null
SimpAttributes -> public boolean isSessionCompleted();1495868221;Whether the {@link #sessionCompleted()} was already invoked.;public boolean isSessionCompleted() {_		return (this.attributes.get(SESSION_COMPLETED_NAME) != null)__	};whether,the,link,session,completed,was,already,invoked;public,boolean,is,session,completed,return,this,attributes,get,null
SimpAttributes -> public boolean isSessionCompleted();1508532146;Whether the {@link #sessionCompleted()} was already invoked.;public boolean isSessionCompleted() {_		return (this.attributes.get(SESSION_COMPLETED_NAME) != null)__	};whether,the,link,session,completed,was,already,invoked;public,boolean,is,session,completed,return,this,attributes,get,null
SimpAttributes -> public boolean isSessionCompleted();1522103912;Whether the {@link #sessionCompleted()} was already invoked.;public boolean isSessionCompleted() {_		return (this.attributes.get(SESSION_COMPLETED_NAME) != null)__	};whether,the,link,session,completed,was,already,invoked;public,boolean,is,session,completed,return,this,attributes,get,null
SimpAttributes -> public boolean isSessionCompleted();1530174524;Whether the {@link #sessionCompleted()} was already invoked.;public boolean isSessionCompleted() {_		return (this.attributes.get(SESSION_COMPLETED_NAME) != null)__	};whether,the,link,session,completed,was,already,invoked;public,boolean,is,session,completed,return,this,attributes,get,null
SimpAttributes -> public boolean isSessionCompleted();1531942400;Whether the {@link #sessionCompleted()} was already invoked.;public boolean isSessionCompleted() {_		return (this.attributes.get(SESSION_COMPLETED_NAME) != null)__	};whether,the,link,session,completed,was,already,invoked;public,boolean,is,session,completed,return,this,attributes,get,null
SimpAttributes -> public void sessionCompleted();1399825877;Invoked when the session is completed. Executed completion callbacks.;public void sessionCompleted() {_		synchronized (getSessionMutex()) {_			if (!isSessionCompleted()) {_				executeDestructionCallbacks()__				this.attributes.put(SESSION_COMPLETED_NAME, Boolean.TRUE)__			}_		}_	};invoked,when,the,session,is,completed,executed,completion,callbacks;public,void,session,completed,synchronized,get,session,mutex,if,is,session,completed,execute,destruction,callbacks,this,attributes,put,boolean,true
SimpAttributes -> public void sessionCompleted();1403611325;Invoked when the session is completed. Executed completion callbacks.;public void sessionCompleted() {_		synchronized (getSessionMutex()) {_			if (!isSessionCompleted()) {_				executeDestructionCallbacks()__				this.attributes.put(SESSION_COMPLETED_NAME, Boolean.TRUE)__			}_		}_	};invoked,when,the,session,is,completed,executed,completion,callbacks;public,void,session,completed,synchronized,get,session,mutex,if,is,session,completed,execute,destruction,callbacks,this,attributes,put,boolean,true
SimpAttributes -> public void sessionCompleted();1403856366;Invoked when the session is completed. Executed completion callbacks.;public void sessionCompleted() {_		synchronized (getSessionMutex()) {_			if (!isSessionCompleted()) {_				executeDestructionCallbacks()__				this.attributes.put(SESSION_COMPLETED_NAME, Boolean.TRUE)__			}_		}_	};invoked,when,the,session,is,completed,executed,completion,callbacks;public,void,session,completed,synchronized,get,session,mutex,if,is,session,completed,execute,destruction,callbacks,this,attributes,put,boolean,true
SimpAttributes -> public void sessionCompleted();1404880799;Invoked when the session is completed. Executed completion callbacks.;public void sessionCompleted() {_		synchronized (getSessionMutex()) {_			if (!isSessionCompleted()) {_				executeDestructionCallbacks()__				this.attributes.put(SESSION_COMPLETED_NAME, Boolean.TRUE)__			}_		}_	};invoked,when,the,session,is,completed,executed,completion,callbacks;public,void,session,completed,synchronized,get,session,mutex,if,is,session,completed,execute,destruction,callbacks,this,attributes,put,boolean,true
SimpAttributes -> public void sessionCompleted();1404937535;Invoked when the session is completed. Executed completion callbacks.;public void sessionCompleted() {_		synchronized (getSessionMutex()) {_			if (!isSessionCompleted()) {_				executeDestructionCallbacks()__				this.attributes.put(SESSION_COMPLETED_NAME, Boolean.TRUE)__			}_		}_	};invoked,when,the,session,is,completed,executed,completion,callbacks;public,void,session,completed,synchronized,get,session,mutex,if,is,session,completed,execute,destruction,callbacks,this,attributes,put,boolean,true
SimpAttributes -> public void sessionCompleted();1413848647;Invoked when the session is completed. Executed completion callbacks.;public void sessionCompleted() {_		synchronized (getSessionMutex()) {_			if (!isSessionCompleted()) {_				executeDestructionCallbacks()__				this.attributes.put(SESSION_COMPLETED_NAME, Boolean.TRUE)__			}_		}_	};invoked,when,the,session,is,completed,executed,completion,callbacks;public,void,session,completed,synchronized,get,session,mutex,if,is,session,completed,execute,destruction,callbacks,this,attributes,put,boolean,true
SimpAttributes -> public void sessionCompleted();1495868221;Invoked when the session is completed. Executed completion callbacks.;public void sessionCompleted() {_		synchronized (getSessionMutex()) {_			if (!isSessionCompleted()) {_				executeDestructionCallbacks()__				this.attributes.put(SESSION_COMPLETED_NAME, Boolean.TRUE)__			}_		}_	};invoked,when,the,session,is,completed,executed,completion,callbacks;public,void,session,completed,synchronized,get,session,mutex,if,is,session,completed,execute,destruction,callbacks,this,attributes,put,boolean,true
SimpAttributes -> public void sessionCompleted();1508532146;Invoked when the session is completed. Executed completion callbacks.;public void sessionCompleted() {_		synchronized (getSessionMutex()) {_			if (!isSessionCompleted()) {_				executeDestructionCallbacks()__				this.attributes.put(SESSION_COMPLETED_NAME, Boolean.TRUE)__			}_		}_	};invoked,when,the,session,is,completed,executed,completion,callbacks;public,void,session,completed,synchronized,get,session,mutex,if,is,session,completed,execute,destruction,callbacks,this,attributes,put,boolean,true
SimpAttributes -> public void sessionCompleted();1522103912;Invoked when the session is completed. Executed completion callbacks.;public void sessionCompleted() {_		synchronized (getSessionMutex()) {_			if (!isSessionCompleted()) {_				executeDestructionCallbacks()__				this.attributes.put(SESSION_COMPLETED_NAME, Boolean.TRUE)__			}_		}_	};invoked,when,the,session,is,completed,executed,completion,callbacks;public,void,session,completed,synchronized,get,session,mutex,if,is,session,completed,execute,destruction,callbacks,this,attributes,put,boolean,true
SimpAttributes -> public void sessionCompleted();1530174524;Invoked when the session is completed. Executed completion callbacks.;public void sessionCompleted() {_		synchronized (getSessionMutex()) {_			if (!isSessionCompleted()) {_				executeDestructionCallbacks()__				this.attributes.put(SESSION_COMPLETED_NAME, Boolean.TRUE)__			}_		}_	};invoked,when,the,session,is,completed,executed,completion,callbacks;public,void,session,completed,synchronized,get,session,mutex,if,is,session,completed,execute,destruction,callbacks,this,attributes,put,boolean,true
SimpAttributes -> public void sessionCompleted();1531942400;Invoked when the session is completed. Executed completion callbacks.;public void sessionCompleted() {_		synchronized (getSessionMutex()) {_			if (!isSessionCompleted()) {_				executeDestructionCallbacks()__				this.attributes.put(SESSION_COMPLETED_NAME, Boolean.TRUE)__			}_		}_	};invoked,when,the,session,is,completed,executed,completion,callbacks;public,void,session,completed,synchronized,get,session,mutex,if,is,session,completed,execute,destruction,callbacks,this,attributes,put,boolean,true
SimpAttributes -> public static SimpAttributes fromMessage(Message<?> message);1399825877;Extract the SiMP session attributes from the given message, wrap them in_a {@link SimpAttributes} instance.__@param message the message to extract session attributes from;public static SimpAttributes fromMessage(Message<?> message) {_		Assert.notNull(message)__		MessageHeaders headers = message.getHeaders()__		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers)__		Map<String, Object> sessionAttributes = SimpMessageHeaderAccessor.getSessionAttributes(headers)__		if (sessionId == null || sessionAttributes == null) {_			throw new IllegalStateException(_					"Message does not contain SiMP session id or attributes: " + message)__		}_		return new SimpAttributes(sessionId, sessionAttributes)__	};extract,the,si,mp,session,attributes,from,the,given,message,wrap,them,in,a,link,simp,attributes,instance,param,message,the,message,to,extract,session,attributes,from;public,static,simp,attributes,from,message,message,message,assert,not,null,message,message,headers,headers,message,get,headers,string,session,id,simp,message,header,accessor,get,session,id,headers,map,string,object,session,attributes,simp,message,header,accessor,get,session,attributes,headers,if,session,id,null,session,attributes,null,throw,new,illegal,state,exception,message,does,not,contain,si,mp,session,id,or,attributes,message,return,new,simp,attributes,session,id,session,attributes
SimpAttributes -> public static SimpAttributes fromMessage(Message<?> message);1403611325;Extract the SiMP session attributes from the given message, wrap them in_a {@link SimpAttributes} instance._@param message the message to extract session attributes from;public static SimpAttributes fromMessage(Message<?> message) {_		Assert.notNull(message)__		MessageHeaders headers = message.getHeaders()__		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers)__		Map<String, Object> sessionAttributes = SimpMessageHeaderAccessor.getSessionAttributes(headers)__		if (sessionId == null || sessionAttributes == null) {_			throw new IllegalStateException(_					"Message does not contain SiMP session id or attributes: " + message)__		}_		return new SimpAttributes(sessionId, sessionAttributes)__	};extract,the,si,mp,session,attributes,from,the,given,message,wrap,them,in,a,link,simp,attributes,instance,param,message,the,message,to,extract,session,attributes,from;public,static,simp,attributes,from,message,message,message,assert,not,null,message,message,headers,headers,message,get,headers,string,session,id,simp,message,header,accessor,get,session,id,headers,map,string,object,session,attributes,simp,message,header,accessor,get,session,attributes,headers,if,session,id,null,session,attributes,null,throw,new,illegal,state,exception,message,does,not,contain,si,mp,session,id,or,attributes,message,return,new,simp,attributes,session,id,session,attributes
SimpAttributes -> public static SimpAttributes fromMessage(Message<?> message);1403856366;Extract the SiMP session attributes from the given message, wrap them in_a {@link SimpAttributes} instance._@param message the message to extract session attributes from;public static SimpAttributes fromMessage(Message<?> message) {_		Assert.notNull(message)__		MessageHeaders headers = message.getHeaders()__		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers)__		Map<String, Object> sessionAttributes = SimpMessageHeaderAccessor.getSessionAttributes(headers)__		if (sessionId == null || sessionAttributes == null) {_			throw new IllegalStateException(_					"Message does not contain SiMP session id or attributes: " + message)__		}_		return new SimpAttributes(sessionId, sessionAttributes)__	};extract,the,si,mp,session,attributes,from,the,given,message,wrap,them,in,a,link,simp,attributes,instance,param,message,the,message,to,extract,session,attributes,from;public,static,simp,attributes,from,message,message,message,assert,not,null,message,message,headers,headers,message,get,headers,string,session,id,simp,message,header,accessor,get,session,id,headers,map,string,object,session,attributes,simp,message,header,accessor,get,session,attributes,headers,if,session,id,null,session,attributes,null,throw,new,illegal,state,exception,message,does,not,contain,si,mp,session,id,or,attributes,message,return,new,simp,attributes,session,id,session,attributes
SimpAttributes -> public static SimpAttributes fromMessage(Message<?> message);1404880799;Extract the SiMP session attributes from the given message, wrap them in_a {@link SimpAttributes} instance._@param message the message to extract session attributes from;public static SimpAttributes fromMessage(Message<?> message) {_		Assert.notNull(message)__		MessageHeaders headers = message.getHeaders()__		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers)__		Map<String, Object> sessionAttributes = SimpMessageHeaderAccessor.getSessionAttributes(headers)__		if (sessionId == null) {_			throw new IllegalStateException("No session id in " + message)__		}_		if (sessionAttributes == null) {_			throw new IllegalStateException("No session attributes in " + message)__		}_		return new SimpAttributes(sessionId, sessionAttributes)__	};extract,the,si,mp,session,attributes,from,the,given,message,wrap,them,in,a,link,simp,attributes,instance,param,message,the,message,to,extract,session,attributes,from;public,static,simp,attributes,from,message,message,message,assert,not,null,message,message,headers,headers,message,get,headers,string,session,id,simp,message,header,accessor,get,session,id,headers,map,string,object,session,attributes,simp,message,header,accessor,get,session,attributes,headers,if,session,id,null,throw,new,illegal,state,exception,no,session,id,in,message,if,session,attributes,null,throw,new,illegal,state,exception,no,session,attributes,in,message,return,new,simp,attributes,session,id,session,attributes
SimpAttributes -> public static SimpAttributes fromMessage(Message<?> message);1404937535;Extract the SiMP session attributes from the given message and_wrap them in a {@link SimpAttributes} instance._@param message the message to extract session attributes from;public static SimpAttributes fromMessage(Message<?> message) {_		Assert.notNull(message, "Message must not be null")__		MessageHeaders headers = message.getHeaders()__		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers)__		Map<String, Object> sessionAttributes = SimpMessageHeaderAccessor.getSessionAttributes(headers)__		if (sessionId == null) {_			throw new IllegalStateException("No session id in " + message)__		}_		if (sessionAttributes == null) {_			throw new IllegalStateException("No session attributes in " + message)__		}_		return new SimpAttributes(sessionId, sessionAttributes)__	};extract,the,si,mp,session,attributes,from,the,given,message,and,wrap,them,in,a,link,simp,attributes,instance,param,message,the,message,to,extract,session,attributes,from;public,static,simp,attributes,from,message,message,message,assert,not,null,message,message,must,not,be,null,message,headers,headers,message,get,headers,string,session,id,simp,message,header,accessor,get,session,id,headers,map,string,object,session,attributes,simp,message,header,accessor,get,session,attributes,headers,if,session,id,null,throw,new,illegal,state,exception,no,session,id,in,message,if,session,attributes,null,throw,new,illegal,state,exception,no,session,attributes,in,message,return,new,simp,attributes,session,id,session,attributes
SimpAttributes -> public static SimpAttributes fromMessage(Message<?> message);1413848647;Extract the SiMP session attributes from the given message and_wrap them in a {@link SimpAttributes} instance._@param message the message to extract session attributes from;public static SimpAttributes fromMessage(Message<?> message) {_		Assert.notNull(message, "Message must not be null")__		MessageHeaders headers = message.getHeaders()__		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers)__		Map<String, Object> sessionAttributes = SimpMessageHeaderAccessor.getSessionAttributes(headers)__		if (sessionId == null) {_			throw new IllegalStateException("No session id in " + message)__		}_		if (sessionAttributes == null) {_			throw new IllegalStateException("No session attributes in " + message)__		}_		return new SimpAttributes(sessionId, sessionAttributes)__	};extract,the,si,mp,session,attributes,from,the,given,message,and,wrap,them,in,a,link,simp,attributes,instance,param,message,the,message,to,extract,session,attributes,from;public,static,simp,attributes,from,message,message,message,assert,not,null,message,message,must,not,be,null,message,headers,headers,message,get,headers,string,session,id,simp,message,header,accessor,get,session,id,headers,map,string,object,session,attributes,simp,message,header,accessor,get,session,attributes,headers,if,session,id,null,throw,new,illegal,state,exception,no,session,id,in,message,if,session,attributes,null,throw,new,illegal,state,exception,no,session,attributes,in,message,return,new,simp,attributes,session,id,session,attributes
SimpAttributes -> public static SimpAttributes fromMessage(Message<?> message);1495868221;Extract the SiMP session attributes from the given message and_wrap them in a {@link SimpAttributes} instance._@param message the message to extract session attributes from;public static SimpAttributes fromMessage(Message<?> message) {_		Assert.notNull(message, "Message must not be null")__		MessageHeaders headers = message.getHeaders()__		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers)__		Map<String, Object> sessionAttributes = SimpMessageHeaderAccessor.getSessionAttributes(headers)__		if (sessionId == null) {_			throw new IllegalStateException("No session id in " + message)__		}_		if (sessionAttributes == null) {_			throw new IllegalStateException("No session attributes in " + message)__		}_		return new SimpAttributes(sessionId, sessionAttributes)__	};extract,the,si,mp,session,attributes,from,the,given,message,and,wrap,them,in,a,link,simp,attributes,instance,param,message,the,message,to,extract,session,attributes,from;public,static,simp,attributes,from,message,message,message,assert,not,null,message,message,must,not,be,null,message,headers,headers,message,get,headers,string,session,id,simp,message,header,accessor,get,session,id,headers,map,string,object,session,attributes,simp,message,header,accessor,get,session,attributes,headers,if,session,id,null,throw,new,illegal,state,exception,no,session,id,in,message,if,session,attributes,null,throw,new,illegal,state,exception,no,session,attributes,in,message,return,new,simp,attributes,session,id,session,attributes
SimpAttributes -> public static SimpAttributes fromMessage(Message<?> message);1508532146;Extract the SiMP session attributes from the given message and_wrap them in a {@link SimpAttributes} instance._@param message the message to extract session attributes from;public static SimpAttributes fromMessage(Message<?> message) {_		Assert.notNull(message, "Message must not be null")__		MessageHeaders headers = message.getHeaders()__		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers)__		Map<String, Object> sessionAttributes = SimpMessageHeaderAccessor.getSessionAttributes(headers)__		if (sessionId == null) {_			throw new IllegalStateException("No session id in " + message)__		}_		if (sessionAttributes == null) {_			throw new IllegalStateException("No session attributes in " + message)__		}_		return new SimpAttributes(sessionId, sessionAttributes)__	};extract,the,si,mp,session,attributes,from,the,given,message,and,wrap,them,in,a,link,simp,attributes,instance,param,message,the,message,to,extract,session,attributes,from;public,static,simp,attributes,from,message,message,message,assert,not,null,message,message,must,not,be,null,message,headers,headers,message,get,headers,string,session,id,simp,message,header,accessor,get,session,id,headers,map,string,object,session,attributes,simp,message,header,accessor,get,session,attributes,headers,if,session,id,null,throw,new,illegal,state,exception,no,session,id,in,message,if,session,attributes,null,throw,new,illegal,state,exception,no,session,attributes,in,message,return,new,simp,attributes,session,id,session,attributes
SimpAttributes -> public static SimpAttributes fromMessage(Message<?> message);1522103912;Extract the SiMP session attributes from the given message and_wrap them in a {@link SimpAttributes} instance._@param message the message to extract session attributes from;public static SimpAttributes fromMessage(Message<?> message) {_		Assert.notNull(message, "Message must not be null")__		MessageHeaders headers = message.getHeaders()__		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers)__		Map<String, Object> sessionAttributes = SimpMessageHeaderAccessor.getSessionAttributes(headers)__		if (sessionId == null) {_			throw new IllegalStateException("No session id in " + message)__		}_		if (sessionAttributes == null) {_			throw new IllegalStateException("No session attributes in " + message)__		}_		return new SimpAttributes(sessionId, sessionAttributes)__	};extract,the,si,mp,session,attributes,from,the,given,message,and,wrap,them,in,a,link,simp,attributes,instance,param,message,the,message,to,extract,session,attributes,from;public,static,simp,attributes,from,message,message,message,assert,not,null,message,message,must,not,be,null,message,headers,headers,message,get,headers,string,session,id,simp,message,header,accessor,get,session,id,headers,map,string,object,session,attributes,simp,message,header,accessor,get,session,attributes,headers,if,session,id,null,throw,new,illegal,state,exception,no,session,id,in,message,if,session,attributes,null,throw,new,illegal,state,exception,no,session,attributes,in,message,return,new,simp,attributes,session,id,session,attributes
SimpAttributes -> public static SimpAttributes fromMessage(Message<?> message);1530174524;Extract the SiMP session attributes from the given message and_wrap them in a {@link SimpAttributes} instance._@param message the message to extract session attributes from;public static SimpAttributes fromMessage(Message<?> message) {_		Assert.notNull(message, "Message must not be null")__		MessageHeaders headers = message.getHeaders()__		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers)__		Map<String, Object> sessionAttributes = SimpMessageHeaderAccessor.getSessionAttributes(headers)__		if (sessionId == null) {_			throw new IllegalStateException("No session id in " + message)__		}_		if (sessionAttributes == null) {_			throw new IllegalStateException("No session attributes in " + message)__		}_		return new SimpAttributes(sessionId, sessionAttributes)__	};extract,the,si,mp,session,attributes,from,the,given,message,and,wrap,them,in,a,link,simp,attributes,instance,param,message,the,message,to,extract,session,attributes,from;public,static,simp,attributes,from,message,message,message,assert,not,null,message,message,must,not,be,null,message,headers,headers,message,get,headers,string,session,id,simp,message,header,accessor,get,session,id,headers,map,string,object,session,attributes,simp,message,header,accessor,get,session,attributes,headers,if,session,id,null,throw,new,illegal,state,exception,no,session,id,in,message,if,session,attributes,null,throw,new,illegal,state,exception,no,session,attributes,in,message,return,new,simp,attributes,session,id,session,attributes
SimpAttributes -> public static SimpAttributes fromMessage(Message<?> message);1531942400;Extract the SiMP session attributes from the given message and_wrap them in a {@link SimpAttributes} instance._@param message the message to extract session attributes from;public static SimpAttributes fromMessage(Message<?> message) {_		Assert.notNull(message, "Message must not be null")__		MessageHeaders headers = message.getHeaders()__		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers)__		Map<String, Object> sessionAttributes = SimpMessageHeaderAccessor.getSessionAttributes(headers)__		if (sessionId == null) {_			throw new IllegalStateException("No session id in " + message)__		}_		if (sessionAttributes == null) {_			throw new IllegalStateException("No session attributes in " + message)__		}_		return new SimpAttributes(sessionId, sessionAttributes)__	};extract,the,si,mp,session,attributes,from,the,given,message,and,wrap,them,in,a,link,simp,attributes,instance,param,message,the,message,to,extract,session,attributes,from;public,static,simp,attributes,from,message,message,message,assert,not,null,message,message,must,not,be,null,message,headers,headers,message,get,headers,string,session,id,simp,message,header,accessor,get,session,id,headers,map,string,object,session,attributes,simp,message,header,accessor,get,session,attributes,headers,if,session,id,null,throw,new,illegal,state,exception,no,session,id,in,message,if,session,attributes,null,throw,new,illegal,state,exception,no,session,attributes,in,message,return,new,simp,attributes,session,id,session,attributes
SimpAttributes -> public SimpAttributes(String sessionId, Map<String, Object> attributes);1399825877;Constructor wrapping the given session attributes map.__@param sessionId the id of the associated session_@param attributes the attributes;public SimpAttributes(String sessionId, Map<String, Object> attributes) {_		Assert.notNull(sessionId, "'sessionId' is required")__		Assert.notNull(attributes, "'attributes' is required")__		this.sessionId = sessionId__		this.attributes = attributes__	};constructor,wrapping,the,given,session,attributes,map,param,session,id,the,id,of,the,associated,session,param,attributes,the,attributes;public,simp,attributes,string,session,id,map,string,object,attributes,assert,not,null,session,id,session,id,is,required,assert,not,null,attributes,attributes,is,required,this,session,id,session,id,this,attributes,attributes
SimpAttributes -> public SimpAttributes(String sessionId, Map<String, Object> attributes);1403611325;Constructor wrapping the given session attributes map._@param sessionId the id of the associated session_@param attributes the attributes;public SimpAttributes(String sessionId, Map<String, Object> attributes) {_		Assert.notNull(sessionId, "'sessionId' is required")__		Assert.notNull(attributes, "'attributes' is required")__		this.sessionId = sessionId__		this.attributes = attributes__	};constructor,wrapping,the,given,session,attributes,map,param,session,id,the,id,of,the,associated,session,param,attributes,the,attributes;public,simp,attributes,string,session,id,map,string,object,attributes,assert,not,null,session,id,session,id,is,required,assert,not,null,attributes,attributes,is,required,this,session,id,session,id,this,attributes,attributes
SimpAttributes -> public SimpAttributes(String sessionId, Map<String, Object> attributes);1403856366;Constructor wrapping the given session attributes map._@param sessionId the id of the associated session_@param attributes the attributes;public SimpAttributes(String sessionId, Map<String, Object> attributes) {_		Assert.notNull(sessionId, "'sessionId' is required")__		Assert.notNull(attributes, "'attributes' is required")__		this.sessionId = sessionId__		this.attributes = attributes__	};constructor,wrapping,the,given,session,attributes,map,param,session,id,the,id,of,the,associated,session,param,attributes,the,attributes;public,simp,attributes,string,session,id,map,string,object,attributes,assert,not,null,session,id,session,id,is,required,assert,not,null,attributes,attributes,is,required,this,session,id,session,id,this,attributes,attributes
SimpAttributes -> public SimpAttributes(String sessionId, Map<String, Object> attributes);1404880799;Constructor wrapping the given session attributes map._@param sessionId the id of the associated session_@param attributes the attributes;public SimpAttributes(String sessionId, Map<String, Object> attributes) {_		Assert.notNull(sessionId, "'sessionId' is required")__		Assert.notNull(attributes, "'attributes' is required")__		this.sessionId = sessionId__		this.attributes = attributes__	};constructor,wrapping,the,given,session,attributes,map,param,session,id,the,id,of,the,associated,session,param,attributes,the,attributes;public,simp,attributes,string,session,id,map,string,object,attributes,assert,not,null,session,id,session,id,is,required,assert,not,null,attributes,attributes,is,required,this,session,id,session,id,this,attributes,attributes
SimpAttributes -> public SimpAttributes(String sessionId, Map<String, Object> attributes);1404937535;Constructor wrapping the given session attributes map._@param sessionId the id of the associated session_@param attributes the attributes;public SimpAttributes(String sessionId, Map<String, Object> attributes) {_		Assert.notNull(sessionId, "'sessionId' is required")__		Assert.notNull(attributes, "'attributes' is required")__		this.sessionId = sessionId__		this.attributes = attributes__	};constructor,wrapping,the,given,session,attributes,map,param,session,id,the,id,of,the,associated,session,param,attributes,the,attributes;public,simp,attributes,string,session,id,map,string,object,attributes,assert,not,null,session,id,session,id,is,required,assert,not,null,attributes,attributes,is,required,this,session,id,session,id,this,attributes,attributes
SimpAttributes -> public SimpAttributes(String sessionId, Map<String, Object> attributes);1413848647;Constructor wrapping the given session attributes map._@param sessionId the id of the associated session_@param attributes the attributes;public SimpAttributes(String sessionId, Map<String, Object> attributes) {_		Assert.notNull(sessionId, "'sessionId' is required")__		Assert.notNull(attributes, "'attributes' is required")__		this.sessionId = sessionId__		this.attributes = attributes__	};constructor,wrapping,the,given,session,attributes,map,param,session,id,the,id,of,the,associated,session,param,attributes,the,attributes;public,simp,attributes,string,session,id,map,string,object,attributes,assert,not,null,session,id,session,id,is,required,assert,not,null,attributes,attributes,is,required,this,session,id,session,id,this,attributes,attributes
SimpAttributes -> public SimpAttributes(String sessionId, Map<String, Object> attributes);1495868221;Constructor wrapping the given session attributes map._@param sessionId the id of the associated session_@param attributes the attributes;public SimpAttributes(String sessionId, Map<String, Object> attributes) {_		Assert.notNull(sessionId, "'sessionId' is required")__		Assert.notNull(attributes, "'attributes' is required")__		this.sessionId = sessionId__		this.attributes = attributes__	};constructor,wrapping,the,given,session,attributes,map,param,session,id,the,id,of,the,associated,session,param,attributes,the,attributes;public,simp,attributes,string,session,id,map,string,object,attributes,assert,not,null,session,id,session,id,is,required,assert,not,null,attributes,attributes,is,required,this,session,id,session,id,this,attributes,attributes
SimpAttributes -> public SimpAttributes(String sessionId, Map<String, Object> attributes);1508532146;Constructor wrapping the given session attributes map._@param sessionId the id of the associated session_@param attributes the attributes;public SimpAttributes(String sessionId, Map<String, Object> attributes) {_		Assert.notNull(sessionId, "'sessionId' is required")__		Assert.notNull(attributes, "'attributes' is required")__		this.sessionId = sessionId__		this.attributes = attributes__	};constructor,wrapping,the,given,session,attributes,map,param,session,id,the,id,of,the,associated,session,param,attributes,the,attributes;public,simp,attributes,string,session,id,map,string,object,attributes,assert,not,null,session,id,session,id,is,required,assert,not,null,attributes,attributes,is,required,this,session,id,session,id,this,attributes,attributes
SimpAttributes -> public SimpAttributes(String sessionId, Map<String, Object> attributes);1522103912;Constructor wrapping the given session attributes map._@param sessionId the id of the associated session_@param attributes the attributes;public SimpAttributes(String sessionId, Map<String, Object> attributes) {_		Assert.notNull(sessionId, "'sessionId' is required")__		Assert.notNull(attributes, "'attributes' is required")__		this.sessionId = sessionId__		this.attributes = attributes__	};constructor,wrapping,the,given,session,attributes,map,param,session,id,the,id,of,the,associated,session,param,attributes,the,attributes;public,simp,attributes,string,session,id,map,string,object,attributes,assert,not,null,session,id,session,id,is,required,assert,not,null,attributes,attributes,is,required,this,session,id,session,id,this,attributes,attributes
SimpAttributes -> public SimpAttributes(String sessionId, Map<String, Object> attributes);1530174524;Constructor wrapping the given session attributes map._@param sessionId the id of the associated session_@param attributes the attributes;public SimpAttributes(String sessionId, Map<String, Object> attributes) {_		Assert.notNull(sessionId, "'sessionId' is required")__		Assert.notNull(attributes, "'attributes' is required")__		this.sessionId = sessionId__		this.attributes = attributes__	};constructor,wrapping,the,given,session,attributes,map,param,session,id,the,id,of,the,associated,session,param,attributes,the,attributes;public,simp,attributes,string,session,id,map,string,object,attributes,assert,not,null,session,id,session,id,is,required,assert,not,null,attributes,attributes,is,required,this,session,id,session,id,this,attributes,attributes
SimpAttributes -> public SimpAttributes(String sessionId, Map<String, Object> attributes);1531942400;Constructor wrapping the given session attributes map._@param sessionId the id of the associated session_@param attributes the attributes;public SimpAttributes(String sessionId, Map<String, Object> attributes) {_		Assert.notNull(sessionId, "'sessionId' is required")__		Assert.notNull(attributes, "'attributes' is required")__		this.sessionId = sessionId__		this.attributes = attributes__	};constructor,wrapping,the,given,session,attributes,map,param,session,id,the,id,of,the,associated,session,param,attributes,the,attributes;public,simp,attributes,string,session,id,map,string,object,attributes,assert,not,null,session,id,session,id,is,required,assert,not,null,attributes,attributes,is,required,this,session,id,session,id,this,attributes,attributes
SimpAttributes -> public void setAttribute(String name, Object value);1399825877;Set the value with the given name replacing an existing value (if any).__@param name the name of the attribute_@param value the value for the attribute;public void setAttribute(String name, Object value) {_		this.attributes.put(name, value)__	};set,the,value,with,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,value,the,value,for,the,attribute;public,void,set,attribute,string,name,object,value,this,attributes,put,name,value
SimpAttributes -> public void setAttribute(String name, Object value);1403611325;Set the value with the given name replacing an existing value (if any)._@param name the name of the attribute_@param value the value for the attribute;public void setAttribute(String name, Object value) {_		this.attributes.put(name, value)__	};set,the,value,with,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,value,the,value,for,the,attribute;public,void,set,attribute,string,name,object,value,this,attributes,put,name,value
SimpAttributes -> public void setAttribute(String name, Object value);1403856366;Set the value with the given name replacing an existing value (if any)._@param name the name of the attribute_@param value the value for the attribute;public void setAttribute(String name, Object value) {_		this.attributes.put(name, value)__	};set,the,value,with,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,value,the,value,for,the,attribute;public,void,set,attribute,string,name,object,value,this,attributes,put,name,value
SimpAttributes -> public void setAttribute(String name, Object value);1404880799;Set the value with the given name replacing an existing value (if any)._@param name the name of the attribute_@param value the value for the attribute;public void setAttribute(String name, Object value) {_		this.attributes.put(name, value)__	};set,the,value,with,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,value,the,value,for,the,attribute;public,void,set,attribute,string,name,object,value,this,attributes,put,name,value
SimpAttributes -> public void setAttribute(String name, Object value);1404937535;Set the value with the given name replacing an existing value (if any)._@param name the name of the attribute_@param value the value for the attribute;public void setAttribute(String name, Object value) {_		this.attributes.put(name, value)__	};set,the,value,with,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,value,the,value,for,the,attribute;public,void,set,attribute,string,name,object,value,this,attributes,put,name,value
SimpAttributes -> public void setAttribute(String name, Object value);1413848647;Set the value with the given name replacing an existing value (if any)._@param name the name of the attribute_@param value the value for the attribute;public void setAttribute(String name, Object value) {_		this.attributes.put(name, value)__	};set,the,value,with,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,value,the,value,for,the,attribute;public,void,set,attribute,string,name,object,value,this,attributes,put,name,value
SimpAttributes -> public void setAttribute(String name, Object value);1495868221;Set the value with the given name replacing an existing value (if any)._@param name the name of the attribute_@param value the value for the attribute;public void setAttribute(String name, Object value) {_		this.attributes.put(name, value)__	};set,the,value,with,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,value,the,value,for,the,attribute;public,void,set,attribute,string,name,object,value,this,attributes,put,name,value
SimpAttributes -> public void setAttribute(String name, Object value);1508532146;Set the value with the given name replacing an existing value (if any)._@param name the name of the attribute_@param value the value for the attribute;public void setAttribute(String name, Object value) {_		this.attributes.put(name, value)__	};set,the,value,with,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,value,the,value,for,the,attribute;public,void,set,attribute,string,name,object,value,this,attributes,put,name,value
SimpAttributes -> public void setAttribute(String name, Object value);1522103912;Set the value with the given name replacing an existing value (if any)._@param name the name of the attribute_@param value the value for the attribute;public void setAttribute(String name, Object value) {_		this.attributes.put(name, value)__	};set,the,value,with,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,value,the,value,for,the,attribute;public,void,set,attribute,string,name,object,value,this,attributes,put,name,value
SimpAttributes -> public void setAttribute(String name, Object value);1530174524;Set the value with the given name replacing an existing value (if any)._@param name the name of the attribute_@param value the value for the attribute;public void setAttribute(String name, Object value) {_		this.attributes.put(name, value)__	};set,the,value,with,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,value,the,value,for,the,attribute;public,void,set,attribute,string,name,object,value,this,attributes,put,name,value
SimpAttributes -> public void setAttribute(String name, Object value);1531942400;Set the value with the given name replacing an existing value (if any)._@param name the name of the attribute_@param value the value for the attribute;public void setAttribute(String name, Object value) {_		this.attributes.put(name, value)__	};set,the,value,with,the,given,name,replacing,an,existing,value,if,any,param,name,the,name,of,the,attribute,param,value,the,value,for,the,attribute;public,void,set,attribute,string,name,object,value,this,attributes,put,name,value
SimpAttributes -> public Object getAttribute(String name);1399825877;Return the value for the attribute of the given name, if any.__@param name the name of the attribute_@return the current attribute value, or {@code null} if not found;public Object getAttribute(String name) {_		return this.attributes.get(name)__	};return,the,value,for,the,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,return,the,current,attribute,value,or,code,null,if,not,found;public,object,get,attribute,string,name,return,this,attributes,get,name
SimpAttributes -> public Object getAttribute(String name);1403611325;Return the value for the attribute of the given name, if any._@param name the name of the attribute_@return the current attribute value, or {@code null} if not found;public Object getAttribute(String name) {_		return this.attributes.get(name)__	};return,the,value,for,the,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,return,the,current,attribute,value,or,code,null,if,not,found;public,object,get,attribute,string,name,return,this,attributes,get,name
SimpAttributes -> public Object getAttribute(String name);1403856366;Return the value for the attribute of the given name, if any._@param name the name of the attribute_@return the current attribute value, or {@code null} if not found;public Object getAttribute(String name) {_		return this.attributes.get(name)__	};return,the,value,for,the,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,return,the,current,attribute,value,or,code,null,if,not,found;public,object,get,attribute,string,name,return,this,attributes,get,name
SimpAttributes -> public Object getAttribute(String name);1404880799;Return the value for the attribute of the given name, if any._@param name the name of the attribute_@return the current attribute value, or {@code null} if not found;public Object getAttribute(String name) {_		return this.attributes.get(name)__	};return,the,value,for,the,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,return,the,current,attribute,value,or,code,null,if,not,found;public,object,get,attribute,string,name,return,this,attributes,get,name
SimpAttributes -> public Object getAttribute(String name);1404937535;Return the value for the attribute of the given name, if any._@param name the name of the attribute_@return the current attribute value, or {@code null} if not found;public Object getAttribute(String name) {_		return this.attributes.get(name)__	};return,the,value,for,the,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,return,the,current,attribute,value,or,code,null,if,not,found;public,object,get,attribute,string,name,return,this,attributes,get,name
SimpAttributes -> public Object getAttribute(String name);1413848647;Return the value for the attribute of the given name, if any._@param name the name of the attribute_@return the current attribute value, or {@code null} if not found;public Object getAttribute(String name) {_		return this.attributes.get(name)__	};return,the,value,for,the,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,return,the,current,attribute,value,or,code,null,if,not,found;public,object,get,attribute,string,name,return,this,attributes,get,name
SimpAttributes -> public String[] getAttributeNames();1399825877;Retrieve the names of all attributes.__@return the attribute names as String array, never {@code null};public String[] getAttributeNames() {_		return StringUtils.toStringArray(this.attributes.keySet())__	};retrieve,the,names,of,all,attributes,return,the,attribute,names,as,string,array,never,code,null;public,string,get,attribute,names,return,string,utils,to,string,array,this,attributes,key,set
SimpAttributes -> public String[] getAttributeNames();1403611325;Retrieve the names of all attributes._@return the attribute names as String array, never {@code null};public String[] getAttributeNames() {_		return StringUtils.toStringArray(this.attributes.keySet())__	};retrieve,the,names,of,all,attributes,return,the,attribute,names,as,string,array,never,code,null;public,string,get,attribute,names,return,string,utils,to,string,array,this,attributes,key,set
SimpAttributes -> public String[] getAttributeNames();1403856366;Retrieve the names of all attributes._@return the attribute names as String array, never {@code null};public String[] getAttributeNames() {_		return StringUtils.toStringArray(this.attributes.keySet())__	};retrieve,the,names,of,all,attributes,return,the,attribute,names,as,string,array,never,code,null;public,string,get,attribute,names,return,string,utils,to,string,array,this,attributes,key,set
SimpAttributes -> public String[] getAttributeNames();1404880799;Retrieve the names of all attributes._@return the attribute names as String array, never {@code null};public String[] getAttributeNames() {_		return StringUtils.toStringArray(this.attributes.keySet())__	};retrieve,the,names,of,all,attributes,return,the,attribute,names,as,string,array,never,code,null;public,string,get,attribute,names,return,string,utils,to,string,array,this,attributes,key,set
SimpAttributes -> public String[] getAttributeNames();1404937535;Retrieve the names of all attributes._@return the attribute names as String array, never {@code null};public String[] getAttributeNames() {_		return StringUtils.toStringArray(this.attributes.keySet())__	};retrieve,the,names,of,all,attributes,return,the,attribute,names,as,string,array,never,code,null;public,string,get,attribute,names,return,string,utils,to,string,array,this,attributes,key,set
SimpAttributes -> public String[] getAttributeNames();1413848647;Retrieve the names of all attributes._@return the attribute names as String array, never {@code null};public String[] getAttributeNames() {_		return StringUtils.toStringArray(this.attributes.keySet())__	};retrieve,the,names,of,all,attributes,return,the,attribute,names,as,string,array,never,code,null;public,string,get,attribute,names,return,string,utils,to,string,array,this,attributes,key,set
SimpAttributes -> public String[] getAttributeNames();1495868221;Retrieve the names of all attributes._@return the attribute names as String array, never {@code null};public String[] getAttributeNames() {_		return StringUtils.toStringArray(this.attributes.keySet())__	};retrieve,the,names,of,all,attributes,return,the,attribute,names,as,string,array,never,code,null;public,string,get,attribute,names,return,string,utils,to,string,array,this,attributes,key,set
SimpAttributes -> public String[] getAttributeNames();1508532146;Retrieve the names of all attributes._@return the attribute names as String array, never {@code null};public String[] getAttributeNames() {_		return StringUtils.toStringArray(this.attributes.keySet())__	};retrieve,the,names,of,all,attributes,return,the,attribute,names,as,string,array,never,code,null;public,string,get,attribute,names,return,string,utils,to,string,array,this,attributes,key,set
SimpAttributes -> public String[] getAttributeNames();1522103912;Retrieve the names of all attributes._@return the attribute names as String array, never {@code null};public String[] getAttributeNames() {_		return StringUtils.toStringArray(this.attributes.keySet())__	};retrieve,the,names,of,all,attributes,return,the,attribute,names,as,string,array,never,code,null;public,string,get,attribute,names,return,string,utils,to,string,array,this,attributes,key,set
SimpAttributes -> public String[] getAttributeNames();1530174524;Retrieve the names of all attributes._@return the attribute names as String array, never {@code null};public String[] getAttributeNames() {_		return StringUtils.toStringArray(this.attributes.keySet())__	};retrieve,the,names,of,all,attributes,return,the,attribute,names,as,string,array,never,code,null;public,string,get,attribute,names,return,string,utils,to,string,array,this,attributes,key,set
SimpAttributes -> public String[] getAttributeNames();1531942400;Retrieve the names of all attributes._@return the attribute names as String array, never {@code null};public String[] getAttributeNames() {_		return StringUtils.toStringArray(this.attributes.keySet())__	};retrieve,the,names,of,all,attributes,return,the,attribute,names,as,string,array,never,code,null;public,string,get,attribute,names,return,string,utils,to,string,array,this,attributes,key,set
SimpAttributes -> @Nullable 	public Object getAttribute(String name);1495868221;Return the value for the attribute of the given name, if any._@param name the name of the attribute_@return the current attribute value, or {@code null} if not found;@Nullable_	public Object getAttribute(String name) {_		return this.attributes.get(name)__	};return,the,value,for,the,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,return,the,current,attribute,value,or,code,null,if,not,found;nullable,public,object,get,attribute,string,name,return,this,attributes,get,name
SimpAttributes -> @Nullable 	public Object getAttribute(String name);1508532146;Return the value for the attribute of the given name, if any._@param name the name of the attribute_@return the current attribute value, or {@code null} if not found;@Nullable_	public Object getAttribute(String name) {_		return this.attributes.get(name)__	};return,the,value,for,the,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,return,the,current,attribute,value,or,code,null,if,not,found;nullable,public,object,get,attribute,string,name,return,this,attributes,get,name
SimpAttributes -> @Nullable 	public Object getAttribute(String name);1522103912;Return the value for the attribute of the given name, if any._@param name the name of the attribute_@return the current attribute value, or {@code null} if not found;@Nullable_	public Object getAttribute(String name) {_		return this.attributes.get(name)__	};return,the,value,for,the,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,return,the,current,attribute,value,or,code,null,if,not,found;nullable,public,object,get,attribute,string,name,return,this,attributes,get,name
SimpAttributes -> @Nullable 	public Object getAttribute(String name);1530174524;Return the value for the attribute of the given name, if any._@param name the name of the attribute_@return the current attribute value, or {@code null} if not found;@Nullable_	public Object getAttribute(String name) {_		return this.attributes.get(name)__	};return,the,value,for,the,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,return,the,current,attribute,value,or,code,null,if,not,found;nullable,public,object,get,attribute,string,name,return,this,attributes,get,name
SimpAttributes -> @Nullable 	public Object getAttribute(String name);1531942400;Return the value for the attribute of the given name, if any._@param name the name of the attribute_@return the current attribute value, or {@code null} if not found;@Nullable_	public Object getAttribute(String name) {_		return this.attributes.get(name)__	};return,the,value,for,the,attribute,of,the,given,name,if,any,param,name,the,name,of,the,attribute,return,the,current,attribute,value,or,code,null,if,not,found;nullable,public,object,get,attribute,string,name,return,this,attributes,get,name
SimpAttributes -> public void registerDestructionCallback(String name, Runnable callback);1399825877;Register a callback to execute on destruction of the specified attribute._The callback is executed when the session is closed.__@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed;public void registerDestructionCallback(String name, Runnable callback) {_		synchronized (getSessionMutex()) {_			if (isSessionCompleted()) {_				throw new IllegalStateException("Session id=" + getSessionId() + " already completed")__			}_			this.attributes.put(DESTRUCTION_CALLBACK_NAME_PREFIX + name, callback)__		}_	};register,a,callback,to,execute,on,destruction,of,the,specified,attribute,the,callback,is,executed,when,the,session,is,closed,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed;public,void,register,destruction,callback,string,name,runnable,callback,synchronized,get,session,mutex,if,is,session,completed,throw,new,illegal,state,exception,session,id,get,session,id,already,completed,this,attributes,put,name,callback
SimpAttributes -> public void registerDestructionCallback(String name, Runnable callback);1403611325;Register a callback to execute on destruction of the specified attribute._The callback is executed when the session is closed._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed;public void registerDestructionCallback(String name, Runnable callback) {_		synchronized (getSessionMutex()) {_			if (isSessionCompleted()) {_				throw new IllegalStateException("Session id=" + getSessionId() + " already completed")__			}_			this.attributes.put(DESTRUCTION_CALLBACK_NAME_PREFIX + name, callback)__		}_	};register,a,callback,to,execute,on,destruction,of,the,specified,attribute,the,callback,is,executed,when,the,session,is,closed,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed;public,void,register,destruction,callback,string,name,runnable,callback,synchronized,get,session,mutex,if,is,session,completed,throw,new,illegal,state,exception,session,id,get,session,id,already,completed,this,attributes,put,name,callback
SimpAttributes -> public void registerDestructionCallback(String name, Runnable callback);1403856366;Register a callback to execute on destruction of the specified attribute._The callback is executed when the session is closed._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed;public void registerDestructionCallback(String name, Runnable callback) {_		synchronized (getSessionMutex()) {_			if (isSessionCompleted()) {_				throw new IllegalStateException("Session id=" + getSessionId() + " already completed")__			}_			this.attributes.put(DESTRUCTION_CALLBACK_NAME_PREFIX + name, callback)__		}_	};register,a,callback,to,execute,on,destruction,of,the,specified,attribute,the,callback,is,executed,when,the,session,is,closed,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed;public,void,register,destruction,callback,string,name,runnable,callback,synchronized,get,session,mutex,if,is,session,completed,throw,new,illegal,state,exception,session,id,get,session,id,already,completed,this,attributes,put,name,callback
SimpAttributes -> public void registerDestructionCallback(String name, Runnable callback);1404880799;Register a callback to execute on destruction of the specified attribute._The callback is executed when the session is closed._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed;public void registerDestructionCallback(String name, Runnable callback) {_		synchronized (getSessionMutex()) {_			if (isSessionCompleted()) {_				throw new IllegalStateException("Session id=" + getSessionId() + " already completed")__			}_			this.attributes.put(DESTRUCTION_CALLBACK_NAME_PREFIX + name, callback)__		}_	};register,a,callback,to,execute,on,destruction,of,the,specified,attribute,the,callback,is,executed,when,the,session,is,closed,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed;public,void,register,destruction,callback,string,name,runnable,callback,synchronized,get,session,mutex,if,is,session,completed,throw,new,illegal,state,exception,session,id,get,session,id,already,completed,this,attributes,put,name,callback
SimpAttributes -> public void registerDestructionCallback(String name, Runnable callback);1404937535;Register a callback to execute on destruction of the specified attribute._The callback is executed when the session is closed._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed;public void registerDestructionCallback(String name, Runnable callback) {_		synchronized (getSessionMutex()) {_			if (isSessionCompleted()) {_				throw new IllegalStateException("Session id=" + getSessionId() + " already completed")__			}_			this.attributes.put(DESTRUCTION_CALLBACK_NAME_PREFIX + name, callback)__		}_	};register,a,callback,to,execute,on,destruction,of,the,specified,attribute,the,callback,is,executed,when,the,session,is,closed,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed;public,void,register,destruction,callback,string,name,runnable,callback,synchronized,get,session,mutex,if,is,session,completed,throw,new,illegal,state,exception,session,id,get,session,id,already,completed,this,attributes,put,name,callback
SimpAttributes -> public void registerDestructionCallback(String name, Runnable callback);1413848647;Register a callback to execute on destruction of the specified attribute._The callback is executed when the session is closed._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed;public void registerDestructionCallback(String name, Runnable callback) {_		synchronized (getSessionMutex()) {_			if (isSessionCompleted()) {_				throw new IllegalStateException("Session id=" + getSessionId() + " already completed")__			}_			this.attributes.put(DESTRUCTION_CALLBACK_NAME_PREFIX + name, callback)__		}_	};register,a,callback,to,execute,on,destruction,of,the,specified,attribute,the,callback,is,executed,when,the,session,is,closed,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed;public,void,register,destruction,callback,string,name,runnable,callback,synchronized,get,session,mutex,if,is,session,completed,throw,new,illegal,state,exception,session,id,get,session,id,already,completed,this,attributes,put,name,callback
SimpAttributes -> public void registerDestructionCallback(String name, Runnable callback);1495868221;Register a callback to execute on destruction of the specified attribute._The callback is executed when the session is closed._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed;public void registerDestructionCallback(String name, Runnable callback) {_		synchronized (getSessionMutex()) {_			if (isSessionCompleted()) {_				throw new IllegalStateException("Session id=" + getSessionId() + " already completed")__			}_			this.attributes.put(DESTRUCTION_CALLBACK_NAME_PREFIX + name, callback)__		}_	};register,a,callback,to,execute,on,destruction,of,the,specified,attribute,the,callback,is,executed,when,the,session,is,closed,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed;public,void,register,destruction,callback,string,name,runnable,callback,synchronized,get,session,mutex,if,is,session,completed,throw,new,illegal,state,exception,session,id,get,session,id,already,completed,this,attributes,put,name,callback
SimpAttributes -> public void registerDestructionCallback(String name, Runnable callback);1508532146;Register a callback to execute on destruction of the specified attribute._The callback is executed when the session is closed._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed;public void registerDestructionCallback(String name, Runnable callback) {_		synchronized (getSessionMutex()) {_			if (isSessionCompleted()) {_				throw new IllegalStateException("Session id=" + getSessionId() + " already completed")__			}_			this.attributes.put(DESTRUCTION_CALLBACK_NAME_PREFIX + name, callback)__		}_	};register,a,callback,to,execute,on,destruction,of,the,specified,attribute,the,callback,is,executed,when,the,session,is,closed,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed;public,void,register,destruction,callback,string,name,runnable,callback,synchronized,get,session,mutex,if,is,session,completed,throw,new,illegal,state,exception,session,id,get,session,id,already,completed,this,attributes,put,name,callback
SimpAttributes -> public void registerDestructionCallback(String name, Runnable callback);1522103912;Register a callback to execute on destruction of the specified attribute._The callback is executed when the session is closed._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed;public void registerDestructionCallback(String name, Runnable callback) {_		synchronized (getSessionMutex()) {_			if (isSessionCompleted()) {_				throw new IllegalStateException("Session id=" + getSessionId() + " already completed")__			}_			this.attributes.put(DESTRUCTION_CALLBACK_NAME_PREFIX + name, callback)__		}_	};register,a,callback,to,execute,on,destruction,of,the,specified,attribute,the,callback,is,executed,when,the,session,is,closed,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed;public,void,register,destruction,callback,string,name,runnable,callback,synchronized,get,session,mutex,if,is,session,completed,throw,new,illegal,state,exception,session,id,get,session,id,already,completed,this,attributes,put,name,callback
SimpAttributes -> public void registerDestructionCallback(String name, Runnable callback);1530174524;Register a callback to execute on destruction of the specified attribute._The callback is executed when the session is closed._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed;public void registerDestructionCallback(String name, Runnable callback) {_		synchronized (getSessionMutex()) {_			if (isSessionCompleted()) {_				throw new IllegalStateException("Session id=" + getSessionId() + " already completed")__			}_			this.attributes.put(DESTRUCTION_CALLBACK_NAME_PREFIX + name, callback)__		}_	};register,a,callback,to,execute,on,destruction,of,the,specified,attribute,the,callback,is,executed,when,the,session,is,closed,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed;public,void,register,destruction,callback,string,name,runnable,callback,synchronized,get,session,mutex,if,is,session,completed,throw,new,illegal,state,exception,session,id,get,session,id,already,completed,this,attributes,put,name,callback
SimpAttributes -> public void registerDestructionCallback(String name, Runnable callback);1531942400;Register a callback to execute on destruction of the specified attribute._The callback is executed when the session is closed._@param name the name of the attribute to register the callback for_@param callback the destruction callback to be executed;public void registerDestructionCallback(String name, Runnable callback) {_		synchronized (getSessionMutex()) {_			if (isSessionCompleted()) {_				throw new IllegalStateException("Session id=" + getSessionId() + " already completed")__			}_			this.attributes.put(DESTRUCTION_CALLBACK_NAME_PREFIX + name, callback)__		}_	};register,a,callback,to,execute,on,destruction,of,the,specified,attribute,the,callback,is,executed,when,the,session,is,closed,param,name,the,name,of,the,attribute,to,register,the,callback,for,param,callback,the,destruction,callback,to,be,executed;public,void,register,destruction,callback,string,name,runnable,callback,synchronized,get,session,mutex,if,is,session,completed,throw,new,illegal,state,exception,session,id,get,session,id,already,completed,this,attributes,put,name,callback
SimpAttributes -> public Object getSessionMutex();1399825877;Expose the object to synchronize on for the underlying session.__@return the session mutex to use (never {@code null});public Object getSessionMutex() {_		Object mutex = this.attributes.get(SESSION_MUTEX_NAME)__		if (mutex == null) {_			mutex = this.attributes__		}_		return mutex__	};expose,the,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;public,object,get,session,mutex,object,mutex,this,attributes,get,if,mutex,null,mutex,this,attributes,return,mutex
SimpAttributes -> public Object getSessionMutex();1403611325;Expose the object to synchronize on for the underlying session._@return the session mutex to use (never {@code null});public Object getSessionMutex() {_		Object mutex = this.attributes.get(SESSION_MUTEX_NAME)__		if (mutex == null) {_			mutex = this.attributes__		}_		return mutex__	};expose,the,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;public,object,get,session,mutex,object,mutex,this,attributes,get,if,mutex,null,mutex,this,attributes,return,mutex
SimpAttributes -> public Object getSessionMutex();1403856366;Expose the object to synchronize on for the underlying session._@return the session mutex to use (never {@code null});public Object getSessionMutex() {_		Object mutex = this.attributes.get(SESSION_MUTEX_NAME)__		if (mutex == null) {_			mutex = this.attributes__		}_		return mutex__	};expose,the,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;public,object,get,session,mutex,object,mutex,this,attributes,get,if,mutex,null,mutex,this,attributes,return,mutex
SimpAttributes -> public Object getSessionMutex();1404880799;Expose the object to synchronize on for the underlying session._@return the session mutex to use (never {@code null});public Object getSessionMutex() {_		Object mutex = this.attributes.get(SESSION_MUTEX_NAME)__		if (mutex == null) {_			mutex = this.attributes__		}_		return mutex__	};expose,the,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;public,object,get,session,mutex,object,mutex,this,attributes,get,if,mutex,null,mutex,this,attributes,return,mutex
SimpAttributes -> public Object getSessionMutex();1404937535;Expose the object to synchronize on for the underlying session._@return the session mutex to use (never {@code null});public Object getSessionMutex() {_		Object mutex = this.attributes.get(SESSION_MUTEX_NAME)__		if (mutex == null) {_			mutex = this.attributes__		}_		return mutex__	};expose,the,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;public,object,get,session,mutex,object,mutex,this,attributes,get,if,mutex,null,mutex,this,attributes,return,mutex
SimpAttributes -> public Object getSessionMutex();1413848647;Expose the object to synchronize on for the underlying session._@return the session mutex to use (never {@code null});public Object getSessionMutex() {_		Object mutex = this.attributes.get(SESSION_MUTEX_NAME)__		if (mutex == null) {_			mutex = this.attributes__		}_		return mutex__	};expose,the,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;public,object,get,session,mutex,object,mutex,this,attributes,get,if,mutex,null,mutex,this,attributes,return,mutex
SimpAttributes -> public Object getSessionMutex();1495868221;Expose the object to synchronize on for the underlying session._@return the session mutex to use (never {@code null});public Object getSessionMutex() {_		Object mutex = this.attributes.get(SESSION_MUTEX_NAME)__		if (mutex == null) {_			mutex = this.attributes__		}_		return mutex__	};expose,the,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;public,object,get,session,mutex,object,mutex,this,attributes,get,if,mutex,null,mutex,this,attributes,return,mutex
SimpAttributes -> public Object getSessionMutex();1508532146;Expose the object to synchronize on for the underlying session._@return the session mutex to use (never {@code null});public Object getSessionMutex() {_		Object mutex = this.attributes.get(SESSION_MUTEX_NAME)__		if (mutex == null) {_			mutex = this.attributes__		}_		return mutex__	};expose,the,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;public,object,get,session,mutex,object,mutex,this,attributes,get,if,mutex,null,mutex,this,attributes,return,mutex
SimpAttributes -> public Object getSessionMutex();1522103912;Expose the object to synchronize on for the underlying session._@return the session mutex to use (never {@code null});public Object getSessionMutex() {_		Object mutex = this.attributes.get(SESSION_MUTEX_NAME)__		if (mutex == null) {_			mutex = this.attributes__		}_		return mutex__	};expose,the,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;public,object,get,session,mutex,object,mutex,this,attributes,get,if,mutex,null,mutex,this,attributes,return,mutex
SimpAttributes -> public Object getSessionMutex();1530174524;Expose the object to synchronize on for the underlying session._@return the session mutex to use (never {@code null});public Object getSessionMutex() {_		Object mutex = this.attributes.get(SESSION_MUTEX_NAME)__		if (mutex == null) {_			mutex = this.attributes__		}_		return mutex__	};expose,the,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;public,object,get,session,mutex,object,mutex,this,attributes,get,if,mutex,null,mutex,this,attributes,return,mutex
SimpAttributes -> public Object getSessionMutex();1531942400;Expose the object to synchronize on for the underlying session._@return the session mutex to use (never {@code null});public Object getSessionMutex() {_		Object mutex = this.attributes.get(SESSION_MUTEX_NAME)__		if (mutex == null) {_			mutex = this.attributes__		}_		return mutex__	};expose,the,object,to,synchronize,on,for,the,underlying,session,return,the,session,mutex,to,use,never,code,null;public,object,get,session,mutex,object,mutex,this,attributes,get,if,mutex,null,mutex,this,attributes,return,mutex
