commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Before public void setup() throws Exception {     this.resolver = new PayloadArgumentResolver(new StringMessageConverter(), testValidator()).     Method payloadMethod = PayloadArgumentResolverTests.class.getDeclaredMethod("handleMessage", String.class, String.class, Locale.class, String.class, String.class, String.class, String.class).     this.paramAnnotated = new SynthesizingMethodParameter(payloadMethod, 0).     this.paramAnnotatedNotRequired = new SynthesizingMethodParameter(payloadMethod, 1).     this.paramAnnotatedRequired = new SynthesizingMethodParameter(payloadMethod, 2).     this.paramWithSpelExpression = new SynthesizingMethodParameter(payloadMethod, 3).     this.paramValidated = new SynthesizingMethodParameter(payloadMethod, 4).     this.paramValidated.initParameterNameDiscovery(new LocalVariableTableParameterNameDiscoverer()).     this.paramValidatedNotAnnotated = new SynthesizingMethodParameter(payloadMethod, 5).     this.paramNotAnnotated = new SynthesizingMethodParameter(payloadMethod, 6). }
false;public;0;12;;@Test public void supportsParameter() throws Exception {     assertTrue(this.resolver.supportsParameter(this.paramAnnotated)).     assertTrue(this.resolver.supportsParameter(this.paramNotAnnotated)).     PayloadArgumentResolver strictResolver = new PayloadArgumentResolver(new StringMessageConverter(), testValidator(), false).     assertTrue(strictResolver.supportsParameter(this.paramAnnotated)).     assertFalse(strictResolver.supportsParameter(this.paramNotAnnotated)). }
false;public;0;7;;@Test public void resolveRequired() throws Exception {     Message<?> message = MessageBuilder.withPayload("ABC".getBytes()).build().     Object actual = this.resolver.resolveArgument(paramAnnotated, message).     assertEquals("ABC", actual). }
false;public;0;7;;@Test public void resolveRequiredEmpty() throws Exception {     Message<?> message = MessageBuilder.withPayload("").build().     // Required but empty     thrown.expect(MethodArgumentNotValidException.class).     this.resolver.resolveArgument(paramAnnotated, message). }
false;public;0;7;;@Test public void resolveRequiredEmptyNonAnnotatedParameter() throws Exception {     Message<?> message = MessageBuilder.withPayload("").build().     // Required but empty     thrown.expect(MethodArgumentNotValidException.class).     this.resolver.resolveArgument(this.paramNotAnnotated, message). }
false;public;0;11;;@Test public void resolveNotRequired() throws Exception {     Message<?> emptyByteArrayMessage = MessageBuilder.withPayload(new byte[0]).build().     assertNull(this.resolver.resolveArgument(this.paramAnnotatedNotRequired, emptyByteArrayMessage)).     Message<?> emptyStringMessage = MessageBuilder.withPayload("").build().     assertNull(this.resolver.resolveArgument(this.paramAnnotatedNotRequired, emptyStringMessage)).     Message<?> notEmptyMessage = MessageBuilder.withPayload("ABC".getBytes()).build().     assertEquals("ABC", this.resolver.resolveArgument(this.paramAnnotatedNotRequired, notEmptyMessage)). }
false;public;0;8;;@Test public void resolveNonConvertibleParam() throws Exception {     Message<?> notEmptyMessage = MessageBuilder.withPayload(123).build().     thrown.expect(MessageConversionException.class).     thrown.expectMessage("Cannot convert").     this.resolver.resolveArgument(this.paramAnnotatedRequired, notEmptyMessage). }
false;public;0;7;;@Test public void resolveSpelExpressionNotSupported() throws Exception {     Message<?> message = MessageBuilder.withPayload("ABC".getBytes()).build().     thrown.expect(IllegalStateException.class).     this.resolver.resolveArgument(paramWithSpelExpression, message). }
false;public;0;5;;@Test public void resolveValidation() throws Exception {     Message<?> message = MessageBuilder.withPayload("ABC".getBytes()).build().     this.resolver.resolveArgument(this.paramValidated, message). }
false;public;0;8;;@Test public void resolveFailValidation() throws Exception {     // See testValidator()     Message<?> message = MessageBuilder.withPayload("invalidValue".getBytes()).build().     thrown.expect(MethodArgumentNotValidException.class).     this.resolver.resolveArgument(this.paramValidated, message). }
false;public;0;7;;@Test public void resolveFailValidationNoConversionNecessary() throws Exception {     Message<?> message = MessageBuilder.withPayload("invalidValue").build().     thrown.expect(MethodArgumentNotValidException.class).     this.resolver.resolveArgument(this.paramValidated, message). }
false;public;0;9;;@Test public void resolveNonAnnotatedParameter() throws Exception {     Message<?> notEmptyMessage = MessageBuilder.withPayload("ABC".getBytes()).build().     assertEquals("ABC", this.resolver.resolveArgument(this.paramNotAnnotated, notEmptyMessage)).     Message<?> emptyStringMessage = MessageBuilder.withPayload("").build().     thrown.expect(MethodArgumentNotValidException.class).     this.resolver.resolveArgument(this.paramValidated, emptyStringMessage). }
false;public;0;9;;@Test public void resolveNonAnnotatedParameterFailValidation() throws Exception {     // See testValidator()     Message<?> message = MessageBuilder.withPayload("invalidValue".getBytes()).build().     thrown.expect(MethodArgumentNotValidException.class).     thrown.expectMessage("invalid value").     assertEquals("invalidValue", this.resolver.resolveArgument(this.paramValidatedNotAnnotated, message)). }
false;public;1;4;;@Override public boolean supports(Class<?> clazz) {     return String.class.isAssignableFrom(clazz). }
false;public;2;7;;@Override public void validate(Object target, Errors errors) {     String value = (String) target.     if ("invalidValue".equals(value)) {         errors.reject("invalid value").     } }
false;private;0;15;;private Validator testValidator() {     return new Validator() {          @Override         public boolean supports(Class<?> clazz) {             return String.class.isAssignableFrom(clazz).         }          @Override         public void validate(Object target, Errors errors) {             String value = (String) target.             if ("invalidValue".equals(value)) {                 errors.reject("invalid value").             }         }     }. }
false;private;7;10;;@SuppressWarnings("unused") private void handleMessage(@Payload String param, @Payload(required = false) String paramNotRequired, @Payload(required = true) Locale nonConvertibleRequiredParam, @Payload("foo.bar") String paramWithSpelExpression, @MyValid @Payload String validParam, @Validated String validParamNotAnnotated, String paramNotAnnotated) { }
