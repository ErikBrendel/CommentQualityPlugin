commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     this.map = new ConcurrentHashMap<>().     this.simpAttributes = new SimpAttributes("session1", this.map). }
false;public;0;7;;@Test public void getAttribute() {     this.simpAttributes.setAttribute("name1", "value1").     assertThat(this.simpAttributes.getAttribute("name1"), is("value1")).     assertThat(this.simpAttributes.getAttribute("name2"), nullValue()). }
false;public;0;8;;@Test public void getAttributeNames() {     this.simpAttributes.setAttribute("name1", "value1").     this.simpAttributes.setAttribute("name2", "value1").     this.simpAttributes.setAttribute("name3", "value1").     assertThat(this.simpAttributes.getAttributeNames(), arrayContainingInAnyOrder("name1", "name2", "name3")). }
false;public;0;8;;@Test public void registerDestructionCallback() {     Runnable callback = Mockito.mock(Runnable.class).     this.simpAttributes.registerDestructionCallback("name1", callback).     assertThat(this.simpAttributes.getAttribute(SimpAttributes.DESTRUCTION_CALLBACK_NAME_PREFIX + "name1"), sameInstance(callback)). }
false;public;0;7;;@Test public void registerDestructionCallbackAfterSessionCompleted() {     this.simpAttributes.sessionCompleted().     this.thrown.expect(IllegalStateException.class).     this.thrown.expectMessage(containsString("already completed")).     this.simpAttributes.registerDestructionCallback("name1", Mockito.mock(Runnable.class)). }
false;public;0;9;;@Test public void removeDestructionCallback() {     Runnable callback1 = Mockito.mock(Runnable.class).     Runnable callback2 = Mockito.mock(Runnable.class).     this.simpAttributes.registerDestructionCallback("name1", callback1).     this.simpAttributes.registerDestructionCallback("name2", callback2).     assertThat(this.simpAttributes.getAttributeNames().length, is(2)). }
false;public;0;4;;@Test public void getSessionMutex() {     assertThat(this.simpAttributes.getSessionMutex(), sameInstance(this.map)). }
false;public;0;7;;@Test public void getSessionMutexExplicit() {     Object mutex = new Object().     this.simpAttributes.setAttribute(SimpAttributes.SESSION_MUTEX_NAME, mutex).     assertThat(this.simpAttributes.getSessionMutex(), sameInstance(mutex)). }
false;public;0;12;;@Test public void sessionCompleted() {     Runnable callback1 = Mockito.mock(Runnable.class).     Runnable callback2 = Mockito.mock(Runnable.class).     this.simpAttributes.registerDestructionCallback("name1", callback1).     this.simpAttributes.registerDestructionCallback("name2", callback2).     this.simpAttributes.sessionCompleted().     verify(callback1, times(1)).run().     verify(callback2, times(1)).run(). }
false;public;0;11;;@Test public void sessionCompletedIsIdempotent() {     Runnable callback1 = Mockito.mock(Runnable.class).     this.simpAttributes.registerDestructionCallback("name1", callback1).     this.simpAttributes.sessionCompleted().     this.simpAttributes.sessionCompleted().     this.simpAttributes.sessionCompleted().     verify(callback1, times(1)).run(). }
