commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     MockitoAnnotations.initMocks(this). }
false;public;0;6;;@Test public void messageMustNotBeNull() {     thrown.expect(IllegalArgumentException.class).     thrown.expectMessage("Message must not be null").     this.channel.send(null). }
false;public;0;10;;@Test public void sendWithoutExecutor() {     BeforeHandleInterceptor interceptor = new BeforeHandleInterceptor().     this.channel.addInterceptor(interceptor).     this.channel.subscribe(this.handler).     this.channel.send(this.message).     verify(this.handler).handleMessage(this.message).     assertEquals(1, interceptor.getCounter().get()).     assertTrue(interceptor.wasAfterHandledInvoked()). }
false;public;0;15;;@Test public void sendWithExecutor() {     BeforeHandleInterceptor interceptor = new BeforeHandleInterceptor().     TaskExecutor executor = mock(TaskExecutor.class).     ExecutorSubscribableChannel testChannel = new ExecutorSubscribableChannel(executor).     testChannel.addInterceptor(interceptor).     testChannel.subscribe(this.handler).     testChannel.send(this.message).     verify(executor).execute(this.runnableCaptor.capture()).     verify(this.handler, never()).handleMessage(this.message).     this.runnableCaptor.getValue().run().     verify(this.handler).handleMessage(this.message).     assertEquals(1, interceptor.getCounter().get()).     assertTrue(interceptor.wasAfterHandledInvoked()). }
false;public;0;7;;@Test public void subscribeTwice() {     assertThat(this.channel.subscribe(this.handler), equalTo(true)).     assertThat(this.channel.subscribe(this.handler), equalTo(false)).     this.channel.send(this.message).     verify(this.handler, times(1)).handleMessage(this.message). }
false;public;0;8;;@Test public void unsubscribeTwice() {     this.channel.subscribe(this.handler).     assertThat(this.channel.unsubscribe(this.handler), equalTo(true)).     assertThat(this.channel.unsubscribe(this.handler), equalTo(false)).     this.channel.send(this.message).     verify(this.handler, never()).handleMessage(this.message). }
false;public;0;15;;@Test public void failurePropagates() {     RuntimeException ex = new RuntimeException().     willThrow(ex).given(this.handler).handleMessage(this.message).     MessageHandler secondHandler = mock(MessageHandler.class).     this.channel.subscribe(this.handler).     this.channel.subscribe(secondHandler).     try {         this.channel.send(message).     } catch (MessageDeliveryException actualException) {         assertThat(actualException.getCause(), equalTo(ex)).     }     verifyZeroInteractions(secondHandler). }
false;public;0;7;;@Test public void concurrentModification() {     this.channel.subscribe(message1 -> channel.unsubscribe(handler)).     this.channel.subscribe(this.handler).     this.channel.send(this.message).     verify(this.handler).handleMessage(this.message). }
false;public;0;12;;@Test public void interceptorWithModifiedMessage() {     Message<?> expected = mock(Message.class).     BeforeHandleInterceptor interceptor = new BeforeHandleInterceptor().     interceptor.setMessageToReturn(expected).     this.channel.addInterceptor(interceptor).     this.channel.subscribe(this.handler).     this.channel.send(this.message).     verify(this.handler).handleMessage(expected).     assertEquals(1, interceptor.getCounter().get()).     assertTrue(interceptor.wasAfterHandledInvoked()). }
false;public;0;13;;@Test public void interceptorWithNull() {     BeforeHandleInterceptor interceptor1 = new BeforeHandleInterceptor().     NullReturningBeforeHandleInterceptor interceptor2 = new NullReturningBeforeHandleInterceptor().     this.channel.addInterceptor(interceptor1).     this.channel.addInterceptor(interceptor2).     this.channel.subscribe(this.handler).     this.channel.send(this.message).     verifyNoMoreInteractions(this.handler).     assertEquals(1, interceptor1.getCounter().get()).     assertEquals(1, interceptor2.getCounter().get()).     assertTrue(interceptor1.wasAfterHandledInvoked()). }
false;public;0;17;;@Test public void interceptorWithException() {     IllegalStateException expected = new IllegalStateException("Fake exception").     willThrow(expected).given(this.handler).handleMessage(this.message).     BeforeHandleInterceptor interceptor = new BeforeHandleInterceptor().     this.channel.addInterceptor(interceptor).     this.channel.subscribe(this.handler).     try {         this.channel.send(this.message).     } catch (MessageDeliveryException actual) {         assertSame(expected, actual.getCause()).     }     verify(this.handler).handleMessage(this.message).     assertEquals(1, interceptor.getCounter().get()).     assertTrue(interceptor.wasAfterHandledInvoked()). }
false;public;0;3;;public AtomicInteger getCounter() {     return this.counter. }
false;public;0;3;;public boolean wasAfterHandledInvoked() {     return this.afterHandledInvoked. }
false;public;3;6;;@Override public Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler) {     assertNotNull(message).     counter.incrementAndGet().     return message. }
false;public;4;6;;@Override public void afterMessageHandled(Message<?> message, MessageChannel channel, MessageHandler handler, Exception ex) {     this.afterHandledInvoked = true. }
false;public;1;3;;public void setMessageToReturn(Message<?> messageToReturn) {     this.messageToReturn = messageToReturn. }
true;public;1;4;// TODO Determine why setExceptionToRaise() is unused. ;// TODO Determine why setExceptionToRaise() is unused. @SuppressWarnings("unused") public void setExceptionToRaise(RuntimeException exception) {     this.exceptionToRaise = exception. }
false;public;3;8;;@Override public Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler) {     super.beforeHandle(message, channel, handler).     if (this.exceptionToRaise != null) {         throw this.exceptionToRaise.     }     return (this.messageToReturn != null ? this.messageToReturn : message). }
false;public;3;5;;@Override public Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler) {     super.beforeHandle(message, channel, handler).     return null. }
