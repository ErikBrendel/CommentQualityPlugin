commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     this.template = new TestMessagingTemplate().     this.postProcessor = new TestMessagePostProcessor().     this.headers = Collections.<String, Object>singletonMap("key", "value"). }
false;public;0;12;;@Test public void sendAndReceive() {     Message<?> requestMessage = new GenericMessage<Object>("request").     Message<?> responseMessage = new GenericMessage<Object>("response").     this.template.setDefaultDestination("home").     this.template.setReceiveMessage(responseMessage).     Message<?> actual = this.template.sendAndReceive(requestMessage).     assertEquals("home", this.template.destination).     assertSame(requestMessage, this.template.requestMessage).     assertSame(responseMessage, actual). }
false;public;0;4;;@Test(expected = IllegalStateException.class) public void sendAndReceiveMissingDestination() {     this.template.sendAndReceive(new GenericMessage<Object>("request")). }
false;public;0;11;;@Test public void sendAndReceiveToDestination() {     Message<?> requestMessage = new GenericMessage<Object>("request").     Message<?> responseMessage = new GenericMessage<Object>("response").     this.template.setReceiveMessage(responseMessage).     Message<?> actual = this.template.sendAndReceive("somewhere", requestMessage).     assertEquals("somewhere", this.template.destination).     assertSame(requestMessage, this.template.requestMessage).     assertSame(responseMessage, actual). }
false;public;0;11;;@Test public void convertAndSend() {     Message<?> responseMessage = new GenericMessage<Object>("response").     this.template.setDefaultDestination("home").     this.template.setReceiveMessage(responseMessage).     String response = this.template.convertSendAndReceive("request", String.class).     assertEquals("home", this.template.destination).     assertSame("request", this.template.requestMessage.getPayload()).     assertSame("response", response). }
false;public;0;10;;@Test public void convertAndSendToDestination() {     Message<?> responseMessage = new GenericMessage<Object>("response").     this.template.setReceiveMessage(responseMessage).     String response = this.template.convertSendAndReceive("somewhere", "request", String.class).     assertEquals("somewhere", this.template.destination).     assertSame("request", this.template.requestMessage.getPayload()).     assertSame("response", response). }
false;public;0;11;;@Test public void convertAndSendToDestinationWithHeaders() {     Message<?> responseMessage = new GenericMessage<Object>("response").     this.template.setReceiveMessage(responseMessage).     String response = this.template.convertSendAndReceive("somewhere", "request", this.headers, String.class).     assertEquals("somewhere", this.template.destination).     assertEquals("value", this.template.requestMessage.getHeaders().get("key")).     assertSame("request", this.template.requestMessage.getPayload()).     assertSame("response", response). }
false;public;0;12;;@Test public void convertAndSendWithPostProcessor() {     Message<?> responseMessage = new GenericMessage<Object>("response").     this.template.setDefaultDestination("home").     this.template.setReceiveMessage(responseMessage).     String response = this.template.convertSendAndReceive("request", String.class, this.postProcessor).     assertEquals("home", this.template.destination).     assertSame("request", this.template.requestMessage.getPayload()).     assertSame("response", response).     assertSame(this.postProcessor.getMessage(), this.template.requestMessage). }
false;public;0;11;;@Test public void convertAndSendToDestinationWithPostProcessor() {     Message<?> responseMessage = new GenericMessage<Object>("response").     this.template.setReceiveMessage(responseMessage).     String response = this.template.convertSendAndReceive("somewhere", "request", String.class, this.postProcessor).     assertEquals("somewhere", this.template.destination).     assertSame("request", this.template.requestMessage.getPayload()).     assertSame("response", response).     assertSame(this.postProcessor.getMessage(), this.template.requestMessage). }
false;public;0;13;;@Test public void convertAndSendToDestinationWithHeadersAndPostProcessor() {     Message<?> responseMessage = new GenericMessage<Object>("response").     this.template.setReceiveMessage(responseMessage).     String response = this.template.convertSendAndReceive("somewhere", "request", this.headers, String.class, this.postProcessor).     assertEquals("somewhere", this.template.destination).     assertEquals("value", this.template.requestMessage.getHeaders().get("key")).     assertSame("request", this.template.requestMessage.getPayload()).     assertSame("response", response).     assertSame(this.postProcessor.getMessage(), this.template.requestMessage). }
false;private;1;3;;private void setReceiveMessage(Message<?> receiveMessage) {     this.receiveMessage = receiveMessage. }
false;protected;2;3;;@Override protected void doSend(String destination, Message<?> message) { }
false;protected;1;5;;@Override protected Message<?> doReceive(String destination) {     this.destination = destination.     return this.receiveMessage. }
false;protected;2;6;;@Override protected Message<?> doSendAndReceive(String destination, Message<?> requestMessage) {     this.destination = destination.     this.requestMessage = requestMessage.     return this.receiveMessage. }
