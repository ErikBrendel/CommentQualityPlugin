commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Before public void setup() {     @SuppressWarnings("resource")     GenericApplicationContext cxt = new GenericApplicationContext().     cxt.refresh().     this.resolver = new HeaderMethodArgumentResolver(new DefaultConversionService(), cxt.getBeanFactory()).     Method method = ReflectionUtils.findMethod(getClass(), "handleMessage", (Class<?>[]) null).     this.paramRequired = new SynthesizingMethodParameter(method, 0).     this.paramNamedDefaultValueStringHeader = new SynthesizingMethodParameter(method, 1).     this.paramSystemPropertyDefaultValue = new SynthesizingMethodParameter(method, 2).     this.paramSystemPropertyName = new SynthesizingMethodParameter(method, 3).     this.paramNotAnnotated = new SynthesizingMethodParameter(method, 4).     this.paramOptional = new SynthesizingMethodParameter(method, 5).     this.paramNativeHeader = new SynthesizingMethodParameter(method, 6).     this.paramRequired.initParameterNameDiscovery(new DefaultParameterNameDiscoverer()).     GenericTypeResolver.resolveParameterType(this.paramRequired, HeaderMethodArgumentResolver.class). }
false;public;0;5;;@Test public void supportsParameter() {     assertTrue(resolver.supportsParameter(paramNamedDefaultValueStringHeader)).     assertFalse(resolver.supportsParameter(paramNotAnnotated)). }
false;public;0;6;;@Test public void resolveArgument() throws Exception {     Message<byte[]> message = MessageBuilder.withPayload(new byte[0]).setHeader("param1", "foo").build().     Object result = this.resolver.resolveArgument(this.paramRequired, message).     assertEquals("foo", result). }
false;public;0;7;;// SPR-11326 @Test public void resolveArgumentNativeHeader() throws Exception {     TestMessageHeaderAccessor headers = new TestMessageHeaderAccessor().     headers.setNativeHeader("param1", "foo").     Message<byte[]> message = MessageBuilder.withPayload(new byte[0]).setHeaders(headers).build().     assertEquals("foo", this.resolver.resolveArgument(this.paramRequired, message)). }
false;public;0;10;;@Test public void resolveArgumentNativeHeaderAmbiguity() throws Exception {     TestMessageHeaderAccessor headers = new TestMessageHeaderAccessor().     headers.setHeader("param1", "foo").     headers.setNativeHeader("param1", "native-foo").     Message<byte[]> message = MessageBuilder.withPayload(new byte[0]).setHeaders(headers).build().     assertEquals("foo", this.resolver.resolveArgument(this.paramRequired, message)).     assertEquals("native-foo", this.resolver.resolveArgument(this.paramNativeHeader, message)). }
false;public;0;5;;@Test(expected = MessageHandlingException.class) public void resolveArgumentNotFound() throws Exception {     Message<byte[]> message = MessageBuilder.withPayload(new byte[0]).build().     this.resolver.resolveArgument(this.paramRequired, message). }
false;public;0;6;;@Test public void resolveArgumentDefaultValue() throws Exception {     Message<byte[]> message = MessageBuilder.withPayload(new byte[0]).build().     Object result = this.resolver.resolveArgument(this.paramNamedDefaultValueStringHeader, message).     assertEquals("bar", result). }
false;public;0;12;;@Test public void resolveDefaultValueSystemProperty() throws Exception {     System.setProperty("systemProperty", "sysbar").     try {         Message<byte[]> message = MessageBuilder.withPayload(new byte[0]).build().         Object result = resolver.resolveArgument(paramSystemPropertyDefaultValue, message).         assertEquals("sysbar", result).     } finally {         System.clearProperty("systemProperty").     } }
false;public;0;12;;@Test public void resolveNameFromSystemProperty() throws Exception {     System.setProperty("systemProperty", "sysbar").     try {         Message<byte[]> message = MessageBuilder.withPayload(new byte[0]).setHeader("sysbar", "foo").build().         Object result = resolver.resolveArgument(paramSystemPropertyName, message).         assertEquals("foo", result).     } finally {         System.clearProperty("systemProperty").     } }
false;public;0;12;;@Test public void resolveOptionalHeaderWithValue() throws Exception {     GenericApplicationContext cxt = new GenericApplicationContext().     cxt.refresh().     HeaderMethodArgumentResolver resolver = new HeaderMethodArgumentResolver(new DefaultConversionService(), cxt.getBeanFactory()).     Message<String> message = MessageBuilder.withPayload("foo").setHeader("foo", "bar").build().     Object result = resolver.resolveArgument(paramOptional, message).     assertEquals(Optional.of("bar"), result). }
false;public;0;12;;@Test public void resolveOptionalHeaderAsEmpty() throws Exception {     GenericApplicationContext cxt = new GenericApplicationContext().     cxt.refresh().     HeaderMethodArgumentResolver resolver = new HeaderMethodArgumentResolver(new DefaultConversionService(), cxt.getBeanFactory()).     Message<String> message = MessageBuilder.withPayload("foo").build().     Object result = resolver.resolveArgument(paramOptional, message).     assertEquals(Optional.empty(), result). }
false;public;7;9;;public void handleMessage(@Header String param1, @Header(name = "name", defaultValue = "bar") String param2, @Header(name = "name", defaultValue = "#{systemProperties.systemProperty}") String param3, @Header(name = "#{systemProperties.systemProperty}") String param4, String param5, @Header("foo") Optional<String> param6, @Header("nativeHeaders.param1") String nativeHeaderParam1) { }
