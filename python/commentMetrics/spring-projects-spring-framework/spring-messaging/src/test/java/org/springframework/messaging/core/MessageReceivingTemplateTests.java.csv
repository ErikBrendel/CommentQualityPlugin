commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.template = new TestMessagingTemplate(). }
false;public;0;10;;@Test public void receive() {     Message<?> expected = new GenericMessage<>("payload").     this.template.setDefaultDestination("home").     this.template.setReceiveMessage(expected).     Message<?> actual = this.template.receive().     assertEquals("home", this.template.destination).     assertSame(expected, actual). }
false;public;0;4;;@Test(expected = IllegalStateException.class) public void receiveMissingDefaultDestination() {     this.template.receive(). }
false;public;0;9;;@Test public void receiveFromDestination() {     Message<?> expected = new GenericMessage<>("payload").     this.template.setReceiveMessage(expected).     Message<?> actual = this.template.receive("somewhere").     assertEquals("somewhere", this.template.destination).     assertSame(expected, actual). }
false;public;0;10;;@Test public void receiveAndConvert() {     Message<?> expected = new GenericMessage<>("payload").     this.template.setDefaultDestination("home").     this.template.setReceiveMessage(expected).     String payload = this.template.receiveAndConvert(String.class).     assertEquals("home", this.template.destination).     assertSame("payload", payload). }
false;public;0;9;;@Test public void receiveAndConvertFromDestination() {     Message<?> expected = new GenericMessage<>("payload").     this.template.setReceiveMessage(expected).     String payload = this.template.receiveAndConvert("somewhere", String.class).     assertEquals("somewhere", this.template.destination).     assertSame("payload", payload). }
false;public;0;10;;@Test public void receiveAndConvertFailed() {     Message<?> expected = new GenericMessage<>("not a number test").     this.template.setReceiveMessage(expected).     this.template.setMessageConverter(new GenericMessageConverter()).     thrown.expect(MessageConversionException.class).     thrown.expectCause(isA(ConversionFailedException.class)).     this.template.receiveAndConvert("somewhere", Integer.class). }
false;public;0;14;;@Test public void receiveAndConvertNoConverter() {     Message<?> expected = new GenericMessage<>("payload").     this.template.setDefaultDestination("home").     this.template.setReceiveMessage(expected).     this.template.setMessageConverter(new GenericMessageConverter()).     try {         this.template.receiveAndConvert(Writer.class).     } catch (MessageConversionException ex) {         assertTrue("Invalid exception message '" + ex.getMessage() + "'", ex.getMessage().contains("payload")).         assertSame(expected, ex.getFailedMessage()).     } }
false;private;1;3;;private void setReceiveMessage(Message<?> receiveMessage) {     this.receiveMessage = receiveMessage. }
false;protected;2;3;;@Override protected void doSend(String destination, Message<?> message) { }
false;protected;1;5;;@Override protected Message<?> doReceive(String destination) {     this.destination = destination.     return this.receiveMessage. }
false;protected;2;5;;@Override protected Message<?> doSendAndReceive(String destination, Message<?> requestMessage) {     this.destination = destination.     return null. }
