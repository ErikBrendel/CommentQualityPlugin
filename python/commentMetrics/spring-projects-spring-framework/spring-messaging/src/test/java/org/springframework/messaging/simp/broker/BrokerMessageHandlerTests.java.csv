commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     this.handler = new TestBrokerMessageHandler(). }
false;public;0;6;;@Test public void startShouldUpdateIsRunning() {     assertFalse(this.handler.isRunning()).     this.handler.start().     assertTrue(this.handler.isRunning()). }
false;public;0;9;;@Test public void stopShouldUpdateIsRunning() {     this.handler.start().     assertTrue(this.handler.isRunning()).     this.handler.stop().     assertFalse(this.handler.isRunning()). }
false;public;0;6;;@Test public void startAndStopShouldNotPublishBrokerAvailabilityEvents() {     this.handler.start().     this.handler.stop().     assertEquals(Collections.emptyList(), this.handler.availabilityEvents). }
false;public;0;5;;@Test public void handleMessageWhenBrokerNotRunning() {     this.handler.handleMessage(new GenericMessage<Object>("payload")).     assertEquals(Collections.emptyList(), this.handler.messages). }
false;public;0;11;;@Test public void publishBrokerAvailableEvent() {     assertFalse(this.handler.isBrokerAvailable()).     assertEquals(Collections.emptyList(), this.handler.availabilityEvents).     this.handler.publishBrokerAvailableEvent().     assertTrue(this.handler.isBrokerAvailable()).     assertEquals(Arrays.asList(true), this.handler.availabilityEvents). }
false;public;0;8;;@Test public void publishBrokerAvailableEventWhenAlreadyAvailable() {     this.handler.publishBrokerAvailableEvent().     this.handler.publishBrokerAvailableEvent().     assertEquals(Arrays.asList(true), this.handler.availabilityEvents). }
false;public;0;11;;@Test public void publishBrokerUnavailableEvent() {     this.handler.publishBrokerAvailableEvent().     assertTrue(this.handler.isBrokerAvailable()).     this.handler.publishBrokerUnavailableEvent().     assertFalse(this.handler.isBrokerAvailable()).     assertEquals(Arrays.asList(true, false), this.handler.availabilityEvents). }
false;public;0;9;;@Test public void publishBrokerUnavailableEventWhenAlreadyUnavailable() {     this.handler.publishBrokerAvailableEvent().     this.handler.publishBrokerUnavailableEvent().     this.handler.publishBrokerUnavailableEvent().     assertEquals(Arrays.asList(true, false), this.handler.availabilityEvents). }
false;protected;1;4;;@Override protected void handleMessageInternal(Message<?> message) {     this.messages.add(message). }
false;public;1;4;;@Override public void publishEvent(ApplicationEvent event) {     publishEvent((Object) event). }
false;public;1;6;;@Override public void publishEvent(Object event) {     if (event instanceof BrokerAvailabilityEvent) {         this.availabilityEvents.add(((BrokerAvailabilityEvent) event).isBrokerAvailable()).     } }
