commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     this.template = new TestMessageSendingTemplate().     this.postProcessor = new TestMessagePostProcessor().     this.headers = new HashMap<>().     this.headers.put("key", "value"). }
false;public;0;9;;@Test public void send() {     Message<?> message = new GenericMessage<Object>("payload").     this.template.setDefaultDestination("home").     this.template.send(message).     assertEquals("home", this.template.destination).     assertSame(message, this.template.message). }
false;public;0;8;;@Test public void sendToDestination() {     Message<?> message = new GenericMessage<Object>("payload").     this.template.send("somewhere", message).     assertEquals("somewhere", this.template.destination).     assertSame(message, this.template.message). }
false;public;0;5;;@Test(expected = IllegalStateException.class) public void sendMissingDestination() {     Message<?> message = new GenericMessage<Object>("payload").     this.template.send(message). }
false;public;0;12;;@Test public void convertAndSend() {     this.template.convertAndSend("somewhere", "payload", headers, this.postProcessor).     assertEquals("somewhere", this.template.destination).     assertNotNull(this.template.message).     assertEquals("value", this.template.message.getHeaders().get("key")).     assertEquals("payload", this.template.message.getPayload()).     assertNotNull(this.postProcessor.getMessage()).     assertSame(this.template.message, this.postProcessor.getMessage()). }
false;public;0;10;;@Test public void convertAndSendPayload() {     this.template.setDefaultDestination("home").     this.template.convertAndSend("payload").     assertEquals("home", this.template.destination).     assertNotNull(this.template.message).     assertEquals("expected 'id' and 'timestamp' headers only", 2, this.template.message.getHeaders().size()).     assertEquals("payload", this.template.message.getPayload()). }
false;public;0;9;;@Test public void convertAndSendPayloadToDestination() {     this.template.convertAndSend("somewhere", "payload").     assertEquals("somewhere", this.template.destination).     assertNotNull(this.template.message).     assertEquals("expected 'id' and 'timestamp' headers only", 2, this.template.message.getHeaders().size()).     assertEquals("payload", this.template.message.getPayload()). }
false;public;0;9;;@Test public void convertAndSendPayloadAndHeadersToDestination() {     this.template.convertAndSend("somewhere", "payload", headers).     assertEquals("somewhere", this.template.destination).     assertNotNull(this.template.message).     assertEquals("value", this.template.message.getHeaders().get("key")).     assertEquals("payload", this.template.message.getPayload()). }
false;public;0;15;;@Test public void convertAndSendPayloadAndMutableHeadersToDestination() {     MessageHeaderAccessor accessor = new MessageHeaderAccessor().     accessor.setHeader("foo", "bar").     accessor.setLeaveMutable(true).     MessageHeaders messageHeaders = accessor.getMessageHeaders().     this.template.setMessageConverter(new StringMessageConverter()).     this.template.convertAndSend("somewhere", "payload", messageHeaders).     MessageHeaders actual = this.template.message.getHeaders().     assertSame(messageHeaders, actual).     assertEquals(new MimeType("text", "plain", StandardCharsets.UTF_8), actual.get(MessageHeaders.CONTENT_TYPE)).     assertEquals("bar", actual.get("foo")). }
false;public;0;13;;@Test public void convertAndSendPayloadWithPostProcessor() {     this.template.setDefaultDestination("home").     this.template.convertAndSend((Object) "payload", this.postProcessor).     assertEquals("home", this.template.destination).     assertNotNull(this.template.message).     assertEquals("expected 'id' and 'timestamp' headers only", 2, this.template.message.getHeaders().size()).     assertEquals("payload", this.template.message.getPayload()).     assertNotNull(this.postProcessor.getMessage()).     assertSame(this.template.message, this.postProcessor.getMessage()). }
false;public;0;12;;@Test public void convertAndSendPayloadWithPostProcessorToDestination() {     this.template.convertAndSend("somewhere", "payload", this.postProcessor).     assertEquals("somewhere", this.template.destination).     assertNotNull(this.template.message).     assertEquals("expected 'id' and 'timestamp' headers only", 2, this.template.message.getHeaders().size()).     assertEquals("payload", this.template.message.getPayload()).     assertNotNull(this.postProcessor.getMessage()).     assertSame(this.template.message, this.postProcessor.getMessage()). }
false;public;0;10;;@Test(expected = MessageConversionException.class) public void convertAndSendNoMatchingConverter() {     MessageConverter converter = new CompositeMessageConverter(Arrays.<MessageConverter>asList(new MappingJackson2MessageConverter())).     this.template.setMessageConverter(converter).     this.headers.put(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.APPLICATION_XML).     this.template.convertAndSend("home", "payload", new MessageHeaders(this.headers)). }
false;protected;2;5;;@Override protected void doSend(String destination, Message<?> message) {     this.destination = destination.     this.message = message. }
false;;0;3;;Message<?> getMessage() {     return this.message. }
false;public;1;5;;@Override public Message<?> postProcessMessage(Message<?> message) {     this.message = message.     return message. }
