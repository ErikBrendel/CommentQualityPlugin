commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void clientInboundChannel() {     ApplicationContext context = loadConfig(SimpleBrokerConfig.class).     TestChannel channel = context.getBean("clientInboundChannel", TestChannel.class).     Set<MessageHandler> handlers = channel.getSubscribers().     assertEquals(3, handlers.size()).     assertTrue(handlers.contains(context.getBean(SimpAnnotationMethodMessageHandler.class))).     assertTrue(handlers.contains(context.getBean(UserDestinationMessageHandler.class))).     assertTrue(handlers.contains(context.getBean(SimpleBrokerMessageHandler.class))). }
false;public;0;12;;@Test public void clientInboundChannelWithBrokerRelay() {     ApplicationContext context = loadConfig(BrokerRelayConfig.class).     TestChannel channel = context.getBean("clientInboundChannel", TestChannel.class).     Set<MessageHandler> handlers = channel.getSubscribers().     assertEquals(3, handlers.size()).     assertTrue(handlers.contains(context.getBean(SimpAnnotationMethodMessageHandler.class))).     assertTrue(handlers.contains(context.getBean(UserDestinationMessageHandler.class))).     assertTrue(handlers.contains(context.getBean(StompBrokerRelayMessageHandler.class))). }
false;public;0;14;;@Test public void clientInboundChannelCustomized() {     ApplicationContext context = loadConfig(CustomConfig.class).     AbstractSubscribableChannel channel = context.getBean("clientInboundChannel", AbstractSubscribableChannel.class).     assertEquals(3, channel.getInterceptors().size()).     CustomThreadPoolTaskExecutor taskExecutor = context.getBean("clientInboundChannelExecutor", CustomThreadPoolTaskExecutor.class).     assertEquals(11, taskExecutor.getCorePoolSize()).     assertEquals(12, taskExecutor.getMaxPoolSize()).     assertEquals(13, taskExecutor.getKeepAliveSeconds()). }
false;public;0;24;;@Test public void clientOutboundChannelUsedByAnnotatedMethod() {     ApplicationContext context = loadConfig(SimpleBrokerConfig.class).     TestChannel channel = context.getBean("clientOutboundChannel", TestChannel.class).     SimpAnnotationMethodMessageHandler messageHandler = context.getBean(SimpAnnotationMethodMessageHandler.class).     StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.SUBSCRIBE).     headers.setSessionId("sess1").     headers.setSessionAttributes(new ConcurrentHashMap<>()).     headers.setSubscriptionId("subs1").     headers.setDestination("/foo").     Message<?> message = MessageBuilder.withPayload(new byte[0]).setHeaders(headers).build().     messageHandler.handleMessage(message).     message = channel.messages.get(0).     headers = StompHeaderAccessor.wrap(message).     assertEquals(SimpMessageType.MESSAGE, headers.getMessageType()).     assertEquals("/foo", headers.getDestination()).     assertEquals("bar", new String((byte[]) message.getPayload())). }
false;public;0;32;;@Test public void clientOutboundChannelUsedBySimpleBroker() {     ApplicationContext context = loadConfig(SimpleBrokerConfig.class).     TestChannel outboundChannel = context.getBean("clientOutboundChannel", TestChannel.class).     SimpleBrokerMessageHandler broker = context.getBean(SimpleBrokerMessageHandler.class).     StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.SUBSCRIBE).     headers.setSessionId("sess1").     headers.setSubscriptionId("subs1").     headers.setDestination("/foo").     Message<?> message = MessageBuilder.createMessage(new byte[0], headers.getMessageHeaders()).     // subscribe     broker.handleMessage(createConnectMessage("sess1", new long[] { 0, 0 })).     broker.handleMessage(message).     headers = StompHeaderAccessor.create(StompCommand.SEND).     headers.setSessionId("sess1").     headers.setDestination("/foo").     message = MessageBuilder.createMessage("bar".getBytes(), headers.getMessageHeaders()).     // message     broker.handleMessage(message).     message = outboundChannel.messages.get(1).     headers = StompHeaderAccessor.wrap(message).     assertEquals(SimpMessageType.MESSAGE, headers.getMessageType()).     assertEquals("/foo", headers.getDestination()).     assertEquals("bar", new String((byte[]) message.getPayload())). }
false;public;0;20;;@Test public void clientOutboundChannelCustomized() {     ApplicationContext context = loadConfig(CustomConfig.class).     AbstractSubscribableChannel channel = context.getBean("clientOutboundChannel", AbstractSubscribableChannel.class).     assertEquals(4, channel.getInterceptors().size()).     ThreadPoolTaskExecutor taskExecutor = context.getBean("clientOutboundChannelExecutor", ThreadPoolTaskExecutor.class).     assertEquals(21, taskExecutor.getCorePoolSize()).     assertEquals(22, taskExecutor.getMaxPoolSize()).     assertEquals(23, taskExecutor.getKeepAliveSeconds()).     SimpleBrokerMessageHandler broker = context.getBean("simpleBrokerMessageHandler", SimpleBrokerMessageHandler.class).     assertTrue(broker.isPreservePublishOrder()). }
false;public;0;13;;@Test public void brokerChannel() {     ApplicationContext context = loadConfig(SimpleBrokerConfig.class).     TestChannel channel = context.getBean("brokerChannel", TestChannel.class).     Set<MessageHandler> handlers = channel.getSubscribers().     assertEquals(2, handlers.size()).     assertTrue(handlers.contains(context.getBean(UserDestinationMessageHandler.class))).     assertTrue(handlers.contains(context.getBean(SimpleBrokerMessageHandler.class))).     assertNull(channel.getExecutor()). }
false;public;0;11;;@Test public void brokerChannelWithBrokerRelay() {     ApplicationContext context = loadConfig(BrokerRelayConfig.class).     TestChannel channel = context.getBean("brokerChannel", TestChannel.class).     Set<MessageHandler> handlers = channel.getSubscribers().     assertEquals(2, handlers.size()).     assertTrue(handlers.contains(context.getBean(UserDestinationMessageHandler.class))).     assertTrue(handlers.contains(context.getBean(StompBrokerRelayMessageHandler.class))). }
false;public;0;23;;@Test public void brokerChannelUsedByAnnotatedMethod() {     ApplicationContext context = loadConfig(SimpleBrokerConfig.class).     TestChannel channel = context.getBean("brokerChannel", TestChannel.class).     SimpAnnotationMethodMessageHandler messageHandler = context.getBean(SimpAnnotationMethodMessageHandler.class).     StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.SEND).     headers.setSessionId("sess1").     headers.setSessionAttributes(new ConcurrentHashMap<>()).     headers.setDestination("/foo").     Message<?> message = MessageBuilder.createMessage(new byte[0], headers.getMessageHeaders()).     messageHandler.handleMessage(message).     message = channel.messages.get(0).     headers = StompHeaderAccessor.wrap(message).     assertEquals(SimpMessageType.MESSAGE, headers.getMessageType()).     assertEquals("/bar", headers.getDestination()).     assertEquals("bar", new String((byte[]) message.getPayload())). }
false;public;0;16;;@Test public void brokerChannelCustomized() {     ApplicationContext context = loadConfig(CustomConfig.class).     AbstractSubscribableChannel channel = context.getBean("brokerChannel", AbstractSubscribableChannel.class).     assertEquals(4, channel.getInterceptors().size()).     ThreadPoolTaskExecutor taskExecutor = context.getBean("brokerChannelExecutor", ThreadPoolTaskExecutor.class).     assertEquals(31, taskExecutor.getCorePoolSize()).     assertEquals(32, taskExecutor.getMaxPoolSize()).     assertEquals(33, taskExecutor.getKeepAliveSeconds()). }
false;public;0;14;;@Test public void configureMessageConvertersDefault() {     AbstractMessageBrokerConfiguration config = new BaseTestMessageBrokerConfig().     CompositeMessageConverter compositeConverter = config.brokerMessageConverter().     List<MessageConverter> converters = compositeConverter.getConverters().     assertThat(converters.size(), Matchers.is(3)).     assertThat(converters.get(0), Matchers.instanceOf(StringMessageConverter.class)).     assertThat(converters.get(1), Matchers.instanceOf(ByteArrayMessageConverter.class)).     assertThat(converters.get(2), Matchers.instanceOf(MappingJackson2MessageConverter.class)).     ContentTypeResolver resolver = ((MappingJackson2MessageConverter) converters.get(2)).getContentTypeResolver().     assertEquals(MimeTypeUtils.APPLICATION_JSON, ((DefaultContentTypeResolver) resolver).getDefaultMimeType()). }
false;public;0;18;;@Test public void threadPoolSizeDefault() {     ApplicationContext context = loadConfig(DefaultConfig.class).     String name = "clientInboundChannelExecutor".     ThreadPoolTaskExecutor executor = context.getBean(name, ThreadPoolTaskExecutor.class).     assertEquals(Runtime.getRuntime().availableProcessors() * 2, executor.getCorePoolSize()).     // No way to verify queue capacity     name = "clientOutboundChannelExecutor".     executor = context.getBean(name, ThreadPoolTaskExecutor.class).     assertEquals(Runtime.getRuntime().availableProcessors() * 2, executor.getCorePoolSize()).     name = "brokerChannelExecutor".     executor = context.getBean(name, ThreadPoolTaskExecutor.class).     assertEquals(0, executor.getCorePoolSize()).     assertEquals(1, executor.getMaxPoolSize()). }
false;protected;1;5;;@Override protected boolean configureMessageConverters(List<MessageConverter> messageConverters) {     messageConverters.add(testConverter).     return false. }
false;public;0;16;;@Test public void configureMessageConvertersCustom() {     final MessageConverter testConverter = mock(MessageConverter.class).     AbstractMessageBrokerConfiguration config = new BaseTestMessageBrokerConfig() {          @Override         protected boolean configureMessageConverters(List<MessageConverter> messageConverters) {             messageConverters.add(testConverter).             return false.         }     }.     CompositeMessageConverter compositeConverter = config.brokerMessageConverter().     assertThat(compositeConverter.getConverters().size(), Matchers.is(1)).     Iterator<MessageConverter> iterator = compositeConverter.getConverters().iterator().     assertThat(iterator.next(), Matchers.is(testConverter)). }
false;protected;1;5;;@Override protected boolean configureMessageConverters(List<MessageConverter> messageConverters) {     messageConverters.add(testConverter).     return true. }
false;public;0;20;;@Test public void configureMessageConvertersCustomAndDefault() {     final MessageConverter testConverter = mock(MessageConverter.class).     AbstractMessageBrokerConfiguration config = new BaseTestMessageBrokerConfig() {          @Override         protected boolean configureMessageConverters(List<MessageConverter> messageConverters) {             messageConverters.add(testConverter).             return true.         }     }.     CompositeMessageConverter compositeConverter = config.brokerMessageConverter().     assertThat(compositeConverter.getConverters().size(), Matchers.is(4)).     Iterator<MessageConverter> iterator = compositeConverter.getConverters().iterator().     assertThat(iterator.next(), Matchers.is(testConverter)).     assertThat(iterator.next(), Matchers.instanceOf(StringMessageConverter.class)).     assertThat(iterator.next(), Matchers.instanceOf(ByteArrayMessageConverter.class)).     assertThat(iterator.next(), Matchers.instanceOf(MappingJackson2MessageConverter.class)). }
false;public;0;15;;@Test public void customArgumentAndReturnValueTypes() {     ApplicationContext context = loadConfig(CustomConfig.class).     SimpAnnotationMethodMessageHandler handler = context.getBean(SimpAnnotationMethodMessageHandler.class).     List<HandlerMethodArgumentResolver> customResolvers = handler.getCustomArgumentResolvers().     assertEquals(1, customResolvers.size()).     assertTrue(handler.getArgumentResolvers().contains(customResolvers.get(0))).     List<HandlerMethodReturnValueHandler> customHandlers = handler.getCustomReturnValueHandlers().     assertEquals(1, customHandlers.size()).     assertTrue(handler.getReturnValueHandlers().contains(customHandlers.get(0))). }
false;public;0;8;;@Test public void simpValidatorDefault() {     AbstractMessageBrokerConfiguration config = new BaseTestMessageBrokerConfig() {     }.     config.setApplicationContext(new StaticApplicationContext()).     assertThat(config.simpValidator(), Matchers.notNullValue()).     assertThat(config.simpValidator(), Matchers.instanceOf(OptionalValidatorFactoryBean.class)). }
false;public;0;4;;@Override public Validator getValidator() {     return validator. }
false;public;0;12;;@Test public void simpValidatorCustom() {     final Validator validator = mock(Validator.class).     AbstractMessageBrokerConfiguration config = new BaseTestMessageBrokerConfig() {          @Override         public Validator getValidator() {             return validator.         }     }.     assertSame(validator, config.simpValidator()). }
false;public;0;10;;@Test public void simpValidatorMvc() {     StaticApplicationContext appCxt = new StaticApplicationContext().     appCxt.registerSingleton("mvcValidator", TestValidator.class).     AbstractMessageBrokerConfiguration config = new BaseTestMessageBrokerConfig() {     }.     config.setApplicationContext(appCxt).     assertThat(config.simpValidator(), Matchers.notNullValue()).     assertThat(config.simpValidator(), Matchers.instanceOf(TestValidator.class)). }
false;public;0;9;;@Test public void simpValidatorInjected() {     ApplicationContext context = loadConfig(SimpleBrokerConfig.class).     SimpAnnotationMethodMessageHandler messageHandler = context.getBean(SimpAnnotationMethodMessageHandler.class).     assertThat(messageHandler.getValidator(), Matchers.notNullValue(Validator.class)). }
false;public;0;17;;@Test public void customPathMatcher() {     ApplicationContext context = loadConfig(CustomConfig.class).     SimpleBrokerMessageHandler broker = context.getBean(SimpleBrokerMessageHandler.class).     DefaultSubscriptionRegistry registry = (DefaultSubscriptionRegistry) broker.getSubscriptionRegistry().     assertEquals("a.a", registry.getPathMatcher().combine("a", "a")).     PathMatcher pathMatcher = context.getBean(SimpAnnotationMethodMessageHandler.class).getPathMatcher().     assertEquals("a.a", pathMatcher.combine("a", "a")).     DefaultUserDestinationResolver resolver = context.getBean(DefaultUserDestinationResolver.class).     assertNotNull(resolver).     assertEquals(false, resolver.isRemoveLeadingSlash()). }
false;public;0;8;;@Test public void customCacheLimit() {     ApplicationContext context = loadConfig(CustomConfig.class).     SimpleBrokerMessageHandler broker = context.getBean(SimpleBrokerMessageHandler.class).     DefaultSubscriptionRegistry registry = (DefaultSubscriptionRegistry) broker.getSubscriptionRegistry().     assertEquals(8192, registry.getCacheLimit()). }
false;public;0;8;;@Test public void customUserRegistryOrder() {     ApplicationContext context = loadConfig(CustomConfig.class).     SimpUserRegistry registry = context.getBean(SimpUserRegistry.class).     assertTrue(registry instanceof TestUserRegistry).     assertEquals(99, ((TestUserRegistry) registry).getOrder()). }
false;public;0;19;;@Test public void userBroadcasts() {     ApplicationContext context = loadConfig(BrokerRelayConfig.class).     SimpUserRegistry userRegistry = context.getBean(SimpUserRegistry.class).     assertEquals(MultiServerUserRegistry.class, userRegistry.getClass()).     UserDestinationMessageHandler handler1 = context.getBean(UserDestinationMessageHandler.class).     assertEquals("/topic/unresolved-user-destination", handler1.getBroadcastDestination()).     UserRegistryMessageHandler handler2 = context.getBean(UserRegistryMessageHandler.class).     assertEquals("/topic/simp-user-registry", handler2.getBroadcastDestination()).     StompBrokerRelayMessageHandler relay = context.getBean(StompBrokerRelayMessageHandler.class).     assertNotNull(relay.getSystemSubscriptions()).     assertEquals(2, relay.getSystemSubscriptions().size()).     assertSame(handler1, relay.getSystemSubscriptions().get("/topic/unresolved-user-destination")).     assertSame(handler2, relay.getSystemSubscriptions().get("/topic/simp-user-registry")). }
false;public;0;14;;@Test public void userBroadcastsDisabledWithSimpleBroker() {     ApplicationContext context = loadConfig(SimpleBrokerConfig.class).     SimpUserRegistry registry = context.getBean(SimpUserRegistry.class).     assertNotNull(registry).     assertNotEquals(MultiServerUserRegistry.class, registry.getClass()).     UserDestinationMessageHandler handler = context.getBean(UserDestinationMessageHandler.class).     assertNull(handler.getBroadcastDestination()).     Object nullBean = context.getBean("userRegistryMessageHandler").     assertTrue(nullBean.equals(null)). }
false;public;0;5;;// SPR-16275 @Test public void dotSeparatorWithBrokerSlashConvention() {     ApplicationContext context = loadConfig(DotSeparatorWithSlashBrokerConventionConfig.class).     testDotSeparator(context, true). }
false;public;0;5;;// SPR-16275 @Test public void dotSeparatorWithBrokerDotConvention() {     ApplicationContext context = loadConfig(DotSeparatorWithDotBrokerConventionConfig.class).     testDotSeparator(context, false). }
false;private;2;49;;private void testDotSeparator(ApplicationContext context, boolean expectLeadingSlash) {     MessageChannel inChannel = context.getBean("clientInboundChannel", MessageChannel.class).     TestChannel outChannel = context.getBean("clientOutboundChannel", TestChannel.class).     MessageChannel brokerChannel = context.getBean("brokerChannel", MessageChannel.class).     inChannel.send(createConnectMessage("sess1", new long[] { 0, 0 })).     // 1. Subscribe to user destination     StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.SUBSCRIBE).     headers.setSessionId("sess1").     headers.setSubscriptionId("subs1").     headers.setDestination("/user/queue.q1").     Message<?> message = MessageBuilder.createMessage(new byte[0], headers.getMessageHeaders()).     inChannel.send(message).     // 2. Send message to user via inboundChannel     headers = StompHeaderAccessor.create(StompCommand.SEND).     headers.setSessionId("sess1").     headers.setDestination("/user/sess1/queue.q1").     message = MessageBuilder.createMessage("123".getBytes(), headers.getMessageHeaders()).     inChannel.send(message).     assertEquals(2, outChannel.messages.size()).     Message<?> outputMessage = outChannel.messages.remove(1).     headers = StompHeaderAccessor.wrap(outputMessage).     assertEquals(SimpMessageType.MESSAGE, headers.getMessageType()).     assertEquals(expectLeadingSlash ? "/queue.q1-usersess1" : "queue.q1-usersess1", headers.getDestination()).     assertEquals("123", new String((byte[]) outputMessage.getPayload())).     outChannel.messages.clear().     // 3. Send message via broker channel     SimpMessagingTemplate template = new SimpMessagingTemplate(brokerChannel).     SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create().     accessor.setSessionId("sess1").     template.convertAndSendToUser("sess1", "queue.q1", "456".getBytes(), accessor.getMessageHeaders()).     assertEquals(1, outChannel.messages.size()).     outputMessage = outChannel.messages.remove(0).     headers = StompHeaderAccessor.wrap(outputMessage).     assertEquals(SimpMessageType.MESSAGE, headers.getMessageType()).     assertEquals(expectLeadingSlash ? "/queue.q1-usersess1" : "queue.q1-usersess1", headers.getDestination()).     assertEquals("456", new String((byte[]) outputMessage.getPayload())). }
false;private;1;3;;private AnnotationConfigApplicationContext loadConfig(Class<?> configClass) {     return new AnnotationConfigApplicationContext(configClass). }
false;private;2;6;;private Message<String> createConnectMessage(String sessionId, long[] heartbeat) {     SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create(SimpMessageType.CONNECT).     accessor.setSessionId(sessionId).     accessor.setHeader(SimpMessageHeaderAccessor.HEART_BEAT_HEADER, heartbeat).     return MessageBuilder.createMessage("", accessor.getMessageHeaders()). }
false;public;0;4;;@SubscribeMapping("/foo") public String handleSubscribe() {     return "bar". }
false;public;0;5;;@MessageMapping("/foo") @SendTo("/bar") public String handleMessage() {     return "bar". }
false;protected;1;8;;@Override protected SimpUserRegistry createLocalUserRegistry(@Nullable Integer order) {     TestUserRegistry registry = new TestUserRegistry().     if (order != null) {         registry.setOrder(order).     }     return registry. }
false;public;0;4;;@Bean public TestController subscriptionController() {     return new TestController(). }
false;public;0;5;;@Override @Bean public AbstractSubscribableChannel clientInboundChannel() {     return new TestChannel(). }
false;public;0;5;;@Override @Bean public AbstractSubscribableChannel clientOutboundChannel() {     return new TestChannel(). }
false;public;0;5;;@Override @Bean public AbstractSubscribableChannel brokerChannel() {     return new TestChannel(). }
false;public;1;6;;@Override public void configureMessageBroker(MessageBrokerRegistry registry) {     registry.enableStompBrokerRelay("/topic", "/queue").setAutoStartup(true).setUserDestinationBroadcast("/topic/unresolved-user-destination").setUserRegistryBroadcast("/topic/simp-user-registry"). }
false;protected;1;6;;@Override protected void configureClientInboundChannel(ChannelRegistration registration) {     registration.interceptors(this.interceptor).     registration.taskExecutor(new CustomThreadPoolTaskExecutor()).corePoolSize(11).maxPoolSize(12).keepAliveSeconds(13).queueCapacity(14). }
false;protected;1;5;;@Override protected void configureClientOutboundChannel(ChannelRegistration registration) {     registration.interceptors(this.interceptor, this.interceptor).     registration.taskExecutor().corePoolSize(21).maxPoolSize(22).keepAliveSeconds(23).queueCapacity(24). }
false;protected;1;4;;@Override protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {     argumentResolvers.add(mock(HandlerMethodArgumentResolver.class)). }
false;protected;1;4;;@Override protected void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {     returnValueHandlers.add(mock(HandlerMethodReturnValueHandler.class)). }
false;protected;1;10;;@Override protected void configureMessageBroker(MessageBrokerRegistry registry) {     registry.configureBrokerChannel().interceptors(this.interceptor, this.interceptor, this.interceptor).     registry.configureBrokerChannel().taskExecutor().corePoolSize(31).maxPoolSize(32).keepAliveSeconds(33).queueCapacity(34).     registry.setPathMatcher(new AntPathMatcher(".")).enableSimpleBroker("/topic", "/queue").     registry.setCacheLimit(8192).     registry.setPreservePublishOrder(true).     registry.setUserRegistryOrder(99). }
false;protected;1;4;;@Override protected void configureMessageBroker(MessageBrokerRegistry registry) {     registry.setPathMatcher(new AntPathMatcher(".")). }
false;public;0;6;;@Override @Bean public AbstractSubscribableChannel clientInboundChannel() {     // synchronous     return new ExecutorSubscribableChannel(null). }
false;public;0;5;;@Override @Bean public AbstractSubscribableChannel clientOutboundChannel() {     return new TestChannel(). }
false;public;0;6;;@Override @Bean public AbstractSubscribableChannel brokerChannel() {     // synchronous     return new ExecutorSubscribableChannel(null). }
false;protected;1;5;;// RabbitMQ-style broker convention for STOMP destinations @Override protected void configureMessageBroker(MessageBrokerRegistry registry) {     super.configureMessageBroker(registry).     registry.enableSimpleBroker("/topic", "/queue"). }
false;protected;1;5;;// Artemis-style broker convention for STOMP destinations @Override protected void configureMessageBroker(MessageBrokerRegistry registry) {     super.configureMessageBroker(registry).     registry.enableSimpleBroker("topic.", "queue."). }
false;public;2;5;;@Override public boolean sendInternal(Message<?> message, long timeout) {     this.messages.add(message).     return true. }
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
false;public;1;2;;@Override public SimpUser getUser(String userName) {     return null. }
false;public;0;2;;@Override public Set<SimpUser> getUsers() {     return null. }
false;public;0;2;;@Override public int getUserCount() {     return 0. }
false;public;1;2;;@Override public Set<SimpSubscription> findSubscriptions(SimpSubscriptionMatcher matcher) {     return null. }
false;public;1;4;;@Override public boolean supports(Class<?> clazz) {     return false. }
false;public;2;3;;@Override public void validate(@Nullable Object target, Errors errors) { }
