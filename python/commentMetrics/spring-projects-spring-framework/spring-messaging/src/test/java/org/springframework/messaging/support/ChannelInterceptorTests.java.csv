commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     this.channel = new ExecutorSubscribableChannel().     this.messageHandler = new TestMessageHandler().     this.channel.subscribe(this.messageHandler). }
false;public;0;15;;@Test public void preSendInterceptorReturningModifiedMessage() {     Message<?> expected = mock(Message.class).     PreSendInterceptor interceptor = new PreSendInterceptor().     interceptor.setMessageToReturn(expected).     this.channel.addInterceptor(interceptor).     this.channel.send(MessageBuilder.withPayload("test").build()).     assertEquals(1, this.messageHandler.getMessages().size()).     Message<?> result = this.messageHandler.getMessages().get(0).     assertNotNull(result).     assertSame(expected, result).     assertTrue(interceptor.wasAfterCompletionInvoked()). }
false;public;0;15;;@Test public void preSendInterceptorReturningNull() {     PreSendInterceptor interceptor1 = new PreSendInterceptor().     NullReturningPreSendInterceptor interceptor2 = new NullReturningPreSendInterceptor().     this.channel.addInterceptor(interceptor1).     this.channel.addInterceptor(interceptor2).     Message<?> message = MessageBuilder.withPayload("test").build().     this.channel.send(message).     assertEquals(1, interceptor1.getCounter().get()).     assertEquals(1, interceptor2.getCounter().get()).     assertEquals(0, this.messageHandler.getMessages().size()).     assertTrue(interceptor1.wasAfterCompletionInvoked()).     assertFalse(interceptor2.wasAfterCompletionInvoked()). }
false;public;3;5;;@Override public void postSend(Message<?> message, MessageChannel channel, boolean sent) {     assertInput(message, channel, sent).     preSendInvoked.set(true). }
false;public;4;5;;@Override public void afterSendCompletion(Message<?> message, MessageChannel channel, boolean sent, Exception ex) {     assertInput(message, channel, sent).     completionInvoked.set(true). }
false;private;3;6;;private void assertInput(Message<?> message, MessageChannel channel, boolean sent) {     assertNotNull(message).     assertNotNull(channel).     assertSame(ChannelInterceptorTests.this.channel, channel).     assertTrue(sent). }
false;public;0;26;;@Test public void postSendInterceptorMessageWasSent() {     final AtomicBoolean preSendInvoked = new AtomicBoolean(false).     final AtomicBoolean completionInvoked = new AtomicBoolean(false).     this.channel.addInterceptor(new ChannelInterceptor() {          @Override         public void postSend(Message<?> message, MessageChannel channel, boolean sent) {             assertInput(message, channel, sent).             preSendInvoked.set(true).         }          @Override         public void afterSendCompletion(Message<?> message, MessageChannel channel, boolean sent, Exception ex) {             assertInput(message, channel, sent).             completionInvoked.set(true).         }          private void assertInput(Message<?> message, MessageChannel channel, boolean sent) {             assertNotNull(message).             assertNotNull(channel).             assertSame(ChannelInterceptorTests.this.channel, channel).             assertTrue(sent).         }     }).     this.channel.send(MessageBuilder.withPayload("test").build()).     assertTrue(preSendInvoked.get()).     assertTrue(completionInvoked.get()). }
false;protected;2;4;;@Override protected boolean sendInternal(Message<?> message, long timeout) {     return false. }
false;public;3;5;;@Override public void postSend(Message<?> message, MessageChannel channel, boolean sent) {     assertInput(message, channel, sent).     preSendInvoked.set(true). }
false;public;4;5;;@Override public void afterSendCompletion(Message<?> message, MessageChannel channel, boolean sent, Exception ex) {     assertInput(message, channel, sent).     completionInvoked.set(true). }
false;private;3;6;;private void assertInput(Message<?> message, MessageChannel channel, boolean sent) {     assertNotNull(message).     assertNotNull(channel).     assertSame(testChannel, channel).     assertFalse(sent). }
false;public;0;32;;@Test public void postSendInterceptorMessageWasNotSent() {     final AbstractMessageChannel testChannel = new AbstractMessageChannel() {          @Override         protected boolean sendInternal(Message<?> message, long timeout) {             return false.         }     }.     final AtomicBoolean preSendInvoked = new AtomicBoolean(false).     final AtomicBoolean completionInvoked = new AtomicBoolean(false).     testChannel.addInterceptor(new ChannelInterceptor() {          @Override         public void postSend(Message<?> message, MessageChannel channel, boolean sent) {             assertInput(message, channel, sent).             preSendInvoked.set(true).         }          @Override         public void afterSendCompletion(Message<?> message, MessageChannel channel, boolean sent, Exception ex) {             assertInput(message, channel, sent).             completionInvoked.set(true).         }          private void assertInput(Message<?> message, MessageChannel channel, boolean sent) {             assertNotNull(message).             assertNotNull(channel).             assertSame(testChannel, channel).             assertFalse(sent).         }     }).     testChannel.send(MessageBuilder.withPayload("test").build()).     assertTrue(preSendInvoked.get()).     assertTrue(completionInvoked.get()). }
false;protected;2;4;;@Override protected boolean sendInternal(Message<?> message, long timeout) {     throw new RuntimeException("Simulated exception"). }
false;public;0;21;;@Test public void afterCompletionWithSendException() {     final AbstractMessageChannel testChannel = new AbstractMessageChannel() {          @Override         protected boolean sendInternal(Message<?> message, long timeout) {             throw new RuntimeException("Simulated exception").         }     }.     PreSendInterceptor interceptor1 = new PreSendInterceptor().     PreSendInterceptor interceptor2 = new PreSendInterceptor().     testChannel.addInterceptor(interceptor1).     testChannel.addInterceptor(interceptor2).     try {         testChannel.send(MessageBuilder.withPayload("test").build()).     } catch (Exception ex) {         assertEquals("Simulated exception", ex.getCause().getMessage()).     }     assertTrue(interceptor1.wasAfterCompletionInvoked()).     assertTrue(interceptor2.wasAfterCompletionInvoked()). }
false;public;0;16;;@Test public void afterCompletionWithPreSendException() {     PreSendInterceptor interceptor1 = new PreSendInterceptor().     PreSendInterceptor interceptor2 = new PreSendInterceptor().     interceptor2.setExceptionToRaise(new RuntimeException("Simulated exception")).     this.channel.addInterceptor(interceptor1).     this.channel.addInterceptor(interceptor2).     try {         this.channel.send(MessageBuilder.withPayload("test").build()).     } catch (Exception ex) {         assertEquals("Simulated exception", ex.getCause().getMessage()).     }     assertTrue(interceptor1.wasAfterCompletionInvoked()).     assertFalse(interceptor2.wasAfterCompletionInvoked()). }
false;public;0;3;;public List<Message<?>> getMessages() {     return this.messages. }
false;public;1;4;;@Override public void handleMessage(Message<?> message) throws MessagingException {     this.messages.add(message). }
false;public;0;3;;public AtomicInteger getCounter() {     return this.counter. }
false;public;0;3;;public boolean wasAfterCompletionInvoked() {     return this.afterCompletionInvoked. }
false;public;2;6;;@Override public Message<?> preSend(Message<?> message, MessageChannel channel) {     assertNotNull(message).     counter.incrementAndGet().     return message. }
false;public;4;4;;@Override public void afterSendCompletion(Message<?> message, MessageChannel channel, boolean sent, Exception ex) {     this.afterCompletionInvoked = true. }
false;public;1;3;;public void setMessageToReturn(Message<?> messageToReturn) {     this.messageToReturn = messageToReturn. }
false;public;1;3;;public void setExceptionToRaise(RuntimeException exception) {     this.exceptionToRaise = exception. }
false;public;2;8;;@Override public Message<?> preSend(Message<?> message, MessageChannel channel) {     super.preSend(message, channel).     if (this.exceptionToRaise != null) {         throw this.exceptionToRaise.     }     return (this.messageToReturn != null ? this.messageToReturn : message). }
false;public;2;5;;@Override public Message<?> preSend(Message<?> message, MessageChannel channel) {     super.preSend(message, channel).     return null. }
