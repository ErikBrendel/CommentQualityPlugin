commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Before public void setup() {     TestMessageChannelDestinationResolver resolver = new TestMessageChannelDestinationResolver().     this.myChannel = new ExecutorSubscribableChannel().     resolver.registerMessageChannel("myChannel", this.myChannel).     this.template = new TestDestinationResolvingMessagingTemplate().     this.template.setDestinationResolver(resolver).     this.headers = Collections.<String, Object>singletonMap("key", "value").     this.postProcessor = new TestMessagePostProcessor(). }
false;public;0;8;;@Test public void send() {     Message<?> message = new GenericMessage<Object>("payload").     this.template.send("myChannel", message).     assertSame(this.myChannel, this.template.messageChannel).     assertSame(message, this.template.message). }
false;public;0;5;;@Test(expected = IllegalStateException.class) public void sendNoDestinationResolver() {     TestDestinationResolvingMessagingTemplate template = new TestDestinationResolvingMessagingTemplate().     template.send("myChannel", new GenericMessage<Object>("payload")). }
false;public;0;8;;@Test public void convertAndSendPayload() {     this.template.convertAndSend("myChannel", "payload").     assertSame(this.myChannel, this.template.messageChannel).     assertNotNull(this.template.message).     assertSame("payload", this.template.message.getPayload()). }
false;public;0;9;;@Test public void convertAndSendPayloadAndHeaders() {     this.template.convertAndSend("myChannel", "payload", this.headers).     assertSame(this.myChannel, this.template.messageChannel).     assertNotNull(this.template.message).     assertEquals("value", this.template.message.getHeaders().get("key")).     assertEquals("payload", this.template.message.getPayload()). }
false;public;0;11;;@Test public void convertAndSendPayloadWithPostProcessor() {     this.template.convertAndSend("myChannel", "payload", this.postProcessor).     assertSame(this.myChannel, this.template.messageChannel).     assertNotNull(this.template.message).     assertEquals("payload", this.template.message.getPayload()).     assertNotNull(this.postProcessor.getMessage()).     assertSame(this.postProcessor.getMessage(), this.template.message). }
false;public;0;12;;@Test public void convertAndSendPayloadAndHeadersWithPostProcessor() {     this.template.convertAndSend("myChannel", "payload", this.headers, this.postProcessor).     assertSame(this.myChannel, this.template.messageChannel).     assertNotNull(this.template.message).     assertEquals("value", this.template.message.getHeaders().get("key")).     assertEquals("payload", this.template.message.getPayload()).     assertNotNull(this.postProcessor.getMessage()).     assertSame(this.postProcessor.getMessage(), this.template.message). }
false;public;0;9;;@Test public void receive() {     Message<?> expected = new GenericMessage<Object>("payload").     this.template.setReceiveMessage(expected).     Message<?> actual = this.template.receive("myChannel").     assertSame(expected, actual).     assertSame(this.myChannel, this.template.messageChannel). }
false;public;0;9;;@Test public void receiveAndConvert() {     Message<?> expected = new GenericMessage<Object>("payload").     this.template.setReceiveMessage(expected).     String payload = this.template.receiveAndConvert("myChannel", String.class).     assertEquals("payload", payload).     assertSame(this.myChannel, this.template.messageChannel). }
false;public;0;11;;@Test public void sendAndReceive() {     Message<?> requestMessage = new GenericMessage<Object>("request").     Message<?> responseMessage = new GenericMessage<Object>("response").     this.template.setReceiveMessage(responseMessage).     Message<?> actual = this.template.sendAndReceive("myChannel", requestMessage).     assertEquals(requestMessage, this.template.message).     assertSame(responseMessage, actual).     assertSame(this.myChannel, this.template.messageChannel). }
false;public;0;10;;@Test public void convertSendAndReceive() {     Message<?> responseMessage = new GenericMessage<Object>("response").     this.template.setReceiveMessage(responseMessage).     String actual = this.template.convertSendAndReceive("myChannel", "request", String.class).     assertEquals("request", this.template.message.getPayload()).     assertSame("response", actual).     assertSame(this.myChannel, this.template.messageChannel). }
false;public;0;11;;@Test public void convertSendAndReceiveWithHeaders() {     Message<?> responseMessage = new GenericMessage<Object>("response").     this.template.setReceiveMessage(responseMessage).     String actual = this.template.convertSendAndReceive("myChannel", "request", this.headers, String.class).     assertEquals("value", this.template.message.getHeaders().get("key")).     assertEquals("request", this.template.message.getPayload()).     assertSame("response", actual).     assertSame(this.myChannel, this.template.messageChannel). }
false;public;0;11;;@Test public void convertSendAndReceiveWithPostProcessor() {     Message<?> responseMessage = new GenericMessage<Object>("response").     this.template.setReceiveMessage(responseMessage).     String actual = this.template.convertSendAndReceive("myChannel", "request", String.class, this.postProcessor).     assertEquals("request", this.template.message.getPayload()).     assertSame("request", this.postProcessor.getMessage().getPayload()).     assertSame("response", actual).     assertSame(this.myChannel, this.template.messageChannel). }
false;public;0;13;;@Test public void convertSendAndReceiveWithHeadersAndPostProcessor() {     Message<?> responseMessage = new GenericMessage<Object>("response").     this.template.setReceiveMessage(responseMessage).     String actual = this.template.convertSendAndReceive("myChannel", "request", this.headers, String.class, this.postProcessor).     assertEquals("value", this.template.message.getHeaders().get("key")).     assertEquals("request", this.template.message.getPayload()).     assertSame("request", this.postProcessor.getMessage().getPayload()).     assertSame("response", actual).     assertSame(this.myChannel, this.template.messageChannel). }
false;private;1;3;;private void setReceiveMessage(Message<?> receiveMessage) {     this.receiveMessage = receiveMessage. }
false;protected;2;5;;@Override protected void doSend(MessageChannel channel, Message<?> message) {     this.messageChannel = channel.     this.message = message. }
false;protected;1;5;;@Override protected Message<?> doReceive(MessageChannel channel) {     this.messageChannel = channel.     return this.receiveMessage. }
false;protected;2;6;;@Override protected Message<?> doSendAndReceive(MessageChannel channel, Message<?> requestMessage) {     this.message = requestMessage.     this.messageChannel = channel.     return this.receiveMessage. }
false;public;2;3;;public void registerMessageChannel(String name, MessageChannel channel) {     this.channels.put(name, channel). }
false;public;1;4;;@Override public MessageChannel resolveDestination(String name) throws DestinationResolutionException {     return this.channels.get(name). }
