commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.resolver = new DefaultContentTypeResolver(). }
false;public;0;8;;@Test public void resolve() {     Map<String, Object> map = new HashMap<>().     map.put(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.APPLICATION_JSON).     MessageHeaders headers = new MessageHeaders(map).     assertEquals(MimeTypeUtils.APPLICATION_JSON, this.resolver.resolve(headers)). }
false;public;0;8;;@Test public void resolveStringContentType() {     Map<String, Object> map = new HashMap<>().     map.put(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.APPLICATION_JSON_VALUE).     MessageHeaders headers = new MessageHeaders(map).     assertEquals(MimeTypeUtils.APPLICATION_JSON, this.resolver.resolve(headers)). }
false;public;0;7;;@Test(expected = InvalidMimeTypeException.class) public void resolveInvalidStringContentType() {     Map<String, Object> map = new HashMap<>().     map.put(MessageHeaders.CONTENT_TYPE, "invalidContentType").     MessageHeaders headers = new MessageHeaders(map).     this.resolver.resolve(headers). }
false;public;0;7;;@Test(expected = IllegalArgumentException.class) public void resolveUnknownHeaderType() {     Map<String, Object> map = new HashMap<>().     map.put(MessageHeaders.CONTENT_TYPE, new Integer(1)).     MessageHeaders headers = new MessageHeaders(map).     this.resolver.resolve(headers). }
false;public;0;6;;@Test public void resolveNoContentTypeHeader() {     MessageHeaders headers = new MessageHeaders(Collections.<String, Object>emptyMap()).     assertNull(this.resolver.resolve(headers)). }
false;public;0;7;;@Test public void resolveDefaultMimeType() {     this.resolver.setDefaultMimeType(MimeTypeUtils.APPLICATION_JSON).     MessageHeaders headers = new MessageHeaders(Collections.<String, Object>emptyMap()).     assertEquals(MimeTypeUtils.APPLICATION_JSON, this.resolver.resolve(headers)). }
