commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void resolveMethodFromAnnotation() {     IOException exception = new IOException().     assertEquals("handleIOException", this.resolver.resolveMethod(exception).getName()). }
false;public;0;5;;@Test public void resolveMethodFromArgument() {     IllegalArgumentException exception = new IllegalArgumentException().     assertEquals("handleIllegalArgumentException", this.resolver.resolveMethod(exception).getName()). }
false;public;0;5;;@Test public void resolveMethodFromArgumentWithErrorType() {     AssertionError exception = new AssertionError().     assertEquals("handleAssertionError", this.resolver.resolveMethod(new IllegalStateException(exception)).getName()). }
false;public;0;7;;@Test public void resolveMethodExceptionSubType() {     IOException ioException = new FileNotFoundException().     assertEquals("handleIOException", this.resolver.resolveMethod(ioException).getName()).     SocketException bindException = new BindException().     assertEquals("handleSocketException", this.resolver.resolveMethod(bindException).getName()). }
false;public;0;5;;@Test public void resolveMethodBestMatch() {     SocketException exception = new SocketException().     assertEquals("handleSocketException", this.resolver.resolveMethod(exception).getName()). }
false;public;0;6;;@Test public void resolveMethodNoMatch() {     Exception exception = new Exception().     assertNull("1st lookup", this.resolver.resolveMethod(exception)).     assertNull("2nd lookup from cache", this.resolver.resolveMethod(exception)). }
false;public;0;5;;@Test public void resolveMethodInherited() {     IOException exception = new IOException().     assertEquals("handleIOException", this.resolver.resolveMethod(exception).getName()). }
false;public;0;5;;@Test public void resolveMethodAgainstCause() {     IllegalStateException exception = new IllegalStateException(new IOException()).     assertEquals("handleIOException", this.resolver.resolveMethod(exception).getName()). }
false;public;0;4;;@Test(expected = IllegalStateException.class) public void ambiguousExceptionMapping() {     new AnnotationExceptionHandlerMethodResolver(AmbiguousController.class). }
false;public;0;4;;@Test(expected = IllegalStateException.class) public void noExceptionMapping() {     new AnnotationExceptionHandlerMethodResolver(NoExceptionController.class). }
false;public;0;1;;public void handle() { }
false;public;0;3;;@MessageExceptionHandler(IOException.class) public void handleIOException() { }
false;public;0;3;;@MessageExceptionHandler(SocketException.class) public void handleSocketException() { }
false;public;1;3;;@MessageExceptionHandler public void handleIllegalArgumentException(IllegalArgumentException exception) { }
false;public;1;3;;@MessageExceptionHandler public void handleAssertionError(AssertionError exception) { }
false;public;0;3;;@Override public void handleIOException() { }
false;public;0;1;;public void handle() { }
false;public;1;4;;@MessageExceptionHandler({ BindException.class, IllegalArgumentException.class }) public String handle1(Exception ex) throws IOException {     return ClassUtils.getShortName(ex.getClass()). }
false;public;1;4;;@MessageExceptionHandler public String handle2(IllegalArgumentException ex) {     return ClassUtils.getShortName(ex.getClass()). }
false;public;0;3;;@MessageExceptionHandler public void handle() { }
