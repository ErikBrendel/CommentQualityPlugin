commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void decodeFrameWithCrLfEols() {     Message<byte[]> frame = decode("DISCONNECT\r\n\r\n\0").     StompHeaderAccessor headers = StompHeaderAccessor.wrap(frame).     assertEquals(StompCommand.DISCONNECT, headers.getCommand()).     assertEquals(0, headers.toNativeHeaderMap().size()).     assertEquals(0, frame.getPayload().length). }
false;public;0;9;;@Test public void decodeFrameWithNoHeadersAndNoBody() {     Message<byte[]> frame = decode("DISCONNECT\n\n\0").     StompHeaderAccessor headers = StompHeaderAccessor.wrap(frame).     assertEquals(StompCommand.DISCONNECT, headers.getCommand()).     assertEquals(0, headers.toNativeHeaderMap().size()).     assertEquals(0, frame.getPayload().length). }
false;public;0;16;;@Test public void decodeFrameWithNoBody() {     String accept = "accept-version:1.1\n".     String host = "host:github.org\n".     Message<byte[]> frame = decode("CONNECT\n" + accept + host + "\n\0").     StompHeaderAccessor headers = StompHeaderAccessor.wrap(frame).     assertEquals(StompCommand.CONNECT, headers.getCommand()).     assertEquals(2, headers.toNativeHeaderMap().size()).     assertEquals("1.1", headers.getFirstNativeHeader("accept-version")).     assertEquals("github.org", headers.getHost()).     assertEquals(0, frame.getPayload().length). }
false;public;0;13;;@Test public void decodeFrame() throws UnsupportedEncodingException {     Message<byte[]> frame = decode("SEND\ndestination:test\n\nThe body of the message\0").     StompHeaderAccessor headers = StompHeaderAccessor.wrap(frame).     assertEquals(StompCommand.SEND, headers.getCommand()).     assertEquals(headers.toNativeHeaderMap().toString(), 1, headers.toNativeHeaderMap().size()).     assertEquals("test", headers.getDestination()).     String bodyText = new String(frame.getPayload()).     assertEquals("The body of the message", bodyText). }
false;public;0;13;;@Test public void decodeFrameWithContentLength() {     Message<byte[]> message = decode("SEND\ncontent-length:23\n\nThe body of the message\0").     StompHeaderAccessor headers = StompHeaderAccessor.wrap(message).     assertEquals(StompCommand.SEND, headers.getCommand()).     assertEquals(1, headers.toNativeHeaderMap().size()).     assertEquals(Integer.valueOf(23), headers.getContentLength()).     String bodyText = new String(message.getPayload()).     assertEquals("The body of the message", bodyText). }
false;public;0;13;;// SPR-11528 @Test public void decodeFrameWithInvalidContentLength() {     Message<byte[]> message = decode("SEND\ncontent-length:-1\n\nThe body of the message\0").     StompHeaderAccessor headers = StompHeaderAccessor.wrap(message).     assertEquals(StompCommand.SEND, headers.getCommand()).     assertEquals(1, headers.toNativeHeaderMap().size()).     assertEquals(Integer.valueOf(-1), headers.getContentLength()).     String bodyText = new String(message.getPayload()).     assertEquals("The body of the message", bodyText). }
false;public;0;13;;@Test public void decodeFrameWithContentLengthZero() {     Message<byte[]> frame = decode("SEND\ncontent-length:0\n\n\0").     StompHeaderAccessor headers = StompHeaderAccessor.wrap(frame).     assertEquals(StompCommand.SEND, headers.getCommand()).     assertEquals(1, headers.toNativeHeaderMap().size()).     assertEquals(Integer.valueOf(0), headers.getContentLength()).     String bodyText = new String(frame.getPayload()).     assertEquals("", bodyText). }
false;public;0;13;;@Test public void decodeFrameWithNullOctectsInTheBody() {     Message<byte[]> frame = decode("SEND\ncontent-length:23\n\nThe b\0dy \0f the message\0").     StompHeaderAccessor headers = StompHeaderAccessor.wrap(frame).     assertEquals(StompCommand.SEND, headers.getCommand()).     assertEquals(1, headers.toNativeHeaderMap().size()).     assertEquals(Integer.valueOf(23), headers.getContentLength()).     String bodyText = new String(frame.getPayload()).     assertEquals("The b\0dy \0f the message", bodyText). }
false;public;0;10;;@Test public void decodeFrameWithEscapedHeaders() {     Message<byte[]> frame = decode("DISCONNECT\na\\c\\r\\n\\\\b:alpha\\cbravo\\r\\n\\\\\n\n\0").     StompHeaderAccessor headers = StompHeaderAccessor.wrap(frame).     assertEquals(StompCommand.DISCONNECT, headers.getCommand()).     assertEquals(1, headers.toNativeHeaderMap().size()).     assertEquals("alpha:bravo\r\n\\", headers.getFirstNativeHeader("a:\r\n\\b")). }
false;public;0;4;;@Test(expected = StompConversionException.class) public void decodeFrameBodyNotAllowed() {     decode("CONNECT\naccept-version:1.2\n\nThe body of the message\0"). }
false;public;0;12;;@Test public void decodeMultipleFramesFromSameBuffer() {     String frame1 = "SEND\ndestination:test\n\nThe body of the message\0".     String frame2 = "DISCONNECT\n\n\0".     ByteBuffer buffer = ByteBuffer.wrap((frame1 + frame2).getBytes()).     final List<Message<byte[]>> messages = decoder.decode(buffer).     assertEquals(2, messages.size()).     assertEquals(StompCommand.SEND, StompHeaderAccessor.wrap(messages.get(0)).getCommand()).     assertEquals(StompCommand.DISCONNECT, StompHeaderAccessor.wrap(messages.get(1)).getCommand()). }
false;public;0;16;;// SPR-13111 @Test public void decodeFrameWithHeaderWithEmptyValue() {     String accept = "accept-version:1.1\n".     String valuelessKey = "key:\n".     Message<byte[]> frame = decode("CONNECT\n" + accept + valuelessKey + "\n\0").     StompHeaderAccessor headers = StompHeaderAccessor.wrap(frame).     assertEquals(StompCommand.CONNECT, headers.getCommand()).     assertEquals(2, headers.toNativeHeaderMap().size()).     assertEquals("1.1", headers.getFirstNativeHeader("accept-version")).     assertEquals("", headers.getFirstNativeHeader("key")).     assertEquals(0, frame.getPayload().length). }
false;public;0;4;;@Test public void decodeFrameWithIncompleteCommand() {     assertIncompleteDecode("MESSAG"). }
false;public;0;6;;@Test public void decodeFrameWithIncompleteHeader() {     assertIncompleteDecode("SEND\ndestination").     assertIncompleteDecode("SEND\ndestination:").     assertIncompleteDecode("SEND\ndestination:test"). }
false;public;0;6;;@Test public void decodeFrameWithoutNullOctetTerminator() {     assertIncompleteDecode("SEND\ndestination:test\n").     assertIncompleteDecode("SEND\ndestination:test\n\n").     assertIncompleteDecode("SEND\ndestination:test\n\nThe body"). }
false;public;0;4;;@Test public void decodeFrameWithInsufficientContent() {     assertIncompleteDecode("SEND\ncontent-length:23\n\nThe body of the mess"). }
false;public;0;4;;@Test public void decodeFrameWithIncompleteContentType() {     assertIncompleteDecode("SEND\ncontent-type:text/plain.charset=U"). }
false;public;0;4;;@Test(expected = InvalidMimeTypeException.class) public void decodeFrameWithInvalidContentType() {     assertIncompleteDecode("SEND\ncontent-type:text/plain.charset=U\n\nThe body\0"). }
false;public;0;4;;@Test(expected = StompConversionException.class) public void decodeFrameWithIncorrectTerminator() {     decode("SEND\ncontent-length:23\n\nThe body of the message*"). }
false;public;0;11;;@Test public void decodeHeartbeat() {     String frame = "\n".     ByteBuffer buffer = ByteBuffer.wrap(frame.getBytes()).     final List<Message<byte[]>> messages = decoder.decode(buffer).     assertEquals(1, messages.size()).     assertEquals(SimpMessageType.HEARTBEAT, StompHeaderAccessor.wrap(messages.get(0)).getMessageType()). }
false;private;1;5;;private void assertIncompleteDecode(String partialFrame) {     ByteBuffer buffer = ByteBuffer.wrap(partialFrame.getBytes()).     assertNull(decode(buffer)).     assertEquals(0, buffer.position()). }
false;private;1;4;;private Message<byte[]> decode(String stompFrame) {     ByteBuffer buffer = ByteBuffer.wrap(stompFrame.getBytes()).     return decode(buffer). }
false;private;1;9;;private Message<byte[]> decode(ByteBuffer buffer) {     List<Message<byte[]>> messages = this.decoder.decode(buffer).     if (messages.isEmpty()) {         return null.     } else {         return messages.get(0).     } }
