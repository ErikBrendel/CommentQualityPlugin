commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     SimpMessagingTemplate brokerTemplate = new SimpMessagingTemplate(this.channel).     brokerTemplate.setMessageConverter(this.converter).     this.messageHandler = new TestSimpAnnotationMethodMessageHandler(brokerTemplate, this.channel, this.channel).     this.messageHandler.setApplicationContext(new StaticApplicationContext()).     this.messageHandler.setValidator(new StringTestValidator(TEST_INVALID_VALUE)).     this.messageHandler.afterPropertiesSet().     this.testController = new TestController(). }
false;public;0;12;;@Test @SuppressWarnings("unchecked") public void headerArgumentResolution() {     Map<String, Object> headers = Collections.singletonMap("foo", "bar").     Message<?> message = createMessage("/pre/headers", headers).     this.messageHandler.registerHandler(this.testController).     this.messageHandler.handleMessage(message).     assertEquals("headers", this.testController.method).     assertEquals("bar", this.testController.arguments.get("foo")).     assertEquals("bar", ((Map<String, Object>) this.testController.arguments.get("headers")).get("foo")). }
false;public;0;11;;@Test public void optionalHeaderArgumentResolutionWhenPresent() {     Map<String, Object> headers = Collections.singletonMap("foo", "bar").     Message<?> message = createMessage("/pre/optionalHeaders", headers).     this.messageHandler.registerHandler(this.testController).     this.messageHandler.handleMessage(message).     assertEquals("optionalHeaders", this.testController.method).     assertEquals("bar", this.testController.arguments.get("foo1")).     assertEquals("bar", this.testController.arguments.get("foo2")). }
false;public;0;10;;@Test public void optionalHeaderArgumentResolutionWhenNotPresent() {     Message<?> message = createMessage("/pre/optionalHeaders").     this.messageHandler.registerHandler(this.testController).     this.messageHandler.handleMessage(message).     assertEquals("optionalHeaders", this.testController.method).     assertNull(this.testController.arguments.get("foo1")).     assertNull(this.testController.arguments.get("foo2")). }
false;public;0;10;;@Test public void messageMappingDestinationVariableResolution() {     Message<?> message = createMessage("/pre/message/bar/value").     this.messageHandler.registerHandler(this.testController).     this.messageHandler.handleMessage(message).     assertEquals("messageMappingDestinationVariable", this.testController.method).     assertEquals("bar", this.testController.arguments.get("foo")).     assertEquals("value", this.testController.arguments.get("name")). }
false;public;0;10;;@Test public void subscribeEventDestinationVariableResolution() {     Message<?> message = createMessage(SimpMessageType.SUBSCRIBE, "/pre/sub/bar/value", null).     this.messageHandler.registerHandler(this.testController).     this.messageHandler.handleMessage(message).     assertEquals("subscribeEventDestinationVariable", this.testController.method).     assertEquals("bar", this.testController.arguments.get("foo")).     assertEquals("value", this.testController.arguments.get("name")). }
false;public;0;10;;@Test public void simpleBinding() {     Message<?> message = createMessage("/pre/binding/id/12").     this.messageHandler.registerHandler(this.testController).     this.messageHandler.handleMessage(message).     assertEquals("simpleBinding", this.testController.method).     assertTrue("should be bound to type long", this.testController.arguments.get("id") instanceof Long).     assertEquals(12L, this.testController.arguments.get("id")). }
false;public;0;8;;@Test public void validationError() {     Message<?> message = createMessage("/pre/validation/payload").     this.messageHandler.registerHandler(this.testController).     this.messageHandler.handleMessage(message).     assertEquals("handleValidationException", this.testController.method). }
false;public;0;11;;@Test public void exceptionWithHandlerMethodArg() {     Message<?> message = createMessage("/pre/illegalState").     this.messageHandler.registerHandler(this.testController).     this.messageHandler.handleMessage(message).     assertEquals("handleExceptionWithHandlerMethodArg", this.testController.method).     HandlerMethod handlerMethod = (HandlerMethod) this.testController.arguments.get("handlerMethod").     assertNotNull(handlerMethod).     assertEquals("illegalState", handlerMethod.getMethod().getName()). }
false;public;0;11;;@Test public void exceptionAsCause() {     Message<?> message = createMessage("/pre/illegalStateCause").     this.messageHandler.registerHandler(this.testController).     this.messageHandler.handleMessage(message).     assertEquals("handleExceptionWithHandlerMethodArg", this.testController.method).     HandlerMethod handlerMethod = (HandlerMethod) this.testController.arguments.get("handlerMethod").     assertNotNull(handlerMethod).     assertEquals("illegalStateCause", handlerMethod.getMethod().getName()). }
false;public;0;11;;@Test public void errorAsMessageHandlingException() {     Message<?> message = createMessage("/pre/error").     this.messageHandler.registerHandler(this.testController).     this.messageHandler.handleMessage(message).     assertEquals("handleErrorWithHandlerMethodArg", this.testController.method).     HandlerMethod handlerMethod = (HandlerMethod) this.testController.arguments.get("handlerMethod").     assertNotNull(handlerMethod).     assertEquals("errorAsThrowable", handlerMethod.getMethod().getName()). }
false;public;0;15;;@Test public void simpScope() {     Map<String, Object> sessionAttributes = new ConcurrentHashMap<>().     sessionAttributes.put("name", "value").     SimpMessageHeaderAccessor headers = SimpMessageHeaderAccessor.create().     headers.setSessionId("session1").     headers.setSessionAttributes(sessionAttributes).     headers.setDestination("/pre/scope").     Message<?> message = MessageBuilder.withPayload(new byte[0]).setHeaders(headers).build().     this.messageHandler.registerHandler(this.testController).     this.messageHandler.handleMessage(message).     assertEquals("scope", this.testController.method). }
false;public;0;19;;@Test public void dotPathSeparator() {     DotPathSeparatorController controller = new DotPathSeparatorController().     this.messageHandler.setPathMatcher(new AntPathMatcher(".")).     this.messageHandler.registerHandler(controller).     this.messageHandler.setDestinationPrefixes(Arrays.asList("/app1", "/app2/")).     Message<?> message = createMessage("/app1/pre.foo").     this.messageHandler.registerHandler(this.testController).     this.messageHandler.handleMessage(message).     assertEquals("handleFoo", controller.method).     message = createMessage("/app2/pre.foo").     this.messageHandler.handleMessage(message).     assertEquals("handleFoo", controller.method). }
false;public;0;19;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void listenableFutureSuccess() {     Message emptyMessage = MessageBuilder.withPayload(new byte[0]).build().     given(this.channel.send(any(Message.class))).willReturn(true).     given(this.converter.toMessage(any(), any(MessageHeaders.class))).willReturn(emptyMessage).     ListenableFutureController controller = new ListenableFutureController().     this.messageHandler.registerHandler(controller).     this.messageHandler.setDestinationPrefixes(Arrays.asList("/app1", "/app2/")).     Message<?> message = createMessage("/app1/listenable-future/success").     this.messageHandler.handleMessage(message).     assertNotNull(controller.future).     controller.future.run().     verify(this.converter).toMessage(this.payloadCaptor.capture(), any(MessageHeaders.class)).     assertEquals("foo", this.payloadCaptor.getValue()). }
false;public;0;17;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void listenableFutureFailure() {     Message emptyMessage = MessageBuilder.withPayload(new byte[0]).build().     given(this.channel.send(any(Message.class))).willReturn(true).     given(this.converter.toMessage(any(), any(MessageHeaders.class))).willReturn(emptyMessage).     ListenableFutureController controller = new ListenableFutureController().     this.messageHandler.registerHandler(controller).     this.messageHandler.setDestinationPrefixes(Arrays.asList("/app1", "/app2/")).     Message<?> message = createMessage("/app1/listenable-future/failure").     this.messageHandler.handleMessage(message).     controller.future.run().     assertTrue(controller.exceptionCaught). }
false;public;0;19;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void completableFutureSuccess() {     Message emptyMessage = MessageBuilder.withPayload(new byte[0]).build().     given(this.channel.send(any(Message.class))).willReturn(true).     given(this.converter.toMessage(any(), any(MessageHeaders.class))).willReturn(emptyMessage).     CompletableFutureController controller = new CompletableFutureController().     this.messageHandler.registerHandler(controller).     this.messageHandler.setDestinationPrefixes(Arrays.asList("/app1", "/app2/")).     Message<?> message = createMessage("/app1/completable-future").     this.messageHandler.handleMessage(message).     assertNotNull(controller.future).     controller.future.complete("foo").     verify(this.converter).toMessage(this.payloadCaptor.capture(), any(MessageHeaders.class)).     assertEquals("foo", this.payloadCaptor.getValue()). }
false;public;0;17;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void completableFutureFailure() {     Message emptyMessage = MessageBuilder.withPayload(new byte[0]).build().     given(this.channel.send(any(Message.class))).willReturn(true).     given(this.converter.toMessage(any(), any(MessageHeaders.class))).willReturn(emptyMessage).     CompletableFutureController controller = new CompletableFutureController().     this.messageHandler.registerHandler(controller).     this.messageHandler.setDestinationPrefixes(Arrays.asList("/app1", "/app2/")).     Message<?> message = createMessage("/app1/completable-future").     this.messageHandler.handleMessage(message).     controller.future.completeExceptionally(new IllegalStateException()).     assertTrue(controller.exceptionCaught). }
false;public;0;19;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void monoSuccess() {     Message emptyMessage = MessageBuilder.withPayload(new byte[0]).build().     given(this.channel.send(any(Message.class))).willReturn(true).     given(this.converter.toMessage(any(), any(MessageHeaders.class))).willReturn(emptyMessage).     ReactiveController controller = new ReactiveController().     this.messageHandler.registerHandler(controller).     this.messageHandler.setDestinationPrefixes(Arrays.asList("/app1", "/app2/")).     Message<?> message = createMessage("/app1/mono").     this.messageHandler.handleMessage(message).     assertNotNull(controller.mono).     controller.mono.onNext("foo").     verify(this.converter).toMessage(this.payloadCaptor.capture(), any(MessageHeaders.class)).     assertEquals("foo", this.payloadCaptor.getValue()). }
false;public;0;17;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void monoFailure() {     Message emptyMessage = MessageBuilder.withPayload(new byte[0]).build().     given(this.channel.send(any(Message.class))).willReturn(true).     given(this.converter.toMessage(any(), any(MessageHeaders.class))).willReturn(emptyMessage).     ReactiveController controller = new ReactiveController().     this.messageHandler.registerHandler(controller).     this.messageHandler.setDestinationPrefixes(Arrays.asList("/app1", "/app2/")).     Message<?> message = createMessage("/app1/mono").     this.messageHandler.handleMessage(message).     controller.mono.onError(new IllegalStateException()).     assertTrue(controller.exceptionCaught). }
false;public;0;19;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void fluxNotHandled() {     Message emptyMessage = MessageBuilder.withPayload(new byte[0]).build().     given(this.channel.send(any(Message.class))).willReturn(true).     given(this.converter.toMessage(any(), any(MessageHeaders.class))).willReturn(emptyMessage).     ReactiveController controller = new ReactiveController().     this.messageHandler.registerHandler(controller).     this.messageHandler.setDestinationPrefixes(Arrays.asList("/app1", "/app2/")).     Message<?> message = createMessage("/app1/flux").     this.messageHandler.handleMessage(message).     assertNotNull(controller.flux).     controller.flux.onNext("foo").     verify(this.converter, never()).toMessage(any(), any(MessageHeaders.class)). }
false;public;0;9;;@Test public void placeholder() throws Exception {     Message<?> message = createMessage("/pre/myValue").     this.messageHandler.setEmbeddedValueResolver(value -> ("/${myProperty}".equals(value) ? "/myValue" : value)).     this.messageHandler.registerHandler(this.testController).     this.messageHandler.handleMessage(message).     assertEquals("placeholder", this.testController.method). }
false;private;1;3;;private Message<?> createMessage(String destination) {     return createMessage(destination, null). }
false;private;2;3;;private Message<?> createMessage(String destination, Map<String, Object> headers) {     return createMessage(SimpMessageType.MESSAGE, destination, headers). }
false;private;3;12;;private Message<?> createMessage(SimpMessageType messageType, String destination, Map<String, Object> headers) {     SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create(messageType).     accessor.setSessionId("session1").     accessor.setSessionAttributes(new HashMap<>()).     accessor.setDestination(destination).     if (headers != null) {         for (Map.Entry<String, Object> entry : headers.entrySet()) {             accessor.setHeader(entry.getKey(), entry.getValue()).         }     }     return MessageBuilder.withPayload(new byte[0]).setHeaders(accessor).build(). }
false;public;1;3;;public void registerHandler(Object handler) {     super.detectHandlerMethods(handler). }
false;public;2;6;;@MessageMapping("/headers") public void headers(@Header String foo, @Headers Map<String, Object> headers) {     this.method = "headers".     this.arguments.put("foo", foo).     this.arguments.put("headers", headers). }
false;public;2;6;;@MessageMapping("/optionalHeaders") public void optionalHeaders(@Header(name = "foo", required = false) String foo1, @Header("foo") Optional<String> foo2) {     this.method = "optionalHeaders".     this.arguments.put("foo1", foo1).     this.arguments.put("foo2", (foo2.isPresent() ? foo2.get() : null)). }
false;public;2;7;;@MessageMapping("/message/{foo}/{name}") public void messageMappingDestinationVariable(@DestinationVariable("foo") String param1, @DestinationVariable("name") String param2) {     this.method = "messageMappingDestinationVariable".     this.arguments.put("foo", param1).     this.arguments.put("name", param2). }
false;public;2;7;;@SubscribeMapping("/sub/{foo}/{name}") public void subscribeEventDestinationVariable(@DestinationVariable("foo") String param1, @DestinationVariable("name") String param2) {     this.method = "subscribeEventDestinationVariable".     this.arguments.put("foo", param1).     this.arguments.put("name", param2). }
false;public;1;5;;@MessageMapping("/binding/id/{id}") public void simpleBinding(@DestinationVariable("id") Long id) {     this.method = "simpleBinding".     this.arguments.put("id", id). }
false;public;1;5;;@MessageMapping("/validation/payload") public void payloadValidation(@Validated @Payload String payload) {     this.method = "payloadValidation".     this.arguments.put("message", payload). }
false;public;0;4;;@MessageMapping("/illegalState") public void illegalState() {     throw new IllegalStateException("my cause"). }
false;public;0;4;;@MessageMapping("/illegalStateCause") public void illegalStateCause() {     throw new RuntimeException(new IllegalStateException("my cause")). }
false;public;0;4;;@MessageMapping("/error") public void errorAsThrowable() {     throw new Error("my cause"). }
false;public;0;4;;@MessageExceptionHandler(MethodArgumentNotValidException.class) public void handleValidationException() {     this.method = "handleValidationException". }
false;public;2;6;;@MessageExceptionHandler public void handleExceptionWithHandlerMethodArg(IllegalStateException ex, HandlerMethod handlerMethod) {     this.method = "handleExceptionWithHandlerMethodArg".     this.arguments.put("handlerMethod", handlerMethod).     assertEquals("my cause", ex.getMessage()). }
false;public;2;6;;@MessageExceptionHandler public void handleErrorWithHandlerMethodArg(Error ex, HandlerMethod handlerMethod) {     this.method = "handleErrorWithHandlerMethodArg".     this.arguments.put("handlerMethod", handlerMethod).     assertEquals("my cause", ex.getMessage()). }
false;public;0;6;;@MessageMapping("/scope") public void scope() {     SimpAttributes simpAttributes = SimpAttributesContextHolder.currentAttributes().     assertThat(simpAttributes.getAttribute("name"), is("value")).     this.method = "scope". }
false;public;0;4;;@MessageMapping("/${myProperty}") public void placeholder() {     this.method = "placeholder". }
false;public;0;4;;@MessageMapping("foo") public void handleFoo() {     this.method = "handleFoo". }
false;public;0;5;;@MessageMapping("success") public ListenableFutureTask<String> handleListenableFuture() {     this.future = new ListenableFutureTask<>(() -> "foo").     return this.future. }
false;public;0;7;;@MessageMapping("failure") public ListenableFutureTask<String> handleListenableFutureException() {     this.future = new ListenableFutureTask<>(() -> {         throw new IllegalStateException().     }).     return this.future. }
false;public;0;4;;@MessageExceptionHandler(IllegalStateException.class) public void handleValidationException() {     this.exceptionCaught = true. }
false;public;0;5;;@MessageMapping("completable-future") public CompletableFuture<String> handleCompletableFuture() {     this.future = new CompletableFuture<>().     return this.future. }
false;public;0;4;;@MessageExceptionHandler(IllegalStateException.class) public void handleValidationException() {     this.exceptionCaught = true. }
false;public;0;5;;@MessageMapping("mono") public Mono<String> handleMono() {     this.mono = MonoProcessor.create().     return this.mono. }
false;public;0;5;;@MessageMapping("flux") public Flux<String> handleFlux() {     this.flux = EmitterProcessor.create().     return this.flux. }
false;public;0;4;;@MessageExceptionHandler(IllegalStateException.class) public void handleValidationException() {     this.exceptionCaught = true. }
false;public;1;4;;@Override public boolean supports(Class<?> clazz) {     return String.class.isAssignableFrom(clazz). }
false;public;2;7;;@Override public void validate(@Nullable Object target, Errors errors) {     String value = (String) target.     if (invalidValue.equals(value)) {         errors.reject("invalid value '" + invalidValue + "'").     } }
