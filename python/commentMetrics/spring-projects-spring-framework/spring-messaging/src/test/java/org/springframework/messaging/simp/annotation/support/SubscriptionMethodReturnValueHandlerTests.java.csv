commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Before public void setup() throws Exception {     MockitoAnnotations.initMocks(this).     SimpMessagingTemplate messagingTemplate = new SimpMessagingTemplate(this.messageChannel).     messagingTemplate.setMessageConverter(new StringMessageConverter()).     this.handler = new SubscriptionMethodReturnValueHandler(messagingTemplate).     SimpMessagingTemplate jsonMessagingTemplate = new SimpMessagingTemplate(this.messageChannel).     jsonMessagingTemplate.setMessageConverter(new MappingJackson2MessageConverter()).     this.jsonHandler = new SubscriptionMethodReturnValueHandler(jsonMessagingTemplate).     Method method = this.getClass().getDeclaredMethod("getData").     this.subscribeEventReturnType = new MethodParameter(method, -1).     method = this.getClass().getDeclaredMethod("getDataAndSendTo").     this.subscribeEventSendToReturnType = new MethodParameter(method, -1).     method = this.getClass().getDeclaredMethod("handle").     this.messageMappingReturnType = new MethodParameter(method, -1).     method = this.getClass().getDeclaredMethod("getJsonView").     this.subscribeEventJsonViewReturnType = new MethodParameter(method, -1). }
false;public;0;6;;@Test public void supportsReturnType() throws Exception {     assertTrue(this.handler.supportsReturnType(this.subscribeEventReturnType)).     assertFalse(this.handler.supportsReturnType(this.subscribeEventSendToReturnType)).     assertFalse(this.handler.supportsReturnType(this.messageMappingReturnType)). }
false;public;0;25;;@Test public void testMessageSentToChannel() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     String subscriptionId = "subs1".     String destination = "/dest".     Message<?> inputMessage = createInputMessage(sessionId, subscriptionId, destination, null).     this.handler.handleReturnValue(PAYLOAD, this.subscribeEventReturnType, inputMessage).     verify(this.messageChannel).send(this.messageCaptor.capture()).     assertNotNull(this.messageCaptor.getValue()).     Message<?> message = this.messageCaptor.getValue().     SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.wrap(message).     assertNull("SimpMessageHeaderAccessor should have disabled id", headerAccessor.getId()).     assertNull("SimpMessageHeaderAccessor should have disabled timestamp", headerAccessor.getTimestamp()).     assertEquals(sessionId, headerAccessor.getSessionId()).     assertEquals(subscriptionId, headerAccessor.getSubscriptionId()).     assertEquals(destination, headerAccessor.getDestination()).     assertEquals(MIME_TYPE, headerAccessor.getContentType()).     assertEquals(this.subscribeEventReturnType, headerAccessor.getHeader(SimpMessagingTemplate.CONVERSION_HINT_HEADER)). }
false;public;0;25;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void testHeadersPassedToMessagingTemplate() throws Exception {     String sessionId = "sess1".     String subscriptionId = "subs1".     String destination = "/dest".     Message<?> inputMessage = createInputMessage(sessionId, subscriptionId, destination, null).     MessageSendingOperations messagingTemplate = Mockito.mock(MessageSendingOperations.class).     SubscriptionMethodReturnValueHandler handler = new SubscriptionMethodReturnValueHandler(messagingTemplate).     handler.handleReturnValue(PAYLOAD, this.subscribeEventReturnType, inputMessage).     ArgumentCaptor<MessageHeaders> captor = ArgumentCaptor.forClass(MessageHeaders.class).     verify(messagingTemplate).convertAndSend(eq("/dest"), eq(PAYLOAD), captor.capture()).     SimpMessageHeaderAccessor headerAccessor = MessageHeaderAccessor.getAccessor(captor.getValue(), SimpMessageHeaderAccessor.class).     assertNotNull(headerAccessor).     assertTrue(headerAccessor.isMutable()).     assertEquals(sessionId, headerAccessor.getSessionId()).     assertEquals(subscriptionId, headerAccessor.getSubscriptionId()).     assertEquals(this.subscribeEventReturnType, headerAccessor.getHeader(SimpMessagingTemplate.CONVERSION_HINT_HEADER)). }
false;public;0;17;;@Test public void testJsonView() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     String subscriptionId = "subs1".     String destination = "/dest".     Message<?> inputMessage = createInputMessage(sessionId, subscriptionId, destination, null).     this.jsonHandler.handleReturnValue(getJsonView(), this.subscribeEventJsonViewReturnType, inputMessage).     verify(this.messageChannel).send(this.messageCaptor.capture()).     Message<?> message = this.messageCaptor.getValue().     assertNotNull(message).     assertEquals("{\"withView1\":\"with\"}", new String((byte[]) message.getPayload(), StandardCharsets.UTF_8)). }
false;private;4;8;;private Message<?> createInputMessage(String sessId, String subsId, String dest, Principal principal) {     SimpMessageHeaderAccessor headers = SimpMessageHeaderAccessor.create().     headers.setSessionId(sessId).     headers.setSubscriptionId(subsId).     headers.setDestination(dest).     headers.setUser(principal).     return MessageBuilder.withPayload(new byte[0]).copyHeaders(headers.toMap()).build(). }
false;private;0;4;;// not needed for the tests but here for completeness @SubscribeMapping("/data") private String getData() {     return PAYLOAD. }
false;private;0;5;;// not needed for the tests but here for completeness @SubscribeMapping("/data") @SendTo("/sendToDest") private String getDataAndSendTo() {     return PAYLOAD. }
false;public;0;4;;// not needed for the tests but here for completeness @MessageMapping("/handle") public String handle() {     return PAYLOAD. }
false;public;0;9;;// not needed for the tests but here for completeness @SubscribeMapping("/jsonview") @JsonView(MyJacksonView1.class) public JacksonViewBean getJsonView() {     JacksonViewBean payload = new JacksonViewBean().     payload.setWithView1("with").     payload.setWithView2("with").     payload.setWithoutView("without").     return payload. }
false;public;0;3;;public String getWithView1() {     return withView1. }
false;public;1;3;;public void setWithView1(String withView1) {     this.withView1 = withView1. }
false;public;0;3;;public String getWithView2() {     return withView2. }
false;public;1;3;;public void setWithView2(String withView2) {     this.withView2 = withView2. }
false;public;0;3;;public String getWithoutView() {     return withoutView. }
false;public;1;3;;public void setWithoutView(String withoutView) {     this.withoutView = withoutView. }
