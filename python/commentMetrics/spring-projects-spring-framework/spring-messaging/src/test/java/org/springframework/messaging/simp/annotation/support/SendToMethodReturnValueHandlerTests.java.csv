commented;modifiers;parameterAmount;loc;comment;code
false;private;1;3;;private MethodParameter param(String methodName) {     return param(getClass(), methodName). }
false;private,static;2;8;;private static MethodParameter param(Class<?> clazz, String methodName) {     try {         return new SynthesizingMethodParameter(clazz.getDeclaredMethod(methodName), -1).     } catch (NoSuchMethodException ex) {         throw new IllegalArgumentException("No such method", ex).     } }
false;public;0;13;;@Before public void setup() throws Exception {     MockitoAnnotations.initMocks(this).     SimpMessagingTemplate messagingTemplate = new SimpMessagingTemplate(this.messageChannel).     messagingTemplate.setMessageConverter(new StringMessageConverter()).     this.handler = new SendToMethodReturnValueHandler(messagingTemplate, true).     this.handlerAnnotationNotRequired = new SendToMethodReturnValueHandler(messagingTemplate, false).     SimpMessagingTemplate jsonMessagingTemplate = new SimpMessagingTemplate(this.messageChannel).     jsonMessagingTemplate.setMessageConverter(new MappingJackson2MessageConverter()).     this.jsonHandler = new SendToMethodReturnValueHandler(jsonMessagingTemplate, true). }
false;public;0;15;;@Test public void supportsReturnType() throws Exception {     assertTrue(this.handler.supportsReturnType(this.sendToReturnType)).     assertTrue(this.handler.supportsReturnType(this.sendToUserReturnType)).     assertFalse(this.handler.supportsReturnType(this.noAnnotationsReturnType)).     assertTrue(this.handlerAnnotationNotRequired.supportsReturnType(this.noAnnotationsReturnType)).     assertTrue(this.handler.supportsReturnType(this.defaultNoAnnotation)).     assertTrue(this.handler.supportsReturnType(this.defaultEmptyAnnotation)).     assertTrue(this.handler.supportsReturnType(this.defaultOverrideAnnotation)).     assertTrue(this.handler.supportsReturnType(this.userDefaultNoAnnotation)).     assertTrue(this.handler.supportsReturnType(this.userDefaultEmptyAnnotation)).     assertTrue(this.handler.supportsReturnType(this.userDefaultOverrideAnnotation)). }
false;public;0;11;;@Test public void sendToNoAnnotations() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     Message<?> inputMessage = createMessage(sessionId, "sub1", "/app", "/dest", null).     this.handler.handleReturnValue(PAYLOAD, this.noAnnotationsReturnType, inputMessage).     verify(this.messageChannel, times(1)).send(this.messageCaptor.capture()).     assertResponse(this.noAnnotationsReturnType, sessionId, 0, "/topic/dest"). }
false;public;0;12;;@Test public void sendTo() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null).     this.handler.handleReturnValue(PAYLOAD, this.sendToReturnType, inputMessage).     verify(this.messageChannel, times(2)).send(this.messageCaptor.capture()).     assertResponse(this.sendToReturnType, sessionId, 0, "/dest1").     assertResponse(this.sendToReturnType, sessionId, 1, "/dest2"). }
false;public;0;11;;@Test public void sendToDefaultDestination() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     Message<?> inputMessage = createMessage(sessionId, "sub1", "/app", "/dest", null).     this.handler.handleReturnValue(PAYLOAD, this.sendToDefaultDestReturnType, inputMessage).     verify(this.messageChannel, times(1)).send(this.messageCaptor.capture()).     assertResponse(this.sendToDefaultDestReturnType, sessionId, 0, "/topic/dest"). }
false;public;0;11;;@Test public void sendToClassDefaultNoAnnotation() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null).     this.handler.handleReturnValue(PAYLOAD, this.defaultNoAnnotation, inputMessage).     verify(this.messageChannel, times(1)).send(this.messageCaptor.capture()).     assertResponse(this.defaultNoAnnotation, sessionId, 0, "/dest-default"). }
false;public;0;11;;@Test public void sendToClassDefaultEmptyAnnotation() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null).     this.handler.handleReturnValue(PAYLOAD, this.defaultEmptyAnnotation, inputMessage).     verify(this.messageChannel, times(1)).send(this.messageCaptor.capture()).     assertResponse(this.defaultEmptyAnnotation, sessionId, 0, "/dest-default"). }
false;public;0;12;;@Test public void sendToClassDefaultOverride() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null).     this.handler.handleReturnValue(PAYLOAD, this.defaultOverrideAnnotation, inputMessage).     verify(this.messageChannel, times(2)).send(this.messageCaptor.capture()).     assertResponse(this.defaultOverrideAnnotation, sessionId, 0, "/dest3").     assertResponse(this.defaultOverrideAnnotation, sessionId, 1, "/dest4"). }
false;public;0;11;;@Test public void sendToUserClassDefaultNoAnnotation() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null).     this.handler.handleReturnValue(PAYLOAD, this.userDefaultNoAnnotation, inputMessage).     verify(this.messageChannel, times(1)).send(this.messageCaptor.capture()).     assertResponse(this.userDefaultNoAnnotation, sessionId, 0, "/user/sess1/dest-default"). }
false;public;0;11;;@Test public void sendToUserClassDefaultEmptyAnnotation() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null).     this.handler.handleReturnValue(PAYLOAD, this.userDefaultEmptyAnnotation, inputMessage).     verify(this.messageChannel, times(1)).send(this.messageCaptor.capture()).     assertResponse(this.userDefaultEmptyAnnotation, sessionId, 0, "/user/sess1/dest-default"). }
false;public;0;12;;@Test public void sendToUserClassDefaultOverride() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null).     this.handler.handleReturnValue(PAYLOAD, this.userDefaultOverrideAnnotation, inputMessage).     verify(this.messageChannel, times(2)).send(this.messageCaptor.capture()).     assertResponse(this.userDefaultOverrideAnnotation, sessionId, 0, "/user/sess1/dest3").     assertResponse(this.userDefaultOverrideAnnotation, sessionId, 1, "/user/sess1/dest4"). }
false;public;0;15;;// SPR-14238 @Test public void sendToUserWithSendToDefaultOverride() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     Class<?> clazz = SendToUserWithSendToOverrideTestBean.class.     Method method = clazz.getDeclaredMethod("handleAndSendToDefaultDestination").     MethodParameter parameter = new SynthesizingMethodParameter(method, -1).     String sessionId = "sess1".     Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null).     this.handler.handleReturnValue(PAYLOAD, parameter, inputMessage).     verify(this.messageChannel, times(1)).send(this.messageCaptor.capture()).     assertResponse(parameter, sessionId, 0, "/user/sess1/dest-default"). }
false;public;0;16;;// SPR-14238 @Test public void sendToUserWithSendToOverride() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     Class<?> clazz = SendToUserWithSendToOverrideTestBean.class.     Method method = clazz.getDeclaredMethod("handleAndSendToOverride").     MethodParameter parameter = new SynthesizingMethodParameter(method, -1).     String sessionId = "sess1".     Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null).     this.handler.handleReturnValue(PAYLOAD, parameter, inputMessage).     verify(this.messageChannel, times(2)).send(this.messageCaptor.capture()).     assertResponse(parameter, sessionId, 0, "/dest3").     assertResponse(parameter, sessionId, 1, "/dest4"). }
false;private;4;10;;private void assertResponse(MethodParameter methodParameter, String sessionId, int index, String destination) {     SimpMessageHeaderAccessor accessor = getCapturedAccessor(index).     assertEquals(sessionId, accessor.getSessionId()).     assertEquals(destination, accessor.getDestination()).     assertEquals(MIME_TYPE, accessor.getContentType()).     assertNull("Subscription id should not be copied", accessor.getSubscriptionId()).     assertEquals(methodParameter, accessor.getHeader(SimpMessagingTemplate.CONVERSION_HINT_HEADER)). }
false;public;0;12;;@Test public void sendToDefaultDestinationWhenUsingDotPathSeparator() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     Message<?> inputMessage = createMessage("sess1", "sub1", "/app/", "dest.foo.bar", null).     this.handler.handleReturnValue(PAYLOAD, this.sendToDefaultDestReturnType, inputMessage).     verify(this.messageChannel, times(1)).send(this.messageCaptor.capture()).     SimpMessageHeaderAccessor accessor = getCapturedAccessor(0).     assertEquals("/topic/dest.foo.bar", accessor.getDestination()). }
false;public;0;22;;@Test public void testHeadersToSend() throws Exception {     Message<?> message = createMessage("sess1", "sub1", "/app", "/dest", null).     SimpMessageSendingOperations messagingTemplate = Mockito.mock(SimpMessageSendingOperations.class).     SendToMethodReturnValueHandler handler = new SendToMethodReturnValueHandler(messagingTemplate, false).     handler.handleReturnValue(PAYLOAD, this.noAnnotationsReturnType, message).     ArgumentCaptor<MessageHeaders> captor = ArgumentCaptor.forClass(MessageHeaders.class).     verify(messagingTemplate).convertAndSend(eq("/topic/dest"), eq(PAYLOAD), captor.capture()).     MessageHeaders headers = captor.getValue().     SimpMessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(headers, SimpMessageHeaderAccessor.class).     assertNotNull(accessor).     assertTrue(accessor.isMutable()).     assertEquals("sess1", accessor.getSessionId()).     assertNull("Subscription id should not be copied", accessor.getSubscriptionId()).     assertEquals(this.noAnnotationsReturnType, accessor.getHeader(SimpMessagingTemplate.CONVERSION_HINT_HEADER)). }
false;public;0;21;;@Test public void sendToUser() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     TestUser user = new TestUser().     Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, user).     this.handler.handleReturnValue(PAYLOAD, this.sendToUserReturnType, inputMessage).     verify(this.messageChannel, times(2)).send(this.messageCaptor.capture()).     SimpMessageHeaderAccessor accessor = getCapturedAccessor(0).     assertNull(accessor.getSessionId()).     assertNull(accessor.getSubscriptionId()).     assertEquals("/user/" + user.getName() + "/dest1", accessor.getDestination()).     accessor = getCapturedAccessor(1).     assertNull(accessor.getSessionId()).     assertNull(accessor.getSubscriptionId()).     assertEquals("/user/" + user.getName() + "/dest2", accessor.getDestination()). }
false;public;0;31;;@Test public void sendToAndSendToUser() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     TestUser user = new TestUser().     Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, user).     this.handler.handleReturnValue(PAYLOAD, this.sendToSendToUserReturnType, inputMessage).     verify(this.messageChannel, times(4)).send(this.messageCaptor.capture()).     SimpMessageHeaderAccessor accessor = getCapturedAccessor(0).     assertNull(accessor.getSessionId()).     assertNull(accessor.getSubscriptionId()).     assertEquals("/user/" + user.getName() + "/dest1", accessor.getDestination()).     accessor = getCapturedAccessor(1).     assertNull(accessor.getSessionId()).     assertNull(accessor.getSubscriptionId()).     assertEquals("/user/" + user.getName() + "/dest2", accessor.getDestination()).     accessor = getCapturedAccessor(2).     assertEquals("sess1", accessor.getSessionId()).     assertNull(accessor.getSubscriptionId()).     assertEquals("/dest1", accessor.getDestination()).     accessor = getCapturedAccessor(3).     assertEquals("sess1", accessor.getSessionId()).     assertNull(accessor.getSubscriptionId()).     assertEquals("/dest2", accessor.getDestination()). }
false;public;0;21;;// SPR-12170 @Test public void sendToWithDestinationPlaceholders() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     Map<String, String> vars = new LinkedHashMap<>(1).     vars.put("roomName", "roomA").     String sessionId = "sess1".     SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create().     accessor.setSessionId(sessionId).     accessor.setSubscriptionId("sub1").     accessor.setHeader(DestinationVariableMethodArgumentResolver.DESTINATION_TEMPLATE_VARIABLES_HEADER, vars).     Message<?> message = MessageBuilder.createMessage(PAYLOAD, accessor.getMessageHeaders()).     this.handler.handleReturnValue(PAYLOAD, this.sendToWithPlaceholdersReturnType, message).     verify(this.messageChannel, times(1)).send(this.messageCaptor.capture()).     SimpMessageHeaderAccessor actual = getCapturedAccessor(0).     assertEquals(sessionId, actual.getSessionId()).     assertEquals("/topic/chat.message.filtered.roomA", actual.getDestination()). }
false;public;0;27;;@Test public void sendToUserSingleSession() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     TestUser user = new TestUser().     Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, user).     this.handler.handleReturnValue(PAYLOAD, this.sendToUserInSessionReturnType, inputMessage).     verify(this.messageChannel, times(2)).send(this.messageCaptor.capture()).     SimpMessageHeaderAccessor accessor = getCapturedAccessor(0).     assertEquals(sessionId, accessor.getSessionId()).     assertEquals(MIME_TYPE, accessor.getContentType()).     assertEquals("/user/" + user.getName() + "/dest1", accessor.getDestination()).     assertNull("Subscription id should not be copied", accessor.getSubscriptionId()).     assertEquals(this.sendToUserInSessionReturnType, accessor.getHeader(SimpMessagingTemplate.CONVERSION_HINT_HEADER)).     accessor = getCapturedAccessor(1).     assertEquals(sessionId, accessor.getSessionId()).     assertEquals("/user/" + user.getName() + "/dest2", accessor.getDestination()).     assertEquals(MIME_TYPE, accessor.getContentType()).     assertNull("Subscription id should not be copied", accessor.getSubscriptionId()).     assertEquals(this.sendToUserInSessionReturnType, accessor.getHeader(SimpMessagingTemplate.CONVERSION_HINT_HEADER)). }
false;public;0;17;;@Test public void sendToUserWithUserNameProvider() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     TestUser user = new UniqueUser().     Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, user).     this.handler.handleReturnValue(PAYLOAD, this.sendToUserReturnType, inputMessage).     verify(this.messageChannel, times(2)).send(this.messageCaptor.capture()).     SimpMessageHeaderAccessor accessor = getCapturedAccessor(0).     assertEquals("/user/Me myself and I/dest1", accessor.getDestination()).     accessor = getCapturedAccessor(1).     assertEquals("/user/Me myself and I/dest2", accessor.getDestination()). }
false;public;0;16;;@Test public void sendToUserDefaultDestination() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     TestUser user = new TestUser().     Message<?> inputMessage = createMessage(sessionId, "sub1", "/app", "/dest", user).     this.handler.handleReturnValue(PAYLOAD, this.sendToUserDefaultDestReturnType, inputMessage).     verify(this.messageChannel, times(1)).send(this.messageCaptor.capture()).     SimpMessageHeaderAccessor accessor = getCapturedAccessor(0).     assertNull(accessor.getSessionId()).     assertNull(accessor.getSubscriptionId()).     assertEquals("/user/" + user.getName() + "/queue/dest", accessor.getDestination()). }
false;public;0;13;;@Test public void sendToUserDefaultDestinationWhenUsingDotPathSeparator() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     TestUser user = new TestUser().     Message<?> inputMessage = createMessage("sess1", "sub1", "/app/", "dest.foo.bar", user).     this.handler.handleReturnValue(PAYLOAD, this.sendToUserDefaultDestReturnType, inputMessage).     verify(this.messageChannel, times(1)).send(this.messageCaptor.capture()).     SimpMessageHeaderAccessor accessor = getCapturedAccessor(0).     assertEquals("/user/" + user.getName() + "/queue/dest.foo.bar", accessor.getDestination()). }
false;public;0;19;;@Test public void sendToUserDefaultDestinationSingleSession() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     TestUser user = new TestUser().     Message<?> message = createMessage(sessionId, "sub1", "/app", "/dest", user).     this.handler.handleReturnValue(PAYLOAD, this.sendToUserInSessionDefaultDestReturnType, message).     verify(this.messageChannel, times(1)).send(this.messageCaptor.capture()).     SimpMessageHeaderAccessor accessor = getCapturedAccessor(0).     assertEquals(sessionId, accessor.getSessionId()).     assertEquals("/user/" + user.getName() + "/queue/dest", accessor.getDestination()).     assertEquals(MIME_TYPE, accessor.getContentType()).     assertNull("Subscription id should not be copied", accessor.getSubscriptionId()).     assertEquals(this.sendToUserInSessionDefaultDestReturnType, accessor.getHeader(SimpMessagingTemplate.CONVERSION_HINT_HEADER)). }
false;public;0;18;;@Test public void sendToUserSessionWithoutUserName() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null).     this.handler.handleReturnValue(PAYLOAD, this.sendToUserReturnType, inputMessage).     verify(this.messageChannel, times(2)).send(this.messageCaptor.capture()).     SimpMessageHeaderAccessor accessor = getCapturedAccessor(0).     assertEquals("/user/sess1/dest1", accessor.getDestination()).     assertEquals("sess1", accessor.getSessionId()).     accessor = getCapturedAccessor(1).     assertEquals("/user/sess1/dest2", accessor.getDestination()).     assertEquals("sess1", accessor.getSessionId()). }
false;public;0;15;;@Test public void jsonView() throws Exception {     given(this.messageChannel.send(any(Message.class))).willReturn(true).     String sessionId = "sess1".     Message<?> inputMessage = createMessage(sessionId, "sub1", "/app", "/dest", null).     this.jsonHandler.handleReturnValue(handleAndSendToJsonView(), this.jsonViewReturnType, inputMessage).     verify(this.messageChannel).send(this.messageCaptor.capture()).     Message<?> message = this.messageCaptor.getValue().     assertNotNull(message).     String bytes = new String((byte[]) message.getPayload(), StandardCharsets.UTF_8).     assertEquals("{\"withView1\":\"with\"}", bytes). }
false;private;5;13;;private Message<?> createMessage(String sessId, String subsId, String destPrefix, String dest, Principal user) {     SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create().     headerAccessor.setSessionId(sessId).     headerAccessor.setSubscriptionId(subsId).     if (dest != null && destPrefix != null) {         headerAccessor.setDestination(destPrefix + dest).         headerAccessor.setHeader(DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER, dest).     }     if (user != null) {         headerAccessor.setUser(user).     }     return MessageBuilder.createMessage(new byte[0], headerAccessor.getMessageHeaders()). }
false;private;1;4;;private SimpMessageHeaderAccessor getCapturedAccessor(int index) {     Message<?> message = this.messageCaptor.getAllValues().get(index).     return MessageHeaderAccessor.getAccessor(message, SimpMessageHeaderAccessor.class). }
false;;0;4;;@SuppressWarnings("unused") String handleNoAnnotations() {     return PAYLOAD. }
false;;0;5;;@SendTo @SuppressWarnings("unused") String handleAndSendToDefaultDest() {     return PAYLOAD. }
false;;0;5;;@SendTo({ "/dest1", "/dest2" }) @SuppressWarnings("unused") String handleAndSendTo() {     return PAYLOAD. }
false;;0;5;;@SendTo("/topic/chat.message.filtered.{roomName}") @SuppressWarnings("unused") String handleAndSendToWithPlaceholders() {     return PAYLOAD. }
false;;0;5;;@SendToUser @SuppressWarnings("unused") String handleAndSendToUserDefaultDest() {     return PAYLOAD. }
false;;0;5;;@SendToUser(broadcast = false) @SuppressWarnings("unused") String handleAndSendToUserDefaultDestInSession() {     return PAYLOAD. }
false;;0;5;;@SendToUser({ "/dest1", "/dest2" }) @SuppressWarnings("unused") String handleAndSendToUser() {     return PAYLOAD. }
false;;0;5;;@SendToUser(destinations = { "/dest1", "/dest2" }, broadcast = false) @SuppressWarnings("unused") String handleAndSendToUserInSession() {     return PAYLOAD. }
false;;0;6;;@SendTo({ "/dest1", "/dest2" }) @SendToUser({ "/dest1", "/dest2" }) @SuppressWarnings("unused") String handleAndSendToAndSendToUser() {     return PAYLOAD. }
false;;0;9;;@JsonView(MyJacksonView1.class) @SuppressWarnings("unused") JacksonViewBean handleAndSendToJsonView() {     JacksonViewBean payload = new JacksonViewBean().     payload.setWithView1("with").     payload.setWithView2("with").     payload.setWithoutView("without").     return payload. }
false;public;0;3;;public String getName() {     return "joe". }
false;public;1;3;;public boolean implies(Subject subject) {     return false. }
false;public;0;4;;@Override public String getDestinationUserName() {     return "Me myself and I". }
false;;0;3;;String handleNoAnnotation() {     return PAYLOAD. }
false;;0;4;;@SendTo String handleAndSendToDefaultDest() {     return PAYLOAD. }
false;;0;4;;@MySendTo(dest = { "/dest3", "/dest4" }) String handleAndSendToOverride() {     return PAYLOAD. }
false;;0;3;;String handleNoAnnotation() {     return PAYLOAD. }
false;;0;4;;@SendToUser String handleAndSendToDefaultDest() {     return PAYLOAD. }
false;;0;4;;@MySendToUser(dest = { "/dest3", "/dest4" }) String handleAndSendToOverride() {     return PAYLOAD. }
false;;0;4;;@SendTo String handleAndSendToDefaultDestination() {     return PAYLOAD. }
false;;0;4;;@MySendTo(dest = { "/dest3", "/dest4" }) String handleAndSendToOverride() {     return PAYLOAD. }
false;public;0;3;;public String getWithView1() {     return withView1. }
false;;1;3;;void setWithView1(String withView1) {     this.withView1 = withView1. }
false;;0;3;;String getWithView2() {     return withView2. }
false;;1;3;;void setWithView2(String withView2) {     this.withView2 = withView2. }
false;;0;3;;String getWithoutView() {     return withoutView. }
false;;1;3;;void setWithoutView(String withoutView) {     this.withoutView = withoutView. }
