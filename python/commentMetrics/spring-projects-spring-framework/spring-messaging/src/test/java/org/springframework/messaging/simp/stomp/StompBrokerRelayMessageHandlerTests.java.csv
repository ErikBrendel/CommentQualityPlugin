commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected void startInternal() {     // Force this, since we'll never actually connect     publishBrokerAvailableEvent().     super.startInternal(). }
false;public;0;18;;@Before public void setup() {     this.outboundChannel = new StubMessageChannel().     this.brokerRelay = new StompBrokerRelayMessageHandler(new StubMessageChannel(), this.outboundChannel, new StubMessageChannel(), Arrays.asList("/topic")) {          @Override         protected void startInternal() {             // Force this, since we'll never actually connect             publishBrokerAvailableEvent().             super.startInternal().         }     }.     this.tcpClient = new StubTcpOperations().     this.brokerRelay.setTcpClient(this.tcpClient). }
false;public;0;20;;@Test public void virtualHost() throws Exception {     this.brokerRelay.setVirtualHost("ABC").     this.brokerRelay.start().     this.brokerRelay.handleMessage(connectMessage("sess1", "joe")).     assertEquals(2, this.tcpClient.getSentMessages().size()).     StompHeaderAccessor headers1 = this.tcpClient.getSentHeaders(0).     assertEquals(StompCommand.CONNECT, headers1.getCommand()).     assertEquals(StompBrokerRelayMessageHandler.SYSTEM_SESSION_ID, headers1.getSessionId()).     assertEquals("ABC", headers1.getHost()).     StompHeaderAccessor headers2 = this.tcpClient.getSentHeaders(1).     assertEquals(StompCommand.CONNECT, headers2.getCommand()).     assertEquals("sess1", headers2.getSessionId()).     assertEquals("ABC", headers2.getHost()). }
false;public;0;23;;@Test public void loginAndPasscode() throws Exception {     this.brokerRelay.setSystemLogin("syslogin").     this.brokerRelay.setSystemPasscode("syspasscode").     this.brokerRelay.setClientLogin("clientlogin").     this.brokerRelay.setClientPasscode("clientpasscode").     this.brokerRelay.start().     this.brokerRelay.handleMessage(connectMessage("sess1", "joe")).     assertEquals(2, this.tcpClient.getSentMessages().size()).     StompHeaderAccessor headers1 = this.tcpClient.getSentHeaders(0).     assertEquals(StompCommand.CONNECT, headers1.getCommand()).     assertEquals("syslogin", headers1.getLogin()).     assertEquals("syspasscode", headers1.getPasscode()).     StompHeaderAccessor headers2 = this.tcpClient.getSentHeaders(1).     assertEquals(StompCommand.CONNECT, headers2.getCommand()).     assertEquals("clientlogin", headers2.getLogin()).     assertEquals("clientpasscode", headers2.getPasscode()). }
false;public;0;15;;@Test public void destinationExcluded() throws Exception {     this.brokerRelay.start().     SimpMessageHeaderAccessor headers = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE).     headers.setSessionId("sess1").     headers.setDestination("/user/daisy/foo").     this.brokerRelay.handleMessage(MessageBuilder.createMessage(new byte[0], headers.getMessageHeaders())).     assertEquals(1, this.tcpClient.getSentMessages().size()).     StompHeaderAccessor headers1 = this.tcpClient.getSentHeaders(0).     assertEquals(StompCommand.CONNECT, headers1.getCommand()).     assertEquals(StompBrokerRelayMessageHandler.SYSTEM_SESSION_ID, headers1.getSessionId()). }
false;public;0;17;;@Test public void messageFromBrokerIsEnriched() throws Exception {     this.brokerRelay.start().     this.brokerRelay.handleMessage(connectMessage("sess1", "joe")).     assertEquals(2, this.tcpClient.getSentMessages().size()).     assertEquals(StompCommand.CONNECT, this.tcpClient.getSentHeaders(0).getCommand()).     assertEquals(StompCommand.CONNECT, this.tcpClient.getSentHeaders(1).getCommand()).     this.tcpClient.handleMessage(message(StompCommand.MESSAGE, null, null, null)).     Message<byte[]> message = this.outboundChannel.getMessages().get(0).     StompHeaderAccessor accessor = StompHeaderAccessor.getAccessor(message, StompHeaderAccessor.class).     assertEquals("sess1", accessor.getSessionId()).     assertEquals("joe", accessor.getUser().getName()). }
false;public;0;14;;// SPR-12820 @Test public void connectWhenBrokerNotAvailable() throws Exception {     this.brokerRelay.start().     this.brokerRelay.stopInternal().     this.brokerRelay.handleMessage(connectMessage("sess1", "joe")).     Message<byte[]> message = this.outboundChannel.getMessages().get(0).     StompHeaderAccessor accessor = StompHeaderAccessor.getAccessor(message, StompHeaderAccessor.class).     assertEquals(StompCommand.ERROR, accessor.getCommand()).     assertEquals("sess1", accessor.getSessionId()).     assertEquals("joe", accessor.getUser().getName()).     assertEquals("Broker not available.", accessor.getMessage()). }
false;public;0;20;;@Test public void sendAfterBrokerUnavailable() throws Exception {     this.brokerRelay.start().     assertEquals(1, this.brokerRelay.getConnectionCount()).     this.brokerRelay.handleMessage(connectMessage("sess1", "joe")).     assertEquals(2, this.brokerRelay.getConnectionCount()).     this.brokerRelay.stopInternal().     this.brokerRelay.handleMessage(message(StompCommand.SEND, "sess1", "joe", "/foo")).     assertEquals(1, this.brokerRelay.getConnectionCount()).     Message<byte[]> message = this.outboundChannel.getMessages().get(0).     StompHeaderAccessor accessor = StompHeaderAccessor.getAccessor(message, StompHeaderAccessor.class).     assertEquals(StompCommand.ERROR, accessor.getCommand()).     assertEquals("sess1", accessor.getSessionId()).     assertEquals("joe", accessor.getUser().getName()).     assertEquals("Broker not available.", accessor.getMessage()). }
false;public;0;24;;@Test public void systemSubscription() throws Exception {     MessageHandler handler = mock(MessageHandler.class).     this.brokerRelay.setSystemSubscriptions(Collections.singletonMap("/topic/foo", handler)).     this.brokerRelay.start().     StompHeaderAccessor accessor = StompHeaderAccessor.create(StompCommand.CONNECTED).     accessor.setLeaveMutable(true).     MessageHeaders headers = accessor.getMessageHeaders().     this.tcpClient.handleMessage(MessageBuilder.createMessage(new byte[0], headers)).     assertEquals(2, this.tcpClient.getSentMessages().size()).     assertEquals(StompCommand.CONNECT, this.tcpClient.getSentHeaders(0).getCommand()).     assertEquals(StompCommand.SUBSCRIBE, this.tcpClient.getSentHeaders(1).getCommand()).     assertEquals("/topic/foo", this.tcpClient.getSentHeaders(1).getDestination()).     Message<byte[]> message = message(StompCommand.MESSAGE, null, null, "/topic/foo").     this.tcpClient.handleMessage(message).     ArgumentCaptor<Message> captor = ArgumentCaptor.forClass(Message.class).     verify(handler).handleMessage(captor.capture()).     assertSame(message, captor.getValue()). }
false;private;2;6;;private Message<byte[]> connectMessage(String sessionId, String user) {     StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT).     headers.setSessionId(sessionId).     headers.setUser(new TestPrincipal(user)).     return MessageBuilder.createMessage(new byte[0], headers.getMessageHeaders()). }
false;private;4;14;;private Message<byte[]> message(StompCommand command, String sessionId, String user, String destination) {     StompHeaderAccessor accessor = StompHeaderAccessor.create(command).     if (sessionId != null) {         accessor.setSessionId(sessionId).     }     if (user != null) {         accessor.setUser(new TestPrincipal(user)).     }     if (destination != null) {         accessor.setDestination(destination).     }     accessor.setLeaveMutable(true).     return MessageBuilder.createMessage(new byte[0], accessor.getMessageHeaders()). }
false;public;0;4;;@Override public Void call() throws Exception {     return null. }
false;private,static;0;10;;private static ListenableFutureTask<Void> getVoidFuture() {     ListenableFutureTask<Void> futureTask = new ListenableFutureTask<>(new Callable<Void>() {          @Override         public Void call() throws Exception {             return null.         }     }).     futureTask.run().     return futureTask. }
false;public;0;4;;@Override public Boolean call() throws Exception {     return null. }
false;private,static;0;10;;private static ListenableFutureTask<Boolean> getBooleanFuture() {     ListenableFutureTask<Boolean> futureTask = new ListenableFutureTask<>(new Callable<Boolean>() {          @Override         public Boolean call() throws Exception {             return null.         }     }).     futureTask.run().     return futureTask. }
false;public;0;3;;public List<Message<byte[]>> getSentMessages() {     return this.connection.getMessages(). }
false;public;1;7;;public StompHeaderAccessor getSentHeaders(int index) {     assertTrue("Size: " + getSentMessages().size(), getSentMessages().size() > index).     Message<byte[]> message = getSentMessages().get(index).     StompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class).     assertNotNull(accessor).     return accessor. }
false;public;1;6;;@Override public ListenableFuture<Void> connect(TcpConnectionHandler<byte[]> handler) {     this.connectionHandler = handler.     handler.afterConnected(this.connection).     return getVoidFuture(). }
false;public;2;6;;@Override public ListenableFuture<Void> connect(TcpConnectionHandler<byte[]> handler, ReconnectStrategy strategy) {     this.connectionHandler = handler.     handler.afterConnected(this.connection).     return getVoidFuture(). }
false;public;0;4;;@Override public ListenableFuture<Void> shutdown() {     return getVoidFuture(). }
false;public;1;3;;public void handleMessage(Message<byte[]> message) {     this.connectionHandler.handleMessage(message). }
false;public;0;3;;public List<Message<byte[]>> getMessages() {     return this.messages. }
false;public;1;5;;@Override public ListenableFuture<Void> send(Message<byte[]> message) {     this.messages.add(message).     return getVoidFuture(). }
false;public;2;3;;@Override public void onReadInactivity(Runnable runnable, long duration) { }
false;public;2;3;;@Override public void onWriteInactivity(Runnable runnable, long duration) { }
false;public;0;3;;@Override public void close() { }
