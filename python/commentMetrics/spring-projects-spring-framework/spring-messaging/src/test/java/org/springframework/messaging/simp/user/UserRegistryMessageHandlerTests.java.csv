commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Before public void setUp() throws Exception {     MockitoAnnotations.initMocks(this).     when(this.brokerChannel.send(any())).thenReturn(true).     this.converter = new MappingJackson2MessageConverter().     SimpMessagingTemplate brokerTemplate = new SimpMessagingTemplate(this.brokerChannel).     brokerTemplate.setMessageConverter(this.converter).     this.localRegistry = mock(SimpUserRegistry.class).     this.multiServerRegistry = new MultiServerUserRegistry(this.localRegistry).     this.handler = new UserRegistryMessageHandler(this.multiServerRegistry, brokerTemplate, "/topic/simp-user-registry", this.taskScheduler). }
false;public;0;5;;@Test public void brokerAvailableEvent() throws Exception {     Runnable runnable = getUserRegistryTask().     assertNotNull(runnable). }
false;public;0;15;;@SuppressWarnings("unchecked") @Test public void brokerUnavailableEvent() throws Exception {     ScheduledFuture future = Mockito.mock(ScheduledFuture.class).     when(this.taskScheduler.scheduleWithFixedDelay(any(Runnable.class), any(Long.class))).thenReturn(future).     BrokerAvailabilityEvent event = new BrokerAvailabilityEvent(true, this).     this.handler.onApplicationEvent(event).     verifyNoMoreInteractions(future).     event = new BrokerAvailabilityEvent(false, this).     this.handler.onApplicationEvent(event).     verify(future).cancel(true). }
false;public;0;28;;@Test public void broadcastRegistry() throws Exception {     TestSimpUser simpUser1 = new TestSimpUser("joe").     TestSimpUser simpUser2 = new TestSimpUser("jane").     simpUser1.addSessions(new TestSimpSession("123")).     simpUser1.addSessions(new TestSimpSession("456")).     HashSet<SimpUser> simpUsers = new HashSet<>(Arrays.asList(simpUser1, simpUser2)).     when(this.localRegistry.getUsers()).thenReturn(simpUsers).     getUserRegistryTask().run().     ArgumentCaptor<Message> captor = ArgumentCaptor.forClass(Message.class).     verify(this.brokerChannel).send(captor.capture()).     Message<?> message = captor.getValue().     assertNotNull(message).     MessageHeaders headers = message.getHeaders().     assertEquals("/topic/simp-user-registry", SimpMessageHeaderAccessor.getDestination(headers)).     MultiServerUserRegistry remoteRegistry = new MultiServerUserRegistry(mock(SimpUserRegistry.class)).     remoteRegistry.addRemoteRegistryDto(message, this.converter, 20000).     assertEquals(2, remoteRegistry.getUserCount()).     assertNotNull(remoteRegistry.getUser("joe")).     assertNotNull(remoteRegistry.getUser("jane")). }
false;public;0;23;;@Test public void handleMessage() throws Exception {     TestSimpUser simpUser1 = new TestSimpUser("joe").     TestSimpUser simpUser2 = new TestSimpUser("jane").     simpUser1.addSessions(new TestSimpSession("123")).     simpUser2.addSessions(new TestSimpSession("456")).     HashSet<SimpUser> simpUsers = new HashSet<>(Arrays.asList(simpUser1, simpUser2)).     SimpUserRegistry remoteUserRegistry = mock(SimpUserRegistry.class).     when(remoteUserRegistry.getUserCount()).thenReturn(2).     when(remoteUserRegistry.getUsers()).thenReturn(simpUsers).     MultiServerUserRegistry remoteRegistry = new MultiServerUserRegistry(remoteUserRegistry).     Message<?> message = this.converter.toMessage(remoteRegistry.getLocalRegistryDto(), null).     this.handler.handleMessage(message).     assertEquals(2, remoteRegistry.getUserCount()).     assertNotNull(this.multiServerRegistry.getUser("joe")).     assertNotNull(this.multiServerRegistry.getUser("jane")). }
false;public;0;14;;@Test public void handleMessageFromOwnBroadcast() throws Exception {     TestSimpUser simpUser = new TestSimpUser("joe").     simpUser.addSessions(new TestSimpSession("123")).     when(this.localRegistry.getUserCount()).thenReturn(1).     when(this.localRegistry.getUsers()).thenReturn(Collections.singleton(simpUser)).     assertEquals(1, this.multiServerRegistry.getUserCount()).     Message<?> message = this.converter.toMessage(this.multiServerRegistry.getLocalRegistryDto(), null).     this.multiServerRegistry.addRemoteRegistryDto(message, this.converter, 20000).     assertEquals(1, this.multiServerRegistry.getUserCount()). }
false;private;0;9;;private Runnable getUserRegistryTask() {     BrokerAvailabilityEvent event = new BrokerAvailabilityEvent(true, this).     this.handler.onApplicationEvent(event).     ArgumentCaptor<? extends Runnable> captor = ArgumentCaptor.forClass(Runnable.class).     verify(this.taskScheduler).scheduleWithFixedDelay(captor.capture(), eq(10000L)).     return captor.getValue(). }
