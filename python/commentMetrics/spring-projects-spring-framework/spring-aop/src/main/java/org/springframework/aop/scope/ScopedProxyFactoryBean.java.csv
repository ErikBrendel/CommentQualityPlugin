commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the name of the bean that is to be scoped.  */ ;/**  * Set the name of the bean that is to be scoped.  */ public void setTargetBeanName(String targetBeanName) {     this.targetBeanName = targetBeanName.     this.scopedTargetSource.setTargetBeanName(targetBeanName). }
false;public;1;33;;@Override public void setBeanFactory(BeanFactory beanFactory) {     if (!(beanFactory instanceof ConfigurableBeanFactory)) {         throw new IllegalStateException("Not running in a ConfigurableBeanFactory: " + beanFactory).     }     ConfigurableBeanFactory cbf = (ConfigurableBeanFactory) beanFactory.     this.scopedTargetSource.setBeanFactory(beanFactory).     ProxyFactory pf = new ProxyFactory().     pf.copyFrom(this).     pf.setTargetSource(this.scopedTargetSource).     Assert.notNull(this.targetBeanName, "Property 'targetBeanName' is required").     Class<?> beanType = beanFactory.getType(this.targetBeanName).     if (beanType == null) {         throw new IllegalStateException("Cannot create scoped proxy for bean '" + this.targetBeanName + "': Target type could not be determined at the time of proxy creation.").     }     if (!isProxyTargetClass() || beanType.isInterface() || Modifier.isPrivate(beanType.getModifiers())) {         pf.setInterfaces(ClassUtils.getAllInterfacesForClass(beanType, cbf.getBeanClassLoader())).     }     // Add an introduction that implements only the methods on ScopedObject.     ScopedObject scopedObject = new DefaultScopedObject(cbf, this.scopedTargetSource.getTargetBeanName()).     pf.addAdvice(new DelegatingIntroductionInterceptor(scopedObject)).     // Add the AopInfrastructureBean marker to indicate that the scoped proxy     // itself is not subject to auto-proxying! Only its target bean is.     pf.addInterface(AopInfrastructureBean.class).     this.proxy = pf.getProxy(cbf.getBeanClassLoader()). }
false;public;0;7;;@Override public Object getObject() {     if (this.proxy == null) {         throw new FactoryBeanNotInitializedException().     }     return this.proxy. }
false;public;0;7;;@Override public Class<?> getObjectType() {     if (this.proxy != null) {         return this.proxy.getClass().     }     return this.scopedTargetSource.getTargetClass(). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
