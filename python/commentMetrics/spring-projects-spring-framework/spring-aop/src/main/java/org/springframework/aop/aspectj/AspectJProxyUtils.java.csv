# id;timestamp;commentText;codeText;commentWords;codeWords
AspectJProxyUtils -> public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors);1328020251;Add special advisors if necessary to work with a proxy chain that contains AspectJ advisors._This will expose the current Spring AOP invocation (necessary for some AspectJ pointcut matching)_and make available the current AspectJ JoinPoint. The call will have no effect if there are no_AspectJ advisors in the advisor chain._@param advisors Advisors available_@return <code>true</code> if any special {@link Advisor Advisors} were added, otherwise <code>false</code>.;public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors) {_		_		if (!advisors.isEmpty()) {_			boolean foundAspectJAdvice = false__			for (Advisor advisor : advisors) {_				_				_				if (isAspectJAdvice(advisor)) {_					foundAspectJAdvice = true__				}_			}_			if (foundAspectJAdvice && !advisors.contains(ExposeInvocationInterceptor.ADVISOR)) {_				advisors.add(0, ExposeInvocationInterceptor.ADVISOR)__				return true__			}_		}_		return false__	};add,special,advisors,if,necessary,to,work,with,a,proxy,chain,that,contains,aspect,j,advisors,this,will,expose,the,current,spring,aop,invocation,necessary,for,some,aspect,j,pointcut,matching,and,make,available,the,current,aspect,j,join,point,the,call,will,have,no,effect,if,there,are,no,aspect,j,advisors,in,the,advisor,chain,param,advisors,advisors,available,return,code,true,code,if,any,special,link,advisor,advisors,were,added,otherwise,code,false,code;public,static,boolean,make,advisor,chain,aspect,jcapable,if,necessary,list,advisor,advisors,if,advisors,is,empty,boolean,found,aspect,jadvice,false,for,advisor,advisor,advisors,if,is,aspect,jadvice,advisor,found,aspect,jadvice,true,if,found,aspect,jadvice,advisors,contains,expose,invocation,interceptor,advisor,advisors,add,0,expose,invocation,interceptor,advisor,return,true,return,false
AspectJProxyUtils -> public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors);1356735495;Add special advisors if necessary to work with a proxy chain that contains AspectJ advisors._This will expose the current Spring AOP invocation (necessary for some AspectJ pointcut matching)_and make available the current AspectJ JoinPoint. The call will have no effect if there are no_AspectJ advisors in the advisor chain._@param advisors Advisors available_@return {@code true} if any special {@link Advisor Advisors} were added, otherwise {@code false}.;public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors) {_		_		if (!advisors.isEmpty()) {_			boolean foundAspectJAdvice = false__			for (Advisor advisor : advisors) {_				_				_				if (isAspectJAdvice(advisor)) {_					foundAspectJAdvice = true__				}_			}_			if (foundAspectJAdvice && !advisors.contains(ExposeInvocationInterceptor.ADVISOR)) {_				advisors.add(0, ExposeInvocationInterceptor.ADVISOR)__				return true__			}_		}_		return false__	};add,special,advisors,if,necessary,to,work,with,a,proxy,chain,that,contains,aspect,j,advisors,this,will,expose,the,current,spring,aop,invocation,necessary,for,some,aspect,j,pointcut,matching,and,make,available,the,current,aspect,j,join,point,the,call,will,have,no,effect,if,there,are,no,aspect,j,advisors,in,the,advisor,chain,param,advisors,advisors,available,return,code,true,if,any,special,link,advisor,advisors,were,added,otherwise,code,false;public,static,boolean,make,advisor,chain,aspect,jcapable,if,necessary,list,advisor,advisors,if,advisors,is,empty,boolean,found,aspect,jadvice,false,for,advisor,advisor,advisors,if,is,aspect,jadvice,advisor,found,aspect,jadvice,true,if,found,aspect,jadvice,advisors,contains,expose,invocation,interceptor,advisor,advisors,add,0,expose,invocation,interceptor,advisor,return,true,return,false
AspectJProxyUtils -> public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors);1362408075;Add special advisors if necessary to work with a proxy chain that contains AspectJ advisors._This will expose the current Spring AOP invocation (necessary for some AspectJ pointcut matching)_and make available the current AspectJ JoinPoint. The call will have no effect if there are no_AspectJ advisors in the advisor chain._@param advisors Advisors available_@return {@code true} if any special {@link Advisor Advisors} were added, otherwise {@code false}.;public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors) {_		_		if (!advisors.isEmpty()) {_			boolean foundAspectJAdvice = false__			for (Advisor advisor : advisors) {_				_				_				if (isAspectJAdvice(advisor)) {_					foundAspectJAdvice = true__				}_			}_			if (foundAspectJAdvice && !advisors.contains(ExposeInvocationInterceptor.ADVISOR)) {_				advisors.add(0, ExposeInvocationInterceptor.ADVISOR)__				return true__			}_		}_		return false__	};add,special,advisors,if,necessary,to,work,with,a,proxy,chain,that,contains,aspect,j,advisors,this,will,expose,the,current,spring,aop,invocation,necessary,for,some,aspect,j,pointcut,matching,and,make,available,the,current,aspect,j,join,point,the,call,will,have,no,effect,if,there,are,no,aspect,j,advisors,in,the,advisor,chain,param,advisors,advisors,available,return,code,true,if,any,special,link,advisor,advisors,were,added,otherwise,code,false;public,static,boolean,make,advisor,chain,aspect,jcapable,if,necessary,list,advisor,advisors,if,advisors,is,empty,boolean,found,aspect,jadvice,false,for,advisor,advisor,advisors,if,is,aspect,jadvice,advisor,found,aspect,jadvice,true,if,found,aspect,jadvice,advisors,contains,expose,invocation,interceptor,advisor,advisors,add,0,expose,invocation,interceptor,advisor,return,true,return,false
AspectJProxyUtils -> public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors);1530174524;Add special advisors if necessary to work with a proxy chain that contains AspectJ advisors._This will expose the current Spring AOP invocation (necessary for some AspectJ pointcut matching)_and make available the current AspectJ JoinPoint. The call will have no effect if there are no_AspectJ advisors in the advisor chain._@param advisors the advisors available_@return {@code true} if any special {@link Advisor Advisors} were added, otherwise {@code false};public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors) {_		_		if (!advisors.isEmpty()) {_			boolean foundAspectJAdvice = false__			for (Advisor advisor : advisors) {_				_				_				if (isAspectJAdvice(advisor)) {_					foundAspectJAdvice = true__				}_			}_			if (foundAspectJAdvice && !advisors.contains(ExposeInvocationInterceptor.ADVISOR)) {_				advisors.add(0, ExposeInvocationInterceptor.ADVISOR)__				return true__			}_		}_		return false__	};add,special,advisors,if,necessary,to,work,with,a,proxy,chain,that,contains,aspect,j,advisors,this,will,expose,the,current,spring,aop,invocation,necessary,for,some,aspect,j,pointcut,matching,and,make,available,the,current,aspect,j,join,point,the,call,will,have,no,effect,if,there,are,no,aspect,j,advisors,in,the,advisor,chain,param,advisors,the,advisors,available,return,code,true,if,any,special,link,advisor,advisors,were,added,otherwise,code,false;public,static,boolean,make,advisor,chain,aspect,jcapable,if,necessary,list,advisor,advisors,if,advisors,is,empty,boolean,found,aspect,jadvice,false,for,advisor,advisor,advisors,if,is,aspect,jadvice,advisor,found,aspect,jadvice,true,if,found,aspect,jadvice,advisors,contains,expose,invocation,interceptor,advisor,advisors,add,0,expose,invocation,interceptor,advisor,return,true,return,false
AspectJProxyUtils -> public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors);1530174524;Add special advisors if necessary to work with a proxy chain that contains AspectJ advisors._This will expose the current Spring AOP invocation (necessary for some AspectJ pointcut matching)_and make available the current AspectJ JoinPoint. The call will have no effect if there are no_AspectJ advisors in the advisor chain._@param advisors the advisors available_@return {@code true} if any special {@link Advisor Advisors} were added, otherwise {@code false};public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors) {_		_		if (!advisors.isEmpty()) {_			boolean foundAspectJAdvice = false__			for (Advisor advisor : advisors) {_				_				_				if (isAspectJAdvice(advisor)) {_					foundAspectJAdvice = true__				}_			}_			if (foundAspectJAdvice && !advisors.contains(ExposeInvocationInterceptor.ADVISOR)) {_				advisors.add(0, ExposeInvocationInterceptor.ADVISOR)__				return true__			}_		}_		return false__	};add,special,advisors,if,necessary,to,work,with,a,proxy,chain,that,contains,aspect,j,advisors,this,will,expose,the,current,spring,aop,invocation,necessary,for,some,aspect,j,pointcut,matching,and,make,available,the,current,aspect,j,join,point,the,call,will,have,no,effect,if,there,are,no,aspect,j,advisors,in,the,advisor,chain,param,advisors,the,advisors,available,return,code,true,if,any,special,link,advisor,advisors,were,added,otherwise,code,false;public,static,boolean,make,advisor,chain,aspect,jcapable,if,necessary,list,advisor,advisors,if,advisors,is,empty,boolean,found,aspect,jadvice,false,for,advisor,advisor,advisors,if,is,aspect,jadvice,advisor,found,aspect,jadvice,true,if,found,aspect,jadvice,advisors,contains,expose,invocation,interceptor,advisor,advisors,add,0,expose,invocation,interceptor,advisor,return,true,return,false
AspectJProxyUtils -> public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors);1551113869;Add special advisors if necessary to work with a proxy chain that contains AspectJ advisors:_concretely, {@link ExposeInvocationInterceptor} at the beginning of the list._<p>This will expose the current Spring AOP invocation (necessary for some AspectJ pointcut_matching) and make available the current AspectJ JoinPoint. The call will have no effect_if there are no AspectJ advisors in the advisor chain._@param advisors the advisors available_@return {@code true} if an {@link ExposeInvocationInterceptor} was added to the list,_otherwise {@code false};public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors) {_		_		if (!advisors.isEmpty()) {_			boolean foundAspectJAdvice = false__			for (Advisor advisor : advisors) {_				_				_				if (isAspectJAdvice(advisor)) {_					foundAspectJAdvice = true__					break__				}_			}_			if (foundAspectJAdvice && !advisors.contains(ExposeInvocationInterceptor.ADVISOR)) {_				advisors.add(0, ExposeInvocationInterceptor.ADVISOR)__				return true__			}_		}_		return false__	};add,special,advisors,if,necessary,to,work,with,a,proxy,chain,that,contains,aspect,j,advisors,concretely,link,expose,invocation,interceptor,at,the,beginning,of,the,list,p,this,will,expose,the,current,spring,aop,invocation,necessary,for,some,aspect,j,pointcut,matching,and,make,available,the,current,aspect,j,join,point,the,call,will,have,no,effect,if,there,are,no,aspect,j,advisors,in,the,advisor,chain,param,advisors,the,advisors,available,return,code,true,if,an,link,expose,invocation,interceptor,was,added,to,the,list,otherwise,code,false;public,static,boolean,make,advisor,chain,aspect,jcapable,if,necessary,list,advisor,advisors,if,advisors,is,empty,boolean,found,aspect,jadvice,false,for,advisor,advisor,advisors,if,is,aspect,jadvice,advisor,found,aspect,jadvice,true,break,if,found,aspect,jadvice,advisors,contains,expose,invocation,interceptor,advisor,advisors,add,0,expose,invocation,interceptor,advisor,return,true,return,false
AspectJProxyUtils -> private static boolean isAspectJAdvice(Advisor advisor);1328020251;Determine whether the given Advisor contains an AspectJ advice._@param advisor the Advisor to check;private static boolean isAspectJAdvice(Advisor advisor) {_		return (advisor instanceof InstantiationModelAwarePointcutAdvisor ||_			   advisor.getAdvice() instanceof AbstractAspectJAdvice ||_			   (advisor instanceof PointcutAdvisor &&_						 ((PointcutAdvisor) advisor).getPointcut() instanceof AspectJExpressionPointcut))__	};determine,whether,the,given,advisor,contains,an,aspect,j,advice,param,advisor,the,advisor,to,check;private,static,boolean,is,aspect,jadvice,advisor,advisor,return,advisor,instanceof,instantiation,model,aware,pointcut,advisor,advisor,get,advice,instanceof,abstract,aspect,jadvice,advisor,instanceof,pointcut,advisor,pointcut,advisor,advisor,get,pointcut,instanceof,aspect,jexpression,pointcut
AspectJProxyUtils -> private static boolean isAspectJAdvice(Advisor advisor);1356735495;Determine whether the given Advisor contains an AspectJ advice._@param advisor the Advisor to check;private static boolean isAspectJAdvice(Advisor advisor) {_		return (advisor instanceof InstantiationModelAwarePointcutAdvisor ||_			   advisor.getAdvice() instanceof AbstractAspectJAdvice ||_			   (advisor instanceof PointcutAdvisor &&_						 ((PointcutAdvisor) advisor).getPointcut() instanceof AspectJExpressionPointcut))__	};determine,whether,the,given,advisor,contains,an,aspect,j,advice,param,advisor,the,advisor,to,check;private,static,boolean,is,aspect,jadvice,advisor,advisor,return,advisor,instanceof,instantiation,model,aware,pointcut,advisor,advisor,get,advice,instanceof,abstract,aspect,jadvice,advisor,instanceof,pointcut,advisor,pointcut,advisor,advisor,get,pointcut,instanceof,aspect,jexpression,pointcut
AspectJProxyUtils -> private static boolean isAspectJAdvice(Advisor advisor);1362408075;Determine whether the given Advisor contains an AspectJ advice._@param advisor the Advisor to check;private static boolean isAspectJAdvice(Advisor advisor) {_		return (advisor instanceof InstantiationModelAwarePointcutAdvisor ||_				advisor.getAdvice() instanceof AbstractAspectJAdvice ||_				(advisor instanceof PointcutAdvisor &&_						 ((PointcutAdvisor) advisor).getPointcut() instanceof AspectJExpressionPointcut))__	};determine,whether,the,given,advisor,contains,an,aspect,j,advice,param,advisor,the,advisor,to,check;private,static,boolean,is,aspect,jadvice,advisor,advisor,return,advisor,instanceof,instantiation,model,aware,pointcut,advisor,advisor,get,advice,instanceof,abstract,aspect,jadvice,advisor,instanceof,pointcut,advisor,pointcut,advisor,advisor,get,pointcut,instanceof,aspect,jexpression,pointcut
AspectJProxyUtils -> private static boolean isAspectJAdvice(Advisor advisor);1530174524;Determine whether the given Advisor contains an AspectJ advice._@param advisor the Advisor to check;private static boolean isAspectJAdvice(Advisor advisor) {_		return (advisor instanceof InstantiationModelAwarePointcutAdvisor ||_				advisor.getAdvice() instanceof AbstractAspectJAdvice ||_				(advisor instanceof PointcutAdvisor &&_						 ((PointcutAdvisor) advisor).getPointcut() instanceof AspectJExpressionPointcut))__	};determine,whether,the,given,advisor,contains,an,aspect,j,advice,param,advisor,the,advisor,to,check;private,static,boolean,is,aspect,jadvice,advisor,advisor,return,advisor,instanceof,instantiation,model,aware,pointcut,advisor,advisor,get,advice,instanceof,abstract,aspect,jadvice,advisor,instanceof,pointcut,advisor,pointcut,advisor,advisor,get,pointcut,instanceof,aspect,jexpression,pointcut
AspectJProxyUtils -> private static boolean isAspectJAdvice(Advisor advisor);1530174524;Determine whether the given Advisor contains an AspectJ advice._@param advisor the Advisor to check;private static boolean isAspectJAdvice(Advisor advisor) {_		return (advisor instanceof InstantiationModelAwarePointcutAdvisor ||_				advisor.getAdvice() instanceof AbstractAspectJAdvice ||_				(advisor instanceof PointcutAdvisor &&_						((PointcutAdvisor) advisor).getPointcut() instanceof AspectJExpressionPointcut))__	};determine,whether,the,given,advisor,contains,an,aspect,j,advice,param,advisor,the,advisor,to,check;private,static,boolean,is,aspect,jadvice,advisor,advisor,return,advisor,instanceof,instantiation,model,aware,pointcut,advisor,advisor,get,advice,instanceof,abstract,aspect,jadvice,advisor,instanceof,pointcut,advisor,pointcut,advisor,advisor,get,pointcut,instanceof,aspect,jexpression,pointcut
AspectJProxyUtils -> private static boolean isAspectJAdvice(Advisor advisor);1551113869;Determine whether the given Advisor contains an AspectJ advice._@param advisor the Advisor to check;private static boolean isAspectJAdvice(Advisor advisor) {_		return (advisor instanceof InstantiationModelAwarePointcutAdvisor ||_				advisor.getAdvice() instanceof AbstractAspectJAdvice ||_				(advisor instanceof PointcutAdvisor &&_						((PointcutAdvisor) advisor).getPointcut() instanceof AspectJExpressionPointcut))__	};determine,whether,the,given,advisor,contains,an,aspect,j,advice,param,advisor,the,advisor,to,check;private,static,boolean,is,aspect,jadvice,advisor,advisor,return,advisor,instanceof,instantiation,model,aware,pointcut,advisor,advisor,get,advice,instanceof,abstract,aspect,jadvice,advisor,instanceof,pointcut,advisor,pointcut,advisor,advisor,get,pointcut,instanceof,aspect,jexpression,pointcut
