commented;modifiers;parameterAmount;loc;comment;code
true;;0;3;/**  * Return the type of targets returned by this {@link TargetSource}.  * <p>Can return {@code null}, although certain usages of a {@code TargetSource}  * might just work with a predetermined target class.  * @return the type of targets returned by this {@link TargetSource}  */ ;/**  * Return the type of targets returned by this {@link TargetSource}.  * <p>Can return {@code null}, although certain usages of a {@code TargetSource}  * might just work with a predetermined target class.  * @return the type of targets returned by this {@link TargetSource}  */ @Override @Nullable Class<?> getTargetClass().
true;;0;1;/**  * Will all calls to {@link #getTarget()} return the same object?  * <p>In that case, there will be no need to invoke {@link #releaseTarget(Object)},  * and the AOP framework can cache the return value of {@link #getTarget()}.  * @return {@code true} if the target is immutable  * @see #getTarget  */ ;/**  * Will all calls to {@link #getTarget()} return the same object?  * <p>In that case, there will be no need to invoke {@link #releaseTarget(Object)},  * and the AOP framework can cache the return value of {@link #getTarget()}.  * @return {@code true} if the target is immutable  * @see #getTarget  */ boolean isStatic().
true;;0;2;/**  * Return a target instance. Invoked immediately before the  * AOP framework calls the "target" of an AOP method invocation.  * @return the target object which contains the joinpoint,  * or {@code null} if there is no actual target instance  * @throws Exception if the target object can't be resolved  */ ;/**  * Return a target instance. Invoked immediately before the  * AOP framework calls the "target" of an AOP method invocation.  * @return the target object which contains the joinpoint,  * or {@code null} if there is no actual target instance  * @throws Exception if the target object can't be resolved  */ @Nullable Object getTarget() throws Exception.
true;;1;1;/**  * Release the given target object obtained from the  * {@link #getTarget()} method, if any.  * @param target object obtained from a call to {@link #getTarget()}  * @throws Exception if the object can't be released  */ ;/**  * Release the given target object obtained from the  * {@link #getTarget()} method, if any.  * @param target object obtained from a call to {@link #getTarget()}  * @throws Exception if the object can't be released  */ void releaseTarget(Object target) throws Exception.
