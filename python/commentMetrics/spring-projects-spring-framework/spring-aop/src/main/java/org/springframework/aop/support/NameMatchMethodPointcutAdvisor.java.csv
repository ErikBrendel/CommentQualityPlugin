commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link ClassFilter} to use for this pointcut.  * Default is {@link ClassFilter#TRUE}.  * @see NameMatchMethodPointcut#setClassFilter  */ ;/**  * Set the {@link ClassFilter} to use for this pointcut.  * Default is {@link ClassFilter#TRUE}.  * @see NameMatchMethodPointcut#setClassFilter  */ public void setClassFilter(ClassFilter classFilter) {     this.pointcut.setClassFilter(classFilter). }
true;public;1;3;/**  * Convenience method when we have only a single method name to match.  * Use either this method or {@code setMappedNames}, not both.  * @see #setMappedNames  * @see NameMatchMethodPointcut#setMappedName  */ ;/**  * Convenience method when we have only a single method name to match.  * Use either this method or {@code setMappedNames}, not both.  * @see #setMappedNames  * @see NameMatchMethodPointcut#setMappedName  */ public void setMappedName(String mappedName) {     this.pointcut.setMappedName(mappedName). }
true;public;1;3;/**  * Set the method names defining methods to match.  * Matching will be the union of all these. if any match,  * the pointcut matches.  * @see NameMatchMethodPointcut#setMappedNames  */ ;/**  * Set the method names defining methods to match.  * Matching will be the union of all these. if any match,  * the pointcut matches.  * @see NameMatchMethodPointcut#setMappedNames  */ public void setMappedNames(String... mappedNames) {     this.pointcut.setMappedNames(mappedNames). }
true;public;1;3;/**  * Add another eligible method name, in addition to those already named.  * Like the set methods, this method is for use when configuring proxies,  * before a proxy is used.  * @param name name of the additional method that will match  * @return this pointcut to allow for multiple additions in one line  * @see NameMatchMethodPointcut#addMethodName  */ ;/**  * Add another eligible method name, in addition to those already named.  * Like the set methods, this method is for use when configuring proxies,  * before a proxy is used.  * @param name name of the additional method that will match  * @return this pointcut to allow for multiple additions in one line  * @see NameMatchMethodPointcut#addMethodName  */ public NameMatchMethodPointcut addMethodName(String name) {     return this.pointcut.addMethodName(name). }
false;public;0;4;;@Override public Pointcut getPointcut() {     return this.pointcut. }
