commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the advice part of this aspect. An advice may be an  * interceptor, a before advice, a throws advice, etc.  * @return the advice that should apply if the pointcut matches  * @see org.aopalliance.intercept.MethodInterceptor  * @see BeforeAdvice  * @see ThrowsAdvice  * @see AfterReturningAdvice  */ ;/**  * Return the advice part of this aspect. An advice may be an  * interceptor, a before advice, a throws advice, etc.  * @return the advice that should apply if the pointcut matches  * @see org.aopalliance.intercept.MethodInterceptor  * @see BeforeAdvice  * @see ThrowsAdvice  * @see AfterReturningAdvice  */ Advice getAdvice().
true;;0;1;/**  * Return whether this advice is associated with a particular instance  * (for example, creating a mixin) or shared with all instances of  * the advised class obtained from the same Spring bean factory.  * <p><b>Note that this method is not currently used by the framework.</b>  * Typical Advisor implementations always return {@code true}.  * Use singleton/prototype bean definitions or appropriate programmatic  * proxy creation to ensure that Advisors have the correct lifecycle model.  * @return whether this advice is associated with a particular target instance  */ ;/**  * Return whether this advice is associated with a particular instance  * (for example, creating a mixin) or shared with all instances of  * the advised class obtained from the same Spring bean factory.  * <p><b>Note that this method is not currently used by the framework.</b>  * Typical Advisor implementations always return {@code true}.  * Use singleton/prototype bean definitions or appropriate programmatic  * proxy creation to ensure that Advisors have the correct lifecycle model.  * @return whether this advice is associated with a particular target instance  */ boolean isPerInstance().
