commented;modifiers;parameterAmount;loc;comment;code
true;public;1;7;/**  * Add the specified interface to the list of interfaces to introduce.  * @param intf the interface to introduce  */ ;/**  * Add the specified interface to the list of interfaces to introduce.  * @param intf the interface to introduce  */ public void addInterface(Class<?> intf) {     Assert.notNull(intf, "Interface must not be null").     if (!intf.isInterface()) {         throw new IllegalArgumentException("Specified class [" + intf.getName() + "] must be an interface").     }     this.interfaces.add(intf). }
false;public;0;4;;@Override public Class<?>[] getInterfaces() {     return ClassUtils.toClassArray(this.interfaces). }
false;public;0;10;;@Override public void validateInterfaces() throws IllegalArgumentException {     for (Class<?> ifc : this.interfaces) {         if (this.advice instanceof DynamicIntroductionAdvice && !((DynamicIntroductionAdvice) this.advice).implementsInterface(ifc)) {             throw new IllegalArgumentException("DynamicIntroductionAdvice [" + this.advice + "] " + "does not implement interface [" + ifc.getName() + "] specified for introduction").         }     } }
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
false;public;0;4;;@Override public Advice getAdvice() {     return this.advice. }
false;public;0;4;;@Override public boolean isPerInstance() {     return true. }
false;public;0;4;;@Override public ClassFilter getClassFilter() {     return this. }
false;public;1;4;;@Override public boolean matches(Class<?> clazz) {     return true. }
false;public;1;11;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof DefaultIntroductionAdvisor)) {         return false.     }     DefaultIntroductionAdvisor otherAdvisor = (DefaultIntroductionAdvisor) other.     return (this.advice.equals(otherAdvisor.advice) && this.interfaces.equals(otherAdvisor.interfaces)). }
false;public;0;4;;@Override public int hashCode() {     return this.advice.hashCode() * 13 + this.interfaces.hashCode(). }
false;public;0;5;;@Override public String toString() {     return ClassUtils.getShortName(getClass()) + ": advice [" + this.advice + "]. interfaces " + ClassUtils.classNamesToString(this.interfaces). }
