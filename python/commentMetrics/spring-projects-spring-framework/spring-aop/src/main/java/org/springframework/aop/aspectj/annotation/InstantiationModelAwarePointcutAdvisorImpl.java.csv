# id;timestamp;commentText;codeText;commentWords;codeWords
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public synchronized Advice getAdvice();1356735495;Lazily instantiate advice if necessary.;@Override_	public synchronized Advice getAdvice() {_		if (this.instantiatedAdvice == null) {_			this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut)__		}_		return this.instantiatedAdvice__	};lazily,instantiate,advice,if,necessary;override,public,synchronized,advice,get,advice,if,this,instantiated,advice,null,this,instantiated,advice,instantiate,advice,this,declared,pointcut,return,this,instantiated,advice
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public synchronized Advice getAdvice();1368482696;Lazily instantiate advice if necessary.;@Override_	public synchronized Advice getAdvice() {_		if (this.instantiatedAdvice == null) {_			this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut)__		}_		return this.instantiatedAdvice__	};lazily,instantiate,advice,if,necessary;override,public,synchronized,advice,get,advice,if,this,instantiated,advice,null,this,instantiated,advice,instantiate,advice,this,declared,pointcut,return,this,instantiated,advice
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public synchronized Advice getAdvice();1385412762;Lazily instantiate advice if necessary.;@Override_	public synchronized Advice getAdvice() {_		if (this.instantiatedAdvice == null) {_			this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut)__		}_		return this.instantiatedAdvice__	};lazily,instantiate,advice,if,necessary;override,public,synchronized,advice,get,advice,if,this,instantiated,advice,null,this,instantiated,advice,instantiate,advice,this,declared,pointcut,return,this,instantiated,advice
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public synchronized Advice getAdvice();1450815633;Lazily instantiate advice if necessary.;@Override_	public synchronized Advice getAdvice() {_		if (this.instantiatedAdvice == null) {_			this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut)__		}_		return this.instantiatedAdvice__	};lazily,instantiate,advice,if,necessary;override,public,synchronized,advice,get,advice,if,this,instantiated,advice,null,this,instantiated,advice,instantiate,advice,this,declared,pointcut,return,this,instantiated,advice
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public synchronized Advice getAdvice();1450827071;Lazily instantiate advice if necessary.;@Override_	public synchronized Advice getAdvice() {_		if (this.instantiatedAdvice == null) {_			this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut)__		}_		return this.instantiatedAdvice__	};lazily,instantiate,advice,if,necessary;override,public,synchronized,advice,get,advice,if,this,instantiated,advice,null,this,instantiated,advice,instantiate,advice,this,declared,pointcut,return,this,instantiated,advice
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public synchronized Advice getAdvice();1496242568;Lazily instantiate advice if necessary.;@Override_	public synchronized Advice getAdvice() {_		if (this.instantiatedAdvice == null) {_			this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut)__		}_		return this.instantiatedAdvice__	};lazily,instantiate,advice,if,necessary;override,public,synchronized,advice,get,advice,if,this,instantiated,advice,null,this,instantiated,advice,instantiate,advice,this,declared,pointcut,return,this,instantiated,advice
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public synchronized Advice getAdvice();1496837955;Lazily instantiate advice if necessary.;@Override_	public synchronized Advice getAdvice() {_		if (this.instantiatedAdvice == null) {_			this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut)__		}_		return this.instantiatedAdvice__	};lazily,instantiate,advice,if,necessary;override,public,synchronized,advice,get,advice,if,this,instantiated,advice,null,this,instantiated,advice,instantiate,advice,this,declared,pointcut,return,this,instantiated,advice
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public synchronized Advice getAdvice();1498780456;Lazily instantiate advice if necessary.;@Override_	public synchronized Advice getAdvice() {_		if (this.instantiatedAdvice == null) {_			this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut)__		}_		return this.instantiatedAdvice__	};lazily,instantiate,advice,if,necessary;override,public,synchronized,advice,get,advice,if,this,instantiated,advice,null,this,instantiated,advice,instantiate,advice,this,declared,pointcut,return,this,instantiated,advice
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public synchronized Advice getAdvice();1518260959;Lazily instantiate advice if necessary.;@Override_	public synchronized Advice getAdvice() {_		if (this.instantiatedAdvice == null) {_			this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut)__		}_		return this.instantiatedAdvice__	};lazily,instantiate,advice,if,necessary;override,public,synchronized,advice,get,advice,if,this,instantiated,advice,null,this,instantiated,advice,instantiate,advice,this,declared,pointcut,return,this,instantiated,advice
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public synchronized Advice getAdvice();1530174524;Lazily instantiate advice if necessary.;@Override_	public synchronized Advice getAdvice() {_		if (this.instantiatedAdvice == null) {_			this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut)__		}_		return this.instantiatedAdvice__	};lazily,instantiate,advice,if,necessary;override,public,synchronized,advice,get,advice,if,this,instantiated,advice,null,this,instantiated,advice,instantiate,advice,this,declared,pointcut,return,this,instantiated,advice
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public synchronized Advice getAdvice();1532038651;Lazily instantiate advice if necessary.;@Override_	public synchronized Advice getAdvice() {_		if (this.instantiatedAdvice == null) {_			this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut)__		}_		return this.instantiatedAdvice__	};lazily,instantiate,advice,if,necessary;override,public,synchronized,advice,get,advice,if,this,instantiated,advice,null,this,instantiated,advice,instantiate,advice,this,declared,pointcut,return,this,instantiated,advice
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public synchronized Advice getAdvice();1533776825;Lazily instantiate advice if necessary.;@Override_	public synchronized Advice getAdvice() {_		if (this.instantiatedAdvice == null) {_			this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut)__		}_		return this.instantiatedAdvice__	};lazily,instantiate,advice,if,necessary;override,public,synchronized,advice,get,advice,if,this,instantiated,advice,null,this,instantiated,advice,instantiate,advice,this,declared,pointcut,return,this,instantiated,advice
InstantiationModelAwarePointcutAdvisorImpl -> public synchronized Advice getAdvice();1328020251;Lazily instantiate advice if necessary.;public synchronized Advice getAdvice() {_		if (this.instantiatedAdvice == null) {_			this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut)__		}_		return this.instantiatedAdvice__	};lazily,instantiate,advice,if,necessary;public,synchronized,advice,get,advice,if,this,instantiated,advice,null,this,instantiated,advice,instantiate,advice,this,declared,pointcut,return,this,instantiated,advice
InstantiationModelAwarePointcutAdvisorImpl -> public synchronized Advice getAdvice();1357119239;Lazily instantiate advice if necessary.;public synchronized Advice getAdvice() {_		if (this.instantiatedAdvice == null) {_			this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut)__		}_		return this.instantiatedAdvice__	};lazily,instantiate,advice,if,necessary;public,synchronized,advice,get,advice,if,this,instantiated,advice,null,this,instantiated,advice,instantiate,advice,this,declared,pointcut,return,this,instantiated,advice
InstantiationModelAwarePointcutAdvisorImpl -> public synchronized Advice getAdvice();1362408075;Lazily instantiate advice if necessary.;public synchronized Advice getAdvice() {_		if (this.instantiatedAdvice == null) {_			this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut)__		}_		return this.instantiatedAdvice__	};lazily,instantiate,advice,if,necessary;public,synchronized,advice,get,advice,if,this,instantiated,advice,null,this,instantiated,advice,instantiate,advice,this,declared,pointcut,return,this,instantiated,advice
InstantiationModelAwarePointcutAdvisorImpl -> public boolean isPerInstance();1328020251;This is only of interest for Spring AOP: AspectJ instantiation semantics_are much richer. In AspectJ terminology, all a return of <code>true</code>_means here is that the aspect is not a SINGLETON.;public boolean isPerInstance() {_		return (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON)__	};this,is,only,of,interest,for,spring,aop,aspect,j,instantiation,semantics,are,much,richer,in,aspect,j,terminology,all,a,return,of,code,true,code,means,here,is,that,the,aspect,is,not,a,singleton;public,boolean,is,per,instance,return,get,aspect,metadata,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton
InstantiationModelAwarePointcutAdvisorImpl -> public boolean isPerInstance();1357119239;This is only of interest for Spring AOP: AspectJ instantiation semantics_are much richer. In AspectJ terminology, all a return of {@code true}_means here is that the aspect is not a SINGLETON.;public boolean isPerInstance() {_		return (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON)__	};this,is,only,of,interest,for,spring,aop,aspect,j,instantiation,semantics,are,much,richer,in,aspect,j,terminology,all,a,return,of,code,true,means,here,is,that,the,aspect,is,not,a,singleton;public,boolean,is,per,instance,return,get,aspect,metadata,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton
InstantiationModelAwarePointcutAdvisorImpl -> public boolean isPerInstance();1362408075;This is only of interest for Spring AOP: AspectJ instantiation semantics_are much richer. In AspectJ terminology, all a return of {@code true}_means here is that the aspect is not a SINGLETON.;public boolean isPerInstance() {_		return (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON)__	};this,is,only,of,interest,for,spring,aop,aspect,j,instantiation,semantics,are,much,richer,in,aspect,j,terminology,all,a,return,of,code,true,means,here,is,that,the,aspect,is,not,a,singleton;public,boolean,is,per,instance,return,get,aspect,metadata,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton
InstantiationModelAwarePointcutAdvisorImpl -> public AspectMetadata getAspectMetadata();1328020251;Return the AspectJ AspectMetadata for this advisor.;public AspectMetadata getAspectMetadata() {_		return this.aspectInstanceFactory.getAspectMetadata()__	};return,the,aspect,j,aspect,metadata,for,this,advisor;public,aspect,metadata,get,aspect,metadata,return,this,aspect,instance,factory,get,aspect,metadata
InstantiationModelAwarePointcutAdvisorImpl -> public AspectMetadata getAspectMetadata();1356735495;Return the AspectJ AspectMetadata for this advisor.;public AspectMetadata getAspectMetadata() {_		return this.aspectInstanceFactory.getAspectMetadata()__	};return,the,aspect,j,aspect,metadata,for,this,advisor;public,aspect,metadata,get,aspect,metadata,return,this,aspect,instance,factory,get,aspect,metadata
InstantiationModelAwarePointcutAdvisorImpl -> public AspectMetadata getAspectMetadata();1357119239;Return the AspectJ AspectMetadata for this advisor.;public AspectMetadata getAspectMetadata() {_		return this.aspectInstanceFactory.getAspectMetadata()__	};return,the,aspect,j,aspect,metadata,for,this,advisor;public,aspect,metadata,get,aspect,metadata,return,this,aspect,instance,factory,get,aspect,metadata
InstantiationModelAwarePointcutAdvisorImpl -> public AspectMetadata getAspectMetadata();1362408075;Return the AspectJ AspectMetadata for this advisor.;public AspectMetadata getAspectMetadata() {_		return this.aspectInstanceFactory.getAspectMetadata()__	};return,the,aspect,j,aspect,metadata,for,this,advisor;public,aspect,metadata,get,aspect,metadata,return,this,aspect,instance,factory,get,aspect,metadata
InstantiationModelAwarePointcutAdvisorImpl -> public AspectMetadata getAspectMetadata();1368482696;Return the AspectJ AspectMetadata for this advisor.;public AspectMetadata getAspectMetadata() {_		return this.aspectInstanceFactory.getAspectMetadata()__	};return,the,aspect,j,aspect,metadata,for,this,advisor;public,aspect,metadata,get,aspect,metadata,return,this,aspect,instance,factory,get,aspect,metadata
InstantiationModelAwarePointcutAdvisorImpl -> public AspectMetadata getAspectMetadata();1385412762;Return the AspectJ AspectMetadata for this advisor.;public AspectMetadata getAspectMetadata() {_		return this.aspectInstanceFactory.getAspectMetadata()__	};return,the,aspect,j,aspect,metadata,for,this,advisor;public,aspect,metadata,get,aspect,metadata,return,this,aspect,instance,factory,get,aspect,metadata
InstantiationModelAwarePointcutAdvisorImpl -> public AspectMetadata getAspectMetadata();1450815633;Return the AspectJ AspectMetadata for this advisor.;public AspectMetadata getAspectMetadata() {_		return this.aspectInstanceFactory.getAspectMetadata()__	};return,the,aspect,j,aspect,metadata,for,this,advisor;public,aspect,metadata,get,aspect,metadata,return,this,aspect,instance,factory,get,aspect,metadata
InstantiationModelAwarePointcutAdvisorImpl -> public AspectMetadata getAspectMetadata();1450827071;Return the AspectJ AspectMetadata for this advisor.;public AspectMetadata getAspectMetadata() {_		return this.aspectInstanceFactory.getAspectMetadata()__	};return,the,aspect,j,aspect,metadata,for,this,advisor;public,aspect,metadata,get,aspect,metadata,return,this,aspect,instance,factory,get,aspect,metadata
InstantiationModelAwarePointcutAdvisorImpl -> public AspectMetadata getAspectMetadata();1496242568;Return the AspectJ AspectMetadata for this advisor.;public AspectMetadata getAspectMetadata() {_		return this.aspectInstanceFactory.getAspectMetadata()__	};return,the,aspect,j,aspect,metadata,for,this,advisor;public,aspect,metadata,get,aspect,metadata,return,this,aspect,instance,factory,get,aspect,metadata
InstantiationModelAwarePointcutAdvisorImpl -> public AspectMetadata getAspectMetadata();1496837955;Return the AspectJ AspectMetadata for this advisor.;public AspectMetadata getAspectMetadata() {_		return this.aspectInstanceFactory.getAspectMetadata()__	};return,the,aspect,j,aspect,metadata,for,this,advisor;public,aspect,metadata,get,aspect,metadata,return,this,aspect,instance,factory,get,aspect,metadata
InstantiationModelAwarePointcutAdvisorImpl -> public AspectMetadata getAspectMetadata();1498780456;Return the AspectJ AspectMetadata for this advisor.;public AspectMetadata getAspectMetadata() {_		return this.aspectInstanceFactory.getAspectMetadata()__	};return,the,aspect,j,aspect,metadata,for,this,advisor;public,aspect,metadata,get,aspect,metadata,return,this,aspect,instance,factory,get,aspect,metadata
InstantiationModelAwarePointcutAdvisorImpl -> public AspectMetadata getAspectMetadata();1518260959;Return the AspectJ AspectMetadata for this advisor.;public AspectMetadata getAspectMetadata() {_		return this.aspectInstanceFactory.getAspectMetadata()__	};return,the,aspect,j,aspect,metadata,for,this,advisor;public,aspect,metadata,get,aspect,metadata,return,this,aspect,instance,factory,get,aspect,metadata
InstantiationModelAwarePointcutAdvisorImpl -> public AspectMetadata getAspectMetadata();1530174524;Return the AspectJ AspectMetadata for this advisor.;public AspectMetadata getAspectMetadata() {_		return this.aspectInstanceFactory.getAspectMetadata()__	};return,the,aspect,j,aspect,metadata,for,this,advisor;public,aspect,metadata,get,aspect,metadata,return,this,aspect,instance,factory,get,aspect,metadata
InstantiationModelAwarePointcutAdvisorImpl -> public AspectMetadata getAspectMetadata();1532038651;Return the AspectJ AspectMetadata for this advisor.;public AspectMetadata getAspectMetadata() {_		return this.aspectInstanceFactory.getAspectMetadata()__	};return,the,aspect,j,aspect,metadata,for,this,advisor;public,aspect,metadata,get,aspect,metadata,return,this,aspect,instance,factory,get,aspect,metadata
InstantiationModelAwarePointcutAdvisorImpl -> public AspectMetadata getAspectMetadata();1533776825;Return the AspectJ AspectMetadata for this advisor.;public AspectMetadata getAspectMetadata() {_		return this.aspectInstanceFactory.getAspectMetadata()__	};return,the,aspect,j,aspect,metadata,for,this,advisor;public,aspect,metadata,get,aspect,metadata,return,this,aspect,instance,factory,get,aspect,metadata
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public Pointcut getPointcut();1356735495;The pointcut for Spring AOP to use. Actual behaviour of the pointcut will change_depending on the state of the advice.;@Override_	public Pointcut getPointcut() {_		return this.pointcut__	};the,pointcut,for,spring,aop,to,use,actual,behaviour,of,the,pointcut,will,change,depending,on,the,state,of,the,advice;override,public,pointcut,get,pointcut,return,this,pointcut
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public Pointcut getPointcut();1368482696;The pointcut for Spring AOP to use. Actual behaviour of the pointcut will change_depending on the state of the advice.;@Override_	public Pointcut getPointcut() {_		return this.pointcut__	};the,pointcut,for,spring,aop,to,use,actual,behaviour,of,the,pointcut,will,change,depending,on,the,state,of,the,advice;override,public,pointcut,get,pointcut,return,this,pointcut
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public Pointcut getPointcut();1385412762;The pointcut for Spring AOP to use. Actual behaviour of the pointcut will change_depending on the state of the advice.;@Override_	public Pointcut getPointcut() {_		return this.pointcut__	};the,pointcut,for,spring,aop,to,use,actual,behaviour,of,the,pointcut,will,change,depending,on,the,state,of,the,advice;override,public,pointcut,get,pointcut,return,this,pointcut
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public Pointcut getPointcut();1450815633;The pointcut for Spring AOP to use. Actual behaviour of the pointcut will change_depending on the state of the advice.;@Override_	public Pointcut getPointcut() {_		return this.pointcut__	};the,pointcut,for,spring,aop,to,use,actual,behaviour,of,the,pointcut,will,change,depending,on,the,state,of,the,advice;override,public,pointcut,get,pointcut,return,this,pointcut
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public Pointcut getPointcut();1450827071;The pointcut for Spring AOP to use. Actual behaviour of the pointcut will change_depending on the state of the advice.;@Override_	public Pointcut getPointcut() {_		return this.pointcut__	};the,pointcut,for,spring,aop,to,use,actual,behaviour,of,the,pointcut,will,change,depending,on,the,state,of,the,advice;override,public,pointcut,get,pointcut,return,this,pointcut
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public Pointcut getPointcut();1496242568;The pointcut for Spring AOP to use. Actual behaviour of the pointcut will change_depending on the state of the advice.;@Override_	public Pointcut getPointcut() {_		return this.pointcut__	};the,pointcut,for,spring,aop,to,use,actual,behaviour,of,the,pointcut,will,change,depending,on,the,state,of,the,advice;override,public,pointcut,get,pointcut,return,this,pointcut
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public Pointcut getPointcut();1496837955;The pointcut for Spring AOP to use. Actual behaviour of the pointcut will change_depending on the state of the advice.;@Override_	public Pointcut getPointcut() {_		return this.pointcut__	};the,pointcut,for,spring,aop,to,use,actual,behaviour,of,the,pointcut,will,change,depending,on,the,state,of,the,advice;override,public,pointcut,get,pointcut,return,this,pointcut
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public Pointcut getPointcut();1498780456;The pointcut for Spring AOP to use. Actual behaviour of the pointcut will change_depending on the state of the advice.;@Override_	public Pointcut getPointcut() {_		return this.pointcut__	};the,pointcut,for,spring,aop,to,use,actual,behaviour,of,the,pointcut,will,change,depending,on,the,state,of,the,advice;override,public,pointcut,get,pointcut,return,this,pointcut
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public Pointcut getPointcut();1518260959;The pointcut for Spring AOP to use. Actual behaviour of the pointcut will change_depending on the state of the advice.;@Override_	public Pointcut getPointcut() {_		return this.pointcut__	};the,pointcut,for,spring,aop,to,use,actual,behaviour,of,the,pointcut,will,change,depending,on,the,state,of,the,advice;override,public,pointcut,get,pointcut,return,this,pointcut
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public Pointcut getPointcut();1530174524;The pointcut for Spring AOP to use. Actual behaviour of the pointcut will change_depending on the state of the advice.;@Override_	public Pointcut getPointcut() {_		return this.pointcut__	};the,pointcut,for,spring,aop,to,use,actual,behaviour,of,the,pointcut,will,change,depending,on,the,state,of,the,advice;override,public,pointcut,get,pointcut,return,this,pointcut
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public Pointcut getPointcut();1532038651;The pointcut for Spring AOP to use. Actual behaviour of the pointcut will change_depending on the state of the advice.;@Override_	public Pointcut getPointcut() {_		return this.pointcut__	};the,pointcut,for,spring,aop,to,use,actual,behaviour,of,the,pointcut,will,change,depending,on,the,state,of,the,advice;override,public,pointcut,get,pointcut,return,this,pointcut
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public Pointcut getPointcut();1533776825;The pointcut for Spring AOP to use._Actual behaviour of the pointcut will change depending on the state of the advice.;@Override_	public Pointcut getPointcut() {_		return this.pointcut__	};the,pointcut,for,spring,aop,to,use,actual,behaviour,of,the,pointcut,will,change,depending,on,the,state,of,the,advice;override,public,pointcut,get,pointcut,return,this,pointcut
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public boolean isPerInstance();1356735495;This is only of interest for Spring AOP: AspectJ instantiation semantics_are much richer. In AspectJ terminology, all a return of {@code true}_means here is that the aspect is not a SINGLETON.;@Override_	public boolean isPerInstance() {_		return (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON)__	};this,is,only,of,interest,for,spring,aop,aspect,j,instantiation,semantics,are,much,richer,in,aspect,j,terminology,all,a,return,of,code,true,means,here,is,that,the,aspect,is,not,a,singleton;override,public,boolean,is,per,instance,return,get,aspect,metadata,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public boolean isPerInstance();1368482696;This is only of interest for Spring AOP: AspectJ instantiation semantics_are much richer. In AspectJ terminology, all a return of {@code true}_means here is that the aspect is not a SINGLETON.;@Override_	public boolean isPerInstance() {_		return (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON)__	};this,is,only,of,interest,for,spring,aop,aspect,j,instantiation,semantics,are,much,richer,in,aspect,j,terminology,all,a,return,of,code,true,means,here,is,that,the,aspect,is,not,a,singleton;override,public,boolean,is,per,instance,return,get,aspect,metadata,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public boolean isPerInstance();1385412762;This is only of interest for Spring AOP: AspectJ instantiation semantics_are much richer. In AspectJ terminology, all a return of {@code true}_means here is that the aspect is not a SINGLETON.;@Override_	public boolean isPerInstance() {_		return (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON)__	};this,is,only,of,interest,for,spring,aop,aspect,j,instantiation,semantics,are,much,richer,in,aspect,j,terminology,all,a,return,of,code,true,means,here,is,that,the,aspect,is,not,a,singleton;override,public,boolean,is,per,instance,return,get,aspect,metadata,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public boolean isPerInstance();1450815633;This is only of interest for Spring AOP: AspectJ instantiation semantics_are much richer. In AspectJ terminology, all a return of {@code true}_means here is that the aspect is not a SINGLETON.;@Override_	public boolean isPerInstance() {_		return (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON)__	};this,is,only,of,interest,for,spring,aop,aspect,j,instantiation,semantics,are,much,richer,in,aspect,j,terminology,all,a,return,of,code,true,means,here,is,that,the,aspect,is,not,a,singleton;override,public,boolean,is,per,instance,return,get,aspect,metadata,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public boolean isPerInstance();1450827071;This is only of interest for Spring AOP: AspectJ instantiation semantics_are much richer. In AspectJ terminology, all a return of {@code true}_means here is that the aspect is not a SINGLETON.;@Override_	public boolean isPerInstance() {_		return (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON)__	};this,is,only,of,interest,for,spring,aop,aspect,j,instantiation,semantics,are,much,richer,in,aspect,j,terminology,all,a,return,of,code,true,means,here,is,that,the,aspect,is,not,a,singleton;override,public,boolean,is,per,instance,return,get,aspect,metadata,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public boolean isPerInstance();1496242568;This is only of interest for Spring AOP: AspectJ instantiation semantics_are much richer. In AspectJ terminology, all a return of {@code true}_means here is that the aspect is not a SINGLETON.;@Override_	public boolean isPerInstance() {_		return (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON)__	};this,is,only,of,interest,for,spring,aop,aspect,j,instantiation,semantics,are,much,richer,in,aspect,j,terminology,all,a,return,of,code,true,means,here,is,that,the,aspect,is,not,a,singleton;override,public,boolean,is,per,instance,return,get,aspect,metadata,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public boolean isPerInstance();1496837955;This is only of interest for Spring AOP: AspectJ instantiation semantics_are much richer. In AspectJ terminology, all a return of {@code true}_means here is that the aspect is not a SINGLETON.;@Override_	public boolean isPerInstance() {_		return (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON)__	};this,is,only,of,interest,for,spring,aop,aspect,j,instantiation,semantics,are,much,richer,in,aspect,j,terminology,all,a,return,of,code,true,means,here,is,that,the,aspect,is,not,a,singleton;override,public,boolean,is,per,instance,return,get,aspect,metadata,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public boolean isPerInstance();1498780456;This is only of interest for Spring AOP: AspectJ instantiation semantics_are much richer. In AspectJ terminology, all a return of {@code true}_means here is that the aspect is not a SINGLETON.;@Override_	public boolean isPerInstance() {_		return (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON)__	};this,is,only,of,interest,for,spring,aop,aspect,j,instantiation,semantics,are,much,richer,in,aspect,j,terminology,all,a,return,of,code,true,means,here,is,that,the,aspect,is,not,a,singleton;override,public,boolean,is,per,instance,return,get,aspect,metadata,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public boolean isPerInstance();1518260959;This is only of interest for Spring AOP: AspectJ instantiation semantics_are much richer. In AspectJ terminology, all a return of {@code true}_means here is that the aspect is not a SINGLETON.;@Override_	public boolean isPerInstance() {_		return (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON)__	};this,is,only,of,interest,for,spring,aop,aspect,j,instantiation,semantics,are,much,richer,in,aspect,j,terminology,all,a,return,of,code,true,means,here,is,that,the,aspect,is,not,a,singleton;override,public,boolean,is,per,instance,return,get,aspect,metadata,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public boolean isPerInstance();1530174524;This is only of interest for Spring AOP: AspectJ instantiation semantics_are much richer. In AspectJ terminology, all a return of {@code true}_means here is that the aspect is not a SINGLETON.;@Override_	public boolean isPerInstance() {_		return (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON)__	};this,is,only,of,interest,for,spring,aop,aspect,j,instantiation,semantics,are,much,richer,in,aspect,j,terminology,all,a,return,of,code,true,means,here,is,that,the,aspect,is,not,a,singleton;override,public,boolean,is,per,instance,return,get,aspect,metadata,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public boolean isPerInstance();1532038651;This is only of interest for Spring AOP: AspectJ instantiation semantics_are much richer. In AspectJ terminology, all a return of {@code true}_means here is that the aspect is not a SINGLETON.;@Override_	public boolean isPerInstance() {_		return (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON)__	};this,is,only,of,interest,for,spring,aop,aspect,j,instantiation,semantics,are,much,richer,in,aspect,j,terminology,all,a,return,of,code,true,means,here,is,that,the,aspect,is,not,a,singleton;override,public,boolean,is,per,instance,return,get,aspect,metadata,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton
InstantiationModelAwarePointcutAdvisorImpl -> @Override 	public boolean isPerInstance();1533776825;This is only of interest for Spring AOP: AspectJ instantiation semantics_are much richer. In AspectJ terminology, all a return of {@code true}_means here is that the aspect is not a SINGLETON.;@Override_	public boolean isPerInstance() {_		return (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON)__	};this,is,only,of,interest,for,spring,aop,aspect,j,instantiation,semantics,are,much,richer,in,aspect,j,terminology,all,a,return,of,code,true,means,here,is,that,the,aspect,is,not,a,singleton;override,public,boolean,is,per,instance,return,get,aspect,metadata,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton
InstantiationModelAwarePointcutAdvisorImpl -> private void determineAdviceType();1328020251;Duplicates some logic from getAdvice, but importantly does not force_creation of the advice.;private void determineAdviceType() {_		AspectJAnnotation<?> aspectJAnnotation =_				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.method)__		if (aspectJAnnotation == null) {_			this.isBeforeAdvice = false__			this.isAfterAdvice = false__		}_		else {_			switch (aspectJAnnotation.getAnnotationType()) {_				case AtAfter:_				case AtAfterReturning:_				case AtAfterThrowing:_					this.isAfterAdvice = true__					this.isBeforeAdvice = false__					break__				case AtAround:_				case AtPointcut:_					this.isAfterAdvice = false__					this.isBeforeAdvice = false__					break__				case AtBefore:_					this.isAfterAdvice = false__					this.isBeforeAdvice = true__			}_		}_	};duplicates,some,logic,from,get,advice,but,importantly,does,not,force,creation,of,the,advice;private,void,determine,advice,type,aspect,jannotation,aspect,jannotation,abstract,aspect,jadvisor,factory,find,aspect,jannotation,on,method,this,method,if,aspect,jannotation,null,this,is,before,advice,false,this,is,after,advice,false,else,switch,aspect,jannotation,get,annotation,type,case,at,after,case,at,after,returning,case,at,after,throwing,this,is,after,advice,true,this,is,before,advice,false,break,case,at,around,case,at,pointcut,this,is,after,advice,false,this,is,before,advice,false,break,case,at,before,this,is,after,advice,false,this,is,before,advice,true
InstantiationModelAwarePointcutAdvisorImpl -> private void determineAdviceType();1356735495;Duplicates some logic from getAdvice, but importantly does not force_creation of the advice.;private void determineAdviceType() {_		AspectJAnnotation<?> aspectJAnnotation =_				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.method)__		if (aspectJAnnotation == null) {_			this.isBeforeAdvice = false__			this.isAfterAdvice = false__		}_		else {_			switch (aspectJAnnotation.getAnnotationType()) {_				case AtAfter:_				case AtAfterReturning:_				case AtAfterThrowing:_					this.isAfterAdvice = true__					this.isBeforeAdvice = false__					break__				case AtAround:_				case AtPointcut:_					this.isAfterAdvice = false__					this.isBeforeAdvice = false__					break__				case AtBefore:_					this.isAfterAdvice = false__					this.isBeforeAdvice = true__			}_		}_	};duplicates,some,logic,from,get,advice,but,importantly,does,not,force,creation,of,the,advice;private,void,determine,advice,type,aspect,jannotation,aspect,jannotation,abstract,aspect,jadvisor,factory,find,aspect,jannotation,on,method,this,method,if,aspect,jannotation,null,this,is,before,advice,false,this,is,after,advice,false,else,switch,aspect,jannotation,get,annotation,type,case,at,after,case,at,after,returning,case,at,after,throwing,this,is,after,advice,true,this,is,before,advice,false,break,case,at,around,case,at,pointcut,this,is,after,advice,false,this,is,before,advice,false,break,case,at,before,this,is,after,advice,false,this,is,before,advice,true
InstantiationModelAwarePointcutAdvisorImpl -> private void determineAdviceType();1357119239;Duplicates some logic from getAdvice, but importantly does not force_creation of the advice.;private void determineAdviceType() {_		AspectJAnnotation<?> aspectJAnnotation =_				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.method)__		if (aspectJAnnotation == null) {_			this.isBeforeAdvice = false__			this.isAfterAdvice = false__		}_		else {_			switch (aspectJAnnotation.getAnnotationType()) {_				case AtAfter:_				case AtAfterReturning:_				case AtAfterThrowing:_					this.isAfterAdvice = true__					this.isBeforeAdvice = false__					break__				case AtAround:_				case AtPointcut:_					this.isAfterAdvice = false__					this.isBeforeAdvice = false__					break__				case AtBefore:_					this.isAfterAdvice = false__					this.isBeforeAdvice = true__			}_		}_	};duplicates,some,logic,from,get,advice,but,importantly,does,not,force,creation,of,the,advice;private,void,determine,advice,type,aspect,jannotation,aspect,jannotation,abstract,aspect,jadvisor,factory,find,aspect,jannotation,on,method,this,method,if,aspect,jannotation,null,this,is,before,advice,false,this,is,after,advice,false,else,switch,aspect,jannotation,get,annotation,type,case,at,after,case,at,after,returning,case,at,after,throwing,this,is,after,advice,true,this,is,before,advice,false,break,case,at,around,case,at,pointcut,this,is,after,advice,false,this,is,before,advice,false,break,case,at,before,this,is,after,advice,false,this,is,before,advice,true
InstantiationModelAwarePointcutAdvisorImpl -> private void determineAdviceType();1362408075;Duplicates some logic from getAdvice, but importantly does not force_creation of the advice.;private void determineAdviceType() {_		AspectJAnnotation<?> aspectJAnnotation =_				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.method)__		if (aspectJAnnotation == null) {_			this.isBeforeAdvice = false__			this.isAfterAdvice = false__		}_		else {_			switch (aspectJAnnotation.getAnnotationType()) {_				case AtAfter:_				case AtAfterReturning:_				case AtAfterThrowing:_					this.isAfterAdvice = true__					this.isBeforeAdvice = false__					break__				case AtAround:_				case AtPointcut:_					this.isAfterAdvice = false__					this.isBeforeAdvice = false__					break__				case AtBefore:_					this.isAfterAdvice = false__					this.isBeforeAdvice = true__			}_		}_	};duplicates,some,logic,from,get,advice,but,importantly,does,not,force,creation,of,the,advice;private,void,determine,advice,type,aspect,jannotation,aspect,jannotation,abstract,aspect,jadvisor,factory,find,aspect,jannotation,on,method,this,method,if,aspect,jannotation,null,this,is,before,advice,false,this,is,after,advice,false,else,switch,aspect,jannotation,get,annotation,type,case,at,after,case,at,after,returning,case,at,after,throwing,this,is,after,advice,true,this,is,before,advice,false,break,case,at,around,case,at,pointcut,this,is,after,advice,false,this,is,before,advice,false,break,case,at,before,this,is,after,advice,false,this,is,before,advice,true
InstantiationModelAwarePointcutAdvisorImpl -> private void determineAdviceType();1368482696;Duplicates some logic from getAdvice, but importantly does not force_creation of the advice.;private void determineAdviceType() {_		AspectJAnnotation<?> aspectJAnnotation =_				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.method)__		if (aspectJAnnotation == null) {_			this.isBeforeAdvice = false__			this.isAfterAdvice = false__		}_		else {_			switch (aspectJAnnotation.getAnnotationType()) {_				case AtAfter:_				case AtAfterReturning:_				case AtAfterThrowing:_					this.isAfterAdvice = true__					this.isBeforeAdvice = false__					break__				case AtAround:_				case AtPointcut:_					this.isAfterAdvice = false__					this.isBeforeAdvice = false__					break__				case AtBefore:_					this.isAfterAdvice = false__					this.isBeforeAdvice = true__			}_		}_	};duplicates,some,logic,from,get,advice,but,importantly,does,not,force,creation,of,the,advice;private,void,determine,advice,type,aspect,jannotation,aspect,jannotation,abstract,aspect,jadvisor,factory,find,aspect,jannotation,on,method,this,method,if,aspect,jannotation,null,this,is,before,advice,false,this,is,after,advice,false,else,switch,aspect,jannotation,get,annotation,type,case,at,after,case,at,after,returning,case,at,after,throwing,this,is,after,advice,true,this,is,before,advice,false,break,case,at,around,case,at,pointcut,this,is,after,advice,false,this,is,before,advice,false,break,case,at,before,this,is,after,advice,false,this,is,before,advice,true
InstantiationModelAwarePointcutAdvisorImpl -> private void determineAdviceType();1385412762;Duplicates some logic from getAdvice, but importantly does not force_creation of the advice.;private void determineAdviceType() {_		AspectJAnnotation<?> aspectJAnnotation =_				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.method)__		if (aspectJAnnotation == null) {_			this.isBeforeAdvice = false__			this.isAfterAdvice = false__		}_		else {_			switch (aspectJAnnotation.getAnnotationType()) {_				case AtAfter:_				case AtAfterReturning:_				case AtAfterThrowing:_					this.isAfterAdvice = true__					this.isBeforeAdvice = false__					break__				case AtAround:_				case AtPointcut:_					this.isAfterAdvice = false__					this.isBeforeAdvice = false__					break__				case AtBefore:_					this.isAfterAdvice = false__					this.isBeforeAdvice = true__			}_		}_	};duplicates,some,logic,from,get,advice,but,importantly,does,not,force,creation,of,the,advice;private,void,determine,advice,type,aspect,jannotation,aspect,jannotation,abstract,aspect,jadvisor,factory,find,aspect,jannotation,on,method,this,method,if,aspect,jannotation,null,this,is,before,advice,false,this,is,after,advice,false,else,switch,aspect,jannotation,get,annotation,type,case,at,after,case,at,after,returning,case,at,after,throwing,this,is,after,advice,true,this,is,before,advice,false,break,case,at,around,case,at,pointcut,this,is,after,advice,false,this,is,before,advice,false,break,case,at,before,this,is,after,advice,false,this,is,before,advice,true
InstantiationModelAwarePointcutAdvisorImpl -> private void determineAdviceType();1450815633;Duplicates some logic from getAdvice, but importantly does not force_creation of the advice.;private void determineAdviceType() {_		AspectJAnnotation<?> aspectJAnnotation =_				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.aspectJAdviceMethod)__		if (aspectJAnnotation == null) {_			this.isBeforeAdvice = false__			this.isAfterAdvice = false__		}_		else {_			switch (aspectJAnnotation.getAnnotationType()) {_				case AtAfter:_				case AtAfterReturning:_				case AtAfterThrowing:_					this.isAfterAdvice = true__					this.isBeforeAdvice = false__					break__				case AtAround:_				case AtPointcut:_					this.isAfterAdvice = false__					this.isBeforeAdvice = false__					break__				case AtBefore:_					this.isAfterAdvice = false__					this.isBeforeAdvice = true__			}_		}_	};duplicates,some,logic,from,get,advice,but,importantly,does,not,force,creation,of,the,advice;private,void,determine,advice,type,aspect,jannotation,aspect,jannotation,abstract,aspect,jadvisor,factory,find,aspect,jannotation,on,method,this,aspect,jadvice,method,if,aspect,jannotation,null,this,is,before,advice,false,this,is,after,advice,false,else,switch,aspect,jannotation,get,annotation,type,case,at,after,case,at,after,returning,case,at,after,throwing,this,is,after,advice,true,this,is,before,advice,false,break,case,at,around,case,at,pointcut,this,is,after,advice,false,this,is,before,advice,false,break,case,at,before,this,is,after,advice,false,this,is,before,advice,true
InstantiationModelAwarePointcutAdvisorImpl -> private void determineAdviceType();1450827071;Duplicates some logic from getAdvice, but importantly does not force_creation of the advice.;private void determineAdviceType() {_		AspectJAnnotation<?> aspectJAnnotation =_				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.aspectJAdviceMethod)__		if (aspectJAnnotation == null) {_			this.isBeforeAdvice = false__			this.isAfterAdvice = false__		}_		else {_			switch (aspectJAnnotation.getAnnotationType()) {_				case AtAfter:_				case AtAfterReturning:_				case AtAfterThrowing:_					this.isAfterAdvice = true__					this.isBeforeAdvice = false__					break__				case AtAround:_				case AtPointcut:_					this.isAfterAdvice = false__					this.isBeforeAdvice = false__					break__				case AtBefore:_					this.isAfterAdvice = false__					this.isBeforeAdvice = true__			}_		}_	};duplicates,some,logic,from,get,advice,but,importantly,does,not,force,creation,of,the,advice;private,void,determine,advice,type,aspect,jannotation,aspect,jannotation,abstract,aspect,jadvisor,factory,find,aspect,jannotation,on,method,this,aspect,jadvice,method,if,aspect,jannotation,null,this,is,before,advice,false,this,is,after,advice,false,else,switch,aspect,jannotation,get,annotation,type,case,at,after,case,at,after,returning,case,at,after,throwing,this,is,after,advice,true,this,is,before,advice,false,break,case,at,around,case,at,pointcut,this,is,after,advice,false,this,is,before,advice,false,break,case,at,before,this,is,after,advice,false,this,is,before,advice,true
InstantiationModelAwarePointcutAdvisorImpl -> private void determineAdviceType();1496242568;Duplicates some logic from getAdvice, but importantly does not force_creation of the advice.;private void determineAdviceType() {_		AspectJAnnotation<?> aspectJAnnotation =_				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.aspectJAdviceMethod)__		if (aspectJAnnotation == null) {_			this.isBeforeAdvice = false__			this.isAfterAdvice = false__		}_		else {_			switch (aspectJAnnotation.getAnnotationType()) {_				case AtAfter:_				case AtAfterReturning:_				case AtAfterThrowing:_					this.isAfterAdvice = true__					this.isBeforeAdvice = false__					break__				case AtAround:_				case AtPointcut:_					this.isAfterAdvice = false__					this.isBeforeAdvice = false__					break__				case AtBefore:_					this.isAfterAdvice = false__					this.isBeforeAdvice = true__			}_		}_	};duplicates,some,logic,from,get,advice,but,importantly,does,not,force,creation,of,the,advice;private,void,determine,advice,type,aspect,jannotation,aspect,jannotation,abstract,aspect,jadvisor,factory,find,aspect,jannotation,on,method,this,aspect,jadvice,method,if,aspect,jannotation,null,this,is,before,advice,false,this,is,after,advice,false,else,switch,aspect,jannotation,get,annotation,type,case,at,after,case,at,after,returning,case,at,after,throwing,this,is,after,advice,true,this,is,before,advice,false,break,case,at,around,case,at,pointcut,this,is,after,advice,false,this,is,before,advice,false,break,case,at,before,this,is,after,advice,false,this,is,before,advice,true
InstantiationModelAwarePointcutAdvisorImpl -> private void determineAdviceType();1496837955;Duplicates some logic from getAdvice, but importantly does not force_creation of the advice.;private void determineAdviceType() {_		AspectJAnnotation<?> aspectJAnnotation =_				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.aspectJAdviceMethod)__		if (aspectJAnnotation == null) {_			this.isBeforeAdvice = false__			this.isAfterAdvice = false__		}_		else {_			switch (aspectJAnnotation.getAnnotationType()) {_				case AtAfter:_				case AtAfterReturning:_				case AtAfterThrowing:_					this.isAfterAdvice = true__					this.isBeforeAdvice = false__					break__				case AtAround:_				case AtPointcut:_					this.isAfterAdvice = false__					this.isBeforeAdvice = false__					break__				case AtBefore:_					this.isAfterAdvice = false__					this.isBeforeAdvice = true__			}_		}_	};duplicates,some,logic,from,get,advice,but,importantly,does,not,force,creation,of,the,advice;private,void,determine,advice,type,aspect,jannotation,aspect,jannotation,abstract,aspect,jadvisor,factory,find,aspect,jannotation,on,method,this,aspect,jadvice,method,if,aspect,jannotation,null,this,is,before,advice,false,this,is,after,advice,false,else,switch,aspect,jannotation,get,annotation,type,case,at,after,case,at,after,returning,case,at,after,throwing,this,is,after,advice,true,this,is,before,advice,false,break,case,at,around,case,at,pointcut,this,is,after,advice,false,this,is,before,advice,false,break,case,at,before,this,is,after,advice,false,this,is,before,advice,true
InstantiationModelAwarePointcutAdvisorImpl -> private void determineAdviceType();1498780456;Duplicates some logic from getAdvice, but importantly does not force_creation of the advice.;private void determineAdviceType() {_		AspectJAnnotation<?> aspectJAnnotation =_				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.aspectJAdviceMethod)__		if (aspectJAnnotation == null) {_			this.isBeforeAdvice = false__			this.isAfterAdvice = false__		}_		else {_			switch (aspectJAnnotation.getAnnotationType()) {_				case AtAfter:_				case AtAfterReturning:_				case AtAfterThrowing:_					this.isAfterAdvice = true__					this.isBeforeAdvice = false__					break__				case AtAround:_				case AtPointcut:_					this.isAfterAdvice = false__					this.isBeforeAdvice = false__					break__				case AtBefore:_					this.isAfterAdvice = false__					this.isBeforeAdvice = true__			}_		}_	};duplicates,some,logic,from,get,advice,but,importantly,does,not,force,creation,of,the,advice;private,void,determine,advice,type,aspect,jannotation,aspect,jannotation,abstract,aspect,jadvisor,factory,find,aspect,jannotation,on,method,this,aspect,jadvice,method,if,aspect,jannotation,null,this,is,before,advice,false,this,is,after,advice,false,else,switch,aspect,jannotation,get,annotation,type,case,at,after,case,at,after,returning,case,at,after,throwing,this,is,after,advice,true,this,is,before,advice,false,break,case,at,around,case,at,pointcut,this,is,after,advice,false,this,is,before,advice,false,break,case,at,before,this,is,after,advice,false,this,is,before,advice,true
InstantiationModelAwarePointcutAdvisorImpl -> private void determineAdviceType();1518260959;Duplicates some logic from getAdvice, but importantly does not force_creation of the advice.;private void determineAdviceType() {_		AspectJAnnotation<?> aspectJAnnotation =_				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.aspectJAdviceMethod)__		if (aspectJAnnotation == null) {_			this.isBeforeAdvice = false__			this.isAfterAdvice = false__		}_		else {_			switch (aspectJAnnotation.getAnnotationType()) {_				case AtAfter:_				case AtAfterReturning:_				case AtAfterThrowing:_					this.isAfterAdvice = true__					this.isBeforeAdvice = false__					break__				case AtAround:_				case AtPointcut:_					this.isAfterAdvice = false__					this.isBeforeAdvice = false__					break__				case AtBefore:_					this.isAfterAdvice = false__					this.isBeforeAdvice = true__			}_		}_	};duplicates,some,logic,from,get,advice,but,importantly,does,not,force,creation,of,the,advice;private,void,determine,advice,type,aspect,jannotation,aspect,jannotation,abstract,aspect,jadvisor,factory,find,aspect,jannotation,on,method,this,aspect,jadvice,method,if,aspect,jannotation,null,this,is,before,advice,false,this,is,after,advice,false,else,switch,aspect,jannotation,get,annotation,type,case,at,after,case,at,after,returning,case,at,after,throwing,this,is,after,advice,true,this,is,before,advice,false,break,case,at,around,case,at,pointcut,this,is,after,advice,false,this,is,before,advice,false,break,case,at,before,this,is,after,advice,false,this,is,before,advice,true
InstantiationModelAwarePointcutAdvisorImpl -> private void determineAdviceType();1530174524;Duplicates some logic from getAdvice, but importantly does not force_creation of the advice.;private void determineAdviceType() {_		AspectJAnnotation<?> aspectJAnnotation =_				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.aspectJAdviceMethod)__		if (aspectJAnnotation == null) {_			this.isBeforeAdvice = false__			this.isAfterAdvice = false__		}_		else {_			switch (aspectJAnnotation.getAnnotationType()) {_				case AtAfter:_				case AtAfterReturning:_				case AtAfterThrowing:_					this.isAfterAdvice = true__					this.isBeforeAdvice = false__					break__				case AtAround:_				case AtPointcut:_					this.isAfterAdvice = false__					this.isBeforeAdvice = false__					break__				case AtBefore:_					this.isAfterAdvice = false__					this.isBeforeAdvice = true__			}_		}_	};duplicates,some,logic,from,get,advice,but,importantly,does,not,force,creation,of,the,advice;private,void,determine,advice,type,aspect,jannotation,aspect,jannotation,abstract,aspect,jadvisor,factory,find,aspect,jannotation,on,method,this,aspect,jadvice,method,if,aspect,jannotation,null,this,is,before,advice,false,this,is,after,advice,false,else,switch,aspect,jannotation,get,annotation,type,case,at,after,case,at,after,returning,case,at,after,throwing,this,is,after,advice,true,this,is,before,advice,false,break,case,at,around,case,at,pointcut,this,is,after,advice,false,this,is,before,advice,false,break,case,at,before,this,is,after,advice,false,this,is,before,advice,true
InstantiationModelAwarePointcutAdvisorImpl -> private void determineAdviceType();1532038651;Duplicates some logic from getAdvice, but importantly does not force_creation of the advice.;private void determineAdviceType() {_		AspectJAnnotation<?> aspectJAnnotation =_				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.aspectJAdviceMethod)__		if (aspectJAnnotation == null) {_			this.isBeforeAdvice = false__			this.isAfterAdvice = false__		}_		else {_			switch (aspectJAnnotation.getAnnotationType()) {_				case AtAfter:_				case AtAfterReturning:_				case AtAfterThrowing:_					this.isAfterAdvice = true__					this.isBeforeAdvice = false__					break__				case AtAround:_				case AtPointcut:_					this.isAfterAdvice = false__					this.isBeforeAdvice = false__					break__				case AtBefore:_					this.isAfterAdvice = false__					this.isBeforeAdvice = true__			}_		}_	};duplicates,some,logic,from,get,advice,but,importantly,does,not,force,creation,of,the,advice;private,void,determine,advice,type,aspect,jannotation,aspect,jannotation,abstract,aspect,jadvisor,factory,find,aspect,jannotation,on,method,this,aspect,jadvice,method,if,aspect,jannotation,null,this,is,before,advice,false,this,is,after,advice,false,else,switch,aspect,jannotation,get,annotation,type,case,at,after,case,at,after,returning,case,at,after,throwing,this,is,after,advice,true,this,is,before,advice,false,break,case,at,around,case,at,pointcut,this,is,after,advice,false,this,is,before,advice,false,break,case,at,before,this,is,after,advice,false,this,is,before,advice,true
InstantiationModelAwarePointcutAdvisorImpl -> private void determineAdviceType();1533776825;Duplicates some logic from getAdvice, but importantly does not force_creation of the advice.;private void determineAdviceType() {_		AspectJAnnotation<?> aspectJAnnotation =_				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.aspectJAdviceMethod)__		if (aspectJAnnotation == null) {_			this.isBeforeAdvice = false__			this.isAfterAdvice = false__		}_		else {_			switch (aspectJAnnotation.getAnnotationType()) {_				case AtPointcut:_				case AtAround:_					this.isBeforeAdvice = false__					this.isAfterAdvice = false__					break__				case AtBefore:_					this.isBeforeAdvice = true__					this.isAfterAdvice = false__					break__				case AtAfter:_				case AtAfterReturning:_				case AtAfterThrowing:_					this.isBeforeAdvice = false__					this.isAfterAdvice = true__					break__			}_		}_	};duplicates,some,logic,from,get,advice,but,importantly,does,not,force,creation,of,the,advice;private,void,determine,advice,type,aspect,jannotation,aspect,jannotation,abstract,aspect,jadvisor,factory,find,aspect,jannotation,on,method,this,aspect,jadvice,method,if,aspect,jannotation,null,this,is,before,advice,false,this,is,after,advice,false,else,switch,aspect,jannotation,get,annotation,type,case,at,pointcut,case,at,around,this,is,before,advice,false,this,is,after,advice,false,break,case,at,before,this,is,before,advice,true,this,is,after,advice,false,break,case,at,after,case,at,after,returning,case,at,after,throwing,this,is,before,advice,false,this,is,after,advice,true,break
InstantiationModelAwarePointcutAdvisorImpl -> public Pointcut getPointcut();1328020251;The pointcut for Spring AOP to use. Actual behaviour of the pointcut will change_depending on the state of the advice.;public Pointcut getPointcut() {_		return this.pointcut__	};the,pointcut,for,spring,aop,to,use,actual,behaviour,of,the,pointcut,will,change,depending,on,the,state,of,the,advice;public,pointcut,get,pointcut,return,this,pointcut
InstantiationModelAwarePointcutAdvisorImpl -> public Pointcut getPointcut();1357119239;The pointcut for Spring AOP to use. Actual behaviour of the pointcut will change_depending on the state of the advice.;public Pointcut getPointcut() {_		return this.pointcut__	};the,pointcut,for,spring,aop,to,use,actual,behaviour,of,the,pointcut,will,change,depending,on,the,state,of,the,advice;public,pointcut,get,pointcut,return,this,pointcut
InstantiationModelAwarePointcutAdvisorImpl -> public Pointcut getPointcut();1362408075;The pointcut for Spring AOP to use. Actual behaviour of the pointcut will change_depending on the state of the advice.;public Pointcut getPointcut() {_		return this.pointcut__	};the,pointcut,for,spring,aop,to,use,actual,behaviour,of,the,pointcut,will,change,depending,on,the,state,of,the,advice;public,pointcut,get,pointcut,return,this,pointcut
