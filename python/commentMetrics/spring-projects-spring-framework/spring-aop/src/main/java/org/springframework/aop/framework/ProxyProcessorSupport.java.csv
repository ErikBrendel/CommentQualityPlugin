# id;timestamp;commentText;codeText;commentWords;codeWords
ProxyProcessorSupport -> protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory);1398791249;Check the interfaces on the given bean class and apply them to the ProxyFactory,_if appropriate._<p>Calls {@link #isConfigurationCallbackInterface} and {@link #isInternalLanguageInterface}_to filter for reasonable proxy interfaces, falling back to a target-class proxy otherwise._@param beanClass the class of the bean_@param proxyFactory the ProxyFactory for the bean;protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory) {_		Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, getProxyClassLoader())__		boolean hasReasonableProxyInterface = false__		for (Class<?> ifc : targetInterfaces) {_			if (!isConfigurationCallbackInterface(ifc) && !isInternalLanguageInterface(ifc) &&_					ifc.getMethods().length > 0) {_				hasReasonableProxyInterface = true__				break__			}_		}_		if (hasReasonableProxyInterface) {_			_			for (Class<?> ifc : targetInterfaces) {_				proxyFactory.addInterface(ifc)__			}_		}_		else {_			proxyFactory.setProxyTargetClass(true)__		}_	};check,the,interfaces,on,the,given,bean,class,and,apply,them,to,the,proxy,factory,if,appropriate,p,calls,link,is,configuration,callback,interface,and,link,is,internal,language,interface,to,filter,for,reasonable,proxy,interfaces,falling,back,to,a,target,class,proxy,otherwise,param,bean,class,the,class,of,the,bean,param,proxy,factory,the,proxy,factory,for,the,bean;protected,void,evaluate,proxy,interfaces,class,bean,class,proxy,factory,proxy,factory,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,get,proxy,class,loader,boolean,has,reasonable,proxy,interface,false,for,class,ifc,target,interfaces,if,is,configuration,callback,interface,ifc,is,internal,language,interface,ifc,ifc,get,methods,length,0,has,reasonable,proxy,interface,true,break,if,has,reasonable,proxy,interface,for,class,ifc,target,interfaces,proxy,factory,add,interface,ifc,else,proxy,factory,set,proxy,target,class,true
ProxyProcessorSupport -> protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory);1400538684;Check the interfaces on the given bean class and apply them to the {@link ProxyFactory},_if appropriate._<p>Calls {@link #isConfigurationCallbackInterface} and {@link #isInternalLanguageInterface}_to filter for reasonable proxy interfaces, falling back to a target-class proxy otherwise._@param beanClass the class of the bean_@param proxyFactory the ProxyFactory for the bean;protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory) {_		Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, getProxyClassLoader())__		boolean hasReasonableProxyInterface = false__		for (Class<?> ifc : targetInterfaces) {_			if (!isConfigurationCallbackInterface(ifc) && !isInternalLanguageInterface(ifc) &&_					ifc.getMethods().length > 0) {_				hasReasonableProxyInterface = true__				break__			}_		}_		if (hasReasonableProxyInterface) {_			_			for (Class<?> ifc : targetInterfaces) {_				proxyFactory.addInterface(ifc)__			}_		}_		else {_			proxyFactory.setProxyTargetClass(true)__		}_	};check,the,interfaces,on,the,given,bean,class,and,apply,them,to,the,link,proxy,factory,if,appropriate,p,calls,link,is,configuration,callback,interface,and,link,is,internal,language,interface,to,filter,for,reasonable,proxy,interfaces,falling,back,to,a,target,class,proxy,otherwise,param,bean,class,the,class,of,the,bean,param,proxy,factory,the,proxy,factory,for,the,bean;protected,void,evaluate,proxy,interfaces,class,bean,class,proxy,factory,proxy,factory,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,get,proxy,class,loader,boolean,has,reasonable,proxy,interface,false,for,class,ifc,target,interfaces,if,is,configuration,callback,interface,ifc,is,internal,language,interface,ifc,ifc,get,methods,length,0,has,reasonable,proxy,interface,true,break,if,has,reasonable,proxy,interface,for,class,ifc,target,interfaces,proxy,factory,add,interface,ifc,else,proxy,factory,set,proxy,target,class,true
ProxyProcessorSupport -> protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory);1432125256;Check the interfaces on the given bean class and apply them to the {@link ProxyFactory},_if appropriate._<p>Calls {@link #isConfigurationCallbackInterface} and {@link #isInternalLanguageInterface}_to filter for reasonable proxy interfaces, falling back to a target-class proxy otherwise._@param beanClass the class of the bean_@param proxyFactory the ProxyFactory for the bean;protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory) {_		Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, getProxyClassLoader())__		boolean hasReasonableProxyInterface = false__		for (Class<?> ifc : targetInterfaces) {_			if (!isConfigurationCallbackInterface(ifc) && !isInternalLanguageInterface(ifc) &&_					ifc.getMethods().length > 0) {_				hasReasonableProxyInterface = true__				break__			}_		}_		if (hasReasonableProxyInterface) {_			_			for (Class<?> ifc : targetInterfaces) {_				proxyFactory.addInterface(ifc)__			}_		}_		else {_			proxyFactory.setProxyTargetClass(true)__		}_	};check,the,interfaces,on,the,given,bean,class,and,apply,them,to,the,link,proxy,factory,if,appropriate,p,calls,link,is,configuration,callback,interface,and,link,is,internal,language,interface,to,filter,for,reasonable,proxy,interfaces,falling,back,to,a,target,class,proxy,otherwise,param,bean,class,the,class,of,the,bean,param,proxy,factory,the,proxy,factory,for,the,bean;protected,void,evaluate,proxy,interfaces,class,bean,class,proxy,factory,proxy,factory,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,get,proxy,class,loader,boolean,has,reasonable,proxy,interface,false,for,class,ifc,target,interfaces,if,is,configuration,callback,interface,ifc,is,internal,language,interface,ifc,ifc,get,methods,length,0,has,reasonable,proxy,interface,true,break,if,has,reasonable,proxy,interface,for,class,ifc,target,interfaces,proxy,factory,add,interface,ifc,else,proxy,factory,set,proxy,target,class,true
ProxyProcessorSupport -> protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory);1469030751;Check the interfaces on the given bean class and apply them to the {@link ProxyFactory},_if appropriate._<p>Calls {@link #isConfigurationCallbackInterface} and {@link #isInternalLanguageInterface}_to filter for reasonable proxy interfaces, falling back to a target-class proxy otherwise._@param beanClass the class of the bean_@param proxyFactory the ProxyFactory for the bean;protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory) {_		Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, getProxyClassLoader())__		boolean hasReasonableProxyInterface = false__		for (Class<?> ifc : targetInterfaces) {_			if (!isConfigurationCallbackInterface(ifc) && !isInternalLanguageInterface(ifc) &&_					ifc.getMethods().length > 0) {_				hasReasonableProxyInterface = true__				break__			}_		}_		if (hasReasonableProxyInterface) {_			_			for (Class<?> ifc : targetInterfaces) {_				proxyFactory.addInterface(ifc)__			}_		}_		else {_			proxyFactory.setProxyTargetClass(true)__		}_	};check,the,interfaces,on,the,given,bean,class,and,apply,them,to,the,link,proxy,factory,if,appropriate,p,calls,link,is,configuration,callback,interface,and,link,is,internal,language,interface,to,filter,for,reasonable,proxy,interfaces,falling,back,to,a,target,class,proxy,otherwise,param,bean,class,the,class,of,the,bean,param,proxy,factory,the,proxy,factory,for,the,bean;protected,void,evaluate,proxy,interfaces,class,bean,class,proxy,factory,proxy,factory,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,get,proxy,class,loader,boolean,has,reasonable,proxy,interface,false,for,class,ifc,target,interfaces,if,is,configuration,callback,interface,ifc,is,internal,language,interface,ifc,ifc,get,methods,length,0,has,reasonable,proxy,interface,true,break,if,has,reasonable,proxy,interface,for,class,ifc,target,interfaces,proxy,factory,add,interface,ifc,else,proxy,factory,set,proxy,target,class,true
ProxyProcessorSupport -> protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory);1478210015;Check the interfaces on the given bean class and apply them to the {@link ProxyFactory},_if appropriate._<p>Calls {@link #isConfigurationCallbackInterface} and {@link #isInternalLanguageInterface}_to filter for reasonable proxy interfaces, falling back to a target-class proxy otherwise._@param beanClass the class of the bean_@param proxyFactory the ProxyFactory for the bean;protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory) {_		Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, getProxyClassLoader())__		boolean hasReasonableProxyInterface = false__		for (Class<?> ifc : targetInterfaces) {_			if (!isConfigurationCallbackInterface(ifc) && !isInternalLanguageInterface(ifc) &&_					ifc.getMethods().length > 0) {_				hasReasonableProxyInterface = true__				break__			}_		}_		if (hasReasonableProxyInterface) {_			_			for (Class<?> ifc : targetInterfaces) {_				proxyFactory.addInterface(ifc)__			}_		}_		else {_			proxyFactory.setProxyTargetClass(true)__		}_	};check,the,interfaces,on,the,given,bean,class,and,apply,them,to,the,link,proxy,factory,if,appropriate,p,calls,link,is,configuration,callback,interface,and,link,is,internal,language,interface,to,filter,for,reasonable,proxy,interfaces,falling,back,to,a,target,class,proxy,otherwise,param,bean,class,the,class,of,the,bean,param,proxy,factory,the,proxy,factory,for,the,bean;protected,void,evaluate,proxy,interfaces,class,bean,class,proxy,factory,proxy,factory,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,get,proxy,class,loader,boolean,has,reasonable,proxy,interface,false,for,class,ifc,target,interfaces,if,is,configuration,callback,interface,ifc,is,internal,language,interface,ifc,ifc,get,methods,length,0,has,reasonable,proxy,interface,true,break,if,has,reasonable,proxy,interface,for,class,ifc,target,interfaces,proxy,factory,add,interface,ifc,else,proxy,factory,set,proxy,target,class,true
ProxyProcessorSupport -> protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory);1496242568;Check the interfaces on the given bean class and apply them to the {@link ProxyFactory},_if appropriate._<p>Calls {@link #isConfigurationCallbackInterface} and {@link #isInternalLanguageInterface}_to filter for reasonable proxy interfaces, falling back to a target-class proxy otherwise._@param beanClass the class of the bean_@param proxyFactory the ProxyFactory for the bean;protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory) {_		Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, getProxyClassLoader())__		boolean hasReasonableProxyInterface = false__		for (Class<?> ifc : targetInterfaces) {_			if (!isConfigurationCallbackInterface(ifc) && !isInternalLanguageInterface(ifc) &&_					ifc.getMethods().length > 0) {_				hasReasonableProxyInterface = true__				break__			}_		}_		if (hasReasonableProxyInterface) {_			_			for (Class<?> ifc : targetInterfaces) {_				proxyFactory.addInterface(ifc)__			}_		}_		else {_			proxyFactory.setProxyTargetClass(true)__		}_	};check,the,interfaces,on,the,given,bean,class,and,apply,them,to,the,link,proxy,factory,if,appropriate,p,calls,link,is,configuration,callback,interface,and,link,is,internal,language,interface,to,filter,for,reasonable,proxy,interfaces,falling,back,to,a,target,class,proxy,otherwise,param,bean,class,the,class,of,the,bean,param,proxy,factory,the,proxy,factory,for,the,bean;protected,void,evaluate,proxy,interfaces,class,bean,class,proxy,factory,proxy,factory,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,get,proxy,class,loader,boolean,has,reasonable,proxy,interface,false,for,class,ifc,target,interfaces,if,is,configuration,callback,interface,ifc,is,internal,language,interface,ifc,ifc,get,methods,length,0,has,reasonable,proxy,interface,true,break,if,has,reasonable,proxy,interface,for,class,ifc,target,interfaces,proxy,factory,add,interface,ifc,else,proxy,factory,set,proxy,target,class,true
ProxyProcessorSupport -> protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory);1496837955;Check the interfaces on the given bean class and apply them to the {@link ProxyFactory},_if appropriate._<p>Calls {@link #isConfigurationCallbackInterface} and {@link #isInternalLanguageInterface}_to filter for reasonable proxy interfaces, falling back to a target-class proxy otherwise._@param beanClass the class of the bean_@param proxyFactory the ProxyFactory for the bean;protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory) {_		Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, getProxyClassLoader())__		boolean hasReasonableProxyInterface = false__		for (Class<?> ifc : targetInterfaces) {_			if (!isConfigurationCallbackInterface(ifc) && !isInternalLanguageInterface(ifc) &&_					ifc.getMethods().length > 0) {_				hasReasonableProxyInterface = true__				break__			}_		}_		if (hasReasonableProxyInterface) {_			_			for (Class<?> ifc : targetInterfaces) {_				proxyFactory.addInterface(ifc)__			}_		}_		else {_			proxyFactory.setProxyTargetClass(true)__		}_	};check,the,interfaces,on,the,given,bean,class,and,apply,them,to,the,link,proxy,factory,if,appropriate,p,calls,link,is,configuration,callback,interface,and,link,is,internal,language,interface,to,filter,for,reasonable,proxy,interfaces,falling,back,to,a,target,class,proxy,otherwise,param,bean,class,the,class,of,the,bean,param,proxy,factory,the,proxy,factory,for,the,bean;protected,void,evaluate,proxy,interfaces,class,bean,class,proxy,factory,proxy,factory,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,get,proxy,class,loader,boolean,has,reasonable,proxy,interface,false,for,class,ifc,target,interfaces,if,is,configuration,callback,interface,ifc,is,internal,language,interface,ifc,ifc,get,methods,length,0,has,reasonable,proxy,interface,true,break,if,has,reasonable,proxy,interface,for,class,ifc,target,interfaces,proxy,factory,add,interface,ifc,else,proxy,factory,set,proxy,target,class,true
ProxyProcessorSupport -> protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory);1498780456;Check the interfaces on the given bean class and apply them to the {@link ProxyFactory},_if appropriate._<p>Calls {@link #isConfigurationCallbackInterface} and {@link #isInternalLanguageInterface}_to filter for reasonable proxy interfaces, falling back to a target-class proxy otherwise._@param beanClass the class of the bean_@param proxyFactory the ProxyFactory for the bean;protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory) {_		Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, getProxyClassLoader())__		boolean hasReasonableProxyInterface = false__		for (Class<?> ifc : targetInterfaces) {_			if (!isConfigurationCallbackInterface(ifc) && !isInternalLanguageInterface(ifc) &&_					ifc.getMethods().length > 0) {_				hasReasonableProxyInterface = true__				break__			}_		}_		if (hasReasonableProxyInterface) {_			_			for (Class<?> ifc : targetInterfaces) {_				proxyFactory.addInterface(ifc)__			}_		}_		else {_			proxyFactory.setProxyTargetClass(true)__		}_	};check,the,interfaces,on,the,given,bean,class,and,apply,them,to,the,link,proxy,factory,if,appropriate,p,calls,link,is,configuration,callback,interface,and,link,is,internal,language,interface,to,filter,for,reasonable,proxy,interfaces,falling,back,to,a,target,class,proxy,otherwise,param,bean,class,the,class,of,the,bean,param,proxy,factory,the,proxy,factory,for,the,bean;protected,void,evaluate,proxy,interfaces,class,bean,class,proxy,factory,proxy,factory,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,get,proxy,class,loader,boolean,has,reasonable,proxy,interface,false,for,class,ifc,target,interfaces,if,is,configuration,callback,interface,ifc,is,internal,language,interface,ifc,ifc,get,methods,length,0,has,reasonable,proxy,interface,true,break,if,has,reasonable,proxy,interface,for,class,ifc,target,interfaces,proxy,factory,add,interface,ifc,else,proxy,factory,set,proxy,target,class,true
ProxyProcessorSupport -> protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory);1500496845;Check the interfaces on the given bean class and apply them to the {@link ProxyFactory},_if appropriate._<p>Calls {@link #isConfigurationCallbackInterface} and {@link #isInternalLanguageInterface}_to filter for reasonable proxy interfaces, falling back to a target-class proxy otherwise._@param beanClass the class of the bean_@param proxyFactory the ProxyFactory for the bean;protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory) {_		Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, getProxyClassLoader())__		boolean hasReasonableProxyInterface = false__		for (Class<?> ifc : targetInterfaces) {_			if (!isConfigurationCallbackInterface(ifc) && !isInternalLanguageInterface(ifc) &&_					ifc.getMethods().length > 0) {_				hasReasonableProxyInterface = true__				break__			}_		}_		if (hasReasonableProxyInterface) {_			_			for (Class<?> ifc : targetInterfaces) {_				proxyFactory.addInterface(ifc)__			}_		}_		else {_			proxyFactory.setProxyTargetClass(true)__		}_	};check,the,interfaces,on,the,given,bean,class,and,apply,them,to,the,link,proxy,factory,if,appropriate,p,calls,link,is,configuration,callback,interface,and,link,is,internal,language,interface,to,filter,for,reasonable,proxy,interfaces,falling,back,to,a,target,class,proxy,otherwise,param,bean,class,the,class,of,the,bean,param,proxy,factory,the,proxy,factory,for,the,bean;protected,void,evaluate,proxy,interfaces,class,bean,class,proxy,factory,proxy,factory,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,get,proxy,class,loader,boolean,has,reasonable,proxy,interface,false,for,class,ifc,target,interfaces,if,is,configuration,callback,interface,ifc,is,internal,language,interface,ifc,ifc,get,methods,length,0,has,reasonable,proxy,interface,true,break,if,has,reasonable,proxy,interface,for,class,ifc,target,interfaces,proxy,factory,add,interface,ifc,else,proxy,factory,set,proxy,target,class,true
ProxyProcessorSupport -> protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory);1522448444;Check the interfaces on the given bean class and apply them to the {@link ProxyFactory},_if appropriate._<p>Calls {@link #isConfigurationCallbackInterface} and {@link #isInternalLanguageInterface}_to filter for reasonable proxy interfaces, falling back to a target-class proxy otherwise._@param beanClass the class of the bean_@param proxyFactory the ProxyFactory for the bean;protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFactory) {_		Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, getProxyClassLoader())__		boolean hasReasonableProxyInterface = false__		for (Class<?> ifc : targetInterfaces) {_			if (!isConfigurationCallbackInterface(ifc) && !isInternalLanguageInterface(ifc) &&_					ifc.getMethods().length > 0) {_				hasReasonableProxyInterface = true__				break__			}_		}_		if (hasReasonableProxyInterface) {_			_			for (Class<?> ifc : targetInterfaces) {_				proxyFactory.addInterface(ifc)__			}_		}_		else {_			proxyFactory.setProxyTargetClass(true)__		}_	};check,the,interfaces,on,the,given,bean,class,and,apply,them,to,the,link,proxy,factory,if,appropriate,p,calls,link,is,configuration,callback,interface,and,link,is,internal,language,interface,to,filter,for,reasonable,proxy,interfaces,falling,back,to,a,target,class,proxy,otherwise,param,bean,class,the,class,of,the,bean,param,proxy,factory,the,proxy,factory,for,the,bean;protected,void,evaluate,proxy,interfaces,class,bean,class,proxy,factory,proxy,factory,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,get,proxy,class,loader,boolean,has,reasonable,proxy,interface,false,for,class,ifc,target,interfaces,if,is,configuration,callback,interface,ifc,is,internal,language,interface,ifc,ifc,get,methods,length,0,has,reasonable,proxy,interface,true,break,if,has,reasonable,proxy,interface,for,class,ifc,target,interfaces,proxy,factory,add,interface,ifc,else,proxy,factory,set,proxy,target,class,true
ProxyProcessorSupport -> protected boolean isInternalLanguageInterface(Class<?> ifc);1398791249;Determine whether the given interface is a well-known internal language interface_and therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is an internal language interface;protected boolean isInternalLanguageInterface(Class<?> ifc) {_		return ifc.getName().equals("groovy.lang.GroovyObject")__	};determine,whether,the,given,interface,is,a,well,known,internal,language,interface,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,an,internal,language,interface;protected,boolean,is,internal,language,interface,class,ifc,return,ifc,get,name,equals,groovy,lang,groovy,object
ProxyProcessorSupport -> protected boolean isInternalLanguageInterface(Class<?> ifc);1400538684;Determine whether the given interface is a well-known internal language interface_and therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is an internal language interface;protected boolean isInternalLanguageInterface(Class<?> ifc) {_		return ifc.getName().equals("groovy.lang.GroovyObject")__	};determine,whether,the,given,interface,is,a,well,known,internal,language,interface,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,an,internal,language,interface;protected,boolean,is,internal,language,interface,class,ifc,return,ifc,get,name,equals,groovy,lang,groovy,object
ProxyProcessorSupport -> protected boolean isInternalLanguageInterface(Class<?> ifc);1432125256;Determine whether the given interface is a well-known internal language interface_and therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is an internal language interface;protected boolean isInternalLanguageInterface(Class<?> ifc) {_		return ifc.getName().equals("groovy.lang.GroovyObject")__	};determine,whether,the,given,interface,is,a,well,known,internal,language,interface,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,an,internal,language,interface;protected,boolean,is,internal,language,interface,class,ifc,return,ifc,get,name,equals,groovy,lang,groovy,object
ProxyProcessorSupport -> protected boolean isInternalLanguageInterface(Class<?> ifc);1469030751;Determine whether the given interface is a well-known internal language interface_and therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is an internal language interface;protected boolean isInternalLanguageInterface(Class<?> ifc) {_		return (ifc.getName().equals("groovy.lang.GroovyObject") ||_				ifc.getName().endsWith(".cglib.proxy.Factory"))__	};determine,whether,the,given,interface,is,a,well,known,internal,language,interface,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,an,internal,language,interface;protected,boolean,is,internal,language,interface,class,ifc,return,ifc,get,name,equals,groovy,lang,groovy,object,ifc,get,name,ends,with,cglib,proxy,factory
ProxyProcessorSupport -> protected boolean isInternalLanguageInterface(Class<?> ifc);1478210015;Determine whether the given interface is a well-known internal language interface_and therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is an internal language interface;protected boolean isInternalLanguageInterface(Class<?> ifc) {_		return (ifc.getName().equals("groovy.lang.GroovyObject") ||_				ifc.getName().endsWith(".cglib.proxy.Factory") ||_				ifc.getName().endsWith(".bytebuddy.MockAccess"))__	};determine,whether,the,given,interface,is,a,well,known,internal,language,interface,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,an,internal,language,interface;protected,boolean,is,internal,language,interface,class,ifc,return,ifc,get,name,equals,groovy,lang,groovy,object,ifc,get,name,ends,with,cglib,proxy,factory,ifc,get,name,ends,with,bytebuddy,mock,access
ProxyProcessorSupport -> protected boolean isInternalLanguageInterface(Class<?> ifc);1496242568;Determine whether the given interface is a well-known internal language interface_and therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is an internal language interface;protected boolean isInternalLanguageInterface(Class<?> ifc) {_		return (ifc.getName().equals("groovy.lang.GroovyObject") ||_				ifc.getName().endsWith(".cglib.proxy.Factory") ||_				ifc.getName().endsWith(".bytebuddy.MockAccess"))__	};determine,whether,the,given,interface,is,a,well,known,internal,language,interface,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,an,internal,language,interface;protected,boolean,is,internal,language,interface,class,ifc,return,ifc,get,name,equals,groovy,lang,groovy,object,ifc,get,name,ends,with,cglib,proxy,factory,ifc,get,name,ends,with,bytebuddy,mock,access
ProxyProcessorSupport -> protected boolean isInternalLanguageInterface(Class<?> ifc);1496837955;Determine whether the given interface is a well-known internal language interface_and therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is an internal language interface;protected boolean isInternalLanguageInterface(Class<?> ifc) {_		return (ifc.getName().equals("groovy.lang.GroovyObject") ||_				ifc.getName().endsWith(".cglib.proxy.Factory") ||_				ifc.getName().endsWith(".bytebuddy.MockAccess"))__	};determine,whether,the,given,interface,is,a,well,known,internal,language,interface,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,an,internal,language,interface;protected,boolean,is,internal,language,interface,class,ifc,return,ifc,get,name,equals,groovy,lang,groovy,object,ifc,get,name,ends,with,cglib,proxy,factory,ifc,get,name,ends,with,bytebuddy,mock,access
ProxyProcessorSupport -> protected boolean isInternalLanguageInterface(Class<?> ifc);1498780456;Determine whether the given interface is a well-known internal language interface_and therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is an internal language interface;protected boolean isInternalLanguageInterface(Class<?> ifc) {_		return (ifc.getName().equals("groovy.lang.GroovyObject") ||_				ifc.getName().endsWith(".cglib.proxy.Factory") ||_				ifc.getName().endsWith(".bytebuddy.MockAccess"))__	};determine,whether,the,given,interface,is,a,well,known,internal,language,interface,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,an,internal,language,interface;protected,boolean,is,internal,language,interface,class,ifc,return,ifc,get,name,equals,groovy,lang,groovy,object,ifc,get,name,ends,with,cglib,proxy,factory,ifc,get,name,ends,with,bytebuddy,mock,access
ProxyProcessorSupport -> protected boolean isInternalLanguageInterface(Class<?> ifc);1500496845;Determine whether the given interface is a well-known internal language interface_and therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is an internal language interface;protected boolean isInternalLanguageInterface(Class<?> ifc) {_		return (ifc.getName().equals("groovy.lang.GroovyObject") ||_				ifc.getName().endsWith(".cglib.proxy.Factory") ||_				ifc.getName().endsWith(".bytebuddy.MockAccess"))__	};determine,whether,the,given,interface,is,a,well,known,internal,language,interface,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,an,internal,language,interface;protected,boolean,is,internal,language,interface,class,ifc,return,ifc,get,name,equals,groovy,lang,groovy,object,ifc,get,name,ends,with,cglib,proxy,factory,ifc,get,name,ends,with,bytebuddy,mock,access
ProxyProcessorSupport -> protected boolean isInternalLanguageInterface(Class<?> ifc);1522448444;Determine whether the given interface is a well-known internal language interface_and therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is an internal language interface;protected boolean isInternalLanguageInterface(Class<?> ifc) {_		return (ifc.getName().equals("groovy.lang.GroovyObject") ||_				ifc.getName().endsWith(".cglib.proxy.Factory") ||_				ifc.getName().endsWith(".bytebuddy.MockAccess"))__	};determine,whether,the,given,interface,is,a,well,known,internal,language,interface,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,an,internal,language,interface;protected,boolean,is,internal,language,interface,class,ifc,return,ifc,get,name,equals,groovy,lang,groovy,object,ifc,get,name,ends,with,cglib,proxy,factory,ifc,get,name,ends,with,bytebuddy,mock,access
ProxyProcessorSupport -> public void setOrder(int order);1398791249;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple processors._<p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered._@param order ordering value;public void setOrder(int order) {_		this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,processors,p,default,value,is,code,integer,meaning,that,it,s,non,ordered,param,order,ordering,value;public,void,set,order,int,order,this,order,order
ProxyProcessorSupport -> public void setOrder(int order);1400538684;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple processors._<p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered._@param order the ordering value;public void setOrder(int order) {_		this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,processors,p,default,value,is,code,integer,meaning,that,it,s,non,ordered,param,order,the,ordering,value;public,void,set,order,int,order,this,order,order
ProxyProcessorSupport -> public void setOrder(int order);1432125256;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple processors._<p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered._@param order the ordering value;public void setOrder(int order) {_		this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,processors,p,default,value,is,code,integer,meaning,that,it,s,non,ordered,param,order,the,ordering,value;public,void,set,order,int,order,this,order,order
ProxyProcessorSupport -> public void setOrder(int order);1469030751;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple processors._<p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered._@param order the ordering value;public void setOrder(int order) {_		this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,processors,p,default,value,is,code,integer,meaning,that,it,s,non,ordered,param,order,the,ordering,value;public,void,set,order,int,order,this,order,order
ProxyProcessorSupport -> public void setOrder(int order);1478210015;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple processors._<p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered._@param order the ordering value;public void setOrder(int order) {_		this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,processors,p,default,value,is,code,integer,meaning,that,it,s,non,ordered,param,order,the,ordering,value;public,void,set,order,int,order,this,order,order
ProxyProcessorSupport -> public void setOrder(int order);1496242568;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple processors._<p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered._@param order the ordering value;public void setOrder(int order) {_		this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,processors,p,default,value,is,code,integer,meaning,that,it,s,non,ordered,param,order,the,ordering,value;public,void,set,order,int,order,this,order,order
ProxyProcessorSupport -> public void setOrder(int order);1496837955;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple processors._<p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered._@param order the ordering value;public void setOrder(int order) {_		this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,processors,p,default,value,is,code,integer,meaning,that,it,s,non,ordered,param,order,the,ordering,value;public,void,set,order,int,order,this,order,order
ProxyProcessorSupport -> public void setOrder(int order);1498780456;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple processors._<p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered._@param order the ordering value;public void setOrder(int order) {_		this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,processors,p,default,value,is,code,integer,meaning,that,it,s,non,ordered,param,order,the,ordering,value;public,void,set,order,int,order,this,order,order
ProxyProcessorSupport -> public void setOrder(int order);1500496845;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple processors._<p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered._@param order the ordering value;public void setOrder(int order) {_		this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,processors,p,default,value,is,code,integer,meaning,that,it,s,non,ordered,param,order,the,ordering,value;public,void,set,order,int,order,this,order,order
ProxyProcessorSupport -> public void setOrder(int order);1522448444;Set the ordering which will apply to this processor's implementation_of {@link Ordered}, used when applying multiple processors._<p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered._@param order the ordering value;public void setOrder(int order) {_		this.order = order__	};set,the,ordering,which,will,apply,to,this,processor,s,implementation,of,link,ordered,used,when,applying,multiple,processors,p,the,default,value,is,code,ordered,meaning,non,ordered,param,order,the,ordering,value;public,void,set,order,int,order,this,order,order
ProxyProcessorSupport -> protected boolean isConfigurationCallbackInterface(Class<?> ifc);1398791249;Determine whether the given interface is just a container callback and_therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is just a container callback;protected boolean isConfigurationCallbackInterface(Class<?> ifc) {_		return (ifc.equals(InitializingBean.class) || ifc.equals(DisposableBean.class) ||_				ObjectUtils.containsElement(ifc.getInterfaces(), Aware.class))__	};determine,whether,the,given,interface,is,just,a,container,callback,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,just,a,container,callback;protected,boolean,is,configuration,callback,interface,class,ifc,return,ifc,equals,initializing,bean,class,ifc,equals,disposable,bean,class,object,utils,contains,element,ifc,get,interfaces,aware,class
ProxyProcessorSupport -> protected boolean isConfigurationCallbackInterface(Class<?> ifc);1400538684;Determine whether the given interface is just a container callback and_therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is just a container callback;protected boolean isConfigurationCallbackInterface(Class<?> ifc) {_		return (ifc.equals(InitializingBean.class) || ifc.equals(DisposableBean.class) ||_				ObjectUtils.containsElement(ifc.getInterfaces(), Aware.class))__	};determine,whether,the,given,interface,is,just,a,container,callback,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,just,a,container,callback;protected,boolean,is,configuration,callback,interface,class,ifc,return,ifc,equals,initializing,bean,class,ifc,equals,disposable,bean,class,object,utils,contains,element,ifc,get,interfaces,aware,class
ProxyProcessorSupport -> protected boolean isConfigurationCallbackInterface(Class<?> ifc);1432125256;Determine whether the given interface is just a container callback and_therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is just a container callback;protected boolean isConfigurationCallbackInterface(Class<?> ifc) {_		return (InitializingBean.class == ifc || DisposableBean.class == ifc ||_				ObjectUtils.containsElement(ifc.getInterfaces(), Aware.class))__	};determine,whether,the,given,interface,is,just,a,container,callback,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,just,a,container,callback;protected,boolean,is,configuration,callback,interface,class,ifc,return,initializing,bean,class,ifc,disposable,bean,class,ifc,object,utils,contains,element,ifc,get,interfaces,aware,class
ProxyProcessorSupport -> protected boolean isConfigurationCallbackInterface(Class<?> ifc);1469030751;Determine whether the given interface is just a container callback and_therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is just a container callback;protected boolean isConfigurationCallbackInterface(Class<?> ifc) {_		return (InitializingBean.class == ifc || DisposableBean.class == ifc ||_				ObjectUtils.containsElement(ifc.getInterfaces(), Aware.class))__	};determine,whether,the,given,interface,is,just,a,container,callback,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,just,a,container,callback;protected,boolean,is,configuration,callback,interface,class,ifc,return,initializing,bean,class,ifc,disposable,bean,class,ifc,object,utils,contains,element,ifc,get,interfaces,aware,class
ProxyProcessorSupport -> protected boolean isConfigurationCallbackInterface(Class<?> ifc);1478210015;Determine whether the given interface is just a container callback and_therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is just a container callback;protected boolean isConfigurationCallbackInterface(Class<?> ifc) {_		return (InitializingBean.class == ifc || DisposableBean.class == ifc ||_				ObjectUtils.containsElement(ifc.getInterfaces(), Aware.class))__	};determine,whether,the,given,interface,is,just,a,container,callback,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,just,a,container,callback;protected,boolean,is,configuration,callback,interface,class,ifc,return,initializing,bean,class,ifc,disposable,bean,class,ifc,object,utils,contains,element,ifc,get,interfaces,aware,class
ProxyProcessorSupport -> protected boolean isConfigurationCallbackInterface(Class<?> ifc);1496242568;Determine whether the given interface is just a container callback and_therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is just a container callback;protected boolean isConfigurationCallbackInterface(Class<?> ifc) {_		return (InitializingBean.class == ifc || DisposableBean.class == ifc ||_				ObjectUtils.containsElement(ifc.getInterfaces(), Aware.class))__	};determine,whether,the,given,interface,is,just,a,container,callback,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,just,a,container,callback;protected,boolean,is,configuration,callback,interface,class,ifc,return,initializing,bean,class,ifc,disposable,bean,class,ifc,object,utils,contains,element,ifc,get,interfaces,aware,class
ProxyProcessorSupport -> protected boolean isConfigurationCallbackInterface(Class<?> ifc);1496837955;Determine whether the given interface is just a container callback and_therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is just a container callback;protected boolean isConfigurationCallbackInterface(Class<?> ifc) {_		return (InitializingBean.class == ifc || DisposableBean.class == ifc ||_				ObjectUtils.containsElement(ifc.getInterfaces(), Aware.class))__	};determine,whether,the,given,interface,is,just,a,container,callback,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,just,a,container,callback;protected,boolean,is,configuration,callback,interface,class,ifc,return,initializing,bean,class,ifc,disposable,bean,class,ifc,object,utils,contains,element,ifc,get,interfaces,aware,class
ProxyProcessorSupport -> protected boolean isConfigurationCallbackInterface(Class<?> ifc);1498780456;Determine whether the given interface is just a container callback and_therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is just a container callback;protected boolean isConfigurationCallbackInterface(Class<?> ifc) {_		return (InitializingBean.class == ifc || DisposableBean.class == ifc ||_				ObjectUtils.containsElement(ifc.getInterfaces(), Aware.class))__	};determine,whether,the,given,interface,is,just,a,container,callback,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,just,a,container,callback;protected,boolean,is,configuration,callback,interface,class,ifc,return,initializing,bean,class,ifc,disposable,bean,class,ifc,object,utils,contains,element,ifc,get,interfaces,aware,class
ProxyProcessorSupport -> protected boolean isConfigurationCallbackInterface(Class<?> ifc);1500496845;Determine whether the given interface is just a container callback and_therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is just a container callback;protected boolean isConfigurationCallbackInterface(Class<?> ifc) {_		return (InitializingBean.class == ifc || DisposableBean.class == ifc || Closeable.class == ifc ||_				AutoCloseable.class == ifc || ObjectUtils.containsElement(ifc.getInterfaces(), Aware.class))__	};determine,whether,the,given,interface,is,just,a,container,callback,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,just,a,container,callback;protected,boolean,is,configuration,callback,interface,class,ifc,return,initializing,bean,class,ifc,disposable,bean,class,ifc,closeable,class,ifc,auto,closeable,class,ifc,object,utils,contains,element,ifc,get,interfaces,aware,class
ProxyProcessorSupport -> protected boolean isConfigurationCallbackInterface(Class<?> ifc);1522448444;Determine whether the given interface is just a container callback and_therefore not to be considered as a reasonable proxy interface._<p>If no reasonable proxy interface is found for a given bean, it will get_proxied with its full target class, assuming that as the user's intention._@param ifc the interface to check_@return whether the given interface is just a container callback;protected boolean isConfigurationCallbackInterface(Class<?> ifc) {_		return (InitializingBean.class == ifc || DisposableBean.class == ifc || Closeable.class == ifc ||_				AutoCloseable.class == ifc || ObjectUtils.containsElement(ifc.getInterfaces(), Aware.class))__	};determine,whether,the,given,interface,is,just,a,container,callback,and,therefore,not,to,be,considered,as,a,reasonable,proxy,interface,p,if,no,reasonable,proxy,interface,is,found,for,a,given,bean,it,will,get,proxied,with,its,full,target,class,assuming,that,as,the,user,s,intention,param,ifc,the,interface,to,check,return,whether,the,given,interface,is,just,a,container,callback;protected,boolean,is,configuration,callback,interface,class,ifc,return,initializing,bean,class,ifc,disposable,bean,class,ifc,closeable,class,ifc,auto,closeable,class,ifc,object,utils,contains,element,ifc,get,interfaces,aware,class
ProxyProcessorSupport -> public void setProxyClassLoader(@Nullable ClassLoader classLoader);1496837955;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the containing_{@link org.springframework.beans.factory.BeanFactory} for loading all bean classes._This can be overridden here for specific proxies.;public void setProxyClassLoader(@Nullable ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,link,org,springframework,beans,factory,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,nullable,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyProcessorSupport -> public void setProxyClassLoader(@Nullable ClassLoader classLoader);1498780456;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the containing_{@link org.springframework.beans.factory.BeanFactory} for loading all bean classes._This can be overridden here for specific proxies.;public void setProxyClassLoader(@Nullable ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,link,org,springframework,beans,factory,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,nullable,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyProcessorSupport -> public void setProxyClassLoader(@Nullable ClassLoader classLoader);1500496845;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the containing_{@link org.springframework.beans.factory.BeanFactory} for loading all bean classes._This can be overridden here for specific proxies.;public void setProxyClassLoader(@Nullable ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,link,org,springframework,beans,factory,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,nullable,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyProcessorSupport -> public void setProxyClassLoader(@Nullable ClassLoader classLoader);1522448444;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the containing_{@link org.springframework.beans.factory.BeanFactory} for loading all bean classes._This can be overridden here for specific proxies.;public void setProxyClassLoader(@Nullable ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,link,org,springframework,beans,factory,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,nullable,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyProcessorSupport -> @Nullable 	protected ClassLoader getProxyClassLoader();1498780456;Return the configured proxy ClassLoader for this processor.;@Nullable_	protected ClassLoader getProxyClassLoader() {_		return this.proxyClassLoader__	};return,the,configured,proxy,class,loader,for,this,processor;nullable,protected,class,loader,get,proxy,class,loader,return,this,proxy,class,loader
ProxyProcessorSupport -> @Nullable 	protected ClassLoader getProxyClassLoader();1500496845;Return the configured proxy ClassLoader for this processor.;@Nullable_	protected ClassLoader getProxyClassLoader() {_		return this.proxyClassLoader__	};return,the,configured,proxy,class,loader,for,this,processor;nullable,protected,class,loader,get,proxy,class,loader,return,this,proxy,class,loader
ProxyProcessorSupport -> @Nullable 	protected ClassLoader getProxyClassLoader();1522448444;Return the configured proxy ClassLoader for this processor.;@Nullable_	protected ClassLoader getProxyClassLoader() {_		return this.proxyClassLoader__	};return,the,configured,proxy,class,loader,for,this,processor;nullable,protected,class,loader,get,proxy,class,loader,return,this,proxy,class,loader
ProxyProcessorSupport -> protected ClassLoader getProxyClassLoader();1398791249;Return the configured proxy ClassLoader for this processor.;protected ClassLoader getProxyClassLoader() {_		return this.proxyClassLoader__	};return,the,configured,proxy,class,loader,for,this,processor;protected,class,loader,get,proxy,class,loader,return,this,proxy,class,loader
ProxyProcessorSupport -> protected ClassLoader getProxyClassLoader();1400538684;Return the configured proxy ClassLoader for this processor.;protected ClassLoader getProxyClassLoader() {_		return this.proxyClassLoader__	};return,the,configured,proxy,class,loader,for,this,processor;protected,class,loader,get,proxy,class,loader,return,this,proxy,class,loader
ProxyProcessorSupport -> protected ClassLoader getProxyClassLoader();1432125256;Return the configured proxy ClassLoader for this processor.;protected ClassLoader getProxyClassLoader() {_		return this.proxyClassLoader__	};return,the,configured,proxy,class,loader,for,this,processor;protected,class,loader,get,proxy,class,loader,return,this,proxy,class,loader
ProxyProcessorSupport -> protected ClassLoader getProxyClassLoader();1469030751;Return the configured proxy ClassLoader for this processor.;protected ClassLoader getProxyClassLoader() {_		return this.proxyClassLoader__	};return,the,configured,proxy,class,loader,for,this,processor;protected,class,loader,get,proxy,class,loader,return,this,proxy,class,loader
ProxyProcessorSupport -> protected ClassLoader getProxyClassLoader();1478210015;Return the configured proxy ClassLoader for this processor.;protected ClassLoader getProxyClassLoader() {_		return this.proxyClassLoader__	};return,the,configured,proxy,class,loader,for,this,processor;protected,class,loader,get,proxy,class,loader,return,this,proxy,class,loader
ProxyProcessorSupport -> protected ClassLoader getProxyClassLoader();1496242568;Return the configured proxy ClassLoader for this processor.;protected ClassLoader getProxyClassLoader() {_		return this.proxyClassLoader__	};return,the,configured,proxy,class,loader,for,this,processor;protected,class,loader,get,proxy,class,loader,return,this,proxy,class,loader
ProxyProcessorSupport -> protected ClassLoader getProxyClassLoader();1496837955;Return the configured proxy ClassLoader for this processor.;protected ClassLoader getProxyClassLoader() {_		return this.proxyClassLoader__	};return,the,configured,proxy,class,loader,for,this,processor;protected,class,loader,get,proxy,class,loader,return,this,proxy,class,loader
ProxyProcessorSupport -> public void setProxyClassLoader(ClassLoader classLoader);1398791249;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyProcessorSupport -> public void setProxyClassLoader(ClassLoader classLoader);1400538684;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the containing_{@link org.springframework.beans.factory.BeanFactory} for loading all bean classes._This can be overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,link,org,springframework,beans,factory,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyProcessorSupport -> public void setProxyClassLoader(ClassLoader classLoader);1432125256;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the containing_{@link org.springframework.beans.factory.BeanFactory} for loading all bean classes._This can be overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,link,org,springframework,beans,factory,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyProcessorSupport -> public void setProxyClassLoader(ClassLoader classLoader);1469030751;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the containing_{@link org.springframework.beans.factory.BeanFactory} for loading all bean classes._This can be overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,link,org,springframework,beans,factory,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyProcessorSupport -> public void setProxyClassLoader(ClassLoader classLoader);1478210015;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the containing_{@link org.springframework.beans.factory.BeanFactory} for loading all bean classes._This can be overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,link,org,springframework,beans,factory,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyProcessorSupport -> public void setProxyClassLoader(ClassLoader classLoader);1496242568;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the containing_{@link org.springframework.beans.factory.BeanFactory} for loading all bean classes._This can be overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,link,org,springframework,beans,factory,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
