commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether to only include advisors with a certain prefix in the bean name.  * <p>Default is {@code false}, including all beans of type {@code Advisor}.  * @see #setAdvisorBeanNamePrefix  */ ;/**  * Set whether to only include advisors with a certain prefix in the bean name.  * <p>Default is {@code false}, including all beans of type {@code Advisor}.  * @see #setAdvisorBeanNamePrefix  */ public void setUsePrefix(boolean usePrefix) {     this.usePrefix = usePrefix. }
true;public;0;3;/**  * Return whether to only include advisors with a certain prefix in the bean name.  */ ;/**  * Return whether to only include advisors with a certain prefix in the bean name.  */ public boolean isUsePrefix() {     return this.usePrefix. }
true;public;1;3;/**  * Set the prefix for bean names that will cause them to be included for  * auto-proxying by this object. This prefix should be set to avoid circular  * references. Default value is the bean name of this object + a dot.  * @param advisorBeanNamePrefix the exclusion prefix  */ ;/**  * Set the prefix for bean names that will cause them to be included for  * auto-proxying by this object. This prefix should be set to avoid circular  * references. Default value is the bean name of this object + a dot.  * @param advisorBeanNamePrefix the exclusion prefix  */ public void setAdvisorBeanNamePrefix(@Nullable String advisorBeanNamePrefix) {     this.advisorBeanNamePrefix = advisorBeanNamePrefix. }
true;public;0;4;/**  * Return the prefix for bean names that will cause them to be included  * for auto-proxying by this object.  */ ;/**  * Return the prefix for bean names that will cause them to be included  * for auto-proxying by this object.  */ @Nullable public String getAdvisorBeanNamePrefix() {     return this.advisorBeanNamePrefix. }
false;public;1;7;;@Override public void setBeanName(String name) {     // If no infrastructure bean name prefix has been set, override it.     if (this.advisorBeanNamePrefix == null) {         this.advisorBeanNamePrefix = name + SEPARATOR.     } }
true;protected;1;8;/**  * Consider {@code Advisor} beans with the specified prefix as eligible, if activated.  * @see #setUsePrefix  * @see #setAdvisorBeanNamePrefix  */ ;/**  * Consider {@code Advisor} beans with the specified prefix as eligible, if activated.  * @see #setUsePrefix  * @see #setAdvisorBeanNamePrefix  */ @Override protected boolean isEligibleAdvisorBean(String beanName) {     if (!isUsePrefix()) {         return true.     }     String prefix = getAdvisorBeanNamePrefix().     return (prefix != null && beanName.startsWith(prefix)). }
