commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void set$AroundClosure(AroundClosure aroundClosure) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Object proceed() throws Throwable {     return this.methodInvocation.invocableClone().proceed(). }
false;public;1;11;;@Override public Object proceed(Object[] arguments) throws Throwable {     Assert.notNull(arguments, "Argument array passed to proceed cannot be null").     if (arguments.length != this.methodInvocation.getArguments().length) {         throw new IllegalArgumentException("Expecting " + this.methodInvocation.getArguments().length + " arguments to proceed, " + "but was passed " + arguments.length + " arguments").     }     this.methodInvocation.setArguments(arguments).     return this.methodInvocation.invocableClone(arguments).proceed(). }
true;public;0;4;/**  * Returns the Spring AOP proxy. Cannot be {@code null}.  */ ;/**  * Returns the Spring AOP proxy. Cannot be {@code null}.  */ @Override public Object getThis() {     return this.methodInvocation.getProxy(). }
true;public;0;5;/**  * Returns the Spring AOP target. May be {@code null} if there is no target.  */ ;/**  * Returns the Spring AOP target. May be {@code null} if there is no target.  */ @Override @Nullable public Object getTarget() {     return this.methodInvocation.getThis(). }
false;public;0;7;;@Override public Object[] getArgs() {     if (this.args == null) {         this.args = this.methodInvocation.getArguments().clone().     }     return this.args. }
false;public;0;7;;@Override public Signature getSignature() {     if (this.signature == null) {         this.signature = new MethodSignatureImpl().     }     return this.signature. }
false;public;0;7;;@Override public SourceLocation getSourceLocation() {     if (this.sourceLocation == null) {         this.sourceLocation = new SourceLocationImpl().     }     return this.sourceLocation. }
false;public;0;4;;@Override public String getKind() {     return ProceedingJoinPoint.METHOD_EXECUTION. }
false;public;0;5;;@Override public int getId() {     // TODO: It's just an adapter but returning 0 might still have side effects...     return 0. }
false;public;0;4;;@Override public JoinPoint.StaticPart getStaticPart() {     return this. }
false;public;0;4;;@Override public String toShortString() {     return "execution(" + getSignature().toShortString() + ")". }
false;public;0;4;;@Override public String toLongString() {     return "execution(" + getSignature().toLongString() + ")". }
false;public;0;4;;@Override public String toString() {     return "execution(" + getSignature().toString() + ")". }
false;public;0;4;;@Override public String getName() {     return methodInvocation.getMethod().getName(). }
false;public;0;4;;@Override public int getModifiers() {     return methodInvocation.getMethod().getModifiers(). }
false;public;0;4;;@Override public Class<?> getDeclaringType() {     return methodInvocation.getMethod().getDeclaringClass(). }
false;public;0;4;;@Override public String getDeclaringTypeName() {     return methodInvocation.getMethod().getDeclaringClass().getName(). }
false;public;0;4;;@Override public Class<?> getReturnType() {     return methodInvocation.getMethod().getReturnType(). }
false;public;0;4;;@Override public Method getMethod() {     return methodInvocation.getMethod(). }
false;public;0;4;;@Override public Class<?>[] getParameterTypes() {     return methodInvocation.getMethod().getParameterTypes(). }
false;public;0;8;;@Override @Nullable public String[] getParameterNames() {     if (this.parameterNames == null) {         this.parameterNames = parameterNameDiscoverer.getParameterNames(getMethod()).     }     return this.parameterNames. }
false;public;0;4;;@Override public Class<?>[] getExceptionTypes() {     return methodInvocation.getMethod().getExceptionTypes(). }
false;public;0;4;;@Override public String toShortString() {     return toString(false, false, false, false). }
false;public;0;4;;@Override public String toLongString() {     return toString(true, true, true, true). }
false;public;0;4;;@Override public String toString() {     return toString(false, true, false, true). }
false;private;4;21;;private String toString(boolean includeModifier, boolean includeReturnTypeAndArgs, boolean useLongReturnAndArgumentTypeName, boolean useLongTypeName) {     StringBuilder sb = new StringBuilder().     if (includeModifier) {         sb.append(Modifier.toString(getModifiers())).         sb.append(" ").     }     if (includeReturnTypeAndArgs) {         appendType(sb, getReturnType(), useLongReturnAndArgumentTypeName).         sb.append(" ").     }     appendType(sb, getDeclaringType(), useLongTypeName).     sb.append(".").     sb.append(getMethod().getName()).     sb.append("(").     Class<?>[] parametersTypes = getParameterTypes().     appendTypes(sb, parametersTypes, includeReturnTypeAndArgs, useLongReturnAndArgumentTypeName).     sb.append(")").     return sb.toString(). }
false;private;4;17;;private void appendTypes(StringBuilder sb, Class<?>[] types, boolean includeArgs, boolean useLongReturnAndArgumentTypeName) {     if (includeArgs) {         for (int size = types.length, i = 0. i < size. i++) {             appendType(sb, types[i], useLongReturnAndArgumentTypeName).             if (i < size - 1) {                 sb.append(",").             }         }     } else {         if (types.length != 0) {             sb.append("..").         }     } }
false;private;3;9;;private void appendType(StringBuilder sb, Class<?> type, boolean useLongTypeName) {     if (type.isArray()) {         appendType(sb, type.getComponentType(), useLongTypeName).         sb.append("[]").     } else {         sb.append(useLongTypeName ? type.getName() : type.getSimpleName()).     } }
false;public;0;7;;@Override public Class<?> getWithinType() {     if (methodInvocation.getThis() == null) {         throw new UnsupportedOperationException("No source location joinpoint available: target is null").     }     return methodInvocation.getThis().getClass(). }
false;public;0;4;;@Override public String getFileName() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public int getLine() {     throw new UnsupportedOperationException(). }
false;public;0;5;;@Override @Deprecated public int getColumn() {     throw new UnsupportedOperationException(). }
