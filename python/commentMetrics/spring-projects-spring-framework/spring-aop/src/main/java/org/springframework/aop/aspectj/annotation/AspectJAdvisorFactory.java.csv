# id;timestamp;commentText;codeText;commentWords;codeWords
AspectJAdvisorFactory -> boolean isAspect(Class<?> clazz)_;1328020251;Determine whether or not the given class is an aspect, as reported_by AspectJ's {@link org.aspectj.lang.reflect.AjTypeSystem}._<p>Will simply return <code>false</code> if the supposed aspect is_invalid (such as an extension of a concrete aspect class)._Will return true for some aspects that Spring AOP cannot process,_such as those with unsupported instantiation models._Use the {@link #validate} method to handle these cases if necessary._@param clazz the supposed annotation-style AspectJ class_@return whether or not this class is recognized by AspectJ as an aspect class;boolean isAspect(Class<?> clazz)_;determine,whether,or,not,the,given,class,is,an,aspect,as,reported,by,aspect,j,s,link,org,aspectj,lang,reflect,aj,type,system,p,will,simply,return,code,false,code,if,the,supposed,aspect,is,invalid,such,as,an,extension,of,a,concrete,aspect,class,will,return,true,for,some,aspects,that,spring,aop,cannot,process,such,as,those,with,unsupported,instantiation,models,use,the,link,validate,method,to,handle,these,cases,if,necessary,param,clazz,the,supposed,annotation,style,aspect,j,class,return,whether,or,not,this,class,is,recognized,by,aspect,j,as,an,aspect,class;boolean,is,aspect,class,clazz
AspectJAdvisorFactory -> boolean isAspect(Class<?> clazz)_;1356735495;Determine whether or not the given class is an aspect, as reported_by AspectJ's {@link org.aspectj.lang.reflect.AjTypeSystem}._<p>Will simply return {@code false} if the supposed aspect is_invalid (such as an extension of a concrete aspect class)._Will return true for some aspects that Spring AOP cannot process,_such as those with unsupported instantiation models._Use the {@link #validate} method to handle these cases if necessary._@param clazz the supposed annotation-style AspectJ class_@return whether or not this class is recognized by AspectJ as an aspect class;boolean isAspect(Class<?> clazz)_;determine,whether,or,not,the,given,class,is,an,aspect,as,reported,by,aspect,j,s,link,org,aspectj,lang,reflect,aj,type,system,p,will,simply,return,code,false,if,the,supposed,aspect,is,invalid,such,as,an,extension,of,a,concrete,aspect,class,will,return,true,for,some,aspects,that,spring,aop,cannot,process,such,as,those,with,unsupported,instantiation,models,use,the,link,validate,method,to,handle,these,cases,if,necessary,param,clazz,the,supposed,annotation,style,aspect,j,class,return,whether,or,not,this,class,is,recognized,by,aspect,j,as,an,aspect,class;boolean,is,aspect,class,clazz
AspectJAdvisorFactory -> boolean isAspect(Class<?> clazz)_;1450827071;Determine whether or not the given class is an aspect, as reported_by AspectJ's {@link org.aspectj.lang.reflect.AjTypeSystem}._<p>Will simply return {@code false} if the supposed aspect is_invalid (such as an extension of a concrete aspect class)._Will return true for some aspects that Spring AOP cannot process,_such as those with unsupported instantiation models._Use the {@link #validate} method to handle these cases if necessary._@param clazz the supposed annotation-style AspectJ class_@return whether or not this class is recognized by AspectJ as an aspect class;boolean isAspect(Class<?> clazz)_;determine,whether,or,not,the,given,class,is,an,aspect,as,reported,by,aspect,j,s,link,org,aspectj,lang,reflect,aj,type,system,p,will,simply,return,code,false,if,the,supposed,aspect,is,invalid,such,as,an,extension,of,a,concrete,aspect,class,will,return,true,for,some,aspects,that,spring,aop,cannot,process,such,as,those,with,unsupported,instantiation,models,use,the,link,validate,method,to,handle,these,cases,if,necessary,param,clazz,the,supposed,annotation,style,aspect,j,class,return,whether,or,not,this,class,is,recognized,by,aspect,j,as,an,aspect,class;boolean,is,aspect,class,clazz
AspectJAdvisorFactory -> boolean isAspect(Class<?> clazz)_;1495868221;Determine whether or not the given class is an aspect, as reported_by AspectJ's {@link org.aspectj.lang.reflect.AjTypeSystem}._<p>Will simply return {@code false} if the supposed aspect is_invalid (such as an extension of a concrete aspect class)._Will return true for some aspects that Spring AOP cannot process,_such as those with unsupported instantiation models._Use the {@link #validate} method to handle these cases if necessary._@param clazz the supposed annotation-style AspectJ class_@return whether or not this class is recognized by AspectJ as an aspect class;boolean isAspect(Class<?> clazz)_;determine,whether,or,not,the,given,class,is,an,aspect,as,reported,by,aspect,j,s,link,org,aspectj,lang,reflect,aj,type,system,p,will,simply,return,code,false,if,the,supposed,aspect,is,invalid,such,as,an,extension,of,a,concrete,aspect,class,will,return,true,for,some,aspects,that,spring,aop,cannot,process,such,as,those,with,unsupported,instantiation,models,use,the,link,validate,method,to,handle,these,cases,if,necessary,param,clazz,the,supposed,annotation,style,aspect,j,class,return,whether,or,not,this,class,is,recognized,by,aspect,j,as,an,aspect,class;boolean,is,aspect,class,clazz
AspectJAdvisorFactory -> List<Advisor> getAdvisors(MetadataAwareAspectInstanceFactory aspectInstanceFactory)_;1450827071;Build Spring AOP Advisors for all annotated At-AspectJ methods_on the specified aspect instance._@param aspectInstanceFactory the aspect instance factory_(not the aspect instance itself in order to avoid eager instantiation)_@return a list of advisors for this class;List<Advisor> getAdvisors(MetadataAwareAspectInstanceFactory aspectInstanceFactory)_;build,spring,aop,advisors,for,all,annotated,at,aspect,j,methods,on,the,specified,aspect,instance,param,aspect,instance,factory,the,aspect,instance,factory,not,the,aspect,instance,itself,in,order,to,avoid,eager,instantiation,return,a,list,of,advisors,for,this,class;list,advisor,get,advisors,metadata,aware,aspect,instance,factory,aspect,instance,factory
AspectJAdvisorFactory -> List<Advisor> getAdvisors(MetadataAwareAspectInstanceFactory aspectInstanceFactory)_;1495868221;Build Spring AOP Advisors for all annotated At-AspectJ methods_on the specified aspect instance._@param aspectInstanceFactory the aspect instance factory_(not the aspect instance itself in order to avoid eager instantiation)_@return a list of advisors for this class;List<Advisor> getAdvisors(MetadataAwareAspectInstanceFactory aspectInstanceFactory)_;build,spring,aop,advisors,for,all,annotated,at,aspect,j,methods,on,the,specified,aspect,instance,param,aspect,instance,factory,the,aspect,instance,factory,not,the,aspect,instance,itself,in,order,to,avoid,eager,instantiation,return,a,list,of,advisors,for,this,class;list,advisor,get,advisors,metadata,aware,aspect,instance,factory,aspect,instance,factory
AspectJAdvisorFactory -> void validate(Class<?> aspectClass) throws AopConfigException_;1328020251;Is the given class a valid AspectJ aspect class?_@param aspectClass the supposed AspectJ annotation-style class to validate_@throws AopConfigException if the class is an invalid aspect_(which can never be legal)_@throws NotAnAtAspectException if the class is not an aspect at all_(which may or may not be legal, depending on the context);void validate(Class<?> aspectClass) throws AopConfigException_;is,the,given,class,a,valid,aspect,j,aspect,class,param,aspect,class,the,supposed,aspect,j,annotation,style,class,to,validate,throws,aop,config,exception,if,the,class,is,an,invalid,aspect,which,can,never,be,legal,throws,not,an,at,aspect,exception,if,the,class,is,not,an,aspect,at,all,which,may,or,may,not,be,legal,depending,on,the,context;void,validate,class,aspect,class,throws,aop,config,exception
AspectJAdvisorFactory -> void validate(Class<?> aspectClass) throws AopConfigException_;1356735495;Is the given class a valid AspectJ aspect class?_@param aspectClass the supposed AspectJ annotation-style class to validate_@throws AopConfigException if the class is an invalid aspect_(which can never be legal)_@throws NotAnAtAspectException if the class is not an aspect at all_(which may or may not be legal, depending on the context);void validate(Class<?> aspectClass) throws AopConfigException_;is,the,given,class,a,valid,aspect,j,aspect,class,param,aspect,class,the,supposed,aspect,j,annotation,style,class,to,validate,throws,aop,config,exception,if,the,class,is,an,invalid,aspect,which,can,never,be,legal,throws,not,an,at,aspect,exception,if,the,class,is,not,an,aspect,at,all,which,may,or,may,not,be,legal,depending,on,the,context;void,validate,class,aspect,class,throws,aop,config,exception
AspectJAdvisorFactory -> void validate(Class<?> aspectClass) throws AopConfigException_;1450827071;Is the given class a valid AspectJ aspect class?_@param aspectClass the supposed AspectJ annotation-style class to validate_@throws AopConfigException if the class is an invalid aspect_(which can never be legal)_@throws NotAnAtAspectException if the class is not an aspect at all_(which may or may not be legal, depending on the context);void validate(Class<?> aspectClass) throws AopConfigException_;is,the,given,class,a,valid,aspect,j,aspect,class,param,aspect,class,the,supposed,aspect,j,annotation,style,class,to,validate,throws,aop,config,exception,if,the,class,is,an,invalid,aspect,which,can,never,be,legal,throws,not,an,at,aspect,exception,if,the,class,is,not,an,aspect,at,all,which,may,or,may,not,be,legal,depending,on,the,context;void,validate,class,aspect,class,throws,aop,config,exception
AspectJAdvisorFactory -> void validate(Class<?> aspectClass) throws AopConfigException_;1495868221;Is the given class a valid AspectJ aspect class?_@param aspectClass the supposed AspectJ annotation-style class to validate_@throws AopConfigException if the class is an invalid aspect_(which can never be legal)_@throws NotAnAtAspectException if the class is not an aspect at all_(which may or may not be legal, depending on the context);void validate(Class<?> aspectClass) throws AopConfigException_;is,the,given,class,a,valid,aspect,j,aspect,class,param,aspect,class,the,supposed,aspect,j,annotation,style,class,to,validate,throws,aop,config,exception,if,the,class,is,an,invalid,aspect,which,can,never,be,legal,throws,not,an,at,aspect,exception,if,the,class,is,not,an,aspect,at,all,which,may,or,may,not,be,legal,depending,on,the,context;void,validate,class,aspect,class,throws,aop,config,exception
AspectJAdvisorFactory -> Advice getAdvice(Method candidateAdviceMethod, AspectJExpressionPointcut pointcut, 			MetadataAwareAspectInstanceFactory aif, int declarationOrderInAspect, String aspectName)_;1328020251;Build a Spring AOP Advice for the given AspectJ advice method._@param candidateAdviceMethod the candidate advice method_@param pointcut the corresponding AspectJ expression pointcut_@param aif the aspect instance factory_@param declarationOrderInAspect the declaration order within the aspect_@param aspectName the name of the aspect_@return <code>null</code> if the method is not an AspectJ advice method_or if it is a pointcut that will be used by other advice but will not_create a Spring advice in its own right_@see org.springframework.aop.aspectj.AspectJAroundAdvice_@see org.springframework.aop.aspectj.AspectJMethodBeforeAdvice_@see org.springframework.aop.aspectj.AspectJAfterAdvice_@see org.springframework.aop.aspectj.AspectJAfterReturningAdvice_@see org.springframework.aop.aspectj.AspectJAfterThrowingAdvice;Advice getAdvice(Method candidateAdviceMethod, AspectJExpressionPointcut pointcut,_			MetadataAwareAspectInstanceFactory aif, int declarationOrderInAspect, String aspectName)_;build,a,spring,aop,advice,for,the,given,aspect,j,advice,method,param,candidate,advice,method,the,candidate,advice,method,param,pointcut,the,corresponding,aspect,j,expression,pointcut,param,aif,the,aspect,instance,factory,param,declaration,order,in,aspect,the,declaration,order,within,the,aspect,param,aspect,name,the,name,of,the,aspect,return,code,null,code,if,the,method,is,not,an,aspect,j,advice,method,or,if,it,is,a,pointcut,that,will,be,used,by,other,advice,but,will,not,create,a,spring,advice,in,its,own,right,see,org,springframework,aop,aspectj,aspect,jaround,advice,see,org,springframework,aop,aspectj,aspect,jmethod,before,advice,see,org,springframework,aop,aspectj,aspect,jafter,advice,see,org,springframework,aop,aspectj,aspect,jafter,returning,advice,see,org,springframework,aop,aspectj,aspect,jafter,throwing,advice;advice,get,advice,method,candidate,advice,method,aspect,jexpression,pointcut,pointcut,metadata,aware,aspect,instance,factory,aif,int,declaration,order,in,aspect,string,aspect,name
AspectJAdvisorFactory -> Advice getAdvice(Method candidateAdviceMethod, AspectJExpressionPointcut pointcut, 			MetadataAwareAspectInstanceFactory aif, int declarationOrderInAspect, String aspectName)_;1356735495;Build a Spring AOP Advice for the given AspectJ advice method._@param candidateAdviceMethod the candidate advice method_@param pointcut the corresponding AspectJ expression pointcut_@param aif the aspect instance factory_@param declarationOrderInAspect the declaration order within the aspect_@param aspectName the name of the aspect_@return {@code null} if the method is not an AspectJ advice method_or if it is a pointcut that will be used by other advice but will not_create a Spring advice in its own right_@see org.springframework.aop.aspectj.AspectJAroundAdvice_@see org.springframework.aop.aspectj.AspectJMethodBeforeAdvice_@see org.springframework.aop.aspectj.AspectJAfterAdvice_@see org.springframework.aop.aspectj.AspectJAfterReturningAdvice_@see org.springframework.aop.aspectj.AspectJAfterThrowingAdvice;Advice getAdvice(Method candidateAdviceMethod, AspectJExpressionPointcut pointcut,_			MetadataAwareAspectInstanceFactory aif, int declarationOrderInAspect, String aspectName)_;build,a,spring,aop,advice,for,the,given,aspect,j,advice,method,param,candidate,advice,method,the,candidate,advice,method,param,pointcut,the,corresponding,aspect,j,expression,pointcut,param,aif,the,aspect,instance,factory,param,declaration,order,in,aspect,the,declaration,order,within,the,aspect,param,aspect,name,the,name,of,the,aspect,return,code,null,if,the,method,is,not,an,aspect,j,advice,method,or,if,it,is,a,pointcut,that,will,be,used,by,other,advice,but,will,not,create,a,spring,advice,in,its,own,right,see,org,springframework,aop,aspectj,aspect,jaround,advice,see,org,springframework,aop,aspectj,aspect,jmethod,before,advice,see,org,springframework,aop,aspectj,aspect,jafter,advice,see,org,springframework,aop,aspectj,aspect,jafter,returning,advice,see,org,springframework,aop,aspectj,aspect,jafter,throwing,advice;advice,get,advice,method,candidate,advice,method,aspect,jexpression,pointcut,pointcut,metadata,aware,aspect,instance,factory,aif,int,declaration,order,in,aspect,string,aspect,name
AspectJAdvisorFactory -> List<Advisor> getAdvisors(MetadataAwareAspectInstanceFactory aif)_;1328020251;Build Spring AOP Advisors for all annotated At-AspectJ methods_on the specified aspect instance._@param aif the aspect instance factory (not the aspect instance itself_in order to avoid eager instantiation)_@return a list of advisors for this class;List<Advisor> getAdvisors(MetadataAwareAspectInstanceFactory aif)_;build,spring,aop,advisors,for,all,annotated,at,aspect,j,methods,on,the,specified,aspect,instance,param,aif,the,aspect,instance,factory,not,the,aspect,instance,itself,in,order,to,avoid,eager,instantiation,return,a,list,of,advisors,for,this,class;list,advisor,get,advisors,metadata,aware,aspect,instance,factory,aif
AspectJAdvisorFactory -> List<Advisor> getAdvisors(MetadataAwareAspectInstanceFactory aif)_;1356735495;Build Spring AOP Advisors for all annotated At-AspectJ methods_on the specified aspect instance._@param aif the aspect instance factory (not the aspect instance itself_in order to avoid eager instantiation)_@return a list of advisors for this class;List<Advisor> getAdvisors(MetadataAwareAspectInstanceFactory aif)_;build,spring,aop,advisors,for,all,annotated,at,aspect,j,methods,on,the,specified,aspect,instance,param,aif,the,aspect,instance,factory,not,the,aspect,instance,itself,in,order,to,avoid,eager,instantiation,return,a,list,of,advisors,for,this,class;list,advisor,get,advisors,metadata,aware,aspect,instance,factory,aif
AspectJAdvisorFactory -> Advisor getAdvisor(Method candidateAdviceMethod, 			MetadataAwareAspectInstanceFactory aif, int declarationOrderInAspect, String aspectName)_;1328020251;Build a Spring AOP Advisor for the given AspectJ advice method._@param candidateAdviceMethod the candidate advice method_@param aif the aspect instance factory_@param declarationOrderInAspect the declaration order within the aspect_@param aspectName the name of the aspect_@return <code>null</code> if the method is not an AspectJ advice method_or if it is a pointcut that will be used by other advice but will not_create a Spring advice in its own right;Advisor getAdvisor(Method candidateAdviceMethod,_			MetadataAwareAspectInstanceFactory aif, int declarationOrderInAspect, String aspectName)_;build,a,spring,aop,advisor,for,the,given,aspect,j,advice,method,param,candidate,advice,method,the,candidate,advice,method,param,aif,the,aspect,instance,factory,param,declaration,order,in,aspect,the,declaration,order,within,the,aspect,param,aspect,name,the,name,of,the,aspect,return,code,null,code,if,the,method,is,not,an,aspect,j,advice,method,or,if,it,is,a,pointcut,that,will,be,used,by,other,advice,but,will,not,create,a,spring,advice,in,its,own,right;advisor,get,advisor,method,candidate,advice,method,metadata,aware,aspect,instance,factory,aif,int,declaration,order,in,aspect,string,aspect,name
AspectJAdvisorFactory -> Advisor getAdvisor(Method candidateAdviceMethod, 			MetadataAwareAspectInstanceFactory aif, int declarationOrderInAspect, String aspectName)_;1356735495;Build a Spring AOP Advisor for the given AspectJ advice method._@param candidateAdviceMethod the candidate advice method_@param aif the aspect instance factory_@param declarationOrderInAspect the declaration order within the aspect_@param aspectName the name of the aspect_@return {@code null} if the method is not an AspectJ advice method_or if it is a pointcut that will be used by other advice but will not_create a Spring advice in its own right;Advisor getAdvisor(Method candidateAdviceMethod,_			MetadataAwareAspectInstanceFactory aif, int declarationOrderInAspect, String aspectName)_;build,a,spring,aop,advisor,for,the,given,aspect,j,advice,method,param,candidate,advice,method,the,candidate,advice,method,param,aif,the,aspect,instance,factory,param,declaration,order,in,aspect,the,declaration,order,within,the,aspect,param,aspect,name,the,name,of,the,aspect,return,code,null,if,the,method,is,not,an,aspect,j,advice,method,or,if,it,is,a,pointcut,that,will,be,used,by,other,advice,but,will,not,create,a,spring,advice,in,its,own,right;advisor,get,advisor,method,candidate,advice,method,metadata,aware,aspect,instance,factory,aif,int,declaration,order,in,aspect,string,aspect,name
