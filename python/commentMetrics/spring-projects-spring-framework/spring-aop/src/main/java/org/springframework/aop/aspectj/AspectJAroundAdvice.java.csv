# id;timestamp;commentText;codeText;commentWords;codeWords
AspectJAroundAdvice -> protected ProceedingJoinPoint lazyGetProceedingJoinPoint(ProxyMethodInvocation rmi);1328020251;Return the ProceedingJoinPoint for the current invocation,_instantiating it lazily if it hasn't been bound to the thread already._@param rmi the current Spring AOP ReflectiveMethodInvocation,_which we'll use for attribute binding_@return the ProceedingJoinPoint to make available to advice methods;protected ProceedingJoinPoint lazyGetProceedingJoinPoint(ProxyMethodInvocation rmi) {_		return new MethodInvocationProceedingJoinPoint(rmi)__	};return,the,proceeding,join,point,for,the,current,invocation,instantiating,it,lazily,if,it,hasn,t,been,bound,to,the,thread,already,param,rmi,the,current,spring,aop,reflective,method,invocation,which,we,ll,use,for,attribute,binding,return,the,proceeding,join,point,to,make,available,to,advice,methods;protected,proceeding,join,point,lazy,get,proceeding,join,point,proxy,method,invocation,rmi,return,new,method,invocation,proceeding,join,point,rmi
AspectJAroundAdvice -> protected ProceedingJoinPoint lazyGetProceedingJoinPoint(ProxyMethodInvocation rmi);1356735495;Return the ProceedingJoinPoint for the current invocation,_instantiating it lazily if it hasn't been bound to the thread already._@param rmi the current Spring AOP ReflectiveMethodInvocation,_which we'll use for attribute binding_@return the ProceedingJoinPoint to make available to advice methods;protected ProceedingJoinPoint lazyGetProceedingJoinPoint(ProxyMethodInvocation rmi) {_		return new MethodInvocationProceedingJoinPoint(rmi)__	};return,the,proceeding,join,point,for,the,current,invocation,instantiating,it,lazily,if,it,hasn,t,been,bound,to,the,thread,already,param,rmi,the,current,spring,aop,reflective,method,invocation,which,we,ll,use,for,attribute,binding,return,the,proceeding,join,point,to,make,available,to,advice,methods;protected,proceeding,join,point,lazy,get,proceeding,join,point,proxy,method,invocation,rmi,return,new,method,invocation,proceeding,join,point,rmi
AspectJAroundAdvice -> protected ProceedingJoinPoint lazyGetProceedingJoinPoint(ProxyMethodInvocation rmi);1357119239;Return the ProceedingJoinPoint for the current invocation,_instantiating it lazily if it hasn't been bound to the thread already._@param rmi the current Spring AOP ReflectiveMethodInvocation,_which we'll use for attribute binding_@return the ProceedingJoinPoint to make available to advice methods;protected ProceedingJoinPoint lazyGetProceedingJoinPoint(ProxyMethodInvocation rmi) {_		return new MethodInvocationProceedingJoinPoint(rmi)__	};return,the,proceeding,join,point,for,the,current,invocation,instantiating,it,lazily,if,it,hasn,t,been,bound,to,the,thread,already,param,rmi,the,current,spring,aop,reflective,method,invocation,which,we,ll,use,for,attribute,binding,return,the,proceeding,join,point,to,make,available,to,advice,methods;protected,proceeding,join,point,lazy,get,proceeding,join,point,proxy,method,invocation,rmi,return,new,method,invocation,proceeding,join,point,rmi
AspectJAroundAdvice -> protected ProceedingJoinPoint lazyGetProceedingJoinPoint(ProxyMethodInvocation rmi);1368482696;Return the ProceedingJoinPoint for the current invocation,_instantiating it lazily if it hasn't been bound to the thread already._@param rmi the current Spring AOP ReflectiveMethodInvocation,_which we'll use for attribute binding_@return the ProceedingJoinPoint to make available to advice methods;protected ProceedingJoinPoint lazyGetProceedingJoinPoint(ProxyMethodInvocation rmi) {_		return new MethodInvocationProceedingJoinPoint(rmi)__	};return,the,proceeding,join,point,for,the,current,invocation,instantiating,it,lazily,if,it,hasn,t,been,bound,to,the,thread,already,param,rmi,the,current,spring,aop,reflective,method,invocation,which,we,ll,use,for,attribute,binding,return,the,proceeding,join,point,to,make,available,to,advice,methods;protected,proceeding,join,point,lazy,get,proceeding,join,point,proxy,method,invocation,rmi,return,new,method,invocation,proceeding,join,point,rmi
AspectJAroundAdvice -> protected ProceedingJoinPoint lazyGetProceedingJoinPoint(ProxyMethodInvocation rmi);1450815633;Return the ProceedingJoinPoint for the current invocation,_instantiating it lazily if it hasn't been bound to the thread already._@param rmi the current Spring AOP ReflectiveMethodInvocation,_which we'll use for attribute binding_@return the ProceedingJoinPoint to make available to advice methods;protected ProceedingJoinPoint lazyGetProceedingJoinPoint(ProxyMethodInvocation rmi) {_		return new MethodInvocationProceedingJoinPoint(rmi)__	};return,the,proceeding,join,point,for,the,current,invocation,instantiating,it,lazily,if,it,hasn,t,been,bound,to,the,thread,already,param,rmi,the,current,spring,aop,reflective,method,invocation,which,we,ll,use,for,attribute,binding,return,the,proceeding,join,point,to,make,available,to,advice,methods;protected,proceeding,join,point,lazy,get,proceeding,join,point,proxy,method,invocation,rmi,return,new,method,invocation,proceeding,join,point,rmi
AspectJAroundAdvice -> protected ProceedingJoinPoint lazyGetProceedingJoinPoint(ProxyMethodInvocation rmi);1496837955;Return the ProceedingJoinPoint for the current invocation,_instantiating it lazily if it hasn't been bound to the thread already._@param rmi the current Spring AOP ReflectiveMethodInvocation,_which we'll use for attribute binding_@return the ProceedingJoinPoint to make available to advice methods;protected ProceedingJoinPoint lazyGetProceedingJoinPoint(ProxyMethodInvocation rmi) {_		return new MethodInvocationProceedingJoinPoint(rmi)__	};return,the,proceeding,join,point,for,the,current,invocation,instantiating,it,lazily,if,it,hasn,t,been,bound,to,the,thread,already,param,rmi,the,current,spring,aop,reflective,method,invocation,which,we,ll,use,for,attribute,binding,return,the,proceeding,join,point,to,make,available,to,advice,methods;protected,proceeding,join,point,lazy,get,proceeding,join,point,proxy,method,invocation,rmi,return,new,method,invocation,proceeding,join,point,rmi
