commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the filter determining which target classes this introduction  * should apply to.  * <p>This represents the class part of a pointcut. Note that method  * matching doesn't make sense to introductions.  * @return the class filter  */ ;/**  * Return the filter determining which target classes this introduction  * should apply to.  * <p>This represents the class part of a pointcut. Note that method  * matching doesn't make sense to introductions.  * @return the class filter  */ ClassFilter getClassFilter().
true;;0;1;/**  * Can the advised interfaces be implemented by the introduction advice?  * Invoked before adding an IntroductionAdvisor.  * @throws IllegalArgumentException if the advised interfaces can't be  * implemented by the introduction advice  */ ;/**  * Can the advised interfaces be implemented by the introduction advice?  * Invoked before adding an IntroductionAdvisor.  * @throws IllegalArgumentException if the advised interfaces can't be  * implemented by the introduction advice  */ void validateInterfaces() throws IllegalArgumentException.
