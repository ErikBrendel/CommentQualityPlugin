commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;4;/**  * Initialize {@link Pattern Patterns} from the supplied {@code String[]}.  */ ;/**  * Initialize {@link Pattern Patterns} from the supplied {@code String[]}.  */ @Override protected void initPatternRepresentation(String[] patterns) throws PatternSyntaxException {     this.compiledPatterns = compilePatterns(patterns). }
true;protected;1;4;/**  * Initialize exclusion {@link Pattern Patterns} from the supplied {@code String[]}.  */ ;/**  * Initialize exclusion {@link Pattern Patterns} from the supplied {@code String[]}.  */ @Override protected void initExcludedPatternRepresentation(String[] excludedPatterns) throws PatternSyntaxException {     this.compiledExclusionPatterns = compilePatterns(excludedPatterns). }
true;protected;2;5;/**  * Returns {@code true} if the {@link Pattern} at index {@code patternIndex}  * matches the supplied candidate {@code String}.  */ ;/**  * Returns {@code true} if the {@link Pattern} at index {@code patternIndex}  * matches the supplied candidate {@code String}.  */ @Override protected boolean matches(String pattern, int patternIndex) {     Matcher matcher = this.compiledPatterns[patternIndex].matcher(pattern).     return matcher.matches(). }
true;protected;2;5;/**  * Returns {@code true} if the exclusion {@link Pattern} at index {@code patternIndex}  * matches the supplied candidate {@code String}.  */ ;/**  * Returns {@code true} if the exclusion {@link Pattern} at index {@code patternIndex}  * matches the supplied candidate {@code String}.  */ @Override protected boolean matchesExclusion(String candidate, int patternIndex) {     Matcher matcher = this.compiledExclusionPatterns[patternIndex].matcher(candidate).     return matcher.matches(). }
true;private;1;7;/**  * Compiles the supplied {@code String[]} into an array of  * {@link Pattern} objects and returns that array.  */ ;/**  * Compiles the supplied {@code String[]} into an array of  * {@link Pattern} objects and returns that array.  */ private Pattern[] compilePatterns(String[] source) throws PatternSyntaxException {     Pattern[] destination = new Pattern[source.length].     for (int i = 0. i < source.length. i++) {         destination[i] = Pattern.compile(source[i]).     }     return destination. }
