commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the name of the bean to locate the {@link Method} on.  * <p>This property is required.  * @param targetBeanName the name of the bean to locate the {@link Method} on  */ ;/**  * Set the name of the bean to locate the {@link Method} on.  * <p>This property is required.  * @param targetBeanName the name of the bean to locate the {@link Method} on  */ public void setTargetBeanName(String targetBeanName) {     this.targetBeanName = targetBeanName. }
true;public;1;3;/**  * Set the name of the {@link Method} to locate.  * <p>This property is required.  * @param methodName the name of the {@link Method} to locate  */ ;/**  * Set the name of the {@link Method} to locate.  * <p>This property is required.  * @param methodName the name of the {@link Method} to locate  */ public void setMethodName(String methodName) {     this.methodName = methodName. }
false;public;1;20;;@Override public void setBeanFactory(BeanFactory beanFactory) {     if (!StringUtils.hasText(this.targetBeanName)) {         throw new IllegalArgumentException("Property 'targetBeanName' is required").     }     if (!StringUtils.hasText(this.methodName)) {         throw new IllegalArgumentException("Property 'methodName' is required").     }     Class<?> beanClass = beanFactory.getType(this.targetBeanName).     if (beanClass == null) {         throw new IllegalArgumentException("Can't determine type of bean with name '" + this.targetBeanName + "'").     }     this.method = BeanUtils.resolveSignature(this.methodName, beanClass).     if (this.method == null) {         throw new IllegalArgumentException("Unable to locate method [" + this.methodName + "] on bean [" + this.targetBeanName + "]").     } }
false;public;0;5;;@Override @Nullable public Method getObject() throws Exception {     return this.method. }
false;public;0;4;;@Override public Class<Method> getObjectType() {     return Method.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
