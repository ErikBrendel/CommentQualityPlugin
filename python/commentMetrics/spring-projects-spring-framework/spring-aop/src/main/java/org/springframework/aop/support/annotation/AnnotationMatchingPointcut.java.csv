commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ClassFilter getClassFilter() {     return this.classFilter. }
false;public;0;4;;@Override public MethodMatcher getMethodMatcher() {     return this.methodMatcher. }
false;public;1;12;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof AnnotationMatchingPointcut)) {         return false.     }     AnnotationMatchingPointcut otherPointcut = (AnnotationMatchingPointcut) other.     return (this.classFilter.equals(otherPointcut.classFilter) && this.methodMatcher.equals(otherPointcut.methodMatcher)). }
false;public;0;4;;@Override public int hashCode() {     return this.classFilter.hashCode() * 37 + this.methodMatcher.hashCode(). }
false;public;0;4;;@Override public String toString() {     return "AnnotationMatchingPointcut: " + this.classFilter + ", " + this.methodMatcher. }
true;public,static;1;4;/**  * Factory method for an AnnotationMatchingPointcut that matches  * for the specified annotation at the class level.  * @param annotationType the annotation type to look for at the class level  * @return the corresponding AnnotationMatchingPointcut  */ ;/**  * Factory method for an AnnotationMatchingPointcut that matches  * for the specified annotation at the class level.  * @param annotationType the annotation type to look for at the class level  * @return the corresponding AnnotationMatchingPointcut  */ public static AnnotationMatchingPointcut forClassAnnotation(Class<? extends Annotation> annotationType) {     Assert.notNull(annotationType, "Annotation type must not be null").     return new AnnotationMatchingPointcut(annotationType). }
true;public,static;1;4;/**  * Factory method for an AnnotationMatchingPointcut that matches  * for the specified annotation at the method level.  * @param annotationType the annotation type to look for at the method level  * @return the corresponding AnnotationMatchingPointcut  */ ;/**  * Factory method for an AnnotationMatchingPointcut that matches  * for the specified annotation at the method level.  * @param annotationType the annotation type to look for at the method level  * @return the corresponding AnnotationMatchingPointcut  */ public static AnnotationMatchingPointcut forMethodAnnotation(Class<? extends Annotation> annotationType) {     Assert.notNull(annotationType, "Annotation type must not be null").     return new AnnotationMatchingPointcut(null, annotationType). }
