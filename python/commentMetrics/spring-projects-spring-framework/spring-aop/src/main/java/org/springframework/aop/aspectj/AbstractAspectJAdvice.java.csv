# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1328020251;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link PrioritizedParameterNameDiscoverer}_containing a {@link LocalVariableTableParameterNameDiscoverer} and an_{@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		PrioritizedParameterNameDiscoverer discoverer = new PrioritizedParameterNameDiscoverer()__		discoverer.addDiscoverer(new LocalVariableTableParameterNameDiscoverer())__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,prioritized,parameter,name,discoverer,containing,a,link,local,variable,table,parameter,name,discoverer,and,an,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,prioritized,parameter,name,discoverer,discoverer,new,prioritized,parameter,name,discoverer,discoverer,add,discoverer,new,local,variable,table,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1355279383;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link PrioritizedParameterNameDiscoverer}_containing a {@link LocalVariableTableParameterNameDiscoverer} and an_{@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		PrioritizedParameterNameDiscoverer discoverer = new PrioritizedParameterNameDiscoverer()__		discoverer.addDiscoverer(new LocalVariableTableParameterNameDiscoverer())__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,prioritized,parameter,name,discoverer,containing,a,link,local,variable,table,parameter,name,discoverer,and,an,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,prioritized,parameter,name,discoverer,discoverer,new,prioritized,parameter,name,discoverer,discoverer,add,discoverer,new,local,variable,table,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1356735495;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link PrioritizedParameterNameDiscoverer}_containing a {@link LocalVariableTableParameterNameDiscoverer} and an_{@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		PrioritizedParameterNameDiscoverer discoverer = new PrioritizedParameterNameDiscoverer()__		discoverer.addDiscoverer(new LocalVariableTableParameterNameDiscoverer())__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,prioritized,parameter,name,discoverer,containing,a,link,local,variable,table,parameter,name,discoverer,and,an,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,prioritized,parameter,name,discoverer,discoverer,new,prioritized,parameter,name,discoverer,discoverer,add,discoverer,new,local,variable,table,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1357119239;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link PrioritizedParameterNameDiscoverer}_containing a {@link LocalVariableTableParameterNameDiscoverer} and an_{@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		PrioritizedParameterNameDiscoverer discoverer = new PrioritizedParameterNameDiscoverer()__		discoverer.addDiscoverer(new LocalVariableTableParameterNameDiscoverer())__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,prioritized,parameter,name,discoverer,containing,a,link,local,variable,table,parameter,name,discoverer,and,an,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,prioritized,parameter,name,discoverer,discoverer,new,prioritized,parameter,name,discoverer,discoverer,add,discoverer,new,local,variable,table,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1368482696;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link PrioritizedParameterNameDiscoverer}_containing a {@link LocalVariableTableParameterNameDiscoverer} and an_{@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		PrioritizedParameterNameDiscoverer discoverer = new PrioritizedParameterNameDiscoverer()__		discoverer.addDiscoverer(new LocalVariableTableParameterNameDiscoverer())__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,prioritized,parameter,name,discoverer,containing,a,link,local,variable,table,parameter,name,discoverer,and,an,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,prioritized,parameter,name,discoverer,discoverer,new,prioritized,parameter,name,discoverer,discoverer,add,discoverer,new,local,variable,table,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1375969963;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1385412762;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1407511029;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1432125256;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1450815633;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1467730834;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1467846264;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1495868221;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1496242568;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1496837955;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1498780456;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1520528267;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1520529117;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1522359230;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1530174524;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1532038651;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> protected ParameterNameDiscoverer createParameterNameDiscoverer();1542613849;Create a ParameterNameDiscoverer to be used for argument binding._<p>The default implementation creates a {@link DefaultParameterNameDiscoverer}_and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}.;protected ParameterNameDiscoverer createParameterNameDiscoverer() {_		_		_		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer()__		AspectJAdviceParameterNameDiscoverer adviceParameterNameDiscoverer =_				new AspectJAdviceParameterNameDiscoverer(this.pointcut.getExpression())__		adviceParameterNameDiscoverer.setReturningName(this.returningName)__		adviceParameterNameDiscoverer.setThrowingName(this.throwingName)__		_		adviceParameterNameDiscoverer.setRaiseExceptions(true)__		discoverer.addDiscoverer(adviceParameterNameDiscoverer)__		return discoverer__	};create,a,parameter,name,discoverer,to,be,used,for,argument,binding,p,the,default,implementation,creates,a,link,default,parameter,name,discoverer,and,adds,a,specifically,configured,link,aspect,jadvice,parameter,name,discoverer;protected,parameter,name,discoverer,create,parameter,name,discoverer,default,parameter,name,discoverer,discoverer,new,default,parameter,name,discoverer,aspect,jadvice,parameter,name,discoverer,advice,parameter,name,discoverer,new,aspect,jadvice,parameter,name,discoverer,this,pointcut,get,expression,advice,parameter,name,discoverer,set,returning,name,this,returning,name,advice,parameter,name,discoverer,set,throwing,name,this,throwing,name,advice,parameter,name,discoverer,set,raise,exceptions,true,discoverer,add,discoverer,advice,parameter,name,discoverer,return,discoverer
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1328020251;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1355279383;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1356735495;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1357119239;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1368482696;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1375969963;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1385412762;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1407511029;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1432125256;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1450815633;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1467730834;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1467846264;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1495868221;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1496242568;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1496837955;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1498780456;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1520528267;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1520529117;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1522359230;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1530174524;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1532038651;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> public static JoinPoint currentJoinPoint();1542613849;Lazily instantiate joinpoint for the current invocation._Requires MethodInvocation to be bound with ExposeInvocationInterceptor._<p>Do not use if access is available to the current ReflectiveMethodInvocation_(in an around advice)._@return current AspectJ joinpoint, or through an exception if we're not in a_Spring AOP invocation.;public static JoinPoint currentJoinPoint() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		JoinPoint jp = (JoinPoint) pmi.getUserAttribute(JOIN_POINT_KEY)__		if (jp == null) {_			jp = new MethodInvocationProceedingJoinPoint(pmi)__			pmi.setUserAttribute(JOIN_POINT_KEY, jp)__		}_		return jp__	};lazily,instantiate,joinpoint,for,the,current,invocation,requires,method,invocation,to,be,bound,with,expose,invocation,interceptor,p,do,not,use,if,access,is,available,to,the,current,reflective,method,invocation,in,an,around,advice,return,current,aspect,j,joinpoint,or,through,an,exception,if,we,re,not,in,a,spring,aop,invocation;public,static,join,point,current,join,point,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,join,point,jp,join,point,pmi,get,user,attribute,if,jp,null,jp,new,method,invocation,proceeding,join,point,pmi,pmi,set,user,attribute,jp,return,jp
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1328020251;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1355279383;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1356735495;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1357119239;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1368482696;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1375969963;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1385412762;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1407511029;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1432125256;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1450815633;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1467730834;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1467846264;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1495868221;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1496242568;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1496837955;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1498780456;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1520528267;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1520529117;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1522359230;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1530174524;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1532038651;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setReturningNameNoCheck(String name);1542613849;We need to hold the returning name at this level for argument binding calculations,_this method allows the afterReturning advice subclass to set the name.;protected void setReturningNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.returningName = name__		}_		else {_			_			try {_				this.discoveredReturningType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Returning name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,returning,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,returning,advice,subclass,to,set,the,name;protected,void,set,returning,name,no,check,string,name,if,is,variable,name,name,this,returning,name,name,else,try,this,discovered,returning,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,returning,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex);1328020251;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex) {_		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.adviceInvocationArgumentCount]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		} _		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.adviceInvocationArgumentCount) {_			throw new IllegalStateException("Required to bind " + this.adviceInvocationArgumentCount_					+ " arguments, but only bound " + numBound + " (JoinPointMatch " + _					(jpMatch == null ? "was NOT" : "WAS") + _					" bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,join,point,match,jp,match,object,return,value,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,advice,invocation,argument,count,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,advice,invocation,argument,count,throw,new,illegal,state,exception,required,to,bind,this,advice,invocation,argument,count,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex);1355279383;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex) {_		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.adviceInvocationArgumentCount]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		} _		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.adviceInvocationArgumentCount) {_			throw new IllegalStateException("Required to bind " + this.adviceInvocationArgumentCount_					+ " arguments, but only bound " + numBound + " (JoinPointMatch " + _					(jpMatch == null ? "was NOT" : "WAS") + _					" bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,join,point,match,jp,match,object,return,value,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,advice,invocation,argument,count,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,advice,invocation,argument,count,throw,new,illegal,state,exception,required,to,bind,this,advice,invocation,argument,count,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex);1356735495;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex) {_		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.adviceInvocationArgumentCount]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.adviceInvocationArgumentCount) {_			throw new IllegalStateException("Required to bind " + this.adviceInvocationArgumentCount_					+ " arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") +_					" bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,join,point,match,jp,match,object,return,value,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,advice,invocation,argument,count,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,advice,invocation,argument,count,throw,new,illegal,state,exception,required,to,bind,this,advice,invocation,argument,count,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex);1357119239;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex) {_		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.adviceInvocationArgumentCount]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.adviceInvocationArgumentCount) {_			throw new IllegalStateException("Required to bind " + this.adviceInvocationArgumentCount_					+ " arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") +_					" bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,join,point,match,jp,match,object,return,value,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,advice,invocation,argument,count,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,advice,invocation,argument,count,throw,new,illegal,state,exception,required,to,bind,this,advice,invocation,argument,count,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex);1368482696;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex) {_		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.adviceInvocationArgumentCount]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.adviceInvocationArgumentCount) {_			throw new IllegalStateException("Required to bind " + this.adviceInvocationArgumentCount_					+ " arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") +_					" bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,join,point,match,jp,match,object,return,value,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,advice,invocation,argument,count,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,advice,invocation,argument,count,throw,new,illegal,state,exception,required,to,bind,this,advice,invocation,argument,count,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex);1375969963;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex) {_		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.adviceInvocationArgumentCount]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.adviceInvocationArgumentCount) {_			throw new IllegalStateException("Required to bind " + this.adviceInvocationArgumentCount_					+ " arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") +_					" bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,join,point,match,jp,match,object,return,value,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,advice,invocation,argument,count,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,advice,invocation,argument,count,throw,new,illegal,state,exception,required,to,bind,this,advice,invocation,argument,count,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex);1385412762;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex) {_		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.adviceInvocationArgumentCount]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.adviceInvocationArgumentCount) {_			throw new IllegalStateException("Required to bind " + this.adviceInvocationArgumentCount_					+ " arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") +_					" bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,join,point,match,jp,match,object,return,value,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,advice,invocation,argument,count,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,advice,invocation,argument,count,throw,new,illegal,state,exception,required,to,bind,this,advice,invocation,argument,count,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex);1407511029;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex) {_		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.adviceInvocationArgumentCount]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.adviceInvocationArgumentCount) {_			throw new IllegalStateException("Required to bind " + this.adviceInvocationArgumentCount_					+ " arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") +_					" bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,join,point,match,jp,match,object,return,value,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,advice,invocation,argument,count,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,advice,invocation,argument,count,throw,new,illegal,state,exception,required,to,bind,this,advice,invocation,argument,count,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex);1432125256;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex) {_		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.adviceInvocationArgumentCount]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.adviceInvocationArgumentCount) {_			throw new IllegalStateException("Required to bind " + this.adviceInvocationArgumentCount_					+ " arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") +_					" bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,join,point,match,jp,match,object,return,value,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,advice,invocation,argument,count,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,advice,invocation,argument,count,throw,new,illegal,state,exception,required,to,bind,this,advice,invocation,argument,count,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex);1450815633;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex) {_		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.parameterTypes.length]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.parameterTypes.length) {_			throw new IllegalStateException("Required to bind " + this.parameterTypes.length +_					" arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") + " bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,join,point,match,jp,match,object,return,value,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,parameter,types,length,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,parameter,types,length,throw,new,illegal,state,exception,required,to,bind,this,parameter,types,length,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex);1467730834;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex) {_		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.parameterTypes.length]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.parameterTypes.length) {_			throw new IllegalStateException("Required to bind " + this.parameterTypes.length +_					" arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") + " bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,join,point,match,jp,match,object,return,value,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,parameter,types,length,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,parameter,types,length,throw,new,illegal,state,exception,required,to,bind,this,parameter,types,length,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex);1467846264;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, Object returnValue, Throwable ex) {_		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.parameterTypes.length]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.parameterTypes.length) {_			throw new IllegalStateException("Required to bind " + this.parameterTypes.length +_					" arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") + " bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,join,point,match,jp,match,object,return,value,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,parameter,types,length,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,parameter,types,length,throw,new,illegal,state,exception,required,to,bind,this,parameter,types,length,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> @Nullable 	public final ClassLoader getAspectClassLoader();1496837955;Return the ClassLoader for aspect instances.;@Nullable_	public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;nullable,public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> @Nullable 	public final ClassLoader getAspectClassLoader();1498780456;Return the ClassLoader for aspect instances.;@Nullable_	public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;nullable,public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> @Nullable 	public final ClassLoader getAspectClassLoader();1520528267;Return the ClassLoader for aspect instances.;@Nullable_	public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;nullable,public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> @Nullable 	public final ClassLoader getAspectClassLoader();1520529117;Return the ClassLoader for aspect instances.;@Nullable_	public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;nullable,public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> @Nullable 	public final ClassLoader getAspectClassLoader();1522359230;Return the ClassLoader for aspect instances.;@Nullable_	public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;nullable,public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> @Nullable 	public final ClassLoader getAspectClassLoader();1530174524;Return the ClassLoader for aspect instances.;@Nullable_	public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;nullable,public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> @Nullable 	public final ClassLoader getAspectClassLoader();1532038651;Return the ClassLoader for aspect instances.;@Nullable_	public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;nullable,public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> @Nullable 	public final ClassLoader getAspectClassLoader();1542613849;Return the ClassLoader for aspect instances.;@Nullable_	public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;nullable,public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex);1495868221;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex) {_		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.parameterTypes.length]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.parameterTypes.length) {_			throw new IllegalStateException("Required to bind " + this.parameterTypes.length +_					" arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") + " bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,parameter,types,length,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,parameter,types,length,throw,new,illegal,state,exception,required,to,bind,this,parameter,types,length,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex);1496242568;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex) {_		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.parameterTypes.length]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.parameterTypes.length) {_			throw new IllegalStateException("Required to bind " + this.parameterTypes.length +_					" arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") + " bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,parameter,types,length,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,parameter,types,length,throw,new,illegal,state,exception,required,to,bind,this,parameter,types,length,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> public void setAspectName(String name);1520529117;Set the name of the aspect (bean) in which the advice was declared.;public void setAspectName(String name) {_		this.aspectName = name__	};set,the,name,of,the,aspect,bean,in,which,the,advice,was,declared;public,void,set,aspect,name,string,name,this,aspect,name,name
AbstractAspectJAdvice -> public void setAspectName(String name);1522359230;Set the name of the aspect (bean) in which the advice was declared.;public void setAspectName(String name) {_		this.aspectName = name__	};set,the,name,of,the,aspect,bean,in,which,the,advice,was,declared;public,void,set,aspect,name,string,name,this,aspect,name,name
AbstractAspectJAdvice -> public void setAspectName(String name);1530174524;Set the name of the aspect (bean) in which the advice was declared.;public void setAspectName(String name) {_		this.aspectName = name__	};set,the,name,of,the,aspect,bean,in,which,the,advice,was,declared;public,void,set,aspect,name,string,name,this,aspect,name,name
AbstractAspectJAdvice -> public void setAspectName(String name);1532038651;Set the name of the aspect (bean) in which the advice was declared.;public void setAspectName(String name) {_		this.aspectName = name__	};set,the,name,of,the,aspect,bean,in,which,the,advice,was,declared;public,void,set,aspect,name,string,name,this,aspect,name,name
AbstractAspectJAdvice -> public void setAspectName(String name);1542613849;Set the name of the aspect (bean) in which the advice was declared.;public void setAspectName(String name) {_		this.aspectName = name__	};set,the,name,of,the,aspect,bean,in,which,the,advice,was,declared;public,void,set,aspect,name,string,name,this,aspect,name,name
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1328020251;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1355279383;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1356735495;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1357119239;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1368482696;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1375969963;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1385412762;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1407511029;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1432125256;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1450815633;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1467730834;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1467846264;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1495868221;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1496242568;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified name of a Java type on the classpath. " +_						"Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1496837955;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1498780456;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1520528267;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1520529117;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1522359230;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1530174524;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1532038651;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> protected void setThrowingNameNoCheck(String name);1542613849;We need to hold the throwing name at this level for argument binding calculations,_this method allows the afterThrowing advice subclass to set the name.;protected void setThrowingNameNoCheck(String name) {_		_		if (isVariableName(name)) {_			this.throwingName = name__		}_		else {_			_			try {_				this.discoveredThrowingType = ClassUtils.forName(name, getAspectClassLoader())__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException("Throwing name '" + name  +_						"' is neither a valid argument name nor the fully-qualified " +_						"name of a Java type on the classpath. Root cause: " + ex)__			}_		}_	};we,need,to,hold,the,throwing,name,at,this,level,for,argument,binding,calculations,this,method,allows,the,after,throwing,advice,subclass,to,set,the,name;protected,void,set,throwing,name,no,check,string,name,if,is,variable,name,name,this,throwing,name,name,else,try,this,discovered,throwing,type,class,utils,for,name,name,get,aspect,class,loader,catch,throwable,ex,throw,new,illegal,argument,exception,throwing,name,name,is,neither,a,valid,argument,name,nor,the,fully,qualified,name,of,a,java,type,on,the,classpath,root,cause,ex
AbstractAspectJAdvice -> private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset);1498780456;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (argumentNames[i].equals(this.returningName) ||_				argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,string,argument,names,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,argument,names,length,i,if,i,argument,index,offset,continue,if,argument,names,i,equals,this,returning,name,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset);1520528267;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (argumentNames[i].equals(this.returningName) ||_				argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,string,argument,names,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,argument,names,length,i,if,i,argument,index,offset,continue,if,argument,names,i,equals,this,returning,name,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset);1520529117;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (argumentNames[i].equals(this.returningName) ||_				argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,string,argument,names,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,argument,names,length,i,if,i,argument,index,offset,continue,if,argument,names,i,equals,this,returning,name,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset);1522359230;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (argumentNames[i].equals(this.returningName) ||_				argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,string,argument,names,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,argument,names,length,i,if,i,argument,index,offset,continue,if,argument,names,i,equals,this,returning,name,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset);1530174524;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (argumentNames[i].equals(this.returningName) ||_				argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,string,argument,names,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,argument,names,length,i,if,i,argument,index,offset,continue,if,argument,names,i,equals,this,returning,name,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset);1532038651;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (argumentNames[i].equals(this.returningName) ||_				argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,string,argument,names,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,argument,names,length,i,if,i,argument,index,offset,continue,if,argument,names,i,equals,this,returning,name,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset);1542613849;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (argumentNames[i].equals(this.returningName) ||_				argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,string,argument,names,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,argument,names,length,i,if,i,argument,index,offset,continue,if,argument,names,i,equals,this,returning,name,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> protected Object invokeAdviceMethod( 			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex) 			throws Throwable;1496837955;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(_			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex)_			throws Throwable {__		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod( 			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex) 			throws Throwable;1498780456;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(_			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex)_			throws Throwable {__		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod( 			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex) 			throws Throwable;1520528267;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(_			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex)_			throws Throwable {__		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod( 			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex) 			throws Throwable;1520529117;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(_			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex)_			throws Throwable {__		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod( 			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex) 			throws Throwable;1522359230;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(_			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex)_			throws Throwable {__		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod( 			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex) 			throws Throwable;1530174524;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(_			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex)_			throws Throwable {__		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod( 			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex) 			throws Throwable;1532038651;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(_			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex)_			throws Throwable {__		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod( 			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex) 			throws Throwable;1542613849;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(_			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex)_			throws Throwable {__		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> private void configurePointcutParameters(int argumentIndexOffset);1328020251;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[this.argumentNames.length - numParametersToRemove]__		Class[] pointcutParameterTypes = new Class[pointcutParameterNames.length]__		Class[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < this.argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (this.argumentNames[i].equals(this.returningName) ||_				this.argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = this.argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}_		_		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,this,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,this,argument,names,length,i,if,i,argument,index,offset,continue,if,this,argument,names,i,equals,this,returning,name,this,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,this,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(int argumentIndexOffset);1355279383;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[this.argumentNames.length - numParametersToRemove]__		Class[] pointcutParameterTypes = new Class[pointcutParameterNames.length]__		Class[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < this.argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (this.argumentNames[i].equals(this.returningName) ||_				this.argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = this.argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}_		_		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,this,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,this,argument,names,length,i,if,i,argument,index,offset,continue,if,this,argument,names,i,equals,this,returning,name,this,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,this,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(int argumentIndexOffset);1356735495;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[this.argumentNames.length - numParametersToRemove]__		Class[] pointcutParameterTypes = new Class[pointcutParameterNames.length]__		Class[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < this.argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (this.argumentNames[i].equals(this.returningName) ||_				this.argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = this.argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,this,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,this,argument,names,length,i,if,i,argument,index,offset,continue,if,this,argument,names,i,equals,this,returning,name,this,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,this,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(int argumentIndexOffset);1357119239;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[this.argumentNames.length - numParametersToRemove]__		Class[] pointcutParameterTypes = new Class[pointcutParameterNames.length]__		Class[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < this.argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (this.argumentNames[i].equals(this.returningName) ||_				this.argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = this.argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,this,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,this,argument,names,length,i,if,i,argument,index,offset,continue,if,this,argument,names,i,equals,this,returning,name,this,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,this,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(int argumentIndexOffset);1368482696;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[this.argumentNames.length - numParametersToRemove]__		Class[] pointcutParameterTypes = new Class[pointcutParameterNames.length]__		Class[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < this.argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (this.argumentNames[i].equals(this.returningName) ||_				this.argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = this.argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,this,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,this,argument,names,length,i,if,i,argument,index,offset,continue,if,this,argument,names,i,equals,this,returning,name,this,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,this,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(int argumentIndexOffset);1375969963;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[this.argumentNames.length - numParametersToRemove]__		Class[] pointcutParameterTypes = new Class[pointcutParameterNames.length]__		Class[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < this.argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (this.argumentNames[i].equals(this.returningName) ||_				this.argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = this.argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,this,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,this,argument,names,length,i,if,i,argument,index,offset,continue,if,this,argument,names,i,equals,this,returning,name,this,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,this,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(int argumentIndexOffset);1385412762;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[this.argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < this.argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (this.argumentNames[i].equals(this.returningName) ||_				this.argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = this.argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,this,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,this,argument,names,length,i,if,i,argument,index,offset,continue,if,this,argument,names,i,equals,this,returning,name,this,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,this,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(int argumentIndexOffset);1407511029;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[this.argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < this.argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (this.argumentNames[i].equals(this.returningName) ||_				this.argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = this.argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,this,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,this,argument,names,length,i,if,i,argument,index,offset,continue,if,this,argument,names,i,equals,this,returning,name,this,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,this,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(int argumentIndexOffset);1432125256;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[this.argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < this.argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (this.argumentNames[i].equals(this.returningName) ||_				this.argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = this.argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,this,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,this,argument,names,length,i,if,i,argument,index,offset,continue,if,this,argument,names,i,equals,this,returning,name,this,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,this,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(int argumentIndexOffset);1450815633;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[this.argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < this.argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (this.argumentNames[i].equals(this.returningName) ||_				this.argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = this.argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,this,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,this,argument,names,length,i,if,i,argument,index,offset,continue,if,this,argument,names,i,equals,this,returning,name,this,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,this,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(int argumentIndexOffset);1467730834;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[this.argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < this.argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (this.argumentNames[i].equals(this.returningName) ||_				this.argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = this.argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,this,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,this,argument,names,length,i,if,i,argument,index,offset,continue,if,this,argument,names,i,equals,this,returning,name,this,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,this,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(int argumentIndexOffset);1467846264;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[this.argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < this.argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (this.argumentNames[i].equals(this.returningName) ||_				this.argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = this.argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,this,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,this,argument,names,length,i,if,i,argument,index,offset,continue,if,this,argument,names,i,equals,this,returning,name,this,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,this,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(int argumentIndexOffset);1495868221;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[this.argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < this.argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (this.argumentNames[i].equals(this.returningName) ||_				this.argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = this.argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,this,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,this,argument,names,length,i,if,i,argument,index,offset,continue,if,this,argument,names,i,equals,this,returning,name,this,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,this,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(int argumentIndexOffset);1496242568;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[this.argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < this.argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (this.argumentNames[i].equals(this.returningName) ||_				this.argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = this.argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,this,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,this,argument,names,length,i,if,i,argument,index,offset,continue,if,this,argument,names,i,equals,this,returning,name,this,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,this,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> private void configurePointcutParameters(int argumentIndexOffset);1496837955;All parameters from argumentIndexOffset onwards are candidates for_pointcut parameters - but returning and throwing vars are handled differently_and must be removed from the list if present.;private void configurePointcutParameters(int argumentIndexOffset) {_		int numParametersToRemove = argumentIndexOffset__		if (this.returningName != null) {_			numParametersToRemove++__		}_		if (this.throwingName != null) {_			numParametersToRemove++__		}_		String[] pointcutParameterNames = new String[this.argumentNames.length - numParametersToRemove]__		Class<?>[] pointcutParameterTypes = new Class<?>[pointcutParameterNames.length]__		Class<?>[] methodParameterTypes = this.aspectJAdviceMethod.getParameterTypes()___		int index = 0__		for (int i = 0_ i < this.argumentNames.length_ i++) {_			if (i < argumentIndexOffset) {_				continue__			}_			if (this.argumentNames[i].equals(this.returningName) ||_				this.argumentNames[i].equals(this.throwingName)) {_				continue__			}_			pointcutParameterNames[index] = this.argumentNames[i]__			pointcutParameterTypes[index] = methodParameterTypes[i]__			index++__		}__		this.pointcut.setParameterNames(pointcutParameterNames)__		this.pointcut.setParameterTypes(pointcutParameterTypes)__	};all,parameters,from,argument,index,offset,onwards,are,candidates,for,pointcut,parameters,but,returning,and,throwing,vars,are,handled,differently,and,must,be,removed,from,the,list,if,present;private,void,configure,pointcut,parameters,int,argument,index,offset,int,num,parameters,to,remove,argument,index,offset,if,this,returning,name,null,num,parameters,to,remove,if,this,throwing,name,null,num,parameters,to,remove,string,pointcut,parameter,names,new,string,this,argument,names,length,num,parameters,to,remove,class,pointcut,parameter,types,new,class,pointcut,parameter,names,length,class,method,parameter,types,this,aspect,jadvice,method,get,parameter,types,int,index,0,for,int,i,0,i,this,argument,names,length,i,if,i,argument,index,offset,continue,if,this,argument,names,i,equals,this,returning,name,this,argument,names,i,equals,this,throwing,name,continue,pointcut,parameter,names,index,this,argument,names,i,pointcut,parameter,types,index,method,parameter,types,i,index,this,pointcut,set,parameter,names,pointcut,parameter,names,this,pointcut,set,parameter,types,pointcut,parameter,types
AbstractAspectJAdvice -> @Nullable 	protected JoinPointMatch getJoinPointMatch();1496837955;Get the current join point match at the join point we are being dispatched on.;@Nullable_	protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;nullable,protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> @Nullable 	protected JoinPointMatch getJoinPointMatch();1498780456;Get the current join point match at the join point we are being dispatched on.;@Nullable_	protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;nullable,protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> @Nullable 	protected JoinPointMatch getJoinPointMatch();1520528267;Get the current join point match at the join point we are being dispatched on.;@Nullable_	protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;nullable,protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> @Nullable 	protected JoinPointMatch getJoinPointMatch();1520529117;Get the current join point match at the join point we are being dispatched on.;@Nullable_	protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;nullable,protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> @Nullable 	protected JoinPointMatch getJoinPointMatch();1522359230;Get the current join point match at the join point we are being dispatched on.;@Nullable_	protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;nullable,protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> @Nullable 	protected JoinPointMatch getJoinPointMatch();1530174524;Get the current join point match at the join point we are being dispatched on.;@Nullable_	protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;nullable,protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> @Nullable 	protected JoinPointMatch getJoinPointMatch();1532038651;Get the current join point match at the join point we are being dispatched on.;@Nullable_	protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;nullable,protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> @Nullable 	protected JoinPointMatch getJoinPointMatch();1542613849;Get the current join point match at the join point we are being dispatched on.;@Nullable_	protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;nullable,protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1328020251;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1355279383;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1356735495;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1357119239;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1368482696;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1375969963;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1385412762;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1407511029;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1432125256;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1450815633;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1467730834;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1467846264;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1495868221;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1496242568;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1496837955;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1498780456;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1520528267;Sets the <b>declaration order</b> of this advice within the aspect;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};sets,the,b,declaration,order,b,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1520529117;Set the declaration order of this advice within the aspect.;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};set,the,declaration,order,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1522359230;Set the declaration order of this advice within the aspect.;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};set,the,declaration,order,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1530174524;Set the declaration order of this advice within the aspect.;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};set,the,declaration,order,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1532038651;Set the declaration order of this advice within the aspect.;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};set,the,declaration,order,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public void setDeclarationOrder(int order);1542613849;Set the declaration order of this advice within the aspect.;public void setDeclarationOrder(int order) {_		this.declarationOrder = order__	};set,the,declaration,order,of,this,advice,within,the,aspect;public,void,set,declaration,order,int,order,this,declaration,order,order
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1328020251;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.adviceInvocationArgumentCount = this.aspectJAdviceMethod.getParameterTypes().length__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,aspect,jadvice,method,aspect,jadvice,method,this,advice,invocation,argument,count,this,aspect,jadvice,method,get,parameter,types,length,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1355279383;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.adviceInvocationArgumentCount = this.aspectJAdviceMethod.getParameterTypes().length__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,aspect,jadvice,method,aspect,jadvice,method,this,advice,invocation,argument,count,this,aspect,jadvice,method,get,parameter,types,length,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1356735495;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.adviceInvocationArgumentCount = this.aspectJAdviceMethod.getParameterTypes().length__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,aspect,jadvice,method,aspect,jadvice,method,this,advice,invocation,argument,count,this,aspect,jadvice,method,get,parameter,types,length,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1357119239;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.adviceInvocationArgumentCount = this.aspectJAdviceMethod.getParameterTypes().length__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,aspect,jadvice,method,aspect,jadvice,method,this,advice,invocation,argument,count,this,aspect,jadvice,method,get,parameter,types,length,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1368482696;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.adviceInvocationArgumentCount = this.aspectJAdviceMethod.getParameterTypes().length__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,aspect,jadvice,method,aspect,jadvice,method,this,advice,invocation,argument,count,this,aspect,jadvice,method,get,parameter,types,length,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1375969963;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.adviceInvocationArgumentCount = this.aspectJAdviceMethod.getParameterTypes().length__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,aspect,jadvice,method,aspect,jadvice,method,this,advice,invocation,argument,count,this,aspect,jadvice,method,get,parameter,types,length,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1385412762;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.adviceInvocationArgumentCount = this.aspectJAdviceMethod.getParameterTypes().length__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,aspect,jadvice,method,aspect,jadvice,method,this,advice,invocation,argument,count,this,aspect,jadvice,method,get,parameter,types,length,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1407511029;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.adviceInvocationArgumentCount = this.aspectJAdviceMethod.getParameterTypes().length__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,aspect,jadvice,method,aspect,jadvice,method,this,advice,invocation,argument,count,this,aspect,jadvice,method,get,parameter,types,length,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1432125256;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.adviceInvocationArgumentCount = this.aspectJAdviceMethod.getParameterTypes().length__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,aspect,jadvice,method,aspect,jadvice,method,this,advice,invocation,argument,count,this,aspect,jadvice,method,get,parameter,types,length,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1450815633;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.declaringClass = aspectJAdviceMethod.getDeclaringClass()__		this.methodName = aspectJAdviceMethod.getName()__		this.parameterTypes = aspectJAdviceMethod.getParameterTypes()__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,declaring,class,aspect,jadvice,method,get,declaring,class,this,method,name,aspect,jadvice,method,get,name,this,parameter,types,aspect,jadvice,method,get,parameter,types,this,aspect,jadvice,method,aspect,jadvice,method,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1467730834;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.declaringClass = aspectJAdviceMethod.getDeclaringClass()__		this.methodName = aspectJAdviceMethod.getName()__		this.parameterTypes = aspectJAdviceMethod.getParameterTypes()__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,declaring,class,aspect,jadvice,method,get,declaring,class,this,method,name,aspect,jadvice,method,get,name,this,parameter,types,aspect,jadvice,method,get,parameter,types,this,aspect,jadvice,method,aspect,jadvice,method,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1467846264;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.declaringClass = aspectJAdviceMethod.getDeclaringClass()__		this.methodName = aspectJAdviceMethod.getName()__		this.parameterTypes = aspectJAdviceMethod.getParameterTypes()__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,declaring,class,aspect,jadvice,method,get,declaring,class,this,method,name,aspect,jadvice,method,get,name,this,parameter,types,aspect,jadvice,method,get,parameter,types,this,aspect,jadvice,method,aspect,jadvice,method,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1495868221;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.declaringClass = aspectJAdviceMethod.getDeclaringClass()__		this.methodName = aspectJAdviceMethod.getName()__		this.parameterTypes = aspectJAdviceMethod.getParameterTypes()__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,declaring,class,aspect,jadvice,method,get,declaring,class,this,method,name,aspect,jadvice,method,get,name,this,parameter,types,aspect,jadvice,method,get,parameter,types,this,aspect,jadvice,method,aspect,jadvice,method,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1496242568;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.declaringClass = aspectJAdviceMethod.getDeclaringClass()__		this.methodName = aspectJAdviceMethod.getName()__		this.parameterTypes = aspectJAdviceMethod.getParameterTypes()__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,declaring,class,aspect,jadvice,method,get,declaring,class,this,method,name,aspect,jadvice,method,get,name,this,parameter,types,aspect,jadvice,method,get,parameter,types,this,aspect,jadvice,method,aspect,jadvice,method,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1496837955;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.declaringClass = aspectJAdviceMethod.getDeclaringClass()__		this.methodName = aspectJAdviceMethod.getName()__		this.parameterTypes = aspectJAdviceMethod.getParameterTypes()__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,declaring,class,aspect,jadvice,method,get,declaring,class,this,method,name,aspect,jadvice,method,get,name,this,parameter,types,aspect,jadvice,method,get,parameter,types,this,aspect,jadvice,method,aspect,jadvice,method,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1498780456;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.declaringClass = aspectJAdviceMethod.getDeclaringClass()__		this.methodName = aspectJAdviceMethod.getName()__		this.parameterTypes = aspectJAdviceMethod.getParameterTypes()__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,declaring,class,aspect,jadvice,method,get,declaring,class,this,method,name,aspect,jadvice,method,get,name,this,parameter,types,aspect,jadvice,method,get,parameter,types,this,aspect,jadvice,method,aspect,jadvice,method,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1520528267;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.declaringClass = aspectJAdviceMethod.getDeclaringClass()__		this.methodName = aspectJAdviceMethod.getName()__		this.parameterTypes = aspectJAdviceMethod.getParameterTypes()__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,declaring,class,aspect,jadvice,method,get,declaring,class,this,method,name,aspect,jadvice,method,get,name,this,parameter,types,aspect,jadvice,method,get,parameter,types,this,aspect,jadvice,method,aspect,jadvice,method,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1520529117;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.declaringClass = aspectJAdviceMethod.getDeclaringClass()__		this.methodName = aspectJAdviceMethod.getName()__		this.parameterTypes = aspectJAdviceMethod.getParameterTypes()__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,declaring,class,aspect,jadvice,method,get,declaring,class,this,method,name,aspect,jadvice,method,get,name,this,parameter,types,aspect,jadvice,method,get,parameter,types,this,aspect,jadvice,method,aspect,jadvice,method,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1522359230;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.declaringClass = aspectJAdviceMethod.getDeclaringClass()__		this.methodName = aspectJAdviceMethod.getName()__		this.parameterTypes = aspectJAdviceMethod.getParameterTypes()__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,declaring,class,aspect,jadvice,method,get,declaring,class,this,method,name,aspect,jadvice,method,get,name,this,parameter,types,aspect,jadvice,method,get,parameter,types,this,aspect,jadvice,method,aspect,jadvice,method,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1530174524;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.declaringClass = aspectJAdviceMethod.getDeclaringClass()__		this.methodName = aspectJAdviceMethod.getName()__		this.parameterTypes = aspectJAdviceMethod.getParameterTypes()__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,declaring,class,aspect,jadvice,method,get,declaring,class,this,method,name,aspect,jadvice,method,get,name,this,parameter,types,aspect,jadvice,method,get,parameter,types,this,aspect,jadvice,method,aspect,jadvice,method,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1532038651;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.declaringClass = aspectJAdviceMethod.getDeclaringClass()__		this.methodName = aspectJAdviceMethod.getName()__		this.parameterTypes = aspectJAdviceMethod.getParameterTypes()__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,declaring,class,aspect,jadvice,method,get,declaring,class,this,method,name,aspect,jadvice,method,get,name,this,parameter,types,aspect,jadvice,method,get,parameter,types,this,aspect,jadvice,method,aspect,jadvice,method,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public AbstractAspectJAdvice( 			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory);1542613849;Create a new AbstractAspectJAdvice for the given advice method._@param aspectJAdviceMethod the AspectJ-style advice method_@param pointcut the AspectJ expression pointcut_@param aspectInstanceFactory the factory for aspect instances;public AbstractAspectJAdvice(_			Method aspectJAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aspectInstanceFactory) {__		Assert.notNull(aspectJAdviceMethod, "Advice method must not be null")__		this.declaringClass = aspectJAdviceMethod.getDeclaringClass()__		this.methodName = aspectJAdviceMethod.getName()__		this.parameterTypes = aspectJAdviceMethod.getParameterTypes()__		this.aspectJAdviceMethod = aspectJAdviceMethod__		this.pointcut = pointcut__		this.aspectInstanceFactory = aspectInstanceFactory__	};create,a,new,abstract,aspect,jadvice,for,the,given,advice,method,param,aspect,jadvice,method,the,aspect,j,style,advice,method,param,pointcut,the,aspect,j,expression,pointcut,param,aspect,instance,factory,the,factory,for,aspect,instances;public,abstract,aspect,jadvice,method,aspect,jadvice,method,aspect,jexpression,pointcut,pointcut,aspect,instance,factory,aspect,instance,factory,assert,not,null,aspect,jadvice,method,advice,method,must,not,be,null,this,declaring,class,aspect,jadvice,method,get,declaring,class,this,method,name,aspect,jadvice,method,get,name,this,parameter,types,aspect,jadvice,method,get,parameter,types,this,aspect,jadvice,method,aspect,jadvice,method,this,pointcut,pointcut,this,aspect,instance,factory,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1328020251;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1355279383;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1356735495;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1357119239;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1368482696;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1375969963;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1385412762;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1407511029;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1432125256;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1450815633;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1467730834;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1467846264;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1495868221;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1496242568;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1496837955;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1498780456;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1520528267;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1520529117;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1522359230;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1530174524;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1532038651;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectJExpressionPointcut getPointcut();1542613849;Return the AspectJ expression pointcut.;public final AspectJExpressionPointcut getPointcut() {_		calculateArgumentBindings()__		return this.pointcut__	};return,the,aspect,j,expression,pointcut;public,final,aspect,jexpression,pointcut,get,pointcut,calculate,argument,bindings,return,this,pointcut
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1328020251;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1355279383;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1356735495;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1357119239;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1368482696;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1375969963;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1385412762;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1407511029;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1432125256;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1450815633;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1467730834;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1467846264;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1495868221;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1496242568;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1496837955;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1498780456;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1520528267;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1520529117;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1522359230;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1530174524;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1532038651;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final AspectInstanceFactory getAspectInstanceFactory();1542613849;Return the factory for aspect instances.;public final AspectInstanceFactory getAspectInstanceFactory() {_		return this.aspectInstanceFactory__	};return,the,factory,for,aspect,instances;public,final,aspect,instance,factory,get,aspect,instance,factory,return,this,aspect,instance,factory
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1328020251;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1355279383;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1356735495;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1357119239;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1368482696;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1375969963;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1385412762;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1407511029;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1432125256;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1450815633;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1467730834;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1467846264;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1495868221;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1496242568;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1496837955;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1498780456;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1520528267;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1520529117;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1522359230;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1530174524;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1532038651;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Method getAspectJAdviceMethod();1542613849;Return the AspectJ-style advice method.;public final Method getAspectJAdviceMethod() {_		return this.aspectJAdviceMethod__	};return,the,aspect,j,style,advice,method;public,final,method,get,aspect,jadvice,method,return,this,aspect,jadvice,method
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1328020251;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1355279383;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1356735495;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1357119239;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1368482696;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1375969963;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1385412762;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1407511029;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1432125256;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1450815633;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1467730834;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1467846264;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1495868221;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1496242568;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1496837955;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1498780456;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1520528267;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1520529117;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1522359230;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1530174524;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1532038651;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final Pointcut buildSafePointcut();1542613849;Build a 'safe' pointcut that excludes the AspectJ advice method itself._@return a composable pointcut that builds on the original AspectJ expression pointcut_@see #getPointcut();public final Pointcut buildSafePointcut() {_		Pointcut pc = getPointcut()__		MethodMatcher safeMethodMatcher = MethodMatchers.intersection(_				new AdviceExcludingMethodMatcher(this.aspectJAdviceMethod), pc.getMethodMatcher())__		return new ComposablePointcut(pc.getClassFilter(), safeMethodMatcher)__	};build,a,safe,pointcut,that,excludes,the,aspect,j,advice,method,itself,return,a,composable,pointcut,that,builds,on,the,original,aspect,j,expression,pointcut,see,get,pointcut;public,final,pointcut,build,safe,pointcut,pointcut,pc,get,pointcut,method,matcher,safe,method,matcher,method,matchers,intersection,new,advice,excluding,method,matcher,this,aspect,jadvice,method,pc,get,method,matcher,return,new,composable,pointcut,pc,get,class,filter,safe,method,matcher
AbstractAspectJAdvice -> public final synchronized void calculateArgumentBindings();1520528267;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public final synchronized void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.parameterTypes.length == 0) {_			return__		}__		int numUnboundArgs = this.parameterTypes.length__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,final,synchronized,void,calculate,argument,bindings,if,this,arguments,introspected,this,parameter,types,length,0,return,int,num,unbound,args,this,parameter,types,length,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public final synchronized void calculateArgumentBindings();1520529117;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public final synchronized void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.parameterTypes.length == 0) {_			return__		}__		int numUnboundArgs = this.parameterTypes.length__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,final,synchronized,void,calculate,argument,bindings,if,this,arguments,introspected,this,parameter,types,length,0,return,int,num,unbound,args,this,parameter,types,length,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public final synchronized void calculateArgumentBindings();1522359230;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public final synchronized void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.parameterTypes.length == 0) {_			return__		}__		int numUnboundArgs = this.parameterTypes.length__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0]) ||_				maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,final,synchronized,void,calculate,argument,bindings,if,this,arguments,introspected,this,parameter,types,length,0,return,int,num,unbound,args,this,parameter,types,length,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public final synchronized void calculateArgumentBindings();1530174524;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public final synchronized void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.parameterTypes.length == 0) {_			return__		}__		int numUnboundArgs = this.parameterTypes.length__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0]) ||_				maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,final,synchronized,void,calculate,argument,bindings,if,this,arguments,introspected,this,parameter,types,length,0,return,int,num,unbound,args,this,parameter,types,length,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public final synchronized void calculateArgumentBindings();1532038651;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public final synchronized void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.parameterTypes.length == 0) {_			return__		}__		int numUnboundArgs = this.parameterTypes.length__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0]) ||_				maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,final,synchronized,void,calculate,argument,bindings,if,this,arguments,introspected,this,parameter,types,length,0,return,int,num,unbound,args,this,parameter,types,length,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public final synchronized void calculateArgumentBindings();1542613849;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public final synchronized void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.parameterTypes.length == 0) {_			return__		}__		int numUnboundArgs = this.parameterTypes.length__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0]) ||_				maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,final,synchronized,void,calculate,argument,bindings,if,this,arguments,introspected,this,parameter,types,length,0,return,int,num,unbound,args,this,parameter,types,length,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1328020251;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type <code>JoinPoint.StaticPart</code>_then we pass a <code>JoinPoint.StaticPart</code> in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.adviceInvocationArgumentCount == 0) {_			return__		}__		int numUnboundArgs = this.adviceInvocationArgumentCount__		Class[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		} _		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}_			_		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,code,then,we,pass,a,code,join,point,static,part,code,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,advice,invocation,argument,count,0,return,int,num,unbound,args,this,advice,invocation,argument,count,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1355279383;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type <code>JoinPoint.StaticPart</code>_then we pass a <code>JoinPoint.StaticPart</code> in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.adviceInvocationArgumentCount == 0) {_			return__		}__		int numUnboundArgs = this.adviceInvocationArgumentCount__		Class[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		} _		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}_			_		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,code,then,we,pass,a,code,join,point,static,part,code,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,advice,invocation,argument,count,0,return,int,num,unbound,args,this,advice,invocation,argument,count,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1356735495;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.adviceInvocationArgumentCount == 0) {_			return__		}__		int numUnboundArgs = this.adviceInvocationArgumentCount__		Class[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,advice,invocation,argument,count,0,return,int,num,unbound,args,this,advice,invocation,argument,count,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1357119239;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.adviceInvocationArgumentCount == 0) {_			return__		}__		int numUnboundArgs = this.adviceInvocationArgumentCount__		Class[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,advice,invocation,argument,count,0,return,int,num,unbound,args,this,advice,invocation,argument,count,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1368482696;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.adviceInvocationArgumentCount == 0) {_			return__		}__		int numUnboundArgs = this.adviceInvocationArgumentCount__		Class[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,advice,invocation,argument,count,0,return,int,num,unbound,args,this,advice,invocation,argument,count,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1375969963;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.adviceInvocationArgumentCount == 0) {_			return__		}__		int numUnboundArgs = this.adviceInvocationArgumentCount__		Class[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,advice,invocation,argument,count,0,return,int,num,unbound,args,this,advice,invocation,argument,count,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1385412762;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.adviceInvocationArgumentCount == 0) {_			return__		}__		int numUnboundArgs = this.adviceInvocationArgumentCount__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,advice,invocation,argument,count,0,return,int,num,unbound,args,this,advice,invocation,argument,count,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1407511029;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.adviceInvocationArgumentCount == 0) {_			return__		}__		int numUnboundArgs = this.adviceInvocationArgumentCount__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,advice,invocation,argument,count,0,return,int,num,unbound,args,this,advice,invocation,argument,count,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1432125256;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.adviceInvocationArgumentCount == 0) {_			return__		}__		int numUnboundArgs = this.adviceInvocationArgumentCount__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,advice,invocation,argument,count,0,return,int,num,unbound,args,this,advice,invocation,argument,count,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1450815633;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.parameterTypes.length == 0) {_			return__		}__		int numUnboundArgs = this.parameterTypes.length__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,parameter,types,length,0,return,int,num,unbound,args,this,parameter,types,length,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1467730834;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.parameterTypes.length == 0) {_			return__		}__		int numUnboundArgs = this.parameterTypes.length__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,parameter,types,length,0,return,int,num,unbound,args,this,parameter,types,length,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1467846264;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.parameterTypes.length == 0) {_			return__		}__		int numUnboundArgs = this.parameterTypes.length__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,parameter,types,length,0,return,int,num,unbound,args,this,parameter,types,length,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1495868221;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.parameterTypes.length == 0) {_			return__		}__		int numUnboundArgs = this.parameterTypes.length__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,parameter,types,length,0,return,int,num,unbound,args,this,parameter,types,length,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1496242568;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.parameterTypes.length == 0) {_			return__		}__		int numUnboundArgs = this.parameterTypes.length__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,parameter,types,length,0,return,int,num,unbound,args,this,parameter,types,length,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1496837955;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.parameterTypes.length == 0) {_			return__		}__		int numUnboundArgs = this.parameterTypes.length__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,parameter,types,length,0,return,int,num,unbound,args,this,parameter,types,length,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> public synchronized final void calculateArgumentBindings();1498780456;Do as much work as we can as part of the set-up so that argument binding_on subsequent advice invocations can be as fast as possible._<p>If the first argument is of type JoinPoint or ProceedingJoinPoint then we_pass a JoinPoint in that position (ProceedingJoinPoint for around advice)._<p>If the first argument is of type {@code JoinPoint.StaticPart}_then we pass a {@code JoinPoint.StaticPart} in that position._<p>Remaining arguments have to be bound by pointcut evaluation at_a given join point. We will get back a map from argument name to_value. We need to calculate which advice parameter needs to be bound_to which argument name. There are multiple strategies for determining_this binding, which are arranged in a ChainOfResponsibility.;public synchronized final void calculateArgumentBindings() {_		_		if (this.argumentsIntrospected || this.parameterTypes.length == 0) {_			return__		}__		int numUnboundArgs = this.parameterTypes.length__		Class<?>[] parameterTypes = this.aspectJAdviceMethod.getParameterTypes()__		if (maybeBindJoinPoint(parameterTypes[0]) || maybeBindProceedingJoinPoint(parameterTypes[0])) {_			numUnboundArgs--__		}_		else if (maybeBindJoinPointStaticPart(parameterTypes[0])) {_			numUnboundArgs--__		}__		if (numUnboundArgs > 0) {_			_			bindArgumentsByName(numUnboundArgs)__		}__		this.argumentsIntrospected = true__	};do,as,much,work,as,we,can,as,part,of,the,set,up,so,that,argument,binding,on,subsequent,advice,invocations,can,be,as,fast,as,possible,p,if,the,first,argument,is,of,type,join,point,or,proceeding,join,point,then,we,pass,a,join,point,in,that,position,proceeding,join,point,for,around,advice,p,if,the,first,argument,is,of,type,code,join,point,static,part,then,we,pass,a,code,join,point,static,part,in,that,position,p,remaining,arguments,have,to,be,bound,by,pointcut,evaluation,at,a,given,join,point,we,will,get,back,a,map,from,argument,name,to,value,we,need,to,calculate,which,advice,parameter,needs,to,be,bound,to,which,argument,name,there,are,multiple,strategies,for,determining,this,binding,which,are,arranged,in,a,chain,of,responsibility;public,synchronized,final,void,calculate,argument,bindings,if,this,arguments,introspected,this,parameter,types,length,0,return,int,num,unbound,args,this,parameter,types,length,class,parameter,types,this,aspect,jadvice,method,get,parameter,types,if,maybe,bind,join,point,parameter,types,0,maybe,bind,proceeding,join,point,parameter,types,0,num,unbound,args,else,if,maybe,bind,join,point,static,part,parameter,types,0,num,unbound,args,if,num,unbound,args,0,bind,arguments,by,name,num,unbound,args,this,arguments,introspected,true
AbstractAspectJAdvice -> protected Object invokeAdviceMethod(JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex) throws Throwable;1495868221;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex) throws Throwable {_		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod(JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex) throws Throwable;1496242568;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex) throws Throwable {_		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable;1328020251;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable {_		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,join,point,match,jp,match,object,return,value,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable;1355279383;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable {_		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,join,point,match,jp,match,object,return,value,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable;1356735495;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable {_		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,join,point,match,jp,match,object,return,value,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable;1357119239;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable {_		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,join,point,match,jp,match,object,return,value,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable;1368482696;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable {_		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,join,point,match,jp,match,object,return,value,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable;1375969963;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable {_		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,join,point,match,jp,match,object,return,value,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable;1385412762;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable {_		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,join,point,match,jp,match,object,return,value,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable;1407511029;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable {_		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,join,point,match,jp,match,object,return,value,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable;1432125256;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable {_		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,join,point,match,jp,match,object,return,value,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable;1450815633;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable {_		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,join,point,match,jp,match,object,return,value,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable;1467730834;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable {_		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,join,point,match,jp,match,object,return,value,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable;1467846264;Invoke the advice method._@param jpMatch the JoinPointMatch that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the invocation result_@throws Throwable in case of invocation failure;protected Object invokeAdviceMethod(JoinPointMatch jpMatch, Object returnValue, Throwable ex) throws Throwable {_		return invokeAdviceMethodWithGivenArgs(argBinding(getJoinPoint(), jpMatch, returnValue, ex))__	};invoke,the,advice,method,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,invocation,result,throws,throwable,in,case,of,invocation,failure;protected,object,invoke,advice,method,join,point,match,jp,match,object,return,value,throwable,ex,throws,throwable,return,invoke,advice,method,with,given,args,arg,binding,get,join,point,jp,match,return,value,ex
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch, 			@Nullable Object returnValue, @Nullable Throwable ex);1496837955;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch,_			@Nullable Object returnValue, @Nullable Throwable ex) {__		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.parameterTypes.length]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.parameterTypes.length) {_			throw new IllegalStateException("Required to bind " + this.parameterTypes.length +_					" arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") + " bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,parameter,types,length,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,parameter,types,length,throw,new,illegal,state,exception,required,to,bind,this,parameter,types,length,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch, 			@Nullable Object returnValue, @Nullable Throwable ex);1498780456;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch,_			@Nullable Object returnValue, @Nullable Throwable ex) {__		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.parameterTypes.length]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.parameterTypes.length) {_			throw new IllegalStateException("Required to bind " + this.parameterTypes.length +_					" arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") + " bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,parameter,types,length,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,parameter,types,length,throw,new,illegal,state,exception,required,to,bind,this,parameter,types,length,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch, 			@Nullable Object returnValue, @Nullable Throwable ex);1520528267;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch,_			@Nullable Object returnValue, @Nullable Throwable ex) {__		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.parameterTypes.length]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.parameterTypes.length) {_			throw new IllegalStateException("Required to bind " + this.parameterTypes.length +_					" arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") + " bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,parameter,types,length,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,parameter,types,length,throw,new,illegal,state,exception,required,to,bind,this,parameter,types,length,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch, 			@Nullable Object returnValue, @Nullable Throwable ex);1520529117;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch,_			@Nullable Object returnValue, @Nullable Throwable ex) {__		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.parameterTypes.length]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.parameterTypes.length) {_			throw new IllegalStateException("Required to bind " + this.parameterTypes.length +_					" arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") + " bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,parameter,types,length,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,parameter,types,length,throw,new,illegal,state,exception,required,to,bind,this,parameter,types,length,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch, 			@Nullable Object returnValue, @Nullable Throwable ex);1522359230;Take the arguments at the method execution join point and output a set of arguments_to the advice method_@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch,_			@Nullable Object returnValue, @Nullable Throwable ex) {__		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.parameterTypes.length]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.parameterTypes.length) {_			throw new IllegalStateException("Required to bind " + this.parameterTypes.length +_					" arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") + " bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,parameter,types,length,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,parameter,types,length,throw,new,illegal,state,exception,required,to,bind,this,parameter,types,length,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch, 			@Nullable Object returnValue, @Nullable Throwable ex);1530174524;Take the arguments at the method execution join point and output a set of arguments_to the advice method._@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch,_			@Nullable Object returnValue, @Nullable Throwable ex) {__		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.parameterTypes.length]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.parameterTypes.length) {_			throw new IllegalStateException("Required to bind " + this.parameterTypes.length +_					" arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") + " bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,parameter,types,length,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,parameter,types,length,throw,new,illegal,state,exception,required,to,bind,this,parameter,types,length,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch, 			@Nullable Object returnValue, @Nullable Throwable ex);1532038651;Take the arguments at the method execution join point and output a set of arguments_to the advice method._@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch,_			@Nullable Object returnValue, @Nullable Throwable ex) {__		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.parameterTypes.length]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.parameterTypes.length) {_			throw new IllegalStateException("Required to bind " + this.parameterTypes.length +_					" arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") + " bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,parameter,types,length,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,parameter,types,length,throw,new,illegal,state,exception,required,to,bind,this,parameter,types,length,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch, 			@Nullable Object returnValue, @Nullable Throwable ex);1542613849;Take the arguments at the method execution join point and output a set of arguments_to the advice method._@param jp the current JoinPoint_@param jpMatch the join point match that matched this execution join point_@param returnValue the return value from the method execution (may be null)_@param ex the exception thrown by the method execution (may be null)_@return the empty array if there are no arguments;protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch,_			@Nullable Object returnValue, @Nullable Throwable ex) {__		calculateArgumentBindings()___		_		Object[] adviceInvocationArgs = new Object[this.parameterTypes.length]__		int numBound = 0___		if (this.joinPointArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointArgumentIndex] = jp__			numBound++__		}_		else if (this.joinPointStaticPartArgumentIndex != -1) {_			adviceInvocationArgs[this.joinPointStaticPartArgumentIndex] = jp.getStaticPart()__			numBound++__		}__		if (!CollectionUtils.isEmpty(this.argumentBindings)) {_			_			if (jpMatch != null) {_				PointcutParameter[] parameterBindings = jpMatch.getParameterBindings()__				for (PointcutParameter parameter : parameterBindings) {_					String name = parameter.getName()__					Integer index = this.argumentBindings.get(name)__					adviceInvocationArgs[index] = parameter.getBinding()__					numBound++__				}_			}_			_			if (this.returningName != null) {_				Integer index = this.argumentBindings.get(this.returningName)__				adviceInvocationArgs[index] = returnValue__				numBound++__			}_			_			if (this.throwingName != null) {_				Integer index = this.argumentBindings.get(this.throwingName)__				adviceInvocationArgs[index] = ex__				numBound++__			}_		}__		if (numBound != this.parameterTypes.length) {_			throw new IllegalStateException("Required to bind " + this.parameterTypes.length +_					" arguments, but only bound " + numBound + " (JoinPointMatch " +_					(jpMatch == null ? "was NOT" : "WAS") + " bound in invocation)")__		}__		return adviceInvocationArgs__	};take,the,arguments,at,the,method,execution,join,point,and,output,a,set,of,arguments,to,the,advice,method,param,jp,the,current,join,point,param,jp,match,the,join,point,match,that,matched,this,execution,join,point,param,return,value,the,return,value,from,the,method,execution,may,be,null,param,ex,the,exception,thrown,by,the,method,execution,may,be,null,return,the,empty,array,if,there,are,no,arguments;protected,object,arg,binding,join,point,jp,nullable,join,point,match,jp,match,nullable,object,return,value,nullable,throwable,ex,calculate,argument,bindings,object,advice,invocation,args,new,object,this,parameter,types,length,int,num,bound,0,if,this,join,point,argument,index,1,advice,invocation,args,this,join,point,argument,index,jp,num,bound,else,if,this,join,point,static,part,argument,index,1,advice,invocation,args,this,join,point,static,part,argument,index,jp,get,static,part,num,bound,if,collection,utils,is,empty,this,argument,bindings,if,jp,match,null,pointcut,parameter,parameter,bindings,jp,match,get,parameter,bindings,for,pointcut,parameter,parameter,parameter,bindings,string,name,parameter,get,name,integer,index,this,argument,bindings,get,name,advice,invocation,args,index,parameter,get,binding,num,bound,if,this,returning,name,null,integer,index,this,argument,bindings,get,this,returning,name,advice,invocation,args,index,return,value,num,bound,if,this,throwing,name,null,integer,index,this,argument,bindings,get,this,throwing,name,advice,invocation,args,index,ex,num,bound,if,num,bound,this,parameter,types,length,throw,new,illegal,state,exception,required,to,bind,this,parameter,types,length,arguments,but,only,bound,num,bound,join,point,match,jp,match,null,was,not,was,bound,in,invocation,return,advice,invocation,args
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1328020251;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1355279383;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1356735495;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1357119239;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1368482696;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1375969963;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1385412762;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1407511029;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1432125256;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1450815633;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1467730834;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1467846264;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1495868221;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1496242568;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1496837955;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1498780456;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1520528267;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1520529117;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1522359230;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1530174524;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1532038651;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> public void setArgumentNames(String argNames);1542613849;Set by creator of this advice object if the argument names are known._<p>This could be for example because they have been explicitly specified in XML,_or in an advice annotation._@param argNames comma delimited list of arg names;public void setArgumentNames(String argNames) {_		String[] tokens = StringUtils.commaDelimitedListToStringArray(argNames)__		setArgumentNamesFromStringArray(tokens)__	};set,by,creator,of,this,advice,object,if,the,argument,names,are,known,p,this,could,be,for,example,because,they,have,been,explicitly,specified,in,xml,or,in,an,advice,annotation,param,arg,names,comma,delimited,list,of,arg,names;public,void,set,argument,names,string,arg,names,string,tokens,string,utils,comma,delimited,list,to,string,array,arg,names,set,argument,names,from,string,array,tokens
AbstractAspectJAdvice -> protected JoinPointMatch getJoinPointMatch();1328020251;Get the current join point match at the join point we are being dispatched on.;protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> protected JoinPointMatch getJoinPointMatch();1355279383;Get the current join point match at the join point we are being dispatched on.;protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> protected JoinPointMatch getJoinPointMatch();1356735495;Get the current join point match at the join point we are being dispatched on.;protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> protected JoinPointMatch getJoinPointMatch();1357119239;Get the current join point match at the join point we are being dispatched on.;protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> protected JoinPointMatch getJoinPointMatch();1368482696;Get the current join point match at the join point we are being dispatched on.;protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> protected JoinPointMatch getJoinPointMatch();1375969963;Get the current join point match at the join point we are being dispatched on.;protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> protected JoinPointMatch getJoinPointMatch();1385412762;Get the current join point match at the join point we are being dispatched on.;protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> protected JoinPointMatch getJoinPointMatch();1407511029;Get the current join point match at the join point we are being dispatched on.;protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> protected JoinPointMatch getJoinPointMatch();1432125256;Get the current join point match at the join point we are being dispatched on.;protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> protected JoinPointMatch getJoinPointMatch();1450815633;Get the current join point match at the join point we are being dispatched on.;protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> protected JoinPointMatch getJoinPointMatch();1467730834;Get the current join point match at the join point we are being dispatched on.;protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> protected JoinPointMatch getJoinPointMatch();1467846264;Get the current join point match at the join point we are being dispatched on.;protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> protected JoinPointMatch getJoinPointMatch();1495868221;Get the current join point match at the join point we are being dispatched on.;protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> protected JoinPointMatch getJoinPointMatch();1496242568;Get the current join point match at the join point we are being dispatched on.;protected JoinPointMatch getJoinPointMatch() {_		MethodInvocation mi = ExposeInvocationInterceptor.currentInvocation()__		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		return getJoinPointMatch((ProxyMethodInvocation) mi)__	};get,the,current,join,point,match,at,the,join,point,we,are,being,dispatched,on;protected,join,point,match,get,join,point,match,method,invocation,mi,expose,invocation,interceptor,current,invocation,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,state,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,return,get,join,point,match,proxy,method,invocation,mi
AbstractAspectJAdvice -> public final ClassLoader getAspectClassLoader();1328020251;Return the ClassLoader for aspect instances.;public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> public final ClassLoader getAspectClassLoader();1355279383;Return the ClassLoader for aspect instances.;public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> public final ClassLoader getAspectClassLoader();1356735495;Return the ClassLoader for aspect instances.;public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> public final ClassLoader getAspectClassLoader();1357119239;Return the ClassLoader for aspect instances.;public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> public final ClassLoader getAspectClassLoader();1368482696;Return the ClassLoader for aspect instances.;public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> public final ClassLoader getAspectClassLoader();1375969963;Return the ClassLoader for aspect instances.;public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> public final ClassLoader getAspectClassLoader();1385412762;Return the ClassLoader for aspect instances.;public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> public final ClassLoader getAspectClassLoader();1407511029;Return the ClassLoader for aspect instances.;public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> public final ClassLoader getAspectClassLoader();1432125256;Return the ClassLoader for aspect instances.;public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> public final ClassLoader getAspectClassLoader();1450815633;Return the ClassLoader for aspect instances.;public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> public final ClassLoader getAspectClassLoader();1467730834;Return the ClassLoader for aspect instances.;public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> public final ClassLoader getAspectClassLoader();1467846264;Return the ClassLoader for aspect instances.;public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> public final ClassLoader getAspectClassLoader();1495868221;Return the ClassLoader for aspect instances.;public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> public final ClassLoader getAspectClassLoader();1496242568;Return the ClassLoader for aspect instances.;public final ClassLoader getAspectClassLoader() {_		return this.aspectInstanceFactory.getAspectClassLoader()__	};return,the,class,loader,for,aspect,instances;public,final,class,loader,get,aspect,class,loader,return,this,aspect,instance,factory,get,aspect,class,loader
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1328020251;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1355279383;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1356735495;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1357119239;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1368482696;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1375969963;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1385412762;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1407511029;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1432125256;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1450815633;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1467730834;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1467846264;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1495868221;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1496242568;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1496837955;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1498780456;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1520528267;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1520529117;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1522359230;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1530174524;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1532038651;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
AbstractAspectJAdvice -> protected JoinPoint getJoinPoint();1542613849;Overridden in around advice to return proceeding join point.;protected JoinPoint getJoinPoint() {_		return currentJoinPoint()__	};overridden,in,around,advice,to,return,proceeding,join,point;protected,join,point,get,join,point,return,current,join,point
