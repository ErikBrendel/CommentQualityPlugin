commented;modifiers;parameterAmount;loc;comment;code
true;public;1;31;/**  * Intercept the given method invocation, submit the actual calling of the method to  * the correct task executor and return immediately to the caller.  * @param invocation the method to intercept and make asynchronous  * @return {@link Future} if the original method returns {@code Future}. {@code null}  * otherwise.  */ ;/**  * Intercept the given method invocation, submit the actual calling of the method to  * the correct task executor and return immediately to the caller.  * @param invocation the method to intercept and make asynchronous  * @return {@link Future} if the original method returns {@code Future}. {@code null}  * otherwise.  */ @Override @Nullable public Object invoke(final MethodInvocation invocation) throws Throwable {     Class<?> targetClass = (invocation.getThis() != null ? AopUtils.getTargetClass(invocation.getThis()) : null).     Method specificMethod = ClassUtils.getMostSpecificMethod(invocation.getMethod(), targetClass).     final Method userDeclaredMethod = BridgeMethodResolver.findBridgedMethod(specificMethod).     AsyncTaskExecutor executor = determineAsyncExecutor(userDeclaredMethod).     if (executor == null) {         throw new IllegalStateException("No executor specified and no default executor set on AsyncExecutionInterceptor either").     }     Callable<Object> task = () -> {         try {             Object result = invocation.proceed().             if (result instanceof Future) {                 return ((Future<?>) result).get().             }         } catch (ExecutionException ex) {             handleError(ex.getCause(), userDeclaredMethod, invocation.getArguments()).         } catch (Throwable ex) {             handleError(ex, userDeclaredMethod, invocation.getArguments()).         }         return null.     }.     return doSubmit(task, executor, invocation.getMethod().getReturnType()). }
true;protected;1;5;/**  * This implementation is a no-op for compatibility in Spring 3.1.2.  * Subclasses may override to provide support for extracting qualifier information,  * e.g. via an annotation on the given method.  * @return always {@code null}  * @since 3.1.2  * @see #determineAsyncExecutor(Method)  */ ;/**  * This implementation is a no-op for compatibility in Spring 3.1.2.  * Subclasses may override to provide support for extracting qualifier information,  * e.g. via an annotation on the given method.  * @return always {@code null}  * @since 3.1.2  * @see #determineAsyncExecutor(Method)  */ @Override @Nullable protected String getExecutorQualifier(Method method) {     return null. }
true;protected;1;6;/**  * This implementation searches for a unique {@link org.springframework.core.task.TaskExecutor}  * bean in the context, or for an {@link Executor} bean named "taskExecutor" otherwise.  * If neither of the two is resolvable (e.g. if no {@code BeanFactory} was configured at all),  * this implementation falls back to a newly created {@link SimpleAsyncTaskExecutor} instance  * for local use if no default could be found.  * @see #DEFAULT_TASK_EXECUTOR_BEAN_NAME  */ ;/**  * This implementation searches for a unique {@link org.springframework.core.task.TaskExecutor}  * bean in the context, or for an {@link Executor} bean named "taskExecutor" otherwise.  * If neither of the two is resolvable (e.g. if no {@code BeanFactory} was configured at all),  * this implementation falls back to a newly created {@link SimpleAsyncTaskExecutor} instance  * for local use if no default could be found.  * @see #DEFAULT_TASK_EXECUTOR_BEAN_NAME  */ @Override @Nullable protected Executor getDefaultExecutor(@Nullable BeanFactory beanFactory) {     Executor defaultExecutor = super.getDefaultExecutor(beanFactory).     return (defaultExecutor != null ? defaultExecutor : new SimpleAsyncTaskExecutor()). }
false;public;0;4;;@Override public int getOrder() {     return Ordered.HIGHEST_PRECEDENCE. }
