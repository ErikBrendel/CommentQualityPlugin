# id;timestamp;commentText;codeText;commentWords;codeWords
AspectJAwareAdvisorAutoProxyCreator -> @Override 	@SuppressWarnings("unchecked") 	protected List<Advisor> sortAdvisors(List<Advisor> advisors);1328020251;Sort the rest by AspectJ precedence. If two pieces of advice have_come from the same aspect they will have the same order._Advice from the same aspect is then further ordered according to the_following rules:_<ul>_<li>if either of the pair is after advice, then the advice declared_last gets highest precedence (runs last)</li>_<li>otherwise the advice declared first gets highest precedence (runs first)</li>_</ul>_<p><b>Important:</b> Advisors are sorted in precedence order, from highest_precedence to lowest. "On the way in" to a join point, the highest precedence_advisor should run first. "On the way out" of a join point, the highest precedence_advisor should run last.;@Override_	@SuppressWarnings("unchecked")_	protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		_		List<PartiallyComparableAdvisorHolder> partiallyComparableAdvisors =_				new LinkedList<PartiallyComparableAdvisorHolder>()__		for (Advisor element : advisors) {_			partiallyComparableAdvisors.add(_					new PartiallyComparableAdvisorHolder(element, DEFAULT_PRECEDENCE_COMPARATOR))__		}		_		_		_		List<PartiallyComparableAdvisorHolder> sorted =_				(List<PartiallyComparableAdvisorHolder>) PartialOrder.sort(partiallyComparableAdvisors)__		if (sorted == null) {_			_			throw new IllegalArgumentException("Advice precedence circularity error")__		}_		_		_		List<Advisor> result = new LinkedList<Advisor>()__		for (PartiallyComparableAdvisorHolder pcAdvisor : sorted) {_			result.add(pcAdvisor.getAdvisor())__		}_		_		return result__	};sort,the,rest,by,aspect,j,precedence,if,two,pieces,of,advice,have,come,from,the,same,aspect,they,will,have,the,same,order,advice,from,the,same,aspect,is,then,further,ordered,according,to,the,following,rules,ul,li,if,either,of,the,pair,is,after,advice,then,the,advice,declared,last,gets,highest,precedence,runs,last,li,li,otherwise,the,advice,declared,first,gets,highest,precedence,runs,first,li,ul,p,b,important,b,advisors,are,sorted,in,precedence,order,from,highest,precedence,to,lowest,on,the,way,in,to,a,join,point,the,highest,precedence,advisor,should,run,first,on,the,way,out,of,a,join,point,the,highest,precedence,advisor,should,run,last;override,suppress,warnings,unchecked,protected,list,advisor,sort,advisors,list,advisor,advisors,list,partially,comparable,advisor,holder,partially,comparable,advisors,new,linked,list,partially,comparable,advisor,holder,for,advisor,element,advisors,partially,comparable,advisors,add,new,partially,comparable,advisor,holder,element,list,partially,comparable,advisor,holder,sorted,list,partially,comparable,advisor,holder,partial,order,sort,partially,comparable,advisors,if,sorted,null,throw,new,illegal,argument,exception,advice,precedence,circularity,error,list,advisor,result,new,linked,list,advisor,for,partially,comparable,advisor,holder,pc,advisor,sorted,result,add,pc,advisor,get,advisor,return,result
AspectJAwareAdvisorAutoProxyCreator -> @Override 	@SuppressWarnings("unchecked") 	protected List<Advisor> sortAdvisors(List<Advisor> advisors);1356735495;Sort the rest by AspectJ precedence. If two pieces of advice have_come from the same aspect they will have the same order._Advice from the same aspect is then further ordered according to the_following rules:_<ul>_<li>if either of the pair is after advice, then the advice declared_last gets highest precedence (runs last)</li>_<li>otherwise the advice declared first gets highest precedence (runs first)</li>_</ul>_<p><b>Important:</b> Advisors are sorted in precedence order, from highest_precedence to lowest. "On the way in" to a join point, the highest precedence_advisor should run first. "On the way out" of a join point, the highest precedence_advisor should run last.;@Override_	@SuppressWarnings("unchecked")_	protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		_		List<PartiallyComparableAdvisorHolder> partiallyComparableAdvisors =_				new LinkedList<PartiallyComparableAdvisorHolder>()__		for (Advisor element : advisors) {_			partiallyComparableAdvisors.add(_					new PartiallyComparableAdvisorHolder(element, DEFAULT_PRECEDENCE_COMPARATOR))__		}__		_		List<PartiallyComparableAdvisorHolder> sorted =_				PartialOrder.sort(partiallyComparableAdvisors)__		if (sorted == null) {_			_			throw new IllegalArgumentException("Advice precedence circularity error")__		}__		_		List<Advisor> result = new LinkedList<Advisor>()__		for (PartiallyComparableAdvisorHolder pcAdvisor : sorted) {_			result.add(pcAdvisor.getAdvisor())__		}__		return result__	};sort,the,rest,by,aspect,j,precedence,if,two,pieces,of,advice,have,come,from,the,same,aspect,they,will,have,the,same,order,advice,from,the,same,aspect,is,then,further,ordered,according,to,the,following,rules,ul,li,if,either,of,the,pair,is,after,advice,then,the,advice,declared,last,gets,highest,precedence,runs,last,li,li,otherwise,the,advice,declared,first,gets,highest,precedence,runs,first,li,ul,p,b,important,b,advisors,are,sorted,in,precedence,order,from,highest,precedence,to,lowest,on,the,way,in,to,a,join,point,the,highest,precedence,advisor,should,run,first,on,the,way,out,of,a,join,point,the,highest,precedence,advisor,should,run,last;override,suppress,warnings,unchecked,protected,list,advisor,sort,advisors,list,advisor,advisors,list,partially,comparable,advisor,holder,partially,comparable,advisors,new,linked,list,partially,comparable,advisor,holder,for,advisor,element,advisors,partially,comparable,advisors,add,new,partially,comparable,advisor,holder,element,list,partially,comparable,advisor,holder,sorted,partial,order,sort,partially,comparable,advisors,if,sorted,null,throw,new,illegal,argument,exception,advice,precedence,circularity,error,list,advisor,result,new,linked,list,advisor,for,partially,comparable,advisor,holder,pc,advisor,sorted,result,add,pc,advisor,get,advisor,return,result
AspectJAwareAdvisorAutoProxyCreator -> @Override 	@SuppressWarnings("unchecked") 	protected List<Advisor> sortAdvisors(List<Advisor> advisors);1357119239;Sort the rest by AspectJ precedence. If two pieces of advice have_come from the same aspect they will have the same order._Advice from the same aspect is then further ordered according to the_following rules:_<ul>_<li>if either of the pair is after advice, then the advice declared_last gets highest precedence (runs last)</li>_<li>otherwise the advice declared first gets highest precedence (runs first)</li>_</ul>_<p><b>Important:</b> Advisors are sorted in precedence order, from highest_precedence to lowest. "On the way in" to a join point, the highest precedence_advisor should run first. "On the way out" of a join point, the highest precedence_advisor should run last.;@Override_	@SuppressWarnings("unchecked")_	protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		_		List<PartiallyComparableAdvisorHolder> partiallyComparableAdvisors =_				new LinkedList<PartiallyComparableAdvisorHolder>()__		for (Advisor element : advisors) {_			partiallyComparableAdvisors.add(_					new PartiallyComparableAdvisorHolder(element, DEFAULT_PRECEDENCE_COMPARATOR))__		}__		_		List<PartiallyComparableAdvisorHolder> sorted =_				PartialOrder.sort(partiallyComparableAdvisors)__		if (sorted == null) {_			_			throw new IllegalArgumentException("Advice precedence circularity error")__		}__		_		List<Advisor> result = new LinkedList<Advisor>()__		for (PartiallyComparableAdvisorHolder pcAdvisor : sorted) {_			result.add(pcAdvisor.getAdvisor())__		}__		return result__	};sort,the,rest,by,aspect,j,precedence,if,two,pieces,of,advice,have,come,from,the,same,aspect,they,will,have,the,same,order,advice,from,the,same,aspect,is,then,further,ordered,according,to,the,following,rules,ul,li,if,either,of,the,pair,is,after,advice,then,the,advice,declared,last,gets,highest,precedence,runs,last,li,li,otherwise,the,advice,declared,first,gets,highest,precedence,runs,first,li,ul,p,b,important,b,advisors,are,sorted,in,precedence,order,from,highest,precedence,to,lowest,on,the,way,in,to,a,join,point,the,highest,precedence,advisor,should,run,first,on,the,way,out,of,a,join,point,the,highest,precedence,advisor,should,run,last;override,suppress,warnings,unchecked,protected,list,advisor,sort,advisors,list,advisor,advisors,list,partially,comparable,advisor,holder,partially,comparable,advisors,new,linked,list,partially,comparable,advisor,holder,for,advisor,element,advisors,partially,comparable,advisors,add,new,partially,comparable,advisor,holder,element,list,partially,comparable,advisor,holder,sorted,partial,order,sort,partially,comparable,advisors,if,sorted,null,throw,new,illegal,argument,exception,advice,precedence,circularity,error,list,advisor,result,new,linked,list,advisor,for,partially,comparable,advisor,holder,pc,advisor,sorted,result,add,pc,advisor,get,advisor,return,result
AspectJAwareAdvisorAutoProxyCreator -> @Override 	@SuppressWarnings("unchecked") 	protected List<Advisor> sortAdvisors(List<Advisor> advisors);1362408075;Sort the rest by AspectJ precedence. If two pieces of advice have_come from the same aspect they will have the same order._Advice from the same aspect is then further ordered according to the_following rules:_<ul>_<li>if either of the pair is after advice, then the advice declared_last gets highest precedence (runs last)</li>_<li>otherwise the advice declared first gets highest precedence (runs first)</li>_</ul>_<p><b>Important:</b> Advisors are sorted in precedence order, from highest_precedence to lowest. "On the way in" to a join point, the highest precedence_advisor should run first. "On the way out" of a join point, the highest precedence_advisor should run last.;@Override_	@SuppressWarnings("unchecked")_	protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		List<PartiallyComparableAdvisorHolder> partiallyComparableAdvisors =_				new ArrayList<PartiallyComparableAdvisorHolder>(advisors.size())__		for (Advisor element : advisors) {_			partiallyComparableAdvisors.add(_					new PartiallyComparableAdvisorHolder(element, DEFAULT_PRECEDENCE_COMPARATOR))__		}_		List<PartiallyComparableAdvisorHolder> sorted =_				PartialOrder.sort(partiallyComparableAdvisors)__		if (sorted != null) {_			List<Advisor> result = new ArrayList<Advisor>(advisors.size())__			for (PartiallyComparableAdvisorHolder pcAdvisor : sorted) {_				result.add(pcAdvisor.getAdvisor())__			}_			return result__		}_		else {_			return super.sortAdvisors(advisors)__		}_	};sort,the,rest,by,aspect,j,precedence,if,two,pieces,of,advice,have,come,from,the,same,aspect,they,will,have,the,same,order,advice,from,the,same,aspect,is,then,further,ordered,according,to,the,following,rules,ul,li,if,either,of,the,pair,is,after,advice,then,the,advice,declared,last,gets,highest,precedence,runs,last,li,li,otherwise,the,advice,declared,first,gets,highest,precedence,runs,first,li,ul,p,b,important,b,advisors,are,sorted,in,precedence,order,from,highest,precedence,to,lowest,on,the,way,in,to,a,join,point,the,highest,precedence,advisor,should,run,first,on,the,way,out,of,a,join,point,the,highest,precedence,advisor,should,run,last;override,suppress,warnings,unchecked,protected,list,advisor,sort,advisors,list,advisor,advisors,list,partially,comparable,advisor,holder,partially,comparable,advisors,new,array,list,partially,comparable,advisor,holder,advisors,size,for,advisor,element,advisors,partially,comparable,advisors,add,new,partially,comparable,advisor,holder,element,list,partially,comparable,advisor,holder,sorted,partial,order,sort,partially,comparable,advisors,if,sorted,null,list,advisor,result,new,array,list,advisor,advisors,size,for,partially,comparable,advisor,holder,pc,advisor,sorted,result,add,pc,advisor,get,advisor,return,result,else,return,super,sort,advisors,advisors
AspectJAwareAdvisorAutoProxyCreator -> @Override 	@SuppressWarnings("unchecked") 	protected List<Advisor> sortAdvisors(List<Advisor> advisors);1368482696;Sort the rest by AspectJ precedence. If two pieces of advice have_come from the same aspect they will have the same order._Advice from the same aspect is then further ordered according to the_following rules:_<ul>_<li>if either of the pair is after advice, then the advice declared_last gets highest precedence (runs last)</li>_<li>otherwise the advice declared first gets highest precedence (runs first)</li>_</ul>_<p><b>Important:</b> Advisors are sorted in precedence order, from highest_precedence to lowest. "On the way in" to a join point, the highest precedence_advisor should run first. "On the way out" of a join point, the highest precedence_advisor should run last.;@Override_	@SuppressWarnings("unchecked")_	protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		List<PartiallyComparableAdvisorHolder> partiallyComparableAdvisors =_				new ArrayList<PartiallyComparableAdvisorHolder>(advisors.size())__		for (Advisor element : advisors) {_			partiallyComparableAdvisors.add(_					new PartiallyComparableAdvisorHolder(element, DEFAULT_PRECEDENCE_COMPARATOR))__		}_		List<PartiallyComparableAdvisorHolder> sorted =_				PartialOrder.sort(partiallyComparableAdvisors)__		if (sorted != null) {_			List<Advisor> result = new ArrayList<Advisor>(advisors.size())__			for (PartiallyComparableAdvisorHolder pcAdvisor : sorted) {_				result.add(pcAdvisor.getAdvisor())__			}_			return result__		}_		else {_			return super.sortAdvisors(advisors)__		}_	};sort,the,rest,by,aspect,j,precedence,if,two,pieces,of,advice,have,come,from,the,same,aspect,they,will,have,the,same,order,advice,from,the,same,aspect,is,then,further,ordered,according,to,the,following,rules,ul,li,if,either,of,the,pair,is,after,advice,then,the,advice,declared,last,gets,highest,precedence,runs,last,li,li,otherwise,the,advice,declared,first,gets,highest,precedence,runs,first,li,ul,p,b,important,b,advisors,are,sorted,in,precedence,order,from,highest,precedence,to,lowest,on,the,way,in,to,a,join,point,the,highest,precedence,advisor,should,run,first,on,the,way,out,of,a,join,point,the,highest,precedence,advisor,should,run,last;override,suppress,warnings,unchecked,protected,list,advisor,sort,advisors,list,advisor,advisors,list,partially,comparable,advisor,holder,partially,comparable,advisors,new,array,list,partially,comparable,advisor,holder,advisors,size,for,advisor,element,advisors,partially,comparable,advisors,add,new,partially,comparable,advisor,holder,element,list,partially,comparable,advisor,holder,sorted,partial,order,sort,partially,comparable,advisors,if,sorted,null,list,advisor,result,new,array,list,advisor,advisors,size,for,partially,comparable,advisor,holder,pc,advisor,sorted,result,add,pc,advisor,get,advisor,return,result,else,return,super,sort,advisors,advisors
AspectJAwareAdvisorAutoProxyCreator -> @Override 	@SuppressWarnings("unchecked") 	protected List<Advisor> sortAdvisors(List<Advisor> advisors);1385412762;Sort the rest by AspectJ precedence. If two pieces of advice have_come from the same aspect they will have the same order._Advice from the same aspect is then further ordered according to the_following rules:_<ul>_<li>if either of the pair is after advice, then the advice declared_last gets highest precedence (runs last)</li>_<li>otherwise the advice declared first gets highest precedence (runs first)</li>_</ul>_<p><b>Important:</b> Advisors are sorted in precedence order, from highest_precedence to lowest. "On the way in" to a join point, the highest precedence_advisor should run first. "On the way out" of a join point, the highest precedence_advisor should run last.;@Override_	@SuppressWarnings("unchecked")_	protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		List<PartiallyComparableAdvisorHolder> partiallyComparableAdvisors =_				new ArrayList<PartiallyComparableAdvisorHolder>(advisors.size())__		for (Advisor element : advisors) {_			partiallyComparableAdvisors.add(_					new PartiallyComparableAdvisorHolder(element, DEFAULT_PRECEDENCE_COMPARATOR))__		}_		List<PartiallyComparableAdvisorHolder> sorted =_				PartialOrder.sort(partiallyComparableAdvisors)__		if (sorted != null) {_			List<Advisor> result = new ArrayList<Advisor>(advisors.size())__			for (PartiallyComparableAdvisorHolder pcAdvisor : sorted) {_				result.add(pcAdvisor.getAdvisor())__			}_			return result__		}_		else {_			return super.sortAdvisors(advisors)__		}_	};sort,the,rest,by,aspect,j,precedence,if,two,pieces,of,advice,have,come,from,the,same,aspect,they,will,have,the,same,order,advice,from,the,same,aspect,is,then,further,ordered,according,to,the,following,rules,ul,li,if,either,of,the,pair,is,after,advice,then,the,advice,declared,last,gets,highest,precedence,runs,last,li,li,otherwise,the,advice,declared,first,gets,highest,precedence,runs,first,li,ul,p,b,important,b,advisors,are,sorted,in,precedence,order,from,highest,precedence,to,lowest,on,the,way,in,to,a,join,point,the,highest,precedence,advisor,should,run,first,on,the,way,out,of,a,join,point,the,highest,precedence,advisor,should,run,last;override,suppress,warnings,unchecked,protected,list,advisor,sort,advisors,list,advisor,advisors,list,partially,comparable,advisor,holder,partially,comparable,advisors,new,array,list,partially,comparable,advisor,holder,advisors,size,for,advisor,element,advisors,partially,comparable,advisors,add,new,partially,comparable,advisor,holder,element,list,partially,comparable,advisor,holder,sorted,partial,order,sort,partially,comparable,advisors,if,sorted,null,list,advisor,result,new,array,list,advisor,advisors,size,for,partially,comparable,advisor,holder,pc,advisor,sorted,result,add,pc,advisor,get,advisor,return,result,else,return,super,sort,advisors,advisors
AspectJAwareAdvisorAutoProxyCreator -> @Override 	@SuppressWarnings("unchecked") 	protected List<Advisor> sortAdvisors(List<Advisor> advisors);1467730834;Sort the rest by AspectJ precedence. If two pieces of advice have_come from the same aspect they will have the same order._Advice from the same aspect is then further ordered according to the_following rules:_<ul>_<li>if either of the pair is after advice, then the advice declared_last gets highest precedence (runs last)</li>_<li>otherwise the advice declared first gets highest precedence (runs first)</li>_</ul>_<p><b>Important:</b> Advisors are sorted in precedence order, from highest_precedence to lowest. "On the way in" to a join point, the highest precedence_advisor should run first. "On the way out" of a join point, the highest precedence_advisor should run last.;@Override_	@SuppressWarnings("unchecked")_	protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		List<PartiallyComparableAdvisorHolder> partiallyComparableAdvisors =_				new ArrayList<>(advisors.size())__		for (Advisor element : advisors) {_			partiallyComparableAdvisors.add(_					new PartiallyComparableAdvisorHolder(element, DEFAULT_PRECEDENCE_COMPARATOR))__		}_		List<PartiallyComparableAdvisorHolder> sorted =_				PartialOrder.sort(partiallyComparableAdvisors)__		if (sorted != null) {_			List<Advisor> result = new ArrayList<>(advisors.size())__			for (PartiallyComparableAdvisorHolder pcAdvisor : sorted) {_				result.add(pcAdvisor.getAdvisor())__			}_			return result__		}_		else {_			return super.sortAdvisors(advisors)__		}_	};sort,the,rest,by,aspect,j,precedence,if,two,pieces,of,advice,have,come,from,the,same,aspect,they,will,have,the,same,order,advice,from,the,same,aspect,is,then,further,ordered,according,to,the,following,rules,ul,li,if,either,of,the,pair,is,after,advice,then,the,advice,declared,last,gets,highest,precedence,runs,last,li,li,otherwise,the,advice,declared,first,gets,highest,precedence,runs,first,li,ul,p,b,important,b,advisors,are,sorted,in,precedence,order,from,highest,precedence,to,lowest,on,the,way,in,to,a,join,point,the,highest,precedence,advisor,should,run,first,on,the,way,out,of,a,join,point,the,highest,precedence,advisor,should,run,last;override,suppress,warnings,unchecked,protected,list,advisor,sort,advisors,list,advisor,advisors,list,partially,comparable,advisor,holder,partially,comparable,advisors,new,array,list,advisors,size,for,advisor,element,advisors,partially,comparable,advisors,add,new,partially,comparable,advisor,holder,element,list,partially,comparable,advisor,holder,sorted,partial,order,sort,partially,comparable,advisors,if,sorted,null,list,advisor,result,new,array,list,advisors,size,for,partially,comparable,advisor,holder,pc,advisor,sorted,result,add,pc,advisor,get,advisor,return,result,else,return,super,sort,advisors,advisors
AspectJAwareAdvisorAutoProxyCreator -> @Override 	@SuppressWarnings("unchecked") 	protected List<Advisor> sortAdvisors(List<Advisor> advisors);1520529117;Sort the rest by AspectJ precedence. If two pieces of advice have_come from the same aspect they will have the same order._Advice from the same aspect is then further ordered according to the_following rules:_<ul>_<li>if either of the pair is after advice, then the advice declared_last gets highest precedence (runs last)</li>_<li>otherwise the advice declared first gets highest precedence (runs first)</li>_</ul>_<p><b>Important:</b> Advisors are sorted in precedence order, from highest_precedence to lowest. "On the way in" to a join point, the highest precedence_advisor should run first. "On the way out" of a join point, the highest precedence_advisor should run last.;@Override_	@SuppressWarnings("unchecked")_	protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		List<PartiallyComparableAdvisorHolder> partiallyComparableAdvisors = new ArrayList<>(advisors.size())__		for (Advisor element : advisors) {_			partiallyComparableAdvisors.add(_					new PartiallyComparableAdvisorHolder(element, DEFAULT_PRECEDENCE_COMPARATOR))__		}_		List<PartiallyComparableAdvisorHolder> sorted = PartialOrder.sort(partiallyComparableAdvisors)__		if (sorted != null) {_			List<Advisor> result = new ArrayList<>(advisors.size())__			for (PartiallyComparableAdvisorHolder pcAdvisor : sorted) {_				result.add(pcAdvisor.getAdvisor())__			}_			return result__		}_		else {_			return super.sortAdvisors(advisors)__		}_	};sort,the,rest,by,aspect,j,precedence,if,two,pieces,of,advice,have,come,from,the,same,aspect,they,will,have,the,same,order,advice,from,the,same,aspect,is,then,further,ordered,according,to,the,following,rules,ul,li,if,either,of,the,pair,is,after,advice,then,the,advice,declared,last,gets,highest,precedence,runs,last,li,li,otherwise,the,advice,declared,first,gets,highest,precedence,runs,first,li,ul,p,b,important,b,advisors,are,sorted,in,precedence,order,from,highest,precedence,to,lowest,on,the,way,in,to,a,join,point,the,highest,precedence,advisor,should,run,first,on,the,way,out,of,a,join,point,the,highest,precedence,advisor,should,run,last;override,suppress,warnings,unchecked,protected,list,advisor,sort,advisors,list,advisor,advisors,list,partially,comparable,advisor,holder,partially,comparable,advisors,new,array,list,advisors,size,for,advisor,element,advisors,partially,comparable,advisors,add,new,partially,comparable,advisor,holder,element,list,partially,comparable,advisor,holder,sorted,partial,order,sort,partially,comparable,advisors,if,sorted,null,list,advisor,result,new,array,list,advisors,size,for,partially,comparable,advisor,holder,pc,advisor,sorted,result,add,pc,advisor,get,advisor,return,result,else,return,super,sort,advisors,advisors
AspectJAwareAdvisorAutoProxyCreator -> @Override 	protected void extendAdvisors(List<Advisor> candidateAdvisors);1328020251;Adds an {@link ExposeInvocationInterceptor} to the beginning of the advice chain._These additional advices are needed when using AspectJ expression pointcuts_and when using AspectJ-style advice.;@Override_	protected void extendAdvisors(List<Advisor> candidateAdvisors) {_		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(candidateAdvisors)__	};adds,an,link,expose,invocation,interceptor,to,the,beginning,of,the,advice,chain,these,additional,advices,are,needed,when,using,aspect,j,expression,pointcuts,and,when,using,aspect,j,style,advice;override,protected,void,extend,advisors,list,advisor,candidate,advisors,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,candidate,advisors
AspectJAwareAdvisorAutoProxyCreator -> @Override 	protected void extendAdvisors(List<Advisor> candidateAdvisors);1356735495;Adds an {@link ExposeInvocationInterceptor} to the beginning of the advice chain._These additional advices are needed when using AspectJ expression pointcuts_and when using AspectJ-style advice.;@Override_	protected void extendAdvisors(List<Advisor> candidateAdvisors) {_		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(candidateAdvisors)__	};adds,an,link,expose,invocation,interceptor,to,the,beginning,of,the,advice,chain,these,additional,advices,are,needed,when,using,aspect,j,expression,pointcuts,and,when,using,aspect,j,style,advice;override,protected,void,extend,advisors,list,advisor,candidate,advisors,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,candidate,advisors
AspectJAwareAdvisorAutoProxyCreator -> @Override 	protected void extendAdvisors(List<Advisor> candidateAdvisors);1357119239;Adds an {@link ExposeInvocationInterceptor} to the beginning of the advice chain._These additional advices are needed when using AspectJ expression pointcuts_and when using AspectJ-style advice.;@Override_	protected void extendAdvisors(List<Advisor> candidateAdvisors) {_		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(candidateAdvisors)__	};adds,an,link,expose,invocation,interceptor,to,the,beginning,of,the,advice,chain,these,additional,advices,are,needed,when,using,aspect,j,expression,pointcuts,and,when,using,aspect,j,style,advice;override,protected,void,extend,advisors,list,advisor,candidate,advisors,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,candidate,advisors
AspectJAwareAdvisorAutoProxyCreator -> @Override 	protected void extendAdvisors(List<Advisor> candidateAdvisors);1362408075;Adds an {@link ExposeInvocationInterceptor} to the beginning of the advice chain._These additional advices are needed when using AspectJ expression pointcuts_and when using AspectJ-style advice.;@Override_	protected void extendAdvisors(List<Advisor> candidateAdvisors) {_		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(candidateAdvisors)__	};adds,an,link,expose,invocation,interceptor,to,the,beginning,of,the,advice,chain,these,additional,advices,are,needed,when,using,aspect,j,expression,pointcuts,and,when,using,aspect,j,style,advice;override,protected,void,extend,advisors,list,advisor,candidate,advisors,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,candidate,advisors
AspectJAwareAdvisorAutoProxyCreator -> @Override 	protected void extendAdvisors(List<Advisor> candidateAdvisors);1368482696;Adds an {@link ExposeInvocationInterceptor} to the beginning of the advice chain._These additional advices are needed when using AspectJ expression pointcuts_and when using AspectJ-style advice.;@Override_	protected void extendAdvisors(List<Advisor> candidateAdvisors) {_		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(candidateAdvisors)__	};adds,an,link,expose,invocation,interceptor,to,the,beginning,of,the,advice,chain,these,additional,advices,are,needed,when,using,aspect,j,expression,pointcuts,and,when,using,aspect,j,style,advice;override,protected,void,extend,advisors,list,advisor,candidate,advisors,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,candidate,advisors
AspectJAwareAdvisorAutoProxyCreator -> @Override 	protected void extendAdvisors(List<Advisor> candidateAdvisors);1385412762;Adds an {@link ExposeInvocationInterceptor} to the beginning of the advice chain._These additional advices are needed when using AspectJ expression pointcuts_and when using AspectJ-style advice.;@Override_	protected void extendAdvisors(List<Advisor> candidateAdvisors) {_		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(candidateAdvisors)__	};adds,an,link,expose,invocation,interceptor,to,the,beginning,of,the,advice,chain,these,additional,advices,are,needed,when,using,aspect,j,expression,pointcuts,and,when,using,aspect,j,style,advice;override,protected,void,extend,advisors,list,advisor,candidate,advisors,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,candidate,advisors
AspectJAwareAdvisorAutoProxyCreator -> @Override 	protected void extendAdvisors(List<Advisor> candidateAdvisors);1467730834;Adds an {@link ExposeInvocationInterceptor} to the beginning of the advice chain._These additional advices are needed when using AspectJ expression pointcuts_and when using AspectJ-style advice.;@Override_	protected void extendAdvisors(List<Advisor> candidateAdvisors) {_		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(candidateAdvisors)__	};adds,an,link,expose,invocation,interceptor,to,the,beginning,of,the,advice,chain,these,additional,advices,are,needed,when,using,aspect,j,expression,pointcuts,and,when,using,aspect,j,style,advice;override,protected,void,extend,advisors,list,advisor,candidate,advisors,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,candidate,advisors
AspectJAwareAdvisorAutoProxyCreator -> @Override 	protected void extendAdvisors(List<Advisor> candidateAdvisors);1520529117;Adds an {@link ExposeInvocationInterceptor} to the beginning of the advice chain._These additional advices are needed when using AspectJ expression pointcuts_and when using AspectJ-style advice.;@Override_	protected void extendAdvisors(List<Advisor> candidateAdvisors) {_		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(candidateAdvisors)__	};adds,an,link,expose,invocation,interceptor,to,the,beginning,of,the,advice,chain,these,additional,advices,are,needed,when,using,aspect,j,expression,pointcuts,and,when,using,aspect,j,style,advice;override,protected,void,extend,advisors,list,advisor,candidate,advisors,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,candidate,advisors
