# id;timestamp;commentText;codeText;commentWords;codeWords
IntroductionAwareMethodMatcher -> boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions)_;1385412762;Perform static checking whether the given method matches. This may be invoked_instead of the 2-arg {@link #matches(java.lang.reflect.Method, Class)} method_if the caller supports the extended IntroductionAwareMethodMatcher interface._@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions)_;perform,static,checking,whether,the,given,method,matches,this,may,be,invoked,instead,of,the,2,arg,link,matches,java,lang,reflect,method,class,method,if,the,caller,supports,the,extended,introduction,aware,method,matcher,interface,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;boolean,matches,method,method,class,target,class,boolean,has,introductions
IntroductionAwareMethodMatcher -> boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions)_;1390432202;Perform static checking whether the given method matches. This may be invoked_instead of the 2-arg {@link #matches(java.lang.reflect.Method, Class)} method_if the caller supports the extended IntroductionAwareMethodMatcher interface._@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions)_;perform,static,checking,whether,the,given,method,matches,this,may,be,invoked,instead,of,the,2,arg,link,matches,java,lang,reflect,method,class,method,if,the,caller,supports,the,extended,introduction,aware,method,matcher,interface,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;boolean,matches,method,method,class,target,class,boolean,has,introductions
IntroductionAwareMethodMatcher -> boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions)_;1532038651;Perform static checking whether the given method matches. This may be invoked_instead of the 2-arg {@link #matches(java.lang.reflect.Method, Class)} method_if the caller supports the extended IntroductionAwareMethodMatcher interface._@param method the candidate method_@param targetClass the target class_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions)_;perform,static,checking,whether,the,given,method,matches,this,may,be,invoked,instead,of,the,2,arg,link,matches,java,lang,reflect,method,class,method,if,the,caller,supports,the,extended,introduction,aware,method,matcher,interface,param,method,the,candidate,method,param,target,class,the,target,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;boolean,matches,method,method,class,target,class,boolean,has,introductions
IntroductionAwareMethodMatcher -> boolean matches(Method method, Class targetClass, boolean hasIntroductions)_;1328020251;Perform static checking whether the given method matches. This may be invoked_instead of the 2-arg {@link #matches(java.lang.reflect.Method, Class)} method_if the caller supports the extended IntroductionAwareMethodMatcher interface._@param method the candidate method_@param targetClass the target class (may be <code>null</code>, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions <code>true</code> if the object on whose behalf we are_asking is the subject on one or more introductions_ <code>false</code> otherwise_@return whether or not this method matches statically;boolean matches(Method method, Class targetClass, boolean hasIntroductions)_;perform,static,checking,whether,the,given,method,matches,this,may,be,invoked,instead,of,the,2,arg,link,matches,java,lang,reflect,method,class,method,if,the,caller,supports,the,extended,introduction,aware,method,matcher,interface,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,code,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,code,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,code,otherwise,return,whether,or,not,this,method,matches,statically;boolean,matches,method,method,class,target,class,boolean,has,introductions
IntroductionAwareMethodMatcher -> boolean matches(Method method, Class targetClass, boolean hasIntroductions)_;1356735495;Perform static checking whether the given method matches. This may be invoked_instead of the 2-arg {@link #matches(java.lang.reflect.Method, Class)} method_if the caller supports the extended IntroductionAwareMethodMatcher interface._@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;boolean matches(Method method, Class targetClass, boolean hasIntroductions)_;perform,static,checking,whether,the,given,method,matches,this,may,be,invoked,instead,of,the,2,arg,link,matches,java,lang,reflect,method,class,method,if,the,caller,supports,the,extended,introduction,aware,method,matcher,interface,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;boolean,matches,method,method,class,target,class,boolean,has,introductions
