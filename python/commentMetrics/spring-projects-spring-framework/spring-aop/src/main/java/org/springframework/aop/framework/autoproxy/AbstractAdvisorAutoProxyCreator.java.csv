commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public void setBeanFactory(BeanFactory beanFactory) {     super.setBeanFactory(beanFactory).     if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {         throw new IllegalArgumentException("AdvisorAutoProxyCreator requires a ConfigurableListableBeanFactory: " + beanFactory).     }     initBeanFactory((ConfigurableListableBeanFactory) beanFactory). }
false;protected;1;3;;protected void initBeanFactory(ConfigurableListableBeanFactory beanFactory) {     this.advisorRetrievalHelper = new BeanFactoryAdvisorRetrievalHelperAdapter(beanFactory). }
false;protected;3;11;;@Override @Nullable protected Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, @Nullable TargetSource targetSource) {     List<Advisor> advisors = findEligibleAdvisors(beanClass, beanName).     if (advisors.isEmpty()) {         return DO_NOT_PROXY.     }     return advisors.toArray(). }
true;protected;2;9;/**  * Find all eligible Advisors for auto-proxying this class.  * @param beanClass the clazz to find advisors for  * @param beanName the name of the currently proxied bean  * @return the empty List, not {@code null},  * if there are no pointcuts or interceptors  * @see #findCandidateAdvisors  * @see #sortAdvisors  * @see #extendAdvisors  */ ;/**  * Find all eligible Advisors for auto-proxying this class.  * @param beanClass the clazz to find advisors for  * @param beanName the name of the currently proxied bean  * @return the empty List, not {@code null},  * if there are no pointcuts or interceptors  * @see #findCandidateAdvisors  * @see #sortAdvisors  * @see #extendAdvisors  */ protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName) {     List<Advisor> candidateAdvisors = findCandidateAdvisors().     List<Advisor> eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName).     extendAdvisors(eligibleAdvisors).     if (!eligibleAdvisors.isEmpty()) {         eligibleAdvisors = sortAdvisors(eligibleAdvisors).     }     return eligibleAdvisors. }
true;protected;0;4;/**  * Find all candidate Advisors to use in auto-proxying.  * @return the List of candidate Advisors  */ ;/**  * Find all candidate Advisors to use in auto-proxying.  * @return the List of candidate Advisors  */ protected List<Advisor> findCandidateAdvisors() {     Assert.state(this.advisorRetrievalHelper != null, "No BeanFactoryAdvisorRetrievalHelper available").     return this.advisorRetrievalHelper.findAdvisorBeans(). }
true;protected;3;11;/**  * Search the given candidate Advisors to find all Advisors that  * can apply to the specified bean.  * @param candidateAdvisors the candidate Advisors  * @param beanClass the target's bean class  * @param beanName the target's bean name  * @return the List of applicable Advisors  * @see ProxyCreationContext#getCurrentProxiedBeanName()  */ ;/**  * Search the given candidate Advisors to find all Advisors that  * can apply to the specified bean.  * @param candidateAdvisors the candidate Advisors  * @param beanClass the target's bean class  * @param beanName the target's bean name  * @return the List of applicable Advisors  * @see ProxyCreationContext#getCurrentProxiedBeanName()  */ protected List<Advisor> findAdvisorsThatCanApply(List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName) {     ProxyCreationContext.setCurrentProxiedBeanName(beanName).     try {         return AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass).     } finally {         ProxyCreationContext.setCurrentProxiedBeanName(null).     } }
true;protected;1;3;/**  * Return whether the Advisor bean with the given name is eligible  * for proxying in the first place.  * @param beanName the name of the Advisor bean  * @return whether the bean is eligible  */ ;/**  * Return whether the Advisor bean with the given name is eligible  * for proxying in the first place.  * @param beanName the name of the Advisor bean  * @return whether the bean is eligible  */ protected boolean isEligibleAdvisorBean(String beanName) {     return true. }
true;protected;1;4;/**  * Sort advisors based on ordering. Subclasses may choose to override this  * method to customize the sorting strategy.  * @param advisors the source List of Advisors  * @return the sorted List of Advisors  * @see org.springframework.core.Ordered  * @see org.springframework.core.annotation.Order  * @see org.springframework.core.annotation.AnnotationAwareOrderComparator  */ ;/**  * Sort advisors based on ordering. Subclasses may choose to override this  * method to customize the sorting strategy.  * @param advisors the source List of Advisors  * @return the sorted List of Advisors  * @see org.springframework.core.Ordered  * @see org.springframework.core.annotation.Order  * @see org.springframework.core.annotation.AnnotationAwareOrderComparator  */ protected List<Advisor> sortAdvisors(List<Advisor> advisors) {     AnnotationAwareOrderComparator.sort(advisors).     return advisors. }
true;protected;1;2;/**  * Extension hook that subclasses can override to register additional Advisors,  * given the sorted Advisors obtained to date.  * <p>The default implementation is empty.  * <p>Typically used to add Advisors that expose contextual information  * required by some of the later advisors.  * @param candidateAdvisors the Advisors that have already been identified as  * applying to a given bean  */ ;/**  * Extension hook that subclasses can override to register additional Advisors,  * given the sorted Advisors obtained to date.  * <p>The default implementation is empty.  * <p>Typically used to add Advisors that expose contextual information  * required by some of the later advisors.  * @param candidateAdvisors the Advisors that have already been identified as  * applying to a given bean  */ protected void extendAdvisors(List<Advisor> candidateAdvisors) { }
true;protected;0;4;/**  * This auto-proxy creator always returns pre-filtered Advisors.  */ ;/**  * This auto-proxy creator always returns pre-filtered Advisors.  */ @Override protected boolean advisorsPreFiltered() {     return true. }
false;protected;1;4;;@Override protected boolean isEligibleBean(String beanName) {     return AbstractAdvisorAutoProxyCreator.this.isEligibleAdvisorBean(beanName). }
