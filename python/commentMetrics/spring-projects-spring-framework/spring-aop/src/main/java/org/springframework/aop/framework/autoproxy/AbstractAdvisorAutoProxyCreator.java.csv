# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractAdvisorAutoProxyCreator -> protected boolean isEligibleAdvisorBean(String beanName);1328020251;Return whether the Advisor bean with the given name is eligible_for proxying in the first place._@param beanName the name of the Advisor bean_@return whether the bean is eligible;protected boolean isEligibleAdvisorBean(String beanName) {_		return true__	};return,whether,the,advisor,bean,with,the,given,name,is,eligible,for,proxying,in,the,first,place,param,bean,name,the,name,of,the,advisor,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,advisor,bean,string,bean,name,return,true
AbstractAdvisorAutoProxyCreator -> protected boolean isEligibleAdvisorBean(String beanName);1356735495;Return whether the Advisor bean with the given name is eligible_for proxying in the first place._@param beanName the name of the Advisor bean_@return whether the bean is eligible;protected boolean isEligibleAdvisorBean(String beanName) {_		return true__	};return,whether,the,advisor,bean,with,the,given,name,is,eligible,for,proxying,in,the,first,place,param,bean,name,the,name,of,the,advisor,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,advisor,bean,string,bean,name,return,true
AbstractAdvisorAutoProxyCreator -> protected boolean isEligibleAdvisorBean(String beanName);1385412762;Return whether the Advisor bean with the given name is eligible_for proxying in the first place._@param beanName the name of the Advisor bean_@return whether the bean is eligible;protected boolean isEligibleAdvisorBean(String beanName) {_		return true__	};return,whether,the,advisor,bean,with,the,given,name,is,eligible,for,proxying,in,the,first,place,param,bean,name,the,name,of,the,advisor,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,advisor,bean,string,bean,name,return,true
AbstractAdvisorAutoProxyCreator -> protected boolean isEligibleAdvisorBean(String beanName);1426267113;Return whether the Advisor bean with the given name is eligible_for proxying in the first place._@param beanName the name of the Advisor bean_@return whether the bean is eligible;protected boolean isEligibleAdvisorBean(String beanName) {_		return true__	};return,whether,the,advisor,bean,with,the,given,name,is,eligible,for,proxying,in,the,first,place,param,bean,name,the,name,of,the,advisor,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,advisor,bean,string,bean,name,return,true
AbstractAdvisorAutoProxyCreator -> protected boolean isEligibleAdvisorBean(String beanName);1485810955;Return whether the Advisor bean with the given name is eligible_for proxying in the first place._@param beanName the name of the Advisor bean_@return whether the bean is eligible;protected boolean isEligibleAdvisorBean(String beanName) {_		return true__	};return,whether,the,advisor,bean,with,the,given,name,is,eligible,for,proxying,in,the,first,place,param,bean,name,the,name,of,the,advisor,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,advisor,bean,string,bean,name,return,true
AbstractAdvisorAutoProxyCreator -> protected boolean isEligibleAdvisorBean(String beanName);1496242568;Return whether the Advisor bean with the given name is eligible_for proxying in the first place._@param beanName the name of the Advisor bean_@return whether the bean is eligible;protected boolean isEligibleAdvisorBean(String beanName) {_		return true__	};return,whether,the,advisor,bean,with,the,given,name,is,eligible,for,proxying,in,the,first,place,param,bean,name,the,name,of,the,advisor,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,advisor,bean,string,bean,name,return,true
AbstractAdvisorAutoProxyCreator -> protected boolean isEligibleAdvisorBean(String beanName);1500495740;Return whether the Advisor bean with the given name is eligible_for proxying in the first place._@param beanName the name of the Advisor bean_@return whether the bean is eligible;protected boolean isEligibleAdvisorBean(String beanName) {_		return true__	};return,whether,the,advisor,bean,with,the,given,name,is,eligible,for,proxying,in,the,first,place,param,bean,name,the,name,of,the,advisor,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,advisor,bean,string,bean,name,return,true
AbstractAdvisorAutoProxyCreator -> protected boolean isEligibleAdvisorBean(String beanName);1522580239;Return whether the Advisor bean with the given name is eligible_for proxying in the first place._@param beanName the name of the Advisor bean_@return whether the bean is eligible;protected boolean isEligibleAdvisorBean(String beanName) {_		return true__	};return,whether,the,advisor,bean,with,the,given,name,is,eligible,for,proxying,in,the,first,place,param,bean,name,the,name,of,the,advisor,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,advisor,bean,string,bean,name,return,true
AbstractAdvisorAutoProxyCreator -> protected boolean isEligibleAdvisorBean(String beanName);1530174524;Return whether the Advisor bean with the given name is eligible_for proxying in the first place._@param beanName the name of the Advisor bean_@return whether the bean is eligible;protected boolean isEligibleAdvisorBean(String beanName) {_		return true__	};return,whether,the,advisor,bean,with,the,given,name,is,eligible,for,proxying,in,the,first,place,param,bean,name,the,name,of,the,advisor,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,advisor,bean,string,bean,name,return,true
AbstractAdvisorAutoProxyCreator -> protected boolean isEligibleAdvisorBean(String beanName);1551199835;Return whether the Advisor bean with the given name is eligible_for proxying in the first place._@param beanName the name of the Advisor bean_@return whether the bean is eligible;protected boolean isEligibleAdvisorBean(String beanName) {_		return true__	};return,whether,the,advisor,bean,with,the,given,name,is,eligible,for,proxying,in,the,first,place,param,bean,name,the,name,of,the,advisor,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,advisor,bean,string,bean,name,return,true
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName);1385412762;Find all eligible Advisors for auto-proxying this class._@param beanClass the clazz to find advisors for_@param beanName the name of the currently proxied bean_@return the empty List, not {@code null},_if there are no pointcuts or interceptors_@see #findCandidateAdvisors_@see #sortAdvisors_@see #extendAdvisors;protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName) {_		List<Advisor> candidateAdvisors = findCandidateAdvisors()__		List<Advisor> eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName)__		extendAdvisors(eligibleAdvisors)__		if (!eligibleAdvisors.isEmpty()) {_			eligibleAdvisors = sortAdvisors(eligibleAdvisors)__		}_		return eligibleAdvisors__	};find,all,eligible,advisors,for,auto,proxying,this,class,param,bean,class,the,clazz,to,find,advisors,for,param,bean,name,the,name,of,the,currently,proxied,bean,return,the,empty,list,not,code,null,if,there,are,no,pointcuts,or,interceptors,see,find,candidate,advisors,see,sort,advisors,see,extend,advisors;protected,list,advisor,find,eligible,advisors,class,bean,class,string,bean,name,list,advisor,candidate,advisors,find,candidate,advisors,list,advisor,eligible,advisors,find,advisors,that,can,apply,candidate,advisors,bean,class,bean,name,extend,advisors,eligible,advisors,if,eligible,advisors,is,empty,eligible,advisors,sort,advisors,eligible,advisors,return,eligible,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName);1426267113;Find all eligible Advisors for auto-proxying this class._@param beanClass the clazz to find advisors for_@param beanName the name of the currently proxied bean_@return the empty List, not {@code null},_if there are no pointcuts or interceptors_@see #findCandidateAdvisors_@see #sortAdvisors_@see #extendAdvisors;protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName) {_		List<Advisor> candidateAdvisors = findCandidateAdvisors()__		List<Advisor> eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName)__		extendAdvisors(eligibleAdvisors)__		if (!eligibleAdvisors.isEmpty()) {_			eligibleAdvisors = sortAdvisors(eligibleAdvisors)__		}_		return eligibleAdvisors__	};find,all,eligible,advisors,for,auto,proxying,this,class,param,bean,class,the,clazz,to,find,advisors,for,param,bean,name,the,name,of,the,currently,proxied,bean,return,the,empty,list,not,code,null,if,there,are,no,pointcuts,or,interceptors,see,find,candidate,advisors,see,sort,advisors,see,extend,advisors;protected,list,advisor,find,eligible,advisors,class,bean,class,string,bean,name,list,advisor,candidate,advisors,find,candidate,advisors,list,advisor,eligible,advisors,find,advisors,that,can,apply,candidate,advisors,bean,class,bean,name,extend,advisors,eligible,advisors,if,eligible,advisors,is,empty,eligible,advisors,sort,advisors,eligible,advisors,return,eligible,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName);1485810955;Find all eligible Advisors for auto-proxying this class._@param beanClass the clazz to find advisors for_@param beanName the name of the currently proxied bean_@return the empty List, not {@code null},_if there are no pointcuts or interceptors_@see #findCandidateAdvisors_@see #sortAdvisors_@see #extendAdvisors;protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName) {_		List<Advisor> candidateAdvisors = findCandidateAdvisors()__		List<Advisor> eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName)__		extendAdvisors(eligibleAdvisors)__		if (!eligibleAdvisors.isEmpty()) {_			eligibleAdvisors = sortAdvisors(eligibleAdvisors)__		}_		return eligibleAdvisors__	};find,all,eligible,advisors,for,auto,proxying,this,class,param,bean,class,the,clazz,to,find,advisors,for,param,bean,name,the,name,of,the,currently,proxied,bean,return,the,empty,list,not,code,null,if,there,are,no,pointcuts,or,interceptors,see,find,candidate,advisors,see,sort,advisors,see,extend,advisors;protected,list,advisor,find,eligible,advisors,class,bean,class,string,bean,name,list,advisor,candidate,advisors,find,candidate,advisors,list,advisor,eligible,advisors,find,advisors,that,can,apply,candidate,advisors,bean,class,bean,name,extend,advisors,eligible,advisors,if,eligible,advisors,is,empty,eligible,advisors,sort,advisors,eligible,advisors,return,eligible,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName);1496242568;Find all eligible Advisors for auto-proxying this class._@param beanClass the clazz to find advisors for_@param beanName the name of the currently proxied bean_@return the empty List, not {@code null},_if there are no pointcuts or interceptors_@see #findCandidateAdvisors_@see #sortAdvisors_@see #extendAdvisors;protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName) {_		List<Advisor> candidateAdvisors = findCandidateAdvisors()__		List<Advisor> eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName)__		extendAdvisors(eligibleAdvisors)__		if (!eligibleAdvisors.isEmpty()) {_			eligibleAdvisors = sortAdvisors(eligibleAdvisors)__		}_		return eligibleAdvisors__	};find,all,eligible,advisors,for,auto,proxying,this,class,param,bean,class,the,clazz,to,find,advisors,for,param,bean,name,the,name,of,the,currently,proxied,bean,return,the,empty,list,not,code,null,if,there,are,no,pointcuts,or,interceptors,see,find,candidate,advisors,see,sort,advisors,see,extend,advisors;protected,list,advisor,find,eligible,advisors,class,bean,class,string,bean,name,list,advisor,candidate,advisors,find,candidate,advisors,list,advisor,eligible,advisors,find,advisors,that,can,apply,candidate,advisors,bean,class,bean,name,extend,advisors,eligible,advisors,if,eligible,advisors,is,empty,eligible,advisors,sort,advisors,eligible,advisors,return,eligible,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName);1500495740;Find all eligible Advisors for auto-proxying this class._@param beanClass the clazz to find advisors for_@param beanName the name of the currently proxied bean_@return the empty List, not {@code null},_if there are no pointcuts or interceptors_@see #findCandidateAdvisors_@see #sortAdvisors_@see #extendAdvisors;protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName) {_		List<Advisor> candidateAdvisors = findCandidateAdvisors()__		List<Advisor> eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName)__		extendAdvisors(eligibleAdvisors)__		if (!eligibleAdvisors.isEmpty()) {_			eligibleAdvisors = sortAdvisors(eligibleAdvisors)__		}_		return eligibleAdvisors__	};find,all,eligible,advisors,for,auto,proxying,this,class,param,bean,class,the,clazz,to,find,advisors,for,param,bean,name,the,name,of,the,currently,proxied,bean,return,the,empty,list,not,code,null,if,there,are,no,pointcuts,or,interceptors,see,find,candidate,advisors,see,sort,advisors,see,extend,advisors;protected,list,advisor,find,eligible,advisors,class,bean,class,string,bean,name,list,advisor,candidate,advisors,find,candidate,advisors,list,advisor,eligible,advisors,find,advisors,that,can,apply,candidate,advisors,bean,class,bean,name,extend,advisors,eligible,advisors,if,eligible,advisors,is,empty,eligible,advisors,sort,advisors,eligible,advisors,return,eligible,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName);1522580239;Find all eligible Advisors for auto-proxying this class._@param beanClass the clazz to find advisors for_@param beanName the name of the currently proxied bean_@return the empty List, not {@code null},_if there are no pointcuts or interceptors_@see #findCandidateAdvisors_@see #sortAdvisors_@see #extendAdvisors;protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName) {_		List<Advisor> candidateAdvisors = findCandidateAdvisors()__		List<Advisor> eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName)__		extendAdvisors(eligibleAdvisors)__		if (!eligibleAdvisors.isEmpty()) {_			eligibleAdvisors = sortAdvisors(eligibleAdvisors)__		}_		return eligibleAdvisors__	};find,all,eligible,advisors,for,auto,proxying,this,class,param,bean,class,the,clazz,to,find,advisors,for,param,bean,name,the,name,of,the,currently,proxied,bean,return,the,empty,list,not,code,null,if,there,are,no,pointcuts,or,interceptors,see,find,candidate,advisors,see,sort,advisors,see,extend,advisors;protected,list,advisor,find,eligible,advisors,class,bean,class,string,bean,name,list,advisor,candidate,advisors,find,candidate,advisors,list,advisor,eligible,advisors,find,advisors,that,can,apply,candidate,advisors,bean,class,bean,name,extend,advisors,eligible,advisors,if,eligible,advisors,is,empty,eligible,advisors,sort,advisors,eligible,advisors,return,eligible,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName);1530174524;Find all eligible Advisors for auto-proxying this class._@param beanClass the clazz to find advisors for_@param beanName the name of the currently proxied bean_@return the empty List, not {@code null},_if there are no pointcuts or interceptors_@see #findCandidateAdvisors_@see #sortAdvisors_@see #extendAdvisors;protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName) {_		List<Advisor> candidateAdvisors = findCandidateAdvisors()__		List<Advisor> eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName)__		extendAdvisors(eligibleAdvisors)__		if (!eligibleAdvisors.isEmpty()) {_			eligibleAdvisors = sortAdvisors(eligibleAdvisors)__		}_		return eligibleAdvisors__	};find,all,eligible,advisors,for,auto,proxying,this,class,param,bean,class,the,clazz,to,find,advisors,for,param,bean,name,the,name,of,the,currently,proxied,bean,return,the,empty,list,not,code,null,if,there,are,no,pointcuts,or,interceptors,see,find,candidate,advisors,see,sort,advisors,see,extend,advisors;protected,list,advisor,find,eligible,advisors,class,bean,class,string,bean,name,list,advisor,candidate,advisors,find,candidate,advisors,list,advisor,eligible,advisors,find,advisors,that,can,apply,candidate,advisors,bean,class,bean,name,extend,advisors,eligible,advisors,if,eligible,advisors,is,empty,eligible,advisors,sort,advisors,eligible,advisors,return,eligible,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName);1551199835;Find all eligible Advisors for auto-proxying this class._@param beanClass the clazz to find advisors for_@param beanName the name of the currently proxied bean_@return the empty List, not {@code null},_if there are no pointcuts or interceptors_@see #findCandidateAdvisors_@see #sortAdvisors_@see #extendAdvisors;protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName) {_		List<Advisor> candidateAdvisors = findCandidateAdvisors()__		List<Advisor> eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName)__		extendAdvisors(eligibleAdvisors)__		if (!eligibleAdvisors.isEmpty()) {_			eligibleAdvisors = sortAdvisors(eligibleAdvisors)__		}_		return eligibleAdvisors__	};find,all,eligible,advisors,for,auto,proxying,this,class,param,bean,class,the,clazz,to,find,advisors,for,param,bean,name,the,name,of,the,currently,proxied,bean,return,the,empty,list,not,code,null,if,there,are,no,pointcuts,or,interceptors,see,find,candidate,advisors,see,sort,advisors,see,extend,advisors;protected,list,advisor,find,eligible,advisors,class,bean,class,string,bean,name,list,advisor,candidate,advisors,find,candidate,advisors,list,advisor,eligible,advisors,find,advisors,that,can,apply,candidate,advisors,bean,class,bean,name,extend,advisors,eligible,advisors,if,eligible,advisors,is,empty,eligible,advisors,sort,advisors,eligible,advisors,return,eligible,advisors
AbstractAdvisorAutoProxyCreator -> protected void extendAdvisors(List<Advisor> candidateAdvisors);1328020251;Extension hook that subclasses can override to register additional Advisors,_given the sorted Advisors obtained to date._<p>The default implementation is empty._<p>Typically used to add Advisors that expose contextual information_required by some of the later advisors._@param candidateAdvisors Advisors that have already been identified as_applying to a given bean;protected void extendAdvisors(List<Advisor> candidateAdvisors) {_	};extension,hook,that,subclasses,can,override,to,register,additional,advisors,given,the,sorted,advisors,obtained,to,date,p,the,default,implementation,is,empty,p,typically,used,to,add,advisors,that,expose,contextual,information,required,by,some,of,the,later,advisors,param,candidate,advisors,advisors,that,have,already,been,identified,as,applying,to,a,given,bean;protected,void,extend,advisors,list,advisor,candidate,advisors
AbstractAdvisorAutoProxyCreator -> protected void extendAdvisors(List<Advisor> candidateAdvisors);1356735495;Extension hook that subclasses can override to register additional Advisors,_given the sorted Advisors obtained to date._<p>The default implementation is empty._<p>Typically used to add Advisors that expose contextual information_required by some of the later advisors._@param candidateAdvisors Advisors that have already been identified as_applying to a given bean;protected void extendAdvisors(List<Advisor> candidateAdvisors) {_	};extension,hook,that,subclasses,can,override,to,register,additional,advisors,given,the,sorted,advisors,obtained,to,date,p,the,default,implementation,is,empty,p,typically,used,to,add,advisors,that,expose,contextual,information,required,by,some,of,the,later,advisors,param,candidate,advisors,advisors,that,have,already,been,identified,as,applying,to,a,given,bean;protected,void,extend,advisors,list,advisor,candidate,advisors
AbstractAdvisorAutoProxyCreator -> protected void extendAdvisors(List<Advisor> candidateAdvisors);1385412762;Extension hook that subclasses can override to register additional Advisors,_given the sorted Advisors obtained to date._<p>The default implementation is empty._<p>Typically used to add Advisors that expose contextual information_required by some of the later advisors._@param candidateAdvisors Advisors that have already been identified as_applying to a given bean;protected void extendAdvisors(List<Advisor> candidateAdvisors) {_	};extension,hook,that,subclasses,can,override,to,register,additional,advisors,given,the,sorted,advisors,obtained,to,date,p,the,default,implementation,is,empty,p,typically,used,to,add,advisors,that,expose,contextual,information,required,by,some,of,the,later,advisors,param,candidate,advisors,advisors,that,have,already,been,identified,as,applying,to,a,given,bean;protected,void,extend,advisors,list,advisor,candidate,advisors
AbstractAdvisorAutoProxyCreator -> protected void extendAdvisors(List<Advisor> candidateAdvisors);1426267113;Extension hook that subclasses can override to register additional Advisors,_given the sorted Advisors obtained to date._<p>The default implementation is empty._<p>Typically used to add Advisors that expose contextual information_required by some of the later advisors._@param candidateAdvisors Advisors that have already been identified as_applying to a given bean;protected void extendAdvisors(List<Advisor> candidateAdvisors) {_	};extension,hook,that,subclasses,can,override,to,register,additional,advisors,given,the,sorted,advisors,obtained,to,date,p,the,default,implementation,is,empty,p,typically,used,to,add,advisors,that,expose,contextual,information,required,by,some,of,the,later,advisors,param,candidate,advisors,advisors,that,have,already,been,identified,as,applying,to,a,given,bean;protected,void,extend,advisors,list,advisor,candidate,advisors
AbstractAdvisorAutoProxyCreator -> protected void extendAdvisors(List<Advisor> candidateAdvisors);1485810955;Extension hook that subclasses can override to register additional Advisors,_given the sorted Advisors obtained to date._<p>The default implementation is empty._<p>Typically used to add Advisors that expose contextual information_required by some of the later advisors._@param candidateAdvisors Advisors that have already been identified as_applying to a given bean;protected void extendAdvisors(List<Advisor> candidateAdvisors) {_	};extension,hook,that,subclasses,can,override,to,register,additional,advisors,given,the,sorted,advisors,obtained,to,date,p,the,default,implementation,is,empty,p,typically,used,to,add,advisors,that,expose,contextual,information,required,by,some,of,the,later,advisors,param,candidate,advisors,advisors,that,have,already,been,identified,as,applying,to,a,given,bean;protected,void,extend,advisors,list,advisor,candidate,advisors
AbstractAdvisorAutoProxyCreator -> protected void extendAdvisors(List<Advisor> candidateAdvisors);1496242568;Extension hook that subclasses can override to register additional Advisors,_given the sorted Advisors obtained to date._<p>The default implementation is empty._<p>Typically used to add Advisors that expose contextual information_required by some of the later advisors._@param candidateAdvisors Advisors that have already been identified as_applying to a given bean;protected void extendAdvisors(List<Advisor> candidateAdvisors) {_	};extension,hook,that,subclasses,can,override,to,register,additional,advisors,given,the,sorted,advisors,obtained,to,date,p,the,default,implementation,is,empty,p,typically,used,to,add,advisors,that,expose,contextual,information,required,by,some,of,the,later,advisors,param,candidate,advisors,advisors,that,have,already,been,identified,as,applying,to,a,given,bean;protected,void,extend,advisors,list,advisor,candidate,advisors
AbstractAdvisorAutoProxyCreator -> protected void extendAdvisors(List<Advisor> candidateAdvisors);1500495740;Extension hook that subclasses can override to register additional Advisors,_given the sorted Advisors obtained to date._<p>The default implementation is empty._<p>Typically used to add Advisors that expose contextual information_required by some of the later advisors._@param candidateAdvisors Advisors that have already been identified as_applying to a given bean;protected void extendAdvisors(List<Advisor> candidateAdvisors) {_	};extension,hook,that,subclasses,can,override,to,register,additional,advisors,given,the,sorted,advisors,obtained,to,date,p,the,default,implementation,is,empty,p,typically,used,to,add,advisors,that,expose,contextual,information,required,by,some,of,the,later,advisors,param,candidate,advisors,advisors,that,have,already,been,identified,as,applying,to,a,given,bean;protected,void,extend,advisors,list,advisor,candidate,advisors
AbstractAdvisorAutoProxyCreator -> protected void extendAdvisors(List<Advisor> candidateAdvisors);1522580239;Extension hook that subclasses can override to register additional Advisors,_given the sorted Advisors obtained to date._<p>The default implementation is empty._<p>Typically used to add Advisors that expose contextual information_required by some of the later advisors._@param candidateAdvisors Advisors that have already been identified as_applying to a given bean;protected void extendAdvisors(List<Advisor> candidateAdvisors) {_	};extension,hook,that,subclasses,can,override,to,register,additional,advisors,given,the,sorted,advisors,obtained,to,date,p,the,default,implementation,is,empty,p,typically,used,to,add,advisors,that,expose,contextual,information,required,by,some,of,the,later,advisors,param,candidate,advisors,advisors,that,have,already,been,identified,as,applying,to,a,given,bean;protected,void,extend,advisors,list,advisor,candidate,advisors
AbstractAdvisorAutoProxyCreator -> protected void extendAdvisors(List<Advisor> candidateAdvisors);1530174524;Extension hook that subclasses can override to register additional Advisors,_given the sorted Advisors obtained to date._<p>The default implementation is empty._<p>Typically used to add Advisors that expose contextual information_required by some of the later advisors._@param candidateAdvisors the Advisors that have already been identified as_applying to a given bean;protected void extendAdvisors(List<Advisor> candidateAdvisors) {_	};extension,hook,that,subclasses,can,override,to,register,additional,advisors,given,the,sorted,advisors,obtained,to,date,p,the,default,implementation,is,empty,p,typically,used,to,add,advisors,that,expose,contextual,information,required,by,some,of,the,later,advisors,param,candidate,advisors,the,advisors,that,have,already,been,identified,as,applying,to,a,given,bean;protected,void,extend,advisors,list,advisor,candidate,advisors
AbstractAdvisorAutoProxyCreator -> protected void extendAdvisors(List<Advisor> candidateAdvisors);1551199835;Extension hook that subclasses can override to register additional Advisors,_given the sorted Advisors obtained to date._<p>The default implementation is empty._<p>Typically used to add Advisors that expose contextual information_required by some of the later advisors._@param candidateAdvisors the Advisors that have already been identified as_applying to a given bean;protected void extendAdvisors(List<Advisor> candidateAdvisors) {_	};extension,hook,that,subclasses,can,override,to,register,additional,advisors,given,the,sorted,advisors,obtained,to,date,p,the,default,implementation,is,empty,p,typically,used,to,add,advisors,that,expose,contextual,information,required,by,some,of,the,later,advisors,param,candidate,advisors,the,advisors,that,have,already,been,identified,as,applying,to,a,given,bean;protected,void,extend,advisors,list,advisor,candidate,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findCandidateAdvisors();1328020251;Find all candidate Advisors to use in auto-proxying._@return the List of candidate Advisors;protected List<Advisor> findCandidateAdvisors() {_		return this.advisorRetrievalHelper.findAdvisorBeans()__	};find,all,candidate,advisors,to,use,in,auto,proxying,return,the,list,of,candidate,advisors;protected,list,advisor,find,candidate,advisors,return,this,advisor,retrieval,helper,find,advisor,beans
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findCandidateAdvisors();1356735495;Find all candidate Advisors to use in auto-proxying._@return the List of candidate Advisors;protected List<Advisor> findCandidateAdvisors() {_		return this.advisorRetrievalHelper.findAdvisorBeans()__	};find,all,candidate,advisors,to,use,in,auto,proxying,return,the,list,of,candidate,advisors;protected,list,advisor,find,candidate,advisors,return,this,advisor,retrieval,helper,find,advisor,beans
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findCandidateAdvisors();1385412762;Find all candidate Advisors to use in auto-proxying._@return the List of candidate Advisors;protected List<Advisor> findCandidateAdvisors() {_		return this.advisorRetrievalHelper.findAdvisorBeans()__	};find,all,candidate,advisors,to,use,in,auto,proxying,return,the,list,of,candidate,advisors;protected,list,advisor,find,candidate,advisors,return,this,advisor,retrieval,helper,find,advisor,beans
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findCandidateAdvisors();1426267113;Find all candidate Advisors to use in auto-proxying._@return the List of candidate Advisors;protected List<Advisor> findCandidateAdvisors() {_		return this.advisorRetrievalHelper.findAdvisorBeans()__	};find,all,candidate,advisors,to,use,in,auto,proxying,return,the,list,of,candidate,advisors;protected,list,advisor,find,candidate,advisors,return,this,advisor,retrieval,helper,find,advisor,beans
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findCandidateAdvisors();1485810955;Find all candidate Advisors to use in auto-proxying._@return the List of candidate Advisors;protected List<Advisor> findCandidateAdvisors() {_		return this.advisorRetrievalHelper.findAdvisorBeans()__	};find,all,candidate,advisors,to,use,in,auto,proxying,return,the,list,of,candidate,advisors;protected,list,advisor,find,candidate,advisors,return,this,advisor,retrieval,helper,find,advisor,beans
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findCandidateAdvisors();1496242568;Find all candidate Advisors to use in auto-proxying._@return the List of candidate Advisors;protected List<Advisor> findCandidateAdvisors() {_		return this.advisorRetrievalHelper.findAdvisorBeans()__	};find,all,candidate,advisors,to,use,in,auto,proxying,return,the,list,of,candidate,advisors;protected,list,advisor,find,candidate,advisors,return,this,advisor,retrieval,helper,find,advisor,beans
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findCandidateAdvisors();1500495740;Find all candidate Advisors to use in auto-proxying._@return the List of candidate Advisors;protected List<Advisor> findCandidateAdvisors() {_		Assert.state(this.advisorRetrievalHelper != null, "No BeanFactoryAdvisorRetrievalHelper available")__		return this.advisorRetrievalHelper.findAdvisorBeans()__	};find,all,candidate,advisors,to,use,in,auto,proxying,return,the,list,of,candidate,advisors;protected,list,advisor,find,candidate,advisors,assert,state,this,advisor,retrieval,helper,null,no,bean,factory,advisor,retrieval,helper,available,return,this,advisor,retrieval,helper,find,advisor,beans
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findCandidateAdvisors();1522580239;Find all candidate Advisors to use in auto-proxying._@return the List of candidate Advisors;protected List<Advisor> findCandidateAdvisors() {_		Assert.state(this.advisorRetrievalHelper != null, "No BeanFactoryAdvisorRetrievalHelper available")__		return this.advisorRetrievalHelper.findAdvisorBeans()__	};find,all,candidate,advisors,to,use,in,auto,proxying,return,the,list,of,candidate,advisors;protected,list,advisor,find,candidate,advisors,assert,state,this,advisor,retrieval,helper,null,no,bean,factory,advisor,retrieval,helper,available,return,this,advisor,retrieval,helper,find,advisor,beans
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findCandidateAdvisors();1530174524;Find all candidate Advisors to use in auto-proxying._@return the List of candidate Advisors;protected List<Advisor> findCandidateAdvisors() {_		Assert.state(this.advisorRetrievalHelper != null, "No BeanFactoryAdvisorRetrievalHelper available")__		return this.advisorRetrievalHelper.findAdvisorBeans()__	};find,all,candidate,advisors,to,use,in,auto,proxying,return,the,list,of,candidate,advisors;protected,list,advisor,find,candidate,advisors,assert,state,this,advisor,retrieval,helper,null,no,bean,factory,advisor,retrieval,helper,available,return,this,advisor,retrieval,helper,find,advisor,beans
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findCandidateAdvisors();1551199835;Find all candidate Advisors to use in auto-proxying._@return the List of candidate Advisors;protected List<Advisor> findCandidateAdvisors() {_		Assert.state(this.advisorRetrievalHelper != null, "No BeanFactoryAdvisorRetrievalHelper available")__		return this.advisorRetrievalHelper.findAdvisorBeans()__	};find,all,candidate,advisors,to,use,in,auto,proxying,return,the,list,of,candidate,advisors;protected,list,advisor,find,candidate,advisors,assert,state,this,advisor,retrieval,helper,null,no,bean,factory,advisor,retrieval,helper,available,return,this,advisor,retrieval,helper,find,advisor,beans
AbstractAdvisorAutoProxyCreator -> @Override 	protected boolean advisorsPreFiltered();1328020251;This auto-proxy creator always returns pre-filtered Advisors.;@Override_	protected boolean advisorsPreFiltered() {_		return true__	};this,auto,proxy,creator,always,returns,pre,filtered,advisors;override,protected,boolean,advisors,pre,filtered,return,true
AbstractAdvisorAutoProxyCreator -> @Override 	protected boolean advisorsPreFiltered();1356735495;This auto-proxy creator always returns pre-filtered Advisors.;@Override_	protected boolean advisorsPreFiltered() {_		return true__	};this,auto,proxy,creator,always,returns,pre,filtered,advisors;override,protected,boolean,advisors,pre,filtered,return,true
AbstractAdvisorAutoProxyCreator -> @Override 	protected boolean advisorsPreFiltered();1385412762;This auto-proxy creator always returns pre-filtered Advisors.;@Override_	protected boolean advisorsPreFiltered() {_		return true__	};this,auto,proxy,creator,always,returns,pre,filtered,advisors;override,protected,boolean,advisors,pre,filtered,return,true
AbstractAdvisorAutoProxyCreator -> @Override 	protected boolean advisorsPreFiltered();1426267113;This auto-proxy creator always returns pre-filtered Advisors.;@Override_	protected boolean advisorsPreFiltered() {_		return true__	};this,auto,proxy,creator,always,returns,pre,filtered,advisors;override,protected,boolean,advisors,pre,filtered,return,true
AbstractAdvisorAutoProxyCreator -> @Override 	protected boolean advisorsPreFiltered();1485810955;This auto-proxy creator always returns pre-filtered Advisors.;@Override_	protected boolean advisorsPreFiltered() {_		return true__	};this,auto,proxy,creator,always,returns,pre,filtered,advisors;override,protected,boolean,advisors,pre,filtered,return,true
AbstractAdvisorAutoProxyCreator -> @Override 	protected boolean advisorsPreFiltered();1496242568;This auto-proxy creator always returns pre-filtered Advisors.;@Override_	protected boolean advisorsPreFiltered() {_		return true__	};this,auto,proxy,creator,always,returns,pre,filtered,advisors;override,protected,boolean,advisors,pre,filtered,return,true
AbstractAdvisorAutoProxyCreator -> @Override 	protected boolean advisorsPreFiltered();1500495740;This auto-proxy creator always returns pre-filtered Advisors.;@Override_	protected boolean advisorsPreFiltered() {_		return true__	};this,auto,proxy,creator,always,returns,pre,filtered,advisors;override,protected,boolean,advisors,pre,filtered,return,true
AbstractAdvisorAutoProxyCreator -> @Override 	protected boolean advisorsPreFiltered();1522580239;This auto-proxy creator always returns pre-filtered Advisors.;@Override_	protected boolean advisorsPreFiltered() {_		return true__	};this,auto,proxy,creator,always,returns,pre,filtered,advisors;override,protected,boolean,advisors,pre,filtered,return,true
AbstractAdvisorAutoProxyCreator -> @Override 	protected boolean advisorsPreFiltered();1530174524;This auto-proxy creator always returns pre-filtered Advisors.;@Override_	protected boolean advisorsPreFiltered() {_		return true__	};this,auto,proxy,creator,always,returns,pre,filtered,advisors;override,protected,boolean,advisors,pre,filtered,return,true
AbstractAdvisorAutoProxyCreator -> @Override 	protected boolean advisorsPreFiltered();1551199835;This auto-proxy creator always returns pre-filtered Advisors.;@Override_	protected boolean advisorsPreFiltered() {_		return true__	};this,auto,proxy,creator,always,returns,pre,filtered,advisors;override,protected,boolean,advisors,pre,filtered,return,true
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> sortAdvisors(List<Advisor> advisors);1328020251;Sort advisors based on ordering. Subclasses may choose to override this_method to customize the sorting strategy._@param advisors the source List of Advisors_@return the sorted List of Advisors_@see org.springframework.core.Ordered_@see org.springframework.core.OrderComparator;protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		OrderComparator.sort(advisors)__		return advisors__	};sort,advisors,based,on,ordering,subclasses,may,choose,to,override,this,method,to,customize,the,sorting,strategy,param,advisors,the,source,list,of,advisors,return,the,sorted,list,of,advisors,see,org,springframework,core,ordered,see,org,springframework,core,order,comparator;protected,list,advisor,sort,advisors,list,advisor,advisors,order,comparator,sort,advisors,return,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> sortAdvisors(List<Advisor> advisors);1356735495;Sort advisors based on ordering. Subclasses may choose to override this_method to customize the sorting strategy._@param advisors the source List of Advisors_@return the sorted List of Advisors_@see org.springframework.core.Ordered_@see org.springframework.core.OrderComparator;protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		OrderComparator.sort(advisors)__		return advisors__	};sort,advisors,based,on,ordering,subclasses,may,choose,to,override,this,method,to,customize,the,sorting,strategy,param,advisors,the,source,list,of,advisors,return,the,sorted,list,of,advisors,see,org,springframework,core,ordered,see,org,springframework,core,order,comparator;protected,list,advisor,sort,advisors,list,advisor,advisors,order,comparator,sort,advisors,return,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> sortAdvisors(List<Advisor> advisors);1385412762;Sort advisors based on ordering. Subclasses may choose to override this_method to customize the sorting strategy._@param advisors the source List of Advisors_@return the sorted List of Advisors_@see org.springframework.core.Ordered_@see org.springframework.core.OrderComparator;protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		OrderComparator.sort(advisors)__		return advisors__	};sort,advisors,based,on,ordering,subclasses,may,choose,to,override,this,method,to,customize,the,sorting,strategy,param,advisors,the,source,list,of,advisors,return,the,sorted,list,of,advisors,see,org,springframework,core,ordered,see,org,springframework,core,order,comparator;protected,list,advisor,sort,advisors,list,advisor,advisors,order,comparator,sort,advisors,return,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> sortAdvisors(List<Advisor> advisors);1426267113;Sort advisors based on ordering. Subclasses may choose to override this_method to customize the sorting strategy._@param advisors the source List of Advisors_@return the sorted List of Advisors_@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order_@see org.springframework.core.annotation.AnnotationAwareOrderComparator;protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		AnnotationAwareOrderComparator.sort(advisors)__		return advisors__	};sort,advisors,based,on,ordering,subclasses,may,choose,to,override,this,method,to,customize,the,sorting,strategy,param,advisors,the,source,list,of,advisors,return,the,sorted,list,of,advisors,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order,see,org,springframework,core,annotation,annotation,aware,order,comparator;protected,list,advisor,sort,advisors,list,advisor,advisors,annotation,aware,order,comparator,sort,advisors,return,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> sortAdvisors(List<Advisor> advisors);1485810955;Sort advisors based on ordering. Subclasses may choose to override this_method to customize the sorting strategy._@param advisors the source List of Advisors_@return the sorted List of Advisors_@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order_@see org.springframework.core.annotation.AnnotationAwareOrderComparator;protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		AnnotationAwareOrderComparator.sort(advisors)__		return advisors__	};sort,advisors,based,on,ordering,subclasses,may,choose,to,override,this,method,to,customize,the,sorting,strategy,param,advisors,the,source,list,of,advisors,return,the,sorted,list,of,advisors,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order,see,org,springframework,core,annotation,annotation,aware,order,comparator;protected,list,advisor,sort,advisors,list,advisor,advisors,annotation,aware,order,comparator,sort,advisors,return,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> sortAdvisors(List<Advisor> advisors);1496242568;Sort advisors based on ordering. Subclasses may choose to override this_method to customize the sorting strategy._@param advisors the source List of Advisors_@return the sorted List of Advisors_@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order_@see org.springframework.core.annotation.AnnotationAwareOrderComparator;protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		AnnotationAwareOrderComparator.sort(advisors)__		return advisors__	};sort,advisors,based,on,ordering,subclasses,may,choose,to,override,this,method,to,customize,the,sorting,strategy,param,advisors,the,source,list,of,advisors,return,the,sorted,list,of,advisors,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order,see,org,springframework,core,annotation,annotation,aware,order,comparator;protected,list,advisor,sort,advisors,list,advisor,advisors,annotation,aware,order,comparator,sort,advisors,return,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> sortAdvisors(List<Advisor> advisors);1500495740;Sort advisors based on ordering. Subclasses may choose to override this_method to customize the sorting strategy._@param advisors the source List of Advisors_@return the sorted List of Advisors_@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order_@see org.springframework.core.annotation.AnnotationAwareOrderComparator;protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		AnnotationAwareOrderComparator.sort(advisors)__		return advisors__	};sort,advisors,based,on,ordering,subclasses,may,choose,to,override,this,method,to,customize,the,sorting,strategy,param,advisors,the,source,list,of,advisors,return,the,sorted,list,of,advisors,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order,see,org,springframework,core,annotation,annotation,aware,order,comparator;protected,list,advisor,sort,advisors,list,advisor,advisors,annotation,aware,order,comparator,sort,advisors,return,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> sortAdvisors(List<Advisor> advisors);1522580239;Sort advisors based on ordering. Subclasses may choose to override this_method to customize the sorting strategy._@param advisors the source List of Advisors_@return the sorted List of Advisors_@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order_@see org.springframework.core.annotation.AnnotationAwareOrderComparator;protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		AnnotationAwareOrderComparator.sort(advisors)__		return advisors__	};sort,advisors,based,on,ordering,subclasses,may,choose,to,override,this,method,to,customize,the,sorting,strategy,param,advisors,the,source,list,of,advisors,return,the,sorted,list,of,advisors,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order,see,org,springframework,core,annotation,annotation,aware,order,comparator;protected,list,advisor,sort,advisors,list,advisor,advisors,annotation,aware,order,comparator,sort,advisors,return,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> sortAdvisors(List<Advisor> advisors);1530174524;Sort advisors based on ordering. Subclasses may choose to override this_method to customize the sorting strategy._@param advisors the source List of Advisors_@return the sorted List of Advisors_@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order_@see org.springframework.core.annotation.AnnotationAwareOrderComparator;protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		AnnotationAwareOrderComparator.sort(advisors)__		return advisors__	};sort,advisors,based,on,ordering,subclasses,may,choose,to,override,this,method,to,customize,the,sorting,strategy,param,advisors,the,source,list,of,advisors,return,the,sorted,list,of,advisors,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order,see,org,springframework,core,annotation,annotation,aware,order,comparator;protected,list,advisor,sort,advisors,list,advisor,advisors,annotation,aware,order,comparator,sort,advisors,return,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> sortAdvisors(List<Advisor> advisors);1551199835;Sort advisors based on ordering. Subclasses may choose to override this_method to customize the sorting strategy._@param advisors the source List of Advisors_@return the sorted List of Advisors_@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order_@see org.springframework.core.annotation.AnnotationAwareOrderComparator;protected List<Advisor> sortAdvisors(List<Advisor> advisors) {_		AnnotationAwareOrderComparator.sort(advisors)__		return advisors__	};sort,advisors,based,on,ordering,subclasses,may,choose,to,override,this,method,to,customize,the,sorting,strategy,param,advisors,the,source,list,of,advisors,return,the,sorted,list,of,advisors,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order,see,org,springframework,core,annotation,annotation,aware,order,comparator;protected,list,advisor,sort,advisors,list,advisor,advisors,annotation,aware,order,comparator,sort,advisors,return,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findAdvisorsThatCanApply( 			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName);1385412762;Search the given candidate Advisors to find all Advisors that_can apply to the specified bean._@param candidateAdvisors the candidate Advisors_@param beanClass the target's bean class_@param beanName the target's bean name_@return the List of applicable Advisors_@see ProxyCreationContext#getCurrentProxiedBeanName();protected List<Advisor> findAdvisorsThatCanApply(_			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName) {__		ProxyCreationContext.setCurrentProxiedBeanName(beanName)__		try {_			return AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass)__		}_		finally {_			ProxyCreationContext.setCurrentProxiedBeanName(null)__		}_	};search,the,given,candidate,advisors,to,find,all,advisors,that,can,apply,to,the,specified,bean,param,candidate,advisors,the,candidate,advisors,param,bean,class,the,target,s,bean,class,param,bean,name,the,target,s,bean,name,return,the,list,of,applicable,advisors,see,proxy,creation,context,get,current,proxied,bean,name;protected,list,advisor,find,advisors,that,can,apply,list,advisor,candidate,advisors,class,bean,class,string,bean,name,proxy,creation,context,set,current,proxied,bean,name,bean,name,try,return,aop,utils,find,advisors,that,can,apply,candidate,advisors,bean,class,finally,proxy,creation,context,set,current,proxied,bean,name,null
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findAdvisorsThatCanApply( 			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName);1426267113;Search the given candidate Advisors to find all Advisors that_can apply to the specified bean._@param candidateAdvisors the candidate Advisors_@param beanClass the target's bean class_@param beanName the target's bean name_@return the List of applicable Advisors_@see ProxyCreationContext#getCurrentProxiedBeanName();protected List<Advisor> findAdvisorsThatCanApply(_			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName) {__		ProxyCreationContext.setCurrentProxiedBeanName(beanName)__		try {_			return AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass)__		}_		finally {_			ProxyCreationContext.setCurrentProxiedBeanName(null)__		}_	};search,the,given,candidate,advisors,to,find,all,advisors,that,can,apply,to,the,specified,bean,param,candidate,advisors,the,candidate,advisors,param,bean,class,the,target,s,bean,class,param,bean,name,the,target,s,bean,name,return,the,list,of,applicable,advisors,see,proxy,creation,context,get,current,proxied,bean,name;protected,list,advisor,find,advisors,that,can,apply,list,advisor,candidate,advisors,class,bean,class,string,bean,name,proxy,creation,context,set,current,proxied,bean,name,bean,name,try,return,aop,utils,find,advisors,that,can,apply,candidate,advisors,bean,class,finally,proxy,creation,context,set,current,proxied,bean,name,null
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findAdvisorsThatCanApply( 			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName);1485810955;Search the given candidate Advisors to find all Advisors that_can apply to the specified bean._@param candidateAdvisors the candidate Advisors_@param beanClass the target's bean class_@param beanName the target's bean name_@return the List of applicable Advisors_@see ProxyCreationContext#getCurrentProxiedBeanName();protected List<Advisor> findAdvisorsThatCanApply(_			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName) {__		ProxyCreationContext.setCurrentProxiedBeanName(beanName)__		try {_			return AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass)__		}_		finally {_			ProxyCreationContext.setCurrentProxiedBeanName(null)__		}_	};search,the,given,candidate,advisors,to,find,all,advisors,that,can,apply,to,the,specified,bean,param,candidate,advisors,the,candidate,advisors,param,bean,class,the,target,s,bean,class,param,bean,name,the,target,s,bean,name,return,the,list,of,applicable,advisors,see,proxy,creation,context,get,current,proxied,bean,name;protected,list,advisor,find,advisors,that,can,apply,list,advisor,candidate,advisors,class,bean,class,string,bean,name,proxy,creation,context,set,current,proxied,bean,name,bean,name,try,return,aop,utils,find,advisors,that,can,apply,candidate,advisors,bean,class,finally,proxy,creation,context,set,current,proxied,bean,name,null
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findAdvisorsThatCanApply( 			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName);1496242568;Search the given candidate Advisors to find all Advisors that_can apply to the specified bean._@param candidateAdvisors the candidate Advisors_@param beanClass the target's bean class_@param beanName the target's bean name_@return the List of applicable Advisors_@see ProxyCreationContext#getCurrentProxiedBeanName();protected List<Advisor> findAdvisorsThatCanApply(_			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName) {__		ProxyCreationContext.setCurrentProxiedBeanName(beanName)__		try {_			return AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass)__		}_		finally {_			ProxyCreationContext.setCurrentProxiedBeanName(null)__		}_	};search,the,given,candidate,advisors,to,find,all,advisors,that,can,apply,to,the,specified,bean,param,candidate,advisors,the,candidate,advisors,param,bean,class,the,target,s,bean,class,param,bean,name,the,target,s,bean,name,return,the,list,of,applicable,advisors,see,proxy,creation,context,get,current,proxied,bean,name;protected,list,advisor,find,advisors,that,can,apply,list,advisor,candidate,advisors,class,bean,class,string,bean,name,proxy,creation,context,set,current,proxied,bean,name,bean,name,try,return,aop,utils,find,advisors,that,can,apply,candidate,advisors,bean,class,finally,proxy,creation,context,set,current,proxied,bean,name,null
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findAdvisorsThatCanApply( 			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName);1500495740;Search the given candidate Advisors to find all Advisors that_can apply to the specified bean._@param candidateAdvisors the candidate Advisors_@param beanClass the target's bean class_@param beanName the target's bean name_@return the List of applicable Advisors_@see ProxyCreationContext#getCurrentProxiedBeanName();protected List<Advisor> findAdvisorsThatCanApply(_			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName) {__		ProxyCreationContext.setCurrentProxiedBeanName(beanName)__		try {_			return AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass)__		}_		finally {_			ProxyCreationContext.setCurrentProxiedBeanName(null)__		}_	};search,the,given,candidate,advisors,to,find,all,advisors,that,can,apply,to,the,specified,bean,param,candidate,advisors,the,candidate,advisors,param,bean,class,the,target,s,bean,class,param,bean,name,the,target,s,bean,name,return,the,list,of,applicable,advisors,see,proxy,creation,context,get,current,proxied,bean,name;protected,list,advisor,find,advisors,that,can,apply,list,advisor,candidate,advisors,class,bean,class,string,bean,name,proxy,creation,context,set,current,proxied,bean,name,bean,name,try,return,aop,utils,find,advisors,that,can,apply,candidate,advisors,bean,class,finally,proxy,creation,context,set,current,proxied,bean,name,null
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findAdvisorsThatCanApply( 			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName);1522580239;Search the given candidate Advisors to find all Advisors that_can apply to the specified bean._@param candidateAdvisors the candidate Advisors_@param beanClass the target's bean class_@param beanName the target's bean name_@return the List of applicable Advisors_@see ProxyCreationContext#getCurrentProxiedBeanName();protected List<Advisor> findAdvisorsThatCanApply(_			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName) {__		ProxyCreationContext.setCurrentProxiedBeanName(beanName)__		try {_			return AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass)__		}_		finally {_			ProxyCreationContext.setCurrentProxiedBeanName(null)__		}_	};search,the,given,candidate,advisors,to,find,all,advisors,that,can,apply,to,the,specified,bean,param,candidate,advisors,the,candidate,advisors,param,bean,class,the,target,s,bean,class,param,bean,name,the,target,s,bean,name,return,the,list,of,applicable,advisors,see,proxy,creation,context,get,current,proxied,bean,name;protected,list,advisor,find,advisors,that,can,apply,list,advisor,candidate,advisors,class,bean,class,string,bean,name,proxy,creation,context,set,current,proxied,bean,name,bean,name,try,return,aop,utils,find,advisors,that,can,apply,candidate,advisors,bean,class,finally,proxy,creation,context,set,current,proxied,bean,name,null
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findAdvisorsThatCanApply( 			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName);1530174524;Search the given candidate Advisors to find all Advisors that_can apply to the specified bean._@param candidateAdvisors the candidate Advisors_@param beanClass the target's bean class_@param beanName the target's bean name_@return the List of applicable Advisors_@see ProxyCreationContext#getCurrentProxiedBeanName();protected List<Advisor> findAdvisorsThatCanApply(_			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName) {__		ProxyCreationContext.setCurrentProxiedBeanName(beanName)__		try {_			return AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass)__		}_		finally {_			ProxyCreationContext.setCurrentProxiedBeanName(null)__		}_	};search,the,given,candidate,advisors,to,find,all,advisors,that,can,apply,to,the,specified,bean,param,candidate,advisors,the,candidate,advisors,param,bean,class,the,target,s,bean,class,param,bean,name,the,target,s,bean,name,return,the,list,of,applicable,advisors,see,proxy,creation,context,get,current,proxied,bean,name;protected,list,advisor,find,advisors,that,can,apply,list,advisor,candidate,advisors,class,bean,class,string,bean,name,proxy,creation,context,set,current,proxied,bean,name,bean,name,try,return,aop,utils,find,advisors,that,can,apply,candidate,advisors,bean,class,finally,proxy,creation,context,set,current,proxied,bean,name,null
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findAdvisorsThatCanApply( 			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName);1551199835;Search the given candidate Advisors to find all Advisors that_can apply to the specified bean._@param candidateAdvisors the candidate Advisors_@param beanClass the target's bean class_@param beanName the target's bean name_@return the List of applicable Advisors_@see ProxyCreationContext#getCurrentProxiedBeanName();protected List<Advisor> findAdvisorsThatCanApply(_			List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName) {__		ProxyCreationContext.setCurrentProxiedBeanName(beanName)__		try {_			return AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass)__		}_		finally {_			ProxyCreationContext.setCurrentProxiedBeanName(null)__		}_	};search,the,given,candidate,advisors,to,find,all,advisors,that,can,apply,to,the,specified,bean,param,candidate,advisors,the,candidate,advisors,param,bean,class,the,target,s,bean,class,param,bean,name,the,target,s,bean,name,return,the,list,of,applicable,advisors,see,proxy,creation,context,get,current,proxied,bean,name;protected,list,advisor,find,advisors,that,can,apply,list,advisor,candidate,advisors,class,bean,class,string,bean,name,proxy,creation,context,set,current,proxied,bean,name,bean,name,try,return,aop,utils,find,advisors,that,can,apply,candidate,advisors,bean,class,finally,proxy,creation,context,set,current,proxied,bean,name,null
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findEligibleAdvisors(Class beanClass, String beanName);1328020251;Find all eligible Advisors for auto-proxying this class._@param beanClass the clazz to find advisors for_@param beanName the name of the currently proxied bean_@return the empty List, not <code>null</code>,_if there are no pointcuts or interceptors_@see #findCandidateAdvisors_@see #sortAdvisors_@see #extendAdvisors;protected List<Advisor> findEligibleAdvisors(Class beanClass, String beanName) {_		List<Advisor> candidateAdvisors = findCandidateAdvisors()__		List<Advisor> eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName)__		extendAdvisors(eligibleAdvisors)__		if (!eligibleAdvisors.isEmpty()) {_			eligibleAdvisors = sortAdvisors(eligibleAdvisors)__		}_		return eligibleAdvisors__	};find,all,eligible,advisors,for,auto,proxying,this,class,param,bean,class,the,clazz,to,find,advisors,for,param,bean,name,the,name,of,the,currently,proxied,bean,return,the,empty,list,not,code,null,code,if,there,are,no,pointcuts,or,interceptors,see,find,candidate,advisors,see,sort,advisors,see,extend,advisors;protected,list,advisor,find,eligible,advisors,class,bean,class,string,bean,name,list,advisor,candidate,advisors,find,candidate,advisors,list,advisor,eligible,advisors,find,advisors,that,can,apply,candidate,advisors,bean,class,bean,name,extend,advisors,eligible,advisors,if,eligible,advisors,is,empty,eligible,advisors,sort,advisors,eligible,advisors,return,eligible,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findEligibleAdvisors(Class beanClass, String beanName);1356735495;Find all eligible Advisors for auto-proxying this class._@param beanClass the clazz to find advisors for_@param beanName the name of the currently proxied bean_@return the empty List, not {@code null},_if there are no pointcuts or interceptors_@see #findCandidateAdvisors_@see #sortAdvisors_@see #extendAdvisors;protected List<Advisor> findEligibleAdvisors(Class beanClass, String beanName) {_		List<Advisor> candidateAdvisors = findCandidateAdvisors()__		List<Advisor> eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName)__		extendAdvisors(eligibleAdvisors)__		if (!eligibleAdvisors.isEmpty()) {_			eligibleAdvisors = sortAdvisors(eligibleAdvisors)__		}_		return eligibleAdvisors__	};find,all,eligible,advisors,for,auto,proxying,this,class,param,bean,class,the,clazz,to,find,advisors,for,param,bean,name,the,name,of,the,currently,proxied,bean,return,the,empty,list,not,code,null,if,there,are,no,pointcuts,or,interceptors,see,find,candidate,advisors,see,sort,advisors,see,extend,advisors;protected,list,advisor,find,eligible,advisors,class,bean,class,string,bean,name,list,advisor,candidate,advisors,find,candidate,advisors,list,advisor,eligible,advisors,find,advisors,that,can,apply,candidate,advisors,bean,class,bean,name,extend,advisors,eligible,advisors,if,eligible,advisors,is,empty,eligible,advisors,sort,advisors,eligible,advisors,return,eligible,advisors
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findAdvisorsThatCanApply( 			List<Advisor> candidateAdvisors, Class beanClass, String beanName);1328020251;Search the given candidate Advisors to find all Advisors that_can apply to the specified bean._@param candidateAdvisors the candidate Advisors_@param beanClass the target's bean class_@param beanName the target's bean name_@return the List of applicable Advisors_@see ProxyCreationContext#getCurrentProxiedBeanName();protected List<Advisor> findAdvisorsThatCanApply(_			List<Advisor> candidateAdvisors, Class beanClass, String beanName) {__		ProxyCreationContext.setCurrentProxiedBeanName(beanName)__		try {_			return AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass)__		}_		finally {_			ProxyCreationContext.setCurrentProxiedBeanName(null)__		}_	};search,the,given,candidate,advisors,to,find,all,advisors,that,can,apply,to,the,specified,bean,param,candidate,advisors,the,candidate,advisors,param,bean,class,the,target,s,bean,class,param,bean,name,the,target,s,bean,name,return,the,list,of,applicable,advisors,see,proxy,creation,context,get,current,proxied,bean,name;protected,list,advisor,find,advisors,that,can,apply,list,advisor,candidate,advisors,class,bean,class,string,bean,name,proxy,creation,context,set,current,proxied,bean,name,bean,name,try,return,aop,utils,find,advisors,that,can,apply,candidate,advisors,bean,class,finally,proxy,creation,context,set,current,proxied,bean,name,null
AbstractAdvisorAutoProxyCreator -> protected List<Advisor> findAdvisorsThatCanApply( 			List<Advisor> candidateAdvisors, Class beanClass, String beanName);1356735495;Search the given candidate Advisors to find all Advisors that_can apply to the specified bean._@param candidateAdvisors the candidate Advisors_@param beanClass the target's bean class_@param beanName the target's bean name_@return the List of applicable Advisors_@see ProxyCreationContext#getCurrentProxiedBeanName();protected List<Advisor> findAdvisorsThatCanApply(_			List<Advisor> candidateAdvisors, Class beanClass, String beanName) {__		ProxyCreationContext.setCurrentProxiedBeanName(beanName)__		try {_			return AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass)__		}_		finally {_			ProxyCreationContext.setCurrentProxiedBeanName(null)__		}_	};search,the,given,candidate,advisors,to,find,all,advisors,that,can,apply,to,the,specified,bean,param,candidate,advisors,the,candidate,advisors,param,bean,class,the,target,s,bean,class,param,bean,name,the,target,s,bean,name,return,the,list,of,applicable,advisors,see,proxy,creation,context,get,current,proxied,bean,name;protected,list,advisor,find,advisors,that,can,apply,list,advisor,candidate,advisors,class,bean,class,string,bean,name,proxy,creation,context,set,current,proxied,bean,name,bean,name,try,return,aop,utils,find,advisors,that,can,apply,candidate,advisors,bean,class,finally,proxy,creation,context,set,current,proxied,bean,name,null
