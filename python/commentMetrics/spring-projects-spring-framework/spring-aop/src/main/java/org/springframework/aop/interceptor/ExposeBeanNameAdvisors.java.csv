commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Find the bean name for the current invocation. Assumes that an ExposeBeanNameAdvisor  * has been included in the interceptor chain, and that the invocation is exposed  * with ExposeInvocationInterceptor.  * @return the bean name (never {@code null})  * @throws IllegalStateException if the bean name has not been exposed  */ ;/**  * Find the bean name for the current invocation. Assumes that an ExposeBeanNameAdvisor  * has been included in the interceptor chain, and that the invocation is exposed  * with ExposeInvocationInterceptor.  * @return the bean name (never {@code null})  * @throws IllegalStateException if the bean name has not been exposed  */ public static String getBeanName() throws IllegalStateException {     return getBeanName(ExposeInvocationInterceptor.currentInvocation()). }
true;public,static;1;11;/**  * Find the bean name for the given invocation. Assumes that an ExposeBeanNameAdvisor  * has been included in the interceptor chain.  * @param mi the MethodInvocation that should contain the bean name as an attribute  * @return the bean name (never {@code null})  * @throws IllegalStateException if the bean name has not been exposed  */ ;/**  * Find the bean name for the given invocation. Assumes that an ExposeBeanNameAdvisor  * has been included in the interceptor chain.  * @param mi the MethodInvocation that should contain the bean name as an attribute  * @return the bean name (never {@code null})  * @throws IllegalStateException if the bean name has not been exposed  */ public static String getBeanName(MethodInvocation mi) throws IllegalStateException {     if (!(mi instanceof ProxyMethodInvocation)) {         throw new IllegalArgumentException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi).     }     ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi.     String beanName = (String) pmi.getUserAttribute(BEAN_NAME_ATTRIBUTE).     if (beanName == null) {         throw new IllegalStateException("Cannot get bean name. not set on MethodInvocation: " + mi).     }     return beanName. }
true;public,static;1;3;/**  * Create a new advisor that will expose the given bean name,  * with no introduction.  * @param beanName bean name to expose  */ ;/**  * Create a new advisor that will expose the given bean name,  * with no introduction.  * @param beanName bean name to expose  */ public static Advisor createAdvisorWithoutIntroduction(String beanName) {     return new DefaultPointcutAdvisor(new ExposeBeanNameInterceptor(beanName)). }
true;public,static;1;3;/**  * Create a new advisor that will expose the given bean name, introducing  * the NamedBean interface to make the bean name accessible without forcing  * the target object to be aware of this Spring IoC concept.  * @param beanName the bean name to expose  */ ;/**  * Create a new advisor that will expose the given bean name, introducing  * the NamedBean interface to make the bean name accessible without forcing  * the target object to be aware of this Spring IoC concept.  * @param beanName the bean name to expose  */ public static Advisor createAdvisorIntroducingNamedBean(String beanName) {     return new DefaultIntroductionAdvisor(new ExposeBeanNameIntroduction(beanName)). }
false;public;1;9;;@Override public Object invoke(MethodInvocation mi) throws Throwable {     if (!(mi instanceof ProxyMethodInvocation)) {         throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi).     }     ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi.     pmi.setUserAttribute(BEAN_NAME_ATTRIBUTE, this.beanName).     return mi.proceed(). }
false;public;1;9;;@Override public Object invoke(MethodInvocation mi) throws Throwable {     if (!(mi instanceof ProxyMethodInvocation)) {         throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi).     }     ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi.     pmi.setUserAttribute(BEAN_NAME_ATTRIBUTE, this.beanName).     return super.invoke(mi). }
false;public;0;4;;@Override public String getBeanName() {     return this.beanName. }
