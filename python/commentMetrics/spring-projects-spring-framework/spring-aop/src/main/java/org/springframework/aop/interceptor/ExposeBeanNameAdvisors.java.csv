# id;timestamp;commentText;codeText;commentWords;codeWords
ExposeBeanNameAdvisors -> public static Advisor createAdvisorIntroducingNamedBean(String beanName);1328020251;Create a new advisor that will expose the given bean name, introducing_the NamedBean interface to make the bean name accessible without forcing_the target object to be aware of this Spring IoC concept._@param beanName the bean name to expose;public static Advisor createAdvisorIntroducingNamedBean(String beanName) {_		return new DefaultIntroductionAdvisor(new ExposeBeanNameIntroduction(beanName))__	};create,a,new,advisor,that,will,expose,the,given,bean,name,introducing,the,named,bean,interface,to,make,the,bean,name,accessible,without,forcing,the,target,object,to,be,aware,of,this,spring,io,c,concept,param,bean,name,the,bean,name,to,expose;public,static,advisor,create,advisor,introducing,named,bean,string,bean,name,return,new,default,introduction,advisor,new,expose,bean,name,introduction,bean,name
ExposeBeanNameAdvisors -> public static Advisor createAdvisorIntroducingNamedBean(String beanName);1356735495;Create a new advisor that will expose the given bean name, introducing_the NamedBean interface to make the bean name accessible without forcing_the target object to be aware of this Spring IoC concept._@param beanName the bean name to expose;public static Advisor createAdvisorIntroducingNamedBean(String beanName) {_		return new DefaultIntroductionAdvisor(new ExposeBeanNameIntroduction(beanName))__	};create,a,new,advisor,that,will,expose,the,given,bean,name,introducing,the,named,bean,interface,to,make,the,bean,name,accessible,without,forcing,the,target,object,to,be,aware,of,this,spring,io,c,concept,param,bean,name,the,bean,name,to,expose;public,static,advisor,create,advisor,introducing,named,bean,string,bean,name,return,new,default,introduction,advisor,new,expose,bean,name,introduction,bean,name
ExposeBeanNameAdvisors -> public static Advisor createAdvisorIntroducingNamedBean(String beanName);1357119239;Create a new advisor that will expose the given bean name, introducing_the NamedBean interface to make the bean name accessible without forcing_the target object to be aware of this Spring IoC concept._@param beanName the bean name to expose;public static Advisor createAdvisorIntroducingNamedBean(String beanName) {_		return new DefaultIntroductionAdvisor(new ExposeBeanNameIntroduction(beanName))__	};create,a,new,advisor,that,will,expose,the,given,bean,name,introducing,the,named,bean,interface,to,make,the,bean,name,accessible,without,forcing,the,target,object,to,be,aware,of,this,spring,io,c,concept,param,bean,name,the,bean,name,to,expose;public,static,advisor,create,advisor,introducing,named,bean,string,bean,name,return,new,default,introduction,advisor,new,expose,bean,name,introduction,bean,name
ExposeBeanNameAdvisors -> public static Advisor createAdvisorIntroducingNamedBean(String beanName);1368482696;Create a new advisor that will expose the given bean name, introducing_the NamedBean interface to make the bean name accessible without forcing_the target object to be aware of this Spring IoC concept._@param beanName the bean name to expose;public static Advisor createAdvisorIntroducingNamedBean(String beanName) {_		return new DefaultIntroductionAdvisor(new ExposeBeanNameIntroduction(beanName))__	};create,a,new,advisor,that,will,expose,the,given,bean,name,introducing,the,named,bean,interface,to,make,the,bean,name,accessible,without,forcing,the,target,object,to,be,aware,of,this,spring,io,c,concept,param,bean,name,the,bean,name,to,expose;public,static,advisor,create,advisor,introducing,named,bean,string,bean,name,return,new,default,introduction,advisor,new,expose,bean,name,introduction,bean,name
ExposeBeanNameAdvisors -> public static Advisor createAdvisorIntroducingNamedBean(String beanName);1530174524;Create a new advisor that will expose the given bean name, introducing_the NamedBean interface to make the bean name accessible without forcing_the target object to be aware of this Spring IoC concept._@param beanName the bean name to expose;public static Advisor createAdvisorIntroducingNamedBean(String beanName) {_		return new DefaultIntroductionAdvisor(new ExposeBeanNameIntroduction(beanName))__	};create,a,new,advisor,that,will,expose,the,given,bean,name,introducing,the,named,bean,interface,to,make,the,bean,name,accessible,without,forcing,the,target,object,to,be,aware,of,this,spring,io,c,concept,param,bean,name,the,bean,name,to,expose;public,static,advisor,create,advisor,introducing,named,bean,string,bean,name,return,new,default,introduction,advisor,new,expose,bean,name,introduction,bean,name
ExposeBeanNameAdvisors -> public static Advisor createAdvisorWithoutIntroduction(String beanName);1328020251;Create a new advisor that will expose the given bean name,_with no introduction_@param beanName bean name to expose;public static Advisor createAdvisorWithoutIntroduction(String beanName) {_		return new DefaultPointcutAdvisor(new ExposeBeanNameInterceptor(beanName))__	};create,a,new,advisor,that,will,expose,the,given,bean,name,with,no,introduction,param,bean,name,bean,name,to,expose;public,static,advisor,create,advisor,without,introduction,string,bean,name,return,new,default,pointcut,advisor,new,expose,bean,name,interceptor,bean,name
ExposeBeanNameAdvisors -> public static Advisor createAdvisorWithoutIntroduction(String beanName);1356735495;Create a new advisor that will expose the given bean name,_with no introduction_@param beanName bean name to expose;public static Advisor createAdvisorWithoutIntroduction(String beanName) {_		return new DefaultPointcutAdvisor(new ExposeBeanNameInterceptor(beanName))__	};create,a,new,advisor,that,will,expose,the,given,bean,name,with,no,introduction,param,bean,name,bean,name,to,expose;public,static,advisor,create,advisor,without,introduction,string,bean,name,return,new,default,pointcut,advisor,new,expose,bean,name,interceptor,bean,name
ExposeBeanNameAdvisors -> public static Advisor createAdvisorWithoutIntroduction(String beanName);1357119239;Create a new advisor that will expose the given bean name,_with no introduction_@param beanName bean name to expose;public static Advisor createAdvisorWithoutIntroduction(String beanName) {_		return new DefaultPointcutAdvisor(new ExposeBeanNameInterceptor(beanName))__	};create,a,new,advisor,that,will,expose,the,given,bean,name,with,no,introduction,param,bean,name,bean,name,to,expose;public,static,advisor,create,advisor,without,introduction,string,bean,name,return,new,default,pointcut,advisor,new,expose,bean,name,interceptor,bean,name
ExposeBeanNameAdvisors -> public static Advisor createAdvisorWithoutIntroduction(String beanName);1368482696;Create a new advisor that will expose the given bean name,_with no introduction_@param beanName bean name to expose;public static Advisor createAdvisorWithoutIntroduction(String beanName) {_		return new DefaultPointcutAdvisor(new ExposeBeanNameInterceptor(beanName))__	};create,a,new,advisor,that,will,expose,the,given,bean,name,with,no,introduction,param,bean,name,bean,name,to,expose;public,static,advisor,create,advisor,without,introduction,string,bean,name,return,new,default,pointcut,advisor,new,expose,bean,name,interceptor,bean,name
ExposeBeanNameAdvisors -> public static Advisor createAdvisorWithoutIntroduction(String beanName);1530174524;Create a new advisor that will expose the given bean name,_with no introduction._@param beanName bean name to expose;public static Advisor createAdvisorWithoutIntroduction(String beanName) {_		return new DefaultPointcutAdvisor(new ExposeBeanNameInterceptor(beanName))__	};create,a,new,advisor,that,will,expose,the,given,bean,name,with,no,introduction,param,bean,name,bean,name,to,expose;public,static,advisor,create,advisor,without,introduction,string,bean,name,return,new,default,pointcut,advisor,new,expose,bean,name,interceptor,bean,name
ExposeBeanNameAdvisors -> public static String getBeanName() throws IllegalStateException;1328020251;Find the bean name for the current invocation. Assumes that an ExposeBeanNameAdvisor_has been included in the interceptor chain, and that the invocation is exposed_with ExposeInvocationInterceptor._@return the bean name (never <code>null</code>)_@throws IllegalStateException if the bean name has not been exposed;public static String getBeanName() throws IllegalStateException {_		return getBeanName(ExposeInvocationInterceptor.currentInvocation())__	};find,the,bean,name,for,the,current,invocation,assumes,that,an,expose,bean,name,advisor,has,been,included,in,the,interceptor,chain,and,that,the,invocation,is,exposed,with,expose,invocation,interceptor,return,the,bean,name,never,code,null,code,throws,illegal,state,exception,if,the,bean,name,has,not,been,exposed;public,static,string,get,bean,name,throws,illegal,state,exception,return,get,bean,name,expose,invocation,interceptor,current,invocation
ExposeBeanNameAdvisors -> public static String getBeanName() throws IllegalStateException;1356735495;Find the bean name for the current invocation. Assumes that an ExposeBeanNameAdvisor_has been included in the interceptor chain, and that the invocation is exposed_with ExposeInvocationInterceptor._@return the bean name (never {@code null})_@throws IllegalStateException if the bean name has not been exposed;public static String getBeanName() throws IllegalStateException {_		return getBeanName(ExposeInvocationInterceptor.currentInvocation())__	};find,the,bean,name,for,the,current,invocation,assumes,that,an,expose,bean,name,advisor,has,been,included,in,the,interceptor,chain,and,that,the,invocation,is,exposed,with,expose,invocation,interceptor,return,the,bean,name,never,code,null,throws,illegal,state,exception,if,the,bean,name,has,not,been,exposed;public,static,string,get,bean,name,throws,illegal,state,exception,return,get,bean,name,expose,invocation,interceptor,current,invocation
ExposeBeanNameAdvisors -> public static String getBeanName() throws IllegalStateException;1357119239;Find the bean name for the current invocation. Assumes that an ExposeBeanNameAdvisor_has been included in the interceptor chain, and that the invocation is exposed_with ExposeInvocationInterceptor._@return the bean name (never {@code null})_@throws IllegalStateException if the bean name has not been exposed;public static String getBeanName() throws IllegalStateException {_		return getBeanName(ExposeInvocationInterceptor.currentInvocation())__	};find,the,bean,name,for,the,current,invocation,assumes,that,an,expose,bean,name,advisor,has,been,included,in,the,interceptor,chain,and,that,the,invocation,is,exposed,with,expose,invocation,interceptor,return,the,bean,name,never,code,null,throws,illegal,state,exception,if,the,bean,name,has,not,been,exposed;public,static,string,get,bean,name,throws,illegal,state,exception,return,get,bean,name,expose,invocation,interceptor,current,invocation
ExposeBeanNameAdvisors -> public static String getBeanName() throws IllegalStateException;1368482696;Find the bean name for the current invocation. Assumes that an ExposeBeanNameAdvisor_has been included in the interceptor chain, and that the invocation is exposed_with ExposeInvocationInterceptor._@return the bean name (never {@code null})_@throws IllegalStateException if the bean name has not been exposed;public static String getBeanName() throws IllegalStateException {_		return getBeanName(ExposeInvocationInterceptor.currentInvocation())__	};find,the,bean,name,for,the,current,invocation,assumes,that,an,expose,bean,name,advisor,has,been,included,in,the,interceptor,chain,and,that,the,invocation,is,exposed,with,expose,invocation,interceptor,return,the,bean,name,never,code,null,throws,illegal,state,exception,if,the,bean,name,has,not,been,exposed;public,static,string,get,bean,name,throws,illegal,state,exception,return,get,bean,name,expose,invocation,interceptor,current,invocation
ExposeBeanNameAdvisors -> public static String getBeanName() throws IllegalStateException;1530174524;Find the bean name for the current invocation. Assumes that an ExposeBeanNameAdvisor_has been included in the interceptor chain, and that the invocation is exposed_with ExposeInvocationInterceptor._@return the bean name (never {@code null})_@throws IllegalStateException if the bean name has not been exposed;public static String getBeanName() throws IllegalStateException {_		return getBeanName(ExposeInvocationInterceptor.currentInvocation())__	};find,the,bean,name,for,the,current,invocation,assumes,that,an,expose,bean,name,advisor,has,been,included,in,the,interceptor,chain,and,that,the,invocation,is,exposed,with,expose,invocation,interceptor,return,the,bean,name,never,code,null,throws,illegal,state,exception,if,the,bean,name,has,not,been,exposed;public,static,string,get,bean,name,throws,illegal,state,exception,return,get,bean,name,expose,invocation,interceptor,current,invocation
ExposeBeanNameAdvisors -> public static String getBeanName(MethodInvocation mi) throws IllegalStateException;1328020251;Find the bean name for the given invocation. Assumes that an ExposeBeanNameAdvisor_has been included in the interceptor chain._@param mi MethodInvocation that should contain the bean name as an attribute_@return the bean name (never <code>null</code>)_@throws IllegalStateException if the bean name has not been exposed;public static String getBeanName(MethodInvocation mi) throws IllegalStateException {_		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalArgumentException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		String beanName = (String) pmi.getUserAttribute(BEAN_NAME_ATTRIBUTE)__		if (beanName == null) {_			throw new IllegalStateException("Cannot get bean name_ not set on MethodInvocation: " + mi)__		}_		return beanName__	};find,the,bean,name,for,the,given,invocation,assumes,that,an,expose,bean,name,advisor,has,been,included,in,the,interceptor,chain,param,mi,method,invocation,that,should,contain,the,bean,name,as,an,attribute,return,the,bean,name,never,code,null,code,throws,illegal,state,exception,if,the,bean,name,has,not,been,exposed;public,static,string,get,bean,name,method,invocation,mi,throws,illegal,state,exception,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,argument,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,string,bean,name,string,pmi,get,user,attribute,if,bean,name,null,throw,new,illegal,state,exception,cannot,get,bean,name,not,set,on,method,invocation,mi,return,bean,name
ExposeBeanNameAdvisors -> public static String getBeanName(MethodInvocation mi) throws IllegalStateException;1356735495;Find the bean name for the given invocation. Assumes that an ExposeBeanNameAdvisor_has been included in the interceptor chain._@param mi MethodInvocation that should contain the bean name as an attribute_@return the bean name (never {@code null})_@throws IllegalStateException if the bean name has not been exposed;public static String getBeanName(MethodInvocation mi) throws IllegalStateException {_		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalArgumentException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		String beanName = (String) pmi.getUserAttribute(BEAN_NAME_ATTRIBUTE)__		if (beanName == null) {_			throw new IllegalStateException("Cannot get bean name_ not set on MethodInvocation: " + mi)__		}_		return beanName__	};find,the,bean,name,for,the,given,invocation,assumes,that,an,expose,bean,name,advisor,has,been,included,in,the,interceptor,chain,param,mi,method,invocation,that,should,contain,the,bean,name,as,an,attribute,return,the,bean,name,never,code,null,throws,illegal,state,exception,if,the,bean,name,has,not,been,exposed;public,static,string,get,bean,name,method,invocation,mi,throws,illegal,state,exception,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,argument,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,string,bean,name,string,pmi,get,user,attribute,if,bean,name,null,throw,new,illegal,state,exception,cannot,get,bean,name,not,set,on,method,invocation,mi,return,bean,name
ExposeBeanNameAdvisors -> public static String getBeanName(MethodInvocation mi) throws IllegalStateException;1357119239;Find the bean name for the given invocation. Assumes that an ExposeBeanNameAdvisor_has been included in the interceptor chain._@param mi MethodInvocation that should contain the bean name as an attribute_@return the bean name (never {@code null})_@throws IllegalStateException if the bean name has not been exposed;public static String getBeanName(MethodInvocation mi) throws IllegalStateException {_		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalArgumentException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		String beanName = (String) pmi.getUserAttribute(BEAN_NAME_ATTRIBUTE)__		if (beanName == null) {_			throw new IllegalStateException("Cannot get bean name_ not set on MethodInvocation: " + mi)__		}_		return beanName__	};find,the,bean,name,for,the,given,invocation,assumes,that,an,expose,bean,name,advisor,has,been,included,in,the,interceptor,chain,param,mi,method,invocation,that,should,contain,the,bean,name,as,an,attribute,return,the,bean,name,never,code,null,throws,illegal,state,exception,if,the,bean,name,has,not,been,exposed;public,static,string,get,bean,name,method,invocation,mi,throws,illegal,state,exception,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,argument,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,string,bean,name,string,pmi,get,user,attribute,if,bean,name,null,throw,new,illegal,state,exception,cannot,get,bean,name,not,set,on,method,invocation,mi,return,bean,name
ExposeBeanNameAdvisors -> public static String getBeanName(MethodInvocation mi) throws IllegalStateException;1368482696;Find the bean name for the given invocation. Assumes that an ExposeBeanNameAdvisor_has been included in the interceptor chain._@param mi MethodInvocation that should contain the bean name as an attribute_@return the bean name (never {@code null})_@throws IllegalStateException if the bean name has not been exposed;public static String getBeanName(MethodInvocation mi) throws IllegalStateException {_		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalArgumentException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		String beanName = (String) pmi.getUserAttribute(BEAN_NAME_ATTRIBUTE)__		if (beanName == null) {_			throw new IllegalStateException("Cannot get bean name_ not set on MethodInvocation: " + mi)__		}_		return beanName__	};find,the,bean,name,for,the,given,invocation,assumes,that,an,expose,bean,name,advisor,has,been,included,in,the,interceptor,chain,param,mi,method,invocation,that,should,contain,the,bean,name,as,an,attribute,return,the,bean,name,never,code,null,throws,illegal,state,exception,if,the,bean,name,has,not,been,exposed;public,static,string,get,bean,name,method,invocation,mi,throws,illegal,state,exception,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,argument,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,string,bean,name,string,pmi,get,user,attribute,if,bean,name,null,throw,new,illegal,state,exception,cannot,get,bean,name,not,set,on,method,invocation,mi,return,bean,name
ExposeBeanNameAdvisors -> public static String getBeanName(MethodInvocation mi) throws IllegalStateException;1530174524;Find the bean name for the given invocation. Assumes that an ExposeBeanNameAdvisor_has been included in the interceptor chain._@param mi the MethodInvocation that should contain the bean name as an attribute_@return the bean name (never {@code null})_@throws IllegalStateException if the bean name has not been exposed;public static String getBeanName(MethodInvocation mi) throws IllegalStateException {_		if (!(mi instanceof ProxyMethodInvocation)) {_			throw new IllegalArgumentException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi)__		}_		ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi__		String beanName = (String) pmi.getUserAttribute(BEAN_NAME_ATTRIBUTE)__		if (beanName == null) {_			throw new IllegalStateException("Cannot get bean name_ not set on MethodInvocation: " + mi)__		}_		return beanName__	};find,the,bean,name,for,the,given,invocation,assumes,that,an,expose,bean,name,advisor,has,been,included,in,the,interceptor,chain,param,mi,the,method,invocation,that,should,contain,the,bean,name,as,an,attribute,return,the,bean,name,never,code,null,throws,illegal,state,exception,if,the,bean,name,has,not,been,exposed;public,static,string,get,bean,name,method,invocation,mi,throws,illegal,state,exception,if,mi,instanceof,proxy,method,invocation,throw,new,illegal,argument,exception,method,invocation,is,not,a,spring,proxy,method,invocation,mi,proxy,method,invocation,pmi,proxy,method,invocation,mi,string,bean,name,string,pmi,get,user,attribute,if,bean,name,null,throw,new,illegal,state,exception,cannot,get,bean,name,not,set,on,method,invocation,mi,return,bean,name
