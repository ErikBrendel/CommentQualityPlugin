commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Object getAspectInstance() {     return this.beanFactory.getBean(this.name). }
false;public;0;7;;@Override @Nullable public ClassLoader getAspectClassLoader() {     return (this.beanFactory instanceof ConfigurableBeanFactory ? ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : ClassUtils.getDefaultClassLoader()). }
false;public;0;4;;@Override public AspectMetadata getAspectMetadata() {     return this.aspectMetadata. }
false;public;0;17;;@Override @Nullable public Object getAspectCreationMutex() {     if (this.beanFactory.isSingleton(this.name)) {         // Rely on singleton semantics provided by the factory -> no local lock.         return null.     } else if (this.beanFactory instanceof ConfigurableBeanFactory) {         // of our advice bean happens to trigger the singleton lock implicitly...         return ((ConfigurableBeanFactory) this.beanFactory).getSingletonMutex().     } else {         return this.     } }
true;public;0;11;/**  * Determine the order for this factory's target aspect, either  * an instance-specific order expressed through implementing the  * {@link org.springframework.core.Ordered} interface (only  * checked for singleton beans), or an order expressed through the  * {@link org.springframework.core.annotation.Order} annotation  * at the class level.  * @see org.springframework.core.Ordered  * @see org.springframework.core.annotation.Order  */ ;/**  * Determine the order for this factory's target aspect, either  * an instance-specific order expressed through implementing the  * {@link org.springframework.core.Ordered} interface (only  * checked for singleton beans), or an order expressed through the  * {@link org.springframework.core.annotation.Order} annotation  * at the class level.  * @see org.springframework.core.Ordered  * @see org.springframework.core.annotation.Order  */ @Override public int getOrder() {     Class<?> type = this.beanFactory.getType(this.name).     if (type != null) {         if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {             return ((Ordered) this.beanFactory.getBean(this.name)).getOrder().         }         return OrderUtils.getOrder(type, Ordered.LOWEST_PRECEDENCE).     }     return Ordered.LOWEST_PRECEDENCE. }
false;public;0;4;;@Override public String toString() {     return getClass().getSimpleName() + ": bean name '" + this.name + "'". }
