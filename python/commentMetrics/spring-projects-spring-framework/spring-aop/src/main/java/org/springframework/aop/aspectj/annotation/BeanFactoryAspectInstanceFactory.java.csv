# id;timestamp;commentText;codeText;commentWords;codeWords
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, @Nullable Class<?> type);1496837955;Create a BeanFactoryAspectInstanceFactory, providing a type that AspectJ should_introspect to create AJType metadata. Use if the BeanFactory may consider the type_to be a subclass (as when using CGLIB), and the information should relate to a superclass._@param beanFactory BeanFactory to obtain instance(s) from_@param name the name of the bean_@param type the type that should be introspected by AspectJ_({@code null} indicates resolution through {@link BeanFactory#getType} via the bean name);public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, @Nullable Class<?> type) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		Assert.notNull(name, "Bean name must not be null")__		this.beanFactory = beanFactory__		this.name = name__		Class<?> resolvedType = type__		if (type == null) {_			resolvedType = beanFactory.getType(name)__			Assert.notNull(resolvedType, "Unresolvable bean type - explicitly specify the aspect class")__		}_		this.aspectMetadata = new AspectMetadata(resolvedType, name)__	};create,a,bean,factory,aspect,instance,factory,providing,a,type,that,aspect,j,should,introspect,to,create,ajtype,metadata,use,if,the,bean,factory,may,consider,the,type,to,be,a,subclass,as,when,using,cglib,and,the,information,should,relate,to,a,superclass,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,the,name,of,the,bean,param,type,the,type,that,should,be,introspected,by,aspect,j,code,null,indicates,resolution,through,link,bean,factory,get,type,via,the,bean,name;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,nullable,class,type,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,not,null,name,bean,name,must,not,be,null,this,bean,factory,bean,factory,this,name,name,class,resolved,type,type,if,type,null,resolved,type,bean,factory,get,type,name,assert,not,null,resolved,type,unresolvable,bean,type,explicitly,specify,the,aspect,class,this,aspect,metadata,new,aspect,metadata,resolved,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, @Nullable Class<?> type);1498780456;Create a BeanFactoryAspectInstanceFactory, providing a type that AspectJ should_introspect to create AJType metadata. Use if the BeanFactory may consider the type_to be a subclass (as when using CGLIB), and the information should relate to a superclass._@param beanFactory BeanFactory to obtain instance(s) from_@param name the name of the bean_@param type the type that should be introspected by AspectJ_({@code null} indicates resolution through {@link BeanFactory#getType} via the bean name);public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, @Nullable Class<?> type) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		Assert.notNull(name, "Bean name must not be null")__		this.beanFactory = beanFactory__		this.name = name__		Class<?> resolvedType = type__		if (type == null) {_			resolvedType = beanFactory.getType(name)__			Assert.notNull(resolvedType, "Unresolvable bean type - explicitly specify the aspect class")__		}_		this.aspectMetadata = new AspectMetadata(resolvedType, name)__	};create,a,bean,factory,aspect,instance,factory,providing,a,type,that,aspect,j,should,introspect,to,create,ajtype,metadata,use,if,the,bean,factory,may,consider,the,type,to,be,a,subclass,as,when,using,cglib,and,the,information,should,relate,to,a,superclass,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,the,name,of,the,bean,param,type,the,type,that,should,be,introspected,by,aspect,j,code,null,indicates,resolution,through,link,bean,factory,get,type,via,the,bean,name;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,nullable,class,type,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,not,null,name,bean,name,must,not,be,null,this,bean,factory,bean,factory,this,name,name,class,resolved,type,type,if,type,null,resolved,type,bean,factory,get,type,name,assert,not,null,resolved,type,unresolvable,bean,type,explicitly,specify,the,aspect,class,this,aspect,metadata,new,aspect,metadata,resolved,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, @Nullable Class<?> type);1502974979;Create a BeanFactoryAspectInstanceFactory, providing a type that AspectJ should_introspect to create AJType metadata. Use if the BeanFactory may consider the type_to be a subclass (as when using CGLIB), and the information should relate to a superclass._@param beanFactory BeanFactory to obtain instance(s) from_@param name the name of the bean_@param type the type that should be introspected by AspectJ_({@code null} indicates resolution through {@link BeanFactory#getType} via the bean name);public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, @Nullable Class<?> type) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		Assert.notNull(name, "Bean name must not be null")__		this.beanFactory = beanFactory__		this.name = name__		Class<?> resolvedType = type__		if (type == null) {_			resolvedType = beanFactory.getType(name)__			Assert.notNull(resolvedType, "Unresolvable bean type - explicitly specify the aspect class")__		}_		this.aspectMetadata = new AspectMetadata(resolvedType, name)__	};create,a,bean,factory,aspect,instance,factory,providing,a,type,that,aspect,j,should,introspect,to,create,ajtype,metadata,use,if,the,bean,factory,may,consider,the,type,to,be,a,subclass,as,when,using,cglib,and,the,information,should,relate,to,a,superclass,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,the,name,of,the,bean,param,type,the,type,that,should,be,introspected,by,aspect,j,code,null,indicates,resolution,through,link,bean,factory,get,type,via,the,bean,name;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,nullable,class,type,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,not,null,name,bean,name,must,not,be,null,this,bean,factory,bean,factory,this,name,name,class,resolved,type,type,if,type,null,resolved,type,bean,factory,get,type,name,assert,not,null,resolved,type,unresolvable,bean,type,explicitly,specify,the,aspect,class,this,aspect,metadata,new,aspect,metadata,resolved,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, @Nullable Class<?> type);1530174524;Create a BeanFactoryAspectInstanceFactory, providing a type that AspectJ should_introspect to create AJType metadata. Use if the BeanFactory may consider the type_to be a subclass (as when using CGLIB), and the information should relate to a superclass._@param beanFactory the BeanFactory to obtain instance(s) from_@param name the name of the bean_@param type the type that should be introspected by AspectJ_({@code null} indicates resolution through {@link BeanFactory#getType} via the bean name);public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, @Nullable Class<?> type) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		Assert.notNull(name, "Bean name must not be null")__		this.beanFactory = beanFactory__		this.name = name__		Class<?> resolvedType = type__		if (type == null) {_			resolvedType = beanFactory.getType(name)__			Assert.notNull(resolvedType, "Unresolvable bean type - explicitly specify the aspect class")__		}_		this.aspectMetadata = new AspectMetadata(resolvedType, name)__	};create,a,bean,factory,aspect,instance,factory,providing,a,type,that,aspect,j,should,introspect,to,create,ajtype,metadata,use,if,the,bean,factory,may,consider,the,type,to,be,a,subclass,as,when,using,cglib,and,the,information,should,relate,to,a,superclass,param,bean,factory,the,bean,factory,to,obtain,instance,s,from,param,name,the,name,of,the,bean,param,type,the,type,that,should,be,introspected,by,aspect,j,code,null,indicates,resolution,through,link,bean,factory,get,type,via,the,bean,name;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,nullable,class,type,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,not,null,name,bean,name,must,not,be,null,this,bean,factory,bean,factory,this,name,name,class,resolved,type,type,if,type,null,resolved,type,bean,factory,get,type,name,assert,not,null,resolved,type,unresolvable,bean,type,explicitly,specify,the,aspect,class,this,aspect,metadata,new,aspect,metadata,resolved,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class<?> type);1385412762;Create a BeanFactoryAspectInstanceFactory, providing a type that AspectJ should_introspect to create AJType metadata. Use if the BeanFactory may consider the type_to be a subclass (as when using CGLIB), and the information should relate to a superclass._@param beanFactory BeanFactory to obtain instance(s) from_@param name the name of the bean_@param type the type that should be introspected by AspectJ;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class<?> type) {_		this.beanFactory = beanFactory__		this.name = name__		this.aspectMetadata = new AspectMetadata(type, name)__	};create,a,bean,factory,aspect,instance,factory,providing,a,type,that,aspect,j,should,introspect,to,create,ajtype,metadata,use,if,the,bean,factory,may,consider,the,type,to,be,a,subclass,as,when,using,cglib,and,the,information,should,relate,to,a,superclass,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,the,name,of,the,bean,param,type,the,type,that,should,be,introspected,by,aspect,j;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,class,type,this,bean,factory,bean,factory,this,name,name,this,aspect,metadata,new,aspect,metadata,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class<?> type);1396355447;Create a BeanFactoryAspectInstanceFactory, providing a type that AspectJ should_introspect to create AJType metadata. Use if the BeanFactory may consider the type_to be a subclass (as when using CGLIB), and the information should relate to a superclass._@param beanFactory BeanFactory to obtain instance(s) from_@param name the name of the bean_@param type the type that should be introspected by AspectJ;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class<?> type) {_		this.beanFactory = beanFactory__		this.name = name__		this.aspectMetadata = new AspectMetadata(type, name)__	};create,a,bean,factory,aspect,instance,factory,providing,a,type,that,aspect,j,should,introspect,to,create,ajtype,metadata,use,if,the,bean,factory,may,consider,the,type,to,be,a,subclass,as,when,using,cglib,and,the,information,should,relate,to,a,superclass,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,the,name,of,the,bean,param,type,the,type,that,should,be,introspected,by,aspect,j;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,class,type,this,bean,factory,bean,factory,this,name,name,this,aspect,metadata,new,aspect,metadata,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class<?> type);1450815633;Create a BeanFactoryAspectInstanceFactory, providing a type that AspectJ should_introspect to create AJType metadata. Use if the BeanFactory may consider the type_to be a subclass (as when using CGLIB), and the information should relate to a superclass._@param beanFactory BeanFactory to obtain instance(s) from_@param name the name of the bean_@param type the type that should be introspected by AspectJ;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class<?> type) {_		this.beanFactory = beanFactory__		this.name = name__		this.aspectMetadata = new AspectMetadata(type, name)__	};create,a,bean,factory,aspect,instance,factory,providing,a,type,that,aspect,j,should,introspect,to,create,ajtype,metadata,use,if,the,bean,factory,may,consider,the,type,to,be,a,subclass,as,when,using,cglib,and,the,information,should,relate,to,a,superclass,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,the,name,of,the,bean,param,type,the,type,that,should,be,introspected,by,aspect,j;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,class,type,this,bean,factory,bean,factory,this,name,name,this,aspect,metadata,new,aspect,metadata,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class<?> type);1462345408;Create a BeanFactoryAspectInstanceFactory, providing a type that AspectJ should_introspect to create AJType metadata. Use if the BeanFactory may consider the type_to be a subclass (as when using CGLIB), and the information should relate to a superclass._@param beanFactory BeanFactory to obtain instance(s) from_@param name the name of the bean_@param type the type that should be introspected by AspectJ;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class<?> type) {_		this.beanFactory = beanFactory__		this.name = name__		this.aspectMetadata = new AspectMetadata(type, name)__	};create,a,bean,factory,aspect,instance,factory,providing,a,type,that,aspect,j,should,introspect,to,create,ajtype,metadata,use,if,the,bean,factory,may,consider,the,type,to,be,a,subclass,as,when,using,cglib,and,the,information,should,relate,to,a,superclass,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,the,name,of,the,bean,param,type,the,type,that,should,be,introspected,by,aspect,j;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,class,type,this,bean,factory,bean,factory,this,name,name,this,aspect,metadata,new,aspect,metadata,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class<?> type);1462374136;Create a BeanFactoryAspectInstanceFactory, providing a type that AspectJ should_introspect to create AJType metadata. Use if the BeanFactory may consider the type_to be a subclass (as when using CGLIB), and the information should relate to a superclass._@param beanFactory BeanFactory to obtain instance(s) from_@param name the name of the bean_@param type the type that should be introspected by AspectJ;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class<?> type) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		Assert.notNull(name, "Bean name must not be null")__		this.beanFactory = beanFactory__		this.name = name__		this.aspectMetadata = new AspectMetadata(type, name)__	};create,a,bean,factory,aspect,instance,factory,providing,a,type,that,aspect,j,should,introspect,to,create,ajtype,metadata,use,if,the,bean,factory,may,consider,the,type,to,be,a,subclass,as,when,using,cglib,and,the,information,should,relate,to,a,superclass,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,the,name,of,the,bean,param,type,the,type,that,should,be,introspected,by,aspect,j;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,class,type,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,not,null,name,bean,name,must,not,be,null,this,bean,factory,bean,factory,this,name,name,this,aspect,metadata,new,aspect,metadata,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class<?> type);1477690501;Create a BeanFactoryAspectInstanceFactory, providing a type that AspectJ should_introspect to create AJType metadata. Use if the BeanFactory may consider the type_to be a subclass (as when using CGLIB), and the information should relate to a superclass._@param beanFactory BeanFactory to obtain instance(s) from_@param name the name of the bean_@param type the type that should be introspected by AspectJ;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class<?> type) {_		Assert.notNull(beanFactory, "BeanFactory must not be null")__		Assert.notNull(name, "Bean name must not be null")__		this.beanFactory = beanFactory__		this.name = name__		this.aspectMetadata = new AspectMetadata(type, name)__	};create,a,bean,factory,aspect,instance,factory,providing,a,type,that,aspect,j,should,introspect,to,create,ajtype,metadata,use,if,the,bean,factory,may,consider,the,type,to,be,a,subclass,as,when,using,cglib,and,the,information,should,relate,to,a,superclass,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,the,name,of,the,bean,param,type,the,type,that,should,be,introspected,by,aspect,j;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,class,type,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,not,null,name,bean,name,must,not,be,null,this,bean,factory,bean,factory,this,name,name,this,aspect,metadata,new,aspect,metadata,type,name
BeanFactoryAspectInstanceFactory -> public int getOrder();1328020251;Determine the order for this factory's target aspect, either_an instance-specific order expressed through implementing the_{@link org.springframework.core.Ordered} interface (only_checked for singleton beans), or an order expressed through the_{@link org.springframework.core.annotation.Order} annotation_at the class level._@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order;public int getOrder() {_		Class<?> type = this.beanFactory.getType(this.name)__		if (type != null) {_			if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {_				return ((Ordered) this.beanFactory.getBean(this.name)).getOrder()__			}_			Order order = type.getAnnotation(Order.class)__			if (order != null) {_				return order.value()__			}_		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,for,this,factory,s,target,aspect,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,only,checked,for,singleton,beans,or,an,order,expressed,through,the,link,org,springframework,core,annotation,order,annotation,at,the,class,level,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order;public,int,get,order,class,type,this,bean,factory,get,type,this,name,if,type,null,if,ordered,class,is,assignable,from,type,this,bean,factory,is,singleton,this,name,return,ordered,this,bean,factory,get,bean,this,name,get,order,order,order,type,get,annotation,order,class,if,order,null,return,order,value,return,ordered
BeanFactoryAspectInstanceFactory -> public int getOrder();1357119239;Determine the order for this factory's target aspect, either_an instance-specific order expressed through implementing the_{@link org.springframework.core.Ordered} interface (only_checked for singleton beans), or an order expressed through the_{@link org.springframework.core.annotation.Order} annotation_at the class level._@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order;public int getOrder() {_		Class<?> type = this.beanFactory.getType(this.name)__		if (type != null) {_			if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {_				return ((Ordered) this.beanFactory.getBean(this.name)).getOrder()__			}_			Order order = type.getAnnotation(Order.class)__			if (order != null) {_				return order.value()__			}_		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,for,this,factory,s,target,aspect,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,only,checked,for,singleton,beans,or,an,order,expressed,through,the,link,org,springframework,core,annotation,order,annotation,at,the,class,level,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order;public,int,get,order,class,type,this,bean,factory,get,type,this,name,if,type,null,if,ordered,class,is,assignable,from,type,this,bean,factory,is,singleton,this,name,return,ordered,this,bean,factory,get,bean,this,name,get,order,order,order,type,get,annotation,order,class,if,order,null,return,order,value,return,ordered
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name);1328020251;Create a BeanFactoryAspectInstanceFactory. AspectJ will be called to_introspect to create AJType metadata using the type returned for the_given bean name from the BeanFactory._@param beanFactory BeanFactory to obtain instance(s) from_@param name name of the bean;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {_		this(beanFactory, name, beanFactory.getType(name))__	};create,a,bean,factory,aspect,instance,factory,aspect,j,will,be,called,to,introspect,to,create,ajtype,metadata,using,the,type,returned,for,the,given,bean,name,from,the,bean,factory,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,name,of,the,bean;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,this,bean,factory,name,bean,factory,get,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name);1356735495;Create a BeanFactoryAspectInstanceFactory. AspectJ will be called to_introspect to create AJType metadata using the type returned for the_given bean name from the BeanFactory._@param beanFactory BeanFactory to obtain instance(s) from_@param name name of the bean;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {_		this(beanFactory, name, beanFactory.getType(name))__	};create,a,bean,factory,aspect,instance,factory,aspect,j,will,be,called,to,introspect,to,create,ajtype,metadata,using,the,type,returned,for,the,given,bean,name,from,the,bean,factory,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,name,of,the,bean;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,this,bean,factory,name,bean,factory,get,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name);1357119239;Create a BeanFactoryAspectInstanceFactory. AspectJ will be called to_introspect to create AJType metadata using the type returned for the_given bean name from the BeanFactory._@param beanFactory BeanFactory to obtain instance(s) from_@param name name of the bean;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {_		this(beanFactory, name, beanFactory.getType(name))__	};create,a,bean,factory,aspect,instance,factory,aspect,j,will,be,called,to,introspect,to,create,ajtype,metadata,using,the,type,returned,for,the,given,bean,name,from,the,bean,factory,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,name,of,the,bean;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,this,bean,factory,name,bean,factory,get,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name);1368482696;Create a BeanFactoryAspectInstanceFactory. AspectJ will be called to_introspect to create AJType metadata using the type returned for the_given bean name from the BeanFactory._@param beanFactory BeanFactory to obtain instance(s) from_@param name name of the bean;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {_		this(beanFactory, name, beanFactory.getType(name))__	};create,a,bean,factory,aspect,instance,factory,aspect,j,will,be,called,to,introspect,to,create,ajtype,metadata,using,the,type,returned,for,the,given,bean,name,from,the,bean,factory,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,name,of,the,bean;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,this,bean,factory,name,bean,factory,get,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name);1368720356;Create a BeanFactoryAspectInstanceFactory. AspectJ will be called to_introspect to create AJType metadata using the type returned for the_given bean name from the BeanFactory._@param beanFactory BeanFactory to obtain instance(s) from_@param name name of the bean;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {_		this(beanFactory, name, beanFactory.getType(name))__	};create,a,bean,factory,aspect,instance,factory,aspect,j,will,be,called,to,introspect,to,create,ajtype,metadata,using,the,type,returned,for,the,given,bean,name,from,the,bean,factory,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,name,of,the,bean;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,this,bean,factory,name,bean,factory,get,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name);1385412762;Create a BeanFactoryAspectInstanceFactory. AspectJ will be called to_introspect to create AJType metadata using the type returned for the_given bean name from the BeanFactory._@param beanFactory BeanFactory to obtain instance(s) from_@param name name of the bean;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {_		this(beanFactory, name, beanFactory.getType(name))__	};create,a,bean,factory,aspect,instance,factory,aspect,j,will,be,called,to,introspect,to,create,ajtype,metadata,using,the,type,returned,for,the,given,bean,name,from,the,bean,factory,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,name,of,the,bean;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,this,bean,factory,name,bean,factory,get,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name);1396355447;Create a BeanFactoryAspectInstanceFactory. AspectJ will be called to_introspect to create AJType metadata using the type returned for the_given bean name from the BeanFactory._@param beanFactory BeanFactory to obtain instance(s) from_@param name name of the bean;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {_		this(beanFactory, name, beanFactory.getType(name))__	};create,a,bean,factory,aspect,instance,factory,aspect,j,will,be,called,to,introspect,to,create,ajtype,metadata,using,the,type,returned,for,the,given,bean,name,from,the,bean,factory,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,name,of,the,bean;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,this,bean,factory,name,bean,factory,get,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name);1450815633;Create a BeanFactoryAspectInstanceFactory. AspectJ will be called to_introspect to create AJType metadata using the type returned for the_given bean name from the BeanFactory._@param beanFactory BeanFactory to obtain instance(s) from_@param name name of the bean;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {_		this(beanFactory, name, beanFactory.getType(name))__	};create,a,bean,factory,aspect,instance,factory,aspect,j,will,be,called,to,introspect,to,create,ajtype,metadata,using,the,type,returned,for,the,given,bean,name,from,the,bean,factory,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,name,of,the,bean;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,this,bean,factory,name,bean,factory,get,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name);1462345408;Create a BeanFactoryAspectInstanceFactory. AspectJ will be called to_introspect to create AJType metadata using the type returned for the_given bean name from the BeanFactory._@param beanFactory BeanFactory to obtain instance(s) from_@param name name of the bean;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {_		this(beanFactory, name, beanFactory.getType(name))__	};create,a,bean,factory,aspect,instance,factory,aspect,j,will,be,called,to,introspect,to,create,ajtype,metadata,using,the,type,returned,for,the,given,bean,name,from,the,bean,factory,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,name,of,the,bean;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,this,bean,factory,name,bean,factory,get,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name);1462374136;Create a BeanFactoryAspectInstanceFactory. AspectJ will be called to_introspect to create AJType metadata using the type returned for the_given bean name from the BeanFactory._@param beanFactory BeanFactory to obtain instance(s) from_@param name name of the bean;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {_		this(beanFactory, name, beanFactory.getType(name))__	};create,a,bean,factory,aspect,instance,factory,aspect,j,will,be,called,to,introspect,to,create,ajtype,metadata,using,the,type,returned,for,the,given,bean,name,from,the,bean,factory,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,name,of,the,bean;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,this,bean,factory,name,bean,factory,get,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name);1477690501;Create a BeanFactoryAspectInstanceFactory. AspectJ will be called to_introspect to create AJType metadata using the type returned for the_given bean name from the BeanFactory._@param beanFactory BeanFactory to obtain instance(s) from_@param name name of the bean;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {_		this(beanFactory, name, beanFactory.getType(name))__	};create,a,bean,factory,aspect,instance,factory,aspect,j,will,be,called,to,introspect,to,create,ajtype,metadata,using,the,type,returned,for,the,given,bean,name,from,the,bean,factory,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,name,of,the,bean;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,this,bean,factory,name,bean,factory,get,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name);1496837955;Create a BeanFactoryAspectInstanceFactory. AspectJ will be called to_introspect to create AJType metadata using the type returned for the_given bean name from the BeanFactory._@param beanFactory BeanFactory to obtain instance(s) from_@param name name of the bean;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {_		this(beanFactory, name, null)__	};create,a,bean,factory,aspect,instance,factory,aspect,j,will,be,called,to,introspect,to,create,ajtype,metadata,using,the,type,returned,for,the,given,bean,name,from,the,bean,factory,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,name,of,the,bean;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,this,bean,factory,name,null
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name);1498780456;Create a BeanFactoryAspectInstanceFactory. AspectJ will be called to_introspect to create AJType metadata using the type returned for the_given bean name from the BeanFactory._@param beanFactory BeanFactory to obtain instance(s) from_@param name name of the bean;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {_		this(beanFactory, name, null)__	};create,a,bean,factory,aspect,instance,factory,aspect,j,will,be,called,to,introspect,to,create,ajtype,metadata,using,the,type,returned,for,the,given,bean,name,from,the,bean,factory,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,name,of,the,bean;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,this,bean,factory,name,null
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name);1502974979;Create a BeanFactoryAspectInstanceFactory. AspectJ will be called to_introspect to create AJType metadata using the type returned for the_given bean name from the BeanFactory._@param beanFactory BeanFactory to obtain instance(s) from_@param name name of the bean;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {_		this(beanFactory, name, null)__	};create,a,bean,factory,aspect,instance,factory,aspect,j,will,be,called,to,introspect,to,create,ajtype,metadata,using,the,type,returned,for,the,given,bean,name,from,the,bean,factory,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,name,of,the,bean;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,this,bean,factory,name,null
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name);1530174524;Create a BeanFactoryAspectInstanceFactory. AspectJ will be called to_introspect to create AJType metadata using the type returned for the_given bean name from the BeanFactory._@param beanFactory the BeanFactory to obtain instance(s) from_@param name name of the bean;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name) {_		this(beanFactory, name, null)__	};create,a,bean,factory,aspect,instance,factory,aspect,j,will,be,called,to,introspect,to,create,ajtype,metadata,using,the,type,returned,for,the,given,bean,name,from,the,bean,factory,param,bean,factory,the,bean,factory,to,obtain,instance,s,from,param,name,name,of,the,bean;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,this,bean,factory,name,null
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class type);1328020251;Create a BeanFactoryAspectInstanceFactory, providing a type that AspectJ should_introspect to create AJType metadata. Use if the BeanFactory may consider the type_to be a subclass (as when using CGLIB), and the information should relate to a superclass._@param beanFactory BeanFactory to obtain instance(s) from_@param name the name of the bean_@param type the type that should be introspected by AspectJ;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class type) {_		this.beanFactory = beanFactory__		this.name = name__		this.aspectMetadata = new AspectMetadata(type, name)__	};create,a,bean,factory,aspect,instance,factory,providing,a,type,that,aspect,j,should,introspect,to,create,ajtype,metadata,use,if,the,bean,factory,may,consider,the,type,to,be,a,subclass,as,when,using,cglib,and,the,information,should,relate,to,a,superclass,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,the,name,of,the,bean,param,type,the,type,that,should,be,introspected,by,aspect,j;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,class,type,this,bean,factory,bean,factory,this,name,name,this,aspect,metadata,new,aspect,metadata,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class type);1356735495;Create a BeanFactoryAspectInstanceFactory, providing a type that AspectJ should_introspect to create AJType metadata. Use if the BeanFactory may consider the type_to be a subclass (as when using CGLIB), and the information should relate to a superclass._@param beanFactory BeanFactory to obtain instance(s) from_@param name the name of the bean_@param type the type that should be introspected by AspectJ;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class type) {_		this.beanFactory = beanFactory__		this.name = name__		this.aspectMetadata = new AspectMetadata(type, name)__	};create,a,bean,factory,aspect,instance,factory,providing,a,type,that,aspect,j,should,introspect,to,create,ajtype,metadata,use,if,the,bean,factory,may,consider,the,type,to,be,a,subclass,as,when,using,cglib,and,the,information,should,relate,to,a,superclass,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,the,name,of,the,bean,param,type,the,type,that,should,be,introspected,by,aspect,j;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,class,type,this,bean,factory,bean,factory,this,name,name,this,aspect,metadata,new,aspect,metadata,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class type);1357119239;Create a BeanFactoryAspectInstanceFactory, providing a type that AspectJ should_introspect to create AJType metadata. Use if the BeanFactory may consider the type_to be a subclass (as when using CGLIB), and the information should relate to a superclass._@param beanFactory BeanFactory to obtain instance(s) from_@param name the name of the bean_@param type the type that should be introspected by AspectJ;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class type) {_		this.beanFactory = beanFactory__		this.name = name__		this.aspectMetadata = new AspectMetadata(type, name)__	};create,a,bean,factory,aspect,instance,factory,providing,a,type,that,aspect,j,should,introspect,to,create,ajtype,metadata,use,if,the,bean,factory,may,consider,the,type,to,be,a,subclass,as,when,using,cglib,and,the,information,should,relate,to,a,superclass,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,the,name,of,the,bean,param,type,the,type,that,should,be,introspected,by,aspect,j;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,class,type,this,bean,factory,bean,factory,this,name,name,this,aspect,metadata,new,aspect,metadata,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class type);1368482696;Create a BeanFactoryAspectInstanceFactory, providing a type that AspectJ should_introspect to create AJType metadata. Use if the BeanFactory may consider the type_to be a subclass (as when using CGLIB), and the information should relate to a superclass._@param beanFactory BeanFactory to obtain instance(s) from_@param name the name of the bean_@param type the type that should be introspected by AspectJ;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class type) {_		this.beanFactory = beanFactory__		this.name = name__		this.aspectMetadata = new AspectMetadata(type, name)__	};create,a,bean,factory,aspect,instance,factory,providing,a,type,that,aspect,j,should,introspect,to,create,ajtype,metadata,use,if,the,bean,factory,may,consider,the,type,to,be,a,subclass,as,when,using,cglib,and,the,information,should,relate,to,a,superclass,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,the,name,of,the,bean,param,type,the,type,that,should,be,introspected,by,aspect,j;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,class,type,this,bean,factory,bean,factory,this,name,name,this,aspect,metadata,new,aspect,metadata,type,name
BeanFactoryAspectInstanceFactory -> public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class type);1368720356;Create a BeanFactoryAspectInstanceFactory, providing a type that AspectJ should_introspect to create AJType metadata. Use if the BeanFactory may consider the type_to be a subclass (as when using CGLIB), and the information should relate to a superclass._@param beanFactory BeanFactory to obtain instance(s) from_@param name the name of the bean_@param type the type that should be introspected by AspectJ;public BeanFactoryAspectInstanceFactory(BeanFactory beanFactory, String name, Class type) {_		this.beanFactory = beanFactory__		this.name = name__		this.aspectMetadata = new AspectMetadata(type, name)__	};create,a,bean,factory,aspect,instance,factory,providing,a,type,that,aspect,j,should,introspect,to,create,ajtype,metadata,use,if,the,bean,factory,may,consider,the,type,to,be,a,subclass,as,when,using,cglib,and,the,information,should,relate,to,a,superclass,param,bean,factory,bean,factory,to,obtain,instance,s,from,param,name,the,name,of,the,bean,param,type,the,type,that,should,be,introspected,by,aspect,j;public,bean,factory,aspect,instance,factory,bean,factory,bean,factory,string,name,class,type,this,bean,factory,bean,factory,this,name,name,this,aspect,metadata,new,aspect,metadata,type,name
BeanFactoryAspectInstanceFactory -> @Override 	public int getOrder();1356735495;Determine the order for this factory's target aspect, either_an instance-specific order expressed through implementing the_{@link org.springframework.core.Ordered} interface (only_checked for singleton beans), or an order expressed through the_{@link org.springframework.core.annotation.Order} annotation_at the class level._@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order;@Override_	public int getOrder() {_		Class<?> type = this.beanFactory.getType(this.name)__		if (type != null) {_			if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {_				return ((Ordered) this.beanFactory.getBean(this.name)).getOrder()__			}_			Order order = type.getAnnotation(Order.class)__			if (order != null) {_				return order.value()__			}_		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,for,this,factory,s,target,aspect,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,only,checked,for,singleton,beans,or,an,order,expressed,through,the,link,org,springframework,core,annotation,order,annotation,at,the,class,level,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order;override,public,int,get,order,class,type,this,bean,factory,get,type,this,name,if,type,null,if,ordered,class,is,assignable,from,type,this,bean,factory,is,singleton,this,name,return,ordered,this,bean,factory,get,bean,this,name,get,order,order,order,type,get,annotation,order,class,if,order,null,return,order,value,return,ordered
BeanFactoryAspectInstanceFactory -> @Override 	public int getOrder();1368482696;Determine the order for this factory's target aspect, either_an instance-specific order expressed through implementing the_{@link org.springframework.core.Ordered} interface (only_checked for singleton beans), or an order expressed through the_{@link org.springframework.core.annotation.Order} annotation_at the class level._@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order;@Override_	public int getOrder() {_		Class<?> type = this.beanFactory.getType(this.name)__		if (type != null) {_			if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {_				return ((Ordered) this.beanFactory.getBean(this.name)).getOrder()__			}_			Order order = type.getAnnotation(Order.class)__			if (order != null) {_				return order.value()__			}_		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,for,this,factory,s,target,aspect,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,only,checked,for,singleton,beans,or,an,order,expressed,through,the,link,org,springframework,core,annotation,order,annotation,at,the,class,level,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order;override,public,int,get,order,class,type,this,bean,factory,get,type,this,name,if,type,null,if,ordered,class,is,assignable,from,type,this,bean,factory,is,singleton,this,name,return,ordered,this,bean,factory,get,bean,this,name,get,order,order,order,type,get,annotation,order,class,if,order,null,return,order,value,return,ordered
BeanFactoryAspectInstanceFactory -> @Override 	public int getOrder();1368720356;Determine the order for this factory's target aspect, either_an instance-specific order expressed through implementing the_{@link org.springframework.core.Ordered} interface (only_checked for singleton beans), or an order expressed through the_{@link org.springframework.core.annotation.Order} annotation_at the class level._@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order;@Override_	public int getOrder() {_		Class<?> type = this.beanFactory.getType(this.name)__		if (type != null) {_			if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {_				return ((Ordered) this.beanFactory.getBean(this.name)).getOrder()__			}_			Order order = AnnotationUtils.findAnnotation(type, Order.class)__			if (order != null) {_				return order.value()__			}_		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,for,this,factory,s,target,aspect,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,only,checked,for,singleton,beans,or,an,order,expressed,through,the,link,org,springframework,core,annotation,order,annotation,at,the,class,level,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order;override,public,int,get,order,class,type,this,bean,factory,get,type,this,name,if,type,null,if,ordered,class,is,assignable,from,type,this,bean,factory,is,singleton,this,name,return,ordered,this,bean,factory,get,bean,this,name,get,order,order,order,annotation,utils,find,annotation,type,order,class,if,order,null,return,order,value,return,ordered
BeanFactoryAspectInstanceFactory -> @Override 	public int getOrder();1385412762;Determine the order for this factory's target aspect, either_an instance-specific order expressed through implementing the_{@link org.springframework.core.Ordered} interface (only_checked for singleton beans), or an order expressed through the_{@link org.springframework.core.annotation.Order} annotation_at the class level._@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order;@Override_	public int getOrder() {_		Class<?> type = this.beanFactory.getType(this.name)__		if (type != null) {_			if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {_				return ((Ordered) this.beanFactory.getBean(this.name)).getOrder()__			}_			Order order = AnnotationUtils.findAnnotation(type, Order.class)__			if (order != null) {_				return order.value()__			}_		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,for,this,factory,s,target,aspect,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,only,checked,for,singleton,beans,or,an,order,expressed,through,the,link,org,springframework,core,annotation,order,annotation,at,the,class,level,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order;override,public,int,get,order,class,type,this,bean,factory,get,type,this,name,if,type,null,if,ordered,class,is,assignable,from,type,this,bean,factory,is,singleton,this,name,return,ordered,this,bean,factory,get,bean,this,name,get,order,order,order,annotation,utils,find,annotation,type,order,class,if,order,null,return,order,value,return,ordered
BeanFactoryAspectInstanceFactory -> @Override 	public int getOrder();1396355447;Determine the order for this factory's target aspect, either_an instance-specific order expressed through implementing the_{@link org.springframework.core.Ordered} interface (only_checked for singleton beans), or an order expressed through the_{@link org.springframework.core.annotation.Order} annotation_at the class level._@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order;@Override_	public int getOrder() {_		Class<?> type = this.beanFactory.getType(this.name)__		if (type != null) {_			if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {_				return ((Ordered) this.beanFactory.getBean(this.name)).getOrder()__			}_			return OrderUtils.getOrder(type, Ordered.LOWEST_PRECEDENCE)__		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,for,this,factory,s,target,aspect,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,only,checked,for,singleton,beans,or,an,order,expressed,through,the,link,org,springframework,core,annotation,order,annotation,at,the,class,level,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order;override,public,int,get,order,class,type,this,bean,factory,get,type,this,name,if,type,null,if,ordered,class,is,assignable,from,type,this,bean,factory,is,singleton,this,name,return,ordered,this,bean,factory,get,bean,this,name,get,order,return,order,utils,get,order,type,ordered,return,ordered
BeanFactoryAspectInstanceFactory -> @Override 	public int getOrder();1450815633;Determine the order for this factory's target aspect, either_an instance-specific order expressed through implementing the_{@link org.springframework.core.Ordered} interface (only_checked for singleton beans), or an order expressed through the_{@link org.springframework.core.annotation.Order} annotation_at the class level._@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order;@Override_	public int getOrder() {_		Class<?> type = this.beanFactory.getType(this.name)__		if (type != null) {_			if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {_				return ((Ordered) this.beanFactory.getBean(this.name)).getOrder()__			}_			return OrderUtils.getOrder(type, Ordered.LOWEST_PRECEDENCE)__		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,for,this,factory,s,target,aspect,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,only,checked,for,singleton,beans,or,an,order,expressed,through,the,link,org,springframework,core,annotation,order,annotation,at,the,class,level,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order;override,public,int,get,order,class,type,this,bean,factory,get,type,this,name,if,type,null,if,ordered,class,is,assignable,from,type,this,bean,factory,is,singleton,this,name,return,ordered,this,bean,factory,get,bean,this,name,get,order,return,order,utils,get,order,type,ordered,return,ordered
BeanFactoryAspectInstanceFactory -> @Override 	public int getOrder();1462345408;Determine the order for this factory's target aspect, either_an instance-specific order expressed through implementing the_{@link org.springframework.core.Ordered} interface (only_checked for singleton beans), or an order expressed through the_{@link org.springframework.core.annotation.Order} annotation_at the class level._@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order;@Override_	public int getOrder() {_		Class<?> type = this.beanFactory.getType(this.name)__		if (type != null) {_			if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {_				return ((Ordered) this.beanFactory.getBean(this.name)).getOrder()__			}_			return OrderUtils.getOrder(type, Ordered.LOWEST_PRECEDENCE)__		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,for,this,factory,s,target,aspect,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,only,checked,for,singleton,beans,or,an,order,expressed,through,the,link,org,springframework,core,annotation,order,annotation,at,the,class,level,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order;override,public,int,get,order,class,type,this,bean,factory,get,type,this,name,if,type,null,if,ordered,class,is,assignable,from,type,this,bean,factory,is,singleton,this,name,return,ordered,this,bean,factory,get,bean,this,name,get,order,return,order,utils,get,order,type,ordered,return,ordered
BeanFactoryAspectInstanceFactory -> @Override 	public int getOrder();1462374136;Determine the order for this factory's target aspect, either_an instance-specific order expressed through implementing the_{@link org.springframework.core.Ordered} interface (only_checked for singleton beans), or an order expressed through the_{@link org.springframework.core.annotation.Order} annotation_at the class level._@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order;@Override_	public int getOrder() {_		Class<?> type = this.beanFactory.getType(this.name)__		if (type != null) {_			if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {_				return ((Ordered) this.beanFactory.getBean(this.name)).getOrder()__			}_			return OrderUtils.getOrder(type, Ordered.LOWEST_PRECEDENCE)__		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,for,this,factory,s,target,aspect,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,only,checked,for,singleton,beans,or,an,order,expressed,through,the,link,org,springframework,core,annotation,order,annotation,at,the,class,level,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order;override,public,int,get,order,class,type,this,bean,factory,get,type,this,name,if,type,null,if,ordered,class,is,assignable,from,type,this,bean,factory,is,singleton,this,name,return,ordered,this,bean,factory,get,bean,this,name,get,order,return,order,utils,get,order,type,ordered,return,ordered
BeanFactoryAspectInstanceFactory -> @Override 	public int getOrder();1477690501;Determine the order for this factory's target aspect, either_an instance-specific order expressed through implementing the_{@link org.springframework.core.Ordered} interface (only_checked for singleton beans), or an order expressed through the_{@link org.springframework.core.annotation.Order} annotation_at the class level._@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order;@Override_	public int getOrder() {_		Class<?> type = this.beanFactory.getType(this.name)__		if (type != null) {_			if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {_				return ((Ordered) this.beanFactory.getBean(this.name)).getOrder()__			}_			return OrderUtils.getOrder(type, Ordered.LOWEST_PRECEDENCE)__		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,for,this,factory,s,target,aspect,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,only,checked,for,singleton,beans,or,an,order,expressed,through,the,link,org,springframework,core,annotation,order,annotation,at,the,class,level,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order;override,public,int,get,order,class,type,this,bean,factory,get,type,this,name,if,type,null,if,ordered,class,is,assignable,from,type,this,bean,factory,is,singleton,this,name,return,ordered,this,bean,factory,get,bean,this,name,get,order,return,order,utils,get,order,type,ordered,return,ordered
BeanFactoryAspectInstanceFactory -> @Override 	public int getOrder();1496837955;Determine the order for this factory's target aspect, either_an instance-specific order expressed through implementing the_{@link org.springframework.core.Ordered} interface (only_checked for singleton beans), or an order expressed through the_{@link org.springframework.core.annotation.Order} annotation_at the class level._@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order;@Override_	public int getOrder() {_		Class<?> type = this.beanFactory.getType(this.name)__		if (type != null) {_			if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {_				return ((Ordered) this.beanFactory.getBean(this.name)).getOrder()__			}_			return OrderUtils.getOrder(type, Ordered.LOWEST_PRECEDENCE)__		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,for,this,factory,s,target,aspect,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,only,checked,for,singleton,beans,or,an,order,expressed,through,the,link,org,springframework,core,annotation,order,annotation,at,the,class,level,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order;override,public,int,get,order,class,type,this,bean,factory,get,type,this,name,if,type,null,if,ordered,class,is,assignable,from,type,this,bean,factory,is,singleton,this,name,return,ordered,this,bean,factory,get,bean,this,name,get,order,return,order,utils,get,order,type,ordered,return,ordered
BeanFactoryAspectInstanceFactory -> @Override 	public int getOrder();1498780456;Determine the order for this factory's target aspect, either_an instance-specific order expressed through implementing the_{@link org.springframework.core.Ordered} interface (only_checked for singleton beans), or an order expressed through the_{@link org.springframework.core.annotation.Order} annotation_at the class level._@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order;@Override_	public int getOrder() {_		Class<?> type = this.beanFactory.getType(this.name)__		if (type != null) {_			if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {_				return ((Ordered) this.beanFactory.getBean(this.name)).getOrder()__			}_			return OrderUtils.getOrder(type, Ordered.LOWEST_PRECEDENCE)__		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,for,this,factory,s,target,aspect,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,only,checked,for,singleton,beans,or,an,order,expressed,through,the,link,org,springframework,core,annotation,order,annotation,at,the,class,level,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order;override,public,int,get,order,class,type,this,bean,factory,get,type,this,name,if,type,null,if,ordered,class,is,assignable,from,type,this,bean,factory,is,singleton,this,name,return,ordered,this,bean,factory,get,bean,this,name,get,order,return,order,utils,get,order,type,ordered,return,ordered
BeanFactoryAspectInstanceFactory -> @Override 	public int getOrder();1502974979;Determine the order for this factory's target aspect, either_an instance-specific order expressed through implementing the_{@link org.springframework.core.Ordered} interface (only_checked for singleton beans), or an order expressed through the_{@link org.springframework.core.annotation.Order} annotation_at the class level._@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order;@Override_	public int getOrder() {_		Class<?> type = this.beanFactory.getType(this.name)__		if (type != null) {_			if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {_				return ((Ordered) this.beanFactory.getBean(this.name)).getOrder()__			}_			return OrderUtils.getOrder(type, Ordered.LOWEST_PRECEDENCE)__		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,for,this,factory,s,target,aspect,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,only,checked,for,singleton,beans,or,an,order,expressed,through,the,link,org,springframework,core,annotation,order,annotation,at,the,class,level,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order;override,public,int,get,order,class,type,this,bean,factory,get,type,this,name,if,type,null,if,ordered,class,is,assignable,from,type,this,bean,factory,is,singleton,this,name,return,ordered,this,bean,factory,get,bean,this,name,get,order,return,order,utils,get,order,type,ordered,return,ordered
BeanFactoryAspectInstanceFactory -> @Override 	public int getOrder();1530174524;Determine the order for this factory's target aspect, either_an instance-specific order expressed through implementing the_{@link org.springframework.core.Ordered} interface (only_checked for singleton beans), or an order expressed through the_{@link org.springframework.core.annotation.Order} annotation_at the class level._@see org.springframework.core.Ordered_@see org.springframework.core.annotation.Order;@Override_	public int getOrder() {_		Class<?> type = this.beanFactory.getType(this.name)__		if (type != null) {_			if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {_				return ((Ordered) this.beanFactory.getBean(this.name)).getOrder()__			}_			return OrderUtils.getOrder(type, Ordered.LOWEST_PRECEDENCE)__		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,for,this,factory,s,target,aspect,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,only,checked,for,singleton,beans,or,an,order,expressed,through,the,link,org,springframework,core,annotation,order,annotation,at,the,class,level,see,org,springframework,core,ordered,see,org,springframework,core,annotation,order;override,public,int,get,order,class,type,this,bean,factory,get,type,this,name,if,type,null,if,ordered,class,is,assignable,from,type,this,bean,factory,is,singleton,this,name,return,ordered,this,bean,factory,get,bean,this,name,get,order,return,order,utils,get,order,type,ordered,return,ordered
