commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the location for debugging.  */ ;/**  * Set the location for debugging.  */ public void setLocation(@Nullable String location) {     this.location = location. }
true;public;0;4;/**  * Return location information about the pointcut expression  * if available. This is useful in debugging.  * @return location information as a human-readable String,  * or {@code null} if none is available  */ ;/**  * Return location information about the pointcut expression  * if available. This is useful in debugging.  * @return location information as a human-readable String,  * or {@code null} if none is available  */ @Nullable public String getLocation() {     return this.location. }
false;public;1;15;;public void setExpression(@Nullable String expression) {     this.expression = expression.     try {         onSetExpression(expression).     } catch (IllegalArgumentException ex) {         // Fill in location information if possible.         if (this.location != null) {             throw new IllegalArgumentException("Invalid expression at location [" + this.location + "]: " + ex).         } else {             throw ex.         }     } }
true;protected;1;2;/**  * Called when a new pointcut expression is set.  * The expression should be parsed at this point if possible.  * <p>This implementation is empty.  * @param expression expression to set  * @throws IllegalArgumentException if the expression is invalid  * @see #setExpression  */ ;/**  * Called when a new pointcut expression is set.  * The expression should be parsed at this point if possible.  * <p>This implementation is empty.  * @param expression expression to set  * @throws IllegalArgumentException if the expression is invalid  * @see #setExpression  */ protected void onSetExpression(@Nullable String expression) throws IllegalArgumentException { }
true;public;0;5;/**  * Return this pointcut's expression.  */ ;/**  * Return this pointcut's expression.  */ @Override @Nullable public String getExpression() {     return this.expression. }
