commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the regular expression defining methods to match.  * <p>Use either this method or {@link #setPatterns}, not both.  * @see #setPatterns  */ ;/**  * Set the regular expression defining methods to match.  * <p>Use either this method or {@link #setPatterns}, not both.  * @see #setPatterns  */ public void setPattern(String pattern) {     setPatterns(pattern). }
true;public;1;3;/**  * Set the regular expressions defining methods to match.  * To be passed through to the pointcut implementation.  * <p>Matching will be the union of all these. if any of the  * patterns matches, the pointcut matches.  * @see AbstractRegexpMethodPointcut#setPatterns  */ ;/**  * Set the regular expressions defining methods to match.  * To be passed through to the pointcut implementation.  * <p>Matching will be the union of all these. if any of the  * patterns matches, the pointcut matches.  * @see AbstractRegexpMethodPointcut#setPatterns  */ public void setPatterns(String... patterns) {     this.patterns = patterns. }
true;public;0;12;/**  * Initialize the singleton Pointcut held within this Advisor.  */ ;/**  * Initialize the singleton Pointcut held within this Advisor.  */ @Override public Pointcut getPointcut() {     synchronized (this.pointcutMonitor) {         if (this.pointcut == null) {             this.pointcut = createPointcut().             if (this.patterns != null) {                 this.pointcut.setPatterns(this.patterns).             }         }         return this.pointcut.     } }
true;protected;0;3;/**  * Create the actual pointcut: By default, a {@link JdkRegexpMethodPointcut}  * will be used.  * @return the Pointcut instance (never {@code null})  */ ;/**  * Create the actual pointcut: By default, a {@link JdkRegexpMethodPointcut}  * will be used.  * @return the Pointcut instance (never {@code null})  */ protected AbstractRegexpMethodPointcut createPointcut() {     return new JdkRegexpMethodPointcut(). }
false;public;0;5;;@Override public String toString() {     return getClass().getName() + ": advice [" + getAdvice() + "], pointcut patterns " + ObjectUtils.nullSafeToString(this.patterns). }
