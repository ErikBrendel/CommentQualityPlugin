commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the text that will get appended to the trace data.  * <p>Default is none.  */ ;/**  * Set the text that will get appended to the trace data.  * <p>Default is none.  */ public void setPrefix(@Nullable String prefix) {     this.prefix = (prefix != null ? prefix : ""). }
true;protected;0;3;/**  * Return the text that will get appended to the trace data.  */ ;/**  * Return the text that will get appended to the trace data.  */ protected String getPrefix() {     return this.prefix. }
true;public;1;3;/**  * Set the text that will get prepended to the trace data.  * <p>Default is none.  */ ;/**  * Set the text that will get prepended to the trace data.  * <p>Default is none.  */ public void setSuffix(@Nullable String suffix) {     this.suffix = (suffix != null ? suffix : ""). }
true;protected;0;3;/**  * Return the text that will get prepended to the trace data.  */ ;/**  * Return the text that will get prepended to the trace data.  */ protected String getSuffix() {     return this.suffix. }
true;public;1;3;/**  * Set whether to log the invocation on the target class, if applicable  * (i.e. if the method is actually delegated to the target class).  * <p>Default is "false", logging the invocation based on the proxy  * interface/class name.  */ ;/**  * Set whether to log the invocation on the target class, if applicable  * (i.e. if the method is actually delegated to the target class).  * <p>Default is "false", logging the invocation based on the proxy  * interface/class name.  */ public void setLogTargetClassInvocation(boolean logTargetClassInvocation) {     this.logTargetClassInvocation = logTargetClassInvocation. }
true;protected;1;12;/**  * Create a {@code String} name for the given {@code MethodInvocation}  * that can be used for trace/logging purposes. This name is made up of the  * configured prefix, followed by the fully-qualified name of the method being  * invoked, followed by the configured suffix.  * @see #setPrefix  * @see #setSuffix  */ ;/**  * Create a {@code String} name for the given {@code MethodInvocation}  * that can be used for trace/logging purposes. This name is made up of the  * configured prefix, followed by the fully-qualified name of the method being  * invoked, followed by the configured suffix.  * @see #setPrefix  * @see #setSuffix  */ protected String createInvocationTraceName(MethodInvocation invocation) {     StringBuilder sb = new StringBuilder(getPrefix()).     Method method = invocation.getMethod().     Class<?> clazz = method.getDeclaringClass().     if (this.logTargetClassInvocation && clazz.isInstance(invocation.getThis())) {         clazz = invocation.getThis().getClass().     }     sb.append(clazz.getName()).     sb.append('.').append(method.getName()).     sb.append(getSuffix()).     return sb.toString(). }
