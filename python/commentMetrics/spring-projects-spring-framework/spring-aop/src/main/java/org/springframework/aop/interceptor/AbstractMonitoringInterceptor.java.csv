# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMonitoringInterceptor -> public void setPrefix(String prefix);1328020251;Set the text that will get appended to the trace data._<p>Default is none.;public void setPrefix(String prefix) {_		this.prefix = (prefix != null ? prefix : "")__	};set,the,text,that,will,get,appended,to,the,trace,data,p,default,is,none;public,void,set,prefix,string,prefix,this,prefix,prefix,null,prefix
AbstractMonitoringInterceptor -> public void setPrefix(String prefix);1356735495;Set the text that will get appended to the trace data._<p>Default is none.;public void setPrefix(String prefix) {_		this.prefix = (prefix != null ? prefix : "")__	};set,the,text,that,will,get,appended,to,the,trace,data,p,default,is,none;public,void,set,prefix,string,prefix,this,prefix,prefix,null,prefix
AbstractMonitoringInterceptor -> public void setPrefix(String prefix);1385412762;Set the text that will get appended to the trace data._<p>Default is none.;public void setPrefix(String prefix) {_		this.prefix = (prefix != null ? prefix : "")__	};set,the,text,that,will,get,appended,to,the,trace,data,p,default,is,none;public,void,set,prefix,string,prefix,this,prefix,prefix,null,prefix
AbstractMonitoringInterceptor -> public void setSuffix(@Nullable String suffix);1496837955;Set the text that will get prepended to the trace data._<p>Default is none.;public void setSuffix(@Nullable String suffix) {_		this.suffix = (suffix != null ? suffix : "")__	};set,the,text,that,will,get,prepended,to,the,trace,data,p,default,is,none;public,void,set,suffix,nullable,string,suffix,this,suffix,suffix,null,suffix
AbstractMonitoringInterceptor -> public void setSuffix(@Nullable String suffix);1499944780;Set the text that will get prepended to the trace data._<p>Default is none.;public void setSuffix(@Nullable String suffix) {_		this.suffix = (suffix != null ? suffix : "")__	};set,the,text,that,will,get,prepended,to,the,trace,data,p,default,is,none;public,void,set,suffix,nullable,string,suffix,this,suffix,suffix,null,suffix
AbstractMonitoringInterceptor -> protected String getPrefix();1328020251;Return the text that will get appended to the trace data.;protected String getPrefix() {_		return this.prefix__	};return,the,text,that,will,get,appended,to,the,trace,data;protected,string,get,prefix,return,this,prefix
AbstractMonitoringInterceptor -> protected String getPrefix();1356735495;Return the text that will get appended to the trace data.;protected String getPrefix() {_		return this.prefix__	};return,the,text,that,will,get,appended,to,the,trace,data;protected,string,get,prefix,return,this,prefix
AbstractMonitoringInterceptor -> protected String getPrefix();1385412762;Return the text that will get appended to the trace data.;protected String getPrefix() {_		return this.prefix__	};return,the,text,that,will,get,appended,to,the,trace,data;protected,string,get,prefix,return,this,prefix
AbstractMonitoringInterceptor -> protected String getPrefix();1496837955;Return the text that will get appended to the trace data.;protected String getPrefix() {_		return this.prefix__	};return,the,text,that,will,get,appended,to,the,trace,data;protected,string,get,prefix,return,this,prefix
AbstractMonitoringInterceptor -> protected String getPrefix();1499944780;Return the text that will get appended to the trace data.;protected String getPrefix() {_		return this.prefix__	};return,the,text,that,will,get,appended,to,the,trace,data;protected,string,get,prefix,return,this,prefix
AbstractMonitoringInterceptor -> protected String getSuffix();1328020251;Return the text that will get prepended to the trace data.;protected String getSuffix() {_		return this.suffix__	};return,the,text,that,will,get,prepended,to,the,trace,data;protected,string,get,suffix,return,this,suffix
AbstractMonitoringInterceptor -> protected String getSuffix();1356735495;Return the text that will get prepended to the trace data.;protected String getSuffix() {_		return this.suffix__	};return,the,text,that,will,get,prepended,to,the,trace,data;protected,string,get,suffix,return,this,suffix
AbstractMonitoringInterceptor -> protected String getSuffix();1385412762;Return the text that will get prepended to the trace data.;protected String getSuffix() {_		return this.suffix__	};return,the,text,that,will,get,prepended,to,the,trace,data;protected,string,get,suffix,return,this,suffix
AbstractMonitoringInterceptor -> protected String getSuffix();1496837955;Return the text that will get prepended to the trace data.;protected String getSuffix() {_		return this.suffix__	};return,the,text,that,will,get,prepended,to,the,trace,data;protected,string,get,suffix,return,this,suffix
AbstractMonitoringInterceptor -> protected String getSuffix();1499944780;Return the text that will get prepended to the trace data.;protected String getSuffix() {_		return this.suffix__	};return,the,text,that,will,get,prepended,to,the,trace,data;protected,string,get,suffix,return,this,suffix
AbstractMonitoringInterceptor -> protected String createInvocationTraceName(MethodInvocation invocation);1328020251;Create a <code>String</code> name for the given <code>MethodInvocation</code>_that can be used for trace/logging purposes. This name is made up of the_configured prefix, followed by the fully-qualified name of the method being_invoked, followed by the configured suffix._@see #setPrefix_@see #setSuffix;protected String createInvocationTraceName(MethodInvocation invocation) {_		StringBuilder sb = new StringBuilder(getPrefix())__		Method method = invocation.getMethod()__		Class clazz = method.getDeclaringClass()__		if (this.logTargetClassInvocation && clazz.isInstance(invocation.getThis())) {_			clazz = invocation.getThis().getClass()__		}_		sb.append(clazz.getName())__		sb.append('.').append(method.getName())__		sb.append(getSuffix())__		return sb.toString()__	};create,a,code,string,code,name,for,the,given,code,method,invocation,code,that,can,be,used,for,trace,logging,purposes,this,name,is,made,up,of,the,configured,prefix,followed,by,the,fully,qualified,name,of,the,method,being,invoked,followed,by,the,configured,suffix,see,set,prefix,see,set,suffix;protected,string,create,invocation,trace,name,method,invocation,invocation,string,builder,sb,new,string,builder,get,prefix,method,method,invocation,get,method,class,clazz,method,get,declaring,class,if,this,log,target,class,invocation,clazz,is,instance,invocation,get,this,clazz,invocation,get,this,get,class,sb,append,clazz,get,name,sb,append,append,method,get,name,sb,append,get,suffix,return,sb,to,string
AbstractMonitoringInterceptor -> protected String createInvocationTraceName(MethodInvocation invocation);1356735495;Create a {@code String} name for the given {@code MethodInvocation}_that can be used for trace/logging purposes. This name is made up of the_configured prefix, followed by the fully-qualified name of the method being_invoked, followed by the configured suffix._@see #setPrefix_@see #setSuffix;protected String createInvocationTraceName(MethodInvocation invocation) {_		StringBuilder sb = new StringBuilder(getPrefix())__		Method method = invocation.getMethod()__		Class clazz = method.getDeclaringClass()__		if (this.logTargetClassInvocation && clazz.isInstance(invocation.getThis())) {_			clazz = invocation.getThis().getClass()__		}_		sb.append(clazz.getName())__		sb.append('.').append(method.getName())__		sb.append(getSuffix())__		return sb.toString()__	};create,a,code,string,name,for,the,given,code,method,invocation,that,can,be,used,for,trace,logging,purposes,this,name,is,made,up,of,the,configured,prefix,followed,by,the,fully,qualified,name,of,the,method,being,invoked,followed,by,the,configured,suffix,see,set,prefix,see,set,suffix;protected,string,create,invocation,trace,name,method,invocation,invocation,string,builder,sb,new,string,builder,get,prefix,method,method,invocation,get,method,class,clazz,method,get,declaring,class,if,this,log,target,class,invocation,clazz,is,instance,invocation,get,this,clazz,invocation,get,this,get,class,sb,append,clazz,get,name,sb,append,append,method,get,name,sb,append,get,suffix,return,sb,to,string
AbstractMonitoringInterceptor -> protected String createInvocationTraceName(MethodInvocation invocation);1385412762;Create a {@code String} name for the given {@code MethodInvocation}_that can be used for trace/logging purposes. This name is made up of the_configured prefix, followed by the fully-qualified name of the method being_invoked, followed by the configured suffix._@see #setPrefix_@see #setSuffix;protected String createInvocationTraceName(MethodInvocation invocation) {_		StringBuilder sb = new StringBuilder(getPrefix())__		Method method = invocation.getMethod()__		Class<?> clazz = method.getDeclaringClass()__		if (this.logTargetClassInvocation && clazz.isInstance(invocation.getThis())) {_			clazz = invocation.getThis().getClass()__		}_		sb.append(clazz.getName())__		sb.append('.').append(method.getName())__		sb.append(getSuffix())__		return sb.toString()__	};create,a,code,string,name,for,the,given,code,method,invocation,that,can,be,used,for,trace,logging,purposes,this,name,is,made,up,of,the,configured,prefix,followed,by,the,fully,qualified,name,of,the,method,being,invoked,followed,by,the,configured,suffix,see,set,prefix,see,set,suffix;protected,string,create,invocation,trace,name,method,invocation,invocation,string,builder,sb,new,string,builder,get,prefix,method,method,invocation,get,method,class,clazz,method,get,declaring,class,if,this,log,target,class,invocation,clazz,is,instance,invocation,get,this,clazz,invocation,get,this,get,class,sb,append,clazz,get,name,sb,append,append,method,get,name,sb,append,get,suffix,return,sb,to,string
AbstractMonitoringInterceptor -> protected String createInvocationTraceName(MethodInvocation invocation);1496837955;Create a {@code String} name for the given {@code MethodInvocation}_that can be used for trace/logging purposes. This name is made up of the_configured prefix, followed by the fully-qualified name of the method being_invoked, followed by the configured suffix._@see #setPrefix_@see #setSuffix;protected String createInvocationTraceName(MethodInvocation invocation) {_		StringBuilder sb = new StringBuilder(getPrefix())__		Method method = invocation.getMethod()__		Class<?> clazz = method.getDeclaringClass()__		if (this.logTargetClassInvocation && clazz.isInstance(invocation.getThis())) {_			clazz = invocation.getThis().getClass()__		}_		sb.append(clazz.getName())__		sb.append('.').append(method.getName())__		sb.append(getSuffix())__		return sb.toString()__	};create,a,code,string,name,for,the,given,code,method,invocation,that,can,be,used,for,trace,logging,purposes,this,name,is,made,up,of,the,configured,prefix,followed,by,the,fully,qualified,name,of,the,method,being,invoked,followed,by,the,configured,suffix,see,set,prefix,see,set,suffix;protected,string,create,invocation,trace,name,method,invocation,invocation,string,builder,sb,new,string,builder,get,prefix,method,method,invocation,get,method,class,clazz,method,get,declaring,class,if,this,log,target,class,invocation,clazz,is,instance,invocation,get,this,clazz,invocation,get,this,get,class,sb,append,clazz,get,name,sb,append,append,method,get,name,sb,append,get,suffix,return,sb,to,string
AbstractMonitoringInterceptor -> protected String createInvocationTraceName(MethodInvocation invocation);1499944780;Create a {@code String} name for the given {@code MethodInvocation}_that can be used for trace/logging purposes. This name is made up of the_configured prefix, followed by the fully-qualified name of the method being_invoked, followed by the configured suffix._@see #setPrefix_@see #setSuffix;protected String createInvocationTraceName(MethodInvocation invocation) {_		StringBuilder sb = new StringBuilder(getPrefix())__		Method method = invocation.getMethod()__		Class<?> clazz = method.getDeclaringClass()__		if (this.logTargetClassInvocation && clazz.isInstance(invocation.getThis())) {_			clazz = invocation.getThis().getClass()__		}_		sb.append(clazz.getName())__		sb.append('.').append(method.getName())__		sb.append(getSuffix())__		return sb.toString()__	};create,a,code,string,name,for,the,given,code,method,invocation,that,can,be,used,for,trace,logging,purposes,this,name,is,made,up,of,the,configured,prefix,followed,by,the,fully,qualified,name,of,the,method,being,invoked,followed,by,the,configured,suffix,see,set,prefix,see,set,suffix;protected,string,create,invocation,trace,name,method,invocation,invocation,string,builder,sb,new,string,builder,get,prefix,method,method,invocation,get,method,class,clazz,method,get,declaring,class,if,this,log,target,class,invocation,clazz,is,instance,invocation,get,this,clazz,invocation,get,this,get,class,sb,append,clazz,get,name,sb,append,append,method,get,name,sb,append,get,suffix,return,sb,to,string
AbstractMonitoringInterceptor -> public void setPrefix(@Nullable String prefix);1496837955;Set the text that will get appended to the trace data._<p>Default is none.;public void setPrefix(@Nullable String prefix) {_		this.prefix = (prefix != null ? prefix : "")__	};set,the,text,that,will,get,appended,to,the,trace,data,p,default,is,none;public,void,set,prefix,nullable,string,prefix,this,prefix,prefix,null,prefix
AbstractMonitoringInterceptor -> public void setPrefix(@Nullable String prefix);1499944780;Set the text that will get appended to the trace data._<p>Default is none.;public void setPrefix(@Nullable String prefix) {_		this.prefix = (prefix != null ? prefix : "")__	};set,the,text,that,will,get,appended,to,the,trace,data,p,default,is,none;public,void,set,prefix,nullable,string,prefix,this,prefix,prefix,null,prefix
AbstractMonitoringInterceptor -> public void setSuffix(String suffix);1328020251;Set the text that will get prepended to the trace data._<p>Default is none.;public void setSuffix(String suffix) {_		this.suffix = (suffix != null ? suffix : "")__	};set,the,text,that,will,get,prepended,to,the,trace,data,p,default,is,none;public,void,set,suffix,string,suffix,this,suffix,suffix,null,suffix
AbstractMonitoringInterceptor -> public void setSuffix(String suffix);1356735495;Set the text that will get prepended to the trace data._<p>Default is none.;public void setSuffix(String suffix) {_		this.suffix = (suffix != null ? suffix : "")__	};set,the,text,that,will,get,prepended,to,the,trace,data,p,default,is,none;public,void,set,suffix,string,suffix,this,suffix,suffix,null,suffix
AbstractMonitoringInterceptor -> public void setSuffix(String suffix);1385412762;Set the text that will get prepended to the trace data._<p>Default is none.;public void setSuffix(String suffix) {_		this.suffix = (suffix != null ? suffix : "")__	};set,the,text,that,will,get,prepended,to,the,trace,data,p,default,is,none;public,void,set,suffix,string,suffix,this,suffix,suffix,null,suffix
AbstractMonitoringInterceptor -> public void setLogTargetClassInvocation(boolean logTargetClassInvocation);1328020251;Set whether to log the invocation on the target class, if applicable_(i.e. if the method is actually delegated to the target class)._<p>Default is "false", logging the invocation based on the proxy_interface/class name.;public void setLogTargetClassInvocation(boolean logTargetClassInvocation) {_		this.logTargetClassInvocation = logTargetClassInvocation__	};set,whether,to,log,the,invocation,on,the,target,class,if,applicable,i,e,if,the,method,is,actually,delegated,to,the,target,class,p,default,is,false,logging,the,invocation,based,on,the,proxy,interface,class,name;public,void,set,log,target,class,invocation,boolean,log,target,class,invocation,this,log,target,class,invocation,log,target,class,invocation
AbstractMonitoringInterceptor -> public void setLogTargetClassInvocation(boolean logTargetClassInvocation);1356735495;Set whether to log the invocation on the target class, if applicable_(i.e. if the method is actually delegated to the target class)._<p>Default is "false", logging the invocation based on the proxy_interface/class name.;public void setLogTargetClassInvocation(boolean logTargetClassInvocation) {_		this.logTargetClassInvocation = logTargetClassInvocation__	};set,whether,to,log,the,invocation,on,the,target,class,if,applicable,i,e,if,the,method,is,actually,delegated,to,the,target,class,p,default,is,false,logging,the,invocation,based,on,the,proxy,interface,class,name;public,void,set,log,target,class,invocation,boolean,log,target,class,invocation,this,log,target,class,invocation,log,target,class,invocation
AbstractMonitoringInterceptor -> public void setLogTargetClassInvocation(boolean logTargetClassInvocation);1385412762;Set whether to log the invocation on the target class, if applicable_(i.e. if the method is actually delegated to the target class)._<p>Default is "false", logging the invocation based on the proxy_interface/class name.;public void setLogTargetClassInvocation(boolean logTargetClassInvocation) {_		this.logTargetClassInvocation = logTargetClassInvocation__	};set,whether,to,log,the,invocation,on,the,target,class,if,applicable,i,e,if,the,method,is,actually,delegated,to,the,target,class,p,default,is,false,logging,the,invocation,based,on,the,proxy,interface,class,name;public,void,set,log,target,class,invocation,boolean,log,target,class,invocation,this,log,target,class,invocation,log,target,class,invocation
AbstractMonitoringInterceptor -> public void setLogTargetClassInvocation(boolean logTargetClassInvocation);1496837955;Set whether to log the invocation on the target class, if applicable_(i.e. if the method is actually delegated to the target class)._<p>Default is "false", logging the invocation based on the proxy_interface/class name.;public void setLogTargetClassInvocation(boolean logTargetClassInvocation) {_		this.logTargetClassInvocation = logTargetClassInvocation__	};set,whether,to,log,the,invocation,on,the,target,class,if,applicable,i,e,if,the,method,is,actually,delegated,to,the,target,class,p,default,is,false,logging,the,invocation,based,on,the,proxy,interface,class,name;public,void,set,log,target,class,invocation,boolean,log,target,class,invocation,this,log,target,class,invocation,log,target,class,invocation
AbstractMonitoringInterceptor -> public void setLogTargetClassInvocation(boolean logTargetClassInvocation);1499944780;Set whether to log the invocation on the target class, if applicable_(i.e. if the method is actually delegated to the target class)._<p>Default is "false", logging the invocation based on the proxy_interface/class name.;public void setLogTargetClassInvocation(boolean logTargetClassInvocation) {_		this.logTargetClassInvocation = logTargetClassInvocation__	};set,whether,to,log,the,invocation,on,the,target,class,if,applicable,i,e,if,the,method,is,actually,delegated,to,the,target,class,p,default,is,false,logging,the,invocation,based,on,the,proxy,interface,class,name;public,void,set,log,target,class,invocation,boolean,log,target,class,invocation,this,log,target,class,invocation,log,target,class,invocation
