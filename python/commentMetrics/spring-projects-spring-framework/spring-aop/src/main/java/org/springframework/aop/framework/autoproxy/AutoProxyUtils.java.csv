# id;timestamp;commentText;codeText;commentWords;codeWords
AutoProxyUtils -> public static boolean shouldProxyTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName);1328020251;Determine whether the given bean should be proxied with its target_class rather than its interfaces. Checks the_{@link #PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanFactory the containing ConfigurableListableBeanFactory_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class;public static boolean shouldProxyTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanName != null && beanFactory.containsBeanDefinition(beanName)) {_			BeanDefinition bd = beanFactory.getBeanDefinition(beanName)__			return Boolean.TRUE.equals(bd.getAttribute(PRESERVE_TARGET_CLASS_ATTRIBUTE))__		}_		return false__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,checks,the,link,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,factory,the,containing,configurable,listable,bean,factory,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class;public,static,boolean,should,proxy,target,class,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,name,null,bean,factory,contains,bean,definition,bean,name,bean,definition,bd,bean,factory,get,bean,definition,bean,name,return,boolean,true,equals,bd,get,attribute,return,false
AutoProxyUtils -> public static boolean shouldProxyTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName);1356735495;Determine whether the given bean should be proxied with its target_class rather than its interfaces. Checks the_{@link #PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanFactory the containing ConfigurableListableBeanFactory_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class;public static boolean shouldProxyTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanName != null && beanFactory.containsBeanDefinition(beanName)) {_			BeanDefinition bd = beanFactory.getBeanDefinition(beanName)__			return Boolean.TRUE.equals(bd.getAttribute(PRESERVE_TARGET_CLASS_ATTRIBUTE))__		}_		return false__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,checks,the,link,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,factory,the,containing,configurable,listable,bean,factory,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class;public,static,boolean,should,proxy,target,class,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,name,null,bean,factory,contains,bean,definition,bean,name,bean,definition,bd,bean,factory,get,bean,definition,bean,name,return,boolean,true,equals,bd,get,attribute,return,false
AutoProxyUtils -> public static boolean shouldProxyTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName);1447077603;Determine whether the given bean should be proxied with its target_class rather than its interfaces. Checks the_{@link #PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanFactory the containing ConfigurableListableBeanFactory_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class;public static boolean shouldProxyTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanName != null && beanFactory.containsBeanDefinition(beanName)) {_			BeanDefinition bd = beanFactory.getBeanDefinition(beanName)__			return Boolean.TRUE.equals(bd.getAttribute(PRESERVE_TARGET_CLASS_ATTRIBUTE))__		}_		return false__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,checks,the,link,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,factory,the,containing,configurable,listable,bean,factory,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class;public,static,boolean,should,proxy,target,class,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,name,null,bean,factory,contains,bean,definition,bean,name,bean,definition,bd,bean,factory,get,bean,definition,bean,name,return,boolean,true,equals,bd,get,attribute,return,false
AutoProxyUtils -> public static boolean shouldProxyTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName);1447399395;Determine whether the given bean should be proxied with its target_class rather than its interfaces. Checks the_{@link #PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanFactory the containing ConfigurableListableBeanFactory_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class;public static boolean shouldProxyTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanName != null && beanFactory.containsBeanDefinition(beanName)) {_			BeanDefinition bd = beanFactory.getBeanDefinition(beanName)__			return Boolean.TRUE.equals(bd.getAttribute(PRESERVE_TARGET_CLASS_ATTRIBUTE))__		}_		return false__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,checks,the,link,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,factory,the,containing,configurable,listable,bean,factory,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class;public,static,boolean,should,proxy,target,class,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,name,null,bean,factory,contains,bean,definition,bean,name,bean,definition,bd,bean,factory,get,bean,definition,bean,name,return,boolean,true,equals,bd,get,attribute,return,false
AutoProxyUtils -> public static boolean shouldProxyTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName);1461047077;Determine whether the given bean should be proxied with its target_class rather than its interfaces. Checks the_{@link #PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanFactory the containing ConfigurableListableBeanFactory_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class;public static boolean shouldProxyTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanName != null && beanFactory.containsBeanDefinition(beanName)) {_			BeanDefinition bd = beanFactory.getBeanDefinition(beanName)__			return Boolean.TRUE.equals(bd.getAttribute(PRESERVE_TARGET_CLASS_ATTRIBUTE))__		}_		return false__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,checks,the,link,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,factory,the,containing,configurable,listable,bean,factory,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class;public,static,boolean,should,proxy,target,class,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,name,null,bean,factory,contains,bean,definition,bean,name,bean,definition,bd,bean,factory,get,bean,definition,bean,name,return,boolean,true,equals,bd,get,attribute,return,false
AutoProxyUtils -> public static boolean shouldProxyTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName);1495868221;Determine whether the given bean should be proxied with its target_class rather than its interfaces. Checks the_{@link #PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanFactory the containing ConfigurableListableBeanFactory_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class;public static boolean shouldProxyTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanName != null && beanFactory.containsBeanDefinition(beanName)) {_			BeanDefinition bd = beanFactory.getBeanDefinition(beanName)__			return Boolean.TRUE.equals(bd.getAttribute(PRESERVE_TARGET_CLASS_ATTRIBUTE))__		}_		return false__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,checks,the,link,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,factory,the,containing,configurable,listable,bean,factory,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class;public,static,boolean,should,proxy,target,class,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,name,null,bean,factory,contains,bean,definition,bean,name,bean,definition,bd,bean,factory,get,bean,definition,bean,name,return,boolean,true,equals,bd,get,attribute,return,false
AutoProxyUtils -> static void exposeTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName, Class<?> targetClass);1447077603;Expose the given target class for the specified bean._@param beanFactory the containing ConfigurableListableBeanFactory_@param beanName the name of the bean_@param targetClass the corresponding target class_@since 4.2.3;static void exposeTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName, Class<?> targetClass) {_		if (beanFactory.containsBeanDefinition(beanName)) {_			beanFactory.getMergedBeanDefinition(beanName).setAttribute(ORIGINAL_TARGET_CLASS_ATTRIBUTE, targetClass)__		}_	};expose,the,given,target,class,for,the,specified,bean,param,bean,factory,the,containing,configurable,listable,bean,factory,param,bean,name,the,name,of,the,bean,param,target,class,the,corresponding,target,class,since,4,2,3;static,void,expose,target,class,configurable,listable,bean,factory,bean,factory,string,bean,name,class,target,class,if,bean,factory,contains,bean,definition,bean,name,bean,factory,get,merged,bean,definition,bean,name,set,attribute,target,class
AutoProxyUtils -> static void exposeTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName, Class<?> targetClass);1447399395;Expose the given target class for the specified bean, if possible._@param beanFactory the containing ConfigurableListableBeanFactory_@param beanName the name of the bean_@param targetClass the corresponding target class_@since 4.2.3;static void exposeTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName, Class<?> targetClass) {_		if (beanName != null && beanFactory.containsBeanDefinition(beanName)) {_			beanFactory.getMergedBeanDefinition(beanName).setAttribute(ORIGINAL_TARGET_CLASS_ATTRIBUTE, targetClass)__		}_	};expose,the,given,target,class,for,the,specified,bean,if,possible,param,bean,factory,the,containing,configurable,listable,bean,factory,param,bean,name,the,name,of,the,bean,param,target,class,the,corresponding,target,class,since,4,2,3;static,void,expose,target,class,configurable,listable,bean,factory,bean,factory,string,bean,name,class,target,class,if,bean,name,null,bean,factory,contains,bean,definition,bean,name,bean,factory,get,merged,bean,definition,bean,name,set,attribute,target,class
AutoProxyUtils -> static void exposeTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName, Class<?> targetClass);1461047077;Expose the given target class for the specified bean, if possible._@param beanFactory the containing ConfigurableListableBeanFactory_@param beanName the name of the bean_@param targetClass the corresponding target class_@since 4.2.3;static void exposeTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName, Class<?> targetClass) {_		if (beanName != null && beanFactory.containsBeanDefinition(beanName)) {_			beanFactory.getMergedBeanDefinition(beanName).setAttribute(ORIGINAL_TARGET_CLASS_ATTRIBUTE, targetClass)__		}_	};expose,the,given,target,class,for,the,specified,bean,if,possible,param,bean,factory,the,containing,configurable,listable,bean,factory,param,bean,name,the,name,of,the,bean,param,target,class,the,corresponding,target,class,since,4,2,3;static,void,expose,target,class,configurable,listable,bean,factory,bean,factory,string,bean,name,class,target,class,if,bean,name,null,bean,factory,contains,bean,definition,bean,name,bean,factory,get,merged,bean,definition,bean,name,set,attribute,target,class
AutoProxyUtils -> static void exposeTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName, Class<?> targetClass);1495868221;Expose the given target class for the specified bean, if possible._@param beanFactory the containing ConfigurableListableBeanFactory_@param beanName the name of the bean_@param targetClass the corresponding target class_@since 4.2.3;static void exposeTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName, Class<?> targetClass) {_		if (beanName != null && beanFactory.containsBeanDefinition(beanName)) {_			beanFactory.getMergedBeanDefinition(beanName).setAttribute(ORIGINAL_TARGET_CLASS_ATTRIBUTE, targetClass)__		}_	};expose,the,given,target,class,for,the,specified,bean,if,possible,param,bean,factory,the,containing,configurable,listable,bean,factory,param,bean,name,the,name,of,the,bean,param,target,class,the,corresponding,target,class,since,4,2,3;static,void,expose,target,class,configurable,listable,bean,factory,bean,factory,string,bean,name,class,target,class,if,bean,name,null,bean,factory,contains,bean,definition,bean,name,bean,factory,get,merged,bean,definition,bean,name,set,attribute,target,class
AutoProxyUtils -> public static Class<?> determineTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName);1447077603;Determine the original target class for the specified bean, if possible,_otherwise falling back to a regular {@code getType} lookup._@param beanFactory the containing ConfigurableListableBeanFactory_@param beanName the name of the bean_@return the original target class as stored in the bean definition, if any_@since 4.2.3_@see org.springframework.beans.factory.BeanFactory#getType(String);public static Class<?> determineTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanName == null) {_			return null__		}_		if (beanFactory.containsBeanDefinition(beanName)) {_			BeanDefinition bd = beanFactory.getMergedBeanDefinition(beanName)__			Class<?> targetClass = (Class<?>) bd.getAttribute(ORIGINAL_TARGET_CLASS_ATTRIBUTE)__			if (targetClass != null) {_				return targetClass__			}_		}_		return beanFactory.getType(beanName)__	};determine,the,original,target,class,for,the,specified,bean,if,possible,otherwise,falling,back,to,a,regular,code,get,type,lookup,param,bean,factory,the,containing,configurable,listable,bean,factory,param,bean,name,the,name,of,the,bean,return,the,original,target,class,as,stored,in,the,bean,definition,if,any,since,4,2,3,see,org,springframework,beans,factory,bean,factory,get,type,string;public,static,class,determine,target,class,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,name,null,return,null,if,bean,factory,contains,bean,definition,bean,name,bean,definition,bd,bean,factory,get,merged,bean,definition,bean,name,class,target,class,class,bd,get,attribute,if,target,class,null,return,target,class,return,bean,factory,get,type,bean,name
AutoProxyUtils -> public static Class<?> determineTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName);1447399395;Determine the original target class for the specified bean, if possible,_otherwise falling back to a regular {@code getType} lookup._@param beanFactory the containing ConfigurableListableBeanFactory_@param beanName the name of the bean_@return the original target class as stored in the bean definition, if any_@since 4.2.3_@see org.springframework.beans.factory.BeanFactory#getType(String);public static Class<?> determineTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanName == null) {_			return null__		}_		if (beanFactory.containsBeanDefinition(beanName)) {_			BeanDefinition bd = beanFactory.getMergedBeanDefinition(beanName)__			Class<?> targetClass = (Class<?>) bd.getAttribute(ORIGINAL_TARGET_CLASS_ATTRIBUTE)__			if (targetClass != null) {_				return targetClass__			}_		}_		return beanFactory.getType(beanName)__	};determine,the,original,target,class,for,the,specified,bean,if,possible,otherwise,falling,back,to,a,regular,code,get,type,lookup,param,bean,factory,the,containing,configurable,listable,bean,factory,param,bean,name,the,name,of,the,bean,return,the,original,target,class,as,stored,in,the,bean,definition,if,any,since,4,2,3,see,org,springframework,beans,factory,bean,factory,get,type,string;public,static,class,determine,target,class,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,name,null,return,null,if,bean,factory,contains,bean,definition,bean,name,bean,definition,bd,bean,factory,get,merged,bean,definition,bean,name,class,target,class,class,bd,get,attribute,if,target,class,null,return,target,class,return,bean,factory,get,type,bean,name
AutoProxyUtils -> public static Class<?> determineTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName);1461047077;Determine the original target class for the specified bean, if possible,_otherwise falling back to a regular {@code getType} lookup._@param beanFactory the containing ConfigurableListableBeanFactory_@param beanName the name of the bean_@return the original target class as stored in the bean definition, if any_@since 4.2.3_@see org.springframework.beans.factory.BeanFactory#getType(String);public static Class<?> determineTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanName == null) {_			return null__		}_		if (beanFactory.containsBeanDefinition(beanName)) {_			BeanDefinition bd = beanFactory.getMergedBeanDefinition(beanName)__			Class<?> targetClass = (Class<?>) bd.getAttribute(ORIGINAL_TARGET_CLASS_ATTRIBUTE)__			if (targetClass != null) {_				return targetClass__			}_		}_		return beanFactory.getType(beanName)__	};determine,the,original,target,class,for,the,specified,bean,if,possible,otherwise,falling,back,to,a,regular,code,get,type,lookup,param,bean,factory,the,containing,configurable,listable,bean,factory,param,bean,name,the,name,of,the,bean,return,the,original,target,class,as,stored,in,the,bean,definition,if,any,since,4,2,3,see,org,springframework,beans,factory,bean,factory,get,type,string;public,static,class,determine,target,class,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,name,null,return,null,if,bean,factory,contains,bean,definition,bean,name,bean,definition,bd,bean,factory,get,merged,bean,definition,bean,name,class,target,class,class,bd,get,attribute,if,target,class,null,return,target,class,return,bean,factory,get,type,bean,name
