commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;9;/**  * Determine whether the given bean should be proxied with its target  * class rather than its interfaces. Checks the  * {@link #PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}  * of the corresponding bean definition.  * @param beanFactory the containing ConfigurableListableBeanFactory  * @param beanName the name of the bean  * @return whether the given bean should be proxied with its target class  */ ;/**  * Determine whether the given bean should be proxied with its target  * class rather than its interfaces. Checks the  * {@link #PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}  * of the corresponding bean definition.  * @param beanFactory the containing ConfigurableListableBeanFactory  * @param beanName the name of the bean  * @return whether the given bean should be proxied with its target class  */ public static boolean shouldProxyTargetClass(ConfigurableListableBeanFactory beanFactory, @Nullable String beanName) {     if (beanName != null && beanFactory.containsBeanDefinition(beanName)) {         BeanDefinition bd = beanFactory.getBeanDefinition(beanName).         return Boolean.TRUE.equals(bd.getAttribute(PRESERVE_TARGET_CLASS_ATTRIBUTE)).     }     return false. }
true;public,static;2;16;/**  * Determine the original target class for the specified bean, if possible,  * otherwise falling back to a regular {@code getType} lookup.  * @param beanFactory the containing ConfigurableListableBeanFactory  * @param beanName the name of the bean  * @return the original target class as stored in the bean definition, if any  * @since 4.2.3  * @see org.springframework.beans.factory.BeanFactory#getType(String)  */ ;/**  * Determine the original target class for the specified bean, if possible,  * otherwise falling back to a regular {@code getType} lookup.  * @param beanFactory the containing ConfigurableListableBeanFactory  * @param beanName the name of the bean  * @return the original target class as stored in the bean definition, if any  * @since 4.2.3  * @see org.springframework.beans.factory.BeanFactory#getType(String)  */ @Nullable public static Class<?> determineTargetClass(ConfigurableListableBeanFactory beanFactory, @Nullable String beanName) {     if (beanName == null) {         return null.     }     if (beanFactory.containsBeanDefinition(beanName)) {         BeanDefinition bd = beanFactory.getMergedBeanDefinition(beanName).         Class<?> targetClass = (Class<?>) bd.getAttribute(ORIGINAL_TARGET_CLASS_ATTRIBUTE).         if (targetClass != null) {             return targetClass.         }     }     return beanFactory.getType(beanName). }
true;static;3;7;/**  * Expose the given target class for the specified bean, if possible.  * @param beanFactory the containing ConfigurableListableBeanFactory  * @param beanName the name of the bean  * @param targetClass the corresponding target class  * @since 4.2.3  */ ;/**  * Expose the given target class for the specified bean, if possible.  * @param beanFactory the containing ConfigurableListableBeanFactory  * @param beanName the name of the bean  * @param targetClass the corresponding target class  * @since 4.2.3  */ static void exposeTargetClass(ConfigurableListableBeanFactory beanFactory, @Nullable String beanName, Class<?> targetClass) {     if (beanName != null && beanFactory.containsBeanDefinition(beanName)) {         beanFactory.getMergedBeanDefinition(beanName).setAttribute(ORIGINAL_TARGET_CLASS_ATTRIBUTE, targetClass).     } }
true;static;2;8;/**  * Determine whether the given bean name indicates an "original instance"  * according to {@link AutowireCapableBeanFactory#ORIGINAL_INSTANCE_SUFFIX},  * skipping any proxy attempts for it.  * @param beanName the name of the bean  * @param beanClass the corresponding bean class  * @since 5.1  * @see AutowireCapableBeanFactory#ORIGINAL_INSTANCE_SUFFIX  */ ;/**  * Determine whether the given bean name indicates an "original instance"  * according to {@link AutowireCapableBeanFactory#ORIGINAL_INSTANCE_SUFFIX},  * skipping any proxy attempts for it.  * @param beanName the name of the bean  * @param beanClass the corresponding bean class  * @since 5.1  * @see AutowireCapableBeanFactory#ORIGINAL_INSTANCE_SUFFIX  */ static boolean isOriginalInstance(String beanName, Class<?> beanClass) {     if (!StringUtils.hasLength(beanName) || beanName.length() != beanClass.getName().length() + AutowireCapableBeanFactory.ORIGINAL_INSTANCE_SUFFIX.length()) {         return false.     }     return (beanName.startsWith(beanClass.getName()) && beanName.endsWith(AutowireCapableBeanFactory.ORIGINAL_INSTANCE_SUFFIX)). }
