commented;modifiers;parameterAmount;loc;comment;code
false;public;2;8;;@Override public int compare(Advisor o1, Advisor o2) {     int advisorPrecedence = this.advisorComparator.compare(o1, o2).     if (advisorPrecedence == SAME_PRECEDENCE && declaredInSameAspect(o1, o2)) {         advisorPrecedence = comparePrecedenceWithinAspect(o1, o2).     }     return advisorPrecedence. }
false;private;2;34;;private int comparePrecedenceWithinAspect(Advisor advisor1, Advisor advisor2) {     boolean oneOrOtherIsAfterAdvice = (AspectJAopUtils.isAfterAdvice(advisor1) || AspectJAopUtils.isAfterAdvice(advisor2)).     int adviceDeclarationOrderDelta = getAspectDeclarationOrder(advisor1) - getAspectDeclarationOrder(advisor2).     if (oneOrOtherIsAfterAdvice) {         // the advice declared last has higher precedence         if (adviceDeclarationOrderDelta < 0) {             // so advice1 has lower precedence             return LOWER_PRECEDENCE.         } else if (adviceDeclarationOrderDelta == 0) {             return SAME_PRECEDENCE.         } else {             return HIGHER_PRECEDENCE.         }     } else {         // the advice declared first has higher precedence         if (adviceDeclarationOrderDelta < 0) {             // so advice1 has higher precedence             return HIGHER_PRECEDENCE.         } else if (adviceDeclarationOrderDelta == 0) {             return SAME_PRECEDENCE.         } else {             return LOWER_PRECEDENCE.         }     } }
false;private;2;4;;private boolean declaredInSameAspect(Advisor advisor1, Advisor advisor2) {     return (hasAspectName(advisor1) && hasAspectName(advisor2) && getAspectName(advisor1).equals(getAspectName(advisor2))). }
false;private;1;4;;private boolean hasAspectName(Advisor anAdvisor) {     return (anAdvisor instanceof AspectJPrecedenceInformation || anAdvisor.getAdvice() instanceof AspectJPrecedenceInformation). }
true;private;1;5;// pre-condition is that hasAspectName returned true ;// pre-condition is that hasAspectName returned true private String getAspectName(Advisor anAdvisor) {     AspectJPrecedenceInformation pi = AspectJAopUtils.getAspectJPrecedenceInformationFor(anAdvisor).     Assert.state(pi != null, "Unresolvable precedence information").     return pi.getAspectName(). }
false;private;1;10;;private int getAspectDeclarationOrder(Advisor anAdvisor) {     AspectJPrecedenceInformation precedenceInfo = AspectJAopUtils.getAspectJPrecedenceInformationFor(anAdvisor).     if (precedenceInfo != null) {         return precedenceInfo.getDeclarationOrder().     } else {         return 0.     } }
