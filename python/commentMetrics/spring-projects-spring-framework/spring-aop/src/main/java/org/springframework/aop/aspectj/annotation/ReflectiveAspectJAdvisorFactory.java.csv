# id;timestamp;commentText;codeText;commentWords;codeWords
ReflectiveAspectJAdvisorFactory -> private Advisor getDeclareParentsAdvisor(Field introductionField);1328020251;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return <code>null</code> if not an Advisor;private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = (DeclareParents) introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class.equals(declareParents.defaultImpl())) {_			_			_			throw new IllegalStateException("defaultImpl must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,code,if,not,an,advisor;private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,equals,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> private Advisor getDeclareParentsAdvisor(Field introductionField);1346940376;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return <code>null</code> if not an Advisor;private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class.equals(declareParents.defaultImpl())) {_			_			_			throw new IllegalStateException("defaultImpl must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,code,if,not,an,advisor;private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,equals,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> private Advisor getDeclareParentsAdvisor(Field introductionField);1356735495;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class.equals(declareParents.defaultImpl())) {_			_			_			throw new IllegalStateException("defaultImpl must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,equals,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> private Advisor getDeclareParentsAdvisor(Field introductionField);1357119239;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class.equals(declareParents.defaultImpl())) {_			_			_			throw new IllegalStateException("defaultImpl must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,equals,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> private Advisor getDeclareParentsAdvisor(Field introductionField);1368482696;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class.equals(declareParents.defaultImpl())) {_			_			_			throw new IllegalStateException("defaultImpl must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,equals,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> private Advisor getDeclareParentsAdvisor(Field introductionField);1385412762;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class.equals(declareParents.defaultImpl())) {_			_			_			throw new IllegalStateException("defaultImpl must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,equals,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> private Advisor getDeclareParentsAdvisor(Field introductionField);1432125256;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class == declareParents.defaultImpl()) {_			_			_			throw new IllegalStateException("defaultImpl must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> private Advisor getDeclareParentsAdvisor(Field introductionField);1450815633;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class == declareParents.defaultImpl()) {_			_			_			throw new IllegalStateException("defaultImpl must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> private Advisor getDeclareParentsAdvisor(Field introductionField);1450827071;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class == declareParents.defaultImpl()) {_			_			_			throw new IllegalStateException("defaultImpl must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> private Advisor getDeclareParentsAdvisor(Field introductionField);1467730834;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class == declareParents.defaultImpl()) {_			_			_			throw new IllegalStateException("defaultImpl must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> private Advisor getDeclareParentsAdvisor(Field introductionField);1482422404;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class == declareParents.defaultImpl()) {_			throw new IllegalStateException("'defaultImpl' attribute must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,attribute,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> private Advisor getDeclareParentsAdvisor(Field introductionField);1487178332;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class == declareParents.defaultImpl()) {_			throw new IllegalStateException("'defaultImpl' attribute must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,attribute,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory(BeanFactory beanFactory);1482422404;Create a new {@code ReflectiveAspectJAdvisorFactory}, propagating the given_{@link BeanFactory} to the created {@link AspectJExpressionPointcut} instances,_for bean pointcut handling as well as consistent {@link ClassLoader} resolution._@param beanFactory the BeanFactory to propagate (may be {@code null}}_@since 4.3.6_@see AspectJExpressionPointcut#setBeanFactory_@see org.springframework.beans.factory.config.ConfigurableBeanFactory#getBeanClassLoader();public ReflectiveAspectJAdvisorFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,code,reflective,aspect,jadvisor,factory,propagating,the,given,link,bean,factory,to,the,created,link,aspect,jexpression,pointcut,instances,for,bean,pointcut,handling,as,well,as,consistent,link,class,loader,resolution,param,bean,factory,the,bean,factory,to,propagate,may,be,code,null,since,4,3,6,see,aspect,jexpression,pointcut,set,bean,factory,see,org,springframework,beans,factory,config,configurable,bean,factory,get,bean,class,loader;public,reflective,aspect,jadvisor,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory(BeanFactory beanFactory);1487178332;Create a new {@code ReflectiveAspectJAdvisorFactory}, propagating the given_{@link BeanFactory} to the created {@link AspectJExpressionPointcut} instances,_for bean pointcut handling as well as consistent {@link ClassLoader} resolution._@param beanFactory the BeanFactory to propagate (may be {@code null}}_@since 4.3.6_@see AspectJExpressionPointcut#setBeanFactory_@see org.springframework.beans.factory.config.ConfigurableBeanFactory#getBeanClassLoader();public ReflectiveAspectJAdvisorFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,code,reflective,aspect,jadvisor,factory,propagating,the,given,link,bean,factory,to,the,created,link,aspect,jexpression,pointcut,instances,for,bean,pointcut,handling,as,well,as,consistent,link,class,loader,resolution,param,bean,factory,the,bean,factory,to,propagate,may,be,code,null,since,4,3,6,see,aspect,jexpression,pointcut,set,bean,factory,see,org,springframework,beans,factory,config,configurable,bean,factory,get,bean,class,loader;public,reflective,aspect,jadvisor,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory);1495868221;Create a new {@code ReflectiveAspectJAdvisorFactory}, propagating the given_{@link BeanFactory} to the created {@link AspectJExpressionPointcut} instances,_for bean pointcut handling as well as consistent {@link ClassLoader} resolution._@param beanFactory the BeanFactory to propagate (may be {@code null}}_@since 4.3.6_@see AspectJExpressionPointcut#setBeanFactory_@see org.springframework.beans.factory.config.ConfigurableBeanFactory#getBeanClassLoader();public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,code,reflective,aspect,jadvisor,factory,propagating,the,given,link,bean,factory,to,the,created,link,aspect,jexpression,pointcut,instances,for,bean,pointcut,handling,as,well,as,consistent,link,class,loader,resolution,param,bean,factory,the,bean,factory,to,propagate,may,be,code,null,since,4,3,6,see,aspect,jexpression,pointcut,set,bean,factory,see,org,springframework,beans,factory,config,configurable,bean,factory,get,bean,class,loader;public,reflective,aspect,jadvisor,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory);1496242568;Create a new {@code ReflectiveAspectJAdvisorFactory}, propagating the given_{@link BeanFactory} to the created {@link AspectJExpressionPointcut} instances,_for bean pointcut handling as well as consistent {@link ClassLoader} resolution._@param beanFactory the BeanFactory to propagate (may be {@code null}}_@since 4.3.6_@see AspectJExpressionPointcut#setBeanFactory_@see org.springframework.beans.factory.config.ConfigurableBeanFactory#getBeanClassLoader();public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,code,reflective,aspect,jadvisor,factory,propagating,the,given,link,bean,factory,to,the,created,link,aspect,jexpression,pointcut,instances,for,bean,pointcut,handling,as,well,as,consistent,link,class,loader,resolution,param,bean,factory,the,bean,factory,to,propagate,may,be,code,null,since,4,3,6,see,aspect,jexpression,pointcut,set,bean,factory,see,org,springframework,beans,factory,config,configurable,bean,factory,get,bean,class,loader;public,reflective,aspect,jadvisor,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory);1497341397;Create a new {@code ReflectiveAspectJAdvisorFactory}, propagating the given_{@link BeanFactory} to the created {@link AspectJExpressionPointcut} instances,_for bean pointcut handling as well as consistent {@link ClassLoader} resolution._@param beanFactory the BeanFactory to propagate (may be {@code null}}_@since 4.3.6_@see AspectJExpressionPointcut#setBeanFactory_@see org.springframework.beans.factory.config.ConfigurableBeanFactory#getBeanClassLoader();public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,code,reflective,aspect,jadvisor,factory,propagating,the,given,link,bean,factory,to,the,created,link,aspect,jexpression,pointcut,instances,for,bean,pointcut,handling,as,well,as,consistent,link,class,loader,resolution,param,bean,factory,the,bean,factory,to,propagate,may,be,code,null,since,4,3,6,see,aspect,jexpression,pointcut,set,bean,factory,see,org,springframework,beans,factory,config,configurable,bean,factory,get,bean,class,loader;public,reflective,aspect,jadvisor,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory);1498780456;Create a new {@code ReflectiveAspectJAdvisorFactory}, propagating the given_{@link BeanFactory} to the created {@link AspectJExpressionPointcut} instances,_for bean pointcut handling as well as consistent {@link ClassLoader} resolution._@param beanFactory the BeanFactory to propagate (may be {@code null}}_@since 4.3.6_@see AspectJExpressionPointcut#setBeanFactory_@see org.springframework.beans.factory.config.ConfigurableBeanFactory#getBeanClassLoader();public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,code,reflective,aspect,jadvisor,factory,propagating,the,given,link,bean,factory,to,the,created,link,aspect,jexpression,pointcut,instances,for,bean,pointcut,handling,as,well,as,consistent,link,class,loader,resolution,param,bean,factory,the,bean,factory,to,propagate,may,be,code,null,since,4,3,6,see,aspect,jexpression,pointcut,set,bean,factory,see,org,springframework,beans,factory,config,configurable,bean,factory,get,bean,class,loader;public,reflective,aspect,jadvisor,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory);1502974979;Create a new {@code ReflectiveAspectJAdvisorFactory}, propagating the given_{@link BeanFactory} to the created {@link AspectJExpressionPointcut} instances,_for bean pointcut handling as well as consistent {@link ClassLoader} resolution._@param beanFactory the BeanFactory to propagate (may be {@code null}}_@since 4.3.6_@see AspectJExpressionPointcut#setBeanFactory_@see org.springframework.beans.factory.config.ConfigurableBeanFactory#getBeanClassLoader();public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,code,reflective,aspect,jadvisor,factory,propagating,the,given,link,bean,factory,to,the,created,link,aspect,jexpression,pointcut,instances,for,bean,pointcut,handling,as,well,as,consistent,link,class,loader,resolution,param,bean,factory,the,bean,factory,to,propagate,may,be,code,null,since,4,3,6,see,aspect,jexpression,pointcut,set,bean,factory,see,org,springframework,beans,factory,config,configurable,bean,factory,get,bean,class,loader;public,reflective,aspect,jadvisor,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory);1518770299;Create a new {@code ReflectiveAspectJAdvisorFactory}, propagating the given_{@link BeanFactory} to the created {@link AspectJExpressionPointcut} instances,_for bean pointcut handling as well as consistent {@link ClassLoader} resolution._@param beanFactory the BeanFactory to propagate (may be {@code null}}_@since 4.3.6_@see AspectJExpressionPointcut#setBeanFactory_@see org.springframework.beans.factory.config.ConfigurableBeanFactory#getBeanClassLoader();public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,code,reflective,aspect,jadvisor,factory,propagating,the,given,link,bean,factory,to,the,created,link,aspect,jexpression,pointcut,instances,for,bean,pointcut,handling,as,well,as,consistent,link,class,loader,resolution,param,bean,factory,the,bean,factory,to,propagate,may,be,code,null,since,4,3,6,see,aspect,jexpression,pointcut,set,bean,factory,see,org,springframework,beans,factory,config,configurable,bean,factory,get,bean,class,loader;public,reflective,aspect,jadvisor,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory);1518772998;Create a new {@code ReflectiveAspectJAdvisorFactory}, propagating the given_{@link BeanFactory} to the created {@link AspectJExpressionPointcut} instances,_for bean pointcut handling as well as consistent {@link ClassLoader} resolution._@param beanFactory the BeanFactory to propagate (may be {@code null}}_@since 4.3.6_@see AspectJExpressionPointcut#setBeanFactory_@see org.springframework.beans.factory.config.ConfigurableBeanFactory#getBeanClassLoader();public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,code,reflective,aspect,jadvisor,factory,propagating,the,given,link,bean,factory,to,the,created,link,aspect,jexpression,pointcut,instances,for,bean,pointcut,handling,as,well,as,consistent,link,class,loader,resolution,param,bean,factory,the,bean,factory,to,propagate,may,be,code,null,since,4,3,6,see,aspect,jexpression,pointcut,set,bean,factory,see,org,springframework,beans,factory,config,configurable,bean,factory,get,bean,class,loader;public,reflective,aspect,jadvisor,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory);1531945062;Create a new {@code ReflectiveAspectJAdvisorFactory}, propagating the given_{@link BeanFactory} to the created {@link AspectJExpressionPointcut} instances,_for bean pointcut handling as well as consistent {@link ClassLoader} resolution._@param beanFactory the BeanFactory to propagate (may be {@code null}}_@since 4.3.6_@see AspectJExpressionPointcut#setBeanFactory_@see org.springframework.beans.factory.config.ConfigurableBeanFactory#getBeanClassLoader();public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,code,reflective,aspect,jadvisor,factory,propagating,the,given,link,bean,factory,to,the,created,link,aspect,jexpression,pointcut,instances,for,bean,pointcut,handling,as,well,as,consistent,link,class,loader,resolution,param,bean,factory,the,bean,factory,to,propagate,may,be,code,null,since,4,3,6,see,aspect,jexpression,pointcut,set,bean,factory,see,org,springframework,beans,factory,config,configurable,bean,factory,get,bean,class,loader;public,reflective,aspect,jadvisor,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory);1533776825;Create a new {@code ReflectiveAspectJAdvisorFactory}, propagating the given_{@link BeanFactory} to the created {@link AspectJExpressionPointcut} instances,_for bean pointcut handling as well as consistent {@link ClassLoader} resolution._@param beanFactory the BeanFactory to propagate (may be {@code null}}_@since 4.3.6_@see AspectJExpressionPointcut#setBeanFactory_@see org.springframework.beans.factory.config.ConfigurableBeanFactory#getBeanClassLoader();public ReflectiveAspectJAdvisorFactory(@Nullable BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,code,reflective,aspect,jadvisor,factory,propagating,the,given,link,bean,factory,to,the,created,link,aspect,jexpression,pointcut,instances,for,bean,pointcut,handling,as,well,as,consistent,link,class,loader,resolution,param,bean,factory,the,bean,factory,to,propagate,may,be,code,null,since,4,3,6,see,aspect,jexpression,pointcut,set,bean,factory,see,org,springframework,beans,factory,config,configurable,bean,factory,get,bean,class,loader;public,reflective,aspect,jadvisor,factory,nullable,bean,factory,bean,factory,this,bean,factory,bean,factory
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory();1482422404;Create a new {@code ReflectiveAspectJAdvisorFactory}.;public ReflectiveAspectJAdvisorFactory() {_		this(null)__	};create,a,new,code,reflective,aspect,jadvisor,factory;public,reflective,aspect,jadvisor,factory,this,null
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory();1487178332;Create a new {@code ReflectiveAspectJAdvisorFactory}.;public ReflectiveAspectJAdvisorFactory() {_		this(null)__	};create,a,new,code,reflective,aspect,jadvisor,factory;public,reflective,aspect,jadvisor,factory,this,null
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory();1495868221;Create a new {@code ReflectiveAspectJAdvisorFactory}.;public ReflectiveAspectJAdvisorFactory() {_		this(null)__	};create,a,new,code,reflective,aspect,jadvisor,factory;public,reflective,aspect,jadvisor,factory,this,null
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory();1496242568;Create a new {@code ReflectiveAspectJAdvisorFactory}.;public ReflectiveAspectJAdvisorFactory() {_		this(null)__	};create,a,new,code,reflective,aspect,jadvisor,factory;public,reflective,aspect,jadvisor,factory,this,null
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory();1497341397;Create a new {@code ReflectiveAspectJAdvisorFactory}.;public ReflectiveAspectJAdvisorFactory() {_		this(null)__	};create,a,new,code,reflective,aspect,jadvisor,factory;public,reflective,aspect,jadvisor,factory,this,null
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory();1498780456;Create a new {@code ReflectiveAspectJAdvisorFactory}.;public ReflectiveAspectJAdvisorFactory() {_		this(null)__	};create,a,new,code,reflective,aspect,jadvisor,factory;public,reflective,aspect,jadvisor,factory,this,null
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory();1502974979;Create a new {@code ReflectiveAspectJAdvisorFactory}.;public ReflectiveAspectJAdvisorFactory() {_		this(null)__	};create,a,new,code,reflective,aspect,jadvisor,factory;public,reflective,aspect,jadvisor,factory,this,null
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory();1518770299;Create a new {@code ReflectiveAspectJAdvisorFactory}.;public ReflectiveAspectJAdvisorFactory() {_		this(null)__	};create,a,new,code,reflective,aspect,jadvisor,factory;public,reflective,aspect,jadvisor,factory,this,null
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory();1518772998;Create a new {@code ReflectiveAspectJAdvisorFactory}.;public ReflectiveAspectJAdvisorFactory() {_		this(null)__	};create,a,new,code,reflective,aspect,jadvisor,factory;public,reflective,aspect,jadvisor,factory,this,null
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory();1531945062;Create a new {@code ReflectiveAspectJAdvisorFactory}.;public ReflectiveAspectJAdvisorFactory() {_		this(null)__	};create,a,new,code,reflective,aspect,jadvisor,factory;public,reflective,aspect,jadvisor,factory,this,null
ReflectiveAspectJAdvisorFactory -> public ReflectiveAspectJAdvisorFactory();1533776825;Create a new {@code ReflectiveAspectJAdvisorFactory}.;public ReflectiveAspectJAdvisorFactory() {_		this(null)__	};create,a,new,code,reflective,aspect,jadvisor,factory;public,reflective,aspect,jadvisor,factory,this,null
ReflectiveAspectJAdvisorFactory -> @Nullable 	private Advisor getDeclareParentsAdvisor(Field introductionField);1495868221;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;@Nullable_	private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class == declareParents.defaultImpl()) {_			throw new IllegalStateException("'defaultImpl' attribute must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;nullable,private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,attribute,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> @Nullable 	private Advisor getDeclareParentsAdvisor(Field introductionField);1496242568;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;@Nullable_	private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class == declareParents.defaultImpl()) {_			throw new IllegalStateException("'defaultImpl' attribute must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;nullable,private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,attribute,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> @Nullable 	private Advisor getDeclareParentsAdvisor(Field introductionField);1497341397;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;@Nullable_	private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class == declareParents.defaultImpl()) {_			throw new IllegalStateException("'defaultImpl' attribute must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;nullable,private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,attribute,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> @Nullable 	private Advisor getDeclareParentsAdvisor(Field introductionField);1498780456;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;@Nullable_	private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class == declareParents.defaultImpl()) {_			throw new IllegalStateException("'defaultImpl' attribute must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;nullable,private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,attribute,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> @Nullable 	private Advisor getDeclareParentsAdvisor(Field introductionField);1502974979;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;@Nullable_	private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class == declareParents.defaultImpl()) {_			throw new IllegalStateException("'defaultImpl' attribute must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;nullable,private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,attribute,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> @Nullable 	private Advisor getDeclareParentsAdvisor(Field introductionField);1518770299;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return {@code null} if not an Advisor;@Nullable_	private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class == declareParents.defaultImpl()) {_			throw new IllegalStateException("'defaultImpl' attribute must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,code,null,if,not,an,advisor;nullable,private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,attribute,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> @Nullable 	private Advisor getDeclareParentsAdvisor(Field introductionField);1518772998;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return the Advisor instance, or {@code null} if not an Advisor;@Nullable_	private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class == declareParents.defaultImpl()) {_			throw new IllegalStateException("'defaultImpl' attribute must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,the,advisor,instance,or,code,null,if,not,an,advisor;nullable,private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,attribute,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> @Nullable 	private Advisor getDeclareParentsAdvisor(Field introductionField);1531945062;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return the Advisor instance, or {@code null} if not an Advisor;@Nullable_	private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class == declareParents.defaultImpl()) {_			throw new IllegalStateException("'defaultImpl' attribute must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,the,advisor,instance,or,code,null,if,not,an,advisor;nullable,private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,attribute,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
ReflectiveAspectJAdvisorFactory -> @Nullable 	private Advisor getDeclareParentsAdvisor(Field introductionField);1533776825;Build a {@link org.springframework.aop.aspectj.DeclareParentsAdvisor}_for the given introduction field._<p>Resulting Advisors will need to be evaluated for targets._@param introductionField the field to introspect_@return the Advisor instance, or {@code null} if not an Advisor;@Nullable_	private Advisor getDeclareParentsAdvisor(Field introductionField) {_		DeclareParents declareParents = introductionField.getAnnotation(DeclareParents.class)__		if (declareParents == null) {_			_			return null__		}__		if (DeclareParents.class == declareParents.defaultImpl()) {_			throw new IllegalStateException("'defaultImpl' attribute must be set on DeclareParents")__		}__		return new DeclareParentsAdvisor(_				introductionField.getType(), declareParents.value(), declareParents.defaultImpl())__	};build,a,link,org,springframework,aop,aspectj,declare,parents,advisor,for,the,given,introduction,field,p,resulting,advisors,will,need,to,be,evaluated,for,targets,param,introduction,field,the,field,to,introspect,return,the,advisor,instance,or,code,null,if,not,an,advisor;nullable,private,advisor,get,declare,parents,advisor,field,introduction,field,declare,parents,declare,parents,introduction,field,get,annotation,declare,parents,class,if,declare,parents,null,return,null,if,declare,parents,class,declare,parents,default,impl,throw,new,illegal,state,exception,default,impl,attribute,must,be,set,on,declare,parents,return,new,declare,parents,advisor,introduction,field,get,type,declare,parents,value,declare,parents,default,impl
