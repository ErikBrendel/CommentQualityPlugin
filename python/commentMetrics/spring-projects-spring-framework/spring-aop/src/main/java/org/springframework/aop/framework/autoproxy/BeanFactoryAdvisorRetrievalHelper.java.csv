commented;modifiers;parameterAmount;loc;comment;code
true;public;0;48;/**  * Find all eligible Advisor beans in the current bean factory,  * ignoring FactoryBeans and excluding beans that are currently in creation.  * @return the list of {@link org.springframework.aop.Advisor} beans  * @see #isEligibleBean  */ ;/**  * Find all eligible Advisor beans in the current bean factory,  * ignoring FactoryBeans and excluding beans that are currently in creation.  * @return the list of {@link org.springframework.aop.Advisor} beans  * @see #isEligibleBean  */ public List<Advisor> findAdvisorBeans() {     // Determine list of advisor bean names, if not cached already.     String[] advisorNames = this.cachedAdvisorBeanNames.     if (advisorNames == null) {         // Do not initialize FactoryBeans here: We need to leave all regular beans         // uninitialized to let the auto-proxy creator apply to them!         advisorNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, Advisor.class, true, false).         this.cachedAdvisorBeanNames = advisorNames.     }     if (advisorNames.length == 0) {         return new ArrayList<>().     }     List<Advisor> advisors = new ArrayList<>().     for (String name : advisorNames) {         if (isEligibleBean(name)) {             if (this.beanFactory.isCurrentlyInCreation(name)) {                 if (logger.isTraceEnabled()) {                     logger.trace("Skipping currently created advisor '" + name + "'").                 }             } else {                 try {                     advisors.add(this.beanFactory.getBean(name, Advisor.class)).                 } catch (BeanCreationException ex) {                     Throwable rootCause = ex.getMostSpecificCause().                     if (rootCause instanceof BeanCurrentlyInCreationException) {                         BeanCreationException bce = (BeanCreationException) rootCause.                         String bceBeanName = bce.getBeanName().                         if (bceBeanName != null && this.beanFactory.isCurrentlyInCreation(bceBeanName)) {                             if (logger.isTraceEnabled()) {                                 logger.trace("Skipping advisor '" + name + "' with dependency on currently created bean: " + ex.getMessage()).                             }                             // We want to find advisors other than the currently created bean itself.                             continue.                         }                     }                     throw ex.                 }             }         }     }     return advisors. }
true;protected;1;3;/**  * Determine whether the aspect bean with the given name is eligible.  * <p>The default implementation always returns {@code true}.  * @param beanName the name of the aspect bean  * @return whether the bean is eligible  */ ;/**  * Determine whether the aspect bean with the given name is eligible.  * <p>The default implementation always returns {@code true}.  * @param beanName the name of the aspect bean  * @return whether the bean is eligible  */ protected boolean isEligibleBean(String beanName) {     return true. }
