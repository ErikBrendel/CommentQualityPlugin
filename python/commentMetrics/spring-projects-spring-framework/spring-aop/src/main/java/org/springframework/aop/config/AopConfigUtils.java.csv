commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;4;;@Nullable public static BeanDefinition registerAutoProxyCreatorIfNecessary(BeanDefinitionRegistry registry) {     return registerAutoProxyCreatorIfNecessary(registry, null). }
false;public,static;2;6;;@Nullable public static BeanDefinition registerAutoProxyCreatorIfNecessary(BeanDefinitionRegistry registry, @Nullable Object source) {     return registerOrEscalateApcAsRequired(InfrastructureAdvisorAutoProxyCreator.class, registry, source). }
false;public,static;1;4;;@Nullable public static BeanDefinition registerAspectJAutoProxyCreatorIfNecessary(BeanDefinitionRegistry registry) {     return registerAspectJAutoProxyCreatorIfNecessary(registry, null). }
false;public,static;2;6;;@Nullable public static BeanDefinition registerAspectJAutoProxyCreatorIfNecessary(BeanDefinitionRegistry registry, @Nullable Object source) {     return registerOrEscalateApcAsRequired(AspectJAwareAdvisorAutoProxyCreator.class, registry, source). }
false;public,static;1;4;;@Nullable public static BeanDefinition registerAspectJAnnotationAutoProxyCreatorIfNecessary(BeanDefinitionRegistry registry) {     return registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry, null). }
false;public,static;2;6;;@Nullable public static BeanDefinition registerAspectJAnnotationAutoProxyCreatorIfNecessary(BeanDefinitionRegistry registry, @Nullable Object source) {     return registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator.class, registry, source). }
false;public,static;1;6;;public static void forceAutoProxyCreatorToUseClassProxying(BeanDefinitionRegistry registry) {     if (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) {         BeanDefinition definition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME).         definition.getPropertyValues().add("proxyTargetClass", Boolean.TRUE).     } }
false;public,static;1;6;;public static void forceAutoProxyCreatorToExposeProxy(BeanDefinitionRegistry registry) {     if (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) {         BeanDefinition definition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME).         definition.getPropertyValues().add("exposeProxy", Boolean.TRUE).     } }
false;private,static;3;25;;@Nullable private static BeanDefinition registerOrEscalateApcAsRequired(Class<?> cls, BeanDefinitionRegistry registry, @Nullable Object source) {     Assert.notNull(registry, "BeanDefinitionRegistry must not be null").     if (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) {         BeanDefinition apcDefinition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME).         if (!cls.getName().equals(apcDefinition.getBeanClassName())) {             int currentPriority = findPriorityForClass(apcDefinition.getBeanClassName()).             int requiredPriority = findPriorityForClass(cls).             if (currentPriority < requiredPriority) {                 apcDefinition.setBeanClassName(cls.getName()).             }         }         return null.     }     RootBeanDefinition beanDefinition = new RootBeanDefinition(cls).     beanDefinition.setSource(source).     beanDefinition.getPropertyValues().add("order", Ordered.HIGHEST_PRECEDENCE).     beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE).     registry.registerBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME, beanDefinition).     return beanDefinition. }
false;private,static;1;3;;private static int findPriorityForClass(Class<?> clazz) {     return APC_PRIORITY_LIST.indexOf(clazz). }
false;private,static;1;10;;private static int findPriorityForClass(@Nullable String className) {     for (int i = 0. i < APC_PRIORITY_LIST.size(). i++) {         Class<?> clazz = APC_PRIORITY_LIST.get(i).         if (clazz.getName().equals(className)) {             return i.         }     }     throw new IllegalArgumentException("Class name [" + className + "] is not a known auto-proxy creator class"). }
