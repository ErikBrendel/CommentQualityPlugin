commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the target object, that is, the bean to be wrapped with a transactional proxy.  * <p>The target may be any object, in which case a SingletonTargetSource will  * be created. If it is a TargetSource, no wrapper TargetSource is created:  * This enables the use of a pooling or prototype TargetSource etc.  * @see org.springframework.aop.TargetSource  * @see org.springframework.aop.target.SingletonTargetSource  * @see org.springframework.aop.target.LazyInitTargetSource  * @see org.springframework.aop.target.PrototypeTargetSource  * @see org.springframework.aop.target.CommonsPool2TargetSource  */ ;/**  * Set the target object, that is, the bean to be wrapped with a transactional proxy.  * <p>The target may be any object, in which case a SingletonTargetSource will  * be created. If it is a TargetSource, no wrapper TargetSource is created:  * This enables the use of a pooling or prototype TargetSource etc.  * @see org.springframework.aop.TargetSource  * @see org.springframework.aop.target.SingletonTargetSource  * @see org.springframework.aop.target.LazyInitTargetSource  * @see org.springframework.aop.target.PrototypeTargetSource  * @see org.springframework.aop.target.CommonsPool2TargetSource  */ public void setTarget(Object target) {     this.target = target. }
true;public;1;3;/**  * Specify the set of interfaces being proxied.  * <p>If not specified (the default), the AOP infrastructure works  * out which interfaces need proxying by analyzing the target,  * proxying all the interfaces that the target object implements.  */ ;/**  * Specify the set of interfaces being proxied.  * <p>If not specified (the default), the AOP infrastructure works  * out which interfaces need proxying by analyzing the target,  * proxying all the interfaces that the target object implements.  */ public void setProxyInterfaces(Class<?>[] proxyInterfaces) {     this.proxyInterfaces = proxyInterfaces. }
true;public;1;3;/**  * Set additional interceptors (or advisors) to be applied before the  * implicit transaction interceptor, e.g. a PerformanceMonitorInterceptor.  * <p>You may specify any AOP Alliance MethodInterceptors or other  * Spring AOP Advices, as well as Spring AOP Advisors.  * @see org.springframework.aop.interceptor.PerformanceMonitorInterceptor  */ ;/**  * Set additional interceptors (or advisors) to be applied before the  * implicit transaction interceptor, e.g. a PerformanceMonitorInterceptor.  * <p>You may specify any AOP Alliance MethodInterceptors or other  * Spring AOP Advices, as well as Spring AOP Advisors.  * @see org.springframework.aop.interceptor.PerformanceMonitorInterceptor  */ public void setPreInterceptors(Object[] preInterceptors) {     this.preInterceptors = preInterceptors. }
true;public;1;3;/**  * Set additional interceptors (or advisors) to be applied after the  * implicit transaction interceptor.  * <p>You may specify any AOP Alliance MethodInterceptors or other  * Spring AOP Advices, as well as Spring AOP Advisors.  */ ;/**  * Set additional interceptors (or advisors) to be applied after the  * implicit transaction interceptor.  * <p>You may specify any AOP Alliance MethodInterceptors or other  * Spring AOP Advices, as well as Spring AOP Advisors.  */ public void setPostInterceptors(Object[] postInterceptors) {     this.postInterceptors = postInterceptors. }
true;public;1;3;/**  * Specify the AdvisorAdapterRegistry to use.  * Default is the global AdvisorAdapterRegistry.  * @see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry  */ ;/**  * Specify the AdvisorAdapterRegistry to use.  * Default is the global AdvisorAdapterRegistry.  * @see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry  */ public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {     this.advisorAdapterRegistry = advisorAdapterRegistry. }
true;public;1;3;/**  * Set the ClassLoader to generate the proxy class in.  * <p>Default is the bean ClassLoader, i.e. the ClassLoader used by the  * containing BeanFactory for loading all bean classes. This can be  * overridden here for specific proxies.  */ ;/**  * Set the ClassLoader to generate the proxy class in.  * <p>Default is the bean ClassLoader, i.e. the ClassLoader used by the  * containing BeanFactory for loading all bean classes. This can be  * overridden here for specific proxies.  */ public void setProxyClassLoader(ClassLoader classLoader) {     this.proxyClassLoader = classLoader. }
false;public;1;6;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     if (this.proxyClassLoader == null) {         this.proxyClassLoader = classLoader.     } }
false;public;0;49;;@Override public void afterPropertiesSet() {     if (this.target == null) {         throw new IllegalArgumentException("Property 'target' is required").     }     if (this.target instanceof String) {         throw new IllegalArgumentException("'target' needs to be a bean reference, not a bean name as value").     }     if (this.proxyClassLoader == null) {         this.proxyClassLoader = ClassUtils.getDefaultClassLoader().     }     ProxyFactory proxyFactory = new ProxyFactory().     if (this.preInterceptors != null) {         for (Object interceptor : this.preInterceptors) {             proxyFactory.addAdvisor(this.advisorAdapterRegistry.wrap(interceptor)).         }     }     // Add the main interceptor (typically an Advisor).     proxyFactory.addAdvisor(this.advisorAdapterRegistry.wrap(createMainInterceptor())).     if (this.postInterceptors != null) {         for (Object interceptor : this.postInterceptors) {             proxyFactory.addAdvisor(this.advisorAdapterRegistry.wrap(interceptor)).         }     }     proxyFactory.copyFrom(this).     TargetSource targetSource = createTargetSource(this.target).     proxyFactory.setTargetSource(targetSource).     if (this.proxyInterfaces != null) {         proxyFactory.setInterfaces(this.proxyInterfaces).     } else if (!isProxyTargetClass()) {         // Rely on AOP infrastructure to tell us what interfaces to proxy.         Class<?> targetClass = targetSource.getTargetClass().         if (targetClass != null) {             proxyFactory.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader)).         }     }     postProcessProxyFactory(proxyFactory).     this.proxy = proxyFactory.getProxy(this.proxyClassLoader). }
true;protected;1;8;/**  * Determine a TargetSource for the given target (or TargetSource).  * @param target target. If this is an implementation of TargetSource it is  * used as our TargetSource. otherwise it is wrapped in a SingletonTargetSource.  * @return a TargetSource for this object  */ ;/**  * Determine a TargetSource for the given target (or TargetSource).  * @param target target. If this is an implementation of TargetSource it is  * used as our TargetSource. otherwise it is wrapped in a SingletonTargetSource.  * @return a TargetSource for this object  */ protected TargetSource createTargetSource(Object target) {     if (target instanceof TargetSource) {         return (TargetSource) target.     } else {         return new SingletonTargetSource(target).     } }
true;protected;1;2;/**  * A hook for subclasses to post-process the {@link ProxyFactory}  * before creating the proxy instance with it.  * @param proxyFactory the AOP ProxyFactory about to be used  * @since 4.2  */ ;/**  * A hook for subclasses to post-process the {@link ProxyFactory}  * before creating the proxy instance with it.  * @param proxyFactory the AOP ProxyFactory about to be used  * @since 4.2  */ protected void postProcessProxyFactory(ProxyFactory proxyFactory) { }
false;public;0;7;;@Override public Object getObject() {     if (this.proxy == null) {         throw new FactoryBeanNotInitializedException().     }     return this.proxy. }
false;public;0;17;;@Override @Nullable public Class<?> getObjectType() {     if (this.proxy != null) {         return this.proxy.getClass().     }     if (this.proxyInterfaces != null && this.proxyInterfaces.length == 1) {         return this.proxyInterfaces[0].     }     if (this.target instanceof TargetSource) {         return ((TargetSource) this.target).getTargetClass().     }     if (this.target != null) {         return this.target.getClass().     }     return null. }
false;public,final;0;4;;@Override public final boolean isSingleton() {     return true. }
true;protected,abstract;0;1;/**  * Create the "main" interceptor for this proxy factory bean.  * Typically an Advisor, but can also be any type of Advice.  * <p>Pre-interceptors will be applied before, post-interceptors  * will be applied after this interceptor.  */ ;/**  * Create the "main" interceptor for this proxy factory bean.  * Typically an Advisor, but can also be any type of Advice.  * <p>Pre-interceptors will be applied before, post-interceptors  * will be applied after this interceptor.  */ protected abstract Object createMainInterceptor().
