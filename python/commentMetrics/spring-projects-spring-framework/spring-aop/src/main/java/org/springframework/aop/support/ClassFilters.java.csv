commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;5;/**  * Match all classes that <i>either</i> (or both) of the given ClassFilters matches.  * @param cf1 the first ClassFilter  * @param cf2 the second ClassFilter  * @return a distinct ClassFilter that matches all classes that either  * of the given ClassFilter matches  */ ;/**  * Match all classes that <i>either</i> (or both) of the given ClassFilters matches.  * @param cf1 the first ClassFilter  * @param cf2 the second ClassFilter  * @return a distinct ClassFilter that matches all classes that either  * of the given ClassFilter matches  */ public static ClassFilter union(ClassFilter cf1, ClassFilter cf2) {     Assert.notNull(cf1, "First ClassFilter must not be null").     Assert.notNull(cf2, "Second ClassFilter must not be null").     return new UnionClassFilter(new ClassFilter[] { cf1, cf2 }). }
true;public,static;1;4;/**  * Match all classes that <i>either</i> (or all) of the given ClassFilters matches.  * @param classFilters the ClassFilters to match  * @return a distinct ClassFilter that matches all classes that either  * of the given ClassFilter matches  */ ;/**  * Match all classes that <i>either</i> (or all) of the given ClassFilters matches.  * @param classFilters the ClassFilters to match  * @return a distinct ClassFilter that matches all classes that either  * of the given ClassFilter matches  */ public static ClassFilter union(ClassFilter[] classFilters) {     Assert.notEmpty(classFilters, "ClassFilter array must not be empty").     return new UnionClassFilter(classFilters). }
true;public,static;2;5;/**  * Match all classes that <i>both</i> of the given ClassFilters match.  * @param cf1 the first ClassFilter  * @param cf2 the second ClassFilter  * @return a distinct ClassFilter that matches all classes that both  * of the given ClassFilter match  */ ;/**  * Match all classes that <i>both</i> of the given ClassFilters match.  * @param cf1 the first ClassFilter  * @param cf2 the second ClassFilter  * @return a distinct ClassFilter that matches all classes that both  * of the given ClassFilter match  */ public static ClassFilter intersection(ClassFilter cf1, ClassFilter cf2) {     Assert.notNull(cf1, "First ClassFilter must not be null").     Assert.notNull(cf2, "Second ClassFilter must not be null").     return new IntersectionClassFilter(new ClassFilter[] { cf1, cf2 }). }
true;public,static;1;4;/**  * Match all classes that <i>all</i> of the given ClassFilters match.  * @param classFilters the ClassFilters to match  * @return a distinct ClassFilter that matches all classes that both  * of the given ClassFilter match  */ ;/**  * Match all classes that <i>all</i> of the given ClassFilters match.  * @param classFilters the ClassFilters to match  * @return a distinct ClassFilter that matches all classes that both  * of the given ClassFilter match  */ public static ClassFilter intersection(ClassFilter[] classFilters) {     Assert.notEmpty(classFilters, "ClassFilter array must not be empty").     return new IntersectionClassFilter(classFilters). }
false;public;1;9;;@Override public boolean matches(Class<?> clazz) {     for (ClassFilter filter : this.filters) {         if (filter.matches(clazz)) {             return true.         }     }     return false. }
false;public;1;5;;@Override public boolean equals(Object other) {     return (this == other || (other instanceof UnionClassFilter && ObjectUtils.nullSafeEquals(this.filters, ((UnionClassFilter) other).filters))). }
false;public;0;4;;@Override public int hashCode() {     return ObjectUtils.nullSafeHashCode(this.filters). }
false;public;1;9;;@Override public boolean matches(Class<?> clazz) {     for (ClassFilter filter : this.filters) {         if (!filter.matches(clazz)) {             return false.         }     }     return true. }
false;public;1;5;;@Override public boolean equals(Object other) {     return (this == other || (other instanceof IntersectionClassFilter && ObjectUtils.nullSafeEquals(this.filters, ((IntersectionClassFilter) other).filters))). }
false;public;0;4;;@Override public int hashCode() {     return ObjectUtils.nullSafeHashCode(this.filters). }
