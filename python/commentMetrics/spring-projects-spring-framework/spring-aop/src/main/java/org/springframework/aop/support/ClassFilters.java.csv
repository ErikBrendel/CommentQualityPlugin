# id;timestamp;commentText;codeText;commentWords;codeWords
ClassFilters -> public static ClassFilter union(ClassFilter cf1, ClassFilter cf2);1328020251;Match all classes that <i>either</i> (or both) of the given ClassFilters matches._@param cf1 the first ClassFilter_@param cf2 the second ClassFilter_@return a distinct ClassFilter that matches all classes that either_of the given ClassFilter matches;public static ClassFilter union(ClassFilter cf1, ClassFilter cf2) {_		Assert.notNull(cf1, "First ClassFilter must not be null")__		Assert.notNull(cf2, "Second ClassFilter must not be null")__		return new UnionClassFilter(new ClassFilter[] {cf1, cf2})__	};match,all,classes,that,i,either,i,or,both,of,the,given,class,filters,matches,param,cf1,the,first,class,filter,param,cf2,the,second,class,filter,return,a,distinct,class,filter,that,matches,all,classes,that,either,of,the,given,class,filter,matches;public,static,class,filter,union,class,filter,cf1,class,filter,cf2,assert,not,null,cf1,first,class,filter,must,not,be,null,assert,not,null,cf2,second,class,filter,must,not,be,null,return,new,union,class,filter,new,class,filter,cf1,cf2
ClassFilters -> public static ClassFilter union(ClassFilter cf1, ClassFilter cf2);1356735495;Match all classes that <i>either</i> (or both) of the given ClassFilters matches._@param cf1 the first ClassFilter_@param cf2 the second ClassFilter_@return a distinct ClassFilter that matches all classes that either_of the given ClassFilter matches;public static ClassFilter union(ClassFilter cf1, ClassFilter cf2) {_		Assert.notNull(cf1, "First ClassFilter must not be null")__		Assert.notNull(cf2, "Second ClassFilter must not be null")__		return new UnionClassFilter(new ClassFilter[] {cf1, cf2})__	};match,all,classes,that,i,either,i,or,both,of,the,given,class,filters,matches,param,cf1,the,first,class,filter,param,cf2,the,second,class,filter,return,a,distinct,class,filter,that,matches,all,classes,that,either,of,the,given,class,filter,matches;public,static,class,filter,union,class,filter,cf1,class,filter,cf2,assert,not,null,cf1,first,class,filter,must,not,be,null,assert,not,null,cf2,second,class,filter,must,not,be,null,return,new,union,class,filter,new,class,filter,cf1,cf2
ClassFilters -> public static ClassFilter union(ClassFilter cf1, ClassFilter cf2);1357119239;Match all classes that <i>either</i> (or both) of the given ClassFilters matches._@param cf1 the first ClassFilter_@param cf2 the second ClassFilter_@return a distinct ClassFilter that matches all classes that either_of the given ClassFilter matches;public static ClassFilter union(ClassFilter cf1, ClassFilter cf2) {_		Assert.notNull(cf1, "First ClassFilter must not be null")__		Assert.notNull(cf2, "Second ClassFilter must not be null")__		return new UnionClassFilter(new ClassFilter[] {cf1, cf2})__	};match,all,classes,that,i,either,i,or,both,of,the,given,class,filters,matches,param,cf1,the,first,class,filter,param,cf2,the,second,class,filter,return,a,distinct,class,filter,that,matches,all,classes,that,either,of,the,given,class,filter,matches;public,static,class,filter,union,class,filter,cf1,class,filter,cf2,assert,not,null,cf1,first,class,filter,must,not,be,null,assert,not,null,cf2,second,class,filter,must,not,be,null,return,new,union,class,filter,new,class,filter,cf1,cf2
ClassFilters -> public static ClassFilter union(ClassFilter cf1, ClassFilter cf2);1368482696;Match all classes that <i>either</i> (or both) of the given ClassFilters matches._@param cf1 the first ClassFilter_@param cf2 the second ClassFilter_@return a distinct ClassFilter that matches all classes that either_of the given ClassFilter matches;public static ClassFilter union(ClassFilter cf1, ClassFilter cf2) {_		Assert.notNull(cf1, "First ClassFilter must not be null")__		Assert.notNull(cf2, "Second ClassFilter must not be null")__		return new UnionClassFilter(new ClassFilter[] {cf1, cf2})__	};match,all,classes,that,i,either,i,or,both,of,the,given,class,filters,matches,param,cf1,the,first,class,filter,param,cf2,the,second,class,filter,return,a,distinct,class,filter,that,matches,all,classes,that,either,of,the,given,class,filter,matches;public,static,class,filter,union,class,filter,cf1,class,filter,cf2,assert,not,null,cf1,first,class,filter,must,not,be,null,assert,not,null,cf2,second,class,filter,must,not,be,null,return,new,union,class,filter,new,class,filter,cf1,cf2
ClassFilters -> public static ClassFilter union(ClassFilter cf1, ClassFilter cf2);1385412762;Match all classes that <i>either</i> (or both) of the given ClassFilters matches._@param cf1 the first ClassFilter_@param cf2 the second ClassFilter_@return a distinct ClassFilter that matches all classes that either_of the given ClassFilter matches;public static ClassFilter union(ClassFilter cf1, ClassFilter cf2) {_		Assert.notNull(cf1, "First ClassFilter must not be null")__		Assert.notNull(cf2, "Second ClassFilter must not be null")__		return new UnionClassFilter(new ClassFilter[] {cf1, cf2})__	};match,all,classes,that,i,either,i,or,both,of,the,given,class,filters,matches,param,cf1,the,first,class,filter,param,cf2,the,second,class,filter,return,a,distinct,class,filter,that,matches,all,classes,that,either,of,the,given,class,filter,matches;public,static,class,filter,union,class,filter,cf1,class,filter,cf2,assert,not,null,cf1,first,class,filter,must,not,be,null,assert,not,null,cf2,second,class,filter,must,not,be,null,return,new,union,class,filter,new,class,filter,cf1,cf2
ClassFilters -> public static ClassFilter union(ClassFilter cf1, ClassFilter cf2);1390432202;Match all classes that <i>either</i> (or both) of the given ClassFilters matches._@param cf1 the first ClassFilter_@param cf2 the second ClassFilter_@return a distinct ClassFilter that matches all classes that either_of the given ClassFilter matches;public static ClassFilter union(ClassFilter cf1, ClassFilter cf2) {_		Assert.notNull(cf1, "First ClassFilter must not be null")__		Assert.notNull(cf2, "Second ClassFilter must not be null")__		return new UnionClassFilter(new ClassFilter[] {cf1, cf2})__	};match,all,classes,that,i,either,i,or,both,of,the,given,class,filters,matches,param,cf1,the,first,class,filter,param,cf2,the,second,class,filter,return,a,distinct,class,filter,that,matches,all,classes,that,either,of,the,given,class,filter,matches;public,static,class,filter,union,class,filter,cf1,class,filter,cf2,assert,not,null,cf1,first,class,filter,must,not,be,null,assert,not,null,cf2,second,class,filter,must,not,be,null,return,new,union,class,filter,new,class,filter,cf1,cf2
ClassFilters -> public static ClassFilter intersection(ClassFilter cf1, ClassFilter cf2);1328020251;Match all classes that <i>both</i> of the given ClassFilters match._@param cf1 the first ClassFilter_@param cf2 the second ClassFilter_@return a distinct ClassFilter that matches all classes that both_of the given ClassFilter match;public static ClassFilter intersection(ClassFilter cf1, ClassFilter cf2) {_		Assert.notNull(cf1, "First ClassFilter must not be null")__		Assert.notNull(cf2, "Second ClassFilter must not be null")__		return new IntersectionClassFilter(new ClassFilter[] {cf1, cf2})__	};match,all,classes,that,i,both,i,of,the,given,class,filters,match,param,cf1,the,first,class,filter,param,cf2,the,second,class,filter,return,a,distinct,class,filter,that,matches,all,classes,that,both,of,the,given,class,filter,match;public,static,class,filter,intersection,class,filter,cf1,class,filter,cf2,assert,not,null,cf1,first,class,filter,must,not,be,null,assert,not,null,cf2,second,class,filter,must,not,be,null,return,new,intersection,class,filter,new,class,filter,cf1,cf2
ClassFilters -> public static ClassFilter intersection(ClassFilter cf1, ClassFilter cf2);1356735495;Match all classes that <i>both</i> of the given ClassFilters match._@param cf1 the first ClassFilter_@param cf2 the second ClassFilter_@return a distinct ClassFilter that matches all classes that both_of the given ClassFilter match;public static ClassFilter intersection(ClassFilter cf1, ClassFilter cf2) {_		Assert.notNull(cf1, "First ClassFilter must not be null")__		Assert.notNull(cf2, "Second ClassFilter must not be null")__		return new IntersectionClassFilter(new ClassFilter[] {cf1, cf2})__	};match,all,classes,that,i,both,i,of,the,given,class,filters,match,param,cf1,the,first,class,filter,param,cf2,the,second,class,filter,return,a,distinct,class,filter,that,matches,all,classes,that,both,of,the,given,class,filter,match;public,static,class,filter,intersection,class,filter,cf1,class,filter,cf2,assert,not,null,cf1,first,class,filter,must,not,be,null,assert,not,null,cf2,second,class,filter,must,not,be,null,return,new,intersection,class,filter,new,class,filter,cf1,cf2
ClassFilters -> public static ClassFilter intersection(ClassFilter cf1, ClassFilter cf2);1357119239;Match all classes that <i>both</i> of the given ClassFilters match._@param cf1 the first ClassFilter_@param cf2 the second ClassFilter_@return a distinct ClassFilter that matches all classes that both_of the given ClassFilter match;public static ClassFilter intersection(ClassFilter cf1, ClassFilter cf2) {_		Assert.notNull(cf1, "First ClassFilter must not be null")__		Assert.notNull(cf2, "Second ClassFilter must not be null")__		return new IntersectionClassFilter(new ClassFilter[] {cf1, cf2})__	};match,all,classes,that,i,both,i,of,the,given,class,filters,match,param,cf1,the,first,class,filter,param,cf2,the,second,class,filter,return,a,distinct,class,filter,that,matches,all,classes,that,both,of,the,given,class,filter,match;public,static,class,filter,intersection,class,filter,cf1,class,filter,cf2,assert,not,null,cf1,first,class,filter,must,not,be,null,assert,not,null,cf2,second,class,filter,must,not,be,null,return,new,intersection,class,filter,new,class,filter,cf1,cf2
ClassFilters -> public static ClassFilter intersection(ClassFilter cf1, ClassFilter cf2);1368482696;Match all classes that <i>both</i> of the given ClassFilters match._@param cf1 the first ClassFilter_@param cf2 the second ClassFilter_@return a distinct ClassFilter that matches all classes that both_of the given ClassFilter match;public static ClassFilter intersection(ClassFilter cf1, ClassFilter cf2) {_		Assert.notNull(cf1, "First ClassFilter must not be null")__		Assert.notNull(cf2, "Second ClassFilter must not be null")__		return new IntersectionClassFilter(new ClassFilter[] {cf1, cf2})__	};match,all,classes,that,i,both,i,of,the,given,class,filters,match,param,cf1,the,first,class,filter,param,cf2,the,second,class,filter,return,a,distinct,class,filter,that,matches,all,classes,that,both,of,the,given,class,filter,match;public,static,class,filter,intersection,class,filter,cf1,class,filter,cf2,assert,not,null,cf1,first,class,filter,must,not,be,null,assert,not,null,cf2,second,class,filter,must,not,be,null,return,new,intersection,class,filter,new,class,filter,cf1,cf2
ClassFilters -> public static ClassFilter intersection(ClassFilter cf1, ClassFilter cf2);1385412762;Match all classes that <i>both</i> of the given ClassFilters match._@param cf1 the first ClassFilter_@param cf2 the second ClassFilter_@return a distinct ClassFilter that matches all classes that both_of the given ClassFilter match;public static ClassFilter intersection(ClassFilter cf1, ClassFilter cf2) {_		Assert.notNull(cf1, "First ClassFilter must not be null")__		Assert.notNull(cf2, "Second ClassFilter must not be null")__		return new IntersectionClassFilter(new ClassFilter[] {cf1, cf2})__	};match,all,classes,that,i,both,i,of,the,given,class,filters,match,param,cf1,the,first,class,filter,param,cf2,the,second,class,filter,return,a,distinct,class,filter,that,matches,all,classes,that,both,of,the,given,class,filter,match;public,static,class,filter,intersection,class,filter,cf1,class,filter,cf2,assert,not,null,cf1,first,class,filter,must,not,be,null,assert,not,null,cf2,second,class,filter,must,not,be,null,return,new,intersection,class,filter,new,class,filter,cf1,cf2
ClassFilters -> public static ClassFilter intersection(ClassFilter cf1, ClassFilter cf2);1390432202;Match all classes that <i>both</i> of the given ClassFilters match._@param cf1 the first ClassFilter_@param cf2 the second ClassFilter_@return a distinct ClassFilter that matches all classes that both_of the given ClassFilter match;public static ClassFilter intersection(ClassFilter cf1, ClassFilter cf2) {_		Assert.notNull(cf1, "First ClassFilter must not be null")__		Assert.notNull(cf2, "Second ClassFilter must not be null")__		return new IntersectionClassFilter(new ClassFilter[] {cf1, cf2})__	};match,all,classes,that,i,both,i,of,the,given,class,filters,match,param,cf1,the,first,class,filter,param,cf2,the,second,class,filter,return,a,distinct,class,filter,that,matches,all,classes,that,both,of,the,given,class,filter,match;public,static,class,filter,intersection,class,filter,cf1,class,filter,cf2,assert,not,null,cf1,first,class,filter,must,not,be,null,assert,not,null,cf2,second,class,filter,must,not,be,null,return,new,intersection,class,filter,new,class,filter,cf1,cf2
ClassFilters -> public static ClassFilter union(ClassFilter[] classFilters);1328020251;Match all classes that <i>either</i> (or all) of the given ClassFilters matches._@param classFilters the ClassFilters to match_@return a distinct ClassFilter that matches all classes that either_of the given ClassFilter matches;public static ClassFilter union(ClassFilter[] classFilters) {_		Assert.notEmpty(classFilters, "ClassFilter array must not be empty")__		return new UnionClassFilter(classFilters)__	};match,all,classes,that,i,either,i,or,all,of,the,given,class,filters,matches,param,class,filters,the,class,filters,to,match,return,a,distinct,class,filter,that,matches,all,classes,that,either,of,the,given,class,filter,matches;public,static,class,filter,union,class,filter,class,filters,assert,not,empty,class,filters,class,filter,array,must,not,be,empty,return,new,union,class,filter,class,filters
ClassFilters -> public static ClassFilter union(ClassFilter[] classFilters);1356735495;Match all classes that <i>either</i> (or all) of the given ClassFilters matches._@param classFilters the ClassFilters to match_@return a distinct ClassFilter that matches all classes that either_of the given ClassFilter matches;public static ClassFilter union(ClassFilter[] classFilters) {_		Assert.notEmpty(classFilters, "ClassFilter array must not be empty")__		return new UnionClassFilter(classFilters)__	};match,all,classes,that,i,either,i,or,all,of,the,given,class,filters,matches,param,class,filters,the,class,filters,to,match,return,a,distinct,class,filter,that,matches,all,classes,that,either,of,the,given,class,filter,matches;public,static,class,filter,union,class,filter,class,filters,assert,not,empty,class,filters,class,filter,array,must,not,be,empty,return,new,union,class,filter,class,filters
ClassFilters -> public static ClassFilter union(ClassFilter[] classFilters);1357119239;Match all classes that <i>either</i> (or all) of the given ClassFilters matches._@param classFilters the ClassFilters to match_@return a distinct ClassFilter that matches all classes that either_of the given ClassFilter matches;public static ClassFilter union(ClassFilter[] classFilters) {_		Assert.notEmpty(classFilters, "ClassFilter array must not be empty")__		return new UnionClassFilter(classFilters)__	};match,all,classes,that,i,either,i,or,all,of,the,given,class,filters,matches,param,class,filters,the,class,filters,to,match,return,a,distinct,class,filter,that,matches,all,classes,that,either,of,the,given,class,filter,matches;public,static,class,filter,union,class,filter,class,filters,assert,not,empty,class,filters,class,filter,array,must,not,be,empty,return,new,union,class,filter,class,filters
ClassFilters -> public static ClassFilter union(ClassFilter[] classFilters);1368482696;Match all classes that <i>either</i> (or all) of the given ClassFilters matches._@param classFilters the ClassFilters to match_@return a distinct ClassFilter that matches all classes that either_of the given ClassFilter matches;public static ClassFilter union(ClassFilter[] classFilters) {_		Assert.notEmpty(classFilters, "ClassFilter array must not be empty")__		return new UnionClassFilter(classFilters)__	};match,all,classes,that,i,either,i,or,all,of,the,given,class,filters,matches,param,class,filters,the,class,filters,to,match,return,a,distinct,class,filter,that,matches,all,classes,that,either,of,the,given,class,filter,matches;public,static,class,filter,union,class,filter,class,filters,assert,not,empty,class,filters,class,filter,array,must,not,be,empty,return,new,union,class,filter,class,filters
ClassFilters -> public static ClassFilter union(ClassFilter[] classFilters);1385412762;Match all classes that <i>either</i> (or all) of the given ClassFilters matches._@param classFilters the ClassFilters to match_@return a distinct ClassFilter that matches all classes that either_of the given ClassFilter matches;public static ClassFilter union(ClassFilter[] classFilters) {_		Assert.notEmpty(classFilters, "ClassFilter array must not be empty")__		return new UnionClassFilter(classFilters)__	};match,all,classes,that,i,either,i,or,all,of,the,given,class,filters,matches,param,class,filters,the,class,filters,to,match,return,a,distinct,class,filter,that,matches,all,classes,that,either,of,the,given,class,filter,matches;public,static,class,filter,union,class,filter,class,filters,assert,not,empty,class,filters,class,filter,array,must,not,be,empty,return,new,union,class,filter,class,filters
ClassFilters -> public static ClassFilter union(ClassFilter[] classFilters);1390432202;Match all classes that <i>either</i> (or all) of the given ClassFilters matches._@param classFilters the ClassFilters to match_@return a distinct ClassFilter that matches all classes that either_of the given ClassFilter matches;public static ClassFilter union(ClassFilter[] classFilters) {_		Assert.notEmpty(classFilters, "ClassFilter array must not be empty")__		return new UnionClassFilter(classFilters)__	};match,all,classes,that,i,either,i,or,all,of,the,given,class,filters,matches,param,class,filters,the,class,filters,to,match,return,a,distinct,class,filter,that,matches,all,classes,that,either,of,the,given,class,filter,matches;public,static,class,filter,union,class,filter,class,filters,assert,not,empty,class,filters,class,filter,array,must,not,be,empty,return,new,union,class,filter,class,filters
ClassFilters -> public static ClassFilter intersection(ClassFilter[] classFilters);1328020251;Match all classes that <i>all</i> of the given ClassFilters match._@param classFilters the ClassFilters to match_@return a distinct ClassFilter that matches all classes that both_of the given ClassFilter match;public static ClassFilter intersection(ClassFilter[] classFilters) {_		Assert.notEmpty(classFilters, "ClassFilter array must not be empty")__		return new IntersectionClassFilter(classFilters)__	};match,all,classes,that,i,all,i,of,the,given,class,filters,match,param,class,filters,the,class,filters,to,match,return,a,distinct,class,filter,that,matches,all,classes,that,both,of,the,given,class,filter,match;public,static,class,filter,intersection,class,filter,class,filters,assert,not,empty,class,filters,class,filter,array,must,not,be,empty,return,new,intersection,class,filter,class,filters
ClassFilters -> public static ClassFilter intersection(ClassFilter[] classFilters);1356735495;Match all classes that <i>all</i> of the given ClassFilters match._@param classFilters the ClassFilters to match_@return a distinct ClassFilter that matches all classes that both_of the given ClassFilter match;public static ClassFilter intersection(ClassFilter[] classFilters) {_		Assert.notEmpty(classFilters, "ClassFilter array must not be empty")__		return new IntersectionClassFilter(classFilters)__	};match,all,classes,that,i,all,i,of,the,given,class,filters,match,param,class,filters,the,class,filters,to,match,return,a,distinct,class,filter,that,matches,all,classes,that,both,of,the,given,class,filter,match;public,static,class,filter,intersection,class,filter,class,filters,assert,not,empty,class,filters,class,filter,array,must,not,be,empty,return,new,intersection,class,filter,class,filters
ClassFilters -> public static ClassFilter intersection(ClassFilter[] classFilters);1357119239;Match all classes that <i>all</i> of the given ClassFilters match._@param classFilters the ClassFilters to match_@return a distinct ClassFilter that matches all classes that both_of the given ClassFilter match;public static ClassFilter intersection(ClassFilter[] classFilters) {_		Assert.notEmpty(classFilters, "ClassFilter array must not be empty")__		return new IntersectionClassFilter(classFilters)__	};match,all,classes,that,i,all,i,of,the,given,class,filters,match,param,class,filters,the,class,filters,to,match,return,a,distinct,class,filter,that,matches,all,classes,that,both,of,the,given,class,filter,match;public,static,class,filter,intersection,class,filter,class,filters,assert,not,empty,class,filters,class,filter,array,must,not,be,empty,return,new,intersection,class,filter,class,filters
ClassFilters -> public static ClassFilter intersection(ClassFilter[] classFilters);1368482696;Match all classes that <i>all</i> of the given ClassFilters match._@param classFilters the ClassFilters to match_@return a distinct ClassFilter that matches all classes that both_of the given ClassFilter match;public static ClassFilter intersection(ClassFilter[] classFilters) {_		Assert.notEmpty(classFilters, "ClassFilter array must not be empty")__		return new IntersectionClassFilter(classFilters)__	};match,all,classes,that,i,all,i,of,the,given,class,filters,match,param,class,filters,the,class,filters,to,match,return,a,distinct,class,filter,that,matches,all,classes,that,both,of,the,given,class,filter,match;public,static,class,filter,intersection,class,filter,class,filters,assert,not,empty,class,filters,class,filter,array,must,not,be,empty,return,new,intersection,class,filter,class,filters
ClassFilters -> public static ClassFilter intersection(ClassFilter[] classFilters);1385412762;Match all classes that <i>all</i> of the given ClassFilters match._@param classFilters the ClassFilters to match_@return a distinct ClassFilter that matches all classes that both_of the given ClassFilter match;public static ClassFilter intersection(ClassFilter[] classFilters) {_		Assert.notEmpty(classFilters, "ClassFilter array must not be empty")__		return new IntersectionClassFilter(classFilters)__	};match,all,classes,that,i,all,i,of,the,given,class,filters,match,param,class,filters,the,class,filters,to,match,return,a,distinct,class,filter,that,matches,all,classes,that,both,of,the,given,class,filter,match;public,static,class,filter,intersection,class,filter,class,filters,assert,not,empty,class,filters,class,filter,array,must,not,be,empty,return,new,intersection,class,filter,class,filters
ClassFilters -> public static ClassFilter intersection(ClassFilter[] classFilters);1390432202;Match all classes that <i>all</i> of the given ClassFilters match._@param classFilters the ClassFilters to match_@return a distinct ClassFilter that matches all classes that both_of the given ClassFilter match;public static ClassFilter intersection(ClassFilter[] classFilters) {_		Assert.notEmpty(classFilters, "ClassFilter array must not be empty")__		return new IntersectionClassFilter(classFilters)__	};match,all,classes,that,i,all,i,of,the,given,class,filters,match,param,class,filters,the,class,filters,to,match,return,a,distinct,class,filter,that,matches,all,classes,that,both,of,the,given,class,filter,match;public,static,class,filter,intersection,class,filter,class,filters,assert,not,empty,class,filters,class,filter,array,must,not,be,empty,return,new,intersection,class,filter,class,filters
