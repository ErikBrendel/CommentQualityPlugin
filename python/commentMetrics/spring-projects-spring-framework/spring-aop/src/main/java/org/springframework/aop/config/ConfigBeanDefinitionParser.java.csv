# id;timestamp;commentText;codeText;commentWords;codeWords
ConfigBeanDefinitionParser -> private Object parsePointcutProperty(Element element, ParserContext parserContext);1328020251;Parses the <code>pointcut</code> or <code>pointcut-ref</code> attributes of the supplied_{@link Element} and add a <code>pointcut</code> property as appropriate. Generates a_{@link org.springframework.beans.factory.config.BeanDefinition} for the pointcut if  necessary_and returns its bean name, otherwise returns the bean name of the referred pointcut.;private Object parsePointcutProperty(Element element, ParserContext parserContext) {_		if (element.hasAttribute(POINTCUT) && element.hasAttribute(POINTCUT_REF)) {_			parserContext.getReaderContext().error(_					"Cannot define both 'pointcut' and 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_		else if (element.hasAttribute(POINTCUT)) {_			_			String expression = element.getAttribute(POINTCUT)__			AbstractBeanDefinition pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(element))__			return pointcutDefinition__		}_		else if (element.hasAttribute(POINTCUT_REF)) {_			String pointcutRef = element.getAttribute(POINTCUT_REF)__			if (!StringUtils.hasText(pointcutRef)) {_				parserContext.getReaderContext().error(_						"'pointcut-ref' attribute contains empty value.", element, this.parseState.snapshot())__				return null__			}_			return pointcutRef__		}_		else {_			parserContext.getReaderContext().error(_					"Must define one of 'pointcut' or 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_	};parses,the,code,pointcut,code,or,code,pointcut,ref,code,attributes,of,the,supplied,link,element,and,add,a,code,pointcut,code,property,as,appropriate,generates,a,link,org,springframework,beans,factory,config,bean,definition,for,the,pointcut,if,necessary,and,returns,its,bean,name,otherwise,returns,the,bean,name,of,the,referred,pointcut;private,object,parse,pointcut,property,element,element,parser,context,parser,context,if,element,has,attribute,pointcut,element,has,attribute,parser,context,get,reader,context,error,cannot,define,both,pointcut,and,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null,else,if,element,has,attribute,pointcut,string,expression,element,get,attribute,pointcut,abstract,bean,definition,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,element,return,pointcut,definition,else,if,element,has,attribute,string,pointcut,ref,element,get,attribute,if,string,utils,has,text,pointcut,ref,parser,context,get,reader,context,error,pointcut,ref,attribute,contains,empty,value,element,this,parse,state,snapshot,return,null,return,pointcut,ref,else,parser,context,get,reader,context,error,must,define,one,of,pointcut,or,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null
ConfigBeanDefinitionParser -> private Object parsePointcutProperty(Element element, ParserContext parserContext);1356735495;Parses the {@code pointcut} or {@code pointcut-ref} attributes of the supplied_{@link Element} and add a {@code pointcut} property as appropriate. Generates a_{@link org.springframework.beans.factory.config.BeanDefinition} for the pointcut if  necessary_and returns its bean name, otherwise returns the bean name of the referred pointcut.;private Object parsePointcutProperty(Element element, ParserContext parserContext) {_		if (element.hasAttribute(POINTCUT) && element.hasAttribute(POINTCUT_REF)) {_			parserContext.getReaderContext().error(_					"Cannot define both 'pointcut' and 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_		else if (element.hasAttribute(POINTCUT)) {_			_			String expression = element.getAttribute(POINTCUT)__			AbstractBeanDefinition pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(element))__			return pointcutDefinition__		}_		else if (element.hasAttribute(POINTCUT_REF)) {_			String pointcutRef = element.getAttribute(POINTCUT_REF)__			if (!StringUtils.hasText(pointcutRef)) {_				parserContext.getReaderContext().error(_						"'pointcut-ref' attribute contains empty value.", element, this.parseState.snapshot())__				return null__			}_			return pointcutRef__		}_		else {_			parserContext.getReaderContext().error(_					"Must define one of 'pointcut' or 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_	};parses,the,code,pointcut,or,code,pointcut,ref,attributes,of,the,supplied,link,element,and,add,a,code,pointcut,property,as,appropriate,generates,a,link,org,springframework,beans,factory,config,bean,definition,for,the,pointcut,if,necessary,and,returns,its,bean,name,otherwise,returns,the,bean,name,of,the,referred,pointcut;private,object,parse,pointcut,property,element,element,parser,context,parser,context,if,element,has,attribute,pointcut,element,has,attribute,parser,context,get,reader,context,error,cannot,define,both,pointcut,and,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null,else,if,element,has,attribute,pointcut,string,expression,element,get,attribute,pointcut,abstract,bean,definition,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,element,return,pointcut,definition,else,if,element,has,attribute,string,pointcut,ref,element,get,attribute,if,string,utils,has,text,pointcut,ref,parser,context,get,reader,context,error,pointcut,ref,attribute,contains,empty,value,element,this,parse,state,snapshot,return,null,return,pointcut,ref,else,parser,context,get,reader,context,error,must,define,one,of,pointcut,or,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null
ConfigBeanDefinitionParser -> private Object parsePointcutProperty(Element element, ParserContext parserContext);1357119239;Parses the {@code pointcut} or {@code pointcut-ref} attributes of the supplied_{@link Element} and add a {@code pointcut} property as appropriate. Generates a_{@link org.springframework.beans.factory.config.BeanDefinition} for the pointcut if  necessary_and returns its bean name, otherwise returns the bean name of the referred pointcut.;private Object parsePointcutProperty(Element element, ParserContext parserContext) {_		if (element.hasAttribute(POINTCUT) && element.hasAttribute(POINTCUT_REF)) {_			parserContext.getReaderContext().error(_					"Cannot define both 'pointcut' and 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_		else if (element.hasAttribute(POINTCUT)) {_			_			String expression = element.getAttribute(POINTCUT)__			AbstractBeanDefinition pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(element))__			return pointcutDefinition__		}_		else if (element.hasAttribute(POINTCUT_REF)) {_			String pointcutRef = element.getAttribute(POINTCUT_REF)__			if (!StringUtils.hasText(pointcutRef)) {_				parserContext.getReaderContext().error(_						"'pointcut-ref' attribute contains empty value.", element, this.parseState.snapshot())__				return null__			}_			return pointcutRef__		}_		else {_			parserContext.getReaderContext().error(_					"Must define one of 'pointcut' or 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_	};parses,the,code,pointcut,or,code,pointcut,ref,attributes,of,the,supplied,link,element,and,add,a,code,pointcut,property,as,appropriate,generates,a,link,org,springframework,beans,factory,config,bean,definition,for,the,pointcut,if,necessary,and,returns,its,bean,name,otherwise,returns,the,bean,name,of,the,referred,pointcut;private,object,parse,pointcut,property,element,element,parser,context,parser,context,if,element,has,attribute,pointcut,element,has,attribute,parser,context,get,reader,context,error,cannot,define,both,pointcut,and,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null,else,if,element,has,attribute,pointcut,string,expression,element,get,attribute,pointcut,abstract,bean,definition,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,element,return,pointcut,definition,else,if,element,has,attribute,string,pointcut,ref,element,get,attribute,if,string,utils,has,text,pointcut,ref,parser,context,get,reader,context,error,pointcut,ref,attribute,contains,empty,value,element,this,parse,state,snapshot,return,null,return,pointcut,ref,else,parser,context,get,reader,context,error,must,define,one,of,pointcut,or,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null
ConfigBeanDefinitionParser -> private Object parsePointcutProperty(Element element, ParserContext parserContext);1368482696;Parses the {@code pointcut} or {@code pointcut-ref} attributes of the supplied_{@link Element} and add a {@code pointcut} property as appropriate. Generates a_{@link org.springframework.beans.factory.config.BeanDefinition} for the pointcut if  necessary_and returns its bean name, otherwise returns the bean name of the referred pointcut.;private Object parsePointcutProperty(Element element, ParserContext parserContext) {_		if (element.hasAttribute(POINTCUT) && element.hasAttribute(POINTCUT_REF)) {_			parserContext.getReaderContext().error(_					"Cannot define both 'pointcut' and 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_		else if (element.hasAttribute(POINTCUT)) {_			_			String expression = element.getAttribute(POINTCUT)__			AbstractBeanDefinition pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(element))__			return pointcutDefinition__		}_		else if (element.hasAttribute(POINTCUT_REF)) {_			String pointcutRef = element.getAttribute(POINTCUT_REF)__			if (!StringUtils.hasText(pointcutRef)) {_				parserContext.getReaderContext().error(_						"'pointcut-ref' attribute contains empty value.", element, this.parseState.snapshot())__				return null__			}_			return pointcutRef__		}_		else {_			parserContext.getReaderContext().error(_					"Must define one of 'pointcut' or 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_	};parses,the,code,pointcut,or,code,pointcut,ref,attributes,of,the,supplied,link,element,and,add,a,code,pointcut,property,as,appropriate,generates,a,link,org,springframework,beans,factory,config,bean,definition,for,the,pointcut,if,necessary,and,returns,its,bean,name,otherwise,returns,the,bean,name,of,the,referred,pointcut;private,object,parse,pointcut,property,element,element,parser,context,parser,context,if,element,has,attribute,pointcut,element,has,attribute,parser,context,get,reader,context,error,cannot,define,both,pointcut,and,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null,else,if,element,has,attribute,pointcut,string,expression,element,get,attribute,pointcut,abstract,bean,definition,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,element,return,pointcut,definition,else,if,element,has,attribute,string,pointcut,ref,element,get,attribute,if,string,utils,has,text,pointcut,ref,parser,context,get,reader,context,error,pointcut,ref,attribute,contains,empty,value,element,this,parse,state,snapshot,return,null,return,pointcut,ref,else,parser,context,get,reader,context,error,must,define,one,of,pointcut,or,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null
ConfigBeanDefinitionParser -> private Object parsePointcutProperty(Element element, ParserContext parserContext);1385412762;Parses the {@code pointcut} or {@code pointcut-ref} attributes of the supplied_{@link Element} and add a {@code pointcut} property as appropriate. Generates a_{@link org.springframework.beans.factory.config.BeanDefinition} for the pointcut if  necessary_and returns its bean name, otherwise returns the bean name of the referred pointcut.;private Object parsePointcutProperty(Element element, ParserContext parserContext) {_		if (element.hasAttribute(POINTCUT) && element.hasAttribute(POINTCUT_REF)) {_			parserContext.getReaderContext().error(_					"Cannot define both 'pointcut' and 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_		else if (element.hasAttribute(POINTCUT)) {_			_			String expression = element.getAttribute(POINTCUT)__			AbstractBeanDefinition pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(element))__			return pointcutDefinition__		}_		else if (element.hasAttribute(POINTCUT_REF)) {_			String pointcutRef = element.getAttribute(POINTCUT_REF)__			if (!StringUtils.hasText(pointcutRef)) {_				parserContext.getReaderContext().error(_						"'pointcut-ref' attribute contains empty value.", element, this.parseState.snapshot())__				return null__			}_			return pointcutRef__		}_		else {_			parserContext.getReaderContext().error(_					"Must define one of 'pointcut' or 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_	};parses,the,code,pointcut,or,code,pointcut,ref,attributes,of,the,supplied,link,element,and,add,a,code,pointcut,property,as,appropriate,generates,a,link,org,springframework,beans,factory,config,bean,definition,for,the,pointcut,if,necessary,and,returns,its,bean,name,otherwise,returns,the,bean,name,of,the,referred,pointcut;private,object,parse,pointcut,property,element,element,parser,context,parser,context,if,element,has,attribute,pointcut,element,has,attribute,parser,context,get,reader,context,error,cannot,define,both,pointcut,and,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null,else,if,element,has,attribute,pointcut,string,expression,element,get,attribute,pointcut,abstract,bean,definition,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,element,return,pointcut,definition,else,if,element,has,attribute,string,pointcut,ref,element,get,attribute,if,string,utils,has,text,pointcut,ref,parser,context,get,reader,context,error,pointcut,ref,attribute,contains,empty,value,element,this,parse,state,snapshot,return,null,return,pointcut,ref,else,parser,context,get,reader,context,error,must,define,one,of,pointcut,or,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null
ConfigBeanDefinitionParser -> private Object parsePointcutProperty(Element element, ParserContext parserContext);1447323728;Parses the {@code pointcut} or {@code pointcut-ref} attributes of the supplied_{@link Element} and add a {@code pointcut} property as appropriate. Generates a_{@link org.springframework.beans.factory.config.BeanDefinition} for the pointcut if  necessary_and returns its bean name, otherwise returns the bean name of the referred pointcut.;private Object parsePointcutProperty(Element element, ParserContext parserContext) {_		if (element.hasAttribute(POINTCUT) && element.hasAttribute(POINTCUT_REF)) {_			parserContext.getReaderContext().error(_					"Cannot define both 'pointcut' and 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_		else if (element.hasAttribute(POINTCUT)) {_			_			String expression = element.getAttribute(POINTCUT)__			AbstractBeanDefinition pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(element))__			return pointcutDefinition__		}_		else if (element.hasAttribute(POINTCUT_REF)) {_			String pointcutRef = element.getAttribute(POINTCUT_REF)__			if (!StringUtils.hasText(pointcutRef)) {_				parserContext.getReaderContext().error(_						"'pointcut-ref' attribute contains empty value.", element, this.parseState.snapshot())__				return null__			}_			return pointcutRef__		}_		else {_			parserContext.getReaderContext().error(_					"Must define one of 'pointcut' or 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_	};parses,the,code,pointcut,or,code,pointcut,ref,attributes,of,the,supplied,link,element,and,add,a,code,pointcut,property,as,appropriate,generates,a,link,org,springframework,beans,factory,config,bean,definition,for,the,pointcut,if,necessary,and,returns,its,bean,name,otherwise,returns,the,bean,name,of,the,referred,pointcut;private,object,parse,pointcut,property,element,element,parser,context,parser,context,if,element,has,attribute,pointcut,element,has,attribute,parser,context,get,reader,context,error,cannot,define,both,pointcut,and,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null,else,if,element,has,attribute,pointcut,string,expression,element,get,attribute,pointcut,abstract,bean,definition,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,element,return,pointcut,definition,else,if,element,has,attribute,string,pointcut,ref,element,get,attribute,if,string,utils,has,text,pointcut,ref,parser,context,get,reader,context,error,pointcut,ref,attribute,contains,empty,value,element,this,parse,state,snapshot,return,null,return,pointcut,ref,else,parser,context,get,reader,context,error,must,define,one,of,pointcut,or,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null
ConfigBeanDefinitionParser -> private Object parsePointcutProperty(Element element, ParserContext parserContext);1467730834;Parses the {@code pointcut} or {@code pointcut-ref} attributes of the supplied_{@link Element} and add a {@code pointcut} property as appropriate. Generates a_{@link org.springframework.beans.factory.config.BeanDefinition} for the pointcut if  necessary_and returns its bean name, otherwise returns the bean name of the referred pointcut.;private Object parsePointcutProperty(Element element, ParserContext parserContext) {_		if (element.hasAttribute(POINTCUT) && element.hasAttribute(POINTCUT_REF)) {_			parserContext.getReaderContext().error(_					"Cannot define both 'pointcut' and 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_		else if (element.hasAttribute(POINTCUT)) {_			_			String expression = element.getAttribute(POINTCUT)__			AbstractBeanDefinition pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(element))__			return pointcutDefinition__		}_		else if (element.hasAttribute(POINTCUT_REF)) {_			String pointcutRef = element.getAttribute(POINTCUT_REF)__			if (!StringUtils.hasText(pointcutRef)) {_				parserContext.getReaderContext().error(_						"'pointcut-ref' attribute contains empty value.", element, this.parseState.snapshot())__				return null__			}_			return pointcutRef__		}_		else {_			parserContext.getReaderContext().error(_					"Must define one of 'pointcut' or 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_	};parses,the,code,pointcut,or,code,pointcut,ref,attributes,of,the,supplied,link,element,and,add,a,code,pointcut,property,as,appropriate,generates,a,link,org,springframework,beans,factory,config,bean,definition,for,the,pointcut,if,necessary,and,returns,its,bean,name,otherwise,returns,the,bean,name,of,the,referred,pointcut;private,object,parse,pointcut,property,element,element,parser,context,parser,context,if,element,has,attribute,pointcut,element,has,attribute,parser,context,get,reader,context,error,cannot,define,both,pointcut,and,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null,else,if,element,has,attribute,pointcut,string,expression,element,get,attribute,pointcut,abstract,bean,definition,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,element,return,pointcut,definition,else,if,element,has,attribute,string,pointcut,ref,element,get,attribute,if,string,utils,has,text,pointcut,ref,parser,context,get,reader,context,error,pointcut,ref,attribute,contains,empty,value,element,this,parse,state,snapshot,return,null,return,pointcut,ref,else,parser,context,get,reader,context,error,must,define,one,of,pointcut,or,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null
ConfigBeanDefinitionParser -> @Nullable 	private Object parsePointcutProperty(Element element, ParserContext parserContext);1495868221;Parses the {@code pointcut} or {@code pointcut-ref} attributes of the supplied_{@link Element} and add a {@code pointcut} property as appropriate. Generates a_{@link org.springframework.beans.factory.config.BeanDefinition} for the pointcut if  necessary_and returns its bean name, otherwise returns the bean name of the referred pointcut.;@Nullable_	private Object parsePointcutProperty(Element element, ParserContext parserContext) {_		if (element.hasAttribute(POINTCUT) && element.hasAttribute(POINTCUT_REF)) {_			parserContext.getReaderContext().error(_					"Cannot define both 'pointcut' and 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_		else if (element.hasAttribute(POINTCUT)) {_			_			String expression = element.getAttribute(POINTCUT)__			AbstractBeanDefinition pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(element))__			return pointcutDefinition__		}_		else if (element.hasAttribute(POINTCUT_REF)) {_			String pointcutRef = element.getAttribute(POINTCUT_REF)__			if (!StringUtils.hasText(pointcutRef)) {_				parserContext.getReaderContext().error(_						"'pointcut-ref' attribute contains empty value.", element, this.parseState.snapshot())__				return null__			}_			return pointcutRef__		}_		else {_			parserContext.getReaderContext().error(_					"Must define one of 'pointcut' or 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_	};parses,the,code,pointcut,or,code,pointcut,ref,attributes,of,the,supplied,link,element,and,add,a,code,pointcut,property,as,appropriate,generates,a,link,org,springframework,beans,factory,config,bean,definition,for,the,pointcut,if,necessary,and,returns,its,bean,name,otherwise,returns,the,bean,name,of,the,referred,pointcut;nullable,private,object,parse,pointcut,property,element,element,parser,context,parser,context,if,element,has,attribute,pointcut,element,has,attribute,parser,context,get,reader,context,error,cannot,define,both,pointcut,and,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null,else,if,element,has,attribute,pointcut,string,expression,element,get,attribute,pointcut,abstract,bean,definition,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,element,return,pointcut,definition,else,if,element,has,attribute,string,pointcut,ref,element,get,attribute,if,string,utils,has,text,pointcut,ref,parser,context,get,reader,context,error,pointcut,ref,attribute,contains,empty,value,element,this,parse,state,snapshot,return,null,return,pointcut,ref,else,parser,context,get,reader,context,error,must,define,one,of,pointcut,or,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null
ConfigBeanDefinitionParser -> @Nullable 	private Object parsePointcutProperty(Element element, ParserContext parserContext);1502974979;Parses the {@code pointcut} or {@code pointcut-ref} attributes of the supplied_{@link Element} and add a {@code pointcut} property as appropriate. Generates a_{@link org.springframework.beans.factory.config.BeanDefinition} for the pointcut if  necessary_and returns its bean name, otherwise returns the bean name of the referred pointcut.;@Nullable_	private Object parsePointcutProperty(Element element, ParserContext parserContext) {_		if (element.hasAttribute(POINTCUT) && element.hasAttribute(POINTCUT_REF)) {_			parserContext.getReaderContext().error(_					"Cannot define both 'pointcut' and 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_		else if (element.hasAttribute(POINTCUT)) {_			_			String expression = element.getAttribute(POINTCUT)__			AbstractBeanDefinition pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(element))__			return pointcutDefinition__		}_		else if (element.hasAttribute(POINTCUT_REF)) {_			String pointcutRef = element.getAttribute(POINTCUT_REF)__			if (!StringUtils.hasText(pointcutRef)) {_				parserContext.getReaderContext().error(_						"'pointcut-ref' attribute contains empty value.", element, this.parseState.snapshot())__				return null__			}_			return pointcutRef__		}_		else {_			parserContext.getReaderContext().error(_					"Must define one of 'pointcut' or 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_	};parses,the,code,pointcut,or,code,pointcut,ref,attributes,of,the,supplied,link,element,and,add,a,code,pointcut,property,as,appropriate,generates,a,link,org,springframework,beans,factory,config,bean,definition,for,the,pointcut,if,necessary,and,returns,its,bean,name,otherwise,returns,the,bean,name,of,the,referred,pointcut;nullable,private,object,parse,pointcut,property,element,element,parser,context,parser,context,if,element,has,attribute,pointcut,element,has,attribute,parser,context,get,reader,context,error,cannot,define,both,pointcut,and,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null,else,if,element,has,attribute,pointcut,string,expression,element,get,attribute,pointcut,abstract,bean,definition,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,element,return,pointcut,definition,else,if,element,has,attribute,string,pointcut,ref,element,get,attribute,if,string,utils,has,text,pointcut,ref,parser,context,get,reader,context,error,pointcut,ref,attribute,contains,empty,value,element,this,parse,state,snapshot,return,null,return,pointcut,ref,else,parser,context,get,reader,context,error,must,define,one,of,pointcut,or,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null
ConfigBeanDefinitionParser -> @Nullable 	private Object parsePointcutProperty(Element element, ParserContext parserContext);1519295386;Parses the {@code pointcut} or {@code pointcut-ref} attributes of the supplied_{@link Element} and add a {@code pointcut} property as appropriate. Generates a_{@link org.springframework.beans.factory.config.BeanDefinition} for the pointcut if  necessary_and returns its bean name, otherwise returns the bean name of the referred pointcut.;@Nullable_	private Object parsePointcutProperty(Element element, ParserContext parserContext) {_		if (element.hasAttribute(POINTCUT) && element.hasAttribute(POINTCUT_REF)) {_			parserContext.getReaderContext().error(_					"Cannot define both 'pointcut' and 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_		else if (element.hasAttribute(POINTCUT)) {_			_			String expression = element.getAttribute(POINTCUT)__			AbstractBeanDefinition pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(element))__			return pointcutDefinition__		}_		else if (element.hasAttribute(POINTCUT_REF)) {_			String pointcutRef = element.getAttribute(POINTCUT_REF)__			if (!StringUtils.hasText(pointcutRef)) {_				parserContext.getReaderContext().error(_						"'pointcut-ref' attribute contains empty value.", element, this.parseState.snapshot())__				return null__			}_			return pointcutRef__		}_		else {_			parserContext.getReaderContext().error(_					"Must define one of 'pointcut' or 'pointcut-ref' on <advisor> tag.",_					element, this.parseState.snapshot())__			return null__		}_	};parses,the,code,pointcut,or,code,pointcut,ref,attributes,of,the,supplied,link,element,and,add,a,code,pointcut,property,as,appropriate,generates,a,link,org,springframework,beans,factory,config,bean,definition,for,the,pointcut,if,necessary,and,returns,its,bean,name,otherwise,returns,the,bean,name,of,the,referred,pointcut;nullable,private,object,parse,pointcut,property,element,element,parser,context,parser,context,if,element,has,attribute,pointcut,element,has,attribute,parser,context,get,reader,context,error,cannot,define,both,pointcut,and,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null,else,if,element,has,attribute,pointcut,string,expression,element,get,attribute,pointcut,abstract,bean,definition,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,element,return,pointcut,definition,else,if,element,has,attribute,string,pointcut,ref,element,get,attribute,if,string,utils,has,text,pointcut,ref,parser,context,get,reader,context,error,pointcut,ref,attribute,contains,empty,value,element,this,parse,state,snapshot,return,null,return,pointcut,ref,else,parser,context,get,reader,context,error,must,define,one,of,pointcut,or,pointcut,ref,on,advisor,tag,element,this,parse,state,snapshot,return,null
ConfigBeanDefinitionParser -> private void parseAdvisor(Element advisorElement, ParserContext parserContext);1328020251;Parses the supplied <code>&lt_advisor&gt_</code> element and registers the resulting_{@link org.springframework.aop.Advisor} and any resulting {@link org.springframework.aop.Pointcut}_with the supplied {@link BeanDefinitionRegistry}.;private void parseAdvisor(Element advisorElement, ParserContext parserContext) {_		AbstractBeanDefinition advisorDef = createAdvisorBeanDefinition(advisorElement, parserContext)__		String id = advisorElement.getAttribute(ID)___		try {_			this.parseState.push(new AdvisorEntry(id))__			String advisorBeanName = id__			if (StringUtils.hasText(advisorBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(advisorBeanName, advisorDef)__			}_			else {_				advisorBeanName = parserContext.getReaderContext().registerWithGeneratedName(advisorDef)__			}__			Object pointcut = parsePointcutProperty(advisorElement, parserContext)__			if (pointcut instanceof BeanDefinition) {_				advisorDef.getPropertyValues().add(POINTCUT, pointcut)__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef, (BeanDefinition) pointcut))__			}_			else if (pointcut instanceof String) {_				advisorDef.getPropertyValues().add(POINTCUT, new RuntimeBeanReference((String) pointcut))__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef))__			}_		}_		finally {_			this.parseState.pop()__		}_	};parses,the,supplied,code,lt,advisor,gt,code,element,and,registers,the,resulting,link,org,springframework,aop,advisor,and,any,resulting,link,org,springframework,aop,pointcut,with,the,supplied,link,bean,definition,registry;private,void,parse,advisor,element,advisor,element,parser,context,parser,context,abstract,bean,definition,advisor,def,create,advisor,bean,definition,advisor,element,parser,context,string,id,advisor,element,get,attribute,id,try,this,parse,state,push,new,advisor,entry,id,string,advisor,bean,name,id,if,string,utils,has,text,advisor,bean,name,parser,context,get,registry,register,bean,definition,advisor,bean,name,advisor,def,else,advisor,bean,name,parser,context,get,reader,context,register,with,generated,name,advisor,def,object,pointcut,parse,pointcut,property,advisor,element,parser,context,if,pointcut,instanceof,bean,definition,advisor,def,get,property,values,add,pointcut,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,bean,definition,pointcut,else,if,pointcut,instanceof,string,advisor,def,get,property,values,add,pointcut,new,runtime,bean,reference,string,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private void parseAdvisor(Element advisorElement, ParserContext parserContext);1356735495;Parses the supplied {@code &lt_advisor&gt_} element and registers the resulting_{@link org.springframework.aop.Advisor} and any resulting {@link org.springframework.aop.Pointcut}_with the supplied {@link BeanDefinitionRegistry}.;private void parseAdvisor(Element advisorElement, ParserContext parserContext) {_		AbstractBeanDefinition advisorDef = createAdvisorBeanDefinition(advisorElement, parserContext)__		String id = advisorElement.getAttribute(ID)___		try {_			this.parseState.push(new AdvisorEntry(id))__			String advisorBeanName = id__			if (StringUtils.hasText(advisorBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(advisorBeanName, advisorDef)__			}_			else {_				advisorBeanName = parserContext.getReaderContext().registerWithGeneratedName(advisorDef)__			}__			Object pointcut = parsePointcutProperty(advisorElement, parserContext)__			if (pointcut instanceof BeanDefinition) {_				advisorDef.getPropertyValues().add(POINTCUT, pointcut)__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef, (BeanDefinition) pointcut))__			}_			else if (pointcut instanceof String) {_				advisorDef.getPropertyValues().add(POINTCUT, new RuntimeBeanReference((String) pointcut))__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef))__			}_		}_		finally {_			this.parseState.pop()__		}_	};parses,the,supplied,code,lt,advisor,gt,element,and,registers,the,resulting,link,org,springframework,aop,advisor,and,any,resulting,link,org,springframework,aop,pointcut,with,the,supplied,link,bean,definition,registry;private,void,parse,advisor,element,advisor,element,parser,context,parser,context,abstract,bean,definition,advisor,def,create,advisor,bean,definition,advisor,element,parser,context,string,id,advisor,element,get,attribute,id,try,this,parse,state,push,new,advisor,entry,id,string,advisor,bean,name,id,if,string,utils,has,text,advisor,bean,name,parser,context,get,registry,register,bean,definition,advisor,bean,name,advisor,def,else,advisor,bean,name,parser,context,get,reader,context,register,with,generated,name,advisor,def,object,pointcut,parse,pointcut,property,advisor,element,parser,context,if,pointcut,instanceof,bean,definition,advisor,def,get,property,values,add,pointcut,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,bean,definition,pointcut,else,if,pointcut,instanceof,string,advisor,def,get,property,values,add,pointcut,new,runtime,bean,reference,string,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private void parseAdvisor(Element advisorElement, ParserContext parserContext);1357119239;Parses the supplied {@code &lt_advisor&gt_} element and registers the resulting_{@link org.springframework.aop.Advisor} and any resulting {@link org.springframework.aop.Pointcut}_with the supplied {@link BeanDefinitionRegistry}.;private void parseAdvisor(Element advisorElement, ParserContext parserContext) {_		AbstractBeanDefinition advisorDef = createAdvisorBeanDefinition(advisorElement, parserContext)__		String id = advisorElement.getAttribute(ID)___		try {_			this.parseState.push(new AdvisorEntry(id))__			String advisorBeanName = id__			if (StringUtils.hasText(advisorBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(advisorBeanName, advisorDef)__			}_			else {_				advisorBeanName = parserContext.getReaderContext().registerWithGeneratedName(advisorDef)__			}__			Object pointcut = parsePointcutProperty(advisorElement, parserContext)__			if (pointcut instanceof BeanDefinition) {_				advisorDef.getPropertyValues().add(POINTCUT, pointcut)__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef, (BeanDefinition) pointcut))__			}_			else if (pointcut instanceof String) {_				advisorDef.getPropertyValues().add(POINTCUT, new RuntimeBeanReference((String) pointcut))__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef))__			}_		}_		finally {_			this.parseState.pop()__		}_	};parses,the,supplied,code,lt,advisor,gt,element,and,registers,the,resulting,link,org,springframework,aop,advisor,and,any,resulting,link,org,springframework,aop,pointcut,with,the,supplied,link,bean,definition,registry;private,void,parse,advisor,element,advisor,element,parser,context,parser,context,abstract,bean,definition,advisor,def,create,advisor,bean,definition,advisor,element,parser,context,string,id,advisor,element,get,attribute,id,try,this,parse,state,push,new,advisor,entry,id,string,advisor,bean,name,id,if,string,utils,has,text,advisor,bean,name,parser,context,get,registry,register,bean,definition,advisor,bean,name,advisor,def,else,advisor,bean,name,parser,context,get,reader,context,register,with,generated,name,advisor,def,object,pointcut,parse,pointcut,property,advisor,element,parser,context,if,pointcut,instanceof,bean,definition,advisor,def,get,property,values,add,pointcut,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,bean,definition,pointcut,else,if,pointcut,instanceof,string,advisor,def,get,property,values,add,pointcut,new,runtime,bean,reference,string,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private void parseAdvisor(Element advisorElement, ParserContext parserContext);1368482696;Parses the supplied {@code &lt_advisor&gt_} element and registers the resulting_{@link org.springframework.aop.Advisor} and any resulting {@link org.springframework.aop.Pointcut}_with the supplied {@link BeanDefinitionRegistry}.;private void parseAdvisor(Element advisorElement, ParserContext parserContext) {_		AbstractBeanDefinition advisorDef = createAdvisorBeanDefinition(advisorElement, parserContext)__		String id = advisorElement.getAttribute(ID)___		try {_			this.parseState.push(new AdvisorEntry(id))__			String advisorBeanName = id__			if (StringUtils.hasText(advisorBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(advisorBeanName, advisorDef)__			}_			else {_				advisorBeanName = parserContext.getReaderContext().registerWithGeneratedName(advisorDef)__			}__			Object pointcut = parsePointcutProperty(advisorElement, parserContext)__			if (pointcut instanceof BeanDefinition) {_				advisorDef.getPropertyValues().add(POINTCUT, pointcut)__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef, (BeanDefinition) pointcut))__			}_			else if (pointcut instanceof String) {_				advisorDef.getPropertyValues().add(POINTCUT, new RuntimeBeanReference((String) pointcut))__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef))__			}_		}_		finally {_			this.parseState.pop()__		}_	};parses,the,supplied,code,lt,advisor,gt,element,and,registers,the,resulting,link,org,springframework,aop,advisor,and,any,resulting,link,org,springframework,aop,pointcut,with,the,supplied,link,bean,definition,registry;private,void,parse,advisor,element,advisor,element,parser,context,parser,context,abstract,bean,definition,advisor,def,create,advisor,bean,definition,advisor,element,parser,context,string,id,advisor,element,get,attribute,id,try,this,parse,state,push,new,advisor,entry,id,string,advisor,bean,name,id,if,string,utils,has,text,advisor,bean,name,parser,context,get,registry,register,bean,definition,advisor,bean,name,advisor,def,else,advisor,bean,name,parser,context,get,reader,context,register,with,generated,name,advisor,def,object,pointcut,parse,pointcut,property,advisor,element,parser,context,if,pointcut,instanceof,bean,definition,advisor,def,get,property,values,add,pointcut,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,bean,definition,pointcut,else,if,pointcut,instanceof,string,advisor,def,get,property,values,add,pointcut,new,runtime,bean,reference,string,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private void parseAdvisor(Element advisorElement, ParserContext parserContext);1385412762;Parses the supplied {@code &lt_advisor&gt_} element and registers the resulting_{@link org.springframework.aop.Advisor} and any resulting {@link org.springframework.aop.Pointcut}_with the supplied {@link BeanDefinitionRegistry}.;private void parseAdvisor(Element advisorElement, ParserContext parserContext) {_		AbstractBeanDefinition advisorDef = createAdvisorBeanDefinition(advisorElement, parserContext)__		String id = advisorElement.getAttribute(ID)___		try {_			this.parseState.push(new AdvisorEntry(id))__			String advisorBeanName = id__			if (StringUtils.hasText(advisorBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(advisorBeanName, advisorDef)__			}_			else {_				advisorBeanName = parserContext.getReaderContext().registerWithGeneratedName(advisorDef)__			}__			Object pointcut = parsePointcutProperty(advisorElement, parserContext)__			if (pointcut instanceof BeanDefinition) {_				advisorDef.getPropertyValues().add(POINTCUT, pointcut)__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef, (BeanDefinition) pointcut))__			}_			else if (pointcut instanceof String) {_				advisorDef.getPropertyValues().add(POINTCUT, new RuntimeBeanReference((String) pointcut))__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef))__			}_		}_		finally {_			this.parseState.pop()__		}_	};parses,the,supplied,code,lt,advisor,gt,element,and,registers,the,resulting,link,org,springframework,aop,advisor,and,any,resulting,link,org,springframework,aop,pointcut,with,the,supplied,link,bean,definition,registry;private,void,parse,advisor,element,advisor,element,parser,context,parser,context,abstract,bean,definition,advisor,def,create,advisor,bean,definition,advisor,element,parser,context,string,id,advisor,element,get,attribute,id,try,this,parse,state,push,new,advisor,entry,id,string,advisor,bean,name,id,if,string,utils,has,text,advisor,bean,name,parser,context,get,registry,register,bean,definition,advisor,bean,name,advisor,def,else,advisor,bean,name,parser,context,get,reader,context,register,with,generated,name,advisor,def,object,pointcut,parse,pointcut,property,advisor,element,parser,context,if,pointcut,instanceof,bean,definition,advisor,def,get,property,values,add,pointcut,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,bean,definition,pointcut,else,if,pointcut,instanceof,string,advisor,def,get,property,values,add,pointcut,new,runtime,bean,reference,string,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private void parseAdvisor(Element advisorElement, ParserContext parserContext);1447323728;Parses the supplied {@code <advisor>} element and registers the resulting_{@link org.springframework.aop.Advisor} and any resulting {@link org.springframework.aop.Pointcut}_with the supplied {@link BeanDefinitionRegistry}.;private void parseAdvisor(Element advisorElement, ParserContext parserContext) {_		AbstractBeanDefinition advisorDef = createAdvisorBeanDefinition(advisorElement, parserContext)__		String id = advisorElement.getAttribute(ID)___		try {_			this.parseState.push(new AdvisorEntry(id))__			String advisorBeanName = id__			if (StringUtils.hasText(advisorBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(advisorBeanName, advisorDef)__			}_			else {_				advisorBeanName = parserContext.getReaderContext().registerWithGeneratedName(advisorDef)__			}__			Object pointcut = parsePointcutProperty(advisorElement, parserContext)__			if (pointcut instanceof BeanDefinition) {_				advisorDef.getPropertyValues().add(POINTCUT, pointcut)__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef, (BeanDefinition) pointcut))__			}_			else if (pointcut instanceof String) {_				advisorDef.getPropertyValues().add(POINTCUT, new RuntimeBeanReference((String) pointcut))__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef))__			}_		}_		finally {_			this.parseState.pop()__		}_	};parses,the,supplied,code,advisor,element,and,registers,the,resulting,link,org,springframework,aop,advisor,and,any,resulting,link,org,springframework,aop,pointcut,with,the,supplied,link,bean,definition,registry;private,void,parse,advisor,element,advisor,element,parser,context,parser,context,abstract,bean,definition,advisor,def,create,advisor,bean,definition,advisor,element,parser,context,string,id,advisor,element,get,attribute,id,try,this,parse,state,push,new,advisor,entry,id,string,advisor,bean,name,id,if,string,utils,has,text,advisor,bean,name,parser,context,get,registry,register,bean,definition,advisor,bean,name,advisor,def,else,advisor,bean,name,parser,context,get,reader,context,register,with,generated,name,advisor,def,object,pointcut,parse,pointcut,property,advisor,element,parser,context,if,pointcut,instanceof,bean,definition,advisor,def,get,property,values,add,pointcut,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,bean,definition,pointcut,else,if,pointcut,instanceof,string,advisor,def,get,property,values,add,pointcut,new,runtime,bean,reference,string,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private void parseAdvisor(Element advisorElement, ParserContext parserContext);1467730834;Parses the supplied {@code <advisor>} element and registers the resulting_{@link org.springframework.aop.Advisor} and any resulting {@link org.springframework.aop.Pointcut}_with the supplied {@link BeanDefinitionRegistry}.;private void parseAdvisor(Element advisorElement, ParserContext parserContext) {_		AbstractBeanDefinition advisorDef = createAdvisorBeanDefinition(advisorElement, parserContext)__		String id = advisorElement.getAttribute(ID)___		try {_			this.parseState.push(new AdvisorEntry(id))__			String advisorBeanName = id__			if (StringUtils.hasText(advisorBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(advisorBeanName, advisorDef)__			}_			else {_				advisorBeanName = parserContext.getReaderContext().registerWithGeneratedName(advisorDef)__			}__			Object pointcut = parsePointcutProperty(advisorElement, parserContext)__			if (pointcut instanceof BeanDefinition) {_				advisorDef.getPropertyValues().add(POINTCUT, pointcut)__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef, (BeanDefinition) pointcut))__			}_			else if (pointcut instanceof String) {_				advisorDef.getPropertyValues().add(POINTCUT, new RuntimeBeanReference((String) pointcut))__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef))__			}_		}_		finally {_			this.parseState.pop()__		}_	};parses,the,supplied,code,advisor,element,and,registers,the,resulting,link,org,springframework,aop,advisor,and,any,resulting,link,org,springframework,aop,pointcut,with,the,supplied,link,bean,definition,registry;private,void,parse,advisor,element,advisor,element,parser,context,parser,context,abstract,bean,definition,advisor,def,create,advisor,bean,definition,advisor,element,parser,context,string,id,advisor,element,get,attribute,id,try,this,parse,state,push,new,advisor,entry,id,string,advisor,bean,name,id,if,string,utils,has,text,advisor,bean,name,parser,context,get,registry,register,bean,definition,advisor,bean,name,advisor,def,else,advisor,bean,name,parser,context,get,reader,context,register,with,generated,name,advisor,def,object,pointcut,parse,pointcut,property,advisor,element,parser,context,if,pointcut,instanceof,bean,definition,advisor,def,get,property,values,add,pointcut,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,bean,definition,pointcut,else,if,pointcut,instanceof,string,advisor,def,get,property,values,add,pointcut,new,runtime,bean,reference,string,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private void parseAdvisor(Element advisorElement, ParserContext parserContext);1495868221;Parses the supplied {@code <advisor>} element and registers the resulting_{@link org.springframework.aop.Advisor} and any resulting {@link org.springframework.aop.Pointcut}_with the supplied {@link BeanDefinitionRegistry}.;private void parseAdvisor(Element advisorElement, ParserContext parserContext) {_		AbstractBeanDefinition advisorDef = createAdvisorBeanDefinition(advisorElement, parserContext)__		String id = advisorElement.getAttribute(ID)___		try {_			this.parseState.push(new AdvisorEntry(id))__			String advisorBeanName = id__			if (StringUtils.hasText(advisorBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(advisorBeanName, advisorDef)__			}_			else {_				advisorBeanName = parserContext.getReaderContext().registerWithGeneratedName(advisorDef)__			}__			Object pointcut = parsePointcutProperty(advisorElement, parserContext)__			if (pointcut instanceof BeanDefinition) {_				advisorDef.getPropertyValues().add(POINTCUT, pointcut)__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef, (BeanDefinition) pointcut))__			}_			else if (pointcut instanceof String) {_				advisorDef.getPropertyValues().add(POINTCUT, new RuntimeBeanReference((String) pointcut))__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef))__			}_		}_		finally {_			this.parseState.pop()__		}_	};parses,the,supplied,code,advisor,element,and,registers,the,resulting,link,org,springframework,aop,advisor,and,any,resulting,link,org,springframework,aop,pointcut,with,the,supplied,link,bean,definition,registry;private,void,parse,advisor,element,advisor,element,parser,context,parser,context,abstract,bean,definition,advisor,def,create,advisor,bean,definition,advisor,element,parser,context,string,id,advisor,element,get,attribute,id,try,this,parse,state,push,new,advisor,entry,id,string,advisor,bean,name,id,if,string,utils,has,text,advisor,bean,name,parser,context,get,registry,register,bean,definition,advisor,bean,name,advisor,def,else,advisor,bean,name,parser,context,get,reader,context,register,with,generated,name,advisor,def,object,pointcut,parse,pointcut,property,advisor,element,parser,context,if,pointcut,instanceof,bean,definition,advisor,def,get,property,values,add,pointcut,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,bean,definition,pointcut,else,if,pointcut,instanceof,string,advisor,def,get,property,values,add,pointcut,new,runtime,bean,reference,string,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private void parseAdvisor(Element advisorElement, ParserContext parserContext);1502974979;Parses the supplied {@code <advisor>} element and registers the resulting_{@link org.springframework.aop.Advisor} and any resulting {@link org.springframework.aop.Pointcut}_with the supplied {@link BeanDefinitionRegistry}.;private void parseAdvisor(Element advisorElement, ParserContext parserContext) {_		AbstractBeanDefinition advisorDef = createAdvisorBeanDefinition(advisorElement, parserContext)__		String id = advisorElement.getAttribute(ID)___		try {_			this.parseState.push(new AdvisorEntry(id))__			String advisorBeanName = id__			if (StringUtils.hasText(advisorBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(advisorBeanName, advisorDef)__			}_			else {_				advisorBeanName = parserContext.getReaderContext().registerWithGeneratedName(advisorDef)__			}__			Object pointcut = parsePointcutProperty(advisorElement, parserContext)__			if (pointcut instanceof BeanDefinition) {_				advisorDef.getPropertyValues().add(POINTCUT, pointcut)__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef, (BeanDefinition) pointcut))__			}_			else if (pointcut instanceof String) {_				advisorDef.getPropertyValues().add(POINTCUT, new RuntimeBeanReference((String) pointcut))__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef))__			}_		}_		finally {_			this.parseState.pop()__		}_	};parses,the,supplied,code,advisor,element,and,registers,the,resulting,link,org,springframework,aop,advisor,and,any,resulting,link,org,springframework,aop,pointcut,with,the,supplied,link,bean,definition,registry;private,void,parse,advisor,element,advisor,element,parser,context,parser,context,abstract,bean,definition,advisor,def,create,advisor,bean,definition,advisor,element,parser,context,string,id,advisor,element,get,attribute,id,try,this,parse,state,push,new,advisor,entry,id,string,advisor,bean,name,id,if,string,utils,has,text,advisor,bean,name,parser,context,get,registry,register,bean,definition,advisor,bean,name,advisor,def,else,advisor,bean,name,parser,context,get,reader,context,register,with,generated,name,advisor,def,object,pointcut,parse,pointcut,property,advisor,element,parser,context,if,pointcut,instanceof,bean,definition,advisor,def,get,property,values,add,pointcut,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,bean,definition,pointcut,else,if,pointcut,instanceof,string,advisor,def,get,property,values,add,pointcut,new,runtime,bean,reference,string,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private void parseAdvisor(Element advisorElement, ParserContext parserContext);1519295386;Parses the supplied {@code <advisor>} element and registers the resulting_{@link org.springframework.aop.Advisor} and any resulting {@link org.springframework.aop.Pointcut}_with the supplied {@link BeanDefinitionRegistry}.;private void parseAdvisor(Element advisorElement, ParserContext parserContext) {_		AbstractBeanDefinition advisorDef = createAdvisorBeanDefinition(advisorElement, parserContext)__		String id = advisorElement.getAttribute(ID)___		try {_			this.parseState.push(new AdvisorEntry(id))__			String advisorBeanName = id__			if (StringUtils.hasText(advisorBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(advisorBeanName, advisorDef)__			}_			else {_				advisorBeanName = parserContext.getReaderContext().registerWithGeneratedName(advisorDef)__			}__			Object pointcut = parsePointcutProperty(advisorElement, parserContext)__			if (pointcut instanceof BeanDefinition) {_				advisorDef.getPropertyValues().add(POINTCUT, pointcut)__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef, (BeanDefinition) pointcut))__			}_			else if (pointcut instanceof String) {_				advisorDef.getPropertyValues().add(POINTCUT, new RuntimeBeanReference((String) pointcut))__				parserContext.registerComponent(_						new AdvisorComponentDefinition(advisorBeanName, advisorDef))__			}_		}_		finally {_			this.parseState.pop()__		}_	};parses,the,supplied,code,advisor,element,and,registers,the,resulting,link,org,springframework,aop,advisor,and,any,resulting,link,org,springframework,aop,pointcut,with,the,supplied,link,bean,definition,registry;private,void,parse,advisor,element,advisor,element,parser,context,parser,context,abstract,bean,definition,advisor,def,create,advisor,bean,definition,advisor,element,parser,context,string,id,advisor,element,get,attribute,id,try,this,parse,state,push,new,advisor,entry,id,string,advisor,bean,name,id,if,string,utils,has,text,advisor,bean,name,parser,context,get,registry,register,bean,definition,advisor,bean,name,advisor,def,else,advisor,bean,name,parser,context,get,reader,context,register,with,generated,name,advisor,def,object,pointcut,parse,pointcut,property,advisor,element,parser,context,if,pointcut,instanceof,bean,definition,advisor,def,get,property,values,add,pointcut,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,bean,definition,pointcut,else,if,pointcut,instanceof,string,advisor,def,get,property,values,add,pointcut,new,runtime,bean,reference,string,pointcut,parser,context,register,component,new,advisor,component,definition,advisor,bean,name,advisor,def,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private Class<?> getAdviceClass(Element adviceElement, ParserContext parserContext);1385412762;Gets the advice implementation class corresponding to the supplied {@link Element}.;private Class<?> getAdviceClass(Element adviceElement, ParserContext parserContext) {_		String elementName = parserContext.getDelegate().getLocalName(adviceElement)__		if (BEFORE.equals(elementName)) {_			return AspectJMethodBeforeAdvice.class__		}_		else if (AFTER.equals(elementName)) {_			return AspectJAfterAdvice.class__		}_		else if (AFTER_RETURNING_ELEMENT.equals(elementName)) {_			return AspectJAfterReturningAdvice.class__		}_		else if (AFTER_THROWING_ELEMENT.equals(elementName)) {_			return AspectJAfterThrowingAdvice.class__		}_		else if (AROUND.equals(elementName)) {_			return AspectJAroundAdvice.class__		}_		else {_			throw new IllegalArgumentException("Unknown advice kind [" + elementName + "].")__		}_	};gets,the,advice,implementation,class,corresponding,to,the,supplied,link,element;private,class,get,advice,class,element,advice,element,parser,context,parser,context,string,element,name,parser,context,get,delegate,get,local,name,advice,element,if,before,equals,element,name,return,aspect,jmethod,before,advice,class,else,if,after,equals,element,name,return,aspect,jafter,advice,class,else,if,equals,element,name,return,aspect,jafter,returning,advice,class,else,if,equals,element,name,return,aspect,jafter,throwing,advice,class,else,if,around,equals,element,name,return,aspect,jaround,advice,class,else,throw,new,illegal,argument,exception,unknown,advice,kind,element,name
ConfigBeanDefinitionParser -> private Class<?> getAdviceClass(Element adviceElement, ParserContext parserContext);1447323728;Gets the advice implementation class corresponding to the supplied {@link Element}.;private Class<?> getAdviceClass(Element adviceElement, ParserContext parserContext) {_		String elementName = parserContext.getDelegate().getLocalName(adviceElement)__		if (BEFORE.equals(elementName)) {_			return AspectJMethodBeforeAdvice.class__		}_		else if (AFTER.equals(elementName)) {_			return AspectJAfterAdvice.class__		}_		else if (AFTER_RETURNING_ELEMENT.equals(elementName)) {_			return AspectJAfterReturningAdvice.class__		}_		else if (AFTER_THROWING_ELEMENT.equals(elementName)) {_			return AspectJAfterThrowingAdvice.class__		}_		else if (AROUND.equals(elementName)) {_			return AspectJAroundAdvice.class__		}_		else {_			throw new IllegalArgumentException("Unknown advice kind [" + elementName + "].")__		}_	};gets,the,advice,implementation,class,corresponding,to,the,supplied,link,element;private,class,get,advice,class,element,advice,element,parser,context,parser,context,string,element,name,parser,context,get,delegate,get,local,name,advice,element,if,before,equals,element,name,return,aspect,jmethod,before,advice,class,else,if,after,equals,element,name,return,aspect,jafter,advice,class,else,if,equals,element,name,return,aspect,jafter,returning,advice,class,else,if,equals,element,name,return,aspect,jafter,throwing,advice,class,else,if,around,equals,element,name,return,aspect,jaround,advice,class,else,throw,new,illegal,argument,exception,unknown,advice,kind,element,name
ConfigBeanDefinitionParser -> private Class<?> getAdviceClass(Element adviceElement, ParserContext parserContext);1467730834;Gets the advice implementation class corresponding to the supplied {@link Element}.;private Class<?> getAdviceClass(Element adviceElement, ParserContext parserContext) {_		String elementName = parserContext.getDelegate().getLocalName(adviceElement)__		if (BEFORE.equals(elementName)) {_			return AspectJMethodBeforeAdvice.class__		}_		else if (AFTER.equals(elementName)) {_			return AspectJAfterAdvice.class__		}_		else if (AFTER_RETURNING_ELEMENT.equals(elementName)) {_			return AspectJAfterReturningAdvice.class__		}_		else if (AFTER_THROWING_ELEMENT.equals(elementName)) {_			return AspectJAfterThrowingAdvice.class__		}_		else if (AROUND.equals(elementName)) {_			return AspectJAroundAdvice.class__		}_		else {_			throw new IllegalArgumentException("Unknown advice kind [" + elementName + "].")__		}_	};gets,the,advice,implementation,class,corresponding,to,the,supplied,link,element;private,class,get,advice,class,element,advice,element,parser,context,parser,context,string,element,name,parser,context,get,delegate,get,local,name,advice,element,if,before,equals,element,name,return,aspect,jmethod,before,advice,class,else,if,after,equals,element,name,return,aspect,jafter,advice,class,else,if,equals,element,name,return,aspect,jafter,returning,advice,class,else,if,equals,element,name,return,aspect,jafter,throwing,advice,class,else,if,around,equals,element,name,return,aspect,jaround,advice,class,else,throw,new,illegal,argument,exception,unknown,advice,kind,element,name
ConfigBeanDefinitionParser -> private Class<?> getAdviceClass(Element adviceElement, ParserContext parserContext);1495868221;Gets the advice implementation class corresponding to the supplied {@link Element}.;private Class<?> getAdviceClass(Element adviceElement, ParserContext parserContext) {_		String elementName = parserContext.getDelegate().getLocalName(adviceElement)__		if (BEFORE.equals(elementName)) {_			return AspectJMethodBeforeAdvice.class__		}_		else if (AFTER.equals(elementName)) {_			return AspectJAfterAdvice.class__		}_		else if (AFTER_RETURNING_ELEMENT.equals(elementName)) {_			return AspectJAfterReturningAdvice.class__		}_		else if (AFTER_THROWING_ELEMENT.equals(elementName)) {_			return AspectJAfterThrowingAdvice.class__		}_		else if (AROUND.equals(elementName)) {_			return AspectJAroundAdvice.class__		}_		else {_			throw new IllegalArgumentException("Unknown advice kind [" + elementName + "].")__		}_	};gets,the,advice,implementation,class,corresponding,to,the,supplied,link,element;private,class,get,advice,class,element,advice,element,parser,context,parser,context,string,element,name,parser,context,get,delegate,get,local,name,advice,element,if,before,equals,element,name,return,aspect,jmethod,before,advice,class,else,if,after,equals,element,name,return,aspect,jafter,advice,class,else,if,equals,element,name,return,aspect,jafter,returning,advice,class,else,if,equals,element,name,return,aspect,jafter,throwing,advice,class,else,if,around,equals,element,name,return,aspect,jaround,advice,class,else,throw,new,illegal,argument,exception,unknown,advice,kind,element,name
ConfigBeanDefinitionParser -> private Class<?> getAdviceClass(Element adviceElement, ParserContext parserContext);1502974979;Gets the advice implementation class corresponding to the supplied {@link Element}.;private Class<?> getAdviceClass(Element adviceElement, ParserContext parserContext) {_		String elementName = parserContext.getDelegate().getLocalName(adviceElement)__		if (BEFORE.equals(elementName)) {_			return AspectJMethodBeforeAdvice.class__		}_		else if (AFTER.equals(elementName)) {_			return AspectJAfterAdvice.class__		}_		else if (AFTER_RETURNING_ELEMENT.equals(elementName)) {_			return AspectJAfterReturningAdvice.class__		}_		else if (AFTER_THROWING_ELEMENT.equals(elementName)) {_			return AspectJAfterThrowingAdvice.class__		}_		else if (AROUND.equals(elementName)) {_			return AspectJAroundAdvice.class__		}_		else {_			throw new IllegalArgumentException("Unknown advice kind [" + elementName + "].")__		}_	};gets,the,advice,implementation,class,corresponding,to,the,supplied,link,element;private,class,get,advice,class,element,advice,element,parser,context,parser,context,string,element,name,parser,context,get,delegate,get,local,name,advice,element,if,before,equals,element,name,return,aspect,jmethod,before,advice,class,else,if,after,equals,element,name,return,aspect,jafter,advice,class,else,if,equals,element,name,return,aspect,jafter,returning,advice,class,else,if,equals,element,name,return,aspect,jafter,throwing,advice,class,else,if,around,equals,element,name,return,aspect,jaround,advice,class,else,throw,new,illegal,argument,exception,unknown,advice,kind,element,name
ConfigBeanDefinitionParser -> private Class<?> getAdviceClass(Element adviceElement, ParserContext parserContext);1519295386;Gets the advice implementation class corresponding to the supplied {@link Element}.;private Class<?> getAdviceClass(Element adviceElement, ParserContext parserContext) {_		String elementName = parserContext.getDelegate().getLocalName(adviceElement)__		if (BEFORE.equals(elementName)) {_			return AspectJMethodBeforeAdvice.class__		}_		else if (AFTER.equals(elementName)) {_			return AspectJAfterAdvice.class__		}_		else if (AFTER_RETURNING_ELEMENT.equals(elementName)) {_			return AspectJAfterReturningAdvice.class__		}_		else if (AFTER_THROWING_ELEMENT.equals(elementName)) {_			return AspectJAfterThrowingAdvice.class__		}_		else if (AROUND.equals(elementName)) {_			return AspectJAroundAdvice.class__		}_		else {_			throw new IllegalArgumentException("Unknown advice kind [" + elementName + "].")__		}_	};gets,the,advice,implementation,class,corresponding,to,the,supplied,link,element;private,class,get,advice,class,element,advice,element,parser,context,parser,context,string,element,name,parser,context,get,delegate,get,local,name,advice,element,if,before,equals,element,name,return,aspect,jmethod,before,advice,class,else,if,after,equals,element,name,return,aspect,jafter,advice,class,else,if,equals,element,name,return,aspect,jafter,returning,advice,class,else,if,equals,element,name,return,aspect,jafter,throwing,advice,class,else,if,around,equals,element,name,return,aspect,jaround,advice,class,else,throw,new,illegal,argument,exception,unknown,advice,kind,element,name
ConfigBeanDefinitionParser -> private void configureAutoProxyCreator(ParserContext parserContext, Element element);1328020251;Configures the auto proxy creator needed to support the {@link BeanDefinition BeanDefinitions}_created by the '<code>&lt_aop:config/&gt_</code>' tag. Will force class proxying if the_'<code>proxy-target-class</code>' attribute is set to '<code>true</code>'._@see AopNamespaceUtils;private void configureAutoProxyCreator(ParserContext parserContext, Element element) {_		AopNamespaceUtils.registerAspectJAutoProxyCreatorIfNecessary(parserContext, element)__	};configures,the,auto,proxy,creator,needed,to,support,the,link,bean,definition,bean,definitions,created,by,the,code,lt,aop,config,gt,code,tag,will,force,class,proxying,if,the,code,proxy,target,class,code,attribute,is,set,to,code,true,code,see,aop,namespace,utils;private,void,configure,auto,proxy,creator,parser,context,parser,context,element,element,aop,namespace,utils,register,aspect,jauto,proxy,creator,if,necessary,parser,context,element
ConfigBeanDefinitionParser -> private void configureAutoProxyCreator(ParserContext parserContext, Element element);1356735495;Configures the auto proxy creator needed to support the {@link BeanDefinition BeanDefinitions}_created by the '{@code &lt_aop:config/&gt_}' tag. Will force class proxying if the_'{@code proxy-target-class}' attribute is set to '{@code true}'._@see AopNamespaceUtils;private void configureAutoProxyCreator(ParserContext parserContext, Element element) {_		AopNamespaceUtils.registerAspectJAutoProxyCreatorIfNecessary(parserContext, element)__	};configures,the,auto,proxy,creator,needed,to,support,the,link,bean,definition,bean,definitions,created,by,the,code,lt,aop,config,gt,tag,will,force,class,proxying,if,the,code,proxy,target,class,attribute,is,set,to,code,true,see,aop,namespace,utils;private,void,configure,auto,proxy,creator,parser,context,parser,context,element,element,aop,namespace,utils,register,aspect,jauto,proxy,creator,if,necessary,parser,context,element
ConfigBeanDefinitionParser -> private void configureAutoProxyCreator(ParserContext parserContext, Element element);1357119239;Configures the auto proxy creator needed to support the {@link BeanDefinition BeanDefinitions}_created by the '{@code &lt_aop:config/&gt_}' tag. Will force class proxying if the_'{@code proxy-target-class}' attribute is set to '{@code true}'._@see AopNamespaceUtils;private void configureAutoProxyCreator(ParserContext parserContext, Element element) {_		AopNamespaceUtils.registerAspectJAutoProxyCreatorIfNecessary(parserContext, element)__	};configures,the,auto,proxy,creator,needed,to,support,the,link,bean,definition,bean,definitions,created,by,the,code,lt,aop,config,gt,tag,will,force,class,proxying,if,the,code,proxy,target,class,attribute,is,set,to,code,true,see,aop,namespace,utils;private,void,configure,auto,proxy,creator,parser,context,parser,context,element,element,aop,namespace,utils,register,aspect,jauto,proxy,creator,if,necessary,parser,context,element
ConfigBeanDefinitionParser -> private void configureAutoProxyCreator(ParserContext parserContext, Element element);1368482696;Configures the auto proxy creator needed to support the {@link BeanDefinition BeanDefinitions}_created by the '{@code &lt_aop:config/&gt_}' tag. Will force class proxying if the_'{@code proxy-target-class}' attribute is set to '{@code true}'._@see AopNamespaceUtils;private void configureAutoProxyCreator(ParserContext parserContext, Element element) {_		AopNamespaceUtils.registerAspectJAutoProxyCreatorIfNecessary(parserContext, element)__	};configures,the,auto,proxy,creator,needed,to,support,the,link,bean,definition,bean,definitions,created,by,the,code,lt,aop,config,gt,tag,will,force,class,proxying,if,the,code,proxy,target,class,attribute,is,set,to,code,true,see,aop,namespace,utils;private,void,configure,auto,proxy,creator,parser,context,parser,context,element,element,aop,namespace,utils,register,aspect,jauto,proxy,creator,if,necessary,parser,context,element
ConfigBeanDefinitionParser -> private void configureAutoProxyCreator(ParserContext parserContext, Element element);1385412762;Configures the auto proxy creator needed to support the {@link BeanDefinition BeanDefinitions}_created by the '{@code &lt_aop:config/&gt_}' tag. Will force class proxying if the_'{@code proxy-target-class}' attribute is set to '{@code true}'._@see AopNamespaceUtils;private void configureAutoProxyCreator(ParserContext parserContext, Element element) {_		AopNamespaceUtils.registerAspectJAutoProxyCreatorIfNecessary(parserContext, element)__	};configures,the,auto,proxy,creator,needed,to,support,the,link,bean,definition,bean,definitions,created,by,the,code,lt,aop,config,gt,tag,will,force,class,proxying,if,the,code,proxy,target,class,attribute,is,set,to,code,true,see,aop,namespace,utils;private,void,configure,auto,proxy,creator,parser,context,parser,context,element,element,aop,namespace,utils,register,aspect,jauto,proxy,creator,if,necessary,parser,context,element
ConfigBeanDefinitionParser -> private void configureAutoProxyCreator(ParserContext parserContext, Element element);1447323728;Configures the auto proxy creator needed to support the {@link BeanDefinition BeanDefinitions}_created by the '{@code <aop:config/>}' tag. Will force class proxying if the_'{@code proxy-target-class}' attribute is set to '{@code true}'._@see AopNamespaceUtils;private void configureAutoProxyCreator(ParserContext parserContext, Element element) {_		AopNamespaceUtils.registerAspectJAutoProxyCreatorIfNecessary(parserContext, element)__	};configures,the,auto,proxy,creator,needed,to,support,the,link,bean,definition,bean,definitions,created,by,the,code,aop,config,tag,will,force,class,proxying,if,the,code,proxy,target,class,attribute,is,set,to,code,true,see,aop,namespace,utils;private,void,configure,auto,proxy,creator,parser,context,parser,context,element,element,aop,namespace,utils,register,aspect,jauto,proxy,creator,if,necessary,parser,context,element
ConfigBeanDefinitionParser -> private void configureAutoProxyCreator(ParserContext parserContext, Element element);1467730834;Configures the auto proxy creator needed to support the {@link BeanDefinition BeanDefinitions}_created by the '{@code <aop:config/>}' tag. Will force class proxying if the_'{@code proxy-target-class}' attribute is set to '{@code true}'._@see AopNamespaceUtils;private void configureAutoProxyCreator(ParserContext parserContext, Element element) {_		AopNamespaceUtils.registerAspectJAutoProxyCreatorIfNecessary(parserContext, element)__	};configures,the,auto,proxy,creator,needed,to,support,the,link,bean,definition,bean,definitions,created,by,the,code,aop,config,tag,will,force,class,proxying,if,the,code,proxy,target,class,attribute,is,set,to,code,true,see,aop,namespace,utils;private,void,configure,auto,proxy,creator,parser,context,parser,context,element,element,aop,namespace,utils,register,aspect,jauto,proxy,creator,if,necessary,parser,context,element
ConfigBeanDefinitionParser -> private void configureAutoProxyCreator(ParserContext parserContext, Element element);1495868221;Configures the auto proxy creator needed to support the {@link BeanDefinition BeanDefinitions}_created by the '{@code <aop:config/>}' tag. Will force class proxying if the_'{@code proxy-target-class}' attribute is set to '{@code true}'._@see AopNamespaceUtils;private void configureAutoProxyCreator(ParserContext parserContext, Element element) {_		AopNamespaceUtils.registerAspectJAutoProxyCreatorIfNecessary(parserContext, element)__	};configures,the,auto,proxy,creator,needed,to,support,the,link,bean,definition,bean,definitions,created,by,the,code,aop,config,tag,will,force,class,proxying,if,the,code,proxy,target,class,attribute,is,set,to,code,true,see,aop,namespace,utils;private,void,configure,auto,proxy,creator,parser,context,parser,context,element,element,aop,namespace,utils,register,aspect,jauto,proxy,creator,if,necessary,parser,context,element
ConfigBeanDefinitionParser -> private void configureAutoProxyCreator(ParserContext parserContext, Element element);1502974979;Configures the auto proxy creator needed to support the {@link BeanDefinition BeanDefinitions}_created by the '{@code <aop:config/>}' tag. Will force class proxying if the_'{@code proxy-target-class}' attribute is set to '{@code true}'._@see AopNamespaceUtils;private void configureAutoProxyCreator(ParserContext parserContext, Element element) {_		AopNamespaceUtils.registerAspectJAutoProxyCreatorIfNecessary(parserContext, element)__	};configures,the,auto,proxy,creator,needed,to,support,the,link,bean,definition,bean,definitions,created,by,the,code,aop,config,tag,will,force,class,proxying,if,the,code,proxy,target,class,attribute,is,set,to,code,true,see,aop,namespace,utils;private,void,configure,auto,proxy,creator,parser,context,parser,context,element,element,aop,namespace,utils,register,aspect,jauto,proxy,creator,if,necessary,parser,context,element
ConfigBeanDefinitionParser -> private void configureAutoProxyCreator(ParserContext parserContext, Element element);1519295386;Configures the auto proxy creator needed to support the {@link BeanDefinition BeanDefinitions}_created by the '{@code <aop:config/>}' tag. Will force class proxying if the_'{@code proxy-target-class}' attribute is set to '{@code true}'._@see AopNamespaceUtils;private void configureAutoProxyCreator(ParserContext parserContext, Element element) {_		AopNamespaceUtils.registerAspectJAutoProxyCreatorIfNecessary(parserContext, element)__	};configures,the,auto,proxy,creator,needed,to,support,the,link,bean,definition,bean,definitions,created,by,the,code,aop,config,tag,will,force,class,proxying,if,the,code,proxy,target,class,attribute,is,set,to,code,true,see,aop,namespace,utils;private,void,configure,auto,proxy,creator,parser,context,parser,context,element,element,aop,namespace,utils,register,aspect,jauto,proxy,creator,if,necessary,parser,context,element
ConfigBeanDefinitionParser -> private boolean isAdviceNode(Node aNode, ParserContext parserContext);1328020251;Return <code>true</code> if the supplied node describes an advice type. May be one of:_'<code>before</code>', '<code>after</code>', '<code>after-returning</code>',_'<code>after-throwing</code>' or '<code>around</code>'.;private boolean isAdviceNode(Node aNode, ParserContext parserContext) {_		if (!(aNode instanceof Element)) {_			return false__		}_		else {_			String name = parserContext.getDelegate().getLocalName(aNode)__			return (BEFORE.equals(name) || AFTER.equals(name) || AFTER_RETURNING_ELEMENT.equals(name) ||_					AFTER_THROWING_ELEMENT.equals(name) || AROUND.equals(name))__		}_	};return,code,true,code,if,the,supplied,node,describes,an,advice,type,may,be,one,of,code,before,code,code,after,code,code,after,returning,code,code,after,throwing,code,or,code,around,code;private,boolean,is,advice,node,node,a,node,parser,context,parser,context,if,a,node,instanceof,element,return,false,else,string,name,parser,context,get,delegate,get,local,name,a,node,return,before,equals,name,after,equals,name,equals,name,equals,name,around,equals,name
ConfigBeanDefinitionParser -> private boolean isAdviceNode(Node aNode, ParserContext parserContext);1356735495;Return {@code true} if the supplied node describes an advice type. May be one of:_'{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}'.;private boolean isAdviceNode(Node aNode, ParserContext parserContext) {_		if (!(aNode instanceof Element)) {_			return false__		}_		else {_			String name = parserContext.getDelegate().getLocalName(aNode)__			return (BEFORE.equals(name) || AFTER.equals(name) || AFTER_RETURNING_ELEMENT.equals(name) ||_					AFTER_THROWING_ELEMENT.equals(name) || AROUND.equals(name))__		}_	};return,code,true,if,the,supplied,node,describes,an,advice,type,may,be,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around;private,boolean,is,advice,node,node,a,node,parser,context,parser,context,if,a,node,instanceof,element,return,false,else,string,name,parser,context,get,delegate,get,local,name,a,node,return,before,equals,name,after,equals,name,equals,name,equals,name,around,equals,name
ConfigBeanDefinitionParser -> private boolean isAdviceNode(Node aNode, ParserContext parserContext);1357119239;Return {@code true} if the supplied node describes an advice type. May be one of:_'{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}'.;private boolean isAdviceNode(Node aNode, ParserContext parserContext) {_		if (!(aNode instanceof Element)) {_			return false__		}_		else {_			String name = parserContext.getDelegate().getLocalName(aNode)__			return (BEFORE.equals(name) || AFTER.equals(name) || AFTER_RETURNING_ELEMENT.equals(name) ||_					AFTER_THROWING_ELEMENT.equals(name) || AROUND.equals(name))__		}_	};return,code,true,if,the,supplied,node,describes,an,advice,type,may,be,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around;private,boolean,is,advice,node,node,a,node,parser,context,parser,context,if,a,node,instanceof,element,return,false,else,string,name,parser,context,get,delegate,get,local,name,a,node,return,before,equals,name,after,equals,name,equals,name,equals,name,around,equals,name
ConfigBeanDefinitionParser -> private boolean isAdviceNode(Node aNode, ParserContext parserContext);1368482696;Return {@code true} if the supplied node describes an advice type. May be one of:_'{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}'.;private boolean isAdviceNode(Node aNode, ParserContext parserContext) {_		if (!(aNode instanceof Element)) {_			return false__		}_		else {_			String name = parserContext.getDelegate().getLocalName(aNode)__			return (BEFORE.equals(name) || AFTER.equals(name) || AFTER_RETURNING_ELEMENT.equals(name) ||_					AFTER_THROWING_ELEMENT.equals(name) || AROUND.equals(name))__		}_	};return,code,true,if,the,supplied,node,describes,an,advice,type,may,be,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around;private,boolean,is,advice,node,node,a,node,parser,context,parser,context,if,a,node,instanceof,element,return,false,else,string,name,parser,context,get,delegate,get,local,name,a,node,return,before,equals,name,after,equals,name,equals,name,equals,name,around,equals,name
ConfigBeanDefinitionParser -> private boolean isAdviceNode(Node aNode, ParserContext parserContext);1385412762;Return {@code true} if the supplied node describes an advice type. May be one of:_'{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}'.;private boolean isAdviceNode(Node aNode, ParserContext parserContext) {_		if (!(aNode instanceof Element)) {_			return false__		}_		else {_			String name = parserContext.getDelegate().getLocalName(aNode)__			return (BEFORE.equals(name) || AFTER.equals(name) || AFTER_RETURNING_ELEMENT.equals(name) ||_					AFTER_THROWING_ELEMENT.equals(name) || AROUND.equals(name))__		}_	};return,code,true,if,the,supplied,node,describes,an,advice,type,may,be,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around;private,boolean,is,advice,node,node,a,node,parser,context,parser,context,if,a,node,instanceof,element,return,false,else,string,name,parser,context,get,delegate,get,local,name,a,node,return,before,equals,name,after,equals,name,equals,name,equals,name,around,equals,name
ConfigBeanDefinitionParser -> private boolean isAdviceNode(Node aNode, ParserContext parserContext);1447323728;Return {@code true} if the supplied node describes an advice type. May be one of:_'{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}'.;private boolean isAdviceNode(Node aNode, ParserContext parserContext) {_		if (!(aNode instanceof Element)) {_			return false__		}_		else {_			String name = parserContext.getDelegate().getLocalName(aNode)__			return (BEFORE.equals(name) || AFTER.equals(name) || AFTER_RETURNING_ELEMENT.equals(name) ||_					AFTER_THROWING_ELEMENT.equals(name) || AROUND.equals(name))__		}_	};return,code,true,if,the,supplied,node,describes,an,advice,type,may,be,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around;private,boolean,is,advice,node,node,a,node,parser,context,parser,context,if,a,node,instanceof,element,return,false,else,string,name,parser,context,get,delegate,get,local,name,a,node,return,before,equals,name,after,equals,name,equals,name,equals,name,around,equals,name
ConfigBeanDefinitionParser -> private boolean isAdviceNode(Node aNode, ParserContext parserContext);1467730834;Return {@code true} if the supplied node describes an advice type. May be one of:_'{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}'.;private boolean isAdviceNode(Node aNode, ParserContext parserContext) {_		if (!(aNode instanceof Element)) {_			return false__		}_		else {_			String name = parserContext.getDelegate().getLocalName(aNode)__			return (BEFORE.equals(name) || AFTER.equals(name) || AFTER_RETURNING_ELEMENT.equals(name) ||_					AFTER_THROWING_ELEMENT.equals(name) || AROUND.equals(name))__		}_	};return,code,true,if,the,supplied,node,describes,an,advice,type,may,be,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around;private,boolean,is,advice,node,node,a,node,parser,context,parser,context,if,a,node,instanceof,element,return,false,else,string,name,parser,context,get,delegate,get,local,name,a,node,return,before,equals,name,after,equals,name,equals,name,equals,name,around,equals,name
ConfigBeanDefinitionParser -> private boolean isAdviceNode(Node aNode, ParserContext parserContext);1495868221;Return {@code true} if the supplied node describes an advice type. May be one of:_'{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}'.;private boolean isAdviceNode(Node aNode, ParserContext parserContext) {_		if (!(aNode instanceof Element)) {_			return false__		}_		else {_			String name = parserContext.getDelegate().getLocalName(aNode)__			return (BEFORE.equals(name) || AFTER.equals(name) || AFTER_RETURNING_ELEMENT.equals(name) ||_					AFTER_THROWING_ELEMENT.equals(name) || AROUND.equals(name))__		}_	};return,code,true,if,the,supplied,node,describes,an,advice,type,may,be,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around;private,boolean,is,advice,node,node,a,node,parser,context,parser,context,if,a,node,instanceof,element,return,false,else,string,name,parser,context,get,delegate,get,local,name,a,node,return,before,equals,name,after,equals,name,equals,name,equals,name,around,equals,name
ConfigBeanDefinitionParser -> private boolean isAdviceNode(Node aNode, ParserContext parserContext);1502974979;Return {@code true} if the supplied node describes an advice type. May be one of:_'{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}'.;private boolean isAdviceNode(Node aNode, ParserContext parserContext) {_		if (!(aNode instanceof Element)) {_			return false__		}_		else {_			String name = parserContext.getDelegate().getLocalName(aNode)__			return (BEFORE.equals(name) || AFTER.equals(name) || AFTER_RETURNING_ELEMENT.equals(name) ||_					AFTER_THROWING_ELEMENT.equals(name) || AROUND.equals(name))__		}_	};return,code,true,if,the,supplied,node,describes,an,advice,type,may,be,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around;private,boolean,is,advice,node,node,a,node,parser,context,parser,context,if,a,node,instanceof,element,return,false,else,string,name,parser,context,get,delegate,get,local,name,a,node,return,before,equals,name,after,equals,name,equals,name,equals,name,around,equals,name
ConfigBeanDefinitionParser -> private boolean isAdviceNode(Node aNode, ParserContext parserContext);1519295386;Return {@code true} if the supplied node describes an advice type. May be one of:_'{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}'.;private boolean isAdviceNode(Node aNode, ParserContext parserContext) {_		if (!(aNode instanceof Element)) {_			return false__		}_		else {_			String name = parserContext.getDelegate().getLocalName(aNode)__			return (BEFORE.equals(name) || AFTER.equals(name) || AFTER_RETURNING_ELEMENT.equals(name) ||_					AFTER_THROWING_ELEMENT.equals(name) || AROUND.equals(name))__		}_	};return,code,true,if,the,supplied,node,describes,an,advice,type,may,be,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around;private,boolean,is,advice,node,node,a,node,parser,context,parser,context,if,a,node,instanceof,element,return,false,else,string,name,parser,context,get,delegate,get,local,name,a,node,return,before,equals,name,after,equals,name,equals,name,equals,name,around,equals,name
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseAdvice( 			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1328020251;Parses one of '<code>before</code>', '<code>after</code>', '<code>after-returning</code>',_'<code>after-throwing</code>' or '<code>around</code>' and registers the resulting_BeanDefinition with the supplied BeanDefinitionRegistry._@return the generated advice RootBeanDefinition;private AbstractBeanDefinition parseAdvice(_			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		try {_			this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)))___			_			RootBeanDefinition methodDefinition = new RootBeanDefinition(MethodLocatingFactoryBean.class)__			methodDefinition.getPropertyValues().add("targetBeanName", aspectName)__			methodDefinition.getPropertyValues().add("methodName", adviceElement.getAttribute("method"))__			methodDefinition.setSynthetic(true)___			_			RootBeanDefinition aspectFactoryDef =_					new RootBeanDefinition(SimpleBeanFactoryAwareAspectInstanceFactory.class)__			aspectFactoryDef.getPropertyValues().add("aspectBeanName", aspectName)__			aspectFactoryDef.setSynthetic(true)___			_			AbstractBeanDefinition adviceDef = createAdviceDefinition(_					adviceElement, parserContext, aspectName, order, methodDefinition, aspectFactoryDef,_					beanDefinitions, beanReferences)___			_			RootBeanDefinition advisorDefinition = new RootBeanDefinition(AspectJPointcutAdvisor.class)__			advisorDefinition.setSource(parserContext.extractSource(adviceElement))__			advisorDefinition.getConstructorArgumentValues().addGenericArgumentValue(adviceDef)__			if (aspectElement.hasAttribute(ORDER_PROPERTY)) {_				advisorDefinition.getPropertyValues().add(_						ORDER_PROPERTY, aspectElement.getAttribute(ORDER_PROPERTY))__			}__			_			parserContext.getReaderContext().registerWithGeneratedName(advisorDefinition)___			return advisorDefinition__		}_		finally {_			this.parseState.pop()__		}_	};parses,one,of,code,before,code,code,after,code,code,after,returning,code,code,after,throwing,code,or,code,around,code,and,registers,the,resulting,bean,definition,with,the,supplied,bean,definition,registry,return,the,generated,advice,root,bean,definition;private,abstract,bean,definition,parse,advice,string,aspect,name,int,order,element,aspect,element,element,advice,element,parser,context,parser,context,list,bean,definition,bean,definitions,list,bean,reference,bean,references,try,this,parse,state,push,new,advice,entry,parser,context,get,delegate,get,local,name,advice,element,root,bean,definition,method,definition,new,root,bean,definition,method,locating,factory,bean,class,method,definition,get,property,values,add,target,bean,name,aspect,name,method,definition,get,property,values,add,method,name,advice,element,get,attribute,method,method,definition,set,synthetic,true,root,bean,definition,aspect,factory,def,new,root,bean,definition,simple,bean,factory,aware,aspect,instance,factory,class,aspect,factory,def,get,property,values,add,aspect,bean,name,aspect,name,aspect,factory,def,set,synthetic,true,abstract,bean,definition,advice,def,create,advice,definition,advice,element,parser,context,aspect,name,order,method,definition,aspect,factory,def,bean,definitions,bean,references,root,bean,definition,advisor,definition,new,root,bean,definition,aspect,jpointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advice,element,advisor,definition,get,constructor,argument,values,add,generic,argument,value,advice,def,if,aspect,element,has,attribute,advisor,definition,get,property,values,add,aspect,element,get,attribute,parser,context,get,reader,context,register,with,generated,name,advisor,definition,return,advisor,definition,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseAdvice( 			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1356735495;Parses one of '{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}' and registers the resulting_BeanDefinition with the supplied BeanDefinitionRegistry._@return the generated advice RootBeanDefinition;private AbstractBeanDefinition parseAdvice(_			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		try {_			this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)))___			_			RootBeanDefinition methodDefinition = new RootBeanDefinition(MethodLocatingFactoryBean.class)__			methodDefinition.getPropertyValues().add("targetBeanName", aspectName)__			methodDefinition.getPropertyValues().add("methodName", adviceElement.getAttribute("method"))__			methodDefinition.setSynthetic(true)___			_			RootBeanDefinition aspectFactoryDef =_					new RootBeanDefinition(SimpleBeanFactoryAwareAspectInstanceFactory.class)__			aspectFactoryDef.getPropertyValues().add("aspectBeanName", aspectName)__			aspectFactoryDef.setSynthetic(true)___			_			AbstractBeanDefinition adviceDef = createAdviceDefinition(_					adviceElement, parserContext, aspectName, order, methodDefinition, aspectFactoryDef,_					beanDefinitions, beanReferences)___			_			RootBeanDefinition advisorDefinition = new RootBeanDefinition(AspectJPointcutAdvisor.class)__			advisorDefinition.setSource(parserContext.extractSource(adviceElement))__			advisorDefinition.getConstructorArgumentValues().addGenericArgumentValue(adviceDef)__			if (aspectElement.hasAttribute(ORDER_PROPERTY)) {_				advisorDefinition.getPropertyValues().add(_						ORDER_PROPERTY, aspectElement.getAttribute(ORDER_PROPERTY))__			}__			_			parserContext.getReaderContext().registerWithGeneratedName(advisorDefinition)___			return advisorDefinition__		}_		finally {_			this.parseState.pop()__		}_	};parses,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around,and,registers,the,resulting,bean,definition,with,the,supplied,bean,definition,registry,return,the,generated,advice,root,bean,definition;private,abstract,bean,definition,parse,advice,string,aspect,name,int,order,element,aspect,element,element,advice,element,parser,context,parser,context,list,bean,definition,bean,definitions,list,bean,reference,bean,references,try,this,parse,state,push,new,advice,entry,parser,context,get,delegate,get,local,name,advice,element,root,bean,definition,method,definition,new,root,bean,definition,method,locating,factory,bean,class,method,definition,get,property,values,add,target,bean,name,aspect,name,method,definition,get,property,values,add,method,name,advice,element,get,attribute,method,method,definition,set,synthetic,true,root,bean,definition,aspect,factory,def,new,root,bean,definition,simple,bean,factory,aware,aspect,instance,factory,class,aspect,factory,def,get,property,values,add,aspect,bean,name,aspect,name,aspect,factory,def,set,synthetic,true,abstract,bean,definition,advice,def,create,advice,definition,advice,element,parser,context,aspect,name,order,method,definition,aspect,factory,def,bean,definitions,bean,references,root,bean,definition,advisor,definition,new,root,bean,definition,aspect,jpointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advice,element,advisor,definition,get,constructor,argument,values,add,generic,argument,value,advice,def,if,aspect,element,has,attribute,advisor,definition,get,property,values,add,aspect,element,get,attribute,parser,context,get,reader,context,register,with,generated,name,advisor,definition,return,advisor,definition,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseAdvice( 			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1357119239;Parses one of '{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}' and registers the resulting_BeanDefinition with the supplied BeanDefinitionRegistry._@return the generated advice RootBeanDefinition;private AbstractBeanDefinition parseAdvice(_			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		try {_			this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)))___			_			RootBeanDefinition methodDefinition = new RootBeanDefinition(MethodLocatingFactoryBean.class)__			methodDefinition.getPropertyValues().add("targetBeanName", aspectName)__			methodDefinition.getPropertyValues().add("methodName", adviceElement.getAttribute("method"))__			methodDefinition.setSynthetic(true)___			_			RootBeanDefinition aspectFactoryDef =_					new RootBeanDefinition(SimpleBeanFactoryAwareAspectInstanceFactory.class)__			aspectFactoryDef.getPropertyValues().add("aspectBeanName", aspectName)__			aspectFactoryDef.setSynthetic(true)___			_			AbstractBeanDefinition adviceDef = createAdviceDefinition(_					adviceElement, parserContext, aspectName, order, methodDefinition, aspectFactoryDef,_					beanDefinitions, beanReferences)___			_			RootBeanDefinition advisorDefinition = new RootBeanDefinition(AspectJPointcutAdvisor.class)__			advisorDefinition.setSource(parserContext.extractSource(adviceElement))__			advisorDefinition.getConstructorArgumentValues().addGenericArgumentValue(adviceDef)__			if (aspectElement.hasAttribute(ORDER_PROPERTY)) {_				advisorDefinition.getPropertyValues().add(_						ORDER_PROPERTY, aspectElement.getAttribute(ORDER_PROPERTY))__			}__			_			parserContext.getReaderContext().registerWithGeneratedName(advisorDefinition)___			return advisorDefinition__		}_		finally {_			this.parseState.pop()__		}_	};parses,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around,and,registers,the,resulting,bean,definition,with,the,supplied,bean,definition,registry,return,the,generated,advice,root,bean,definition;private,abstract,bean,definition,parse,advice,string,aspect,name,int,order,element,aspect,element,element,advice,element,parser,context,parser,context,list,bean,definition,bean,definitions,list,bean,reference,bean,references,try,this,parse,state,push,new,advice,entry,parser,context,get,delegate,get,local,name,advice,element,root,bean,definition,method,definition,new,root,bean,definition,method,locating,factory,bean,class,method,definition,get,property,values,add,target,bean,name,aspect,name,method,definition,get,property,values,add,method,name,advice,element,get,attribute,method,method,definition,set,synthetic,true,root,bean,definition,aspect,factory,def,new,root,bean,definition,simple,bean,factory,aware,aspect,instance,factory,class,aspect,factory,def,get,property,values,add,aspect,bean,name,aspect,name,aspect,factory,def,set,synthetic,true,abstract,bean,definition,advice,def,create,advice,definition,advice,element,parser,context,aspect,name,order,method,definition,aspect,factory,def,bean,definitions,bean,references,root,bean,definition,advisor,definition,new,root,bean,definition,aspect,jpointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advice,element,advisor,definition,get,constructor,argument,values,add,generic,argument,value,advice,def,if,aspect,element,has,attribute,advisor,definition,get,property,values,add,aspect,element,get,attribute,parser,context,get,reader,context,register,with,generated,name,advisor,definition,return,advisor,definition,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseAdvice( 			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1368482696;Parses one of '{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}' and registers the resulting_BeanDefinition with the supplied BeanDefinitionRegistry._@return the generated advice RootBeanDefinition;private AbstractBeanDefinition parseAdvice(_			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		try {_			this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)))___			_			RootBeanDefinition methodDefinition = new RootBeanDefinition(MethodLocatingFactoryBean.class)__			methodDefinition.getPropertyValues().add("targetBeanName", aspectName)__			methodDefinition.getPropertyValues().add("methodName", adviceElement.getAttribute("method"))__			methodDefinition.setSynthetic(true)___			_			RootBeanDefinition aspectFactoryDef =_					new RootBeanDefinition(SimpleBeanFactoryAwareAspectInstanceFactory.class)__			aspectFactoryDef.getPropertyValues().add("aspectBeanName", aspectName)__			aspectFactoryDef.setSynthetic(true)___			_			AbstractBeanDefinition adviceDef = createAdviceDefinition(_					adviceElement, parserContext, aspectName, order, methodDefinition, aspectFactoryDef,_					beanDefinitions, beanReferences)___			_			RootBeanDefinition advisorDefinition = new RootBeanDefinition(AspectJPointcutAdvisor.class)__			advisorDefinition.setSource(parserContext.extractSource(adviceElement))__			advisorDefinition.getConstructorArgumentValues().addGenericArgumentValue(adviceDef)__			if (aspectElement.hasAttribute(ORDER_PROPERTY)) {_				advisorDefinition.getPropertyValues().add(_						ORDER_PROPERTY, aspectElement.getAttribute(ORDER_PROPERTY))__			}__			_			parserContext.getReaderContext().registerWithGeneratedName(advisorDefinition)___			return advisorDefinition__		}_		finally {_			this.parseState.pop()__		}_	};parses,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around,and,registers,the,resulting,bean,definition,with,the,supplied,bean,definition,registry,return,the,generated,advice,root,bean,definition;private,abstract,bean,definition,parse,advice,string,aspect,name,int,order,element,aspect,element,element,advice,element,parser,context,parser,context,list,bean,definition,bean,definitions,list,bean,reference,bean,references,try,this,parse,state,push,new,advice,entry,parser,context,get,delegate,get,local,name,advice,element,root,bean,definition,method,definition,new,root,bean,definition,method,locating,factory,bean,class,method,definition,get,property,values,add,target,bean,name,aspect,name,method,definition,get,property,values,add,method,name,advice,element,get,attribute,method,method,definition,set,synthetic,true,root,bean,definition,aspect,factory,def,new,root,bean,definition,simple,bean,factory,aware,aspect,instance,factory,class,aspect,factory,def,get,property,values,add,aspect,bean,name,aspect,name,aspect,factory,def,set,synthetic,true,abstract,bean,definition,advice,def,create,advice,definition,advice,element,parser,context,aspect,name,order,method,definition,aspect,factory,def,bean,definitions,bean,references,root,bean,definition,advisor,definition,new,root,bean,definition,aspect,jpointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advice,element,advisor,definition,get,constructor,argument,values,add,generic,argument,value,advice,def,if,aspect,element,has,attribute,advisor,definition,get,property,values,add,aspect,element,get,attribute,parser,context,get,reader,context,register,with,generated,name,advisor,definition,return,advisor,definition,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseAdvice( 			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1385412762;Parses one of '{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}' and registers the resulting_BeanDefinition with the supplied BeanDefinitionRegistry._@return the generated advice RootBeanDefinition;private AbstractBeanDefinition parseAdvice(_			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		try {_			this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)))___			_			RootBeanDefinition methodDefinition = new RootBeanDefinition(MethodLocatingFactoryBean.class)__			methodDefinition.getPropertyValues().add("targetBeanName", aspectName)__			methodDefinition.getPropertyValues().add("methodName", adviceElement.getAttribute("method"))__			methodDefinition.setSynthetic(true)___			_			RootBeanDefinition aspectFactoryDef =_					new RootBeanDefinition(SimpleBeanFactoryAwareAspectInstanceFactory.class)__			aspectFactoryDef.getPropertyValues().add("aspectBeanName", aspectName)__			aspectFactoryDef.setSynthetic(true)___			_			AbstractBeanDefinition adviceDef = createAdviceDefinition(_					adviceElement, parserContext, aspectName, order, methodDefinition, aspectFactoryDef,_					beanDefinitions, beanReferences)___			_			RootBeanDefinition advisorDefinition = new RootBeanDefinition(AspectJPointcutAdvisor.class)__			advisorDefinition.setSource(parserContext.extractSource(adviceElement))__			advisorDefinition.getConstructorArgumentValues().addGenericArgumentValue(adviceDef)__			if (aspectElement.hasAttribute(ORDER_PROPERTY)) {_				advisorDefinition.getPropertyValues().add(_						ORDER_PROPERTY, aspectElement.getAttribute(ORDER_PROPERTY))__			}__			_			parserContext.getReaderContext().registerWithGeneratedName(advisorDefinition)___			return advisorDefinition__		}_		finally {_			this.parseState.pop()__		}_	};parses,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around,and,registers,the,resulting,bean,definition,with,the,supplied,bean,definition,registry,return,the,generated,advice,root,bean,definition;private,abstract,bean,definition,parse,advice,string,aspect,name,int,order,element,aspect,element,element,advice,element,parser,context,parser,context,list,bean,definition,bean,definitions,list,bean,reference,bean,references,try,this,parse,state,push,new,advice,entry,parser,context,get,delegate,get,local,name,advice,element,root,bean,definition,method,definition,new,root,bean,definition,method,locating,factory,bean,class,method,definition,get,property,values,add,target,bean,name,aspect,name,method,definition,get,property,values,add,method,name,advice,element,get,attribute,method,method,definition,set,synthetic,true,root,bean,definition,aspect,factory,def,new,root,bean,definition,simple,bean,factory,aware,aspect,instance,factory,class,aspect,factory,def,get,property,values,add,aspect,bean,name,aspect,name,aspect,factory,def,set,synthetic,true,abstract,bean,definition,advice,def,create,advice,definition,advice,element,parser,context,aspect,name,order,method,definition,aspect,factory,def,bean,definitions,bean,references,root,bean,definition,advisor,definition,new,root,bean,definition,aspect,jpointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advice,element,advisor,definition,get,constructor,argument,values,add,generic,argument,value,advice,def,if,aspect,element,has,attribute,advisor,definition,get,property,values,add,aspect,element,get,attribute,parser,context,get,reader,context,register,with,generated,name,advisor,definition,return,advisor,definition,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseAdvice( 			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1447323728;Parses one of '{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}' and registers the resulting_BeanDefinition with the supplied BeanDefinitionRegistry._@return the generated advice RootBeanDefinition;private AbstractBeanDefinition parseAdvice(_			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		try {_			this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)))___			_			RootBeanDefinition methodDefinition = new RootBeanDefinition(MethodLocatingFactoryBean.class)__			methodDefinition.getPropertyValues().add("targetBeanName", aspectName)__			methodDefinition.getPropertyValues().add("methodName", adviceElement.getAttribute("method"))__			methodDefinition.setSynthetic(true)___			_			RootBeanDefinition aspectFactoryDef =_					new RootBeanDefinition(SimpleBeanFactoryAwareAspectInstanceFactory.class)__			aspectFactoryDef.getPropertyValues().add("aspectBeanName", aspectName)__			aspectFactoryDef.setSynthetic(true)___			_			AbstractBeanDefinition adviceDef = createAdviceDefinition(_					adviceElement, parserContext, aspectName, order, methodDefinition, aspectFactoryDef,_					beanDefinitions, beanReferences)___			_			RootBeanDefinition advisorDefinition = new RootBeanDefinition(AspectJPointcutAdvisor.class)__			advisorDefinition.setSource(parserContext.extractSource(adviceElement))__			advisorDefinition.getConstructorArgumentValues().addGenericArgumentValue(adviceDef)__			if (aspectElement.hasAttribute(ORDER_PROPERTY)) {_				advisorDefinition.getPropertyValues().add(_						ORDER_PROPERTY, aspectElement.getAttribute(ORDER_PROPERTY))__			}__			_			parserContext.getReaderContext().registerWithGeneratedName(advisorDefinition)___			return advisorDefinition__		}_		finally {_			this.parseState.pop()__		}_	};parses,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around,and,registers,the,resulting,bean,definition,with,the,supplied,bean,definition,registry,return,the,generated,advice,root,bean,definition;private,abstract,bean,definition,parse,advice,string,aspect,name,int,order,element,aspect,element,element,advice,element,parser,context,parser,context,list,bean,definition,bean,definitions,list,bean,reference,bean,references,try,this,parse,state,push,new,advice,entry,parser,context,get,delegate,get,local,name,advice,element,root,bean,definition,method,definition,new,root,bean,definition,method,locating,factory,bean,class,method,definition,get,property,values,add,target,bean,name,aspect,name,method,definition,get,property,values,add,method,name,advice,element,get,attribute,method,method,definition,set,synthetic,true,root,bean,definition,aspect,factory,def,new,root,bean,definition,simple,bean,factory,aware,aspect,instance,factory,class,aspect,factory,def,get,property,values,add,aspect,bean,name,aspect,name,aspect,factory,def,set,synthetic,true,abstract,bean,definition,advice,def,create,advice,definition,advice,element,parser,context,aspect,name,order,method,definition,aspect,factory,def,bean,definitions,bean,references,root,bean,definition,advisor,definition,new,root,bean,definition,aspect,jpointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advice,element,advisor,definition,get,constructor,argument,values,add,generic,argument,value,advice,def,if,aspect,element,has,attribute,advisor,definition,get,property,values,add,aspect,element,get,attribute,parser,context,get,reader,context,register,with,generated,name,advisor,definition,return,advisor,definition,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseAdvice( 			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1467730834;Parses one of '{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}' and registers the resulting_BeanDefinition with the supplied BeanDefinitionRegistry._@return the generated advice RootBeanDefinition;private AbstractBeanDefinition parseAdvice(_			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		try {_			this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)))___			_			RootBeanDefinition methodDefinition = new RootBeanDefinition(MethodLocatingFactoryBean.class)__			methodDefinition.getPropertyValues().add("targetBeanName", aspectName)__			methodDefinition.getPropertyValues().add("methodName", adviceElement.getAttribute("method"))__			methodDefinition.setSynthetic(true)___			_			RootBeanDefinition aspectFactoryDef =_					new RootBeanDefinition(SimpleBeanFactoryAwareAspectInstanceFactory.class)__			aspectFactoryDef.getPropertyValues().add("aspectBeanName", aspectName)__			aspectFactoryDef.setSynthetic(true)___			_			AbstractBeanDefinition adviceDef = createAdviceDefinition(_					adviceElement, parserContext, aspectName, order, methodDefinition, aspectFactoryDef,_					beanDefinitions, beanReferences)___			_			RootBeanDefinition advisorDefinition = new RootBeanDefinition(AspectJPointcutAdvisor.class)__			advisorDefinition.setSource(parserContext.extractSource(adviceElement))__			advisorDefinition.getConstructorArgumentValues().addGenericArgumentValue(adviceDef)__			if (aspectElement.hasAttribute(ORDER_PROPERTY)) {_				advisorDefinition.getPropertyValues().add(_						ORDER_PROPERTY, aspectElement.getAttribute(ORDER_PROPERTY))__			}__			_			parserContext.getReaderContext().registerWithGeneratedName(advisorDefinition)___			return advisorDefinition__		}_		finally {_			this.parseState.pop()__		}_	};parses,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around,and,registers,the,resulting,bean,definition,with,the,supplied,bean,definition,registry,return,the,generated,advice,root,bean,definition;private,abstract,bean,definition,parse,advice,string,aspect,name,int,order,element,aspect,element,element,advice,element,parser,context,parser,context,list,bean,definition,bean,definitions,list,bean,reference,bean,references,try,this,parse,state,push,new,advice,entry,parser,context,get,delegate,get,local,name,advice,element,root,bean,definition,method,definition,new,root,bean,definition,method,locating,factory,bean,class,method,definition,get,property,values,add,target,bean,name,aspect,name,method,definition,get,property,values,add,method,name,advice,element,get,attribute,method,method,definition,set,synthetic,true,root,bean,definition,aspect,factory,def,new,root,bean,definition,simple,bean,factory,aware,aspect,instance,factory,class,aspect,factory,def,get,property,values,add,aspect,bean,name,aspect,name,aspect,factory,def,set,synthetic,true,abstract,bean,definition,advice,def,create,advice,definition,advice,element,parser,context,aspect,name,order,method,definition,aspect,factory,def,bean,definitions,bean,references,root,bean,definition,advisor,definition,new,root,bean,definition,aspect,jpointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advice,element,advisor,definition,get,constructor,argument,values,add,generic,argument,value,advice,def,if,aspect,element,has,attribute,advisor,definition,get,property,values,add,aspect,element,get,attribute,parser,context,get,reader,context,register,with,generated,name,advisor,definition,return,advisor,definition,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseAdvice( 			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1495868221;Parses one of '{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}' and registers the resulting_BeanDefinition with the supplied BeanDefinitionRegistry._@return the generated advice RootBeanDefinition;private AbstractBeanDefinition parseAdvice(_			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		try {_			this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)))___			_			RootBeanDefinition methodDefinition = new RootBeanDefinition(MethodLocatingFactoryBean.class)__			methodDefinition.getPropertyValues().add("targetBeanName", aspectName)__			methodDefinition.getPropertyValues().add("methodName", adviceElement.getAttribute("method"))__			methodDefinition.setSynthetic(true)___			_			RootBeanDefinition aspectFactoryDef =_					new RootBeanDefinition(SimpleBeanFactoryAwareAspectInstanceFactory.class)__			aspectFactoryDef.getPropertyValues().add("aspectBeanName", aspectName)__			aspectFactoryDef.setSynthetic(true)___			_			AbstractBeanDefinition adviceDef = createAdviceDefinition(_					adviceElement, parserContext, aspectName, order, methodDefinition, aspectFactoryDef,_					beanDefinitions, beanReferences)___			_			RootBeanDefinition advisorDefinition = new RootBeanDefinition(AspectJPointcutAdvisor.class)__			advisorDefinition.setSource(parserContext.extractSource(adviceElement))__			advisorDefinition.getConstructorArgumentValues().addGenericArgumentValue(adviceDef)__			if (aspectElement.hasAttribute(ORDER_PROPERTY)) {_				advisorDefinition.getPropertyValues().add(_						ORDER_PROPERTY, aspectElement.getAttribute(ORDER_PROPERTY))__			}__			_			parserContext.getReaderContext().registerWithGeneratedName(advisorDefinition)___			return advisorDefinition__		}_		finally {_			this.parseState.pop()__		}_	};parses,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around,and,registers,the,resulting,bean,definition,with,the,supplied,bean,definition,registry,return,the,generated,advice,root,bean,definition;private,abstract,bean,definition,parse,advice,string,aspect,name,int,order,element,aspect,element,element,advice,element,parser,context,parser,context,list,bean,definition,bean,definitions,list,bean,reference,bean,references,try,this,parse,state,push,new,advice,entry,parser,context,get,delegate,get,local,name,advice,element,root,bean,definition,method,definition,new,root,bean,definition,method,locating,factory,bean,class,method,definition,get,property,values,add,target,bean,name,aspect,name,method,definition,get,property,values,add,method,name,advice,element,get,attribute,method,method,definition,set,synthetic,true,root,bean,definition,aspect,factory,def,new,root,bean,definition,simple,bean,factory,aware,aspect,instance,factory,class,aspect,factory,def,get,property,values,add,aspect,bean,name,aspect,name,aspect,factory,def,set,synthetic,true,abstract,bean,definition,advice,def,create,advice,definition,advice,element,parser,context,aspect,name,order,method,definition,aspect,factory,def,bean,definitions,bean,references,root,bean,definition,advisor,definition,new,root,bean,definition,aspect,jpointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advice,element,advisor,definition,get,constructor,argument,values,add,generic,argument,value,advice,def,if,aspect,element,has,attribute,advisor,definition,get,property,values,add,aspect,element,get,attribute,parser,context,get,reader,context,register,with,generated,name,advisor,definition,return,advisor,definition,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseAdvice( 			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1502974979;Parses one of '{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}' and registers the resulting_BeanDefinition with the supplied BeanDefinitionRegistry._@return the generated advice RootBeanDefinition;private AbstractBeanDefinition parseAdvice(_			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		try {_			this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)))___			_			RootBeanDefinition methodDefinition = new RootBeanDefinition(MethodLocatingFactoryBean.class)__			methodDefinition.getPropertyValues().add("targetBeanName", aspectName)__			methodDefinition.getPropertyValues().add("methodName", adviceElement.getAttribute("method"))__			methodDefinition.setSynthetic(true)___			_			RootBeanDefinition aspectFactoryDef =_					new RootBeanDefinition(SimpleBeanFactoryAwareAspectInstanceFactory.class)__			aspectFactoryDef.getPropertyValues().add("aspectBeanName", aspectName)__			aspectFactoryDef.setSynthetic(true)___			_			AbstractBeanDefinition adviceDef = createAdviceDefinition(_					adviceElement, parserContext, aspectName, order, methodDefinition, aspectFactoryDef,_					beanDefinitions, beanReferences)___			_			RootBeanDefinition advisorDefinition = new RootBeanDefinition(AspectJPointcutAdvisor.class)__			advisorDefinition.setSource(parserContext.extractSource(adviceElement))__			advisorDefinition.getConstructorArgumentValues().addGenericArgumentValue(adviceDef)__			if (aspectElement.hasAttribute(ORDER_PROPERTY)) {_				advisorDefinition.getPropertyValues().add(_						ORDER_PROPERTY, aspectElement.getAttribute(ORDER_PROPERTY))__			}__			_			parserContext.getReaderContext().registerWithGeneratedName(advisorDefinition)___			return advisorDefinition__		}_		finally {_			this.parseState.pop()__		}_	};parses,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around,and,registers,the,resulting,bean,definition,with,the,supplied,bean,definition,registry,return,the,generated,advice,root,bean,definition;private,abstract,bean,definition,parse,advice,string,aspect,name,int,order,element,aspect,element,element,advice,element,parser,context,parser,context,list,bean,definition,bean,definitions,list,bean,reference,bean,references,try,this,parse,state,push,new,advice,entry,parser,context,get,delegate,get,local,name,advice,element,root,bean,definition,method,definition,new,root,bean,definition,method,locating,factory,bean,class,method,definition,get,property,values,add,target,bean,name,aspect,name,method,definition,get,property,values,add,method,name,advice,element,get,attribute,method,method,definition,set,synthetic,true,root,bean,definition,aspect,factory,def,new,root,bean,definition,simple,bean,factory,aware,aspect,instance,factory,class,aspect,factory,def,get,property,values,add,aspect,bean,name,aspect,name,aspect,factory,def,set,synthetic,true,abstract,bean,definition,advice,def,create,advice,definition,advice,element,parser,context,aspect,name,order,method,definition,aspect,factory,def,bean,definitions,bean,references,root,bean,definition,advisor,definition,new,root,bean,definition,aspect,jpointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advice,element,advisor,definition,get,constructor,argument,values,add,generic,argument,value,advice,def,if,aspect,element,has,attribute,advisor,definition,get,property,values,add,aspect,element,get,attribute,parser,context,get,reader,context,register,with,generated,name,advisor,definition,return,advisor,definition,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseAdvice( 			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1519295386;Parses one of '{@code before}', '{@code after}', '{@code after-returning}',_'{@code after-throwing}' or '{@code around}' and registers the resulting_BeanDefinition with the supplied BeanDefinitionRegistry._@return the generated advice RootBeanDefinition;private AbstractBeanDefinition parseAdvice(_			String aspectName, int order, Element aspectElement, Element adviceElement, ParserContext parserContext,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		try {_			this.parseState.push(new AdviceEntry(parserContext.getDelegate().getLocalName(adviceElement)))___			_			RootBeanDefinition methodDefinition = new RootBeanDefinition(MethodLocatingFactoryBean.class)__			methodDefinition.getPropertyValues().add("targetBeanName", aspectName)__			methodDefinition.getPropertyValues().add("methodName", adviceElement.getAttribute("method"))__			methodDefinition.setSynthetic(true)___			_			RootBeanDefinition aspectFactoryDef =_					new RootBeanDefinition(SimpleBeanFactoryAwareAspectInstanceFactory.class)__			aspectFactoryDef.getPropertyValues().add("aspectBeanName", aspectName)__			aspectFactoryDef.setSynthetic(true)___			_			AbstractBeanDefinition adviceDef = createAdviceDefinition(_					adviceElement, parserContext, aspectName, order, methodDefinition, aspectFactoryDef,_					beanDefinitions, beanReferences)___			_			RootBeanDefinition advisorDefinition = new RootBeanDefinition(AspectJPointcutAdvisor.class)__			advisorDefinition.setSource(parserContext.extractSource(adviceElement))__			advisorDefinition.getConstructorArgumentValues().addGenericArgumentValue(adviceDef)__			if (aspectElement.hasAttribute(ORDER_PROPERTY)) {_				advisorDefinition.getPropertyValues().add(_						ORDER_PROPERTY, aspectElement.getAttribute(ORDER_PROPERTY))__			}__			_			parserContext.getReaderContext().registerWithGeneratedName(advisorDefinition)___			return advisorDefinition__		}_		finally {_			this.parseState.pop()__		}_	};parses,one,of,code,before,code,after,code,after,returning,code,after,throwing,or,code,around,and,registers,the,resulting,bean,definition,with,the,supplied,bean,definition,registry,return,the,generated,advice,root,bean,definition;private,abstract,bean,definition,parse,advice,string,aspect,name,int,order,element,aspect,element,element,advice,element,parser,context,parser,context,list,bean,definition,bean,definitions,list,bean,reference,bean,references,try,this,parse,state,push,new,advice,entry,parser,context,get,delegate,get,local,name,advice,element,root,bean,definition,method,definition,new,root,bean,definition,method,locating,factory,bean,class,method,definition,get,property,values,add,target,bean,name,aspect,name,method,definition,get,property,values,add,method,name,advice,element,get,attribute,method,method,definition,set,synthetic,true,root,bean,definition,aspect,factory,def,new,root,bean,definition,simple,bean,factory,aware,aspect,instance,factory,class,aspect,factory,def,get,property,values,add,aspect,bean,name,aspect,name,aspect,factory,def,set,synthetic,true,abstract,bean,definition,advice,def,create,advice,definition,advice,element,parser,context,aspect,name,order,method,definition,aspect,factory,def,bean,definitions,bean,references,root,bean,definition,advisor,definition,new,root,bean,definition,aspect,jpointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advice,element,advisor,definition,get,constructor,argument,values,add,generic,argument,value,advice,def,if,aspect,element,has,attribute,advisor,definition,get,property,values,add,aspect,element,get,attribute,parser,context,get,reader,context,register,with,generated,name,advisor,definition,return,advisor,definition,finally,this,parse,state,pop
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext);1328020251;Create a {@link RootBeanDefinition} for the advisor described in the supplied. Does <strong>not</strong>_parse any associated '<code>pointcut</code>' or '<code>pointcut-ref</code>' attributes.;private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext) {_		RootBeanDefinition advisorDefinition = new RootBeanDefinition(DefaultBeanFactoryPointcutAdvisor.class)__		advisorDefinition.setSource(parserContext.extractSource(advisorElement))___		String adviceRef = advisorElement.getAttribute(ADVICE_REF)__		if (!StringUtils.hasText(adviceRef)) {_			parserContext.getReaderContext().error(_					"'advice-ref' attribute contains empty value.", advisorElement, this.parseState.snapshot())__		}_		else {_			advisorDefinition.getPropertyValues().add(_					ADVICE_BEAN_NAME, new RuntimeBeanNameReference(adviceRef))__		}__		if (advisorElement.hasAttribute(ORDER_PROPERTY)) {_			advisorDefinition.getPropertyValues().add(_					ORDER_PROPERTY, advisorElement.getAttribute(ORDER_PROPERTY))__		}__		return advisorDefinition__	};create,a,link,root,bean,definition,for,the,advisor,described,in,the,supplied,does,strong,not,strong,parse,any,associated,code,pointcut,code,or,code,pointcut,ref,code,attributes;private,abstract,bean,definition,create,advisor,bean,definition,element,advisor,element,parser,context,parser,context,root,bean,definition,advisor,definition,new,root,bean,definition,default,bean,factory,pointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advisor,element,string,advice,ref,advisor,element,get,attribute,if,string,utils,has,text,advice,ref,parser,context,get,reader,context,error,advice,ref,attribute,contains,empty,value,advisor,element,this,parse,state,snapshot,else,advisor,definition,get,property,values,add,new,runtime,bean,name,reference,advice,ref,if,advisor,element,has,attribute,advisor,definition,get,property,values,add,advisor,element,get,attribute,return,advisor,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext);1356735495;Create a {@link RootBeanDefinition} for the advisor described in the supplied. Does <strong>not</strong>_parse any associated '{@code pointcut}' or '{@code pointcut-ref}' attributes.;private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext) {_		RootBeanDefinition advisorDefinition = new RootBeanDefinition(DefaultBeanFactoryPointcutAdvisor.class)__		advisorDefinition.setSource(parserContext.extractSource(advisorElement))___		String adviceRef = advisorElement.getAttribute(ADVICE_REF)__		if (!StringUtils.hasText(adviceRef)) {_			parserContext.getReaderContext().error(_					"'advice-ref' attribute contains empty value.", advisorElement, this.parseState.snapshot())__		}_		else {_			advisorDefinition.getPropertyValues().add(_					ADVICE_BEAN_NAME, new RuntimeBeanNameReference(adviceRef))__		}__		if (advisorElement.hasAttribute(ORDER_PROPERTY)) {_			advisorDefinition.getPropertyValues().add(_					ORDER_PROPERTY, advisorElement.getAttribute(ORDER_PROPERTY))__		}__		return advisorDefinition__	};create,a,link,root,bean,definition,for,the,advisor,described,in,the,supplied,does,strong,not,strong,parse,any,associated,code,pointcut,or,code,pointcut,ref,attributes;private,abstract,bean,definition,create,advisor,bean,definition,element,advisor,element,parser,context,parser,context,root,bean,definition,advisor,definition,new,root,bean,definition,default,bean,factory,pointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advisor,element,string,advice,ref,advisor,element,get,attribute,if,string,utils,has,text,advice,ref,parser,context,get,reader,context,error,advice,ref,attribute,contains,empty,value,advisor,element,this,parse,state,snapshot,else,advisor,definition,get,property,values,add,new,runtime,bean,name,reference,advice,ref,if,advisor,element,has,attribute,advisor,definition,get,property,values,add,advisor,element,get,attribute,return,advisor,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext);1357119239;Create a {@link RootBeanDefinition} for the advisor described in the supplied. Does <strong>not</strong>_parse any associated '{@code pointcut}' or '{@code pointcut-ref}' attributes.;private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext) {_		RootBeanDefinition advisorDefinition = new RootBeanDefinition(DefaultBeanFactoryPointcutAdvisor.class)__		advisorDefinition.setSource(parserContext.extractSource(advisorElement))___		String adviceRef = advisorElement.getAttribute(ADVICE_REF)__		if (!StringUtils.hasText(adviceRef)) {_			parserContext.getReaderContext().error(_					"'advice-ref' attribute contains empty value.", advisorElement, this.parseState.snapshot())__		}_		else {_			advisorDefinition.getPropertyValues().add(_					ADVICE_BEAN_NAME, new RuntimeBeanNameReference(adviceRef))__		}__		if (advisorElement.hasAttribute(ORDER_PROPERTY)) {_			advisorDefinition.getPropertyValues().add(_					ORDER_PROPERTY, advisorElement.getAttribute(ORDER_PROPERTY))__		}__		return advisorDefinition__	};create,a,link,root,bean,definition,for,the,advisor,described,in,the,supplied,does,strong,not,strong,parse,any,associated,code,pointcut,or,code,pointcut,ref,attributes;private,abstract,bean,definition,create,advisor,bean,definition,element,advisor,element,parser,context,parser,context,root,bean,definition,advisor,definition,new,root,bean,definition,default,bean,factory,pointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advisor,element,string,advice,ref,advisor,element,get,attribute,if,string,utils,has,text,advice,ref,parser,context,get,reader,context,error,advice,ref,attribute,contains,empty,value,advisor,element,this,parse,state,snapshot,else,advisor,definition,get,property,values,add,new,runtime,bean,name,reference,advice,ref,if,advisor,element,has,attribute,advisor,definition,get,property,values,add,advisor,element,get,attribute,return,advisor,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext);1368482696;Create a {@link RootBeanDefinition} for the advisor described in the supplied. Does <strong>not</strong>_parse any associated '{@code pointcut}' or '{@code pointcut-ref}' attributes.;private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext) {_		RootBeanDefinition advisorDefinition = new RootBeanDefinition(DefaultBeanFactoryPointcutAdvisor.class)__		advisorDefinition.setSource(parserContext.extractSource(advisorElement))___		String adviceRef = advisorElement.getAttribute(ADVICE_REF)__		if (!StringUtils.hasText(adviceRef)) {_			parserContext.getReaderContext().error(_					"'advice-ref' attribute contains empty value.", advisorElement, this.parseState.snapshot())__		}_		else {_			advisorDefinition.getPropertyValues().add(_					ADVICE_BEAN_NAME, new RuntimeBeanNameReference(adviceRef))__		}__		if (advisorElement.hasAttribute(ORDER_PROPERTY)) {_			advisorDefinition.getPropertyValues().add(_					ORDER_PROPERTY, advisorElement.getAttribute(ORDER_PROPERTY))__		}__		return advisorDefinition__	};create,a,link,root,bean,definition,for,the,advisor,described,in,the,supplied,does,strong,not,strong,parse,any,associated,code,pointcut,or,code,pointcut,ref,attributes;private,abstract,bean,definition,create,advisor,bean,definition,element,advisor,element,parser,context,parser,context,root,bean,definition,advisor,definition,new,root,bean,definition,default,bean,factory,pointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advisor,element,string,advice,ref,advisor,element,get,attribute,if,string,utils,has,text,advice,ref,parser,context,get,reader,context,error,advice,ref,attribute,contains,empty,value,advisor,element,this,parse,state,snapshot,else,advisor,definition,get,property,values,add,new,runtime,bean,name,reference,advice,ref,if,advisor,element,has,attribute,advisor,definition,get,property,values,add,advisor,element,get,attribute,return,advisor,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext);1385412762;Create a {@link RootBeanDefinition} for the advisor described in the supplied. Does <strong>not</strong>_parse any associated '{@code pointcut}' or '{@code pointcut-ref}' attributes.;private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext) {_		RootBeanDefinition advisorDefinition = new RootBeanDefinition(DefaultBeanFactoryPointcutAdvisor.class)__		advisorDefinition.setSource(parserContext.extractSource(advisorElement))___		String adviceRef = advisorElement.getAttribute(ADVICE_REF)__		if (!StringUtils.hasText(adviceRef)) {_			parserContext.getReaderContext().error(_					"'advice-ref' attribute contains empty value.", advisorElement, this.parseState.snapshot())__		}_		else {_			advisorDefinition.getPropertyValues().add(_					ADVICE_BEAN_NAME, new RuntimeBeanNameReference(adviceRef))__		}__		if (advisorElement.hasAttribute(ORDER_PROPERTY)) {_			advisorDefinition.getPropertyValues().add(_					ORDER_PROPERTY, advisorElement.getAttribute(ORDER_PROPERTY))__		}__		return advisorDefinition__	};create,a,link,root,bean,definition,for,the,advisor,described,in,the,supplied,does,strong,not,strong,parse,any,associated,code,pointcut,or,code,pointcut,ref,attributes;private,abstract,bean,definition,create,advisor,bean,definition,element,advisor,element,parser,context,parser,context,root,bean,definition,advisor,definition,new,root,bean,definition,default,bean,factory,pointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advisor,element,string,advice,ref,advisor,element,get,attribute,if,string,utils,has,text,advice,ref,parser,context,get,reader,context,error,advice,ref,attribute,contains,empty,value,advisor,element,this,parse,state,snapshot,else,advisor,definition,get,property,values,add,new,runtime,bean,name,reference,advice,ref,if,advisor,element,has,attribute,advisor,definition,get,property,values,add,advisor,element,get,attribute,return,advisor,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext);1447323728;Create a {@link RootBeanDefinition} for the advisor described in the supplied. Does <strong>not</strong>_parse any associated '{@code pointcut}' or '{@code pointcut-ref}' attributes.;private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext) {_		RootBeanDefinition advisorDefinition = new RootBeanDefinition(DefaultBeanFactoryPointcutAdvisor.class)__		advisorDefinition.setSource(parserContext.extractSource(advisorElement))___		String adviceRef = advisorElement.getAttribute(ADVICE_REF)__		if (!StringUtils.hasText(adviceRef)) {_			parserContext.getReaderContext().error(_					"'advice-ref' attribute contains empty value.", advisorElement, this.parseState.snapshot())__		}_		else {_			advisorDefinition.getPropertyValues().add(_					ADVICE_BEAN_NAME, new RuntimeBeanNameReference(adviceRef))__		}__		if (advisorElement.hasAttribute(ORDER_PROPERTY)) {_			advisorDefinition.getPropertyValues().add(_					ORDER_PROPERTY, advisorElement.getAttribute(ORDER_PROPERTY))__		}__		return advisorDefinition__	};create,a,link,root,bean,definition,for,the,advisor,described,in,the,supplied,does,strong,not,strong,parse,any,associated,code,pointcut,or,code,pointcut,ref,attributes;private,abstract,bean,definition,create,advisor,bean,definition,element,advisor,element,parser,context,parser,context,root,bean,definition,advisor,definition,new,root,bean,definition,default,bean,factory,pointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advisor,element,string,advice,ref,advisor,element,get,attribute,if,string,utils,has,text,advice,ref,parser,context,get,reader,context,error,advice,ref,attribute,contains,empty,value,advisor,element,this,parse,state,snapshot,else,advisor,definition,get,property,values,add,new,runtime,bean,name,reference,advice,ref,if,advisor,element,has,attribute,advisor,definition,get,property,values,add,advisor,element,get,attribute,return,advisor,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext);1467730834;Create a {@link RootBeanDefinition} for the advisor described in the supplied. Does <strong>not</strong>_parse any associated '{@code pointcut}' or '{@code pointcut-ref}' attributes.;private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext) {_		RootBeanDefinition advisorDefinition = new RootBeanDefinition(DefaultBeanFactoryPointcutAdvisor.class)__		advisorDefinition.setSource(parserContext.extractSource(advisorElement))___		String adviceRef = advisorElement.getAttribute(ADVICE_REF)__		if (!StringUtils.hasText(adviceRef)) {_			parserContext.getReaderContext().error(_					"'advice-ref' attribute contains empty value.", advisorElement, this.parseState.snapshot())__		}_		else {_			advisorDefinition.getPropertyValues().add(_					ADVICE_BEAN_NAME, new RuntimeBeanNameReference(adviceRef))__		}__		if (advisorElement.hasAttribute(ORDER_PROPERTY)) {_			advisorDefinition.getPropertyValues().add(_					ORDER_PROPERTY, advisorElement.getAttribute(ORDER_PROPERTY))__		}__		return advisorDefinition__	};create,a,link,root,bean,definition,for,the,advisor,described,in,the,supplied,does,strong,not,strong,parse,any,associated,code,pointcut,or,code,pointcut,ref,attributes;private,abstract,bean,definition,create,advisor,bean,definition,element,advisor,element,parser,context,parser,context,root,bean,definition,advisor,definition,new,root,bean,definition,default,bean,factory,pointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advisor,element,string,advice,ref,advisor,element,get,attribute,if,string,utils,has,text,advice,ref,parser,context,get,reader,context,error,advice,ref,attribute,contains,empty,value,advisor,element,this,parse,state,snapshot,else,advisor,definition,get,property,values,add,new,runtime,bean,name,reference,advice,ref,if,advisor,element,has,attribute,advisor,definition,get,property,values,add,advisor,element,get,attribute,return,advisor,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext);1495868221;Create a {@link RootBeanDefinition} for the advisor described in the supplied. Does <strong>not</strong>_parse any associated '{@code pointcut}' or '{@code pointcut-ref}' attributes.;private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext) {_		RootBeanDefinition advisorDefinition = new RootBeanDefinition(DefaultBeanFactoryPointcutAdvisor.class)__		advisorDefinition.setSource(parserContext.extractSource(advisorElement))___		String adviceRef = advisorElement.getAttribute(ADVICE_REF)__		if (!StringUtils.hasText(adviceRef)) {_			parserContext.getReaderContext().error(_					"'advice-ref' attribute contains empty value.", advisorElement, this.parseState.snapshot())__		}_		else {_			advisorDefinition.getPropertyValues().add(_					ADVICE_BEAN_NAME, new RuntimeBeanNameReference(adviceRef))__		}__		if (advisorElement.hasAttribute(ORDER_PROPERTY)) {_			advisorDefinition.getPropertyValues().add(_					ORDER_PROPERTY, advisorElement.getAttribute(ORDER_PROPERTY))__		}__		return advisorDefinition__	};create,a,link,root,bean,definition,for,the,advisor,described,in,the,supplied,does,strong,not,strong,parse,any,associated,code,pointcut,or,code,pointcut,ref,attributes;private,abstract,bean,definition,create,advisor,bean,definition,element,advisor,element,parser,context,parser,context,root,bean,definition,advisor,definition,new,root,bean,definition,default,bean,factory,pointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advisor,element,string,advice,ref,advisor,element,get,attribute,if,string,utils,has,text,advice,ref,parser,context,get,reader,context,error,advice,ref,attribute,contains,empty,value,advisor,element,this,parse,state,snapshot,else,advisor,definition,get,property,values,add,new,runtime,bean,name,reference,advice,ref,if,advisor,element,has,attribute,advisor,definition,get,property,values,add,advisor,element,get,attribute,return,advisor,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext);1502974979;Create a {@link RootBeanDefinition} for the advisor described in the supplied. Does <strong>not</strong>_parse any associated '{@code pointcut}' or '{@code pointcut-ref}' attributes.;private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext) {_		RootBeanDefinition advisorDefinition = new RootBeanDefinition(DefaultBeanFactoryPointcutAdvisor.class)__		advisorDefinition.setSource(parserContext.extractSource(advisorElement))___		String adviceRef = advisorElement.getAttribute(ADVICE_REF)__		if (!StringUtils.hasText(adviceRef)) {_			parserContext.getReaderContext().error(_					"'advice-ref' attribute contains empty value.", advisorElement, this.parseState.snapshot())__		}_		else {_			advisorDefinition.getPropertyValues().add(_					ADVICE_BEAN_NAME, new RuntimeBeanNameReference(adviceRef))__		}__		if (advisorElement.hasAttribute(ORDER_PROPERTY)) {_			advisorDefinition.getPropertyValues().add(_					ORDER_PROPERTY, advisorElement.getAttribute(ORDER_PROPERTY))__		}__		return advisorDefinition__	};create,a,link,root,bean,definition,for,the,advisor,described,in,the,supplied,does,strong,not,strong,parse,any,associated,code,pointcut,or,code,pointcut,ref,attributes;private,abstract,bean,definition,create,advisor,bean,definition,element,advisor,element,parser,context,parser,context,root,bean,definition,advisor,definition,new,root,bean,definition,default,bean,factory,pointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advisor,element,string,advice,ref,advisor,element,get,attribute,if,string,utils,has,text,advice,ref,parser,context,get,reader,context,error,advice,ref,attribute,contains,empty,value,advisor,element,this,parse,state,snapshot,else,advisor,definition,get,property,values,add,new,runtime,bean,name,reference,advice,ref,if,advisor,element,has,attribute,advisor,definition,get,property,values,add,advisor,element,get,attribute,return,advisor,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext);1519295386;Create a {@link RootBeanDefinition} for the advisor described in the supplied. Does <strong>not</strong>_parse any associated '{@code pointcut}' or '{@code pointcut-ref}' attributes.;private AbstractBeanDefinition createAdvisorBeanDefinition(Element advisorElement, ParserContext parserContext) {_		RootBeanDefinition advisorDefinition = new RootBeanDefinition(DefaultBeanFactoryPointcutAdvisor.class)__		advisorDefinition.setSource(parserContext.extractSource(advisorElement))___		String adviceRef = advisorElement.getAttribute(ADVICE_REF)__		if (!StringUtils.hasText(adviceRef)) {_			parserContext.getReaderContext().error(_					"'advice-ref' attribute contains empty value.", advisorElement, this.parseState.snapshot())__		}_		else {_			advisorDefinition.getPropertyValues().add(_					ADVICE_BEAN_NAME, new RuntimeBeanNameReference(adviceRef))__		}__		if (advisorElement.hasAttribute(ORDER_PROPERTY)) {_			advisorDefinition.getPropertyValues().add(_					ORDER_PROPERTY, advisorElement.getAttribute(ORDER_PROPERTY))__		}__		return advisorDefinition__	};create,a,link,root,bean,definition,for,the,advisor,described,in,the,supplied,does,strong,not,strong,parse,any,associated,code,pointcut,or,code,pointcut,ref,attributes;private,abstract,bean,definition,create,advisor,bean,definition,element,advisor,element,parser,context,parser,context,root,bean,definition,advisor,definition,new,root,bean,definition,default,bean,factory,pointcut,advisor,class,advisor,definition,set,source,parser,context,extract,source,advisor,element,string,advice,ref,advisor,element,get,attribute,if,string,utils,has,text,advice,ref,parser,context,get,reader,context,error,advice,ref,attribute,contains,empty,value,advisor,element,this,parse,state,snapshot,else,advisor,definition,get,property,values,add,new,runtime,bean,name,reference,advice,ref,if,advisor,element,has,attribute,advisor,definition,get,property,values,add,advisor,element,get,attribute,return,advisor,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext);1328020251;Parses the supplied <code>&lt_pointcut&gt_</code> and registers the resulting_Pointcut with the BeanDefinitionRegistry.;private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext) {_		String id = pointcutElement.getAttribute(ID)__		String expression = pointcutElement.getAttribute(EXPRESSION)___		AbstractBeanDefinition pointcutDefinition = null__		_		try {_			this.parseState.push(new PointcutEntry(id))__			pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(pointcutElement))___			String pointcutBeanName = id__			if (StringUtils.hasText(pointcutBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(pointcutBeanName, pointcutDefinition)__			}_			else {_				pointcutBeanName = parserContext.getReaderContext().registerWithGeneratedName(pointcutDefinition)__			}__			parserContext.registerComponent(_					new PointcutComponentDefinition(pointcutBeanName, pointcutDefinition, expression))__		}_		finally {_			this.parseState.pop()__		}__		return pointcutDefinition__	};parses,the,supplied,code,lt,pointcut,gt,code,and,registers,the,resulting,pointcut,with,the,bean,definition,registry;private,abstract,bean,definition,parse,pointcut,element,pointcut,element,parser,context,parser,context,string,id,pointcut,element,get,attribute,id,string,expression,pointcut,element,get,attribute,expression,abstract,bean,definition,pointcut,definition,null,try,this,parse,state,push,new,pointcut,entry,id,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,pointcut,element,string,pointcut,bean,name,id,if,string,utils,has,text,pointcut,bean,name,parser,context,get,registry,register,bean,definition,pointcut,bean,name,pointcut,definition,else,pointcut,bean,name,parser,context,get,reader,context,register,with,generated,name,pointcut,definition,parser,context,register,component,new,pointcut,component,definition,pointcut,bean,name,pointcut,definition,expression,finally,this,parse,state,pop,return,pointcut,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext);1356735495;Parses the supplied {@code &lt_pointcut&gt_} and registers the resulting_Pointcut with the BeanDefinitionRegistry.;private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext) {_		String id = pointcutElement.getAttribute(ID)__		String expression = pointcutElement.getAttribute(EXPRESSION)___		AbstractBeanDefinition pointcutDefinition = null___		try {_			this.parseState.push(new PointcutEntry(id))__			pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(pointcutElement))___			String pointcutBeanName = id__			if (StringUtils.hasText(pointcutBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(pointcutBeanName, pointcutDefinition)__			}_			else {_				pointcutBeanName = parserContext.getReaderContext().registerWithGeneratedName(pointcutDefinition)__			}__			parserContext.registerComponent(_					new PointcutComponentDefinition(pointcutBeanName, pointcutDefinition, expression))__		}_		finally {_			this.parseState.pop()__		}__		return pointcutDefinition__	};parses,the,supplied,code,lt,pointcut,gt,and,registers,the,resulting,pointcut,with,the,bean,definition,registry;private,abstract,bean,definition,parse,pointcut,element,pointcut,element,parser,context,parser,context,string,id,pointcut,element,get,attribute,id,string,expression,pointcut,element,get,attribute,expression,abstract,bean,definition,pointcut,definition,null,try,this,parse,state,push,new,pointcut,entry,id,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,pointcut,element,string,pointcut,bean,name,id,if,string,utils,has,text,pointcut,bean,name,parser,context,get,registry,register,bean,definition,pointcut,bean,name,pointcut,definition,else,pointcut,bean,name,parser,context,get,reader,context,register,with,generated,name,pointcut,definition,parser,context,register,component,new,pointcut,component,definition,pointcut,bean,name,pointcut,definition,expression,finally,this,parse,state,pop,return,pointcut,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext);1357119239;Parses the supplied {@code &lt_pointcut&gt_} and registers the resulting_Pointcut with the BeanDefinitionRegistry.;private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext) {_		String id = pointcutElement.getAttribute(ID)__		String expression = pointcutElement.getAttribute(EXPRESSION)___		AbstractBeanDefinition pointcutDefinition = null___		try {_			this.parseState.push(new PointcutEntry(id))__			pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(pointcutElement))___			String pointcutBeanName = id__			if (StringUtils.hasText(pointcutBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(pointcutBeanName, pointcutDefinition)__			}_			else {_				pointcutBeanName = parserContext.getReaderContext().registerWithGeneratedName(pointcutDefinition)__			}__			parserContext.registerComponent(_					new PointcutComponentDefinition(pointcutBeanName, pointcutDefinition, expression))__		}_		finally {_			this.parseState.pop()__		}__		return pointcutDefinition__	};parses,the,supplied,code,lt,pointcut,gt,and,registers,the,resulting,pointcut,with,the,bean,definition,registry;private,abstract,bean,definition,parse,pointcut,element,pointcut,element,parser,context,parser,context,string,id,pointcut,element,get,attribute,id,string,expression,pointcut,element,get,attribute,expression,abstract,bean,definition,pointcut,definition,null,try,this,parse,state,push,new,pointcut,entry,id,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,pointcut,element,string,pointcut,bean,name,id,if,string,utils,has,text,pointcut,bean,name,parser,context,get,registry,register,bean,definition,pointcut,bean,name,pointcut,definition,else,pointcut,bean,name,parser,context,get,reader,context,register,with,generated,name,pointcut,definition,parser,context,register,component,new,pointcut,component,definition,pointcut,bean,name,pointcut,definition,expression,finally,this,parse,state,pop,return,pointcut,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext);1368482696;Parses the supplied {@code &lt_pointcut&gt_} and registers the resulting_Pointcut with the BeanDefinitionRegistry.;private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext) {_		String id = pointcutElement.getAttribute(ID)__		String expression = pointcutElement.getAttribute(EXPRESSION)___		AbstractBeanDefinition pointcutDefinition = null___		try {_			this.parseState.push(new PointcutEntry(id))__			pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(pointcutElement))___			String pointcutBeanName = id__			if (StringUtils.hasText(pointcutBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(pointcutBeanName, pointcutDefinition)__			}_			else {_				pointcutBeanName = parserContext.getReaderContext().registerWithGeneratedName(pointcutDefinition)__			}__			parserContext.registerComponent(_					new PointcutComponentDefinition(pointcutBeanName, pointcutDefinition, expression))__		}_		finally {_			this.parseState.pop()__		}__		return pointcutDefinition__	};parses,the,supplied,code,lt,pointcut,gt,and,registers,the,resulting,pointcut,with,the,bean,definition,registry;private,abstract,bean,definition,parse,pointcut,element,pointcut,element,parser,context,parser,context,string,id,pointcut,element,get,attribute,id,string,expression,pointcut,element,get,attribute,expression,abstract,bean,definition,pointcut,definition,null,try,this,parse,state,push,new,pointcut,entry,id,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,pointcut,element,string,pointcut,bean,name,id,if,string,utils,has,text,pointcut,bean,name,parser,context,get,registry,register,bean,definition,pointcut,bean,name,pointcut,definition,else,pointcut,bean,name,parser,context,get,reader,context,register,with,generated,name,pointcut,definition,parser,context,register,component,new,pointcut,component,definition,pointcut,bean,name,pointcut,definition,expression,finally,this,parse,state,pop,return,pointcut,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext);1385412762;Parses the supplied {@code &lt_pointcut&gt_} and registers the resulting_Pointcut with the BeanDefinitionRegistry.;private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext) {_		String id = pointcutElement.getAttribute(ID)__		String expression = pointcutElement.getAttribute(EXPRESSION)___		AbstractBeanDefinition pointcutDefinition = null___		try {_			this.parseState.push(new PointcutEntry(id))__			pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(pointcutElement))___			String pointcutBeanName = id__			if (StringUtils.hasText(pointcutBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(pointcutBeanName, pointcutDefinition)__			}_			else {_				pointcutBeanName = parserContext.getReaderContext().registerWithGeneratedName(pointcutDefinition)__			}__			parserContext.registerComponent(_					new PointcutComponentDefinition(pointcutBeanName, pointcutDefinition, expression))__		}_		finally {_			this.parseState.pop()__		}__		return pointcutDefinition__	};parses,the,supplied,code,lt,pointcut,gt,and,registers,the,resulting,pointcut,with,the,bean,definition,registry;private,abstract,bean,definition,parse,pointcut,element,pointcut,element,parser,context,parser,context,string,id,pointcut,element,get,attribute,id,string,expression,pointcut,element,get,attribute,expression,abstract,bean,definition,pointcut,definition,null,try,this,parse,state,push,new,pointcut,entry,id,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,pointcut,element,string,pointcut,bean,name,id,if,string,utils,has,text,pointcut,bean,name,parser,context,get,registry,register,bean,definition,pointcut,bean,name,pointcut,definition,else,pointcut,bean,name,parser,context,get,reader,context,register,with,generated,name,pointcut,definition,parser,context,register,component,new,pointcut,component,definition,pointcut,bean,name,pointcut,definition,expression,finally,this,parse,state,pop,return,pointcut,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext);1447323728;Parses the supplied {@code <pointcut>} and registers the resulting_Pointcut with the BeanDefinitionRegistry.;private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext) {_		String id = pointcutElement.getAttribute(ID)__		String expression = pointcutElement.getAttribute(EXPRESSION)___		AbstractBeanDefinition pointcutDefinition = null___		try {_			this.parseState.push(new PointcutEntry(id))__			pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(pointcutElement))___			String pointcutBeanName = id__			if (StringUtils.hasText(pointcutBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(pointcutBeanName, pointcutDefinition)__			}_			else {_				pointcutBeanName = parserContext.getReaderContext().registerWithGeneratedName(pointcutDefinition)__			}__			parserContext.registerComponent(_					new PointcutComponentDefinition(pointcutBeanName, pointcutDefinition, expression))__		}_		finally {_			this.parseState.pop()__		}__		return pointcutDefinition__	};parses,the,supplied,code,pointcut,and,registers,the,resulting,pointcut,with,the,bean,definition,registry;private,abstract,bean,definition,parse,pointcut,element,pointcut,element,parser,context,parser,context,string,id,pointcut,element,get,attribute,id,string,expression,pointcut,element,get,attribute,expression,abstract,bean,definition,pointcut,definition,null,try,this,parse,state,push,new,pointcut,entry,id,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,pointcut,element,string,pointcut,bean,name,id,if,string,utils,has,text,pointcut,bean,name,parser,context,get,registry,register,bean,definition,pointcut,bean,name,pointcut,definition,else,pointcut,bean,name,parser,context,get,reader,context,register,with,generated,name,pointcut,definition,parser,context,register,component,new,pointcut,component,definition,pointcut,bean,name,pointcut,definition,expression,finally,this,parse,state,pop,return,pointcut,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext);1467730834;Parses the supplied {@code <pointcut>} and registers the resulting_Pointcut with the BeanDefinitionRegistry.;private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext) {_		String id = pointcutElement.getAttribute(ID)__		String expression = pointcutElement.getAttribute(EXPRESSION)___		AbstractBeanDefinition pointcutDefinition = null___		try {_			this.parseState.push(new PointcutEntry(id))__			pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(pointcutElement))___			String pointcutBeanName = id__			if (StringUtils.hasText(pointcutBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(pointcutBeanName, pointcutDefinition)__			}_			else {_				pointcutBeanName = parserContext.getReaderContext().registerWithGeneratedName(pointcutDefinition)__			}__			parserContext.registerComponent(_					new PointcutComponentDefinition(pointcutBeanName, pointcutDefinition, expression))__		}_		finally {_			this.parseState.pop()__		}__		return pointcutDefinition__	};parses,the,supplied,code,pointcut,and,registers,the,resulting,pointcut,with,the,bean,definition,registry;private,abstract,bean,definition,parse,pointcut,element,pointcut,element,parser,context,parser,context,string,id,pointcut,element,get,attribute,id,string,expression,pointcut,element,get,attribute,expression,abstract,bean,definition,pointcut,definition,null,try,this,parse,state,push,new,pointcut,entry,id,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,pointcut,element,string,pointcut,bean,name,id,if,string,utils,has,text,pointcut,bean,name,parser,context,get,registry,register,bean,definition,pointcut,bean,name,pointcut,definition,else,pointcut,bean,name,parser,context,get,reader,context,register,with,generated,name,pointcut,definition,parser,context,register,component,new,pointcut,component,definition,pointcut,bean,name,pointcut,definition,expression,finally,this,parse,state,pop,return,pointcut,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext);1495868221;Parses the supplied {@code <pointcut>} and registers the resulting_Pointcut with the BeanDefinitionRegistry.;private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext) {_		String id = pointcutElement.getAttribute(ID)__		String expression = pointcutElement.getAttribute(EXPRESSION)___		AbstractBeanDefinition pointcutDefinition = null___		try {_			this.parseState.push(new PointcutEntry(id))__			pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(pointcutElement))___			String pointcutBeanName = id__			if (StringUtils.hasText(pointcutBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(pointcutBeanName, pointcutDefinition)__			}_			else {_				pointcutBeanName = parserContext.getReaderContext().registerWithGeneratedName(pointcutDefinition)__			}__			parserContext.registerComponent(_					new PointcutComponentDefinition(pointcutBeanName, pointcutDefinition, expression))__		}_		finally {_			this.parseState.pop()__		}__		return pointcutDefinition__	};parses,the,supplied,code,pointcut,and,registers,the,resulting,pointcut,with,the,bean,definition,registry;private,abstract,bean,definition,parse,pointcut,element,pointcut,element,parser,context,parser,context,string,id,pointcut,element,get,attribute,id,string,expression,pointcut,element,get,attribute,expression,abstract,bean,definition,pointcut,definition,null,try,this,parse,state,push,new,pointcut,entry,id,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,pointcut,element,string,pointcut,bean,name,id,if,string,utils,has,text,pointcut,bean,name,parser,context,get,registry,register,bean,definition,pointcut,bean,name,pointcut,definition,else,pointcut,bean,name,parser,context,get,reader,context,register,with,generated,name,pointcut,definition,parser,context,register,component,new,pointcut,component,definition,pointcut,bean,name,pointcut,definition,expression,finally,this,parse,state,pop,return,pointcut,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext);1502974979;Parses the supplied {@code <pointcut>} and registers the resulting_Pointcut with the BeanDefinitionRegistry.;private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext) {_		String id = pointcutElement.getAttribute(ID)__		String expression = pointcutElement.getAttribute(EXPRESSION)___		AbstractBeanDefinition pointcutDefinition = null___		try {_			this.parseState.push(new PointcutEntry(id))__			pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(pointcutElement))___			String pointcutBeanName = id__			if (StringUtils.hasText(pointcutBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(pointcutBeanName, pointcutDefinition)__			}_			else {_				pointcutBeanName = parserContext.getReaderContext().registerWithGeneratedName(pointcutDefinition)__			}__			parserContext.registerComponent(_					new PointcutComponentDefinition(pointcutBeanName, pointcutDefinition, expression))__		}_		finally {_			this.parseState.pop()__		}__		return pointcutDefinition__	};parses,the,supplied,code,pointcut,and,registers,the,resulting,pointcut,with,the,bean,definition,registry;private,abstract,bean,definition,parse,pointcut,element,pointcut,element,parser,context,parser,context,string,id,pointcut,element,get,attribute,id,string,expression,pointcut,element,get,attribute,expression,abstract,bean,definition,pointcut,definition,null,try,this,parse,state,push,new,pointcut,entry,id,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,pointcut,element,string,pointcut,bean,name,id,if,string,utils,has,text,pointcut,bean,name,parser,context,get,registry,register,bean,definition,pointcut,bean,name,pointcut,definition,else,pointcut,bean,name,parser,context,get,reader,context,register,with,generated,name,pointcut,definition,parser,context,register,component,new,pointcut,component,definition,pointcut,bean,name,pointcut,definition,expression,finally,this,parse,state,pop,return,pointcut,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext);1519295386;Parses the supplied {@code <pointcut>} and registers the resulting_Pointcut with the BeanDefinitionRegistry.;private AbstractBeanDefinition parsePointcut(Element pointcutElement, ParserContext parserContext) {_		String id = pointcutElement.getAttribute(ID)__		String expression = pointcutElement.getAttribute(EXPRESSION)___		AbstractBeanDefinition pointcutDefinition = null___		try {_			this.parseState.push(new PointcutEntry(id))__			pointcutDefinition = createPointcutDefinition(expression)__			pointcutDefinition.setSource(parserContext.extractSource(pointcutElement))___			String pointcutBeanName = id__			if (StringUtils.hasText(pointcutBeanName)) {_				parserContext.getRegistry().registerBeanDefinition(pointcutBeanName, pointcutDefinition)__			}_			else {_				pointcutBeanName = parserContext.getReaderContext().registerWithGeneratedName(pointcutDefinition)__			}__			parserContext.registerComponent(_					new PointcutComponentDefinition(pointcutBeanName, pointcutDefinition, expression))__		}_		finally {_			this.parseState.pop()__		}__		return pointcutDefinition__	};parses,the,supplied,code,pointcut,and,registers,the,resulting,pointcut,with,the,bean,definition,registry;private,abstract,bean,definition,parse,pointcut,element,pointcut,element,parser,context,parser,context,string,id,pointcut,element,get,attribute,id,string,expression,pointcut,element,get,attribute,expression,abstract,bean,definition,pointcut,definition,null,try,this,parse,state,push,new,pointcut,entry,id,pointcut,definition,create,pointcut,definition,expression,pointcut,definition,set,source,parser,context,extract,source,pointcut,element,string,pointcut,bean,name,id,if,string,utils,has,text,pointcut,bean,name,parser,context,get,registry,register,bean,definition,pointcut,bean,name,pointcut,definition,else,pointcut,bean,name,parser,context,get,reader,context,register,with,generated,name,pointcut,definition,parser,context,register,component,new,pointcut,component,definition,pointcut,bean,name,pointcut,definition,expression,finally,this,parse,state,pop,return,pointcut,definition
ConfigBeanDefinitionParser -> protected AbstractBeanDefinition createPointcutDefinition(String expression);1328020251;Creates a {@link BeanDefinition} for the {@link AspectJExpressionPointcut} class using_the supplied pointcut expression.;protected AbstractBeanDefinition createPointcutDefinition(String expression) {_		RootBeanDefinition beanDefinition = new RootBeanDefinition(AspectJExpressionPointcut.class)__		beanDefinition.setScope(BeanDefinition.SCOPE_PROTOTYPE)__		beanDefinition.setSynthetic(true)__		beanDefinition.getPropertyValues().add(EXPRESSION, expression)__		return beanDefinition__	};creates,a,link,bean,definition,for,the,link,aspect,jexpression,pointcut,class,using,the,supplied,pointcut,expression;protected,abstract,bean,definition,create,pointcut,definition,string,expression,root,bean,definition,bean,definition,new,root,bean,definition,aspect,jexpression,pointcut,class,bean,definition,set,scope,bean,definition,bean,definition,set,synthetic,true,bean,definition,get,property,values,add,expression,expression,return,bean,definition
ConfigBeanDefinitionParser -> protected AbstractBeanDefinition createPointcutDefinition(String expression);1356735495;Creates a {@link BeanDefinition} for the {@link AspectJExpressionPointcut} class using_the supplied pointcut expression.;protected AbstractBeanDefinition createPointcutDefinition(String expression) {_		RootBeanDefinition beanDefinition = new RootBeanDefinition(AspectJExpressionPointcut.class)__		beanDefinition.setScope(BeanDefinition.SCOPE_PROTOTYPE)__		beanDefinition.setSynthetic(true)__		beanDefinition.getPropertyValues().add(EXPRESSION, expression)__		return beanDefinition__	};creates,a,link,bean,definition,for,the,link,aspect,jexpression,pointcut,class,using,the,supplied,pointcut,expression;protected,abstract,bean,definition,create,pointcut,definition,string,expression,root,bean,definition,bean,definition,new,root,bean,definition,aspect,jexpression,pointcut,class,bean,definition,set,scope,bean,definition,bean,definition,set,synthetic,true,bean,definition,get,property,values,add,expression,expression,return,bean,definition
ConfigBeanDefinitionParser -> protected AbstractBeanDefinition createPointcutDefinition(String expression);1357119239;Creates a {@link BeanDefinition} for the {@link AspectJExpressionPointcut} class using_the supplied pointcut expression.;protected AbstractBeanDefinition createPointcutDefinition(String expression) {_		RootBeanDefinition beanDefinition = new RootBeanDefinition(AspectJExpressionPointcut.class)__		beanDefinition.setScope(BeanDefinition.SCOPE_PROTOTYPE)__		beanDefinition.setSynthetic(true)__		beanDefinition.getPropertyValues().add(EXPRESSION, expression)__		return beanDefinition__	};creates,a,link,bean,definition,for,the,link,aspect,jexpression,pointcut,class,using,the,supplied,pointcut,expression;protected,abstract,bean,definition,create,pointcut,definition,string,expression,root,bean,definition,bean,definition,new,root,bean,definition,aspect,jexpression,pointcut,class,bean,definition,set,scope,bean,definition,bean,definition,set,synthetic,true,bean,definition,get,property,values,add,expression,expression,return,bean,definition
ConfigBeanDefinitionParser -> protected AbstractBeanDefinition createPointcutDefinition(String expression);1368482696;Creates a {@link BeanDefinition} for the {@link AspectJExpressionPointcut} class using_the supplied pointcut expression.;protected AbstractBeanDefinition createPointcutDefinition(String expression) {_		RootBeanDefinition beanDefinition = new RootBeanDefinition(AspectJExpressionPointcut.class)__		beanDefinition.setScope(BeanDefinition.SCOPE_PROTOTYPE)__		beanDefinition.setSynthetic(true)__		beanDefinition.getPropertyValues().add(EXPRESSION, expression)__		return beanDefinition__	};creates,a,link,bean,definition,for,the,link,aspect,jexpression,pointcut,class,using,the,supplied,pointcut,expression;protected,abstract,bean,definition,create,pointcut,definition,string,expression,root,bean,definition,bean,definition,new,root,bean,definition,aspect,jexpression,pointcut,class,bean,definition,set,scope,bean,definition,bean,definition,set,synthetic,true,bean,definition,get,property,values,add,expression,expression,return,bean,definition
ConfigBeanDefinitionParser -> protected AbstractBeanDefinition createPointcutDefinition(String expression);1385412762;Creates a {@link BeanDefinition} for the {@link AspectJExpressionPointcut} class using_the supplied pointcut expression.;protected AbstractBeanDefinition createPointcutDefinition(String expression) {_		RootBeanDefinition beanDefinition = new RootBeanDefinition(AspectJExpressionPointcut.class)__		beanDefinition.setScope(BeanDefinition.SCOPE_PROTOTYPE)__		beanDefinition.setSynthetic(true)__		beanDefinition.getPropertyValues().add(EXPRESSION, expression)__		return beanDefinition__	};creates,a,link,bean,definition,for,the,link,aspect,jexpression,pointcut,class,using,the,supplied,pointcut,expression;protected,abstract,bean,definition,create,pointcut,definition,string,expression,root,bean,definition,bean,definition,new,root,bean,definition,aspect,jexpression,pointcut,class,bean,definition,set,scope,bean,definition,bean,definition,set,synthetic,true,bean,definition,get,property,values,add,expression,expression,return,bean,definition
ConfigBeanDefinitionParser -> protected AbstractBeanDefinition createPointcutDefinition(String expression);1447323728;Creates a {@link BeanDefinition} for the {@link AspectJExpressionPointcut} class using_the supplied pointcut expression.;protected AbstractBeanDefinition createPointcutDefinition(String expression) {_		RootBeanDefinition beanDefinition = new RootBeanDefinition(AspectJExpressionPointcut.class)__		beanDefinition.setScope(BeanDefinition.SCOPE_PROTOTYPE)__		beanDefinition.setSynthetic(true)__		beanDefinition.getPropertyValues().add(EXPRESSION, expression)__		return beanDefinition__	};creates,a,link,bean,definition,for,the,link,aspect,jexpression,pointcut,class,using,the,supplied,pointcut,expression;protected,abstract,bean,definition,create,pointcut,definition,string,expression,root,bean,definition,bean,definition,new,root,bean,definition,aspect,jexpression,pointcut,class,bean,definition,set,scope,bean,definition,bean,definition,set,synthetic,true,bean,definition,get,property,values,add,expression,expression,return,bean,definition
ConfigBeanDefinitionParser -> protected AbstractBeanDefinition createPointcutDefinition(String expression);1467730834;Creates a {@link BeanDefinition} for the {@link AspectJExpressionPointcut} class using_the supplied pointcut expression.;protected AbstractBeanDefinition createPointcutDefinition(String expression) {_		RootBeanDefinition beanDefinition = new RootBeanDefinition(AspectJExpressionPointcut.class)__		beanDefinition.setScope(BeanDefinition.SCOPE_PROTOTYPE)__		beanDefinition.setSynthetic(true)__		beanDefinition.getPropertyValues().add(EXPRESSION, expression)__		return beanDefinition__	};creates,a,link,bean,definition,for,the,link,aspect,jexpression,pointcut,class,using,the,supplied,pointcut,expression;protected,abstract,bean,definition,create,pointcut,definition,string,expression,root,bean,definition,bean,definition,new,root,bean,definition,aspect,jexpression,pointcut,class,bean,definition,set,scope,bean,definition,bean,definition,set,synthetic,true,bean,definition,get,property,values,add,expression,expression,return,bean,definition
ConfigBeanDefinitionParser -> protected AbstractBeanDefinition createPointcutDefinition(String expression);1495868221;Creates a {@link BeanDefinition} for the {@link AspectJExpressionPointcut} class using_the supplied pointcut expression.;protected AbstractBeanDefinition createPointcutDefinition(String expression) {_		RootBeanDefinition beanDefinition = new RootBeanDefinition(AspectJExpressionPointcut.class)__		beanDefinition.setScope(BeanDefinition.SCOPE_PROTOTYPE)__		beanDefinition.setSynthetic(true)__		beanDefinition.getPropertyValues().add(EXPRESSION, expression)__		return beanDefinition__	};creates,a,link,bean,definition,for,the,link,aspect,jexpression,pointcut,class,using,the,supplied,pointcut,expression;protected,abstract,bean,definition,create,pointcut,definition,string,expression,root,bean,definition,bean,definition,new,root,bean,definition,aspect,jexpression,pointcut,class,bean,definition,set,scope,bean,definition,bean,definition,set,synthetic,true,bean,definition,get,property,values,add,expression,expression,return,bean,definition
ConfigBeanDefinitionParser -> protected AbstractBeanDefinition createPointcutDefinition(String expression);1502974979;Creates a {@link BeanDefinition} for the {@link AspectJExpressionPointcut} class using_the supplied pointcut expression.;protected AbstractBeanDefinition createPointcutDefinition(String expression) {_		RootBeanDefinition beanDefinition = new RootBeanDefinition(AspectJExpressionPointcut.class)__		beanDefinition.setScope(BeanDefinition.SCOPE_PROTOTYPE)__		beanDefinition.setSynthetic(true)__		beanDefinition.getPropertyValues().add(EXPRESSION, expression)__		return beanDefinition__	};creates,a,link,bean,definition,for,the,link,aspect,jexpression,pointcut,class,using,the,supplied,pointcut,expression;protected,abstract,bean,definition,create,pointcut,definition,string,expression,root,bean,definition,bean,definition,new,root,bean,definition,aspect,jexpression,pointcut,class,bean,definition,set,scope,bean,definition,bean,definition,set,synthetic,true,bean,definition,get,property,values,add,expression,expression,return,bean,definition
ConfigBeanDefinitionParser -> protected AbstractBeanDefinition createPointcutDefinition(String expression);1519295386;Creates a {@link BeanDefinition} for the {@link AspectJExpressionPointcut} class using_the supplied pointcut expression.;protected AbstractBeanDefinition createPointcutDefinition(String expression) {_		RootBeanDefinition beanDefinition = new RootBeanDefinition(AspectJExpressionPointcut.class)__		beanDefinition.setScope(BeanDefinition.SCOPE_PROTOTYPE)__		beanDefinition.setSynthetic(true)__		beanDefinition.getPropertyValues().add(EXPRESSION, expression)__		return beanDefinition__	};creates,a,link,bean,definition,for,the,link,aspect,jexpression,pointcut,class,using,the,supplied,pointcut,expression;protected,abstract,bean,definition,create,pointcut,definition,string,expression,root,bean,definition,bean,definition,new,root,bean,definition,aspect,jexpression,pointcut,class,bean,definition,set,scope,bean,definition,bean,definition,set,synthetic,true,bean,definition,get,property,values,add,expression,expression,return,bean,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext);1328020251;Parse a '<code>declare-parents</code>' element and register the appropriate_DeclareParentsAdvisor with the BeanDefinitionRegistry encapsulated in the_supplied ParserContext.;private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(DeclareParentsAdvisor.class)__		builder.addConstructorArgValue(declareParentsElement.getAttribute(IMPLEMENT_INTERFACE))__		builder.addConstructorArgValue(declareParentsElement.getAttribute(TYPE_PATTERN))__		_		String defaultImpl = declareParentsElement.getAttribute(DEFAULT_IMPL)__		String delegateRef = declareParentsElement.getAttribute(DELEGATE_REF)__		_		if (StringUtils.hasText(defaultImpl) && !StringUtils.hasText(delegateRef)) {_			builder.addConstructorArgValue(defaultImpl)__		}_		else if (StringUtils.hasText(delegateRef) && !StringUtils.hasText(defaultImpl)) {_			builder.addConstructorArgReference(delegateRef)__		}_		else {_			parserContext.getReaderContext().error(_					"Exactly one of the " + DEFAULT_IMPL + " or " + DELEGATE_REF + " attributes must be specified",_					declareParentsElement, this.parseState.snapshot())__		}__		AbstractBeanDefinition definition = builder.getBeanDefinition()__		definition.setSource(parserContext.extractSource(declareParentsElement))__		parserContext.getReaderContext().registerWithGeneratedName(definition)__		return definition__	};parse,a,code,declare,parents,code,element,and,register,the,appropriate,declare,parents,advisor,with,the,bean,definition,registry,encapsulated,in,the,supplied,parser,context;private,abstract,bean,definition,parse,declare,parents,element,declare,parents,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,declare,parents,advisor,class,builder,add,constructor,arg,value,declare,parents,element,get,attribute,builder,add,constructor,arg,value,declare,parents,element,get,attribute,string,default,impl,declare,parents,element,get,attribute,string,delegate,ref,declare,parents,element,get,attribute,if,string,utils,has,text,default,impl,string,utils,has,text,delegate,ref,builder,add,constructor,arg,value,default,impl,else,if,string,utils,has,text,delegate,ref,string,utils,has,text,default,impl,builder,add,constructor,arg,reference,delegate,ref,else,parser,context,get,reader,context,error,exactly,one,of,the,or,attributes,must,be,specified,declare,parents,element,this,parse,state,snapshot,abstract,bean,definition,definition,builder,get,bean,definition,definition,set,source,parser,context,extract,source,declare,parents,element,parser,context,get,reader,context,register,with,generated,name,definition,return,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext);1356735495;Parse a '{@code declare-parents}' element and register the appropriate_DeclareParentsAdvisor with the BeanDefinitionRegistry encapsulated in the_supplied ParserContext.;private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(DeclareParentsAdvisor.class)__		builder.addConstructorArgValue(declareParentsElement.getAttribute(IMPLEMENT_INTERFACE))__		builder.addConstructorArgValue(declareParentsElement.getAttribute(TYPE_PATTERN))___		String defaultImpl = declareParentsElement.getAttribute(DEFAULT_IMPL)__		String delegateRef = declareParentsElement.getAttribute(DELEGATE_REF)___		if (StringUtils.hasText(defaultImpl) && !StringUtils.hasText(delegateRef)) {_			builder.addConstructorArgValue(defaultImpl)__		}_		else if (StringUtils.hasText(delegateRef) && !StringUtils.hasText(defaultImpl)) {_			builder.addConstructorArgReference(delegateRef)__		}_		else {_			parserContext.getReaderContext().error(_					"Exactly one of the " + DEFAULT_IMPL + " or " + DELEGATE_REF + " attributes must be specified",_					declareParentsElement, this.parseState.snapshot())__		}__		AbstractBeanDefinition definition = builder.getBeanDefinition()__		definition.setSource(parserContext.extractSource(declareParentsElement))__		parserContext.getReaderContext().registerWithGeneratedName(definition)__		return definition__	};parse,a,code,declare,parents,element,and,register,the,appropriate,declare,parents,advisor,with,the,bean,definition,registry,encapsulated,in,the,supplied,parser,context;private,abstract,bean,definition,parse,declare,parents,element,declare,parents,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,declare,parents,advisor,class,builder,add,constructor,arg,value,declare,parents,element,get,attribute,builder,add,constructor,arg,value,declare,parents,element,get,attribute,string,default,impl,declare,parents,element,get,attribute,string,delegate,ref,declare,parents,element,get,attribute,if,string,utils,has,text,default,impl,string,utils,has,text,delegate,ref,builder,add,constructor,arg,value,default,impl,else,if,string,utils,has,text,delegate,ref,string,utils,has,text,default,impl,builder,add,constructor,arg,reference,delegate,ref,else,parser,context,get,reader,context,error,exactly,one,of,the,or,attributes,must,be,specified,declare,parents,element,this,parse,state,snapshot,abstract,bean,definition,definition,builder,get,bean,definition,definition,set,source,parser,context,extract,source,declare,parents,element,parser,context,get,reader,context,register,with,generated,name,definition,return,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext);1357119239;Parse a '{@code declare-parents}' element and register the appropriate_DeclareParentsAdvisor with the BeanDefinitionRegistry encapsulated in the_supplied ParserContext.;private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(DeclareParentsAdvisor.class)__		builder.addConstructorArgValue(declareParentsElement.getAttribute(IMPLEMENT_INTERFACE))__		builder.addConstructorArgValue(declareParentsElement.getAttribute(TYPE_PATTERN))___		String defaultImpl = declareParentsElement.getAttribute(DEFAULT_IMPL)__		String delegateRef = declareParentsElement.getAttribute(DELEGATE_REF)___		if (StringUtils.hasText(defaultImpl) && !StringUtils.hasText(delegateRef)) {_			builder.addConstructorArgValue(defaultImpl)__		}_		else if (StringUtils.hasText(delegateRef) && !StringUtils.hasText(defaultImpl)) {_			builder.addConstructorArgReference(delegateRef)__		}_		else {_			parserContext.getReaderContext().error(_					"Exactly one of the " + DEFAULT_IMPL + " or " + DELEGATE_REF + " attributes must be specified",_					declareParentsElement, this.parseState.snapshot())__		}__		AbstractBeanDefinition definition = builder.getBeanDefinition()__		definition.setSource(parserContext.extractSource(declareParentsElement))__		parserContext.getReaderContext().registerWithGeneratedName(definition)__		return definition__	};parse,a,code,declare,parents,element,and,register,the,appropriate,declare,parents,advisor,with,the,bean,definition,registry,encapsulated,in,the,supplied,parser,context;private,abstract,bean,definition,parse,declare,parents,element,declare,parents,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,declare,parents,advisor,class,builder,add,constructor,arg,value,declare,parents,element,get,attribute,builder,add,constructor,arg,value,declare,parents,element,get,attribute,string,default,impl,declare,parents,element,get,attribute,string,delegate,ref,declare,parents,element,get,attribute,if,string,utils,has,text,default,impl,string,utils,has,text,delegate,ref,builder,add,constructor,arg,value,default,impl,else,if,string,utils,has,text,delegate,ref,string,utils,has,text,default,impl,builder,add,constructor,arg,reference,delegate,ref,else,parser,context,get,reader,context,error,exactly,one,of,the,or,attributes,must,be,specified,declare,parents,element,this,parse,state,snapshot,abstract,bean,definition,definition,builder,get,bean,definition,definition,set,source,parser,context,extract,source,declare,parents,element,parser,context,get,reader,context,register,with,generated,name,definition,return,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext);1368482696;Parse a '{@code declare-parents}' element and register the appropriate_DeclareParentsAdvisor with the BeanDefinitionRegistry encapsulated in the_supplied ParserContext.;private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(DeclareParentsAdvisor.class)__		builder.addConstructorArgValue(declareParentsElement.getAttribute(IMPLEMENT_INTERFACE))__		builder.addConstructorArgValue(declareParentsElement.getAttribute(TYPE_PATTERN))___		String defaultImpl = declareParentsElement.getAttribute(DEFAULT_IMPL)__		String delegateRef = declareParentsElement.getAttribute(DELEGATE_REF)___		if (StringUtils.hasText(defaultImpl) && !StringUtils.hasText(delegateRef)) {_			builder.addConstructorArgValue(defaultImpl)__		}_		else if (StringUtils.hasText(delegateRef) && !StringUtils.hasText(defaultImpl)) {_			builder.addConstructorArgReference(delegateRef)__		}_		else {_			parserContext.getReaderContext().error(_					"Exactly one of the " + DEFAULT_IMPL + " or " + DELEGATE_REF + " attributes must be specified",_					declareParentsElement, this.parseState.snapshot())__		}__		AbstractBeanDefinition definition = builder.getBeanDefinition()__		definition.setSource(parserContext.extractSource(declareParentsElement))__		parserContext.getReaderContext().registerWithGeneratedName(definition)__		return definition__	};parse,a,code,declare,parents,element,and,register,the,appropriate,declare,parents,advisor,with,the,bean,definition,registry,encapsulated,in,the,supplied,parser,context;private,abstract,bean,definition,parse,declare,parents,element,declare,parents,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,declare,parents,advisor,class,builder,add,constructor,arg,value,declare,parents,element,get,attribute,builder,add,constructor,arg,value,declare,parents,element,get,attribute,string,default,impl,declare,parents,element,get,attribute,string,delegate,ref,declare,parents,element,get,attribute,if,string,utils,has,text,default,impl,string,utils,has,text,delegate,ref,builder,add,constructor,arg,value,default,impl,else,if,string,utils,has,text,delegate,ref,string,utils,has,text,default,impl,builder,add,constructor,arg,reference,delegate,ref,else,parser,context,get,reader,context,error,exactly,one,of,the,or,attributes,must,be,specified,declare,parents,element,this,parse,state,snapshot,abstract,bean,definition,definition,builder,get,bean,definition,definition,set,source,parser,context,extract,source,declare,parents,element,parser,context,get,reader,context,register,with,generated,name,definition,return,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext);1385412762;Parse a '{@code declare-parents}' element and register the appropriate_DeclareParentsAdvisor with the BeanDefinitionRegistry encapsulated in the_supplied ParserContext.;private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(DeclareParentsAdvisor.class)__		builder.addConstructorArgValue(declareParentsElement.getAttribute(IMPLEMENT_INTERFACE))__		builder.addConstructorArgValue(declareParentsElement.getAttribute(TYPE_PATTERN))___		String defaultImpl = declareParentsElement.getAttribute(DEFAULT_IMPL)__		String delegateRef = declareParentsElement.getAttribute(DELEGATE_REF)___		if (StringUtils.hasText(defaultImpl) && !StringUtils.hasText(delegateRef)) {_			builder.addConstructorArgValue(defaultImpl)__		}_		else if (StringUtils.hasText(delegateRef) && !StringUtils.hasText(defaultImpl)) {_			builder.addConstructorArgReference(delegateRef)__		}_		else {_			parserContext.getReaderContext().error(_					"Exactly one of the " + DEFAULT_IMPL + " or " + DELEGATE_REF + " attributes must be specified",_					declareParentsElement, this.parseState.snapshot())__		}__		AbstractBeanDefinition definition = builder.getBeanDefinition()__		definition.setSource(parserContext.extractSource(declareParentsElement))__		parserContext.getReaderContext().registerWithGeneratedName(definition)__		return definition__	};parse,a,code,declare,parents,element,and,register,the,appropriate,declare,parents,advisor,with,the,bean,definition,registry,encapsulated,in,the,supplied,parser,context;private,abstract,bean,definition,parse,declare,parents,element,declare,parents,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,declare,parents,advisor,class,builder,add,constructor,arg,value,declare,parents,element,get,attribute,builder,add,constructor,arg,value,declare,parents,element,get,attribute,string,default,impl,declare,parents,element,get,attribute,string,delegate,ref,declare,parents,element,get,attribute,if,string,utils,has,text,default,impl,string,utils,has,text,delegate,ref,builder,add,constructor,arg,value,default,impl,else,if,string,utils,has,text,delegate,ref,string,utils,has,text,default,impl,builder,add,constructor,arg,reference,delegate,ref,else,parser,context,get,reader,context,error,exactly,one,of,the,or,attributes,must,be,specified,declare,parents,element,this,parse,state,snapshot,abstract,bean,definition,definition,builder,get,bean,definition,definition,set,source,parser,context,extract,source,declare,parents,element,parser,context,get,reader,context,register,with,generated,name,definition,return,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext);1447323728;Parse a '{@code declare-parents}' element and register the appropriate_DeclareParentsAdvisor with the BeanDefinitionRegistry encapsulated in the_supplied ParserContext.;private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(DeclareParentsAdvisor.class)__		builder.addConstructorArgValue(declareParentsElement.getAttribute(IMPLEMENT_INTERFACE))__		builder.addConstructorArgValue(declareParentsElement.getAttribute(TYPE_PATTERN))___		String defaultImpl = declareParentsElement.getAttribute(DEFAULT_IMPL)__		String delegateRef = declareParentsElement.getAttribute(DELEGATE_REF)___		if (StringUtils.hasText(defaultImpl) && !StringUtils.hasText(delegateRef)) {_			builder.addConstructorArgValue(defaultImpl)__		}_		else if (StringUtils.hasText(delegateRef) && !StringUtils.hasText(defaultImpl)) {_			builder.addConstructorArgReference(delegateRef)__		}_		else {_			parserContext.getReaderContext().error(_					"Exactly one of the " + DEFAULT_IMPL + " or " + DELEGATE_REF + " attributes must be specified",_					declareParentsElement, this.parseState.snapshot())__		}__		AbstractBeanDefinition definition = builder.getBeanDefinition()__		definition.setSource(parserContext.extractSource(declareParentsElement))__		parserContext.getReaderContext().registerWithGeneratedName(definition)__		return definition__	};parse,a,code,declare,parents,element,and,register,the,appropriate,declare,parents,advisor,with,the,bean,definition,registry,encapsulated,in,the,supplied,parser,context;private,abstract,bean,definition,parse,declare,parents,element,declare,parents,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,declare,parents,advisor,class,builder,add,constructor,arg,value,declare,parents,element,get,attribute,builder,add,constructor,arg,value,declare,parents,element,get,attribute,string,default,impl,declare,parents,element,get,attribute,string,delegate,ref,declare,parents,element,get,attribute,if,string,utils,has,text,default,impl,string,utils,has,text,delegate,ref,builder,add,constructor,arg,value,default,impl,else,if,string,utils,has,text,delegate,ref,string,utils,has,text,default,impl,builder,add,constructor,arg,reference,delegate,ref,else,parser,context,get,reader,context,error,exactly,one,of,the,or,attributes,must,be,specified,declare,parents,element,this,parse,state,snapshot,abstract,bean,definition,definition,builder,get,bean,definition,definition,set,source,parser,context,extract,source,declare,parents,element,parser,context,get,reader,context,register,with,generated,name,definition,return,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext);1467730834;Parse a '{@code declare-parents}' element and register the appropriate_DeclareParentsAdvisor with the BeanDefinitionRegistry encapsulated in the_supplied ParserContext.;private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(DeclareParentsAdvisor.class)__		builder.addConstructorArgValue(declareParentsElement.getAttribute(IMPLEMENT_INTERFACE))__		builder.addConstructorArgValue(declareParentsElement.getAttribute(TYPE_PATTERN))___		String defaultImpl = declareParentsElement.getAttribute(DEFAULT_IMPL)__		String delegateRef = declareParentsElement.getAttribute(DELEGATE_REF)___		if (StringUtils.hasText(defaultImpl) && !StringUtils.hasText(delegateRef)) {_			builder.addConstructorArgValue(defaultImpl)__		}_		else if (StringUtils.hasText(delegateRef) && !StringUtils.hasText(defaultImpl)) {_			builder.addConstructorArgReference(delegateRef)__		}_		else {_			parserContext.getReaderContext().error(_					"Exactly one of the " + DEFAULT_IMPL + " or " + DELEGATE_REF + " attributes must be specified",_					declareParentsElement, this.parseState.snapshot())__		}__		AbstractBeanDefinition definition = builder.getBeanDefinition()__		definition.setSource(parserContext.extractSource(declareParentsElement))__		parserContext.getReaderContext().registerWithGeneratedName(definition)__		return definition__	};parse,a,code,declare,parents,element,and,register,the,appropriate,declare,parents,advisor,with,the,bean,definition,registry,encapsulated,in,the,supplied,parser,context;private,abstract,bean,definition,parse,declare,parents,element,declare,parents,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,declare,parents,advisor,class,builder,add,constructor,arg,value,declare,parents,element,get,attribute,builder,add,constructor,arg,value,declare,parents,element,get,attribute,string,default,impl,declare,parents,element,get,attribute,string,delegate,ref,declare,parents,element,get,attribute,if,string,utils,has,text,default,impl,string,utils,has,text,delegate,ref,builder,add,constructor,arg,value,default,impl,else,if,string,utils,has,text,delegate,ref,string,utils,has,text,default,impl,builder,add,constructor,arg,reference,delegate,ref,else,parser,context,get,reader,context,error,exactly,one,of,the,or,attributes,must,be,specified,declare,parents,element,this,parse,state,snapshot,abstract,bean,definition,definition,builder,get,bean,definition,definition,set,source,parser,context,extract,source,declare,parents,element,parser,context,get,reader,context,register,with,generated,name,definition,return,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext);1495868221;Parse a '{@code declare-parents}' element and register the appropriate_DeclareParentsAdvisor with the BeanDefinitionRegistry encapsulated in the_supplied ParserContext.;private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(DeclareParentsAdvisor.class)__		builder.addConstructorArgValue(declareParentsElement.getAttribute(IMPLEMENT_INTERFACE))__		builder.addConstructorArgValue(declareParentsElement.getAttribute(TYPE_PATTERN))___		String defaultImpl = declareParentsElement.getAttribute(DEFAULT_IMPL)__		String delegateRef = declareParentsElement.getAttribute(DELEGATE_REF)___		if (StringUtils.hasText(defaultImpl) && !StringUtils.hasText(delegateRef)) {_			builder.addConstructorArgValue(defaultImpl)__		}_		else if (StringUtils.hasText(delegateRef) && !StringUtils.hasText(defaultImpl)) {_			builder.addConstructorArgReference(delegateRef)__		}_		else {_			parserContext.getReaderContext().error(_					"Exactly one of the " + DEFAULT_IMPL + " or " + DELEGATE_REF + " attributes must be specified",_					declareParentsElement, this.parseState.snapshot())__		}__		AbstractBeanDefinition definition = builder.getBeanDefinition()__		definition.setSource(parserContext.extractSource(declareParentsElement))__		parserContext.getReaderContext().registerWithGeneratedName(definition)__		return definition__	};parse,a,code,declare,parents,element,and,register,the,appropriate,declare,parents,advisor,with,the,bean,definition,registry,encapsulated,in,the,supplied,parser,context;private,abstract,bean,definition,parse,declare,parents,element,declare,parents,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,declare,parents,advisor,class,builder,add,constructor,arg,value,declare,parents,element,get,attribute,builder,add,constructor,arg,value,declare,parents,element,get,attribute,string,default,impl,declare,parents,element,get,attribute,string,delegate,ref,declare,parents,element,get,attribute,if,string,utils,has,text,default,impl,string,utils,has,text,delegate,ref,builder,add,constructor,arg,value,default,impl,else,if,string,utils,has,text,delegate,ref,string,utils,has,text,default,impl,builder,add,constructor,arg,reference,delegate,ref,else,parser,context,get,reader,context,error,exactly,one,of,the,or,attributes,must,be,specified,declare,parents,element,this,parse,state,snapshot,abstract,bean,definition,definition,builder,get,bean,definition,definition,set,source,parser,context,extract,source,declare,parents,element,parser,context,get,reader,context,register,with,generated,name,definition,return,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext);1502974979;Parse a '{@code declare-parents}' element and register the appropriate_DeclareParentsAdvisor with the BeanDefinitionRegistry encapsulated in the_supplied ParserContext.;private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(DeclareParentsAdvisor.class)__		builder.addConstructorArgValue(declareParentsElement.getAttribute(IMPLEMENT_INTERFACE))__		builder.addConstructorArgValue(declareParentsElement.getAttribute(TYPE_PATTERN))___		String defaultImpl = declareParentsElement.getAttribute(DEFAULT_IMPL)__		String delegateRef = declareParentsElement.getAttribute(DELEGATE_REF)___		if (StringUtils.hasText(defaultImpl) && !StringUtils.hasText(delegateRef)) {_			builder.addConstructorArgValue(defaultImpl)__		}_		else if (StringUtils.hasText(delegateRef) && !StringUtils.hasText(defaultImpl)) {_			builder.addConstructorArgReference(delegateRef)__		}_		else {_			parserContext.getReaderContext().error(_					"Exactly one of the " + DEFAULT_IMPL + " or " + DELEGATE_REF + " attributes must be specified",_					declareParentsElement, this.parseState.snapshot())__		}__		AbstractBeanDefinition definition = builder.getBeanDefinition()__		definition.setSource(parserContext.extractSource(declareParentsElement))__		parserContext.getReaderContext().registerWithGeneratedName(definition)__		return definition__	};parse,a,code,declare,parents,element,and,register,the,appropriate,declare,parents,advisor,with,the,bean,definition,registry,encapsulated,in,the,supplied,parser,context;private,abstract,bean,definition,parse,declare,parents,element,declare,parents,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,declare,parents,advisor,class,builder,add,constructor,arg,value,declare,parents,element,get,attribute,builder,add,constructor,arg,value,declare,parents,element,get,attribute,string,default,impl,declare,parents,element,get,attribute,string,delegate,ref,declare,parents,element,get,attribute,if,string,utils,has,text,default,impl,string,utils,has,text,delegate,ref,builder,add,constructor,arg,value,default,impl,else,if,string,utils,has,text,delegate,ref,string,utils,has,text,default,impl,builder,add,constructor,arg,reference,delegate,ref,else,parser,context,get,reader,context,error,exactly,one,of,the,or,attributes,must,be,specified,declare,parents,element,this,parse,state,snapshot,abstract,bean,definition,definition,builder,get,bean,definition,definition,set,source,parser,context,extract,source,declare,parents,element,parser,context,get,reader,context,register,with,generated,name,definition,return,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext);1519295386;Parse a '{@code declare-parents}' element and register the appropriate_DeclareParentsAdvisor with the BeanDefinitionRegistry encapsulated in the_supplied ParserContext.;private AbstractBeanDefinition parseDeclareParents(Element declareParentsElement, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(DeclareParentsAdvisor.class)__		builder.addConstructorArgValue(declareParentsElement.getAttribute(IMPLEMENT_INTERFACE))__		builder.addConstructorArgValue(declareParentsElement.getAttribute(TYPE_PATTERN))___		String defaultImpl = declareParentsElement.getAttribute(DEFAULT_IMPL)__		String delegateRef = declareParentsElement.getAttribute(DELEGATE_REF)___		if (StringUtils.hasText(defaultImpl) && !StringUtils.hasText(delegateRef)) {_			builder.addConstructorArgValue(defaultImpl)__		}_		else if (StringUtils.hasText(delegateRef) && !StringUtils.hasText(defaultImpl)) {_			builder.addConstructorArgReference(delegateRef)__		}_		else {_			parserContext.getReaderContext().error(_					"Exactly one of the " + DEFAULT_IMPL + " or " + DELEGATE_REF + " attributes must be specified",_					declareParentsElement, this.parseState.snapshot())__		}__		AbstractBeanDefinition definition = builder.getBeanDefinition()__		definition.setSource(parserContext.extractSource(declareParentsElement))__		parserContext.getReaderContext().registerWithGeneratedName(definition)__		return definition__	};parse,a,code,declare,parents,element,and,register,the,appropriate,declare,parents,advisor,with,the,bean,definition,registry,encapsulated,in,the,supplied,parser,context;private,abstract,bean,definition,parse,declare,parents,element,declare,parents,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,declare,parents,advisor,class,builder,add,constructor,arg,value,declare,parents,element,get,attribute,builder,add,constructor,arg,value,declare,parents,element,get,attribute,string,default,impl,declare,parents,element,get,attribute,string,delegate,ref,declare,parents,element,get,attribute,if,string,utils,has,text,default,impl,string,utils,has,text,delegate,ref,builder,add,constructor,arg,value,default,impl,else,if,string,utils,has,text,delegate,ref,string,utils,has,text,default,impl,builder,add,constructor,arg,reference,delegate,ref,else,parser,context,get,reader,context,error,exactly,one,of,the,or,attributes,must,be,specified,declare,parents,element,this,parse,state,snapshot,abstract,bean,definition,definition,builder,get,bean,definition,definition,set,source,parser,context,extract,source,declare,parents,element,parser,context,get,reader,context,register,with,generated,name,definition,return,definition
ConfigBeanDefinitionParser -> private Class getAdviceClass(Element adviceElement, ParserContext parserContext);1328020251;Gets the advice implementation class corresponding to the supplied {@link Element}.;private Class getAdviceClass(Element adviceElement, ParserContext parserContext) {_		String elementName = parserContext.getDelegate().getLocalName(adviceElement)__		if (BEFORE.equals(elementName)) {_			return AspectJMethodBeforeAdvice.class__		}_		else if (AFTER.equals(elementName)) {_			return AspectJAfterAdvice.class__		}_		else if (AFTER_RETURNING_ELEMENT.equals(elementName)) {_			return AspectJAfterReturningAdvice.class__		}_		else if (AFTER_THROWING_ELEMENT.equals(elementName)) {_			return AspectJAfterThrowingAdvice.class__		}_		else if (AROUND.equals(elementName)) {_			return AspectJAroundAdvice.class__		}_		else {_			throw new IllegalArgumentException("Unknown advice kind [" + elementName + "].")__		}_	};gets,the,advice,implementation,class,corresponding,to,the,supplied,link,element;private,class,get,advice,class,element,advice,element,parser,context,parser,context,string,element,name,parser,context,get,delegate,get,local,name,advice,element,if,before,equals,element,name,return,aspect,jmethod,before,advice,class,else,if,after,equals,element,name,return,aspect,jafter,advice,class,else,if,equals,element,name,return,aspect,jafter,returning,advice,class,else,if,equals,element,name,return,aspect,jafter,throwing,advice,class,else,if,around,equals,element,name,return,aspect,jaround,advice,class,else,throw,new,illegal,argument,exception,unknown,advice,kind,element,name
ConfigBeanDefinitionParser -> private Class getAdviceClass(Element adviceElement, ParserContext parserContext);1356735495;Gets the advice implementation class corresponding to the supplied {@link Element}.;private Class getAdviceClass(Element adviceElement, ParserContext parserContext) {_		String elementName = parserContext.getDelegate().getLocalName(adviceElement)__		if (BEFORE.equals(elementName)) {_			return AspectJMethodBeforeAdvice.class__		}_		else if (AFTER.equals(elementName)) {_			return AspectJAfterAdvice.class__		}_		else if (AFTER_RETURNING_ELEMENT.equals(elementName)) {_			return AspectJAfterReturningAdvice.class__		}_		else if (AFTER_THROWING_ELEMENT.equals(elementName)) {_			return AspectJAfterThrowingAdvice.class__		}_		else if (AROUND.equals(elementName)) {_			return AspectJAroundAdvice.class__		}_		else {_			throw new IllegalArgumentException("Unknown advice kind [" + elementName + "].")__		}_	};gets,the,advice,implementation,class,corresponding,to,the,supplied,link,element;private,class,get,advice,class,element,advice,element,parser,context,parser,context,string,element,name,parser,context,get,delegate,get,local,name,advice,element,if,before,equals,element,name,return,aspect,jmethod,before,advice,class,else,if,after,equals,element,name,return,aspect,jafter,advice,class,else,if,equals,element,name,return,aspect,jafter,returning,advice,class,else,if,equals,element,name,return,aspect,jafter,throwing,advice,class,else,if,around,equals,element,name,return,aspect,jaround,advice,class,else,throw,new,illegal,argument,exception,unknown,advice,kind,element,name
ConfigBeanDefinitionParser -> private Class getAdviceClass(Element adviceElement, ParserContext parserContext);1357119239;Gets the advice implementation class corresponding to the supplied {@link Element}.;private Class getAdviceClass(Element adviceElement, ParserContext parserContext) {_		String elementName = parserContext.getDelegate().getLocalName(adviceElement)__		if (BEFORE.equals(elementName)) {_			return AspectJMethodBeforeAdvice.class__		}_		else if (AFTER.equals(elementName)) {_			return AspectJAfterAdvice.class__		}_		else if (AFTER_RETURNING_ELEMENT.equals(elementName)) {_			return AspectJAfterReturningAdvice.class__		}_		else if (AFTER_THROWING_ELEMENT.equals(elementName)) {_			return AspectJAfterThrowingAdvice.class__		}_		else if (AROUND.equals(elementName)) {_			return AspectJAroundAdvice.class__		}_		else {_			throw new IllegalArgumentException("Unknown advice kind [" + elementName + "].")__		}_	};gets,the,advice,implementation,class,corresponding,to,the,supplied,link,element;private,class,get,advice,class,element,advice,element,parser,context,parser,context,string,element,name,parser,context,get,delegate,get,local,name,advice,element,if,before,equals,element,name,return,aspect,jmethod,before,advice,class,else,if,after,equals,element,name,return,aspect,jafter,advice,class,else,if,equals,element,name,return,aspect,jafter,returning,advice,class,else,if,equals,element,name,return,aspect,jafter,throwing,advice,class,else,if,around,equals,element,name,return,aspect,jaround,advice,class,else,throw,new,illegal,argument,exception,unknown,advice,kind,element,name
ConfigBeanDefinitionParser -> private Class getAdviceClass(Element adviceElement, ParserContext parserContext);1368482696;Gets the advice implementation class corresponding to the supplied {@link Element}.;private Class getAdviceClass(Element adviceElement, ParserContext parserContext) {_		String elementName = parserContext.getDelegate().getLocalName(adviceElement)__		if (BEFORE.equals(elementName)) {_			return AspectJMethodBeforeAdvice.class__		}_		else if (AFTER.equals(elementName)) {_			return AspectJAfterAdvice.class__		}_		else if (AFTER_RETURNING_ELEMENT.equals(elementName)) {_			return AspectJAfterReturningAdvice.class__		}_		else if (AFTER_THROWING_ELEMENT.equals(elementName)) {_			return AspectJAfterThrowingAdvice.class__		}_		else if (AROUND.equals(elementName)) {_			return AspectJAroundAdvice.class__		}_		else {_			throw new IllegalArgumentException("Unknown advice kind [" + elementName + "].")__		}_	};gets,the,advice,implementation,class,corresponding,to,the,supplied,link,element;private,class,get,advice,class,element,advice,element,parser,context,parser,context,string,element,name,parser,context,get,delegate,get,local,name,advice,element,if,before,equals,element,name,return,aspect,jmethod,before,advice,class,else,if,after,equals,element,name,return,aspect,jafter,advice,class,else,if,equals,element,name,return,aspect,jafter,returning,advice,class,else,if,equals,element,name,return,aspect,jafter,throwing,advice,class,else,if,around,equals,element,name,return,aspect,jaround,advice,class,else,throw,new,illegal,argument,exception,unknown,advice,kind,element,name
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdviceDefinition( 			Element adviceElement, ParserContext parserContext, String aspectName, int order, 			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1328020251;Creates the RootBeanDefinition for a POJO advice bean. Also causes pointcut_parsing to occur so that the pointcut may be associate with the advice bean._This same pointcut is also configured as the pointcut for the enclosing_Advisor definition using the supplied MutablePropertyValues.;private AbstractBeanDefinition createAdviceDefinition(_			Element adviceElement, ParserContext parserContext, String aspectName, int order,_			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext))__		adviceDefinition.setSource(parserContext.extractSource(adviceElement))___		adviceDefinition.getPropertyValues().add(ASPECT_NAME_PROPERTY, aspectName)__		adviceDefinition.getPropertyValues().add(DECLARATION_ORDER_PROPERTY, order)___		if (adviceElement.hasAttribute(RETURNING)) {_			adviceDefinition.getPropertyValues().add(_					RETURNING_PROPERTY, adviceElement.getAttribute(RETURNING))__		}_		if (adviceElement.hasAttribute(THROWING)) {_			adviceDefinition.getPropertyValues().add(_					THROWING_PROPERTY, adviceElement.getAttribute(THROWING))__		}_		if (adviceElement.hasAttribute(ARG_NAMES)) {_			adviceDefinition.getPropertyValues().add(_					ARG_NAMES_PROPERTY, adviceElement.getAttribute(ARG_NAMES))__		}__		ConstructorArgumentValues cav = adviceDefinition.getConstructorArgumentValues()__		cav.addIndexedArgumentValue(METHOD_INDEX, methodDef)___		Object pointcut = parsePointcutProperty(adviceElement, parserContext)__		if (pointcut instanceof BeanDefinition) {_			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcut)__			beanDefinitions.add((BeanDefinition) pointcut)__		}_		else if (pointcut instanceof String) {_			RuntimeBeanReference pointcutRef = new RuntimeBeanReference((String) pointcut)__			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcutRef)__			beanReferences.add(pointcutRef)__		}__		cav.addIndexedArgumentValue(ASPECT_INSTANCE_FACTORY_INDEX, aspectFactoryDef)___		return adviceDefinition__	};creates,the,root,bean,definition,for,a,pojo,advice,bean,also,causes,pointcut,parsing,to,occur,so,that,the,pointcut,may,be,associate,with,the,advice,bean,this,same,pointcut,is,also,configured,as,the,pointcut,for,the,enclosing,advisor,definition,using,the,supplied,mutable,property,values;private,abstract,bean,definition,create,advice,definition,element,advice,element,parser,context,parser,context,string,aspect,name,int,order,root,bean,definition,method,def,root,bean,definition,aspect,factory,def,list,bean,definition,bean,definitions,list,bean,reference,bean,references,root,bean,definition,advice,definition,new,root,bean,definition,get,advice,class,advice,element,parser,context,advice,definition,set,source,parser,context,extract,source,advice,element,advice,definition,get,property,values,add,aspect,name,advice,definition,get,property,values,add,order,if,advice,element,has,attribute,returning,advice,definition,get,property,values,add,advice,element,get,attribute,returning,if,advice,element,has,attribute,throwing,advice,definition,get,property,values,add,advice,element,get,attribute,throwing,if,advice,element,has,attribute,advice,definition,get,property,values,add,advice,element,get,attribute,constructor,argument,values,cav,advice,definition,get,constructor,argument,values,cav,add,indexed,argument,value,method,def,object,pointcut,parse,pointcut,property,advice,element,parser,context,if,pointcut,instanceof,bean,definition,cav,add,indexed,argument,value,pointcut,bean,definitions,add,bean,definition,pointcut,else,if,pointcut,instanceof,string,runtime,bean,reference,pointcut,ref,new,runtime,bean,reference,string,pointcut,cav,add,indexed,argument,value,pointcut,ref,bean,references,add,pointcut,ref,cav,add,indexed,argument,value,aspect,factory,def,return,advice,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdviceDefinition( 			Element adviceElement, ParserContext parserContext, String aspectName, int order, 			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1356735495;Creates the RootBeanDefinition for a POJO advice bean. Also causes pointcut_parsing to occur so that the pointcut may be associate with the advice bean._This same pointcut is also configured as the pointcut for the enclosing_Advisor definition using the supplied MutablePropertyValues.;private AbstractBeanDefinition createAdviceDefinition(_			Element adviceElement, ParserContext parserContext, String aspectName, int order,_			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext))__		adviceDefinition.setSource(parserContext.extractSource(adviceElement))___		adviceDefinition.getPropertyValues().add(ASPECT_NAME_PROPERTY, aspectName)__		adviceDefinition.getPropertyValues().add(DECLARATION_ORDER_PROPERTY, order)___		if (adviceElement.hasAttribute(RETURNING)) {_			adviceDefinition.getPropertyValues().add(_					RETURNING_PROPERTY, adviceElement.getAttribute(RETURNING))__		}_		if (adviceElement.hasAttribute(THROWING)) {_			adviceDefinition.getPropertyValues().add(_					THROWING_PROPERTY, adviceElement.getAttribute(THROWING))__		}_		if (adviceElement.hasAttribute(ARG_NAMES)) {_			adviceDefinition.getPropertyValues().add(_					ARG_NAMES_PROPERTY, adviceElement.getAttribute(ARG_NAMES))__		}__		ConstructorArgumentValues cav = adviceDefinition.getConstructorArgumentValues()__		cav.addIndexedArgumentValue(METHOD_INDEX, methodDef)___		Object pointcut = parsePointcutProperty(adviceElement, parserContext)__		if (pointcut instanceof BeanDefinition) {_			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcut)__			beanDefinitions.add((BeanDefinition) pointcut)__		}_		else if (pointcut instanceof String) {_			RuntimeBeanReference pointcutRef = new RuntimeBeanReference((String) pointcut)__			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcutRef)__			beanReferences.add(pointcutRef)__		}__		cav.addIndexedArgumentValue(ASPECT_INSTANCE_FACTORY_INDEX, aspectFactoryDef)___		return adviceDefinition__	};creates,the,root,bean,definition,for,a,pojo,advice,bean,also,causes,pointcut,parsing,to,occur,so,that,the,pointcut,may,be,associate,with,the,advice,bean,this,same,pointcut,is,also,configured,as,the,pointcut,for,the,enclosing,advisor,definition,using,the,supplied,mutable,property,values;private,abstract,bean,definition,create,advice,definition,element,advice,element,parser,context,parser,context,string,aspect,name,int,order,root,bean,definition,method,def,root,bean,definition,aspect,factory,def,list,bean,definition,bean,definitions,list,bean,reference,bean,references,root,bean,definition,advice,definition,new,root,bean,definition,get,advice,class,advice,element,parser,context,advice,definition,set,source,parser,context,extract,source,advice,element,advice,definition,get,property,values,add,aspect,name,advice,definition,get,property,values,add,order,if,advice,element,has,attribute,returning,advice,definition,get,property,values,add,advice,element,get,attribute,returning,if,advice,element,has,attribute,throwing,advice,definition,get,property,values,add,advice,element,get,attribute,throwing,if,advice,element,has,attribute,advice,definition,get,property,values,add,advice,element,get,attribute,constructor,argument,values,cav,advice,definition,get,constructor,argument,values,cav,add,indexed,argument,value,method,def,object,pointcut,parse,pointcut,property,advice,element,parser,context,if,pointcut,instanceof,bean,definition,cav,add,indexed,argument,value,pointcut,bean,definitions,add,bean,definition,pointcut,else,if,pointcut,instanceof,string,runtime,bean,reference,pointcut,ref,new,runtime,bean,reference,string,pointcut,cav,add,indexed,argument,value,pointcut,ref,bean,references,add,pointcut,ref,cav,add,indexed,argument,value,aspect,factory,def,return,advice,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdviceDefinition( 			Element adviceElement, ParserContext parserContext, String aspectName, int order, 			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1357119239;Creates the RootBeanDefinition for a POJO advice bean. Also causes pointcut_parsing to occur so that the pointcut may be associate with the advice bean._This same pointcut is also configured as the pointcut for the enclosing_Advisor definition using the supplied MutablePropertyValues.;private AbstractBeanDefinition createAdviceDefinition(_			Element adviceElement, ParserContext parserContext, String aspectName, int order,_			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext))__		adviceDefinition.setSource(parserContext.extractSource(adviceElement))___		adviceDefinition.getPropertyValues().add(ASPECT_NAME_PROPERTY, aspectName)__		adviceDefinition.getPropertyValues().add(DECLARATION_ORDER_PROPERTY, order)___		if (adviceElement.hasAttribute(RETURNING)) {_			adviceDefinition.getPropertyValues().add(_					RETURNING_PROPERTY, adviceElement.getAttribute(RETURNING))__		}_		if (adviceElement.hasAttribute(THROWING)) {_			adviceDefinition.getPropertyValues().add(_					THROWING_PROPERTY, adviceElement.getAttribute(THROWING))__		}_		if (adviceElement.hasAttribute(ARG_NAMES)) {_			adviceDefinition.getPropertyValues().add(_					ARG_NAMES_PROPERTY, adviceElement.getAttribute(ARG_NAMES))__		}__		ConstructorArgumentValues cav = adviceDefinition.getConstructorArgumentValues()__		cav.addIndexedArgumentValue(METHOD_INDEX, methodDef)___		Object pointcut = parsePointcutProperty(adviceElement, parserContext)__		if (pointcut instanceof BeanDefinition) {_			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcut)__			beanDefinitions.add((BeanDefinition) pointcut)__		}_		else if (pointcut instanceof String) {_			RuntimeBeanReference pointcutRef = new RuntimeBeanReference((String) pointcut)__			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcutRef)__			beanReferences.add(pointcutRef)__		}__		cav.addIndexedArgumentValue(ASPECT_INSTANCE_FACTORY_INDEX, aspectFactoryDef)___		return adviceDefinition__	};creates,the,root,bean,definition,for,a,pojo,advice,bean,also,causes,pointcut,parsing,to,occur,so,that,the,pointcut,may,be,associate,with,the,advice,bean,this,same,pointcut,is,also,configured,as,the,pointcut,for,the,enclosing,advisor,definition,using,the,supplied,mutable,property,values;private,abstract,bean,definition,create,advice,definition,element,advice,element,parser,context,parser,context,string,aspect,name,int,order,root,bean,definition,method,def,root,bean,definition,aspect,factory,def,list,bean,definition,bean,definitions,list,bean,reference,bean,references,root,bean,definition,advice,definition,new,root,bean,definition,get,advice,class,advice,element,parser,context,advice,definition,set,source,parser,context,extract,source,advice,element,advice,definition,get,property,values,add,aspect,name,advice,definition,get,property,values,add,order,if,advice,element,has,attribute,returning,advice,definition,get,property,values,add,advice,element,get,attribute,returning,if,advice,element,has,attribute,throwing,advice,definition,get,property,values,add,advice,element,get,attribute,throwing,if,advice,element,has,attribute,advice,definition,get,property,values,add,advice,element,get,attribute,constructor,argument,values,cav,advice,definition,get,constructor,argument,values,cav,add,indexed,argument,value,method,def,object,pointcut,parse,pointcut,property,advice,element,parser,context,if,pointcut,instanceof,bean,definition,cav,add,indexed,argument,value,pointcut,bean,definitions,add,bean,definition,pointcut,else,if,pointcut,instanceof,string,runtime,bean,reference,pointcut,ref,new,runtime,bean,reference,string,pointcut,cav,add,indexed,argument,value,pointcut,ref,bean,references,add,pointcut,ref,cav,add,indexed,argument,value,aspect,factory,def,return,advice,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdviceDefinition( 			Element adviceElement, ParserContext parserContext, String aspectName, int order, 			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1368482696;Creates the RootBeanDefinition for a POJO advice bean. Also causes pointcut_parsing to occur so that the pointcut may be associate with the advice bean._This same pointcut is also configured as the pointcut for the enclosing_Advisor definition using the supplied MutablePropertyValues.;private AbstractBeanDefinition createAdviceDefinition(_			Element adviceElement, ParserContext parserContext, String aspectName, int order,_			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext))__		adviceDefinition.setSource(parserContext.extractSource(adviceElement))___		adviceDefinition.getPropertyValues().add(ASPECT_NAME_PROPERTY, aspectName)__		adviceDefinition.getPropertyValues().add(DECLARATION_ORDER_PROPERTY, order)___		if (adviceElement.hasAttribute(RETURNING)) {_			adviceDefinition.getPropertyValues().add(_					RETURNING_PROPERTY, adviceElement.getAttribute(RETURNING))__		}_		if (adviceElement.hasAttribute(THROWING)) {_			adviceDefinition.getPropertyValues().add(_					THROWING_PROPERTY, adviceElement.getAttribute(THROWING))__		}_		if (adviceElement.hasAttribute(ARG_NAMES)) {_			adviceDefinition.getPropertyValues().add(_					ARG_NAMES_PROPERTY, adviceElement.getAttribute(ARG_NAMES))__		}__		ConstructorArgumentValues cav = adviceDefinition.getConstructorArgumentValues()__		cav.addIndexedArgumentValue(METHOD_INDEX, methodDef)___		Object pointcut = parsePointcutProperty(adviceElement, parserContext)__		if (pointcut instanceof BeanDefinition) {_			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcut)__			beanDefinitions.add((BeanDefinition) pointcut)__		}_		else if (pointcut instanceof String) {_			RuntimeBeanReference pointcutRef = new RuntimeBeanReference((String) pointcut)__			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcutRef)__			beanReferences.add(pointcutRef)__		}__		cav.addIndexedArgumentValue(ASPECT_INSTANCE_FACTORY_INDEX, aspectFactoryDef)___		return adviceDefinition__	};creates,the,root,bean,definition,for,a,pojo,advice,bean,also,causes,pointcut,parsing,to,occur,so,that,the,pointcut,may,be,associate,with,the,advice,bean,this,same,pointcut,is,also,configured,as,the,pointcut,for,the,enclosing,advisor,definition,using,the,supplied,mutable,property,values;private,abstract,bean,definition,create,advice,definition,element,advice,element,parser,context,parser,context,string,aspect,name,int,order,root,bean,definition,method,def,root,bean,definition,aspect,factory,def,list,bean,definition,bean,definitions,list,bean,reference,bean,references,root,bean,definition,advice,definition,new,root,bean,definition,get,advice,class,advice,element,parser,context,advice,definition,set,source,parser,context,extract,source,advice,element,advice,definition,get,property,values,add,aspect,name,advice,definition,get,property,values,add,order,if,advice,element,has,attribute,returning,advice,definition,get,property,values,add,advice,element,get,attribute,returning,if,advice,element,has,attribute,throwing,advice,definition,get,property,values,add,advice,element,get,attribute,throwing,if,advice,element,has,attribute,advice,definition,get,property,values,add,advice,element,get,attribute,constructor,argument,values,cav,advice,definition,get,constructor,argument,values,cav,add,indexed,argument,value,method,def,object,pointcut,parse,pointcut,property,advice,element,parser,context,if,pointcut,instanceof,bean,definition,cav,add,indexed,argument,value,pointcut,bean,definitions,add,bean,definition,pointcut,else,if,pointcut,instanceof,string,runtime,bean,reference,pointcut,ref,new,runtime,bean,reference,string,pointcut,cav,add,indexed,argument,value,pointcut,ref,bean,references,add,pointcut,ref,cav,add,indexed,argument,value,aspect,factory,def,return,advice,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdviceDefinition( 			Element adviceElement, ParserContext parserContext, String aspectName, int order, 			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1385412762;Creates the RootBeanDefinition for a POJO advice bean. Also causes pointcut_parsing to occur so that the pointcut may be associate with the advice bean._This same pointcut is also configured as the pointcut for the enclosing_Advisor definition using the supplied MutablePropertyValues.;private AbstractBeanDefinition createAdviceDefinition(_			Element adviceElement, ParserContext parserContext, String aspectName, int order,_			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext))__		adviceDefinition.setSource(parserContext.extractSource(adviceElement))___		adviceDefinition.getPropertyValues().add(ASPECT_NAME_PROPERTY, aspectName)__		adviceDefinition.getPropertyValues().add(DECLARATION_ORDER_PROPERTY, order)___		if (adviceElement.hasAttribute(RETURNING)) {_			adviceDefinition.getPropertyValues().add(_					RETURNING_PROPERTY, adviceElement.getAttribute(RETURNING))__		}_		if (adviceElement.hasAttribute(THROWING)) {_			adviceDefinition.getPropertyValues().add(_					THROWING_PROPERTY, adviceElement.getAttribute(THROWING))__		}_		if (adviceElement.hasAttribute(ARG_NAMES)) {_			adviceDefinition.getPropertyValues().add(_					ARG_NAMES_PROPERTY, adviceElement.getAttribute(ARG_NAMES))__		}__		ConstructorArgumentValues cav = adviceDefinition.getConstructorArgumentValues()__		cav.addIndexedArgumentValue(METHOD_INDEX, methodDef)___		Object pointcut = parsePointcutProperty(adviceElement, parserContext)__		if (pointcut instanceof BeanDefinition) {_			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcut)__			beanDefinitions.add((BeanDefinition) pointcut)__		}_		else if (pointcut instanceof String) {_			RuntimeBeanReference pointcutRef = new RuntimeBeanReference((String) pointcut)__			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcutRef)__			beanReferences.add(pointcutRef)__		}__		cav.addIndexedArgumentValue(ASPECT_INSTANCE_FACTORY_INDEX, aspectFactoryDef)___		return adviceDefinition__	};creates,the,root,bean,definition,for,a,pojo,advice,bean,also,causes,pointcut,parsing,to,occur,so,that,the,pointcut,may,be,associate,with,the,advice,bean,this,same,pointcut,is,also,configured,as,the,pointcut,for,the,enclosing,advisor,definition,using,the,supplied,mutable,property,values;private,abstract,bean,definition,create,advice,definition,element,advice,element,parser,context,parser,context,string,aspect,name,int,order,root,bean,definition,method,def,root,bean,definition,aspect,factory,def,list,bean,definition,bean,definitions,list,bean,reference,bean,references,root,bean,definition,advice,definition,new,root,bean,definition,get,advice,class,advice,element,parser,context,advice,definition,set,source,parser,context,extract,source,advice,element,advice,definition,get,property,values,add,aspect,name,advice,definition,get,property,values,add,order,if,advice,element,has,attribute,returning,advice,definition,get,property,values,add,advice,element,get,attribute,returning,if,advice,element,has,attribute,throwing,advice,definition,get,property,values,add,advice,element,get,attribute,throwing,if,advice,element,has,attribute,advice,definition,get,property,values,add,advice,element,get,attribute,constructor,argument,values,cav,advice,definition,get,constructor,argument,values,cav,add,indexed,argument,value,method,def,object,pointcut,parse,pointcut,property,advice,element,parser,context,if,pointcut,instanceof,bean,definition,cav,add,indexed,argument,value,pointcut,bean,definitions,add,bean,definition,pointcut,else,if,pointcut,instanceof,string,runtime,bean,reference,pointcut,ref,new,runtime,bean,reference,string,pointcut,cav,add,indexed,argument,value,pointcut,ref,bean,references,add,pointcut,ref,cav,add,indexed,argument,value,aspect,factory,def,return,advice,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdviceDefinition( 			Element adviceElement, ParserContext parserContext, String aspectName, int order, 			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1447323728;Creates the RootBeanDefinition for a POJO advice bean. Also causes pointcut_parsing to occur so that the pointcut may be associate with the advice bean._This same pointcut is also configured as the pointcut for the enclosing_Advisor definition using the supplied MutablePropertyValues.;private AbstractBeanDefinition createAdviceDefinition(_			Element adviceElement, ParserContext parserContext, String aspectName, int order,_			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext))__		adviceDefinition.setSource(parserContext.extractSource(adviceElement))___		adviceDefinition.getPropertyValues().add(ASPECT_NAME_PROPERTY, aspectName)__		adviceDefinition.getPropertyValues().add(DECLARATION_ORDER_PROPERTY, order)___		if (adviceElement.hasAttribute(RETURNING)) {_			adviceDefinition.getPropertyValues().add(_					RETURNING_PROPERTY, adviceElement.getAttribute(RETURNING))__		}_		if (adviceElement.hasAttribute(THROWING)) {_			adviceDefinition.getPropertyValues().add(_					THROWING_PROPERTY, adviceElement.getAttribute(THROWING))__		}_		if (adviceElement.hasAttribute(ARG_NAMES)) {_			adviceDefinition.getPropertyValues().add(_					ARG_NAMES_PROPERTY, adviceElement.getAttribute(ARG_NAMES))__		}__		ConstructorArgumentValues cav = adviceDefinition.getConstructorArgumentValues()__		cav.addIndexedArgumentValue(METHOD_INDEX, methodDef)___		Object pointcut = parsePointcutProperty(adviceElement, parserContext)__		if (pointcut instanceof BeanDefinition) {_			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcut)__			beanDefinitions.add((BeanDefinition) pointcut)__		}_		else if (pointcut instanceof String) {_			RuntimeBeanReference pointcutRef = new RuntimeBeanReference((String) pointcut)__			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcutRef)__			beanReferences.add(pointcutRef)__		}__		cav.addIndexedArgumentValue(ASPECT_INSTANCE_FACTORY_INDEX, aspectFactoryDef)___		return adviceDefinition__	};creates,the,root,bean,definition,for,a,pojo,advice,bean,also,causes,pointcut,parsing,to,occur,so,that,the,pointcut,may,be,associate,with,the,advice,bean,this,same,pointcut,is,also,configured,as,the,pointcut,for,the,enclosing,advisor,definition,using,the,supplied,mutable,property,values;private,abstract,bean,definition,create,advice,definition,element,advice,element,parser,context,parser,context,string,aspect,name,int,order,root,bean,definition,method,def,root,bean,definition,aspect,factory,def,list,bean,definition,bean,definitions,list,bean,reference,bean,references,root,bean,definition,advice,definition,new,root,bean,definition,get,advice,class,advice,element,parser,context,advice,definition,set,source,parser,context,extract,source,advice,element,advice,definition,get,property,values,add,aspect,name,advice,definition,get,property,values,add,order,if,advice,element,has,attribute,returning,advice,definition,get,property,values,add,advice,element,get,attribute,returning,if,advice,element,has,attribute,throwing,advice,definition,get,property,values,add,advice,element,get,attribute,throwing,if,advice,element,has,attribute,advice,definition,get,property,values,add,advice,element,get,attribute,constructor,argument,values,cav,advice,definition,get,constructor,argument,values,cav,add,indexed,argument,value,method,def,object,pointcut,parse,pointcut,property,advice,element,parser,context,if,pointcut,instanceof,bean,definition,cav,add,indexed,argument,value,pointcut,bean,definitions,add,bean,definition,pointcut,else,if,pointcut,instanceof,string,runtime,bean,reference,pointcut,ref,new,runtime,bean,reference,string,pointcut,cav,add,indexed,argument,value,pointcut,ref,bean,references,add,pointcut,ref,cav,add,indexed,argument,value,aspect,factory,def,return,advice,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdviceDefinition( 			Element adviceElement, ParserContext parserContext, String aspectName, int order, 			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1467730834;Creates the RootBeanDefinition for a POJO advice bean. Also causes pointcut_parsing to occur so that the pointcut may be associate with the advice bean._This same pointcut is also configured as the pointcut for the enclosing_Advisor definition using the supplied MutablePropertyValues.;private AbstractBeanDefinition createAdviceDefinition(_			Element adviceElement, ParserContext parserContext, String aspectName, int order,_			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext))__		adviceDefinition.setSource(parserContext.extractSource(adviceElement))___		adviceDefinition.getPropertyValues().add(ASPECT_NAME_PROPERTY, aspectName)__		adviceDefinition.getPropertyValues().add(DECLARATION_ORDER_PROPERTY, order)___		if (adviceElement.hasAttribute(RETURNING)) {_			adviceDefinition.getPropertyValues().add(_					RETURNING_PROPERTY, adviceElement.getAttribute(RETURNING))__		}_		if (adviceElement.hasAttribute(THROWING)) {_			adviceDefinition.getPropertyValues().add(_					THROWING_PROPERTY, adviceElement.getAttribute(THROWING))__		}_		if (adviceElement.hasAttribute(ARG_NAMES)) {_			adviceDefinition.getPropertyValues().add(_					ARG_NAMES_PROPERTY, adviceElement.getAttribute(ARG_NAMES))__		}__		ConstructorArgumentValues cav = adviceDefinition.getConstructorArgumentValues()__		cav.addIndexedArgumentValue(METHOD_INDEX, methodDef)___		Object pointcut = parsePointcutProperty(adviceElement, parserContext)__		if (pointcut instanceof BeanDefinition) {_			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcut)__			beanDefinitions.add((BeanDefinition) pointcut)__		}_		else if (pointcut instanceof String) {_			RuntimeBeanReference pointcutRef = new RuntimeBeanReference((String) pointcut)__			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcutRef)__			beanReferences.add(pointcutRef)__		}__		cav.addIndexedArgumentValue(ASPECT_INSTANCE_FACTORY_INDEX, aspectFactoryDef)___		return adviceDefinition__	};creates,the,root,bean,definition,for,a,pojo,advice,bean,also,causes,pointcut,parsing,to,occur,so,that,the,pointcut,may,be,associate,with,the,advice,bean,this,same,pointcut,is,also,configured,as,the,pointcut,for,the,enclosing,advisor,definition,using,the,supplied,mutable,property,values;private,abstract,bean,definition,create,advice,definition,element,advice,element,parser,context,parser,context,string,aspect,name,int,order,root,bean,definition,method,def,root,bean,definition,aspect,factory,def,list,bean,definition,bean,definitions,list,bean,reference,bean,references,root,bean,definition,advice,definition,new,root,bean,definition,get,advice,class,advice,element,parser,context,advice,definition,set,source,parser,context,extract,source,advice,element,advice,definition,get,property,values,add,aspect,name,advice,definition,get,property,values,add,order,if,advice,element,has,attribute,returning,advice,definition,get,property,values,add,advice,element,get,attribute,returning,if,advice,element,has,attribute,throwing,advice,definition,get,property,values,add,advice,element,get,attribute,throwing,if,advice,element,has,attribute,advice,definition,get,property,values,add,advice,element,get,attribute,constructor,argument,values,cav,advice,definition,get,constructor,argument,values,cav,add,indexed,argument,value,method,def,object,pointcut,parse,pointcut,property,advice,element,parser,context,if,pointcut,instanceof,bean,definition,cav,add,indexed,argument,value,pointcut,bean,definitions,add,bean,definition,pointcut,else,if,pointcut,instanceof,string,runtime,bean,reference,pointcut,ref,new,runtime,bean,reference,string,pointcut,cav,add,indexed,argument,value,pointcut,ref,bean,references,add,pointcut,ref,cav,add,indexed,argument,value,aspect,factory,def,return,advice,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdviceDefinition( 			Element adviceElement, ParserContext parserContext, String aspectName, int order, 			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1495868221;Creates the RootBeanDefinition for a POJO advice bean. Also causes pointcut_parsing to occur so that the pointcut may be associate with the advice bean._This same pointcut is also configured as the pointcut for the enclosing_Advisor definition using the supplied MutablePropertyValues.;private AbstractBeanDefinition createAdviceDefinition(_			Element adviceElement, ParserContext parserContext, String aspectName, int order,_			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext))__		adviceDefinition.setSource(parserContext.extractSource(adviceElement))___		adviceDefinition.getPropertyValues().add(ASPECT_NAME_PROPERTY, aspectName)__		adviceDefinition.getPropertyValues().add(DECLARATION_ORDER_PROPERTY, order)___		if (adviceElement.hasAttribute(RETURNING)) {_			adviceDefinition.getPropertyValues().add(_					RETURNING_PROPERTY, adviceElement.getAttribute(RETURNING))__		}_		if (adviceElement.hasAttribute(THROWING)) {_			adviceDefinition.getPropertyValues().add(_					THROWING_PROPERTY, adviceElement.getAttribute(THROWING))__		}_		if (adviceElement.hasAttribute(ARG_NAMES)) {_			adviceDefinition.getPropertyValues().add(_					ARG_NAMES_PROPERTY, adviceElement.getAttribute(ARG_NAMES))__		}__		ConstructorArgumentValues cav = adviceDefinition.getConstructorArgumentValues()__		cav.addIndexedArgumentValue(METHOD_INDEX, methodDef)___		Object pointcut = parsePointcutProperty(adviceElement, parserContext)__		if (pointcut instanceof BeanDefinition) {_			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcut)__			beanDefinitions.add((BeanDefinition) pointcut)__		}_		else if (pointcut instanceof String) {_			RuntimeBeanReference pointcutRef = new RuntimeBeanReference((String) pointcut)__			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcutRef)__			beanReferences.add(pointcutRef)__		}__		cav.addIndexedArgumentValue(ASPECT_INSTANCE_FACTORY_INDEX, aspectFactoryDef)___		return adviceDefinition__	};creates,the,root,bean,definition,for,a,pojo,advice,bean,also,causes,pointcut,parsing,to,occur,so,that,the,pointcut,may,be,associate,with,the,advice,bean,this,same,pointcut,is,also,configured,as,the,pointcut,for,the,enclosing,advisor,definition,using,the,supplied,mutable,property,values;private,abstract,bean,definition,create,advice,definition,element,advice,element,parser,context,parser,context,string,aspect,name,int,order,root,bean,definition,method,def,root,bean,definition,aspect,factory,def,list,bean,definition,bean,definitions,list,bean,reference,bean,references,root,bean,definition,advice,definition,new,root,bean,definition,get,advice,class,advice,element,parser,context,advice,definition,set,source,parser,context,extract,source,advice,element,advice,definition,get,property,values,add,aspect,name,advice,definition,get,property,values,add,order,if,advice,element,has,attribute,returning,advice,definition,get,property,values,add,advice,element,get,attribute,returning,if,advice,element,has,attribute,throwing,advice,definition,get,property,values,add,advice,element,get,attribute,throwing,if,advice,element,has,attribute,advice,definition,get,property,values,add,advice,element,get,attribute,constructor,argument,values,cav,advice,definition,get,constructor,argument,values,cav,add,indexed,argument,value,method,def,object,pointcut,parse,pointcut,property,advice,element,parser,context,if,pointcut,instanceof,bean,definition,cav,add,indexed,argument,value,pointcut,bean,definitions,add,bean,definition,pointcut,else,if,pointcut,instanceof,string,runtime,bean,reference,pointcut,ref,new,runtime,bean,reference,string,pointcut,cav,add,indexed,argument,value,pointcut,ref,bean,references,add,pointcut,ref,cav,add,indexed,argument,value,aspect,factory,def,return,advice,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdviceDefinition( 			Element adviceElement, ParserContext parserContext, String aspectName, int order, 			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1502974979;Creates the RootBeanDefinition for a POJO advice bean. Also causes pointcut_parsing to occur so that the pointcut may be associate with the advice bean._This same pointcut is also configured as the pointcut for the enclosing_Advisor definition using the supplied MutablePropertyValues.;private AbstractBeanDefinition createAdviceDefinition(_			Element adviceElement, ParserContext parserContext, String aspectName, int order,_			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext))__		adviceDefinition.setSource(parserContext.extractSource(adviceElement))___		adviceDefinition.getPropertyValues().add(ASPECT_NAME_PROPERTY, aspectName)__		adviceDefinition.getPropertyValues().add(DECLARATION_ORDER_PROPERTY, order)___		if (adviceElement.hasAttribute(RETURNING)) {_			adviceDefinition.getPropertyValues().add(_					RETURNING_PROPERTY, adviceElement.getAttribute(RETURNING))__		}_		if (adviceElement.hasAttribute(THROWING)) {_			adviceDefinition.getPropertyValues().add(_					THROWING_PROPERTY, adviceElement.getAttribute(THROWING))__		}_		if (adviceElement.hasAttribute(ARG_NAMES)) {_			adviceDefinition.getPropertyValues().add(_					ARG_NAMES_PROPERTY, adviceElement.getAttribute(ARG_NAMES))__		}__		ConstructorArgumentValues cav = adviceDefinition.getConstructorArgumentValues()__		cav.addIndexedArgumentValue(METHOD_INDEX, methodDef)___		Object pointcut = parsePointcutProperty(adviceElement, parserContext)__		if (pointcut instanceof BeanDefinition) {_			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcut)__			beanDefinitions.add((BeanDefinition) pointcut)__		}_		else if (pointcut instanceof String) {_			RuntimeBeanReference pointcutRef = new RuntimeBeanReference((String) pointcut)__			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcutRef)__			beanReferences.add(pointcutRef)__		}__		cav.addIndexedArgumentValue(ASPECT_INSTANCE_FACTORY_INDEX, aspectFactoryDef)___		return adviceDefinition__	};creates,the,root,bean,definition,for,a,pojo,advice,bean,also,causes,pointcut,parsing,to,occur,so,that,the,pointcut,may,be,associate,with,the,advice,bean,this,same,pointcut,is,also,configured,as,the,pointcut,for,the,enclosing,advisor,definition,using,the,supplied,mutable,property,values;private,abstract,bean,definition,create,advice,definition,element,advice,element,parser,context,parser,context,string,aspect,name,int,order,root,bean,definition,method,def,root,bean,definition,aspect,factory,def,list,bean,definition,bean,definitions,list,bean,reference,bean,references,root,bean,definition,advice,definition,new,root,bean,definition,get,advice,class,advice,element,parser,context,advice,definition,set,source,parser,context,extract,source,advice,element,advice,definition,get,property,values,add,aspect,name,advice,definition,get,property,values,add,order,if,advice,element,has,attribute,returning,advice,definition,get,property,values,add,advice,element,get,attribute,returning,if,advice,element,has,attribute,throwing,advice,definition,get,property,values,add,advice,element,get,attribute,throwing,if,advice,element,has,attribute,advice,definition,get,property,values,add,advice,element,get,attribute,constructor,argument,values,cav,advice,definition,get,constructor,argument,values,cav,add,indexed,argument,value,method,def,object,pointcut,parse,pointcut,property,advice,element,parser,context,if,pointcut,instanceof,bean,definition,cav,add,indexed,argument,value,pointcut,bean,definitions,add,bean,definition,pointcut,else,if,pointcut,instanceof,string,runtime,bean,reference,pointcut,ref,new,runtime,bean,reference,string,pointcut,cav,add,indexed,argument,value,pointcut,ref,bean,references,add,pointcut,ref,cav,add,indexed,argument,value,aspect,factory,def,return,advice,definition
ConfigBeanDefinitionParser -> private AbstractBeanDefinition createAdviceDefinition( 			Element adviceElement, ParserContext parserContext, String aspectName, int order, 			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef, 			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences);1519295386;Creates the RootBeanDefinition for a POJO advice bean. Also causes pointcut_parsing to occur so that the pointcut may be associate with the advice bean._This same pointcut is also configured as the pointcut for the enclosing_Advisor definition using the supplied MutablePropertyValues.;private AbstractBeanDefinition createAdviceDefinition(_			Element adviceElement, ParserContext parserContext, String aspectName, int order,_			RootBeanDefinition methodDef, RootBeanDefinition aspectFactoryDef,_			List<BeanDefinition> beanDefinitions, List<BeanReference> beanReferences) {__		RootBeanDefinition adviceDefinition = new RootBeanDefinition(getAdviceClass(adviceElement, parserContext))__		adviceDefinition.setSource(parserContext.extractSource(adviceElement))___		adviceDefinition.getPropertyValues().add(ASPECT_NAME_PROPERTY, aspectName)__		adviceDefinition.getPropertyValues().add(DECLARATION_ORDER_PROPERTY, order)___		if (adviceElement.hasAttribute(RETURNING)) {_			adviceDefinition.getPropertyValues().add(_					RETURNING_PROPERTY, adviceElement.getAttribute(RETURNING))__		}_		if (adviceElement.hasAttribute(THROWING)) {_			adviceDefinition.getPropertyValues().add(_					THROWING_PROPERTY, adviceElement.getAttribute(THROWING))__		}_		if (adviceElement.hasAttribute(ARG_NAMES)) {_			adviceDefinition.getPropertyValues().add(_					ARG_NAMES_PROPERTY, adviceElement.getAttribute(ARG_NAMES))__		}__		ConstructorArgumentValues cav = adviceDefinition.getConstructorArgumentValues()__		cav.addIndexedArgumentValue(METHOD_INDEX, methodDef)___		Object pointcut = parsePointcutProperty(adviceElement, parserContext)__		if (pointcut instanceof BeanDefinition) {_			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcut)__			beanDefinitions.add((BeanDefinition) pointcut)__		}_		else if (pointcut instanceof String) {_			RuntimeBeanReference pointcutRef = new RuntimeBeanReference((String) pointcut)__			cav.addIndexedArgumentValue(POINTCUT_INDEX, pointcutRef)__			beanReferences.add(pointcutRef)__		}__		cav.addIndexedArgumentValue(ASPECT_INSTANCE_FACTORY_INDEX, aspectFactoryDef)___		return adviceDefinition__	};creates,the,root,bean,definition,for,a,pojo,advice,bean,also,causes,pointcut,parsing,to,occur,so,that,the,pointcut,may,be,associate,with,the,advice,bean,this,same,pointcut,is,also,configured,as,the,pointcut,for,the,enclosing,advisor,definition,using,the,supplied,mutable,property,values;private,abstract,bean,definition,create,advice,definition,element,advice,element,parser,context,parser,context,string,aspect,name,int,order,root,bean,definition,method,def,root,bean,definition,aspect,factory,def,list,bean,definition,bean,definitions,list,bean,reference,bean,references,root,bean,definition,advice,definition,new,root,bean,definition,get,advice,class,advice,element,parser,context,advice,definition,set,source,parser,context,extract,source,advice,element,advice,definition,get,property,values,add,aspect,name,advice,definition,get,property,values,add,order,if,advice,element,has,attribute,returning,advice,definition,get,property,values,add,advice,element,get,attribute,returning,if,advice,element,has,attribute,throwing,advice,definition,get,property,values,add,advice,element,get,attribute,throwing,if,advice,element,has,attribute,advice,definition,get,property,values,add,advice,element,get,attribute,constructor,argument,values,cav,advice,definition,get,constructor,argument,values,cav,add,indexed,argument,value,method,def,object,pointcut,parse,pointcut,property,advice,element,parser,context,if,pointcut,instanceof,bean,definition,cav,add,indexed,argument,value,pointcut,bean,definitions,add,bean,definition,pointcut,else,if,pointcut,instanceof,string,runtime,bean,reference,pointcut,ref,new,runtime,bean,reference,string,pointcut,cav,add,indexed,argument,value,pointcut,ref,bean,references,add,pointcut,ref,cav,add,indexed,argument,value,aspect,factory,def,return,advice,definition
