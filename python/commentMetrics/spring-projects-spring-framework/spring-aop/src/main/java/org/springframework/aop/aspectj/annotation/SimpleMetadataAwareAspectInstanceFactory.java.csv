# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleMetadataAwareAspectInstanceFactory -> @Override 	protected int getOrderForAspectClass(Class<?> aspectClass);1328020251;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns <code>Ordered.LOWEST_PRECEDENCE</code>._@param aspectClass the aspect class;@Override_	protected int getOrderForAspectClass(Class<?> aspectClass) {_		Order order = aspectClass.getAnnotation(Order.class)__		if (order != null) {_			return order.value()__		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,code,param,aspect,class,the,aspect,class;override,protected,int,get,order,for,aspect,class,class,aspect,class,order,order,aspect,class,get,annotation,order,class,if,order,null,return,order,value,return,ordered
SimpleMetadataAwareAspectInstanceFactory -> @Override 	protected int getOrderForAspectClass(Class<?> aspectClass);1356735495;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;@Override_	protected int getOrderForAspectClass(Class<?> aspectClass) {_		Order order = aspectClass.getAnnotation(Order.class)__		if (order != null) {_			return order.value()__		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;override,protected,int,get,order,for,aspect,class,class,aspect,class,order,order,aspect,class,get,annotation,order,class,if,order,null,return,order,value,return,ordered
SimpleMetadataAwareAspectInstanceFactory -> @Override 	protected int getOrderForAspectClass(Class<?> aspectClass);1357119239;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;@Override_	protected int getOrderForAspectClass(Class<?> aspectClass) {_		Order order = aspectClass.getAnnotation(Order.class)__		if (order != null) {_			return order.value()__		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;override,protected,int,get,order,for,aspect,class,class,aspect,class,order,order,aspect,class,get,annotation,order,class,if,order,null,return,order,value,return,ordered
SimpleMetadataAwareAspectInstanceFactory -> @Override 	protected int getOrderForAspectClass(Class<?> aspectClass);1368482696;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;@Override_	protected int getOrderForAspectClass(Class<?> aspectClass) {_		Order order = aspectClass.getAnnotation(Order.class)__		if (order != null) {_			return order.value()__		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;override,protected,int,get,order,for,aspect,class,class,aspect,class,order,order,aspect,class,get,annotation,order,class,if,order,null,return,order,value,return,ordered
SimpleMetadataAwareAspectInstanceFactory -> @Override 	protected int getOrderForAspectClass(Class<?> aspectClass);1368720356;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;@Override_	protected int getOrderForAspectClass(Class<?> aspectClass) {_		Order order = AnnotationUtils.findAnnotation(aspectClass, Order.class)__		if (order != null) {_			return order.value()__		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;override,protected,int,get,order,for,aspect,class,class,aspect,class,order,order,annotation,utils,find,annotation,aspect,class,order,class,if,order,null,return,order,value,return,ordered
SimpleMetadataAwareAspectInstanceFactory -> @Override 	protected int getOrderForAspectClass(Class<?> aspectClass);1385412762;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;@Override_	protected int getOrderForAspectClass(Class<?> aspectClass) {_		Order order = AnnotationUtils.findAnnotation(aspectClass, Order.class)__		if (order != null) {_			return order.value()__		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;override,protected,int,get,order,for,aspect,class,class,aspect,class,order,order,annotation,utils,find,annotation,aspect,class,order,class,if,order,null,return,order,value,return,ordered
SimpleMetadataAwareAspectInstanceFactory -> public SimpleMetadataAwareAspectInstanceFactory(Class<?> aspectClass, String aspectName);1385412762;Create a new SimpleMetadataAwareAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class_@param aspectName the aspect name;public SimpleMetadataAwareAspectInstanceFactory(Class<?> aspectClass, String aspectName) {_		super(aspectClass)__		this.metadata = new AspectMetadata(aspectClass, aspectName)__	};create,a,new,simple,metadata,aware,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class,param,aspect,name,the,aspect,name;public,simple,metadata,aware,aspect,instance,factory,class,aspect,class,string,aspect,name,super,aspect,class,this,metadata,new,aspect,metadata,aspect,class,aspect,name
SimpleMetadataAwareAspectInstanceFactory -> public SimpleMetadataAwareAspectInstanceFactory(Class<?> aspectClass, String aspectName);1396355447;Create a new SimpleMetadataAwareAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class_@param aspectName the aspect name;public SimpleMetadataAwareAspectInstanceFactory(Class<?> aspectClass, String aspectName) {_		super(aspectClass)__		this.metadata = new AspectMetadata(aspectClass, aspectName)__	};create,a,new,simple,metadata,aware,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class,param,aspect,name,the,aspect,name;public,simple,metadata,aware,aspect,instance,factory,class,aspect,class,string,aspect,name,super,aspect,class,this,metadata,new,aspect,metadata,aspect,class,aspect,name
SimpleMetadataAwareAspectInstanceFactory -> public SimpleMetadataAwareAspectInstanceFactory(Class<?> aspectClass, String aspectName);1462345408;Create a new SimpleMetadataAwareAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class_@param aspectName the aspect name;public SimpleMetadataAwareAspectInstanceFactory(Class<?> aspectClass, String aspectName) {_		super(aspectClass)__		this.metadata = new AspectMetadata(aspectClass, aspectName)__	};create,a,new,simple,metadata,aware,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class,param,aspect,name,the,aspect,name;public,simple,metadata,aware,aspect,instance,factory,class,aspect,class,string,aspect,name,super,aspect,class,this,metadata,new,aspect,metadata,aspect,class,aspect,name
SimpleMetadataAwareAspectInstanceFactory -> public SimpleMetadataAwareAspectInstanceFactory(Class aspectClass, String aspectName);1328020251;Create a new SimpleMetadataAwareAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class_@param aspectName the aspect name;public SimpleMetadataAwareAspectInstanceFactory(Class aspectClass, String aspectName) {_		super(aspectClass)__		this.metadata = new AspectMetadata(aspectClass, aspectName)__	};create,a,new,simple,metadata,aware,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class,param,aspect,name,the,aspect,name;public,simple,metadata,aware,aspect,instance,factory,class,aspect,class,string,aspect,name,super,aspect,class,this,metadata,new,aspect,metadata,aspect,class,aspect,name
SimpleMetadataAwareAspectInstanceFactory -> public SimpleMetadataAwareAspectInstanceFactory(Class aspectClass, String aspectName);1356735495;Create a new SimpleMetadataAwareAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class_@param aspectName the aspect name;public SimpleMetadataAwareAspectInstanceFactory(Class aspectClass, String aspectName) {_		super(aspectClass)__		this.metadata = new AspectMetadata(aspectClass, aspectName)__	};create,a,new,simple,metadata,aware,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class,param,aspect,name,the,aspect,name;public,simple,metadata,aware,aspect,instance,factory,class,aspect,class,string,aspect,name,super,aspect,class,this,metadata,new,aspect,metadata,aspect,class,aspect,name
SimpleMetadataAwareAspectInstanceFactory -> public SimpleMetadataAwareAspectInstanceFactory(Class aspectClass, String aspectName);1357119239;Create a new SimpleMetadataAwareAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class_@param aspectName the aspect name;public SimpleMetadataAwareAspectInstanceFactory(Class aspectClass, String aspectName) {_		super(aspectClass)__		this.metadata = new AspectMetadata(aspectClass, aspectName)__	};create,a,new,simple,metadata,aware,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class,param,aspect,name,the,aspect,name;public,simple,metadata,aware,aspect,instance,factory,class,aspect,class,string,aspect,name,super,aspect,class,this,metadata,new,aspect,metadata,aspect,class,aspect,name
SimpleMetadataAwareAspectInstanceFactory -> public SimpleMetadataAwareAspectInstanceFactory(Class aspectClass, String aspectName);1368482696;Create a new SimpleMetadataAwareAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class_@param aspectName the aspect name;public SimpleMetadataAwareAspectInstanceFactory(Class aspectClass, String aspectName) {_		super(aspectClass)__		this.metadata = new AspectMetadata(aspectClass, aspectName)__	};create,a,new,simple,metadata,aware,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class,param,aspect,name,the,aspect,name;public,simple,metadata,aware,aspect,instance,factory,class,aspect,class,string,aspect,name,super,aspect,class,this,metadata,new,aspect,metadata,aspect,class,aspect,name
SimpleMetadataAwareAspectInstanceFactory -> public SimpleMetadataAwareAspectInstanceFactory(Class aspectClass, String aspectName);1368720356;Create a new SimpleMetadataAwareAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class_@param aspectName the aspect name;public SimpleMetadataAwareAspectInstanceFactory(Class aspectClass, String aspectName) {_		super(aspectClass)__		this.metadata = new AspectMetadata(aspectClass, aspectName)__	};create,a,new,simple,metadata,aware,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class,param,aspect,name,the,aspect,name;public,simple,metadata,aware,aspect,instance,factory,class,aspect,class,string,aspect,name,super,aspect,class,this,metadata,new,aspect,metadata,aspect,class,aspect,name
