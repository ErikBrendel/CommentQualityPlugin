# id;timestamp;commentText;codeText;commentWords;codeWords
AspectJExpressionPointcut -> private void checkReadyToMatch();1328020251;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutExpression = buildPointcutExpression()__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,expression,build,pointcut,expression
AspectJExpressionPointcut -> private void checkReadyToMatch();1356735495;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutExpression = buildPointcutExpression()__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,expression,build,pointcut,expression
AspectJExpressionPointcut -> private void checkReadyToMatch();1357119239;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutExpression = buildPointcutExpression()__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,expression,build,pointcut,expression
AspectJExpressionPointcut -> private void checkReadyToMatch();1362408075;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutExpression = buildPointcutExpression()__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,expression,build,pointcut,expression
AspectJExpressionPointcut -> private void checkReadyToMatch();1368482696;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutExpression = buildPointcutExpression()__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,expression,build,pointcut,expression
AspectJExpressionPointcut -> private void checkReadyToMatch();1385412762;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutExpression = buildPointcutExpression()__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,expression,build,pointcut,expression
AspectJExpressionPointcut -> private void checkReadyToMatch();1390432003;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutExpression = buildPointcutExpression()__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,expression,build,pointcut,expression
AspectJExpressionPointcut -> private void checkReadyToMatch();1398714576;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_					((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() :_					ClassUtils.getDefaultClassLoader())__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,class,utils,get,default,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader
AspectJExpressionPointcut -> private void checkReadyToMatch();1431022697;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_					((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() :_					ClassUtils.getDefaultClassLoader())__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,class,utils,get,default,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader
AspectJExpressionPointcut -> private void checkReadyToMatch();1434026659;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_					((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() :_					ClassUtils.getDefaultClassLoader())__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,class,utils,get,default,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader
AspectJExpressionPointcut -> private void checkReadyToMatch();1450827071;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_					((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() :_					ClassUtils.getDefaultClassLoader())__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,class,utils,get,default,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader
AspectJExpressionPointcut -> private void checkReadyToMatch();1467730834;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_					((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() :_					ClassUtils.getDefaultClassLoader())__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,class,utils,get,default,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader
AspectJExpressionPointcut -> private void checkReadyToMatch();1471387421;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_					((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() :_					ClassUtils.getDefaultClassLoader())__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,class,utils,get,default,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader
AspectJExpressionPointcut -> private void checkReadyToMatch();1481749573;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_					((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() :_					ClassUtils.getDefaultClassLoader())__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,class,utils,get,default,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader
AspectJExpressionPointcut -> private void checkReadyToMatch();1482232671;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?_					((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() :_					ClassUtils.getDefaultClassLoader())__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,class,utils,get,default,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader
AspectJExpressionPointcut -> private void checkReadyToMatch();1482422404;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = determinePointcutClassLoader()__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,determine,pointcut,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader
AspectJExpressionPointcut -> private void checkReadyToMatch();1495868221;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = determinePointcutClassLoader()__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,determine,pointcut,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader
AspectJExpressionPointcut -> private void checkReadyToMatch();1496242568;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = determinePointcutClassLoader()__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,determine,pointcut,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader
AspectJExpressionPointcut -> private void checkReadyToMatch();1496837955;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private void checkReadyToMatch() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = determinePointcutClassLoader()__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,void,check,ready,to,match,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,determine,pointcut,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader);1496837955;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, classLoader)__		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,nullable,class,loader,class,loader,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,class,loader,parser,register,pointcut,designator,handler,new,bean,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader);1498780456;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, classLoader)__		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,nullable,class,loader,class,loader,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,class,loader,parser,register,pointcut,designator,handler,new,bean,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader);1523711405;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, classLoader)__		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,nullable,class,loader,class,loader,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,class,loader,parser,register,pointcut,designator,handler,new,bean,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader);1524846214;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, classLoader)__		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,nullable,class,loader,class,loader,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,class,loader,parser,register,pointcut,designator,handler,new,bean,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader);1526424231;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, classLoader)__		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,nullable,class,loader,class,loader,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,class,loader,parser,register,pointcut,designator,handler,new,bean,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader);1530174524;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, classLoader)__		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,nullable,class,loader,class,loader,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,class,loader,parser,register,pointcut,designator,handler,new,bean,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader);1532038651;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, classLoader)__		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,nullable,class,loader,class,loader,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,class,loader,parser,register,pointcut,designator,handler,new,bean,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader);1532291328;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, classLoader)__		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,nullable,class,loader,class,loader,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,class,loader,parser,register,pointcut,designator,handler,new,bean,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader);1496837955;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(resolveExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,nullable,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,resolve,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader);1498780456;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(resolveExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,nullable,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,resolve,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader);1523711405;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(resolveExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,nullable,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,resolve,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader);1524846214;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(resolveExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,nullable,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,resolve,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader);1526424231;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(resolveExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,nullable,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,resolve,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader);1530174524;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(resolveExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,nullable,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,resolve,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader);1532038651;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(resolveExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,nullable,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,resolve,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader);1532291328;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(@Nullable ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(resolveExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,nullable,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,resolve,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader classLoader);1482422404;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader classLoader) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, classLoader)__		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,class,loader,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,class,loader,parser,register,pointcut,designator,handler,new,bean,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader classLoader);1495868221;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader classLoader) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, classLoader)__		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,class,loader,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,class,loader,parser,register,pointcut,designator,handler,new,bean,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader classLoader);1496242568;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader classLoader) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, classLoader)__		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,class,loader,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,class,loader,parser,register,pointcut,designator,handler,new,bean,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1328020251;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1356735495;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1357119239;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1362408075;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1368482696;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1385412762;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1390432003;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1398714576;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1431022697;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1434026659;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1450827071;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1467730834;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1471387421;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1481749573;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1482232671;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1482422404;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1495868221;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1496242568;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1496837955;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		checkReadyToMatch()__		return this.pointcutExpression__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,check,ready,to,match,return,this,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1498780456;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		return obtainPointcutExpression()__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,return,obtain,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1523711405;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		return obtainPointcutExpression()__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,return,obtain,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1524846214;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		return obtainPointcutExpression()__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,return,obtain,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1526424231;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		return obtainPointcutExpression()__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,return,obtain,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1530174524;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		return obtainPointcutExpression()__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,return,obtain,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1532038651;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		return obtainPointcutExpression()__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,return,obtain,pointcut,expression
AspectJExpressionPointcut -> public PointcutExpression getPointcutExpression();1532291328;Return the underlying AspectJ pointcut expression.;public PointcutExpression getPointcutExpression() {_		return obtainPointcutExpression()__	};return,the,underlying,aspect,j,pointcut,expression;public,pointcut,expression,get,pointcut,expression,return,obtain,pointcut,expression
AspectJExpressionPointcut -> @Nullable 	private ClassLoader determinePointcutClassLoader();1496837955;Determine the ClassLoader to use for pointcut evaluation.;@Nullable_	private ClassLoader determinePointcutClassLoader() {_		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader()__		}_		if (this.pointcutDeclarationScope != null) {_			return this.pointcutDeclarationScope.getClassLoader()__		}_		return ClassUtils.getDefaultClassLoader()__	};determine,the,class,loader,to,use,for,pointcut,evaluation;nullable,private,class,loader,determine,pointcut,class,loader,if,this,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,this,bean,factory,get,bean,class,loader,if,this,pointcut,declaration,scope,null,return,this,pointcut,declaration,scope,get,class,loader,return,class,utils,get,default,class,loader
AspectJExpressionPointcut -> @Nullable 	private ClassLoader determinePointcutClassLoader();1498780456;Determine the ClassLoader to use for pointcut evaluation.;@Nullable_	private ClassLoader determinePointcutClassLoader() {_		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader()__		}_		if (this.pointcutDeclarationScope != null) {_			return this.pointcutDeclarationScope.getClassLoader()__		}_		return ClassUtils.getDefaultClassLoader()__	};determine,the,class,loader,to,use,for,pointcut,evaluation;nullable,private,class,loader,determine,pointcut,class,loader,if,this,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,this,bean,factory,get,bean,class,loader,if,this,pointcut,declaration,scope,null,return,this,pointcut,declaration,scope,get,class,loader,return,class,utils,get,default,class,loader
AspectJExpressionPointcut -> @Nullable 	private ClassLoader determinePointcutClassLoader();1523711405;Determine the ClassLoader to use for pointcut evaluation.;@Nullable_	private ClassLoader determinePointcutClassLoader() {_		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader()__		}_		if (this.pointcutDeclarationScope != null) {_			return this.pointcutDeclarationScope.getClassLoader()__		}_		return ClassUtils.getDefaultClassLoader()__	};determine,the,class,loader,to,use,for,pointcut,evaluation;nullable,private,class,loader,determine,pointcut,class,loader,if,this,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,this,bean,factory,get,bean,class,loader,if,this,pointcut,declaration,scope,null,return,this,pointcut,declaration,scope,get,class,loader,return,class,utils,get,default,class,loader
AspectJExpressionPointcut -> @Nullable 	private ClassLoader determinePointcutClassLoader();1524846214;Determine the ClassLoader to use for pointcut evaluation.;@Nullable_	private ClassLoader determinePointcutClassLoader() {_		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader()__		}_		if (this.pointcutDeclarationScope != null) {_			return this.pointcutDeclarationScope.getClassLoader()__		}_		return ClassUtils.getDefaultClassLoader()__	};determine,the,class,loader,to,use,for,pointcut,evaluation;nullable,private,class,loader,determine,pointcut,class,loader,if,this,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,this,bean,factory,get,bean,class,loader,if,this,pointcut,declaration,scope,null,return,this,pointcut,declaration,scope,get,class,loader,return,class,utils,get,default,class,loader
AspectJExpressionPointcut -> @Nullable 	private ClassLoader determinePointcutClassLoader();1526424231;Determine the ClassLoader to use for pointcut evaluation.;@Nullable_	private ClassLoader determinePointcutClassLoader() {_		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader()__		}_		if (this.pointcutDeclarationScope != null) {_			return this.pointcutDeclarationScope.getClassLoader()__		}_		return ClassUtils.getDefaultClassLoader()__	};determine,the,class,loader,to,use,for,pointcut,evaluation;nullable,private,class,loader,determine,pointcut,class,loader,if,this,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,this,bean,factory,get,bean,class,loader,if,this,pointcut,declaration,scope,null,return,this,pointcut,declaration,scope,get,class,loader,return,class,utils,get,default,class,loader
AspectJExpressionPointcut -> @Nullable 	private ClassLoader determinePointcutClassLoader();1530174524;Determine the ClassLoader to use for pointcut evaluation.;@Nullable_	private ClassLoader determinePointcutClassLoader() {_		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader()__		}_		if (this.pointcutDeclarationScope != null) {_			return this.pointcutDeclarationScope.getClassLoader()__		}_		return ClassUtils.getDefaultClassLoader()__	};determine,the,class,loader,to,use,for,pointcut,evaluation;nullable,private,class,loader,determine,pointcut,class,loader,if,this,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,this,bean,factory,get,bean,class,loader,if,this,pointcut,declaration,scope,null,return,this,pointcut,declaration,scope,get,class,loader,return,class,utils,get,default,class,loader
AspectJExpressionPointcut -> @Nullable 	private ClassLoader determinePointcutClassLoader();1532038651;Determine the ClassLoader to use for pointcut evaluation.;@Nullable_	private ClassLoader determinePointcutClassLoader() {_		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader()__		}_		if (this.pointcutDeclarationScope != null) {_			return this.pointcutDeclarationScope.getClassLoader()__		}_		return ClassUtils.getDefaultClassLoader()__	};determine,the,class,loader,to,use,for,pointcut,evaluation;nullable,private,class,loader,determine,pointcut,class,loader,if,this,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,this,bean,factory,get,bean,class,loader,if,this,pointcut,declaration,scope,null,return,this,pointcut,declaration,scope,get,class,loader,return,class,utils,get,default,class,loader
AspectJExpressionPointcut -> @Nullable 	private ClassLoader determinePointcutClassLoader();1532291328;Determine the ClassLoader to use for pointcut evaluation.;@Nullable_	private ClassLoader determinePointcutClassLoader() {_		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader()__		}_		if (this.pointcutDeclarationScope != null) {_			return this.pointcutDeclarationScope.getClassLoader()__		}_		return ClassUtils.getDefaultClassLoader()__	};determine,the,class,loader,to,use,for,pointcut,evaluation;nullable,private,class,loader,determine,pointcut,class,loader,if,this,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,this,bean,factory,get,bean,class,loader,if,this,pointcut,declaration,scope,null,return,this,pointcut,declaration,scope,get,class,loader,return,class,utils,get,default,class,loader
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1390432003;Get a new pointcut expression based on a target class's loader, rather_than the default.;private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		ClassLoader classLoader = targetClass.getClassLoader()__		return (classLoader != null ? buildPointcutExpression(classLoader) : this.pointcutExpression)__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,class,loader,class,loader,target,class,get,class,loader,return,class,loader,null,build,pointcut,expression,class,loader,this,pointcut,expression
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1398714576;Get a new pointcut expression based on a target class's loader rather than the default.;private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1431022697;Get a new pointcut expression based on a target class's loader rather than the default.;private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1434026659;Get a new pointcut expression based on a target class's loader rather than the default.;private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1450827071;Get a new pointcut expression based on a target class's loader rather than the default.;private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1467730834;Get a new pointcut expression based on a target class's loader rather than the default.;private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1471387421;Get a new pointcut expression based on a target class's loader rather than the default.;private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1481749573;Get a new pointcut expression based on a target class's loader rather than the default.;private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1482232671;Get a new pointcut expression based on a target class's loader rather than the default.;private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1482422404;Get a new pointcut expression based on a target class's loader rather than the default.;private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1328020251;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i],_					this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(_				replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1356735495;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i],_					this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(_				replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1357119239;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i],_					this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(_				replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1362408075;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i],_					this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(_				replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1368482696;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i],_					this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(_				replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1385412762;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i],_					this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(_				replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1390432003;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(_				replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1398714576;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(_				replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1431022697;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1434026659;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1450827071;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1467730834;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1471387421;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1481749573;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1482232671;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1482422404;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1495868221;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression(ClassLoader classLoader);1496242568;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression(ClassLoader classLoader) {_		PointcutParser parser = initializePointcutParser(classLoader)__		PointcutParameter[] pointcutParameters = new PointcutParameter[this.pointcutParameterNames.length]__		for (int i = 0_ i < pointcutParameters.length_ i++) {_			pointcutParameters[i] = parser.createPointcutParameter(_					this.pointcutParameterNames[i], this.pointcutParameterTypes[i])__		}_		return parser.parsePointcutExpression(replaceBooleanOperators(getExpression()),_				this.pointcutDeclarationScope, pointcutParameters)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,class,loader,pointcut,parser,parser,initialize,pointcut,parser,class,loader,pointcut,parameter,pointcut,parameters,new,pointcut,parameter,this,pointcut,parameter,names,length,for,int,i,0,i,pointcut,parameters,length,i,pointcut,parameters,i,parser,create,pointcut,parameter,this,pointcut,parameter,names,i,this,pointcut,parameter,types,i,return,parser,parse,pointcut,expression,replace,boolean,operators,get,expression,this,pointcut,declaration,scope,pointcut,parameters
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class declarationScope, String[] paramNames, Class[] paramTypes);1328020251;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class declarationScope, String[] paramNames, Class[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class declarationScope, String[] paramNames, Class[] paramTypes);1356735495;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class declarationScope, String[] paramNames, Class[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class declarationScope, String[] paramNames, Class[] paramTypes);1357119239;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class declarationScope, String[] paramNames, Class[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class declarationScope, String[] paramNames, Class[] paramTypes);1362408075;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class declarationScope, String[] paramNames, Class[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class declarationScope, String[] paramNames, Class[] paramTypes);1368482696;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class declarationScope, String[] paramNames, Class[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1385412762;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1390432003;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1398714576;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1431022697;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1434026659;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1450827071;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1467730834;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1471387421;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1481749573;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1482232671;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1482422404;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1495868221;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1496242568;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1496837955;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1498780456;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1523711405;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1524846214;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1526424231;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1530174524;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1532038651;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes);1532291328;Create a new AspectJExpressionPointcut with the given settings._@param declarationScope the declaration scope for the pointcut_@param paramNames the parameter names for the pointcut_@param paramTypes the parameter types for the pointcut;public AspectJExpressionPointcut(Class<?> declarationScope, String[] paramNames, Class<?>[] paramTypes) {_		this.pointcutDeclarationScope = declarationScope__		if (paramNames.length != paramTypes.length) {_			throw new IllegalStateException(_					"Number of pointcut parameter names must match number of pointcut parameter types")__		}_		this.pointcutParameterNames = paramNames__		this.pointcutParameterTypes = paramTypes__	};create,a,new,aspect,jexpression,pointcut,with,the,given,settings,param,declaration,scope,the,declaration,scope,for,the,pointcut,param,param,names,the,parameter,names,for,the,pointcut,param,param,types,the,parameter,types,for,the,pointcut;public,aspect,jexpression,pointcut,class,declaration,scope,string,param,names,class,param,types,this,pointcut,declaration,scope,declaration,scope,if,param,names,length,param,types,length,throw,new,illegal,state,exception,number,of,pointcut,parameter,names,must,match,number,of,pointcut,parameter,types,this,pointcut,parameter,names,param,names,this,pointcut,parameter,types,param,types
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression();1328020251;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression() {_		ClassLoader cl = (this.beanFactory instanceof ConfigurableBeanFactory ? ((ConfigurableBeanFactory) this.beanFactory)_				.getBeanClassLoader() : Thread.currentThread()_				.getContextClassLoader())__		return buildPointcutExpression(cl)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,cl,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,thread,current,thread,get,context,class,loader,return,build,pointcut,expression,cl
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression();1356735495;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression() {_		ClassLoader cl = (this.beanFactory instanceof ConfigurableBeanFactory ? ((ConfigurableBeanFactory) this.beanFactory)_				.getBeanClassLoader() : Thread.currentThread()_				.getContextClassLoader())__		return buildPointcutExpression(cl)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,cl,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,thread,current,thread,get,context,class,loader,return,build,pointcut,expression,cl
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression();1357119239;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression() {_		ClassLoader cl = (this.beanFactory instanceof ConfigurableBeanFactory ? ((ConfigurableBeanFactory) this.beanFactory)_				.getBeanClassLoader() : Thread.currentThread()_				.getContextClassLoader())__		return buildPointcutExpression(cl)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,cl,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,thread,current,thread,get,context,class,loader,return,build,pointcut,expression,cl
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression();1362408075;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression() {_		ClassLoader cl = (this.beanFactory instanceof ConfigurableBeanFactory ? ((ConfigurableBeanFactory) this.beanFactory)_				.getBeanClassLoader() : Thread.currentThread()_				.getContextClassLoader())__		return buildPointcutExpression(cl)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,cl,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,thread,current,thread,get,context,class,loader,return,build,pointcut,expression,cl
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression();1368482696;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression() {_		ClassLoader cl = (this.beanFactory instanceof ConfigurableBeanFactory ? ((ConfigurableBeanFactory) this.beanFactory)_				.getBeanClassLoader() : Thread.currentThread()_				.getContextClassLoader())__		return buildPointcutExpression(cl)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,cl,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,thread,current,thread,get,context,class,loader,return,build,pointcut,expression,cl
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression();1385412762;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression() {_		ClassLoader cl = (this.beanFactory instanceof ConfigurableBeanFactory ? ((ConfigurableBeanFactory) this.beanFactory)_				.getBeanClassLoader() : Thread.currentThread()_				.getContextClassLoader())__		return buildPointcutExpression(cl)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,cl,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,thread,current,thread,get,context,class,loader,return,build,pointcut,expression,cl
AspectJExpressionPointcut -> private PointcutExpression buildPointcutExpression();1390432003;Build the underlying AspectJ pointcut expression.;private PointcutExpression buildPointcutExpression() {_		ClassLoader cl = (this.beanFactory instanceof ConfigurableBeanFactory ?_				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() :_				ClassUtils.getDefaultClassLoader())__		return buildPointcutExpression(cl)__	};build,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,build,pointcut,expression,class,loader,cl,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,get,bean,class,loader,class,utils,get,default,class,loader,return,build,pointcut,expression,cl
AspectJExpressionPointcut -> private ClassLoader determinePointcutClassLoader();1482422404;Determine the ClassLoader to use for pointcut evaluation.;private ClassLoader determinePointcutClassLoader() {_		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader()__		}_		if (this.pointcutDeclarationScope != null) {_			return this.pointcutDeclarationScope.getClassLoader()__		}_		return ClassUtils.getDefaultClassLoader()__	};determine,the,class,loader,to,use,for,pointcut,evaluation;private,class,loader,determine,pointcut,class,loader,if,this,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,this,bean,factory,get,bean,class,loader,if,this,pointcut,declaration,scope,null,return,this,pointcut,declaration,scope,get,class,loader,return,class,utils,get,default,class,loader
AspectJExpressionPointcut -> private ClassLoader determinePointcutClassLoader();1495868221;Determine the ClassLoader to use for pointcut evaluation.;private ClassLoader determinePointcutClassLoader() {_		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader()__		}_		if (this.pointcutDeclarationScope != null) {_			return this.pointcutDeclarationScope.getClassLoader()__		}_		return ClassUtils.getDefaultClassLoader()__	};determine,the,class,loader,to,use,for,pointcut,evaluation;private,class,loader,determine,pointcut,class,loader,if,this,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,this,bean,factory,get,bean,class,loader,if,this,pointcut,declaration,scope,null,return,this,pointcut,declaration,scope,get,class,loader,return,class,utils,get,default,class,loader
AspectJExpressionPointcut -> private ClassLoader determinePointcutClassLoader();1496242568;Determine the ClassLoader to use for pointcut evaluation.;private ClassLoader determinePointcutClassLoader() {_		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader()__		}_		if (this.pointcutDeclarationScope != null) {_			return this.pointcutDeclarationScope.getClassLoader()__		}_		return ClassUtils.getDefaultClassLoader()__	};determine,the,class,loader,to,use,for,pointcut,evaluation;private,class,loader,determine,pointcut,class,loader,if,this,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,this,bean,factory,get,bean,class,loader,if,this,pointcut,declaration,scope,null,return,this,pointcut,declaration,scope,get,class,loader,return,class,utils,get,default,class,loader
AspectJExpressionPointcut -> @Nullable 	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1495868221;Get a new pointcut expression based on a target class's loader rather than the default.;@Nullable_	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;nullable,private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> @Nullable 	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1496242568;Get a new pointcut expression based on a target class's loader rather than the default.;@Nullable_	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;nullable,private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> @Nullable 	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1496837955;Get a new pointcut expression based on a target class's loader rather than the default.;@Nullable_	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;nullable,private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> @Nullable 	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1498780456;Get a new pointcut expression based on a target class's loader rather than the default.;@Nullable_	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;nullable,private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> @Nullable 	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1523711405;Get a new pointcut expression based on a target class's loader rather than the default.;@Nullable_	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;nullable,private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> @Nullable 	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1524846214;Get a new pointcut expression based on a target class's loader rather than the default.;@Nullable_	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;nullable,private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> @Nullable 	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1526424231;Get a new pointcut expression based on a target class's loader rather than the default.;@Nullable_	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;nullable,private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> @Nullable 	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1530174524;Get a new pointcut expression based on a target class's loader rather than the default.;@Nullable_	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;nullable,private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> @Nullable 	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1532038651;Get a new pointcut expression based on a target class's loader rather than the default.;@Nullable_	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;nullable,private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> @Nullable 	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass);1532291328;Get a new pointcut expression based on a target class's loader rather than the default.;@Nullable_	private PointcutExpression getFallbackPointcutExpression(Class<?> targetClass) {_		try {_			ClassLoader classLoader = targetClass.getClassLoader()__			if (classLoader != null && classLoader != this.pointcutClassLoader) {_				return buildPointcutExpression(classLoader)__			}_		}_		catch (Throwable ex) {_			logger.debug("Failed to create fallback PointcutExpression", ex)__		}_		return null__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;nullable,private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,try,class,loader,class,loader,target,class,get,class,loader,if,class,loader,null,class,loader,this,pointcut,class,loader,return,build,pointcut,expression,class,loader,catch,throwable,ex,logger,debug,failed,to,create,fallback,pointcut,expression,ex,return,null
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1390432003;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1398714576;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1431022697;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1434026659;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1450827071;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1467730834;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1471387421;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1481749573;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1482232671;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1482422404;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1495868221;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1496242568;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1496837955;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1498780456;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1523711405;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1524846214;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1526424231;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1530174524;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1532038651;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class<?>... types);1532291328;Set the parameter types for the pointcut.;public void setParameterTypes(Class<?>... types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterNames(String[] names);1328020251;Set the parameter names for the pointcut.;public void setParameterNames(String[] names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String[] names);1356735495;Set the parameter names for the pointcut.;public void setParameterNames(String[] names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String[] names);1357119239;Set the parameter names for the pointcut.;public void setParameterNames(String[] names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String[] names);1362408075;Set the parameter names for the pointcut.;public void setParameterNames(String[] names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String[] names);1368482696;Set the parameter names for the pointcut.;public void setParameterNames(String[] names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String[] names);1385412762;Set the parameter names for the pointcut.;public void setParameterNames(String[] names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1390432003;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1398714576;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1431022697;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1434026659;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1450827071;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1467730834;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1471387421;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1481749573;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1482232671;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1482422404;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1495868221;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1496242568;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1496837955;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1498780456;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1523711405;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1524846214;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1526424231;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1530174524;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1532038651;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setParameterNames(String... names);1532291328;Set the parameter names for the pointcut.;public void setParameterNames(String... names) {_		this.pointcutParameterNames = names__	};set,the,parameter,names,for,the,pointcut;public,void,set,parameter,names,string,names,this,pointcut,parameter,names,names
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class pointcutDeclarationScope);1328020251;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class pointcutDeclarationScope);1356735495;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class pointcutDeclarationScope);1357119239;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class pointcutDeclarationScope);1362408075;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class pointcutDeclarationScope);1368482696;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> private PointcutExpression obtainPointcutExpression();1498780456;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private PointcutExpression obtainPointcutExpression() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = determinePointcutClassLoader()__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_		return this.pointcutExpression__	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,obtain,pointcut,expression,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,determine,pointcut,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader,return,this,pointcut,expression
AspectJExpressionPointcut -> private PointcutExpression obtainPointcutExpression();1523711405;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private PointcutExpression obtainPointcutExpression() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = determinePointcutClassLoader()__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_		return this.pointcutExpression__	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,obtain,pointcut,expression,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,determine,pointcut,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader,return,this,pointcut,expression
AspectJExpressionPointcut -> private PointcutExpression obtainPointcutExpression();1524846214;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private PointcutExpression obtainPointcutExpression() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = determinePointcutClassLoader()__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_		return this.pointcutExpression__	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,obtain,pointcut,expression,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,determine,pointcut,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader,return,this,pointcut,expression
AspectJExpressionPointcut -> private PointcutExpression obtainPointcutExpression();1526424231;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private PointcutExpression obtainPointcutExpression() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = determinePointcutClassLoader()__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_		return this.pointcutExpression__	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,obtain,pointcut,expression,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,determine,pointcut,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader,return,this,pointcut,expression
AspectJExpressionPointcut -> private PointcutExpression obtainPointcutExpression();1530174524;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private PointcutExpression obtainPointcutExpression() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = determinePointcutClassLoader()__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_		return this.pointcutExpression__	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,obtain,pointcut,expression,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,determine,pointcut,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader,return,this,pointcut,expression
AspectJExpressionPointcut -> private PointcutExpression obtainPointcutExpression();1532038651;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private PointcutExpression obtainPointcutExpression() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = determinePointcutClassLoader()__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_		return this.pointcutExpression__	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,obtain,pointcut,expression,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,determine,pointcut,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader,return,this,pointcut,expression
AspectJExpressionPointcut -> private PointcutExpression obtainPointcutExpression();1532291328;Check whether this pointcut is ready to match,_lazily building the underlying AspectJ pointcut expression.;private PointcutExpression obtainPointcutExpression() {_		if (getExpression() == null) {_			throw new IllegalStateException("Must set property 'expression' before attempting to match")__		}_		if (this.pointcutExpression == null) {_			this.pointcutClassLoader = determinePointcutClassLoader()__			this.pointcutExpression = buildPointcutExpression(this.pointcutClassLoader)__		}_		return this.pointcutExpression__	};check,whether,this,pointcut,is,ready,to,match,lazily,building,the,underlying,aspect,j,pointcut,expression;private,pointcut,expression,obtain,pointcut,expression,if,get,expression,null,throw,new,illegal,state,exception,must,set,property,expression,before,attempting,to,match,if,this,pointcut,expression,null,this,pointcut,class,loader,determine,pointcut,class,loader,this,pointcut,expression,build,pointcut,expression,this,pointcut,class,loader,return,this,pointcut,expression
AspectJExpressionPointcut -> public void setParameterTypes(Class[] types);1328020251;Set the parameter types for the pointcut.;public void setParameterTypes(Class[] types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class[] types);1356735495;Set the parameter types for the pointcut.;public void setParameterTypes(Class[] types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class[] types);1357119239;Set the parameter types for the pointcut.;public void setParameterTypes(Class[] types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class[] types);1362408075;Set the parameter types for the pointcut.;public void setParameterTypes(Class[] types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> public void setParameterTypes(Class[] types);1368482696;Set the parameter types for the pointcut.;public void setParameterTypes(Class[] types) {_		this.pointcutParameterTypes = types__	};set,the,parameter,types,for,the,pointcut;public,void,set,parameter,types,class,types,this,pointcut,parameter,types,types
AspectJExpressionPointcut -> private boolean matchesIgnoringSubtypes(ShadowMatch shadowMatch);1328020251;A match test returned maybe - if there are any subtype sensitive variables_involved in the test (this, target, at_this, at_target, at_annotation) then_we say this is not a match as in Spring there will never be a different_runtime subtype.;private boolean matchesIgnoringSubtypes(ShadowMatch shadowMatch) {_		return !(getRuntimeTestWalker(shadowMatch).testsSubtypeSensitiveVars())__	};a,match,test,returned,maybe,if,there,are,any,subtype,sensitive,variables,involved,in,the,test,this,target,then,we,say,this,is,not,a,match,as,in,spring,there,will,never,be,a,different,runtime,subtype;private,boolean,matches,ignoring,subtypes,shadow,match,shadow,match,return,get,runtime,test,walker,shadow,match,tests,subtype,sensitive,vars
AspectJExpressionPointcut -> private boolean matchesIgnoringSubtypes(ShadowMatch shadowMatch);1356735495;A match test returned maybe - if there are any subtype sensitive variables_involved in the test (this, target, at_this, at_target, at_annotation) then_we say this is not a match as in Spring there will never be a different_runtime subtype.;private boolean matchesIgnoringSubtypes(ShadowMatch shadowMatch) {_		return !(getRuntimeTestWalker(shadowMatch).testsSubtypeSensitiveVars())__	};a,match,test,returned,maybe,if,there,are,any,subtype,sensitive,variables,involved,in,the,test,this,target,then,we,say,this,is,not,a,match,as,in,spring,there,will,never,be,a,different,runtime,subtype;private,boolean,matches,ignoring,subtypes,shadow,match,shadow,match,return,get,runtime,test,walker,shadow,match,tests,subtype,sensitive,vars
AspectJExpressionPointcut -> private boolean matchesIgnoringSubtypes(ShadowMatch shadowMatch);1357119239;A match test returned maybe - if there are any subtype sensitive variables_involved in the test (this, target, at_this, at_target, at_annotation) then_we say this is not a match as in Spring there will never be a different_runtime subtype.;private boolean matchesIgnoringSubtypes(ShadowMatch shadowMatch) {_		return !(getRuntimeTestWalker(shadowMatch).testsSubtypeSensitiveVars())__	};a,match,test,returned,maybe,if,there,are,any,subtype,sensitive,variables,involved,in,the,test,this,target,then,we,say,this,is,not,a,match,as,in,spring,there,will,never,be,a,different,runtime,subtype;private,boolean,matches,ignoring,subtypes,shadow,match,shadow,match,return,get,runtime,test,walker,shadow,match,tests,subtype,sensitive,vars
AspectJExpressionPointcut -> private boolean matchesIgnoringSubtypes(ShadowMatch shadowMatch);1362408075;A match test returned maybe - if there are any subtype sensitive variables_involved in the test (this, target, at_this, at_target, at_annotation) then_we say this is not a match as in Spring there will never be a different_runtime subtype.;private boolean matchesIgnoringSubtypes(ShadowMatch shadowMatch) {_		return !(getRuntimeTestWalker(shadowMatch).testsSubtypeSensitiveVars())__	};a,match,test,returned,maybe,if,there,are,any,subtype,sensitive,variables,involved,in,the,test,this,target,then,we,say,this,is,not,a,match,as,in,spring,there,will,never,be,a,different,runtime,subtype;private,boolean,matches,ignoring,subtypes,shadow,match,shadow,match,return,get,runtime,test,walker,shadow,match,tests,subtype,sensitive,vars
AspectJExpressionPointcut -> private boolean matchesIgnoringSubtypes(ShadowMatch shadowMatch);1368482696;A match test returned maybe - if there are any subtype sensitive variables_involved in the test (this, target, at_this, at_target, at_annotation) then_we say this is not a match as in Spring there will never be a different_runtime subtype.;private boolean matchesIgnoringSubtypes(ShadowMatch shadowMatch) {_		return !(getRuntimeTestWalker(shadowMatch).testsSubtypeSensitiveVars())__	};a,match,test,returned,maybe,if,there,are,any,subtype,sensitive,variables,involved,in,the,test,this,target,then,we,say,this,is,not,a,match,as,in,spring,there,will,never,be,a,different,runtime,subtype;private,boolean,matches,ignoring,subtypes,shadow,match,shadow,match,return,get,runtime,test,walker,shadow,match,tests,subtype,sensitive,vars
AspectJExpressionPointcut -> private boolean matchesIgnoringSubtypes(ShadowMatch shadowMatch);1385412762;A match test returned maybe - if there are any subtype sensitive variables_involved in the test (this, target, at_this, at_target, at_annotation) then_we say this is not a match as in Spring there will never be a different_runtime subtype.;private boolean matchesIgnoringSubtypes(ShadowMatch shadowMatch) {_		return !(getRuntimeTestWalker(shadowMatch).testsSubtypeSensitiveVars())__	};a,match,test,returned,maybe,if,there,are,any,subtype,sensitive,variables,involved,in,the,test,this,target,then,we,say,this,is,not,a,match,as,in,spring,there,will,never,be,a,different,runtime,subtype;private,boolean,matches,ignoring,subtypes,shadow,match,shadow,match,return,get,runtime,test,walker,shadow,match,tests,subtype,sensitive,vars
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1328020251;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1356735495;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1357119239;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1362408075;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1368482696;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1385412762;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1390432003;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1398714576;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1431022697;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1434026659;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1450827071;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1467730834;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1471387421;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1481749573;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1482232671;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1482422404;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1495868221;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1496242568;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1496837955;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1498780456;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1523711405;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1524846214;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1526424231;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1530174524;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1532038651;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> public AspectJExpressionPointcut();1532291328;Create a new default AspectJExpressionPointcut.;public AspectJExpressionPointcut() {_	};create,a,new,default,aspect,jexpression,pointcut;public,aspect,jexpression,pointcut
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader cl);1328020251;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader cl) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, cl)__		parser.registerPointcutDesignatorHandler(new BeanNamePointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,cl,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,cl,parser,register,pointcut,designator,handler,new,bean,name,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader cl);1356735495;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader cl) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, cl)__		parser.registerPointcutDesignatorHandler(new BeanNamePointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,cl,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,cl,parser,register,pointcut,designator,handler,new,bean,name,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader cl);1357119239;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader cl) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, cl)__		parser.registerPointcutDesignatorHandler(new BeanNamePointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,cl,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,cl,parser,register,pointcut,designator,handler,new,bean,name,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader cl);1362408075;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader cl) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, cl)__		parser.registerPointcutDesignatorHandler(new BeanNamePointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,cl,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,cl,parser,register,pointcut,designator,handler,new,bean,name,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader cl);1368482696;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader cl) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, cl)__		parser.registerPointcutDesignatorHandler(new BeanNamePointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,cl,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,cl,parser,register,pointcut,designator,handler,new,bean,name,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader cl);1385412762;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader cl) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, cl)__		parser.registerPointcutDesignatorHandler(new BeanNamePointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,cl,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,cl,parser,register,pointcut,designator,handler,new,bean,name,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader cl);1390432003;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader cl) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, cl)__		parser.registerPointcutDesignatorHandler(new BeanNamePointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,cl,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,cl,parser,register,pointcut,designator,handler,new,bean,name,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader cl);1398714576;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader cl) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, cl)__		parser.registerPointcutDesignatorHandler(new BeanNamePointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,cl,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,cl,parser,register,pointcut,designator,handler,new,bean,name,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader cl);1431022697;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader cl) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, cl)__		parser.registerPointcutDesignatorHandler(new BeanNamePointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,cl,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,cl,parser,register,pointcut,designator,handler,new,bean,name,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader cl);1434026659;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader cl) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, cl)__		parser.registerPointcutDesignatorHandler(new BeanNamePointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,cl,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,cl,parser,register,pointcut,designator,handler,new,bean,name,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader cl);1450827071;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader cl) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, cl)__		parser.registerPointcutDesignatorHandler(new BeanNamePointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,cl,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,cl,parser,register,pointcut,designator,handler,new,bean,name,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader cl);1467730834;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader cl) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, cl)__		parser.registerPointcutDesignatorHandler(new BeanNamePointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,cl,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,cl,parser,register,pointcut,designator,handler,new,bean,name,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader cl);1471387421;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader cl) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, cl)__		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,cl,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,cl,parser,register,pointcut,designator,handler,new,bean,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader cl);1481749573;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader cl) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, cl)__		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,cl,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,cl,parser,register,pointcut,designator,handler,new,bean,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> private PointcutParser initializePointcutParser(ClassLoader cl);1482232671;Initialize the underlying AspectJ pointcut parser.;private PointcutParser initializePointcutParser(ClassLoader cl) {_		PointcutParser parser = PointcutParser_				.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(_						SUPPORTED_PRIMITIVES, cl)__		parser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler())__		return parser__	};initialize,the,underlying,aspect,j,pointcut,parser;private,pointcut,parser,initialize,pointcut,parser,class,loader,cl,pointcut,parser,parser,pointcut,parser,get,pointcut,parser,supporting,specified,primitives,and,using,specified,class,loader,for,resolution,cl,parser,register,pointcut,designator,handler,new,bean,pointcut,designator,handler,return,parser
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1385412762;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1390432003;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1398714576;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1431022697;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1434026659;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1450827071;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1467730834;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1471387421;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1481749573;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1482232671;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1482422404;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1495868221;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1496242568;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1496837955;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1498780456;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1523711405;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1524846214;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1526424231;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1530174524;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1532038651;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope);1532291328;Set the declaration scope for the pointcut.;public void setPointcutDeclarationScope(Class<?> pointcutDeclarationScope) {_		this.pointcutDeclarationScope = pointcutDeclarationScope__	};set,the,declaration,scope,for,the,pointcut;public,void,set,pointcut,declaration,scope,class,pointcut,declaration,scope,this,pointcut,declaration,scope,pointcut,declaration,scope
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1328020251;If a pointcut expression has been specified in XML, the user cannot_write <code>and</code> as "&&" (though &amp_&amp_ will work)._We also allow <code>and</code> between two pointcut sub-expressions._<p>This method converts back to <code>&&</code> for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,code,as,though,amp,amp,will,work,we,also,allow,code,and,code,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1356735495;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1357119239;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1362408075;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1368482696;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1385412762;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1390432003;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1398714576;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1431022697;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1434026659;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1450827071;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1467730834;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1471387421;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1481749573;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1482232671;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1482422404;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1495868221;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1496242568;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1496837955;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1498780456;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1523711405;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1524846214;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1526424231;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1530174524;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1532038651;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private String replaceBooleanOperators(String pcExpr);1532291328;If a pointcut expression has been specified in XML, the user cannot_write {@code and} as "&&" (though &amp_&amp_ will work)._We also allow {@code and} between two pointcut sub-expressions._<p>This method converts back to {@code &&} for the AspectJ pointcut parser.;private String replaceBooleanOperators(String pcExpr) {_		String result = StringUtils.replace(pcExpr, " and ", " && ")__		result = StringUtils.replace(result, " or ", " || ")__		result = StringUtils.replace(result, " not ", " ! ")__		return result__	};if,a,pointcut,expression,has,been,specified,in,xml,the,user,cannot,write,code,and,as,though,amp,amp,will,work,we,also,allow,code,and,between,two,pointcut,sub,expressions,p,this,method,converts,back,to,code,for,the,aspect,j,pointcut,parser;private,string,replace,boolean,operators,string,pc,expr,string,result,string,utils,replace,pc,expr,and,result,string,utils,replace,result,or,result,string,utils,replace,result,not,return,result
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression( 			Class<?> targetClass);1328020251;Get a new pointcut expression based on a target class's loader, rather_than the default.;private PointcutExpression getFallbackPointcutExpression(_			Class<?> targetClass) {_		ClassLoader classLoader = targetClass.getClassLoader()__		return classLoader == null ? this.pointcutExpression : buildPointcutExpression(classLoader)__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,class,loader,class,loader,target,class,get,class,loader,return,class,loader,null,this,pointcut,expression,build,pointcut,expression,class,loader
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression( 			Class<?> targetClass);1356735495;Get a new pointcut expression based on a target class's loader, rather_than the default.;private PointcutExpression getFallbackPointcutExpression(_			Class<?> targetClass) {_		ClassLoader classLoader = targetClass.getClassLoader()__		return classLoader == null ? this.pointcutExpression : buildPointcutExpression(classLoader)__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,class,loader,class,loader,target,class,get,class,loader,return,class,loader,null,this,pointcut,expression,build,pointcut,expression,class,loader
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression( 			Class<?> targetClass);1357119239;Get a new pointcut expression based on a target class's loader, rather_than the default.;private PointcutExpression getFallbackPointcutExpression(_			Class<?> targetClass) {_		ClassLoader classLoader = targetClass.getClassLoader()__		return classLoader == null ? this.pointcutExpression : buildPointcutExpression(classLoader)__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,class,loader,class,loader,target,class,get,class,loader,return,class,loader,null,this,pointcut,expression,build,pointcut,expression,class,loader
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression( 			Class<?> targetClass);1362408075;Get a new pointcut expression based on a target class's loader, rather_than the default.;private PointcutExpression getFallbackPointcutExpression(_			Class<?> targetClass) {_		ClassLoader classLoader = targetClass.getClassLoader()__		return classLoader == null ? this.pointcutExpression : buildPointcutExpression(classLoader)__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,class,loader,class,loader,target,class,get,class,loader,return,class,loader,null,this,pointcut,expression,build,pointcut,expression,class,loader
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression( 			Class<?> targetClass);1368482696;Get a new pointcut expression based on a target class's loader, rather_than the default.;private PointcutExpression getFallbackPointcutExpression(_			Class<?> targetClass) {_		ClassLoader classLoader = targetClass.getClassLoader()__		return classLoader == null ? this.pointcutExpression : buildPointcutExpression(classLoader)__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,class,loader,class,loader,target,class,get,class,loader,return,class,loader,null,this,pointcut,expression,build,pointcut,expression,class,loader
AspectJExpressionPointcut -> private PointcutExpression getFallbackPointcutExpression( 			Class<?> targetClass);1385412762;Get a new pointcut expression based on a target class's loader, rather_than the default.;private PointcutExpression getFallbackPointcutExpression(_			Class<?> targetClass) {_		ClassLoader classLoader = targetClass.getClassLoader()__		return classLoader == null ? this.pointcutExpression : buildPointcutExpression(classLoader)__	};get,a,new,pointcut,expression,based,on,a,target,class,s,loader,rather,than,the,default;private,pointcut,expression,get,fallback,pointcut,expression,class,target,class,class,loader,class,loader,target,class,get,class,loader,return,class,loader,null,this,pointcut,expression,build,pointcut,expression,class,loader
