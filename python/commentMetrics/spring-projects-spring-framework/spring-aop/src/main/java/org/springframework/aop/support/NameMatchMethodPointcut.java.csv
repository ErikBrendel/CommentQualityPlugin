# id;timestamp;commentText;codeText;commentWords;codeWords
NameMatchMethodPointcut -> public void setMappedName(String mappedName);1328020251;Convenience method when we have only a single method name to match._Use either this method or <code>setMappedNames</code>, not both._@see #setMappedNames;public void setMappedName(String mappedName) {_		setMappedNames(new String[] {mappedName})__	};convenience,method,when,we,have,only,a,single,method,name,to,match,use,either,this,method,or,code,set,mapped,names,code,not,both,see,set,mapped,names;public,void,set,mapped,name,string,mapped,name,set,mapped,names,new,string,mapped,name
NameMatchMethodPointcut -> public void setMappedName(String mappedName);1356735495;Convenience method when we have only a single method name to match._Use either this method or {@code setMappedNames}, not both._@see #setMappedNames;public void setMappedName(String mappedName) {_		setMappedNames(new String[] {mappedName})__	};convenience,method,when,we,have,only,a,single,method,name,to,match,use,either,this,method,or,code,set,mapped,names,not,both,see,set,mapped,names;public,void,set,mapped,name,string,mapped,name,set,mapped,names,new,string,mapped,name
NameMatchMethodPointcut -> public void setMappedName(String mappedName);1357119239;Convenience method when we have only a single method name to match._Use either this method or {@code setMappedNames}, not both._@see #setMappedNames;public void setMappedName(String mappedName) {_		setMappedNames(new String[] {mappedName})__	};convenience,method,when,we,have,only,a,single,method,name,to,match,use,either,this,method,or,code,set,mapped,names,not,both,see,set,mapped,names;public,void,set,mapped,name,string,mapped,name,set,mapped,names,new,string,mapped,name
NameMatchMethodPointcut -> public void setMappedName(String mappedName);1368482696;Convenience method when we have only a single method name to match._Use either this method or {@code setMappedNames}, not both._@see #setMappedNames;public void setMappedName(String mappedName) {_		setMappedNames(new String[] {mappedName})__	};convenience,method,when,we,have,only,a,single,method,name,to,match,use,either,this,method,or,code,set,mapped,names,not,both,see,set,mapped,names;public,void,set,mapped,name,string,mapped,name,set,mapped,names,new,string,mapped,name
NameMatchMethodPointcut -> public void setMappedName(String mappedName);1385412762;Convenience method when we have only a single method name to match._Use either this method or {@code setMappedNames}, not both._@see #setMappedNames;public void setMappedName(String mappedName) {_		setMappedNames(new String[] {mappedName})__	};convenience,method,when,we,have,only,a,single,method,name,to,match,use,either,this,method,or,code,set,mapped,names,not,both,see,set,mapped,names;public,void,set,mapped,name,string,mapped,name,set,mapped,names,new,string,mapped,name
NameMatchMethodPointcut -> public void setMappedName(String mappedName);1407511029;Convenience method when we have only a single method name to match._Use either this method or {@code setMappedNames}, not both._@see #setMappedNames;public void setMappedName(String mappedName) {_		setMappedNames(mappedName)__	};convenience,method,when,we,have,only,a,single,method,name,to,match,use,either,this,method,or,code,set,mapped,names,not,both,see,set,mapped,names;public,void,set,mapped,name,string,mapped,name,set,mapped,names,mapped,name
NameMatchMethodPointcut -> public void setMappedName(String mappedName);1413848647;Convenience method when we have only a single method name to match._Use either this method or {@code setMappedNames}, not both._@see #setMappedNames;public void setMappedName(String mappedName) {_		setMappedNames(mappedName)__	};convenience,method,when,we,have,only,a,single,method,name,to,match,use,either,this,method,or,code,set,mapped,names,not,both,see,set,mapped,names;public,void,set,mapped,name,string,mapped,name,set,mapped,names,mapped,name
NameMatchMethodPointcut -> public void setMappedName(String mappedName);1467730834;Convenience method when we have only a single method name to match._Use either this method or {@code setMappedNames}, not both._@see #setMappedNames;public void setMappedName(String mappedName) {_		setMappedNames(mappedName)__	};convenience,method,when,we,have,only,a,single,method,name,to,match,use,either,this,method,or,code,set,mapped,names,not,both,see,set,mapped,names;public,void,set,mapped,name,string,mapped,name,set,mapped,names,mapped,name
NameMatchMethodPointcut -> public void setMappedName(String mappedName);1492760907;Convenience method when we have only a single method name to match._Use either this method or {@code setMappedNames}, not both._@see #setMappedNames;public void setMappedName(String mappedName) {_		setMappedNames(mappedName)__	};convenience,method,when,we,have,only,a,single,method,name,to,match,use,either,this,method,or,code,set,mapped,names,not,both,see,set,mapped,names;public,void,set,mapped,name,string,mapped,name,set,mapped,names,mapped,name
NameMatchMethodPointcut -> public void setMappedName(String mappedName);1496242568;Convenience method when we have only a single method name to match._Use either this method or {@code setMappedNames}, not both._@see #setMappedNames;public void setMappedName(String mappedName) {_		setMappedNames(mappedName)__	};convenience,method,when,we,have,only,a,single,method,name,to,match,use,either,this,method,or,code,set,mapped,names,not,both,see,set,mapped,names;public,void,set,mapped,name,string,mapped,name,set,mapped,names,mapped,name
NameMatchMethodPointcut -> public void setMappedName(String mappedName);1496837955;Convenience method when we have only a single method name to match._Use either this method or {@code setMappedNames}, not both._@see #setMappedNames;public void setMappedName(String mappedName) {_		setMappedNames(mappedName)__	};convenience,method,when,we,have,only,a,single,method,name,to,match,use,either,this,method,or,code,set,mapped,names,not,both,see,set,mapped,names;public,void,set,mapped,name,string,mapped,name,set,mapped,names,mapped,name
NameMatchMethodPointcut -> public void setMappedName(String mappedName);1498780456;Convenience method when we have only a single method name to match._Use either this method or {@code setMappedNames}, not both._@see #setMappedNames;public void setMappedName(String mappedName) {_		setMappedNames(mappedName)__	};convenience,method,when,we,have,only,a,single,method,name,to,match,use,either,this,method,or,code,set,mapped,names,not,both,see,set,mapped,names;public,void,set,mapped,name,string,mapped,name,set,mapped,names,mapped,name
NameMatchMethodPointcut -> public void setMappedName(String mappedName);1531945062;Convenience method when we have only a single method name to match._Use either this method or {@code setMappedNames}, not both._@see #setMappedNames;public void setMappedName(String mappedName) {_		setMappedNames(mappedName)__	};convenience,method,when,we,have,only,a,single,method,name,to,match,use,either,this,method,or,code,set,mapped,names,not,both,see,set,mapped,names;public,void,set,mapped,name,string,mapped,name,set,mapped,names,mapped,name
NameMatchMethodPointcut -> public void setMappedName(String mappedName);1532038651;Convenience method when we have only a single method name to match._Use either this method or {@code setMappedNames}, not both._@see #setMappedNames;public void setMappedName(String mappedName) {_		setMappedNames(mappedName)__	};convenience,method,when,we,have,only,a,single,method,name,to,match,use,either,this,method,or,code,set,mapped,names,not,both,see,set,mapped,names;public,void,set,mapped,name,string,mapped,name,set,mapped,names,mapped,name
NameMatchMethodPointcut -> protected boolean isMatch(String methodName, String mappedName);1328020251;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchMethodPointcut -> protected boolean isMatch(String methodName, String mappedName);1356735495;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchMethodPointcut -> protected boolean isMatch(String methodName, String mappedName);1357119239;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchMethodPointcut -> protected boolean isMatch(String methodName, String mappedName);1368482696;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchMethodPointcut -> protected boolean isMatch(String methodName, String mappedName);1385412762;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchMethodPointcut -> protected boolean isMatch(String methodName, String mappedName);1407511029;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchMethodPointcut -> protected boolean isMatch(String methodName, String mappedName);1413848647;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchMethodPointcut -> protected boolean isMatch(String methodName, String mappedName);1467730834;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchMethodPointcut -> protected boolean isMatch(String methodName, String mappedName);1492760907;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchMethodPointcut -> protected boolean isMatch(String methodName, String mappedName);1496242568;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchMethodPointcut -> protected boolean isMatch(String methodName, String mappedName);1496837955;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchMethodPointcut -> protected boolean isMatch(String methodName, String mappedName);1498780456;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchMethodPointcut -> protected boolean isMatch(String methodName, String mappedName);1531945062;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchMethodPointcut -> protected boolean isMatch(String methodName, String mappedName);1532038651;Return if the given method name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param methodName the method name of the class_@param mappedName the name in the descriptor_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String methodName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, methodName)__	};return,if,the,given,method,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,method,name,the,method,name,of,the,class,param,mapped,name,the,name,in,the,descriptor,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,method,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,method,name
NameMatchMethodPointcut -> public void setMappedNames(String... mappedNames);1407511029;Set the method names defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setMappedNames(String... mappedNames) {_		this.mappedNames = new LinkedList<String>()__		if (mappedNames != null) {_			this.mappedNames.addAll(Arrays.asList(mappedNames))__		}_	};set,the,method,names,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,mapped,names,string,mapped,names,this,mapped,names,new,linked,list,string,if,mapped,names,null,this,mapped,names,add,all,arrays,as,list,mapped,names
NameMatchMethodPointcut -> public void setMappedNames(String... mappedNames);1413848647;Set the method names defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setMappedNames(String... mappedNames) {_		this.mappedNames = new LinkedList<String>()__		if (mappedNames != null) {_			this.mappedNames.addAll(Arrays.asList(mappedNames))__		}_	};set,the,method,names,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,mapped,names,string,mapped,names,this,mapped,names,new,linked,list,string,if,mapped,names,null,this,mapped,names,add,all,arrays,as,list,mapped,names
NameMatchMethodPointcut -> public void setMappedNames(String... mappedNames);1467730834;Set the method names defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setMappedNames(String... mappedNames) {_		this.mappedNames = new LinkedList<>()__		if (mappedNames != null) {_			this.mappedNames.addAll(Arrays.asList(mappedNames))__		}_	};set,the,method,names,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,mapped,names,string,mapped,names,this,mapped,names,new,linked,list,if,mapped,names,null,this,mapped,names,add,all,arrays,as,list,mapped,names
NameMatchMethodPointcut -> public void setMappedNames(String... mappedNames);1492760907;Set the method names defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setMappedNames(String... mappedNames) {_		this.mappedNames = new LinkedList<>()__		if (mappedNames != null) {_			this.mappedNames.addAll(Arrays.asList(mappedNames))__		}_	};set,the,method,names,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,mapped,names,string,mapped,names,this,mapped,names,new,linked,list,if,mapped,names,null,this,mapped,names,add,all,arrays,as,list,mapped,names
NameMatchMethodPointcut -> public void setMappedNames(String... mappedNames);1496242568;Set the method names defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setMappedNames(String... mappedNames) {_		this.mappedNames = new LinkedList<>()__		if (mappedNames != null) {_			this.mappedNames.addAll(Arrays.asList(mappedNames))__		}_	};set,the,method,names,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,mapped,names,string,mapped,names,this,mapped,names,new,linked,list,if,mapped,names,null,this,mapped,names,add,all,arrays,as,list,mapped,names
NameMatchMethodPointcut -> public void setMappedNames(String... mappedNames);1531945062;Set the method names defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setMappedNames(String... mappedNames) {_		this.mappedNames = new ArrayList<>(Arrays.asList(mappedNames))__	};set,the,method,names,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,mapped,names,string,mapped,names,this,mapped,names,new,array,list,arrays,as,list,mapped,names
NameMatchMethodPointcut -> public void setMappedNames(String... mappedNames);1532038651;Set the method names defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setMappedNames(String... mappedNames) {_		this.mappedNames = new ArrayList<>(Arrays.asList(mappedNames))__	};set,the,method,names,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,mapped,names,string,mapped,names,this,mapped,names,new,array,list,arrays,as,list,mapped,names
NameMatchMethodPointcut -> public void setMappedNames(@Nullable String... mappedNames);1496837955;Set the method names defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setMappedNames(@Nullable String... mappedNames) {_		this.mappedNames = new LinkedList<>()__		if (mappedNames != null) {_			this.mappedNames.addAll(Arrays.asList(mappedNames))__		}_	};set,the,method,names,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,mapped,names,nullable,string,mapped,names,this,mapped,names,new,linked,list,if,mapped,names,null,this,mapped,names,add,all,arrays,as,list,mapped,names
NameMatchMethodPointcut -> public void setMappedNames(@Nullable String... mappedNames);1498780456;Set the method names defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setMappedNames(@Nullable String... mappedNames) {_		this.mappedNames = new LinkedList<>()__		if (mappedNames != null) {_			this.mappedNames.addAll(Arrays.asList(mappedNames))__		}_	};set,the,method,names,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,mapped,names,nullable,string,mapped,names,this,mapped,names,new,linked,list,if,mapped,names,null,this,mapped,names,add,all,arrays,as,list,mapped,names
NameMatchMethodPointcut -> public NameMatchMethodPointcut addMethodName(String name);1328020251;Add another eligible method name, in addition to those already named._Like the set methods, this method is for use when configuring proxies,_before a proxy is used._<p><b>NB:</b> This method does not work after the proxy is in_use, as advice chains will be cached._@param name name of the additional method that will match_@return this pointcut to allow for multiple additions in one line;public NameMatchMethodPointcut addMethodName(String name) {_		this.mappedNames.add(name)__		return this__	};add,another,eligible,method,name,in,addition,to,those,already,named,like,the,set,methods,this,method,is,for,use,when,configuring,proxies,before,a,proxy,is,used,p,b,nb,b,this,method,does,not,work,after,the,proxy,is,in,use,as,advice,chains,will,be,cached,param,name,name,of,the,additional,method,that,will,match,return,this,pointcut,to,allow,for,multiple,additions,in,one,line;public,name,match,method,pointcut,add,method,name,string,name,this,mapped,names,add,name,return,this
NameMatchMethodPointcut -> public NameMatchMethodPointcut addMethodName(String name);1356735495;Add another eligible method name, in addition to those already named._Like the set methods, this method is for use when configuring proxies,_before a proxy is used._<p><b>NB:</b> This method does not work after the proxy is in_use, as advice chains will be cached._@param name name of the additional method that will match_@return this pointcut to allow for multiple additions in one line;public NameMatchMethodPointcut addMethodName(String name) {_		this.mappedNames.add(name)__		return this__	};add,another,eligible,method,name,in,addition,to,those,already,named,like,the,set,methods,this,method,is,for,use,when,configuring,proxies,before,a,proxy,is,used,p,b,nb,b,this,method,does,not,work,after,the,proxy,is,in,use,as,advice,chains,will,be,cached,param,name,name,of,the,additional,method,that,will,match,return,this,pointcut,to,allow,for,multiple,additions,in,one,line;public,name,match,method,pointcut,add,method,name,string,name,this,mapped,names,add,name,return,this
NameMatchMethodPointcut -> public NameMatchMethodPointcut addMethodName(String name);1357119239;Add another eligible method name, in addition to those already named._Like the set methods, this method is for use when configuring proxies,_before a proxy is used._<p><b>NB:</b> This method does not work after the proxy is in_use, as advice chains will be cached._@param name name of the additional method that will match_@return this pointcut to allow for multiple additions in one line;public NameMatchMethodPointcut addMethodName(String name) {_		this.mappedNames.add(name)__		return this__	};add,another,eligible,method,name,in,addition,to,those,already,named,like,the,set,methods,this,method,is,for,use,when,configuring,proxies,before,a,proxy,is,used,p,b,nb,b,this,method,does,not,work,after,the,proxy,is,in,use,as,advice,chains,will,be,cached,param,name,name,of,the,additional,method,that,will,match,return,this,pointcut,to,allow,for,multiple,additions,in,one,line;public,name,match,method,pointcut,add,method,name,string,name,this,mapped,names,add,name,return,this
NameMatchMethodPointcut -> public NameMatchMethodPointcut addMethodName(String name);1368482696;Add another eligible method name, in addition to those already named._Like the set methods, this method is for use when configuring proxies,_before a proxy is used._<p><b>NB:</b> This method does not work after the proxy is in_use, as advice chains will be cached._@param name name of the additional method that will match_@return this pointcut to allow for multiple additions in one line;public NameMatchMethodPointcut addMethodName(String name) {_		this.mappedNames.add(name)__		return this__	};add,another,eligible,method,name,in,addition,to,those,already,named,like,the,set,methods,this,method,is,for,use,when,configuring,proxies,before,a,proxy,is,used,p,b,nb,b,this,method,does,not,work,after,the,proxy,is,in,use,as,advice,chains,will,be,cached,param,name,name,of,the,additional,method,that,will,match,return,this,pointcut,to,allow,for,multiple,additions,in,one,line;public,name,match,method,pointcut,add,method,name,string,name,this,mapped,names,add,name,return,this
NameMatchMethodPointcut -> public NameMatchMethodPointcut addMethodName(String name);1385412762;Add another eligible method name, in addition to those already named._Like the set methods, this method is for use when configuring proxies,_before a proxy is used._<p><b>NB:</b> This method does not work after the proxy is in_use, as advice chains will be cached._@param name name of the additional method that will match_@return this pointcut to allow for multiple additions in one line;public NameMatchMethodPointcut addMethodName(String name) {_		this.mappedNames.add(name)__		return this__	};add,another,eligible,method,name,in,addition,to,those,already,named,like,the,set,methods,this,method,is,for,use,when,configuring,proxies,before,a,proxy,is,used,p,b,nb,b,this,method,does,not,work,after,the,proxy,is,in,use,as,advice,chains,will,be,cached,param,name,name,of,the,additional,method,that,will,match,return,this,pointcut,to,allow,for,multiple,additions,in,one,line;public,name,match,method,pointcut,add,method,name,string,name,this,mapped,names,add,name,return,this
NameMatchMethodPointcut -> public NameMatchMethodPointcut addMethodName(String name);1407511029;Add another eligible method name, in addition to those already named._Like the set methods, this method is for use when configuring proxies,_before a proxy is used._<p><b>NB:</b> This method does not work after the proxy is in_use, as advice chains will be cached._@param name name of the additional method that will match_@return this pointcut to allow for multiple additions in one line;public NameMatchMethodPointcut addMethodName(String name) {_		this.mappedNames.add(name)__		return this__	};add,another,eligible,method,name,in,addition,to,those,already,named,like,the,set,methods,this,method,is,for,use,when,configuring,proxies,before,a,proxy,is,used,p,b,nb,b,this,method,does,not,work,after,the,proxy,is,in,use,as,advice,chains,will,be,cached,param,name,name,of,the,additional,method,that,will,match,return,this,pointcut,to,allow,for,multiple,additions,in,one,line;public,name,match,method,pointcut,add,method,name,string,name,this,mapped,names,add,name,return,this
NameMatchMethodPointcut -> public NameMatchMethodPointcut addMethodName(String name);1413848647;Add another eligible method name, in addition to those already named._Like the set methods, this method is for use when configuring proxies,_before a proxy is used._<p><b>NB:</b> This method does not work after the proxy is in_use, as advice chains will be cached._@param name name of the additional method that will match_@return this pointcut to allow for multiple additions in one line;public NameMatchMethodPointcut addMethodName(String name) {_		this.mappedNames.add(name)__		return this__	};add,another,eligible,method,name,in,addition,to,those,already,named,like,the,set,methods,this,method,is,for,use,when,configuring,proxies,before,a,proxy,is,used,p,b,nb,b,this,method,does,not,work,after,the,proxy,is,in,use,as,advice,chains,will,be,cached,param,name,name,of,the,additional,method,that,will,match,return,this,pointcut,to,allow,for,multiple,additions,in,one,line;public,name,match,method,pointcut,add,method,name,string,name,this,mapped,names,add,name,return,this
NameMatchMethodPointcut -> public NameMatchMethodPointcut addMethodName(String name);1467730834;Add another eligible method name, in addition to those already named._Like the set methods, this method is for use when configuring proxies,_before a proxy is used._<p><b>NB:</b> This method does not work after the proxy is in_use, as advice chains will be cached._@param name name of the additional method that will match_@return this pointcut to allow for multiple additions in one line;public NameMatchMethodPointcut addMethodName(String name) {_		this.mappedNames.add(name)__		return this__	};add,another,eligible,method,name,in,addition,to,those,already,named,like,the,set,methods,this,method,is,for,use,when,configuring,proxies,before,a,proxy,is,used,p,b,nb,b,this,method,does,not,work,after,the,proxy,is,in,use,as,advice,chains,will,be,cached,param,name,name,of,the,additional,method,that,will,match,return,this,pointcut,to,allow,for,multiple,additions,in,one,line;public,name,match,method,pointcut,add,method,name,string,name,this,mapped,names,add,name,return,this
NameMatchMethodPointcut -> public NameMatchMethodPointcut addMethodName(String name);1492760907;Add another eligible method name, in addition to those already named._Like the set methods, this method is for use when configuring proxies,_before a proxy is used._<p><b>NB:</b> This method does not work after the proxy is in_use, as advice chains will be cached._@param name name of the additional method that will match_@return this pointcut to allow for multiple additions in one line;public NameMatchMethodPointcut addMethodName(String name) {_		this.mappedNames.add(name)__		return this__	};add,another,eligible,method,name,in,addition,to,those,already,named,like,the,set,methods,this,method,is,for,use,when,configuring,proxies,before,a,proxy,is,used,p,b,nb,b,this,method,does,not,work,after,the,proxy,is,in,use,as,advice,chains,will,be,cached,param,name,name,of,the,additional,method,that,will,match,return,this,pointcut,to,allow,for,multiple,additions,in,one,line;public,name,match,method,pointcut,add,method,name,string,name,this,mapped,names,add,name,return,this
NameMatchMethodPointcut -> public NameMatchMethodPointcut addMethodName(String name);1496242568;Add another eligible method name, in addition to those already named._Like the set methods, this method is for use when configuring proxies,_before a proxy is used._<p><b>NB:</b> This method does not work after the proxy is in_use, as advice chains will be cached._@param name name of the additional method that will match_@return this pointcut to allow for multiple additions in one line;public NameMatchMethodPointcut addMethodName(String name) {_		this.mappedNames.add(name)__		return this__	};add,another,eligible,method,name,in,addition,to,those,already,named,like,the,set,methods,this,method,is,for,use,when,configuring,proxies,before,a,proxy,is,used,p,b,nb,b,this,method,does,not,work,after,the,proxy,is,in,use,as,advice,chains,will,be,cached,param,name,name,of,the,additional,method,that,will,match,return,this,pointcut,to,allow,for,multiple,additions,in,one,line;public,name,match,method,pointcut,add,method,name,string,name,this,mapped,names,add,name,return,this
NameMatchMethodPointcut -> public NameMatchMethodPointcut addMethodName(String name);1496837955;Add another eligible method name, in addition to those already named._Like the set methods, this method is for use when configuring proxies,_before a proxy is used._<p><b>NB:</b> This method does not work after the proxy is in_use, as advice chains will be cached._@param name name of the additional method that will match_@return this pointcut to allow for multiple additions in one line;public NameMatchMethodPointcut addMethodName(String name) {_		this.mappedNames.add(name)__		return this__	};add,another,eligible,method,name,in,addition,to,those,already,named,like,the,set,methods,this,method,is,for,use,when,configuring,proxies,before,a,proxy,is,used,p,b,nb,b,this,method,does,not,work,after,the,proxy,is,in,use,as,advice,chains,will,be,cached,param,name,name,of,the,additional,method,that,will,match,return,this,pointcut,to,allow,for,multiple,additions,in,one,line;public,name,match,method,pointcut,add,method,name,string,name,this,mapped,names,add,name,return,this
NameMatchMethodPointcut -> public NameMatchMethodPointcut addMethodName(String name);1498780456;Add another eligible method name, in addition to those already named._Like the set methods, this method is for use when configuring proxies,_before a proxy is used._<p><b>NB:</b> This method does not work after the proxy is in_use, as advice chains will be cached._@param name name of the additional method that will match_@return this pointcut to allow for multiple additions in one line;public NameMatchMethodPointcut addMethodName(String name) {_		this.mappedNames.add(name)__		return this__	};add,another,eligible,method,name,in,addition,to,those,already,named,like,the,set,methods,this,method,is,for,use,when,configuring,proxies,before,a,proxy,is,used,p,b,nb,b,this,method,does,not,work,after,the,proxy,is,in,use,as,advice,chains,will,be,cached,param,name,name,of,the,additional,method,that,will,match,return,this,pointcut,to,allow,for,multiple,additions,in,one,line;public,name,match,method,pointcut,add,method,name,string,name,this,mapped,names,add,name,return,this
NameMatchMethodPointcut -> public NameMatchMethodPointcut addMethodName(String name);1531945062;Add another eligible method name, in addition to those already named._Like the set methods, this method is for use when configuring proxies,_before a proxy is used._<p><b>NB:</b> This method does not work after the proxy is in_use, as advice chains will be cached._@param name name of the additional method that will match_@return this pointcut to allow for multiple additions in one line;public NameMatchMethodPointcut addMethodName(String name) {_		this.mappedNames.add(name)__		return this__	};add,another,eligible,method,name,in,addition,to,those,already,named,like,the,set,methods,this,method,is,for,use,when,configuring,proxies,before,a,proxy,is,used,p,b,nb,b,this,method,does,not,work,after,the,proxy,is,in,use,as,advice,chains,will,be,cached,param,name,name,of,the,additional,method,that,will,match,return,this,pointcut,to,allow,for,multiple,additions,in,one,line;public,name,match,method,pointcut,add,method,name,string,name,this,mapped,names,add,name,return,this
NameMatchMethodPointcut -> public NameMatchMethodPointcut addMethodName(String name);1532038651;Add another eligible method name, in addition to those already named._Like the set methods, this method is for use when configuring proxies,_before a proxy is used._<p><b>NB:</b> This method does not work after the proxy is in_use, as advice chains will be cached._@param name name of the additional method that will match_@return this pointcut to allow for multiple additions in one line;public NameMatchMethodPointcut addMethodName(String name) {_		this.mappedNames.add(name)__		return this__	};add,another,eligible,method,name,in,addition,to,those,already,named,like,the,set,methods,this,method,is,for,use,when,configuring,proxies,before,a,proxy,is,used,p,b,nb,b,this,method,does,not,work,after,the,proxy,is,in,use,as,advice,chains,will,be,cached,param,name,name,of,the,additional,method,that,will,match,return,this,pointcut,to,allow,for,multiple,additions,in,one,line;public,name,match,method,pointcut,add,method,name,string,name,this,mapped,names,add,name,return,this
NameMatchMethodPointcut -> public void setMappedNames(String[] mappedNames);1328020251;Set the method names defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setMappedNames(String[] mappedNames) {_		this.mappedNames = new LinkedList<String>()__		if (mappedNames != null) {_			this.mappedNames.addAll(Arrays.asList(mappedNames))__		}_	};set,the,method,names,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,mapped,names,string,mapped,names,this,mapped,names,new,linked,list,string,if,mapped,names,null,this,mapped,names,add,all,arrays,as,list,mapped,names
NameMatchMethodPointcut -> public void setMappedNames(String[] mappedNames);1356735495;Set the method names defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setMappedNames(String[] mappedNames) {_		this.mappedNames = new LinkedList<String>()__		if (mappedNames != null) {_			this.mappedNames.addAll(Arrays.asList(mappedNames))__		}_	};set,the,method,names,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,mapped,names,string,mapped,names,this,mapped,names,new,linked,list,string,if,mapped,names,null,this,mapped,names,add,all,arrays,as,list,mapped,names
NameMatchMethodPointcut -> public void setMappedNames(String[] mappedNames);1357119239;Set the method names defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setMappedNames(String[] mappedNames) {_		this.mappedNames = new LinkedList<String>()__		if (mappedNames != null) {_			this.mappedNames.addAll(Arrays.asList(mappedNames))__		}_	};set,the,method,names,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,mapped,names,string,mapped,names,this,mapped,names,new,linked,list,string,if,mapped,names,null,this,mapped,names,add,all,arrays,as,list,mapped,names
NameMatchMethodPointcut -> public void setMappedNames(String[] mappedNames);1368482696;Set the method names defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setMappedNames(String[] mappedNames) {_		this.mappedNames = new LinkedList<String>()__		if (mappedNames != null) {_			this.mappedNames.addAll(Arrays.asList(mappedNames))__		}_	};set,the,method,names,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,mapped,names,string,mapped,names,this,mapped,names,new,linked,list,string,if,mapped,names,null,this,mapped,names,add,all,arrays,as,list,mapped,names
NameMatchMethodPointcut -> public void setMappedNames(String[] mappedNames);1385412762;Set the method names defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setMappedNames(String[] mappedNames) {_		this.mappedNames = new LinkedList<String>()__		if (mappedNames != null) {_			this.mappedNames.addAll(Arrays.asList(mappedNames))__		}_	};set,the,method,names,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,mapped,names,string,mapped,names,this,mapped,names,new,linked,list,string,if,mapped,names,null,this,mapped,names,add,all,arrays,as,list,mapped,names
