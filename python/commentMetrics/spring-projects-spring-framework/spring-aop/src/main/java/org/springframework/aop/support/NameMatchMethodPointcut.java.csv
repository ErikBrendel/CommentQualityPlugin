commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Convenience method when we have only a single method name to match.  * Use either this method or {@code setMappedNames}, not both.  * @see #setMappedNames  */ ;/**  * Convenience method when we have only a single method name to match.  * Use either this method or {@code setMappedNames}, not both.  * @see #setMappedNames  */ public void setMappedName(String mappedName) {     setMappedNames(mappedName). }
true;public;1;3;/**  * Set the method names defining methods to match.  * Matching will be the union of all these. if any match,  * the pointcut matches.  */ ;/**  * Set the method names defining methods to match.  * Matching will be the union of all these. if any match,  * the pointcut matches.  */ public void setMappedNames(String... mappedNames) {     this.mappedNames = new ArrayList<>(Arrays.asList(mappedNames)). }
true;public;1;4;/**  * Add another eligible method name, in addition to those already named.  * Like the set methods, this method is for use when configuring proxies,  * before a proxy is used.  * <p><b>NB:</b> This method does not work after the proxy is in  * use, as advice chains will be cached.  * @param name name of the additional method that will match  * @return this pointcut to allow for multiple additions in one line  */ ;/**  * Add another eligible method name, in addition to those already named.  * Like the set methods, this method is for use when configuring proxies,  * before a proxy is used.  * <p><b>NB:</b> This method does not work after the proxy is in  * use, as advice chains will be cached.  * @param name name of the additional method that will match  * @return this pointcut to allow for multiple additions in one line  */ public NameMatchMethodPointcut addMethodName(String name) {     this.mappedNames.add(name).     return this. }
false;public;2;9;;@Override public boolean matches(Method method, Class<?> targetClass) {     for (String mappedName : this.mappedNames) {         if (mappedName.equals(method.getName()) || isMatch(method.getName(), mappedName)) {             return true.         }     }     return false. }
true;protected;2;3;/**  * Return if the given method name matches the mapped name.  * <p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,  * as well as direct equality. Can be overridden in subclasses.  * @param methodName the method name of the class  * @param mappedName the name in the descriptor  * @return if the names match  * @see org.springframework.util.PatternMatchUtils#simpleMatch(String, String)  */ ;/**  * Return if the given method name matches the mapped name.  * <p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,  * as well as direct equality. Can be overridden in subclasses.  * @param methodName the method name of the class  * @param mappedName the name in the descriptor  * @return if the names match  * @see org.springframework.util.PatternMatchUtils#simpleMatch(String, String)  */ protected boolean isMatch(String methodName, String mappedName) {     return PatternMatchUtils.simpleMatch(mappedName, methodName). }
false;public;1;5;;@Override public boolean equals(Object other) {     return (this == other || (other instanceof NameMatchMethodPointcut && this.mappedNames.equals(((NameMatchMethodPointcut) other).mappedNames))). }
false;public;0;4;;@Override public int hashCode() {     return this.mappedNames.hashCode(). }
