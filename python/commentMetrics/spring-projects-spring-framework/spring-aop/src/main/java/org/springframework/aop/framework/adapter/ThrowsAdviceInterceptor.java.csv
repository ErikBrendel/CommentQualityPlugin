# id;timestamp;commentText;codeText;commentWords;codeWords
ThrowsAdviceInterceptor -> public ThrowsAdviceInterceptor(Object throwsAdvice);1328020251;Create a new ThrowsAdviceInterceptor for the given ThrowsAdvice._@param throwsAdvice the advice object that defines the exception_handler methods (usually a {@link org.springframework.aop.ThrowsAdvice}_implementation);public ThrowsAdviceInterceptor(Object throwsAdvice) {_		Assert.notNull(throwsAdvice, "Advice must not be null")__		this.throwsAdvice = throwsAdvice___		Method[] methods = throwsAdvice.getClass().getMethods()__		for (Method method : methods) {_			if (method.getName().equals(AFTER_THROWING) &&_					(method.getParameterTypes().length == 1 || method.getParameterTypes().length == 4) &&_					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterTypes().length - 1])_				) {_				_				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterTypes().length - 1], method)__				if (logger.isDebugEnabled()) {_					logger.debug("Found exception handler method: " + method)__				}_			}_		}_		_		if (this.exceptionHandlerMap.isEmpty()) {_			throw new IllegalArgumentException(_					"At least one handler method must be found in class [" + throwsAdvice.getClass() + "]")__		}_	};create,a,new,throws,advice,interceptor,for,the,given,throws,advice,param,throws,advice,the,advice,object,that,defines,the,exception,handler,methods,usually,a,link,org,springframework,aop,throws,advice,implementation;public,throws,advice,interceptor,object,throws,advice,assert,not,null,throws,advice,advice,must,not,be,null,this,throws,advice,throws,advice,method,methods,throws,advice,get,class,get,methods,for,method,method,methods,if,method,get,name,equals,method,get,parameter,types,length,1,method,get,parameter,types,length,4,throwable,class,is,assignable,from,method,get,parameter,types,method,get,parameter,types,length,1,this,exception,handler,map,put,method,get,parameter,types,method,get,parameter,types,length,1,method,if,logger,is,debug,enabled,logger,debug,found,exception,handler,method,method,if,this,exception,handler,map,is,empty,throw,new,illegal,argument,exception,at,least,one,handler,method,must,be,found,in,class,throws,advice,get,class
ThrowsAdviceInterceptor -> public ThrowsAdviceInterceptor(Object throwsAdvice);1356735495;Create a new ThrowsAdviceInterceptor for the given ThrowsAdvice._@param throwsAdvice the advice object that defines the exception_handler methods (usually a {@link org.springframework.aop.ThrowsAdvice}_implementation);public ThrowsAdviceInterceptor(Object throwsAdvice) {_		Assert.notNull(throwsAdvice, "Advice must not be null")__		this.throwsAdvice = throwsAdvice___		Method[] methods = throwsAdvice.getClass().getMethods()__		for (Method method : methods) {_			if (method.getName().equals(AFTER_THROWING) &&_					(method.getParameterTypes().length == 1 || method.getParameterTypes().length == 4) &&_					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterTypes().length - 1])_				) {_				_				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterTypes().length - 1], method)__				if (logger.isDebugEnabled()) {_					logger.debug("Found exception handler method: " + method)__				}_			}_		}__		if (this.exceptionHandlerMap.isEmpty()) {_			throw new IllegalArgumentException(_					"At least one handler method must be found in class [" + throwsAdvice.getClass() + "]")__		}_	};create,a,new,throws,advice,interceptor,for,the,given,throws,advice,param,throws,advice,the,advice,object,that,defines,the,exception,handler,methods,usually,a,link,org,springframework,aop,throws,advice,implementation;public,throws,advice,interceptor,object,throws,advice,assert,not,null,throws,advice,advice,must,not,be,null,this,throws,advice,throws,advice,method,methods,throws,advice,get,class,get,methods,for,method,method,methods,if,method,get,name,equals,method,get,parameter,types,length,1,method,get,parameter,types,length,4,throwable,class,is,assignable,from,method,get,parameter,types,method,get,parameter,types,length,1,this,exception,handler,map,put,method,get,parameter,types,method,get,parameter,types,length,1,method,if,logger,is,debug,enabled,logger,debug,found,exception,handler,method,method,if,this,exception,handler,map,is,empty,throw,new,illegal,argument,exception,at,least,one,handler,method,must,be,found,in,class,throws,advice,get,class
ThrowsAdviceInterceptor -> public ThrowsAdviceInterceptor(Object throwsAdvice);1357119239;Create a new ThrowsAdviceInterceptor for the given ThrowsAdvice._@param throwsAdvice the advice object that defines the exception_handler methods (usually a {@link org.springframework.aop.ThrowsAdvice}_implementation);public ThrowsAdviceInterceptor(Object throwsAdvice) {_		Assert.notNull(throwsAdvice, "Advice must not be null")__		this.throwsAdvice = throwsAdvice___		Method[] methods = throwsAdvice.getClass().getMethods()__		for (Method method : methods) {_			if (method.getName().equals(AFTER_THROWING) &&_					(method.getParameterTypes().length == 1 || method.getParameterTypes().length == 4) &&_					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterTypes().length - 1])_				) {_				_				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterTypes().length - 1], method)__				if (logger.isDebugEnabled()) {_					logger.debug("Found exception handler method: " + method)__				}_			}_		}__		if (this.exceptionHandlerMap.isEmpty()) {_			throw new IllegalArgumentException(_					"At least one handler method must be found in class [" + throwsAdvice.getClass() + "]")__		}_	};create,a,new,throws,advice,interceptor,for,the,given,throws,advice,param,throws,advice,the,advice,object,that,defines,the,exception,handler,methods,usually,a,link,org,springframework,aop,throws,advice,implementation;public,throws,advice,interceptor,object,throws,advice,assert,not,null,throws,advice,advice,must,not,be,null,this,throws,advice,throws,advice,method,methods,throws,advice,get,class,get,methods,for,method,method,methods,if,method,get,name,equals,method,get,parameter,types,length,1,method,get,parameter,types,length,4,throwable,class,is,assignable,from,method,get,parameter,types,method,get,parameter,types,length,1,this,exception,handler,map,put,method,get,parameter,types,method,get,parameter,types,length,1,method,if,logger,is,debug,enabled,logger,debug,found,exception,handler,method,method,if,this,exception,handler,map,is,empty,throw,new,illegal,argument,exception,at,least,one,handler,method,must,be,found,in,class,throws,advice,get,class
ThrowsAdviceInterceptor -> public ThrowsAdviceInterceptor(Object throwsAdvice);1368482696;Create a new ThrowsAdviceInterceptor for the given ThrowsAdvice._@param throwsAdvice the advice object that defines the exception_handler methods (usually a {@link org.springframework.aop.ThrowsAdvice}_implementation);public ThrowsAdviceInterceptor(Object throwsAdvice) {_		Assert.notNull(throwsAdvice, "Advice must not be null")__		this.throwsAdvice = throwsAdvice___		Method[] methods = throwsAdvice.getClass().getMethods()__		for (Method method : methods) {_			if (method.getName().equals(AFTER_THROWING) &&_					(method.getParameterTypes().length == 1 || method.getParameterTypes().length == 4) &&_					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterTypes().length - 1])_				) {_				_				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterTypes().length - 1], method)__				if (logger.isDebugEnabled()) {_					logger.debug("Found exception handler method: " + method)__				}_			}_		}__		if (this.exceptionHandlerMap.isEmpty()) {_			throw new IllegalArgumentException(_					"At least one handler method must be found in class [" + throwsAdvice.getClass() + "]")__		}_	};create,a,new,throws,advice,interceptor,for,the,given,throws,advice,param,throws,advice,the,advice,object,that,defines,the,exception,handler,methods,usually,a,link,org,springframework,aop,throws,advice,implementation;public,throws,advice,interceptor,object,throws,advice,assert,not,null,throws,advice,advice,must,not,be,null,this,throws,advice,throws,advice,method,methods,throws,advice,get,class,get,methods,for,method,method,methods,if,method,get,name,equals,method,get,parameter,types,length,1,method,get,parameter,types,length,4,throwable,class,is,assignable,from,method,get,parameter,types,method,get,parameter,types,length,1,this,exception,handler,map,put,method,get,parameter,types,method,get,parameter,types,length,1,method,if,logger,is,debug,enabled,logger,debug,found,exception,handler,method,method,if,this,exception,handler,map,is,empty,throw,new,illegal,argument,exception,at,least,one,handler,method,must,be,found,in,class,throws,advice,get,class
ThrowsAdviceInterceptor -> public ThrowsAdviceInterceptor(Object throwsAdvice);1385412762;Create a new ThrowsAdviceInterceptor for the given ThrowsAdvice._@param throwsAdvice the advice object that defines the exception_handler methods (usually a {@link org.springframework.aop.ThrowsAdvice}_implementation);public ThrowsAdviceInterceptor(Object throwsAdvice) {_		Assert.notNull(throwsAdvice, "Advice must not be null")__		this.throwsAdvice = throwsAdvice___		Method[] methods = throwsAdvice.getClass().getMethods()__		for (Method method : methods) {_			if (method.getName().equals(AFTER_THROWING) &&_					(method.getParameterTypes().length == 1 || method.getParameterTypes().length == 4) &&_					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterTypes().length - 1])_				) {_				_				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterTypes().length - 1], method)__				if (logger.isDebugEnabled()) {_					logger.debug("Found exception handler method: " + method)__				}_			}_		}__		if (this.exceptionHandlerMap.isEmpty()) {_			throw new IllegalArgumentException(_					"At least one handler method must be found in class [" + throwsAdvice.getClass() + "]")__		}_	};create,a,new,throws,advice,interceptor,for,the,given,throws,advice,param,throws,advice,the,advice,object,that,defines,the,exception,handler,methods,usually,a,link,org,springframework,aop,throws,advice,implementation;public,throws,advice,interceptor,object,throws,advice,assert,not,null,throws,advice,advice,must,not,be,null,this,throws,advice,throws,advice,method,methods,throws,advice,get,class,get,methods,for,method,method,methods,if,method,get,name,equals,method,get,parameter,types,length,1,method,get,parameter,types,length,4,throwable,class,is,assignable,from,method,get,parameter,types,method,get,parameter,types,length,1,this,exception,handler,map,put,method,get,parameter,types,method,get,parameter,types,length,1,method,if,logger,is,debug,enabled,logger,debug,found,exception,handler,method,method,if,this,exception,handler,map,is,empty,throw,new,illegal,argument,exception,at,least,one,handler,method,must,be,found,in,class,throws,advice,get,class
ThrowsAdviceInterceptor -> public ThrowsAdviceInterceptor(Object throwsAdvice);1432125256;Create a new ThrowsAdviceInterceptor for the given ThrowsAdvice._@param throwsAdvice the advice object that defines the exception_handler methods (usually a {@link org.springframework.aop.ThrowsAdvice}_implementation);public ThrowsAdviceInterceptor(Object throwsAdvice) {_		Assert.notNull(throwsAdvice, "Advice must not be null")__		this.throwsAdvice = throwsAdvice___		Method[] methods = throwsAdvice.getClass().getMethods()__		for (Method method : methods) {_			if (method.getName().equals(AFTER_THROWING) &&_					(method.getParameterTypes().length == 1 || method.getParameterTypes().length == 4) &&_					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterTypes().length - 1])_				) {_				_				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterTypes().length - 1], method)__				if (logger.isDebugEnabled()) {_					logger.debug("Found exception handler method: " + method)__				}_			}_		}__		if (this.exceptionHandlerMap.isEmpty()) {_			throw new IllegalArgumentException(_					"At least one handler method must be found in class [" + throwsAdvice.getClass() + "]")__		}_	};create,a,new,throws,advice,interceptor,for,the,given,throws,advice,param,throws,advice,the,advice,object,that,defines,the,exception,handler,methods,usually,a,link,org,springframework,aop,throws,advice,implementation;public,throws,advice,interceptor,object,throws,advice,assert,not,null,throws,advice,advice,must,not,be,null,this,throws,advice,throws,advice,method,methods,throws,advice,get,class,get,methods,for,method,method,methods,if,method,get,name,equals,method,get,parameter,types,length,1,method,get,parameter,types,length,4,throwable,class,is,assignable,from,method,get,parameter,types,method,get,parameter,types,length,1,this,exception,handler,map,put,method,get,parameter,types,method,get,parameter,types,length,1,method,if,logger,is,debug,enabled,logger,debug,found,exception,handler,method,method,if,this,exception,handler,map,is,empty,throw,new,illegal,argument,exception,at,least,one,handler,method,must,be,found,in,class,throws,advice,get,class
ThrowsAdviceInterceptor -> public ThrowsAdviceInterceptor(Object throwsAdvice);1467730834;Create a new ThrowsAdviceInterceptor for the given ThrowsAdvice._@param throwsAdvice the advice object that defines the exception_handler methods (usually a {@link org.springframework.aop.ThrowsAdvice}_implementation);public ThrowsAdviceInterceptor(Object throwsAdvice) {_		Assert.notNull(throwsAdvice, "Advice must not be null")__		this.throwsAdvice = throwsAdvice___		Method[] methods = throwsAdvice.getClass().getMethods()__		for (Method method : methods) {_			if (method.getName().equals(AFTER_THROWING) &&_					(method.getParameterTypes().length == 1 || method.getParameterTypes().length == 4) &&_					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterTypes().length - 1])_				) {_				_				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterTypes().length - 1], method)__				if (logger.isDebugEnabled()) {_					logger.debug("Found exception handler method: " + method)__				}_			}_		}__		if (this.exceptionHandlerMap.isEmpty()) {_			throw new IllegalArgumentException(_					"At least one handler method must be found in class [" + throwsAdvice.getClass() + "]")__		}_	};create,a,new,throws,advice,interceptor,for,the,given,throws,advice,param,throws,advice,the,advice,object,that,defines,the,exception,handler,methods,usually,a,link,org,springframework,aop,throws,advice,implementation;public,throws,advice,interceptor,object,throws,advice,assert,not,null,throws,advice,advice,must,not,be,null,this,throws,advice,throws,advice,method,methods,throws,advice,get,class,get,methods,for,method,method,methods,if,method,get,name,equals,method,get,parameter,types,length,1,method,get,parameter,types,length,4,throwable,class,is,assignable,from,method,get,parameter,types,method,get,parameter,types,length,1,this,exception,handler,map,put,method,get,parameter,types,method,get,parameter,types,length,1,method,if,logger,is,debug,enabled,logger,debug,found,exception,handler,method,method,if,this,exception,handler,map,is,empty,throw,new,illegal,argument,exception,at,least,one,handler,method,must,be,found,in,class,throws,advice,get,class
ThrowsAdviceInterceptor -> public ThrowsAdviceInterceptor(Object throwsAdvice);1467846264;Create a new ThrowsAdviceInterceptor for the given ThrowsAdvice._@param throwsAdvice the advice object that defines the exception_handler methods (usually a {@link org.springframework.aop.ThrowsAdvice}_implementation);public ThrowsAdviceInterceptor(Object throwsAdvice) {_		Assert.notNull(throwsAdvice, "Advice must not be null")__		this.throwsAdvice = throwsAdvice___		Method[] methods = throwsAdvice.getClass().getMethods()__		for (Method method : methods) {_			if (method.getName().equals(AFTER_THROWING) &&_					(method.getParameterCount() == 1 || method.getParameterCount() == 4) &&_					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterCount() - 1])_				) {_				_				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterCount() - 1], method)__				if (logger.isDebugEnabled()) {_					logger.debug("Found exception handler method: " + method)__				}_			}_		}__		if (this.exceptionHandlerMap.isEmpty()) {_			throw new IllegalArgumentException(_					"At least one handler method must be found in class [" + throwsAdvice.getClass() + "]")__		}_	};create,a,new,throws,advice,interceptor,for,the,given,throws,advice,param,throws,advice,the,advice,object,that,defines,the,exception,handler,methods,usually,a,link,org,springframework,aop,throws,advice,implementation;public,throws,advice,interceptor,object,throws,advice,assert,not,null,throws,advice,advice,must,not,be,null,this,throws,advice,throws,advice,method,methods,throws,advice,get,class,get,methods,for,method,method,methods,if,method,get,name,equals,method,get,parameter,count,1,method,get,parameter,count,4,throwable,class,is,assignable,from,method,get,parameter,types,method,get,parameter,count,1,this,exception,handler,map,put,method,get,parameter,types,method,get,parameter,count,1,method,if,logger,is,debug,enabled,logger,debug,found,exception,handler,method,method,if,this,exception,handler,map,is,empty,throw,new,illegal,argument,exception,at,least,one,handler,method,must,be,found,in,class,throws,advice,get,class
ThrowsAdviceInterceptor -> public ThrowsAdviceInterceptor(Object throwsAdvice);1496837955;Create a new ThrowsAdviceInterceptor for the given ThrowsAdvice._@param throwsAdvice the advice object that defines the exception_handler methods (usually a {@link org.springframework.aop.ThrowsAdvice}_implementation);public ThrowsAdviceInterceptor(Object throwsAdvice) {_		Assert.notNull(throwsAdvice, "Advice must not be null")__		this.throwsAdvice = throwsAdvice___		Method[] methods = throwsAdvice.getClass().getMethods()__		for (Method method : methods) {_			if (method.getName().equals(AFTER_THROWING) &&_					(method.getParameterCount() == 1 || method.getParameterCount() == 4) &&_					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterCount() - 1])_				) {_				_				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterCount() - 1], method)__				if (logger.isDebugEnabled()) {_					logger.debug("Found exception handler method: " + method)__				}_			}_		}__		if (this.exceptionHandlerMap.isEmpty()) {_			throw new IllegalArgumentException(_					"At least one handler method must be found in class [" + throwsAdvice.getClass() + "]")__		}_	};create,a,new,throws,advice,interceptor,for,the,given,throws,advice,param,throws,advice,the,advice,object,that,defines,the,exception,handler,methods,usually,a,link,org,springframework,aop,throws,advice,implementation;public,throws,advice,interceptor,object,throws,advice,assert,not,null,throws,advice,advice,must,not,be,null,this,throws,advice,throws,advice,method,methods,throws,advice,get,class,get,methods,for,method,method,methods,if,method,get,name,equals,method,get,parameter,count,1,method,get,parameter,count,4,throwable,class,is,assignable,from,method,get,parameter,types,method,get,parameter,count,1,this,exception,handler,map,put,method,get,parameter,types,method,get,parameter,count,1,method,if,logger,is,debug,enabled,logger,debug,found,exception,handler,method,method,if,this,exception,handler,map,is,empty,throw,new,illegal,argument,exception,at,least,one,handler,method,must,be,found,in,class,throws,advice,get,class
ThrowsAdviceInterceptor -> public ThrowsAdviceInterceptor(Object throwsAdvice);1530174524;Create a new ThrowsAdviceInterceptor for the given ThrowsAdvice._@param throwsAdvice the advice object that defines the exception_handler methods (usually a {@link org.springframework.aop.ThrowsAdvice}_implementation);public ThrowsAdviceInterceptor(Object throwsAdvice) {_		Assert.notNull(throwsAdvice, "Advice must not be null")__		this.throwsAdvice = throwsAdvice___		Method[] methods = throwsAdvice.getClass().getMethods()__		for (Method method : methods) {_			if (method.getName().equals(AFTER_THROWING) &&_					(method.getParameterCount() == 1 || method.getParameterCount() == 4) &&_					Throwable.class.isAssignableFrom(method.getParameterTypes()[method.getParameterCount() - 1])_				) {_				_				this.exceptionHandlerMap.put(method.getParameterTypes()[method.getParameterCount() - 1], method)__				if (logger.isDebugEnabled()) {_					logger.debug("Found exception handler method: " + method)__				}_			}_		}__		if (this.exceptionHandlerMap.isEmpty()) {_			throw new IllegalArgumentException(_					"At least one handler method must be found in class [" + throwsAdvice.getClass() + "]")__		}_	};create,a,new,throws,advice,interceptor,for,the,given,throws,advice,param,throws,advice,the,advice,object,that,defines,the,exception,handler,methods,usually,a,link,org,springframework,aop,throws,advice,implementation;public,throws,advice,interceptor,object,throws,advice,assert,not,null,throws,advice,advice,must,not,be,null,this,throws,advice,throws,advice,method,methods,throws,advice,get,class,get,methods,for,method,method,methods,if,method,get,name,equals,method,get,parameter,count,1,method,get,parameter,count,4,throwable,class,is,assignable,from,method,get,parameter,types,method,get,parameter,count,1,this,exception,handler,map,put,method,get,parameter,types,method,get,parameter,count,1,method,if,logger,is,debug,enabled,logger,debug,found,exception,handler,method,method,if,this,exception,handler,map,is,empty,throw,new,illegal,argument,exception,at,least,one,handler,method,must,be,found,in,class,throws,advice,get,class
ThrowsAdviceInterceptor -> public ThrowsAdviceInterceptor(Object throwsAdvice);1532542334;Create a new ThrowsAdviceInterceptor for the given ThrowsAdvice._@param throwsAdvice the advice object that defines the exception handler methods_(usually a {@link org.springframework.aop.ThrowsAdvice} implementation);public ThrowsAdviceInterceptor(Object throwsAdvice) {_		Assert.notNull(throwsAdvice, "Advice must not be null")__		this.throwsAdvice = throwsAdvice___		Method[] methods = throwsAdvice.getClass().getMethods()__		for (Method method : methods) {_			if (method.getName().equals(AFTER_THROWING) &&_					(method.getParameterCount() == 1 || method.getParameterCount() == 4)) {_				Class<?> throwableParam = method.getParameterTypes()[method.getParameterCount() - 1]__				if (Throwable.class.isAssignableFrom(throwableParam)) {_					_					this.exceptionHandlerMap.put(throwableParam, method)__					if (logger.isDebugEnabled()) {_						logger.debug("Found exception handler method on throws advice: " + method)__					}_				}_			}_		}__		if (this.exceptionHandlerMap.isEmpty()) {_			throw new IllegalArgumentException(_					"At least one handler method must be found in class [" + throwsAdvice.getClass() + "]")__		}_	};create,a,new,throws,advice,interceptor,for,the,given,throws,advice,param,throws,advice,the,advice,object,that,defines,the,exception,handler,methods,usually,a,link,org,springframework,aop,throws,advice,implementation;public,throws,advice,interceptor,object,throws,advice,assert,not,null,throws,advice,advice,must,not,be,null,this,throws,advice,throws,advice,method,methods,throws,advice,get,class,get,methods,for,method,method,methods,if,method,get,name,equals,method,get,parameter,count,1,method,get,parameter,count,4,class,throwable,param,method,get,parameter,types,method,get,parameter,count,1,if,throwable,class,is,assignable,from,throwable,param,this,exception,handler,map,put,throwable,param,method,if,logger,is,debug,enabled,logger,debug,found,exception,handler,method,on,throws,advice,method,if,this,exception,handler,map,is,empty,throw,new,illegal,argument,exception,at,least,one,handler,method,must,be,found,in,class,throws,advice,get,class
ThrowsAdviceInterceptor -> public ThrowsAdviceInterceptor(Object throwsAdvice);1532706365;Create a new ThrowsAdviceInterceptor for the given ThrowsAdvice._@param throwsAdvice the advice object that defines the exception handler methods_(usually a {@link org.springframework.aop.ThrowsAdvice} implementation);public ThrowsAdviceInterceptor(Object throwsAdvice) {_		Assert.notNull(throwsAdvice, "Advice must not be null")__		this.throwsAdvice = throwsAdvice___		Method[] methods = throwsAdvice.getClass().getMethods()__		for (Method method : methods) {_			if (method.getName().equals(AFTER_THROWING) &&_					(method.getParameterCount() == 1 || method.getParameterCount() == 4)) {_				Class<?> throwableParam = method.getParameterTypes()[method.getParameterCount() - 1]__				if (Throwable.class.isAssignableFrom(throwableParam)) {_					_					this.exceptionHandlerMap.put(throwableParam, method)__					if (logger.isDebugEnabled()) {_						logger.debug("Found exception handler method on throws advice: " + method)__					}_				}_			}_		}__		if (this.exceptionHandlerMap.isEmpty()) {_			throw new IllegalArgumentException(_					"At least one handler method must be found in class [" + throwsAdvice.getClass() + "]")__		}_	};create,a,new,throws,advice,interceptor,for,the,given,throws,advice,param,throws,advice,the,advice,object,that,defines,the,exception,handler,methods,usually,a,link,org,springframework,aop,throws,advice,implementation;public,throws,advice,interceptor,object,throws,advice,assert,not,null,throws,advice,advice,must,not,be,null,this,throws,advice,throws,advice,method,methods,throws,advice,get,class,get,methods,for,method,method,methods,if,method,get,name,equals,method,get,parameter,count,1,method,get,parameter,count,4,class,throwable,param,method,get,parameter,types,method,get,parameter,count,1,if,throwable,class,is,assignable,from,throwable,param,this,exception,handler,map,put,throwable,param,method,if,logger,is,debug,enabled,logger,debug,found,exception,handler,method,on,throws,advice,method,if,this,exception,handler,map,is,empty,throw,new,illegal,argument,exception,at,least,one,handler,method,must,be,found,in,class,throws,advice,get,class
ThrowsAdviceInterceptor -> private Method getExceptionHandler(Throwable exception);1328020251;Determine the exception handle method. Can return null if not found._@param exception the exception thrown_@return a handler for the given exception type;private Method getExceptionHandler(Throwable exception) {_		Class exceptionClass = exception.getClass()__		if (logger.isTraceEnabled()) {_			logger.trace("Trying to find handler for exception of type [" + exceptionClass.getName() + "]")__		}_		Method handler = this.exceptionHandlerMap.get(exceptionClass)__		while (handler == null && !exceptionClass.equals(Throwable.class)) {_			exceptionClass = exceptionClass.getSuperclass()__			handler = this.exceptionHandlerMap.get(exceptionClass)__		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Found handler for exception of type [" + exceptionClass.getName() + "]: " + handler)__		}_		return handler__	};determine,the,exception,handle,method,can,return,null,if,not,found,param,exception,the,exception,thrown,return,a,handler,for,the,given,exception,type;private,method,get,exception,handler,throwable,exception,class,exception,class,exception,get,class,if,logger,is,trace,enabled,logger,trace,trying,to,find,handler,for,exception,of,type,exception,class,get,name,method,handler,this,exception,handler,map,get,exception,class,while,handler,null,exception,class,equals,throwable,class,exception,class,exception,class,get,superclass,handler,this,exception,handler,map,get,exception,class,if,handler,null,logger,is,debug,enabled,logger,debug,found,handler,for,exception,of,type,exception,class,get,name,handler,return,handler
ThrowsAdviceInterceptor -> private Method getExceptionHandler(Throwable exception);1356735495;Determine the exception handle method. Can return null if not found._@param exception the exception thrown_@return a handler for the given exception type;private Method getExceptionHandler(Throwable exception) {_		Class exceptionClass = exception.getClass()__		if (logger.isTraceEnabled()) {_			logger.trace("Trying to find handler for exception of type [" + exceptionClass.getName() + "]")__		}_		Method handler = this.exceptionHandlerMap.get(exceptionClass)__		while (handler == null && !exceptionClass.equals(Throwable.class)) {_			exceptionClass = exceptionClass.getSuperclass()__			handler = this.exceptionHandlerMap.get(exceptionClass)__		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Found handler for exception of type [" + exceptionClass.getName() + "]: " + handler)__		}_		return handler__	};determine,the,exception,handle,method,can,return,null,if,not,found,param,exception,the,exception,thrown,return,a,handler,for,the,given,exception,type;private,method,get,exception,handler,throwable,exception,class,exception,class,exception,get,class,if,logger,is,trace,enabled,logger,trace,trying,to,find,handler,for,exception,of,type,exception,class,get,name,method,handler,this,exception,handler,map,get,exception,class,while,handler,null,exception,class,equals,throwable,class,exception,class,exception,class,get,superclass,handler,this,exception,handler,map,get,exception,class,if,handler,null,logger,is,debug,enabled,logger,debug,found,handler,for,exception,of,type,exception,class,get,name,handler,return,handler
ThrowsAdviceInterceptor -> private Method getExceptionHandler(Throwable exception);1357119239;Determine the exception handle method. Can return null if not found._@param exception the exception thrown_@return a handler for the given exception type;private Method getExceptionHandler(Throwable exception) {_		Class exceptionClass = exception.getClass()__		if (logger.isTraceEnabled()) {_			logger.trace("Trying to find handler for exception of type [" + exceptionClass.getName() + "]")__		}_		Method handler = this.exceptionHandlerMap.get(exceptionClass)__		while (handler == null && !exceptionClass.equals(Throwable.class)) {_			exceptionClass = exceptionClass.getSuperclass()__			handler = this.exceptionHandlerMap.get(exceptionClass)__		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Found handler for exception of type [" + exceptionClass.getName() + "]: " + handler)__		}_		return handler__	};determine,the,exception,handle,method,can,return,null,if,not,found,param,exception,the,exception,thrown,return,a,handler,for,the,given,exception,type;private,method,get,exception,handler,throwable,exception,class,exception,class,exception,get,class,if,logger,is,trace,enabled,logger,trace,trying,to,find,handler,for,exception,of,type,exception,class,get,name,method,handler,this,exception,handler,map,get,exception,class,while,handler,null,exception,class,equals,throwable,class,exception,class,exception,class,get,superclass,handler,this,exception,handler,map,get,exception,class,if,handler,null,logger,is,debug,enabled,logger,debug,found,handler,for,exception,of,type,exception,class,get,name,handler,return,handler
ThrowsAdviceInterceptor -> private Method getExceptionHandler(Throwable exception);1368482696;Determine the exception handle method. Can return null if not found._@param exception the exception thrown_@return a handler for the given exception type;private Method getExceptionHandler(Throwable exception) {_		Class exceptionClass = exception.getClass()__		if (logger.isTraceEnabled()) {_			logger.trace("Trying to find handler for exception of type [" + exceptionClass.getName() + "]")__		}_		Method handler = this.exceptionHandlerMap.get(exceptionClass)__		while (handler == null && !exceptionClass.equals(Throwable.class)) {_			exceptionClass = exceptionClass.getSuperclass()__			handler = this.exceptionHandlerMap.get(exceptionClass)__		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Found handler for exception of type [" + exceptionClass.getName() + "]: " + handler)__		}_		return handler__	};determine,the,exception,handle,method,can,return,null,if,not,found,param,exception,the,exception,thrown,return,a,handler,for,the,given,exception,type;private,method,get,exception,handler,throwable,exception,class,exception,class,exception,get,class,if,logger,is,trace,enabled,logger,trace,trying,to,find,handler,for,exception,of,type,exception,class,get,name,method,handler,this,exception,handler,map,get,exception,class,while,handler,null,exception,class,equals,throwable,class,exception,class,exception,class,get,superclass,handler,this,exception,handler,map,get,exception,class,if,handler,null,logger,is,debug,enabled,logger,debug,found,handler,for,exception,of,type,exception,class,get,name,handler,return,handler
ThrowsAdviceInterceptor -> private Method getExceptionHandler(Throwable exception);1385412762;Determine the exception handle method. Can return null if not found._@param exception the exception thrown_@return a handler for the given exception type;private Method getExceptionHandler(Throwable exception) {_		Class<?> exceptionClass = exception.getClass()__		if (logger.isTraceEnabled()) {_			logger.trace("Trying to find handler for exception of type [" + exceptionClass.getName() + "]")__		}_		Method handler = this.exceptionHandlerMap.get(exceptionClass)__		while (handler == null && !exceptionClass.equals(Throwable.class)) {_			exceptionClass = exceptionClass.getSuperclass()__			handler = this.exceptionHandlerMap.get(exceptionClass)__		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Found handler for exception of type [" + exceptionClass.getName() + "]: " + handler)__		}_		return handler__	};determine,the,exception,handle,method,can,return,null,if,not,found,param,exception,the,exception,thrown,return,a,handler,for,the,given,exception,type;private,method,get,exception,handler,throwable,exception,class,exception,class,exception,get,class,if,logger,is,trace,enabled,logger,trace,trying,to,find,handler,for,exception,of,type,exception,class,get,name,method,handler,this,exception,handler,map,get,exception,class,while,handler,null,exception,class,equals,throwable,class,exception,class,exception,class,get,superclass,handler,this,exception,handler,map,get,exception,class,if,handler,null,logger,is,debug,enabled,logger,debug,found,handler,for,exception,of,type,exception,class,get,name,handler,return,handler
ThrowsAdviceInterceptor -> private Method getExceptionHandler(Throwable exception);1432125256;Determine the exception handle method. Can return null if not found._@param exception the exception thrown_@return a handler for the given exception type;private Method getExceptionHandler(Throwable exception) {_		Class<?> exceptionClass = exception.getClass()__		if (logger.isTraceEnabled()) {_			logger.trace("Trying to find handler for exception of type [" + exceptionClass.getName() + "]")__		}_		Method handler = this.exceptionHandlerMap.get(exceptionClass)__		while (handler == null && exceptionClass != Throwable.class) {_			exceptionClass = exceptionClass.getSuperclass()__			handler = this.exceptionHandlerMap.get(exceptionClass)__		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Found handler for exception of type [" + exceptionClass.getName() + "]: " + handler)__		}_		return handler__	};determine,the,exception,handle,method,can,return,null,if,not,found,param,exception,the,exception,thrown,return,a,handler,for,the,given,exception,type;private,method,get,exception,handler,throwable,exception,class,exception,class,exception,get,class,if,logger,is,trace,enabled,logger,trace,trying,to,find,handler,for,exception,of,type,exception,class,get,name,method,handler,this,exception,handler,map,get,exception,class,while,handler,null,exception,class,throwable,class,exception,class,exception,class,get,superclass,handler,this,exception,handler,map,get,exception,class,if,handler,null,logger,is,debug,enabled,logger,debug,found,handler,for,exception,of,type,exception,class,get,name,handler,return,handler
ThrowsAdviceInterceptor -> private Method getExceptionHandler(Throwable exception);1467730834;Determine the exception handle method. Can return null if not found._@param exception the exception thrown_@return a handler for the given exception type;private Method getExceptionHandler(Throwable exception) {_		Class<?> exceptionClass = exception.getClass()__		if (logger.isTraceEnabled()) {_			logger.trace("Trying to find handler for exception of type [" + exceptionClass.getName() + "]")__		}_		Method handler = this.exceptionHandlerMap.get(exceptionClass)__		while (handler == null && exceptionClass != Throwable.class) {_			exceptionClass = exceptionClass.getSuperclass()__			handler = this.exceptionHandlerMap.get(exceptionClass)__		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Found handler for exception of type [" + exceptionClass.getName() + "]: " + handler)__		}_		return handler__	};determine,the,exception,handle,method,can,return,null,if,not,found,param,exception,the,exception,thrown,return,a,handler,for,the,given,exception,type;private,method,get,exception,handler,throwable,exception,class,exception,class,exception,get,class,if,logger,is,trace,enabled,logger,trace,trying,to,find,handler,for,exception,of,type,exception,class,get,name,method,handler,this,exception,handler,map,get,exception,class,while,handler,null,exception,class,throwable,class,exception,class,exception,class,get,superclass,handler,this,exception,handler,map,get,exception,class,if,handler,null,logger,is,debug,enabled,logger,debug,found,handler,for,exception,of,type,exception,class,get,name,handler,return,handler
ThrowsAdviceInterceptor -> private Method getExceptionHandler(Throwable exception);1467846264;Determine the exception handle method. Can return null if not found._@param exception the exception thrown_@return a handler for the given exception type;private Method getExceptionHandler(Throwable exception) {_		Class<?> exceptionClass = exception.getClass()__		if (logger.isTraceEnabled()) {_			logger.trace("Trying to find handler for exception of type [" + exceptionClass.getName() + "]")__		}_		Method handler = this.exceptionHandlerMap.get(exceptionClass)__		while (handler == null && exceptionClass != Throwable.class) {_			exceptionClass = exceptionClass.getSuperclass()__			handler = this.exceptionHandlerMap.get(exceptionClass)__		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Found handler for exception of type [" + exceptionClass.getName() + "]: " + handler)__		}_		return handler__	};determine,the,exception,handle,method,can,return,null,if,not,found,param,exception,the,exception,thrown,return,a,handler,for,the,given,exception,type;private,method,get,exception,handler,throwable,exception,class,exception,class,exception,get,class,if,logger,is,trace,enabled,logger,trace,trying,to,find,handler,for,exception,of,type,exception,class,get,name,method,handler,this,exception,handler,map,get,exception,class,while,handler,null,exception,class,throwable,class,exception,class,exception,class,get,superclass,handler,this,exception,handler,map,get,exception,class,if,handler,null,logger,is,debug,enabled,logger,debug,found,handler,for,exception,of,type,exception,class,get,name,handler,return,handler
ThrowsAdviceInterceptor -> @Nullable 	private Method getExceptionHandler(Throwable exception);1496837955;Determine the exception handle method. Can return null if not found._@param exception the exception thrown_@return a handler for the given exception type;@Nullable_	private Method getExceptionHandler(Throwable exception) {_		Class<?> exceptionClass = exception.getClass()__		if (logger.isTraceEnabled()) {_			logger.trace("Trying to find handler for exception of type [" + exceptionClass.getName() + "]")__		}_		Method handler = this.exceptionHandlerMap.get(exceptionClass)__		while (handler == null && exceptionClass != Throwable.class) {_			exceptionClass = exceptionClass.getSuperclass()__			handler = this.exceptionHandlerMap.get(exceptionClass)__		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Found handler for exception of type [" + exceptionClass.getName() + "]: " + handler)__		}_		return handler__	};determine,the,exception,handle,method,can,return,null,if,not,found,param,exception,the,exception,thrown,return,a,handler,for,the,given,exception,type;nullable,private,method,get,exception,handler,throwable,exception,class,exception,class,exception,get,class,if,logger,is,trace,enabled,logger,trace,trying,to,find,handler,for,exception,of,type,exception,class,get,name,method,handler,this,exception,handler,map,get,exception,class,while,handler,null,exception,class,throwable,class,exception,class,exception,class,get,superclass,handler,this,exception,handler,map,get,exception,class,if,handler,null,logger,is,debug,enabled,logger,debug,found,handler,for,exception,of,type,exception,class,get,name,handler,return,handler
ThrowsAdviceInterceptor -> @Nullable 	private Method getExceptionHandler(Throwable exception);1530174524;Determine the exception handle method. Can return null if not found._@param exception the exception thrown_@return a handler for the given exception type;@Nullable_	private Method getExceptionHandler(Throwable exception) {_		Class<?> exceptionClass = exception.getClass()__		if (logger.isTraceEnabled()) {_			logger.trace("Trying to find handler for exception of type [" + exceptionClass.getName() + "]")__		}_		Method handler = this.exceptionHandlerMap.get(exceptionClass)__		while (handler == null && exceptionClass != Throwable.class) {_			exceptionClass = exceptionClass.getSuperclass()__			handler = this.exceptionHandlerMap.get(exceptionClass)__		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Found handler for exception of type [" + exceptionClass.getName() + "]: " + handler)__		}_		return handler__	};determine,the,exception,handle,method,can,return,null,if,not,found,param,exception,the,exception,thrown,return,a,handler,for,the,given,exception,type;nullable,private,method,get,exception,handler,throwable,exception,class,exception,class,exception,get,class,if,logger,is,trace,enabled,logger,trace,trying,to,find,handler,for,exception,of,type,exception,class,get,name,method,handler,this,exception,handler,map,get,exception,class,while,handler,null,exception,class,throwable,class,exception,class,exception,class,get,superclass,handler,this,exception,handler,map,get,exception,class,if,handler,null,logger,is,debug,enabled,logger,debug,found,handler,for,exception,of,type,exception,class,get,name,handler,return,handler
ThrowsAdviceInterceptor -> @Nullable 	private Method getExceptionHandler(Throwable exception);1532542334;Determine the exception handle method for the given exception._@param exception the exception thrown_@return a handler for the given exception type, or {@code null} if none found;@Nullable_	private Method getExceptionHandler(Throwable exception) {_		Class<?> exceptionClass = exception.getClass()__		if (logger.isTraceEnabled()) {_			logger.trace("Trying to find handler for exception of type [" + exceptionClass.getName() + "]")__		}_		Method handler = this.exceptionHandlerMap.get(exceptionClass)__		while (handler == null && exceptionClass != Throwable.class) {_			exceptionClass = exceptionClass.getSuperclass()__			handler = this.exceptionHandlerMap.get(exceptionClass)__		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Found handler for exception of type [" + exceptionClass.getName() + "]: " + handler)__		}_		return handler__	};determine,the,exception,handle,method,for,the,given,exception,param,exception,the,exception,thrown,return,a,handler,for,the,given,exception,type,or,code,null,if,none,found;nullable,private,method,get,exception,handler,throwable,exception,class,exception,class,exception,get,class,if,logger,is,trace,enabled,logger,trace,trying,to,find,handler,for,exception,of,type,exception,class,get,name,method,handler,this,exception,handler,map,get,exception,class,while,handler,null,exception,class,throwable,class,exception,class,exception,class,get,superclass,handler,this,exception,handler,map,get,exception,class,if,handler,null,logger,is,debug,enabled,logger,debug,found,handler,for,exception,of,type,exception,class,get,name,handler,return,handler
ThrowsAdviceInterceptor -> @Nullable 	private Method getExceptionHandler(Throwable exception);1532706365;Determine the exception handle method for the given exception._@param exception the exception thrown_@return a handler for the given exception type, or {@code null} if none found;@Nullable_	private Method getExceptionHandler(Throwable exception) {_		Class<?> exceptionClass = exception.getClass()__		if (logger.isTraceEnabled()) {_			logger.trace("Trying to find handler for exception of type [" + exceptionClass.getName() + "]")__		}_		Method handler = this.exceptionHandlerMap.get(exceptionClass)__		while (handler == null && exceptionClass != Throwable.class) {_			exceptionClass = exceptionClass.getSuperclass()__			handler = this.exceptionHandlerMap.get(exceptionClass)__		}_		if (handler != null && logger.isTraceEnabled()) {_			logger.trace("Found handler for exception of type [" + exceptionClass.getName() + "]: " + handler)__		}_		return handler__	};determine,the,exception,handle,method,for,the,given,exception,param,exception,the,exception,thrown,return,a,handler,for,the,given,exception,type,or,code,null,if,none,found;nullable,private,method,get,exception,handler,throwable,exception,class,exception,class,exception,get,class,if,logger,is,trace,enabled,logger,trace,trying,to,find,handler,for,exception,of,type,exception,class,get,name,method,handler,this,exception,handler,map,get,exception,class,while,handler,null,exception,class,throwable,class,exception,class,exception,class,get,superclass,handler,this,exception,handler,map,get,exception,class,if,handler,null,logger,is,trace,enabled,logger,trace,found,handler,for,exception,of,type,exception,class,get,name,handler,return,handler
ThrowsAdviceInterceptor -> public int getHandlerMethodCount();1532542334;Return the number of handler methods in this advice.;public int getHandlerMethodCount() {_		return this.exceptionHandlerMap.size()__	};return,the,number,of,handler,methods,in,this,advice;public,int,get,handler,method,count,return,this,exception,handler,map,size
ThrowsAdviceInterceptor -> public int getHandlerMethodCount();1532706365;Return the number of handler methods in this advice.;public int getHandlerMethodCount() {_		return this.exceptionHandlerMap.size()__	};return,the,number,of,handler,methods,in,this,advice;public,int,get,handler,method,count,return,this,exception,handler,map,size
