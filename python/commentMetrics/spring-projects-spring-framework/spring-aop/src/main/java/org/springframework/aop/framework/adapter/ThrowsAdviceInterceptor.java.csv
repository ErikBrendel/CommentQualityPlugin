commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the number of handler methods in this advice.  */ ;/**  * Return the number of handler methods in this advice.  */ public int getHandlerMethodCount() {     return this.exceptionHandlerMap.size(). }
false;public;1;13;;@Override public Object invoke(MethodInvocation mi) throws Throwable {     try {         return mi.proceed().     } catch (Throwable ex) {         Method handlerMethod = getExceptionHandler(ex).         if (handlerMethod != null) {             invokeHandlerMethod(mi, ex, handlerMethod).         }         throw ex.     } }
true;private;1;16;/**  * Determine the exception handle method for the given exception.  * @param exception the exception thrown  * @return a handler for the given exception type, or {@code null} if none found  */ ;/**  * Determine the exception handle method for the given exception.  * @param exception the exception thrown  * @return a handler for the given exception type, or {@code null} if none found  */ @Nullable private Method getExceptionHandler(Throwable exception) {     Class<?> exceptionClass = exception.getClass().     if (logger.isTraceEnabled()) {         logger.trace("Trying to find handler for exception of type [" + exceptionClass.getName() + "]").     }     Method handler = this.exceptionHandlerMap.get(exceptionClass).     while (handler == null && exceptionClass != Throwable.class) {         exceptionClass = exceptionClass.getSuperclass().         handler = this.exceptionHandlerMap.get(exceptionClass).     }     if (handler != null && logger.isTraceEnabled()) {         logger.trace("Found handler for exception of type [" + exceptionClass.getName() + "]: " + handler).     }     return handler. }
false;private;3;15;;private void invokeHandlerMethod(MethodInvocation mi, Throwable ex, Method method) throws Throwable {     Object[] handlerArgs.     if (method.getParameterCount() == 1) {         handlerArgs = new Object[] { ex }.     } else {         handlerArgs = new Object[] { mi.getMethod(), mi.getArguments(), mi.getThis(), ex }.     }     try {         method.invoke(this.throwsAdvice, handlerArgs).     } catch (InvocationTargetException targetEx) {         throw targetEx.getTargetException().     } }
