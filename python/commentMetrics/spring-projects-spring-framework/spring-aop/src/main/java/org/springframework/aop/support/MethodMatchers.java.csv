# id;timestamp;commentText;codeText;commentWords;codeWords
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1328020251;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1356735495;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1357119239;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1368482696;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1375432468;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1385412762;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1390432202;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1450827071;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1495868221;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1496242568;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1496837955;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1523711405;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1530174524;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1530190293;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1530198749;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1530201727;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return new IntersectionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2);1532038651;Match all methods that <i>both</i> of the given MethodMatchers match._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that both_of the given MethodMatchers match;public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {_		return (mm1 instanceof IntroductionAwareMethodMatcher || mm2 instanceof IntroductionAwareMethodMatcher ?_				new IntersectionIntroductionAwareMethodMatcher(mm1, mm2) : new IntersectionMethodMatcher(mm1, mm2))__	};match,all,methods,that,i,both,i,of,the,given,method,matchers,match,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,both,of,the,given,method,matchers,match;public,static,method,matcher,intersection,method,matcher,mm1,method,matcher,mm2,return,mm1,instanceof,introduction,aware,method,matcher,mm2,instanceof,introduction,aware,method,matcher,new,intersection,introduction,aware,method,matcher,mm1,mm2,new,intersection,method,matcher,mm1,mm2
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions);1495868221;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return ((mm instanceof IntroductionAwareMethodMatcher &&_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions)) ||_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,nullable,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions);1496242568;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return ((mm instanceof IntroductionAwareMethodMatcher &&_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions)) ||_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,nullable,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions);1496837955;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return ((mm instanceof IntroductionAwareMethodMatcher &&_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions)) ||_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,nullable,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions);1523711405;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return (mm instanceof IntroductionAwareMethodMatcher ?_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions) :_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,nullable,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions);1530174524;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return (mm instanceof IntroductionAwareMethodMatcher ?_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions) :_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,nullable,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions);1530190293;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return (mm instanceof IntroductionAwareMethodMatcher ?_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions) :_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,nullable,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions);1530198749;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return (mm instanceof IntroductionAwareMethodMatcher ?_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions) :_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,nullable,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions);1530201727;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, @Nullable Class<?> targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return (mm instanceof IntroductionAwareMethodMatcher ?_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions) :_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,nullable,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1328020251;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1356735495;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1357119239;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1368482696;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1375432468;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1385412762;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1390432202;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1450827071;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1495868221;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1496242568;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1496837955;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1523711405;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1530174524;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1530190293;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1530198749;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1530201727;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return new UnionMethodMatcher(mm1, mm2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,new,union,method,matcher,mm1,mm2
MethodMatchers -> public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2);1532038651;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param mm2 the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {_		return (mm1 instanceof IntroductionAwareMethodMatcher || mm2 instanceof IntroductionAwareMethodMatcher ?_				new UnionIntroductionAwareMethodMatcher(mm1, mm2) : new UnionMethodMatcher(mm1, mm2))__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,mm2,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;public,static,method,matcher,union,method,matcher,mm1,method,matcher,mm2,return,mm1,instanceof,introduction,aware,method,matcher,mm2,instanceof,introduction,aware,method,matcher,new,union,introduction,aware,method,matcher,mm1,mm2,new,union,method,matcher,mm1,mm2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1328020251;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1356735495;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1357119239;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1368482696;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1375432468;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1385412762;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1390432202;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1450827071;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1495868221;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1496242568;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1496837955;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1523711405;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1530174524;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1530190293;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1530198749;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1530201727;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2);1532038651;Match all methods that <i>either</i> (or both) of the given MethodMatchers matches._@param mm1 the first MethodMatcher_@param cf1 the corresponding ClassFilter for the first MethodMatcher_@param mm2 the second MethodMatcher_@param cf2 the corresponding ClassFilter for the second MethodMatcher_@return a distinct MethodMatcher that matches all methods that either_of the given MethodMatchers matches;static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {_		return (mm1 instanceof IntroductionAwareMethodMatcher || mm2 instanceof IntroductionAwareMethodMatcher ?_				new ClassFilterAwareUnionIntroductionAwareMethodMatcher(mm1, cf1, mm2, cf2) :_				new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2))__	};match,all,methods,that,i,either,i,or,both,of,the,given,method,matchers,matches,param,mm1,the,first,method,matcher,param,cf1,the,corresponding,class,filter,for,the,first,method,matcher,param,mm2,the,second,method,matcher,param,cf2,the,corresponding,class,filter,for,the,second,method,matcher,return,a,distinct,method,matcher,that,matches,all,methods,that,either,of,the,given,method,matchers,matches;static,method,matcher,union,method,matcher,mm1,class,filter,cf1,method,matcher,mm2,class,filter,cf2,return,mm1,instanceof,introduction,aware,method,matcher,mm2,instanceof,introduction,aware,method,matcher,new,class,filter,aware,union,introduction,aware,method,matcher,mm1,cf1,mm2,cf2,new,class,filter,aware,union,method,matcher,mm1,cf1,mm2,cf2
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, Class targetClass, boolean hasIntroductions);1328020251;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be <code>null</code>, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions <code>true</code> if the object on whose behalf we are_asking is the subject on one or more introductions_ <code>false</code> otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, Class targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return ((mm instanceof IntroductionAwareMethodMatcher &&_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions)) ||_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,code,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,code,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,code,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, Class targetClass, boolean hasIntroductions);1356735495;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, Class targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return ((mm instanceof IntroductionAwareMethodMatcher &&_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions)) ||_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, Class targetClass, boolean hasIntroductions);1357119239;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, Class targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return ((mm instanceof IntroductionAwareMethodMatcher &&_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions)) ||_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, Class targetClass, boolean hasIntroductions);1368482696;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, Class targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return ((mm instanceof IntroductionAwareMethodMatcher &&_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions)) ||_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, Class targetClass, boolean hasIntroductions);1375432468;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, Class targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return ((mm instanceof IntroductionAwareMethodMatcher &&_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions)) ||_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, Class<?> targetClass, boolean hasIntroductions);1385412762;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, Class<?> targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return ((mm instanceof IntroductionAwareMethodMatcher &&_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions)) ||_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, Class<?> targetClass, boolean hasIntroductions);1390432202;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, Class<?> targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return ((mm instanceof IntroductionAwareMethodMatcher &&_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions)) ||_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, Class<?> targetClass, boolean hasIntroductions);1450827071;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class (may be {@code null}, in which case_the candidate class must be taken to be the method's declaring class)_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, Class<?> targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return ((mm instanceof IntroductionAwareMethodMatcher &&_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions)) ||_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,may,be,code,null,in,which,case,the,candidate,class,must,be,taken,to,be,the,method,s,declaring,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
MethodMatchers -> public static boolean matches(MethodMatcher mm, Method method, Class<?> targetClass, boolean hasIntroductions);1532038651;Apply the given MethodMatcher to the given Method, supporting an_{@link org.springframework.aop.IntroductionAwareMethodMatcher}_(if applicable)._@param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)_@param method the candidate method_@param targetClass the target class_@param hasIntroductions {@code true} if the object on whose behalf we are_asking is the subject on one or more introductions_ {@code false} otherwise_@return whether or not this method matches statically;public static boolean matches(MethodMatcher mm, Method method, Class<?> targetClass, boolean hasIntroductions) {_		Assert.notNull(mm, "MethodMatcher must not be null")__		return (mm instanceof IntroductionAwareMethodMatcher ?_				((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions) :_				mm.matches(method, targetClass))__	};apply,the,given,method,matcher,to,the,given,method,supporting,an,link,org,springframework,aop,introduction,aware,method,matcher,if,applicable,param,mm,the,method,matcher,to,apply,may,be,an,introduction,aware,method,matcher,param,method,the,candidate,method,param,target,class,the,target,class,param,has,introductions,code,true,if,the,object,on,whose,behalf,we,are,asking,is,the,subject,on,one,or,more,introductions,code,false,otherwise,return,whether,or,not,this,method,matches,statically;public,static,boolean,matches,method,matcher,mm,method,method,class,target,class,boolean,has,introductions,assert,not,null,mm,method,matcher,must,not,be,null,return,mm,instanceof,introduction,aware,method,matcher,introduction,aware,method,matcher,mm,matches,method,target,class,has,introductions,mm,matches,method,target,class
