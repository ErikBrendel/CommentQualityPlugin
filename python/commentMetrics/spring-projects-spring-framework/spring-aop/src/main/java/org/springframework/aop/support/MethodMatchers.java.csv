commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;4;/**  * Match all methods that <i>either</i> (or both) of the given MethodMatchers matches.  * @param mm1 the first MethodMatcher  * @param mm2 the second MethodMatcher  * @return a distinct MethodMatcher that matches all methods that either  * of the given MethodMatchers matches  */ ;/**  * Match all methods that <i>either</i> (or both) of the given MethodMatchers matches.  * @param mm1 the first MethodMatcher  * @param mm2 the second MethodMatcher  * @return a distinct MethodMatcher that matches all methods that either  * of the given MethodMatchers matches  */ public static MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2) {     return (mm1 instanceof IntroductionAwareMethodMatcher || mm2 instanceof IntroductionAwareMethodMatcher ? new UnionIntroductionAwareMethodMatcher(mm1, mm2) : new UnionMethodMatcher(mm1, mm2)). }
true;static;4;5;/**  * Match all methods that <i>either</i> (or both) of the given MethodMatchers matches.  * @param mm1 the first MethodMatcher  * @param cf1 the corresponding ClassFilter for the first MethodMatcher  * @param mm2 the second MethodMatcher  * @param cf2 the corresponding ClassFilter for the second MethodMatcher  * @return a distinct MethodMatcher that matches all methods that either  * of the given MethodMatchers matches  */ ;/**  * Match all methods that <i>either</i> (or both) of the given MethodMatchers matches.  * @param mm1 the first MethodMatcher  * @param cf1 the corresponding ClassFilter for the first MethodMatcher  * @param mm2 the second MethodMatcher  * @param cf2 the corresponding ClassFilter for the second MethodMatcher  * @return a distinct MethodMatcher that matches all methods that either  * of the given MethodMatchers matches  */ static MethodMatcher union(MethodMatcher mm1, ClassFilter cf1, MethodMatcher mm2, ClassFilter cf2) {     return (mm1 instanceof IntroductionAwareMethodMatcher || mm2 instanceof IntroductionAwareMethodMatcher ? new ClassFilterAwareUnionIntroductionAwareMethodMatcher(mm1, cf1, mm2, cf2) : new ClassFilterAwareUnionMethodMatcher(mm1, cf1, mm2, cf2)). }
true;public,static;2;4;/**  * Match all methods that <i>both</i> of the given MethodMatchers match.  * @param mm1 the first MethodMatcher  * @param mm2 the second MethodMatcher  * @return a distinct MethodMatcher that matches all methods that both  * of the given MethodMatchers match  */ ;/**  * Match all methods that <i>both</i> of the given MethodMatchers match.  * @param mm1 the first MethodMatcher  * @param mm2 the second MethodMatcher  * @return a distinct MethodMatcher that matches all methods that both  * of the given MethodMatchers match  */ public static MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2) {     return (mm1 instanceof IntroductionAwareMethodMatcher || mm2 instanceof IntroductionAwareMethodMatcher ? new IntersectionIntroductionAwareMethodMatcher(mm1, mm2) : new IntersectionMethodMatcher(mm1, mm2)). }
true;public,static;4;6;/**  * Apply the given MethodMatcher to the given Method, supporting an  * {@link org.springframework.aop.IntroductionAwareMethodMatcher}  * (if applicable).  * @param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)  * @param method the candidate method  * @param targetClass the target class  * @param hasIntroductions {@code true} if the object on whose behalf we are  * asking is the subject on one or more introductions. {@code false} otherwise  * @return whether or not this method matches statically  */ ;/**  * Apply the given MethodMatcher to the given Method, supporting an  * {@link org.springframework.aop.IntroductionAwareMethodMatcher}  * (if applicable).  * @param mm the MethodMatcher to apply (may be an IntroductionAwareMethodMatcher)  * @param method the candidate method  * @param targetClass the target class  * @param hasIntroductions {@code true} if the object on whose behalf we are  * asking is the subject on one or more introductions. {@code false} otherwise  * @return whether or not this method matches statically  */ public static boolean matches(MethodMatcher mm, Method method, Class<?> targetClass, boolean hasIntroductions) {     Assert.notNull(mm, "MethodMatcher must not be null").     return (mm instanceof IntroductionAwareMethodMatcher ? ((IntroductionAwareMethodMatcher) mm).matches(method, targetClass, hasIntroductions) : mm.matches(method, targetClass)). }
false;public;2;5;;@Override public boolean matches(Method method, Class<?> targetClass) {     return (matchesClass1(targetClass) && this.mm1.matches(method, targetClass)) || (matchesClass2(targetClass) && this.mm2.matches(method, targetClass)). }
false;protected;1;3;;protected boolean matchesClass1(Class<?> targetClass) {     return true. }
false;protected;1;3;;protected boolean matchesClass2(Class<?> targetClass) {     return true. }
false;public;0;4;;@Override public boolean isRuntime() {     return this.mm1.isRuntime() || this.mm2.isRuntime(). }
false;public;3;4;;@Override public boolean matches(Method method, Class<?> targetClass, Object... args) {     return this.mm1.matches(method, targetClass, args) || this.mm2.matches(method, targetClass, args). }
false;public;1;11;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof UnionMethodMatcher)) {         return false.     }     UnionMethodMatcher that = (UnionMethodMatcher) other.     return (this.mm1.equals(that.mm1) && this.mm2.equals(that.mm2)). }
false;public;0;4;;@Override public int hashCode() {     return 37 * this.mm1.hashCode() + this.mm2.hashCode(). }
false;public;3;5;;@Override public boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions) {     return (matchesClass1(targetClass) && MethodMatchers.matches(this.mm1, method, targetClass, hasIntroductions)) || (matchesClass2(targetClass) && MethodMatchers.matches(this.mm2, method, targetClass, hasIntroductions)). }
false;protected;1;4;;@Override protected boolean matchesClass1(Class<?> targetClass) {     return this.cf1.matches(targetClass). }
false;protected;1;4;;@Override protected boolean matchesClass2(Class<?> targetClass) {     return this.cf2.matches(targetClass). }
false;public;1;17;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!super.equals(other)) {         return false.     }     ClassFilter otherCf1 = ClassFilter.TRUE.     ClassFilter otherCf2 = ClassFilter.TRUE.     if (other instanceof ClassFilterAwareUnionMethodMatcher) {         ClassFilterAwareUnionMethodMatcher cfa = (ClassFilterAwareUnionMethodMatcher) other.         otherCf1 = cfa.cf1.         otherCf2 = cfa.cf2.     }     return (this.cf1.equals(otherCf1) && this.cf2.equals(otherCf2)). }
false;public;0;5;;@Override public int hashCode() {     // Allow for matching with regular UnionMethodMatcher by providing same hash...     return super.hashCode(). }
false;public;3;5;;@Override public boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions) {     return (matchesClass1(targetClass) && MethodMatchers.matches(this.mm1, method, targetClass, hasIntroductions)) || (matchesClass2(targetClass) && MethodMatchers.matches(this.mm2, method, targetClass, hasIntroductions)). }
false;public;2;4;;@Override public boolean matches(Method method, Class<?> targetClass) {     return (this.mm1.matches(method, targetClass) && this.mm2.matches(method, targetClass)). }
false;public;0;4;;@Override public boolean isRuntime() {     return (this.mm1.isRuntime() || this.mm2.isRuntime()). }
false;public;3;11;;@Override public boolean matches(Method method, Class<?> targetClass, Object... args) {     // Because a dynamic intersection may be composed of a static and dynamic part,     // we must avoid calling the 3-arg matches method on a dynamic matcher, as     // it will probably be an unsupported operation.     boolean aMatches = (this.mm1.isRuntime() ? this.mm1.matches(method, targetClass, args) : this.mm1.matches(method, targetClass)).     boolean bMatches = (this.mm2.isRuntime() ? this.mm2.matches(method, targetClass, args) : this.mm2.matches(method, targetClass)).     return aMatches && bMatches. }
false;public;1;11;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof IntersectionMethodMatcher)) {         return false.     }     IntersectionMethodMatcher that = (IntersectionMethodMatcher) other.     return (this.mm1.equals(that.mm1) && this.mm2.equals(that.mm2)). }
false;public;0;4;;@Override public int hashCode() {     return 37 * this.mm1.hashCode() + this.mm2.hashCode(). }
false;public;3;5;;@Override public boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions) {     return (MethodMatchers.matches(this.mm1, method, targetClass, hasIntroductions) && MethodMatchers.matches(this.mm2, method, targetClass, hasIntroductions)). }
