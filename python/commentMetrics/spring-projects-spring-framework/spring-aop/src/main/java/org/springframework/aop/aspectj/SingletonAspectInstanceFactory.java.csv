commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;4;;@Override public final Object getAspectInstance() {     return this.aspectInstance. }
false;public;0;5;;@Override @Nullable public ClassLoader getAspectClassLoader() {     return this.aspectInstance.getClass().getClassLoader(). }
true;public;0;7;/**  * Determine the order for this factory's aspect instance,  * either an instance-specific order expressed through implementing  * the {@link org.springframework.core.Ordered} interface,  * or a fallback order.  * @see org.springframework.core.Ordered  * @see #getOrderForAspectClass  */ ;/**  * Determine the order for this factory's aspect instance,  * either an instance-specific order expressed through implementing  * the {@link org.springframework.core.Ordered} interface,  * or a fallback order.  * @see org.springframework.core.Ordered  * @see #getOrderForAspectClass  */ @Override public int getOrder() {     if (this.aspectInstance instanceof Ordered) {         return ((Ordered) this.aspectInstance).getOrder().     }     return getOrderForAspectClass(this.aspectInstance.getClass()). }
true;protected;1;3;/**  * Determine a fallback order for the case that the aspect instance  * does not express an instance-specific order through implementing  * the {@link org.springframework.core.Ordered} interface.  * <p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}.  * @param aspectClass the aspect class  */ ;/**  * Determine a fallback order for the case that the aspect instance  * does not express an instance-specific order through implementing  * the {@link org.springframework.core.Ordered} interface.  * <p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}.  * @param aspectClass the aspect class  */ protected int getOrderForAspectClass(Class<?> aspectClass) {     return Ordered.LOWEST_PRECEDENCE. }
