# id;timestamp;commentText;codeText;commentWords;codeWords
SingletonAspectInstanceFactory -> @Override 	public int getOrder();1356735495;Determine the order for this factory's aspect instance,_either an instance-specific order expressed through implementing_the {@link org.springframework.core.Ordered} interface,_or a fallback order._@see org.springframework.core.Ordered_@see #getOrderForAspectClass;@Override_	public int getOrder() {_		if (this.aspectInstance instanceof Ordered) {_			return ((Ordered) this.aspectInstance).getOrder()__		}_		return getOrderForAspectClass(this.aspectInstance.getClass())__	};determine,the,order,for,this,factory,s,aspect,instance,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,or,a,fallback,order,see,org,springframework,core,ordered,see,get,order,for,aspect,class;override,public,int,get,order,if,this,aspect,instance,instanceof,ordered,return,ordered,this,aspect,instance,get,order,return,get,order,for,aspect,class,this,aspect,instance,get,class
SingletonAspectInstanceFactory -> @Override 	public int getOrder();1368482696;Determine the order for this factory's aspect instance,_either an instance-specific order expressed through implementing_the {@link org.springframework.core.Ordered} interface,_or a fallback order._@see org.springframework.core.Ordered_@see #getOrderForAspectClass;@Override_	public int getOrder() {_		if (this.aspectInstance instanceof Ordered) {_			return ((Ordered) this.aspectInstance).getOrder()__		}_		return getOrderForAspectClass(this.aspectInstance.getClass())__	};determine,the,order,for,this,factory,s,aspect,instance,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,or,a,fallback,order,see,org,springframework,core,ordered,see,get,order,for,aspect,class;override,public,int,get,order,if,this,aspect,instance,instanceof,ordered,return,ordered,this,aspect,instance,get,order,return,get,order,for,aspect,class,this,aspect,instance,get,class
SingletonAspectInstanceFactory -> @Override 	public int getOrder();1450815633;Determine the order for this factory's aspect instance,_either an instance-specific order expressed through implementing_the {@link org.springframework.core.Ordered} interface,_or a fallback order._@see org.springframework.core.Ordered_@see #getOrderForAspectClass;@Override_	public int getOrder() {_		if (this.aspectInstance instanceof Ordered) {_			return ((Ordered) this.aspectInstance).getOrder()__		}_		return getOrderForAspectClass(this.aspectInstance.getClass())__	};determine,the,order,for,this,factory,s,aspect,instance,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,or,a,fallback,order,see,org,springframework,core,ordered,see,get,order,for,aspect,class;override,public,int,get,order,if,this,aspect,instance,instanceof,ordered,return,ordered,this,aspect,instance,get,order,return,get,order,for,aspect,class,this,aspect,instance,get,class
SingletonAspectInstanceFactory -> @Override 	public int getOrder();1502974979;Determine the order for this factory's aspect instance,_either an instance-specific order expressed through implementing_the {@link org.springframework.core.Ordered} interface,_or a fallback order._@see org.springframework.core.Ordered_@see #getOrderForAspectClass;@Override_	public int getOrder() {_		if (this.aspectInstance instanceof Ordered) {_			return ((Ordered) this.aspectInstance).getOrder()__		}_		return getOrderForAspectClass(this.aspectInstance.getClass())__	};determine,the,order,for,this,factory,s,aspect,instance,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,or,a,fallback,order,see,org,springframework,core,ordered,see,get,order,for,aspect,class;override,public,int,get,order,if,this,aspect,instance,instanceof,ordered,return,ordered,this,aspect,instance,get,order,return,get,order,for,aspect,class,this,aspect,instance,get,class
SingletonAspectInstanceFactory -> protected int getOrderForAspectClass(Class<?> aspectClass);1328020251;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns <code>Ordered.LOWEST_PRECEDENCE</code>._@param aspectClass the aspect class;protected int getOrderForAspectClass(Class<?> aspectClass) {_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,code,param,aspect,class,the,aspect,class;protected,int,get,order,for,aspect,class,class,aspect,class,return,ordered
SingletonAspectInstanceFactory -> protected int getOrderForAspectClass(Class<?> aspectClass);1356735495;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;protected int getOrderForAspectClass(Class<?> aspectClass) {_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;protected,int,get,order,for,aspect,class,class,aspect,class,return,ordered
SingletonAspectInstanceFactory -> protected int getOrderForAspectClass(Class<?> aspectClass);1357119239;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;protected int getOrderForAspectClass(Class<?> aspectClass) {_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;protected,int,get,order,for,aspect,class,class,aspect,class,return,ordered
SingletonAspectInstanceFactory -> protected int getOrderForAspectClass(Class<?> aspectClass);1368482696;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;protected int getOrderForAspectClass(Class<?> aspectClass) {_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;protected,int,get,order,for,aspect,class,class,aspect,class,return,ordered
SingletonAspectInstanceFactory -> protected int getOrderForAspectClass(Class<?> aspectClass);1450815633;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;protected int getOrderForAspectClass(Class<?> aspectClass) {_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;protected,int,get,order,for,aspect,class,class,aspect,class,return,ordered
SingletonAspectInstanceFactory -> protected int getOrderForAspectClass(Class<?> aspectClass);1502974979;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;protected int getOrderForAspectClass(Class<?> aspectClass) {_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;protected,int,get,order,for,aspect,class,class,aspect,class,return,ordered
SingletonAspectInstanceFactory -> public SingletonAspectInstanceFactory(Object aspectInstance);1328020251;Create a new SingletonAspectInstanceFactory for the given aspect instance._@param aspectInstance the singleton aspect instance;public SingletonAspectInstanceFactory(Object aspectInstance) {_		Assert.notNull(aspectInstance, "Aspect instance must not be null")__		this.aspectInstance = aspectInstance__	};create,a,new,singleton,aspect,instance,factory,for,the,given,aspect,instance,param,aspect,instance,the,singleton,aspect,instance;public,singleton,aspect,instance,factory,object,aspect,instance,assert,not,null,aspect,instance,aspect,instance,must,not,be,null,this,aspect,instance,aspect,instance
SingletonAspectInstanceFactory -> public SingletonAspectInstanceFactory(Object aspectInstance);1356735495;Create a new SingletonAspectInstanceFactory for the given aspect instance._@param aspectInstance the singleton aspect instance;public SingletonAspectInstanceFactory(Object aspectInstance) {_		Assert.notNull(aspectInstance, "Aspect instance must not be null")__		this.aspectInstance = aspectInstance__	};create,a,new,singleton,aspect,instance,factory,for,the,given,aspect,instance,param,aspect,instance,the,singleton,aspect,instance;public,singleton,aspect,instance,factory,object,aspect,instance,assert,not,null,aspect,instance,aspect,instance,must,not,be,null,this,aspect,instance,aspect,instance
SingletonAspectInstanceFactory -> public SingletonAspectInstanceFactory(Object aspectInstance);1357119239;Create a new SingletonAspectInstanceFactory for the given aspect instance._@param aspectInstance the singleton aspect instance;public SingletonAspectInstanceFactory(Object aspectInstance) {_		Assert.notNull(aspectInstance, "Aspect instance must not be null")__		this.aspectInstance = aspectInstance__	};create,a,new,singleton,aspect,instance,factory,for,the,given,aspect,instance,param,aspect,instance,the,singleton,aspect,instance;public,singleton,aspect,instance,factory,object,aspect,instance,assert,not,null,aspect,instance,aspect,instance,must,not,be,null,this,aspect,instance,aspect,instance
SingletonAspectInstanceFactory -> public SingletonAspectInstanceFactory(Object aspectInstance);1368482696;Create a new SingletonAspectInstanceFactory for the given aspect instance._@param aspectInstance the singleton aspect instance;public SingletonAspectInstanceFactory(Object aspectInstance) {_		Assert.notNull(aspectInstance, "Aspect instance must not be null")__		this.aspectInstance = aspectInstance__	};create,a,new,singleton,aspect,instance,factory,for,the,given,aspect,instance,param,aspect,instance,the,singleton,aspect,instance;public,singleton,aspect,instance,factory,object,aspect,instance,assert,not,null,aspect,instance,aspect,instance,must,not,be,null,this,aspect,instance,aspect,instance
SingletonAspectInstanceFactory -> public SingletonAspectInstanceFactory(Object aspectInstance);1450815633;Create a new SingletonAspectInstanceFactory for the given aspect instance._@param aspectInstance the singleton aspect instance;public SingletonAspectInstanceFactory(Object aspectInstance) {_		Assert.notNull(aspectInstance, "Aspect instance must not be null")__		this.aspectInstance = aspectInstance__	};create,a,new,singleton,aspect,instance,factory,for,the,given,aspect,instance,param,aspect,instance,the,singleton,aspect,instance;public,singleton,aspect,instance,factory,object,aspect,instance,assert,not,null,aspect,instance,aspect,instance,must,not,be,null,this,aspect,instance,aspect,instance
SingletonAspectInstanceFactory -> public SingletonAspectInstanceFactory(Object aspectInstance);1502974979;Create a new SingletonAspectInstanceFactory for the given aspect instance._@param aspectInstance the singleton aspect instance;public SingletonAspectInstanceFactory(Object aspectInstance) {_		Assert.notNull(aspectInstance, "Aspect instance must not be null")__		this.aspectInstance = aspectInstance__	};create,a,new,singleton,aspect,instance,factory,for,the,given,aspect,instance,param,aspect,instance,the,singleton,aspect,instance;public,singleton,aspect,instance,factory,object,aspect,instance,assert,not,null,aspect,instance,aspect,instance,must,not,be,null,this,aspect,instance,aspect,instance
SingletonAspectInstanceFactory -> public int getOrder();1328020251;Determine the order for this factory's aspect instance,_either an instance-specific order expressed through implementing_the {@link org.springframework.core.Ordered} interface,_or a fallback order._@see org.springframework.core.Ordered_@see #getOrderForAspectClass;public int getOrder() {_		if (this.aspectInstance instanceof Ordered) {_			return ((Ordered) this.aspectInstance).getOrder()__		}_		return getOrderForAspectClass(this.aspectInstance.getClass())__	};determine,the,order,for,this,factory,s,aspect,instance,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,or,a,fallback,order,see,org,springframework,core,ordered,see,get,order,for,aspect,class;public,int,get,order,if,this,aspect,instance,instanceof,ordered,return,ordered,this,aspect,instance,get,order,return,get,order,for,aspect,class,this,aspect,instance,get,class
SingletonAspectInstanceFactory -> public int getOrder();1357119239;Determine the order for this factory's aspect instance,_either an instance-specific order expressed through implementing_the {@link org.springframework.core.Ordered} interface,_or a fallback order._@see org.springframework.core.Ordered_@see #getOrderForAspectClass;public int getOrder() {_		if (this.aspectInstance instanceof Ordered) {_			return ((Ordered) this.aspectInstance).getOrder()__		}_		return getOrderForAspectClass(this.aspectInstance.getClass())__	};determine,the,order,for,this,factory,s,aspect,instance,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,or,a,fallback,order,see,org,springframework,core,ordered,see,get,order,for,aspect,class;public,int,get,order,if,this,aspect,instance,instanceof,ordered,return,ordered,this,aspect,instance,get,order,return,get,order,for,aspect,class,this,aspect,instance,get,class
