# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractTraceInterceptor -> public void setHideProxyClassNames(boolean hideProxyClassNames);1328020251;Set to "true" to have {@link #setUseDynamicLogger dynamic loggers} hide_proxy class names wherever possible. Default is "false".;public void setHideProxyClassNames(boolean hideProxyClassNames) {_		this.hideProxyClassNames = hideProxyClassNames__	};set,to,true,to,have,link,set,use,dynamic,logger,dynamic,loggers,hide,proxy,class,names,wherever,possible,default,is,false;public,void,set,hide,proxy,class,names,boolean,hide,proxy,class,names,this,hide,proxy,class,names,hide,proxy,class,names
AbstractTraceInterceptor -> public void setHideProxyClassNames(boolean hideProxyClassNames);1356735495;Set to "true" to have {@link #setUseDynamicLogger dynamic loggers} hide_proxy class names wherever possible. Default is "false".;public void setHideProxyClassNames(boolean hideProxyClassNames) {_		this.hideProxyClassNames = hideProxyClassNames__	};set,to,true,to,have,link,set,use,dynamic,logger,dynamic,loggers,hide,proxy,class,names,wherever,possible,default,is,false;public,void,set,hide,proxy,class,names,boolean,hide,proxy,class,names,this,hide,proxy,class,names,hide,proxy,class,names
AbstractTraceInterceptor -> public void setHideProxyClassNames(boolean hideProxyClassNames);1357119239;Set to "true" to have {@link #setUseDynamicLogger dynamic loggers} hide_proxy class names wherever possible. Default is "false".;public void setHideProxyClassNames(boolean hideProxyClassNames) {_		this.hideProxyClassNames = hideProxyClassNames__	};set,to,true,to,have,link,set,use,dynamic,logger,dynamic,loggers,hide,proxy,class,names,wherever,possible,default,is,false;public,void,set,hide,proxy,class,names,boolean,hide,proxy,class,names,this,hide,proxy,class,names,hide,proxy,class,names
AbstractTraceInterceptor -> public void setHideProxyClassNames(boolean hideProxyClassNames);1368482696;Set to "true" to have {@link #setUseDynamicLogger dynamic loggers} hide_proxy class names wherever possible. Default is "false".;public void setHideProxyClassNames(boolean hideProxyClassNames) {_		this.hideProxyClassNames = hideProxyClassNames__	};set,to,true,to,have,link,set,use,dynamic,logger,dynamic,loggers,hide,proxy,class,names,wherever,possible,default,is,false;public,void,set,hide,proxy,class,names,boolean,hide,proxy,class,names,this,hide,proxy,class,names,hide,proxy,class,names
AbstractTraceInterceptor -> public void setHideProxyClassNames(boolean hideProxyClassNames);1385412762;Set to "true" to have {@link #setUseDynamicLogger dynamic loggers} hide_proxy class names wherever possible. Default is "false".;public void setHideProxyClassNames(boolean hideProxyClassNames) {_		this.hideProxyClassNames = hideProxyClassNames__	};set,to,true,to,have,link,set,use,dynamic,logger,dynamic,loggers,hide,proxy,class,names,wherever,possible,default,is,false;public,void,set,hide,proxy,class,names,boolean,hide,proxy,class,names,this,hide,proxy,class,names,hide,proxy,class,names
AbstractTraceInterceptor -> public void setHideProxyClassNames(boolean hideProxyClassNames);1498780456;Set to "true" to have {@link #setUseDynamicLogger dynamic loggers} hide_proxy class names wherever possible. Default is "false".;public void setHideProxyClassNames(boolean hideProxyClassNames) {_		this.hideProxyClassNames = hideProxyClassNames__	};set,to,true,to,have,link,set,use,dynamic,logger,dynamic,loggers,hide,proxy,class,names,wherever,possible,default,is,false;public,void,set,hide,proxy,class,names,boolean,hide,proxy,class,names,this,hide,proxy,class,names,hide,proxy,class,names
AbstractTraceInterceptor -> public void setHideProxyClassNames(boolean hideProxyClassNames);1499944780;Set to "true" to have {@link #setUseDynamicLogger dynamic loggers} hide_proxy class names wherever possible. Default is "false".;public void setHideProxyClassNames(boolean hideProxyClassNames) {_		this.hideProxyClassNames = hideProxyClassNames__	};set,to,true,to,have,link,set,use,dynamic,logger,dynamic,loggers,hide,proxy,class,names,wherever,possible,default,is,false;public,void,set,hide,proxy,class,names,boolean,hide,proxy,class,names,this,hide,proxy,class,names,hide,proxy,class,names
AbstractTraceInterceptor -> public void setHideProxyClassNames(boolean hideProxyClassNames);1550825428;Set to "true" to have {@link #setUseDynamicLogger dynamic loggers} hide_proxy class names wherever possible. Default is "false".;public void setHideProxyClassNames(boolean hideProxyClassNames) {_		this.hideProxyClassNames = hideProxyClassNames__	};set,to,true,to,have,link,set,use,dynamic,logger,dynamic,loggers,hide,proxy,class,names,wherever,possible,default,is,false;public,void,set,hide,proxy,class,names,boolean,hide,proxy,class,names,this,hide,proxy,class,names,hide,proxy,class,names
AbstractTraceInterceptor -> protected Class<?> getClassForLogging(Object target);1385412762;Determine the class to use for logging purposes._@param target the target object to introspect_@return the target class for the given object_@see #setHideProxyClassNames;protected Class<?> getClassForLogging(Object target) {_		return (this.hideProxyClassNames ? AopUtils.getTargetClass(target) : target.getClass())__	};determine,the,class,to,use,for,logging,purposes,param,target,the,target,object,to,introspect,return,the,target,class,for,the,given,object,see,set,hide,proxy,class,names;protected,class,get,class,for,logging,object,target,return,this,hide,proxy,class,names,aop,utils,get,target,class,target,target,get,class
AbstractTraceInterceptor -> protected Class<?> getClassForLogging(Object target);1498780456;Determine the class to use for logging purposes._@param target the target object to introspect_@return the target class for the given object_@see #setHideProxyClassNames;protected Class<?> getClassForLogging(Object target) {_		return (this.hideProxyClassNames ? AopUtils.getTargetClass(target) : target.getClass())__	};determine,the,class,to,use,for,logging,purposes,param,target,the,target,object,to,introspect,return,the,target,class,for,the,given,object,see,set,hide,proxy,class,names;protected,class,get,class,for,logging,object,target,return,this,hide,proxy,class,names,aop,utils,get,target,class,target,target,get,class
AbstractTraceInterceptor -> protected Class<?> getClassForLogging(Object target);1499944780;Determine the class to use for logging purposes._@param target the target object to introspect_@return the target class for the given object_@see #setHideProxyClassNames;protected Class<?> getClassForLogging(Object target) {_		return (this.hideProxyClassNames ? AopUtils.getTargetClass(target) : target.getClass())__	};determine,the,class,to,use,for,logging,purposes,param,target,the,target,object,to,introspect,return,the,target,class,for,the,given,object,see,set,hide,proxy,class,names;protected,class,get,class,for,logging,object,target,return,this,hide,proxy,class,names,aop,utils,get,target,class,target,target,get,class
AbstractTraceInterceptor -> protected Class<?> getClassForLogging(Object target);1550825428;Determine the class to use for logging purposes._@param target the target object to introspect_@return the target class for the given object_@see #setHideProxyClassNames;protected Class<?> getClassForLogging(Object target) {_		return (this.hideProxyClassNames ? AopUtils.getTargetClass(target) : target.getClass())__	};determine,the,class,to,use,for,logging,purposes,param,target,the,target,object,to,introspect,return,the,target,class,for,the,given,object,see,set,hide,proxy,class,names;protected,class,get,class,for,logging,object,target,return,this,hide,proxy,class,names,aop,utils,get,target,class,target,target,get,class
AbstractTraceInterceptor -> protected Class getClassForLogging(Object target);1328020251;Determine the class to use for logging purposes._@param target the target object to introspect_@return the target class for the given object_@see #setHideProxyClassNames;protected Class getClassForLogging(Object target) {_		return (this.hideProxyClassNames ? AopUtils.getTargetClass(target) : target.getClass())__	};determine,the,class,to,use,for,logging,purposes,param,target,the,target,object,to,introspect,return,the,target,class,for,the,given,object,see,set,hide,proxy,class,names;protected,class,get,class,for,logging,object,target,return,this,hide,proxy,class,names,aop,utils,get,target,class,target,target,get,class
AbstractTraceInterceptor -> protected Class getClassForLogging(Object target);1356735495;Determine the class to use for logging purposes._@param target the target object to introspect_@return the target class for the given object_@see #setHideProxyClassNames;protected Class getClassForLogging(Object target) {_		return (this.hideProxyClassNames ? AopUtils.getTargetClass(target) : target.getClass())__	};determine,the,class,to,use,for,logging,purposes,param,target,the,target,object,to,introspect,return,the,target,class,for,the,given,object,see,set,hide,proxy,class,names;protected,class,get,class,for,logging,object,target,return,this,hide,proxy,class,names,aop,utils,get,target,class,target,target,get,class
AbstractTraceInterceptor -> protected Class getClassForLogging(Object target);1357119239;Determine the class to use for logging purposes._@param target the target object to introspect_@return the target class for the given object_@see #setHideProxyClassNames;protected Class getClassForLogging(Object target) {_		return (this.hideProxyClassNames ? AopUtils.getTargetClass(target) : target.getClass())__	};determine,the,class,to,use,for,logging,purposes,param,target,the,target,object,to,introspect,return,the,target,class,for,the,given,object,see,set,hide,proxy,class,names;protected,class,get,class,for,logging,object,target,return,this,hide,proxy,class,names,aop,utils,get,target,class,target,target,get,class
AbstractTraceInterceptor -> protected Class getClassForLogging(Object target);1368482696;Determine the class to use for logging purposes._@param target the target object to introspect_@return the target class for the given object_@see #setHideProxyClassNames;protected Class getClassForLogging(Object target) {_		return (this.hideProxyClassNames ? AopUtils.getTargetClass(target) : target.getClass())__	};determine,the,class,to,use,for,logging,purposes,param,target,the,target,object,to,introspect,return,the,target,class,for,the,given,object,see,set,hide,proxy,class,names;protected,class,get,class,for,logging,object,target,return,this,hide,proxy,class,names,aop,utils,get,target,class,target,target,get,class
AbstractTraceInterceptor -> protected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable_;1328020251;Subclasses must override this method to perform any tracing around the_supplied <code>MethodInvocation</code>. Subclasses are responsible for_ensuring that the <code>MethodInvocation</code> actually executes by_calling <code>MethodInvocation.proceed()</code>._<p>By default, the passed-in <code>Log</code> instance will have log level_"trace" enabled. Subclasses do not have to check for this again, unless_they overwrite the <code>isInterceptorEnabled</code> method to modify_the default behavior._@param logger the <code>Log</code> to write trace messages to_@return the result of the call to <code>MethodInvocation.proceed()</code>_@throws Throwable if the call to <code>MethodInvocation.proceed()</code>_encountered any errors_@see #isInterceptorEnabled_@see #isLogEnabled;protected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable_;subclasses,must,override,this,method,to,perform,any,tracing,around,the,supplied,code,method,invocation,code,subclasses,are,responsible,for,ensuring,that,the,code,method,invocation,code,actually,executes,by,calling,code,method,invocation,proceed,code,p,by,default,the,passed,in,code,log,code,instance,will,have,log,level,trace,enabled,subclasses,do,not,have,to,check,for,this,again,unless,they,overwrite,the,code,is,interceptor,enabled,code,method,to,modify,the,default,behavior,param,logger,the,code,log,code,to,write,trace,messages,to,return,the,result,of,the,call,to,code,method,invocation,proceed,code,throws,throwable,if,the,call,to,code,method,invocation,proceed,code,encountered,any,errors,see,is,interceptor,enabled,see,is,log,enabled;protected,abstract,object,invoke,under,trace,method,invocation,invocation,log,logger,throws,throwable
AbstractTraceInterceptor -> protected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable_;1356735495;Subclasses must override this method to perform any tracing around the_supplied {@code MethodInvocation}. Subclasses are responsible for_ensuring that the {@code MethodInvocation} actually executes by_calling {@code MethodInvocation.proceed()}._<p>By default, the passed-in {@code Log} instance will have log level_"trace" enabled. Subclasses do not have to check for this again, unless_they overwrite the {@code isInterceptorEnabled} method to modify_the default behavior._@param logger the {@code Log} to write trace messages to_@return the result of the call to {@code MethodInvocation.proceed()}_@throws Throwable if the call to {@code MethodInvocation.proceed()}_encountered any errors_@see #isInterceptorEnabled_@see #isLogEnabled;protected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable_;subclasses,must,override,this,method,to,perform,any,tracing,around,the,supplied,code,method,invocation,subclasses,are,responsible,for,ensuring,that,the,code,method,invocation,actually,executes,by,calling,code,method,invocation,proceed,p,by,default,the,passed,in,code,log,instance,will,have,log,level,trace,enabled,subclasses,do,not,have,to,check,for,this,again,unless,they,overwrite,the,code,is,interceptor,enabled,method,to,modify,the,default,behavior,param,logger,the,code,log,to,write,trace,messages,to,return,the,result,of,the,call,to,code,method,invocation,proceed,throws,throwable,if,the,call,to,code,method,invocation,proceed,encountered,any,errors,see,is,interceptor,enabled,see,is,log,enabled;protected,abstract,object,invoke,under,trace,method,invocation,invocation,log,logger,throws,throwable
AbstractTraceInterceptor -> protected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable_;1357119239;Subclasses must override this method to perform any tracing around the_supplied {@code MethodInvocation}. Subclasses are responsible for_ensuring that the {@code MethodInvocation} actually executes by_calling {@code MethodInvocation.proceed()}._<p>By default, the passed-in {@code Log} instance will have log level_"trace" enabled. Subclasses do not have to check for this again, unless_they overwrite the {@code isInterceptorEnabled} method to modify_the default behavior._@param logger the {@code Log} to write trace messages to_@return the result of the call to {@code MethodInvocation.proceed()}_@throws Throwable if the call to {@code MethodInvocation.proceed()}_encountered any errors_@see #isInterceptorEnabled_@see #isLogEnabled;protected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable_;subclasses,must,override,this,method,to,perform,any,tracing,around,the,supplied,code,method,invocation,subclasses,are,responsible,for,ensuring,that,the,code,method,invocation,actually,executes,by,calling,code,method,invocation,proceed,p,by,default,the,passed,in,code,log,instance,will,have,log,level,trace,enabled,subclasses,do,not,have,to,check,for,this,again,unless,they,overwrite,the,code,is,interceptor,enabled,method,to,modify,the,default,behavior,param,logger,the,code,log,to,write,trace,messages,to,return,the,result,of,the,call,to,code,method,invocation,proceed,throws,throwable,if,the,call,to,code,method,invocation,proceed,encountered,any,errors,see,is,interceptor,enabled,see,is,log,enabled;protected,abstract,object,invoke,under,trace,method,invocation,invocation,log,logger,throws,throwable
AbstractTraceInterceptor -> protected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable_;1368482696;Subclasses must override this method to perform any tracing around the_supplied {@code MethodInvocation}. Subclasses are responsible for_ensuring that the {@code MethodInvocation} actually executes by_calling {@code MethodInvocation.proceed()}._<p>By default, the passed-in {@code Log} instance will have log level_"trace" enabled. Subclasses do not have to check for this again, unless_they overwrite the {@code isInterceptorEnabled} method to modify_the default behavior._@param logger the {@code Log} to write trace messages to_@return the result of the call to {@code MethodInvocation.proceed()}_@throws Throwable if the call to {@code MethodInvocation.proceed()}_encountered any errors_@see #isInterceptorEnabled_@see #isLogEnabled;protected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable_;subclasses,must,override,this,method,to,perform,any,tracing,around,the,supplied,code,method,invocation,subclasses,are,responsible,for,ensuring,that,the,code,method,invocation,actually,executes,by,calling,code,method,invocation,proceed,p,by,default,the,passed,in,code,log,instance,will,have,log,level,trace,enabled,subclasses,do,not,have,to,check,for,this,again,unless,they,overwrite,the,code,is,interceptor,enabled,method,to,modify,the,default,behavior,param,logger,the,code,log,to,write,trace,messages,to,return,the,result,of,the,call,to,code,method,invocation,proceed,throws,throwable,if,the,call,to,code,method,invocation,proceed,encountered,any,errors,see,is,interceptor,enabled,see,is,log,enabled;protected,abstract,object,invoke,under,trace,method,invocation,invocation,log,logger,throws,throwable
AbstractTraceInterceptor -> protected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable_;1385412762;Subclasses must override this method to perform any tracing around the_supplied {@code MethodInvocation}. Subclasses are responsible for_ensuring that the {@code MethodInvocation} actually executes by_calling {@code MethodInvocation.proceed()}._<p>By default, the passed-in {@code Log} instance will have log level_"trace" enabled. Subclasses do not have to check for this again, unless_they overwrite the {@code isInterceptorEnabled} method to modify_the default behavior._@param logger the {@code Log} to write trace messages to_@return the result of the call to {@code MethodInvocation.proceed()}_@throws Throwable if the call to {@code MethodInvocation.proceed()}_encountered any errors_@see #isInterceptorEnabled_@see #isLogEnabled;protected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable_;subclasses,must,override,this,method,to,perform,any,tracing,around,the,supplied,code,method,invocation,subclasses,are,responsible,for,ensuring,that,the,code,method,invocation,actually,executes,by,calling,code,method,invocation,proceed,p,by,default,the,passed,in,code,log,instance,will,have,log,level,trace,enabled,subclasses,do,not,have,to,check,for,this,again,unless,they,overwrite,the,code,is,interceptor,enabled,method,to,modify,the,default,behavior,param,logger,the,code,log,to,write,trace,messages,to,return,the,result,of,the,call,to,code,method,invocation,proceed,throws,throwable,if,the,call,to,code,method,invocation,proceed,encountered,any,errors,see,is,interceptor,enabled,see,is,log,enabled;protected,abstract,object,invoke,under,trace,method,invocation,invocation,log,logger,throws,throwable
AbstractTraceInterceptor -> protected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable_;1498780456;Subclasses must override this method to perform any tracing around the_supplied {@code MethodInvocation}. Subclasses are responsible for_ensuring that the {@code MethodInvocation} actually executes by_calling {@code MethodInvocation.proceed()}._<p>By default, the passed-in {@code Log} instance will have log level_"trace" enabled. Subclasses do not have to check for this again, unless_they overwrite the {@code isInterceptorEnabled} method to modify_the default behavior._@param logger the {@code Log} to write trace messages to_@return the result of the call to {@code MethodInvocation.proceed()}_@throws Throwable if the call to {@code MethodInvocation.proceed()}_encountered any errors_@see #isInterceptorEnabled_@see #isLogEnabled;protected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable_;subclasses,must,override,this,method,to,perform,any,tracing,around,the,supplied,code,method,invocation,subclasses,are,responsible,for,ensuring,that,the,code,method,invocation,actually,executes,by,calling,code,method,invocation,proceed,p,by,default,the,passed,in,code,log,instance,will,have,log,level,trace,enabled,subclasses,do,not,have,to,check,for,this,again,unless,they,overwrite,the,code,is,interceptor,enabled,method,to,modify,the,default,behavior,param,logger,the,code,log,to,write,trace,messages,to,return,the,result,of,the,call,to,code,method,invocation,proceed,throws,throwable,if,the,call,to,code,method,invocation,proceed,encountered,any,errors,see,is,interceptor,enabled,see,is,log,enabled;protected,abstract,object,invoke,under,trace,method,invocation,invocation,log,logger,throws,throwable
AbstractTraceInterceptor -> protected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable_;1499944780;Subclasses must override this method to perform any tracing around the_supplied {@code MethodInvocation}. Subclasses are responsible for_ensuring that the {@code MethodInvocation} actually executes by_calling {@code MethodInvocation.proceed()}._<p>By default, the passed-in {@code Log} instance will have log level_"trace" enabled. Subclasses do not have to check for this again, unless_they overwrite the {@code isInterceptorEnabled} method to modify_the default behavior, and may delegate to {@code writeToLog} for actual_messages to be written._@param logger the {@code Log} to write trace messages to_@return the result of the call to {@code MethodInvocation.proceed()}_@throws Throwable if the call to {@code MethodInvocation.proceed()}_encountered any errors_@see #isLogEnabled_@see #writeToLog(Log, String)_@see #writeToLog(Log, String, Throwable);protected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable_;subclasses,must,override,this,method,to,perform,any,tracing,around,the,supplied,code,method,invocation,subclasses,are,responsible,for,ensuring,that,the,code,method,invocation,actually,executes,by,calling,code,method,invocation,proceed,p,by,default,the,passed,in,code,log,instance,will,have,log,level,trace,enabled,subclasses,do,not,have,to,check,for,this,again,unless,they,overwrite,the,code,is,interceptor,enabled,method,to,modify,the,default,behavior,and,may,delegate,to,code,write,to,log,for,actual,messages,to,be,written,param,logger,the,code,log,to,write,trace,messages,to,return,the,result,of,the,call,to,code,method,invocation,proceed,throws,throwable,if,the,call,to,code,method,invocation,proceed,encountered,any,errors,see,is,log,enabled,see,write,to,log,log,string,see,write,to,log,log,string,throwable;protected,abstract,object,invoke,under,trace,method,invocation,invocation,log,logger,throws,throwable
AbstractTraceInterceptor -> protected void writeToLog(Log logger, String message);1499944780;Write the supplied trace message to the supplied {@code Log} instance._<p>To be called by {@link #invokeUnderTrace} for enter/exit messages._<p>Delegates to {@link #writeToLog(Log, String, Throwable)} as the_ultimate delegate that controls the underlying logger invocation._@since 4.3.10_@see #writeToLog(Log, String, Throwable);protected void writeToLog(Log logger, String message) {_		writeToLog(logger, message, null)__	};write,the,supplied,trace,message,to,the,supplied,code,log,instance,p,to,be,called,by,link,invoke,under,trace,for,enter,exit,messages,p,delegates,to,link,write,to,log,log,string,throwable,as,the,ultimate,delegate,that,controls,the,underlying,logger,invocation,since,4,3,10,see,write,to,log,log,string,throwable;protected,void,write,to,log,log,logger,string,message,write,to,log,logger,message,null
AbstractTraceInterceptor -> protected void writeToLog(Log logger, String message);1550825428;Write the supplied trace message to the supplied {@code Log} instance._<p>To be called by {@link #invokeUnderTrace} for enter/exit messages._<p>Delegates to {@link #writeToLog(Log, String, Throwable)} as the_ultimate delegate that controls the underlying logger invocation._@since 4.3.10_@see #writeToLog(Log, String, Throwable);protected void writeToLog(Log logger, String message) {_		writeToLog(logger, message, null)__	};write,the,supplied,trace,message,to,the,supplied,code,log,instance,p,to,be,called,by,link,invoke,under,trace,for,enter,exit,messages,p,delegates,to,link,write,to,log,log,string,throwable,as,the,ultimate,delegate,that,controls,the,underlying,logger,invocation,since,4,3,10,see,write,to,log,log,string,throwable;protected,void,write,to,log,log,logger,string,message,write,to,log,logger,message,null
AbstractTraceInterceptor -> protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger);1328020251;Determine whether the interceptor should kick in, that is,_whether the <code>invokeUnderTrace</code> method should be called._<p>Default behavior is to check whether the given <code>Log</code>_instance is enabled. Subclasses can override this to apply the_interceptor in other cases as well._@param invocation the <code>MethodInvocation</code> being traced_@param logger the <code>Log</code> instance to check_@see #invokeUnderTrace_@see #isLogEnabled;protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger) {_		return isLogEnabled(logger)__	};determine,whether,the,interceptor,should,kick,in,that,is,whether,the,code,invoke,under,trace,code,method,should,be,called,p,default,behavior,is,to,check,whether,the,given,code,log,code,instance,is,enabled,subclasses,can,override,this,to,apply,the,interceptor,in,other,cases,as,well,param,invocation,the,code,method,invocation,code,being,traced,param,logger,the,code,log,code,instance,to,check,see,invoke,under,trace,see,is,log,enabled;protected,boolean,is,interceptor,enabled,method,invocation,invocation,log,logger,return,is,log,enabled,logger
AbstractTraceInterceptor -> protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger);1356735495;Determine whether the interceptor should kick in, that is,_whether the {@code invokeUnderTrace} method should be called._<p>Default behavior is to check whether the given {@code Log}_instance is enabled. Subclasses can override this to apply the_interceptor in other cases as well._@param invocation the {@code MethodInvocation} being traced_@param logger the {@code Log} instance to check_@see #invokeUnderTrace_@see #isLogEnabled;protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger) {_		return isLogEnabled(logger)__	};determine,whether,the,interceptor,should,kick,in,that,is,whether,the,code,invoke,under,trace,method,should,be,called,p,default,behavior,is,to,check,whether,the,given,code,log,instance,is,enabled,subclasses,can,override,this,to,apply,the,interceptor,in,other,cases,as,well,param,invocation,the,code,method,invocation,being,traced,param,logger,the,code,log,instance,to,check,see,invoke,under,trace,see,is,log,enabled;protected,boolean,is,interceptor,enabled,method,invocation,invocation,log,logger,return,is,log,enabled,logger
AbstractTraceInterceptor -> protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger);1357119239;Determine whether the interceptor should kick in, that is,_whether the {@code invokeUnderTrace} method should be called._<p>Default behavior is to check whether the given {@code Log}_instance is enabled. Subclasses can override this to apply the_interceptor in other cases as well._@param invocation the {@code MethodInvocation} being traced_@param logger the {@code Log} instance to check_@see #invokeUnderTrace_@see #isLogEnabled;protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger) {_		return isLogEnabled(logger)__	};determine,whether,the,interceptor,should,kick,in,that,is,whether,the,code,invoke,under,trace,method,should,be,called,p,default,behavior,is,to,check,whether,the,given,code,log,instance,is,enabled,subclasses,can,override,this,to,apply,the,interceptor,in,other,cases,as,well,param,invocation,the,code,method,invocation,being,traced,param,logger,the,code,log,instance,to,check,see,invoke,under,trace,see,is,log,enabled;protected,boolean,is,interceptor,enabled,method,invocation,invocation,log,logger,return,is,log,enabled,logger
AbstractTraceInterceptor -> protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger);1368482696;Determine whether the interceptor should kick in, that is,_whether the {@code invokeUnderTrace} method should be called._<p>Default behavior is to check whether the given {@code Log}_instance is enabled. Subclasses can override this to apply the_interceptor in other cases as well._@param invocation the {@code MethodInvocation} being traced_@param logger the {@code Log} instance to check_@see #invokeUnderTrace_@see #isLogEnabled;protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger) {_		return isLogEnabled(logger)__	};determine,whether,the,interceptor,should,kick,in,that,is,whether,the,code,invoke,under,trace,method,should,be,called,p,default,behavior,is,to,check,whether,the,given,code,log,instance,is,enabled,subclasses,can,override,this,to,apply,the,interceptor,in,other,cases,as,well,param,invocation,the,code,method,invocation,being,traced,param,logger,the,code,log,instance,to,check,see,invoke,under,trace,see,is,log,enabled;protected,boolean,is,interceptor,enabled,method,invocation,invocation,log,logger,return,is,log,enabled,logger
AbstractTraceInterceptor -> protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger);1385412762;Determine whether the interceptor should kick in, that is,_whether the {@code invokeUnderTrace} method should be called._<p>Default behavior is to check whether the given {@code Log}_instance is enabled. Subclasses can override this to apply the_interceptor in other cases as well._@param invocation the {@code MethodInvocation} being traced_@param logger the {@code Log} instance to check_@see #invokeUnderTrace_@see #isLogEnabled;protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger) {_		return isLogEnabled(logger)__	};determine,whether,the,interceptor,should,kick,in,that,is,whether,the,code,invoke,under,trace,method,should,be,called,p,default,behavior,is,to,check,whether,the,given,code,log,instance,is,enabled,subclasses,can,override,this,to,apply,the,interceptor,in,other,cases,as,well,param,invocation,the,code,method,invocation,being,traced,param,logger,the,code,log,instance,to,check,see,invoke,under,trace,see,is,log,enabled;protected,boolean,is,interceptor,enabled,method,invocation,invocation,log,logger,return,is,log,enabled,logger
AbstractTraceInterceptor -> protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger);1498780456;Determine whether the interceptor should kick in, that is,_whether the {@code invokeUnderTrace} method should be called._<p>Default behavior is to check whether the given {@code Log}_instance is enabled. Subclasses can override this to apply the_interceptor in other cases as well._@param invocation the {@code MethodInvocation} being traced_@param logger the {@code Log} instance to check_@see #invokeUnderTrace_@see #isLogEnabled;protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger) {_		return isLogEnabled(logger)__	};determine,whether,the,interceptor,should,kick,in,that,is,whether,the,code,invoke,under,trace,method,should,be,called,p,default,behavior,is,to,check,whether,the,given,code,log,instance,is,enabled,subclasses,can,override,this,to,apply,the,interceptor,in,other,cases,as,well,param,invocation,the,code,method,invocation,being,traced,param,logger,the,code,log,instance,to,check,see,invoke,under,trace,see,is,log,enabled;protected,boolean,is,interceptor,enabled,method,invocation,invocation,log,logger,return,is,log,enabled,logger
AbstractTraceInterceptor -> protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger);1499944780;Determine whether the interceptor should kick in, that is,_whether the {@code invokeUnderTrace} method should be called._<p>Default behavior is to check whether the given {@code Log}_instance is enabled. Subclasses can override this to apply the_interceptor in other cases as well._@param invocation the {@code MethodInvocation} being traced_@param logger the {@code Log} instance to check_@see #invokeUnderTrace_@see #isLogEnabled;protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger) {_		return isLogEnabled(logger)__	};determine,whether,the,interceptor,should,kick,in,that,is,whether,the,code,invoke,under,trace,method,should,be,called,p,default,behavior,is,to,check,whether,the,given,code,log,instance,is,enabled,subclasses,can,override,this,to,apply,the,interceptor,in,other,cases,as,well,param,invocation,the,code,method,invocation,being,traced,param,logger,the,code,log,instance,to,check,see,invoke,under,trace,see,is,log,enabled;protected,boolean,is,interceptor,enabled,method,invocation,invocation,log,logger,return,is,log,enabled,logger
AbstractTraceInterceptor -> protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger);1550825428;Determine whether the interceptor should kick in, that is,_whether the {@code invokeUnderTrace} method should be called._<p>Default behavior is to check whether the given {@code Log}_instance is enabled. Subclasses can override this to apply the_interceptor in other cases as well._@param invocation the {@code MethodInvocation} being traced_@param logger the {@code Log} instance to check_@see #invokeUnderTrace_@see #isLogEnabled;protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger) {_		return isLogEnabled(logger)__	};determine,whether,the,interceptor,should,kick,in,that,is,whether,the,code,invoke,under,trace,method,should,be,called,p,default,behavior,is,to,check,whether,the,given,code,log,instance,is,enabled,subclasses,can,override,this,to,apply,the,interceptor,in,other,cases,as,well,param,invocation,the,code,method,invocation,being,traced,param,logger,the,code,log,instance,to,check,see,invoke,under,trace,see,is,log,enabled;protected,boolean,is,interceptor,enabled,method,invocation,invocation,log,logger,return,is,log,enabled,logger
AbstractTraceInterceptor -> public void setLogExceptionStackTrace(boolean logExceptionStackTrace);1499944780;Set whether to pass an exception to the logger, suggesting inclusion_of its stack trace into the log. Default is "true"_ set this to "false"_in order to reduce the log output to just the trace message (which may_include the exception class name and exception message, if applicable)._@since 4.3.10;public void setLogExceptionStackTrace(boolean logExceptionStackTrace) {_		this.logExceptionStackTrace = logExceptionStackTrace__	};set,whether,to,pass,an,exception,to,the,logger,suggesting,inclusion,of,its,stack,trace,into,the,log,default,is,true,set,this,to,false,in,order,to,reduce,the,log,output,to,just,the,trace,message,which,may,include,the,exception,class,name,and,exception,message,if,applicable,since,4,3,10;public,void,set,log,exception,stack,trace,boolean,log,exception,stack,trace,this,log,exception,stack,trace,log,exception,stack,trace
AbstractTraceInterceptor -> public void setLogExceptionStackTrace(boolean logExceptionStackTrace);1550825428;Set whether to pass an exception to the logger, suggesting inclusion_of its stack trace into the log. Default is "true"_ set this to "false"_in order to reduce the log output to just the trace message (which may_include the exception class name and exception message, if applicable)._@since 4.3.10;public void setLogExceptionStackTrace(boolean logExceptionStackTrace) {_		this.logExceptionStackTrace = logExceptionStackTrace__	};set,whether,to,pass,an,exception,to,the,logger,suggesting,inclusion,of,its,stack,trace,into,the,log,default,is,true,set,this,to,false,in,order,to,reduce,the,log,output,to,just,the,trace,message,which,may,include,the,exception,class,name,and,exception,message,if,applicable,since,4,3,10;public,void,set,log,exception,stack,trace,boolean,log,exception,stack,trace,this,log,exception,stack,trace,log,exception,stack,trace
AbstractTraceInterceptor -> protected Log getLoggerForInvocation(MethodInvocation invocation);1328020251;Return the appropriate <code>Log</code> instance to use for the given_<code>MethodInvocation</code>. If the <code>useDynamicLogger</code> flag_is set, the <code>Log</code> instance will be for the target class of the_<code>MethodInvocation</code>, otherwise the <code>Log</code> will be the_default static logger._@param invocation the <code>MethodInvocation</code> being traced_@return the <code>Log</code> instance to use_@see #setUseDynamicLogger;protected Log getLoggerForInvocation(MethodInvocation invocation) {_		if (this.defaultLogger != null) {_			return this.defaultLogger__		}_		else {_			Object target = invocation.getThis()__			return LogFactory.getLog(getClassForLogging(target))__		}_	};return,the,appropriate,code,log,code,instance,to,use,for,the,given,code,method,invocation,code,if,the,code,use,dynamic,logger,code,flag,is,set,the,code,log,code,instance,will,be,for,the,target,class,of,the,code,method,invocation,code,otherwise,the,code,log,code,will,be,the,default,static,logger,param,invocation,the,code,method,invocation,code,being,traced,return,the,code,log,code,instance,to,use,see,set,use,dynamic,logger;protected,log,get,logger,for,invocation,method,invocation,invocation,if,this,default,logger,null,return,this,default,logger,else,object,target,invocation,get,this,return,log,factory,get,log,get,class,for,logging,target
AbstractTraceInterceptor -> protected Log getLoggerForInvocation(MethodInvocation invocation);1356735495;Return the appropriate {@code Log} instance to use for the given_{@code MethodInvocation}. If the {@code useDynamicLogger} flag_is set, the {@code Log} instance will be for the target class of the_{@code MethodInvocation}, otherwise the {@code Log} will be the_default static logger._@param invocation the {@code MethodInvocation} being traced_@return the {@code Log} instance to use_@see #setUseDynamicLogger;protected Log getLoggerForInvocation(MethodInvocation invocation) {_		if (this.defaultLogger != null) {_			return this.defaultLogger__		}_		else {_			Object target = invocation.getThis()__			return LogFactory.getLog(getClassForLogging(target))__		}_	};return,the,appropriate,code,log,instance,to,use,for,the,given,code,method,invocation,if,the,code,use,dynamic,logger,flag,is,set,the,code,log,instance,will,be,for,the,target,class,of,the,code,method,invocation,otherwise,the,code,log,will,be,the,default,static,logger,param,invocation,the,code,method,invocation,being,traced,return,the,code,log,instance,to,use,see,set,use,dynamic,logger;protected,log,get,logger,for,invocation,method,invocation,invocation,if,this,default,logger,null,return,this,default,logger,else,object,target,invocation,get,this,return,log,factory,get,log,get,class,for,logging,target
AbstractTraceInterceptor -> protected Log getLoggerForInvocation(MethodInvocation invocation);1357119239;Return the appropriate {@code Log} instance to use for the given_{@code MethodInvocation}. If the {@code useDynamicLogger} flag_is set, the {@code Log} instance will be for the target class of the_{@code MethodInvocation}, otherwise the {@code Log} will be the_default static logger._@param invocation the {@code MethodInvocation} being traced_@return the {@code Log} instance to use_@see #setUseDynamicLogger;protected Log getLoggerForInvocation(MethodInvocation invocation) {_		if (this.defaultLogger != null) {_			return this.defaultLogger__		}_		else {_			Object target = invocation.getThis()__			return LogFactory.getLog(getClassForLogging(target))__		}_	};return,the,appropriate,code,log,instance,to,use,for,the,given,code,method,invocation,if,the,code,use,dynamic,logger,flag,is,set,the,code,log,instance,will,be,for,the,target,class,of,the,code,method,invocation,otherwise,the,code,log,will,be,the,default,static,logger,param,invocation,the,code,method,invocation,being,traced,return,the,code,log,instance,to,use,see,set,use,dynamic,logger;protected,log,get,logger,for,invocation,method,invocation,invocation,if,this,default,logger,null,return,this,default,logger,else,object,target,invocation,get,this,return,log,factory,get,log,get,class,for,logging,target
AbstractTraceInterceptor -> protected Log getLoggerForInvocation(MethodInvocation invocation);1368482696;Return the appropriate {@code Log} instance to use for the given_{@code MethodInvocation}. If the {@code useDynamicLogger} flag_is set, the {@code Log} instance will be for the target class of the_{@code MethodInvocation}, otherwise the {@code Log} will be the_default static logger._@param invocation the {@code MethodInvocation} being traced_@return the {@code Log} instance to use_@see #setUseDynamicLogger;protected Log getLoggerForInvocation(MethodInvocation invocation) {_		if (this.defaultLogger != null) {_			return this.defaultLogger__		}_		else {_			Object target = invocation.getThis()__			return LogFactory.getLog(getClassForLogging(target))__		}_	};return,the,appropriate,code,log,instance,to,use,for,the,given,code,method,invocation,if,the,code,use,dynamic,logger,flag,is,set,the,code,log,instance,will,be,for,the,target,class,of,the,code,method,invocation,otherwise,the,code,log,will,be,the,default,static,logger,param,invocation,the,code,method,invocation,being,traced,return,the,code,log,instance,to,use,see,set,use,dynamic,logger;protected,log,get,logger,for,invocation,method,invocation,invocation,if,this,default,logger,null,return,this,default,logger,else,object,target,invocation,get,this,return,log,factory,get,log,get,class,for,logging,target
AbstractTraceInterceptor -> protected Log getLoggerForInvocation(MethodInvocation invocation);1385412762;Return the appropriate {@code Log} instance to use for the given_{@code MethodInvocation}. If the {@code useDynamicLogger} flag_is set, the {@code Log} instance will be for the target class of the_{@code MethodInvocation}, otherwise the {@code Log} will be the_default static logger._@param invocation the {@code MethodInvocation} being traced_@return the {@code Log} instance to use_@see #setUseDynamicLogger;protected Log getLoggerForInvocation(MethodInvocation invocation) {_		if (this.defaultLogger != null) {_			return this.defaultLogger__		}_		else {_			Object target = invocation.getThis()__			return LogFactory.getLog(getClassForLogging(target))__		}_	};return,the,appropriate,code,log,instance,to,use,for,the,given,code,method,invocation,if,the,code,use,dynamic,logger,flag,is,set,the,code,log,instance,will,be,for,the,target,class,of,the,code,method,invocation,otherwise,the,code,log,will,be,the,default,static,logger,param,invocation,the,code,method,invocation,being,traced,return,the,code,log,instance,to,use,see,set,use,dynamic,logger;protected,log,get,logger,for,invocation,method,invocation,invocation,if,this,default,logger,null,return,this,default,logger,else,object,target,invocation,get,this,return,log,factory,get,log,get,class,for,logging,target
AbstractTraceInterceptor -> protected Log getLoggerForInvocation(MethodInvocation invocation);1498780456;Return the appropriate {@code Log} instance to use for the given_{@code MethodInvocation}. If the {@code useDynamicLogger} flag_is set, the {@code Log} instance will be for the target class of the_{@code MethodInvocation}, otherwise the {@code Log} will be the_default static logger._@param invocation the {@code MethodInvocation} being traced_@return the {@code Log} instance to use_@see #setUseDynamicLogger;protected Log getLoggerForInvocation(MethodInvocation invocation) {_		if (this.defaultLogger != null) {_			return this.defaultLogger__		}_		else {_			Object target = invocation.getThis()__			return LogFactory.getLog(getClassForLogging(target))__		}_	};return,the,appropriate,code,log,instance,to,use,for,the,given,code,method,invocation,if,the,code,use,dynamic,logger,flag,is,set,the,code,log,instance,will,be,for,the,target,class,of,the,code,method,invocation,otherwise,the,code,log,will,be,the,default,static,logger,param,invocation,the,code,method,invocation,being,traced,return,the,code,log,instance,to,use,see,set,use,dynamic,logger;protected,log,get,logger,for,invocation,method,invocation,invocation,if,this,default,logger,null,return,this,default,logger,else,object,target,invocation,get,this,return,log,factory,get,log,get,class,for,logging,target
AbstractTraceInterceptor -> protected Log getLoggerForInvocation(MethodInvocation invocation);1499944780;Return the appropriate {@code Log} instance to use for the given_{@code MethodInvocation}. If the {@code useDynamicLogger} flag_is set, the {@code Log} instance will be for the target class of the_{@code MethodInvocation}, otherwise the {@code Log} will be the_default static logger._@param invocation the {@code MethodInvocation} being traced_@return the {@code Log} instance to use_@see #setUseDynamicLogger;protected Log getLoggerForInvocation(MethodInvocation invocation) {_		if (this.defaultLogger != null) {_			return this.defaultLogger__		}_		else {_			Object target = invocation.getThis()__			return LogFactory.getLog(getClassForLogging(target))__		}_	};return,the,appropriate,code,log,instance,to,use,for,the,given,code,method,invocation,if,the,code,use,dynamic,logger,flag,is,set,the,code,log,instance,will,be,for,the,target,class,of,the,code,method,invocation,otherwise,the,code,log,will,be,the,default,static,logger,param,invocation,the,code,method,invocation,being,traced,return,the,code,log,instance,to,use,see,set,use,dynamic,logger;protected,log,get,logger,for,invocation,method,invocation,invocation,if,this,default,logger,null,return,this,default,logger,else,object,target,invocation,get,this,return,log,factory,get,log,get,class,for,logging,target
AbstractTraceInterceptor -> protected Log getLoggerForInvocation(MethodInvocation invocation);1550825428;Return the appropriate {@code Log} instance to use for the given_{@code MethodInvocation}. If the {@code useDynamicLogger} flag_is set, the {@code Log} instance will be for the target class of the_{@code MethodInvocation}, otherwise the {@code Log} will be the_default static logger._@param invocation the {@code MethodInvocation} being traced_@return the {@code Log} instance to use_@see #setUseDynamicLogger;protected Log getLoggerForInvocation(MethodInvocation invocation) {_		if (this.defaultLogger != null) {_			return this.defaultLogger__		}_		else {_			Object target = invocation.getThis()__			return LogFactory.getLog(getClassForLogging(target))__		}_	};return,the,appropriate,code,log,instance,to,use,for,the,given,code,method,invocation,if,the,code,use,dynamic,logger,flag,is,set,the,code,log,instance,will,be,for,the,target,class,of,the,code,method,invocation,otherwise,the,code,log,will,be,the,default,static,logger,param,invocation,the,code,method,invocation,being,traced,return,the,code,log,instance,to,use,see,set,use,dynamic,logger;protected,log,get,logger,for,invocation,method,invocation,invocation,if,this,default,logger,null,return,this,default,logger,else,object,target,invocation,get,this,return,log,factory,get,log,get,class,for,logging,target
AbstractTraceInterceptor -> protected boolean isLogEnabled(Log logger);1328020251;Determine whether the given {@link Log} instance is enabled._<p>Default is <code>true</code> when the "trace" level is enabled._Subclasses can override this to change the level under which 'tracing' occurs._@param logger the <code>Log</code> instance to check;protected boolean isLogEnabled(Log logger) {_		return logger.isTraceEnabled()__	};determine,whether,the,given,link,log,instance,is,enabled,p,default,is,code,true,code,when,the,trace,level,is,enabled,subclasses,can,override,this,to,change,the,level,under,which,tracing,occurs,param,logger,the,code,log,code,instance,to,check;protected,boolean,is,log,enabled,log,logger,return,logger,is,trace,enabled
AbstractTraceInterceptor -> protected boolean isLogEnabled(Log logger);1356735495;Determine whether the given {@link Log} instance is enabled._<p>Default is {@code true} when the "trace" level is enabled._Subclasses can override this to change the level under which 'tracing' occurs._@param logger the {@code Log} instance to check;protected boolean isLogEnabled(Log logger) {_		return logger.isTraceEnabled()__	};determine,whether,the,given,link,log,instance,is,enabled,p,default,is,code,true,when,the,trace,level,is,enabled,subclasses,can,override,this,to,change,the,level,under,which,tracing,occurs,param,logger,the,code,log,instance,to,check;protected,boolean,is,log,enabled,log,logger,return,logger,is,trace,enabled
AbstractTraceInterceptor -> protected boolean isLogEnabled(Log logger);1357119239;Determine whether the given {@link Log} instance is enabled._<p>Default is {@code true} when the "trace" level is enabled._Subclasses can override this to change the level under which 'tracing' occurs._@param logger the {@code Log} instance to check;protected boolean isLogEnabled(Log logger) {_		return logger.isTraceEnabled()__	};determine,whether,the,given,link,log,instance,is,enabled,p,default,is,code,true,when,the,trace,level,is,enabled,subclasses,can,override,this,to,change,the,level,under,which,tracing,occurs,param,logger,the,code,log,instance,to,check;protected,boolean,is,log,enabled,log,logger,return,logger,is,trace,enabled
AbstractTraceInterceptor -> protected boolean isLogEnabled(Log logger);1368482696;Determine whether the given {@link Log} instance is enabled._<p>Default is {@code true} when the "trace" level is enabled._Subclasses can override this to change the level under which 'tracing' occurs._@param logger the {@code Log} instance to check;protected boolean isLogEnabled(Log logger) {_		return logger.isTraceEnabled()__	};determine,whether,the,given,link,log,instance,is,enabled,p,default,is,code,true,when,the,trace,level,is,enabled,subclasses,can,override,this,to,change,the,level,under,which,tracing,occurs,param,logger,the,code,log,instance,to,check;protected,boolean,is,log,enabled,log,logger,return,logger,is,trace,enabled
AbstractTraceInterceptor -> protected boolean isLogEnabled(Log logger);1385412762;Determine whether the given {@link Log} instance is enabled._<p>Default is {@code true} when the "trace" level is enabled._Subclasses can override this to change the level under which 'tracing' occurs._@param logger the {@code Log} instance to check;protected boolean isLogEnabled(Log logger) {_		return logger.isTraceEnabled()__	};determine,whether,the,given,link,log,instance,is,enabled,p,default,is,code,true,when,the,trace,level,is,enabled,subclasses,can,override,this,to,change,the,level,under,which,tracing,occurs,param,logger,the,code,log,instance,to,check;protected,boolean,is,log,enabled,log,logger,return,logger,is,trace,enabled
AbstractTraceInterceptor -> protected boolean isLogEnabled(Log logger);1498780456;Determine whether the given {@link Log} instance is enabled._<p>Default is {@code true} when the "trace" level is enabled._Subclasses can override this to change the level under which 'tracing' occurs._@param logger the {@code Log} instance to check;protected boolean isLogEnabled(Log logger) {_		return logger.isTraceEnabled()__	};determine,whether,the,given,link,log,instance,is,enabled,p,default,is,code,true,when,the,trace,level,is,enabled,subclasses,can,override,this,to,change,the,level,under,which,tracing,occurs,param,logger,the,code,log,instance,to,check;protected,boolean,is,log,enabled,log,logger,return,logger,is,trace,enabled
AbstractTraceInterceptor -> protected boolean isLogEnabled(Log logger);1499944780;Determine whether the given {@link Log} instance is enabled._<p>Default is {@code true} when the "trace" level is enabled._Subclasses can override this to change the level under which 'tracing' occurs._@param logger the {@code Log} instance to check;protected boolean isLogEnabled(Log logger) {_		return logger.isTraceEnabled()__	};determine,whether,the,given,link,log,instance,is,enabled,p,default,is,code,true,when,the,trace,level,is,enabled,subclasses,can,override,this,to,change,the,level,under,which,tracing,occurs,param,logger,the,code,log,instance,to,check;protected,boolean,is,log,enabled,log,logger,return,logger,is,trace,enabled
AbstractTraceInterceptor -> protected boolean isLogEnabled(Log logger);1550825428;Determine whether the given {@link Log} instance is enabled._<p>Default is {@code true} when the "trace" level is enabled._Subclasses can override this to change the level under which 'tracing' occurs._@param logger the {@code Log} instance to check;protected boolean isLogEnabled(Log logger) {_		return logger.isTraceEnabled()__	};determine,whether,the,given,link,log,instance,is,enabled,p,default,is,code,true,when,the,trace,level,is,enabled,subclasses,can,override,this,to,change,the,level,under,which,tracing,occurs,param,logger,the,code,log,instance,to,check;protected,boolean,is,log,enabled,log,logger,return,logger,is,trace,enabled
AbstractTraceInterceptor -> public void setLoggerName(String loggerName);1328020251;Set the name of the logger to use. The name will be passed to the_underlying logger implementation through Commons Logging, getting_interpreted as log category according to the logger's configuration._<p>This can be specified to not log into the category of a class_(whether this interceptor's class or the class getting called)_but rather into a specific named category._<p><b>NOTE:</b> Specify either this property or "useDynamicLogger", not both._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setLoggerName(String loggerName) {_		this.defaultLogger = LogFactory.getLog(loggerName)__	};set,the,name,of,the,logger,to,use,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,this,can,be,specified,to,not,log,into,the,category,of,a,class,whether,this,interceptor,s,class,or,the,class,getting,called,but,rather,into,a,specific,named,category,p,b,note,b,specify,either,this,property,or,use,dynamic,logger,not,both,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,logger,name,string,logger,name,this,default,logger,log,factory,get,log,logger,name
AbstractTraceInterceptor -> public void setLoggerName(String loggerName);1356735495;Set the name of the logger to use. The name will be passed to the_underlying logger implementation through Commons Logging, getting_interpreted as log category according to the logger's configuration._<p>This can be specified to not log into the category of a class_(whether this interceptor's class or the class getting called)_but rather into a specific named category._<p><b>NOTE:</b> Specify either this property or "useDynamicLogger", not both._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setLoggerName(String loggerName) {_		this.defaultLogger = LogFactory.getLog(loggerName)__	};set,the,name,of,the,logger,to,use,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,this,can,be,specified,to,not,log,into,the,category,of,a,class,whether,this,interceptor,s,class,or,the,class,getting,called,but,rather,into,a,specific,named,category,p,b,note,b,specify,either,this,property,or,use,dynamic,logger,not,both,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,logger,name,string,logger,name,this,default,logger,log,factory,get,log,logger,name
AbstractTraceInterceptor -> public void setLoggerName(String loggerName);1357119239;Set the name of the logger to use. The name will be passed to the_underlying logger implementation through Commons Logging, getting_interpreted as log category according to the logger's configuration._<p>This can be specified to not log into the category of a class_(whether this interceptor's class or the class getting called)_but rather into a specific named category._<p><b>NOTE:</b> Specify either this property or "useDynamicLogger", not both._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setLoggerName(String loggerName) {_		this.defaultLogger = LogFactory.getLog(loggerName)__	};set,the,name,of,the,logger,to,use,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,this,can,be,specified,to,not,log,into,the,category,of,a,class,whether,this,interceptor,s,class,or,the,class,getting,called,but,rather,into,a,specific,named,category,p,b,note,b,specify,either,this,property,or,use,dynamic,logger,not,both,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,logger,name,string,logger,name,this,default,logger,log,factory,get,log,logger,name
AbstractTraceInterceptor -> public void setLoggerName(String loggerName);1368482696;Set the name of the logger to use. The name will be passed to the_underlying logger implementation through Commons Logging, getting_interpreted as log category according to the logger's configuration._<p>This can be specified to not log into the category of a class_(whether this interceptor's class or the class getting called)_but rather into a specific named category._<p><b>NOTE:</b> Specify either this property or "useDynamicLogger", not both._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setLoggerName(String loggerName) {_		this.defaultLogger = LogFactory.getLog(loggerName)__	};set,the,name,of,the,logger,to,use,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,this,can,be,specified,to,not,log,into,the,category,of,a,class,whether,this,interceptor,s,class,or,the,class,getting,called,but,rather,into,a,specific,named,category,p,b,note,b,specify,either,this,property,or,use,dynamic,logger,not,both,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,logger,name,string,logger,name,this,default,logger,log,factory,get,log,logger,name
AbstractTraceInterceptor -> public void setLoggerName(String loggerName);1385412762;Set the name of the logger to use. The name will be passed to the_underlying logger implementation through Commons Logging, getting_interpreted as log category according to the logger's configuration._<p>This can be specified to not log into the category of a class_(whether this interceptor's class or the class getting called)_but rather into a specific named category._<p><b>NOTE:</b> Specify either this property or "useDynamicLogger", not both._@see org.apache.commons.logging.LogFactory#getLog(String)_@see org.apache.log4j.Logger#getLogger(String)_@see java.util.logging.Logger#getLogger(String);public void setLoggerName(String loggerName) {_		this.defaultLogger = LogFactory.getLog(loggerName)__	};set,the,name,of,the,logger,to,use,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,this,can,be,specified,to,not,log,into,the,category,of,a,class,whether,this,interceptor,s,class,or,the,class,getting,called,but,rather,into,a,specific,named,category,p,b,note,b,specify,either,this,property,or,use,dynamic,logger,not,both,see,org,apache,commons,logging,log,factory,get,log,string,see,org,apache,log4j,logger,get,logger,string,see,java,util,logging,logger,get,logger,string;public,void,set,logger,name,string,logger,name,this,default,logger,log,factory,get,log,logger,name
AbstractTraceInterceptor -> public void setLoggerName(String loggerName);1498780456;Set the name of the logger to use. The name will be passed to the_underlying logger implementation through Commons Logging, getting_interpreted as log category according to the logger's configuration._<p>This can be specified to not log into the category of a class_(whether this interceptor's class or the class getting called)_but rather into a specific named category._<p><b>NOTE:</b> Specify either this property or "useDynamicLogger", not both._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setLoggerName(String loggerName) {_		this.defaultLogger = LogFactory.getLog(loggerName)__	};set,the,name,of,the,logger,to,use,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,this,can,be,specified,to,not,log,into,the,category,of,a,class,whether,this,interceptor,s,class,or,the,class,getting,called,but,rather,into,a,specific,named,category,p,b,note,b,specify,either,this,property,or,use,dynamic,logger,not,both,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,logger,name,string,logger,name,this,default,logger,log,factory,get,log,logger,name
AbstractTraceInterceptor -> public void setLoggerName(String loggerName);1499944780;Set the name of the logger to use. The name will be passed to the_underlying logger implementation through Commons Logging, getting_interpreted as log category according to the logger's configuration._<p>This can be specified to not log into the category of a class_(whether this interceptor's class or the class getting called)_but rather into a specific named category._<p><b>NOTE:</b> Specify either this property or "useDynamicLogger", not both._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setLoggerName(String loggerName) {_		this.defaultLogger = LogFactory.getLog(loggerName)__	};set,the,name,of,the,logger,to,use,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,this,can,be,specified,to,not,log,into,the,category,of,a,class,whether,this,interceptor,s,class,or,the,class,getting,called,but,rather,into,a,specific,named,category,p,b,note,b,specify,either,this,property,or,use,dynamic,logger,not,both,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,logger,name,string,logger,name,this,default,logger,log,factory,get,log,logger,name
AbstractTraceInterceptor -> public void setLoggerName(String loggerName);1550825428;Set the name of the logger to use. The name will be passed to the_underlying logger implementation through Commons Logging, getting_interpreted as log category according to the logger's configuration._<p>This can be specified to not log into the category of a class_(whether this interceptor's class or the class getting called)_but rather into a specific named category._<p><b>NOTE:</b> Specify either this property or "useDynamicLogger", not both._@see org.apache.commons.logging.LogFactory#getLog(String)_@see java.util.logging.Logger#getLogger(String);public void setLoggerName(String loggerName) {_		this.defaultLogger = LogFactory.getLog(loggerName)__	};set,the,name,of,the,logger,to,use,the,name,will,be,passed,to,the,underlying,logger,implementation,through,commons,logging,getting,interpreted,as,log,category,according,to,the,logger,s,configuration,p,this,can,be,specified,to,not,log,into,the,category,of,a,class,whether,this,interceptor,s,class,or,the,class,getting,called,but,rather,into,a,specific,named,category,p,b,note,b,specify,either,this,property,or,use,dynamic,logger,not,both,see,org,apache,commons,logging,log,factory,get,log,string,see,java,util,logging,logger,get,logger,string;public,void,set,logger,name,string,logger,name,this,default,logger,log,factory,get,log,logger,name
AbstractTraceInterceptor -> public void setUseDynamicLogger(boolean useDynamicLogger);1328020251;Set whether to use a dynamic logger or a static logger._Default is a static logger for this trace interceptor._<p>Used to determine which <code>Log</code> instance should be used to write_log messages for a particular method invocation: a dynamic one for the_<code>Class</code> getting called, or a static one for the <code>Class</code>_of the trace interceptor._<p><b>NOTE:</b> Specify either this property or "loggerName", not both._@see #getLoggerForInvocation(org.aopalliance.intercept.MethodInvocation);public void setUseDynamicLogger(boolean useDynamicLogger) {_		_		this.defaultLogger = (useDynamicLogger ? null : LogFactory.getLog(getClass()))__	};set,whether,to,use,a,dynamic,logger,or,a,static,logger,default,is,a,static,logger,for,this,trace,interceptor,p,used,to,determine,which,code,log,code,instance,should,be,used,to,write,log,messages,for,a,particular,method,invocation,a,dynamic,one,for,the,code,class,code,getting,called,or,a,static,one,for,the,code,class,code,of,the,trace,interceptor,p,b,note,b,specify,either,this,property,or,logger,name,not,both,see,get,logger,for,invocation,org,aopalliance,intercept,method,invocation;public,void,set,use,dynamic,logger,boolean,use,dynamic,logger,this,default,logger,use,dynamic,logger,null,log,factory,get,log,get,class
AbstractTraceInterceptor -> public void setUseDynamicLogger(boolean useDynamicLogger);1356735495;Set whether to use a dynamic logger or a static logger._Default is a static logger for this trace interceptor._<p>Used to determine which {@code Log} instance should be used to write_log messages for a particular method invocation: a dynamic one for the_{@code Class} getting called, or a static one for the {@code Class}_of the trace interceptor._<p><b>NOTE:</b> Specify either this property or "loggerName", not both._@see #getLoggerForInvocation(org.aopalliance.intercept.MethodInvocation);public void setUseDynamicLogger(boolean useDynamicLogger) {_		_		this.defaultLogger = (useDynamicLogger ? null : LogFactory.getLog(getClass()))__	};set,whether,to,use,a,dynamic,logger,or,a,static,logger,default,is,a,static,logger,for,this,trace,interceptor,p,used,to,determine,which,code,log,instance,should,be,used,to,write,log,messages,for,a,particular,method,invocation,a,dynamic,one,for,the,code,class,getting,called,or,a,static,one,for,the,code,class,of,the,trace,interceptor,p,b,note,b,specify,either,this,property,or,logger,name,not,both,see,get,logger,for,invocation,org,aopalliance,intercept,method,invocation;public,void,set,use,dynamic,logger,boolean,use,dynamic,logger,this,default,logger,use,dynamic,logger,null,log,factory,get,log,get,class
AbstractTraceInterceptor -> public void setUseDynamicLogger(boolean useDynamicLogger);1357119239;Set whether to use a dynamic logger or a static logger._Default is a static logger for this trace interceptor._<p>Used to determine which {@code Log} instance should be used to write_log messages for a particular method invocation: a dynamic one for the_{@code Class} getting called, or a static one for the {@code Class}_of the trace interceptor._<p><b>NOTE:</b> Specify either this property or "loggerName", not both._@see #getLoggerForInvocation(org.aopalliance.intercept.MethodInvocation);public void setUseDynamicLogger(boolean useDynamicLogger) {_		_		this.defaultLogger = (useDynamicLogger ? null : LogFactory.getLog(getClass()))__	};set,whether,to,use,a,dynamic,logger,or,a,static,logger,default,is,a,static,logger,for,this,trace,interceptor,p,used,to,determine,which,code,log,instance,should,be,used,to,write,log,messages,for,a,particular,method,invocation,a,dynamic,one,for,the,code,class,getting,called,or,a,static,one,for,the,code,class,of,the,trace,interceptor,p,b,note,b,specify,either,this,property,or,logger,name,not,both,see,get,logger,for,invocation,org,aopalliance,intercept,method,invocation;public,void,set,use,dynamic,logger,boolean,use,dynamic,logger,this,default,logger,use,dynamic,logger,null,log,factory,get,log,get,class
AbstractTraceInterceptor -> public void setUseDynamicLogger(boolean useDynamicLogger);1368482696;Set whether to use a dynamic logger or a static logger._Default is a static logger for this trace interceptor._<p>Used to determine which {@code Log} instance should be used to write_log messages for a particular method invocation: a dynamic one for the_{@code Class} getting called, or a static one for the {@code Class}_of the trace interceptor._<p><b>NOTE:</b> Specify either this property or "loggerName", not both._@see #getLoggerForInvocation(org.aopalliance.intercept.MethodInvocation);public void setUseDynamicLogger(boolean useDynamicLogger) {_		_		this.defaultLogger = (useDynamicLogger ? null : LogFactory.getLog(getClass()))__	};set,whether,to,use,a,dynamic,logger,or,a,static,logger,default,is,a,static,logger,for,this,trace,interceptor,p,used,to,determine,which,code,log,instance,should,be,used,to,write,log,messages,for,a,particular,method,invocation,a,dynamic,one,for,the,code,class,getting,called,or,a,static,one,for,the,code,class,of,the,trace,interceptor,p,b,note,b,specify,either,this,property,or,logger,name,not,both,see,get,logger,for,invocation,org,aopalliance,intercept,method,invocation;public,void,set,use,dynamic,logger,boolean,use,dynamic,logger,this,default,logger,use,dynamic,logger,null,log,factory,get,log,get,class
AbstractTraceInterceptor -> public void setUseDynamicLogger(boolean useDynamicLogger);1385412762;Set whether to use a dynamic logger or a static logger._Default is a static logger for this trace interceptor._<p>Used to determine which {@code Log} instance should be used to write_log messages for a particular method invocation: a dynamic one for the_{@code Class} getting called, or a static one for the {@code Class}_of the trace interceptor._<p><b>NOTE:</b> Specify either this property or "loggerName", not both._@see #getLoggerForInvocation(org.aopalliance.intercept.MethodInvocation);public void setUseDynamicLogger(boolean useDynamicLogger) {_		_		this.defaultLogger = (useDynamicLogger ? null : LogFactory.getLog(getClass()))__	};set,whether,to,use,a,dynamic,logger,or,a,static,logger,default,is,a,static,logger,for,this,trace,interceptor,p,used,to,determine,which,code,log,instance,should,be,used,to,write,log,messages,for,a,particular,method,invocation,a,dynamic,one,for,the,code,class,getting,called,or,a,static,one,for,the,code,class,of,the,trace,interceptor,p,b,note,b,specify,either,this,property,or,logger,name,not,both,see,get,logger,for,invocation,org,aopalliance,intercept,method,invocation;public,void,set,use,dynamic,logger,boolean,use,dynamic,logger,this,default,logger,use,dynamic,logger,null,log,factory,get,log,get,class
AbstractTraceInterceptor -> public void setUseDynamicLogger(boolean useDynamicLogger);1498780456;Set whether to use a dynamic logger or a static logger._Default is a static logger for this trace interceptor._<p>Used to determine which {@code Log} instance should be used to write_log messages for a particular method invocation: a dynamic one for the_{@code Class} getting called, or a static one for the {@code Class}_of the trace interceptor._<p><b>NOTE:</b> Specify either this property or "loggerName", not both._@see #getLoggerForInvocation(org.aopalliance.intercept.MethodInvocation);public void setUseDynamicLogger(boolean useDynamicLogger) {_		_		this.defaultLogger = (useDynamicLogger ? null : LogFactory.getLog(getClass()))__	};set,whether,to,use,a,dynamic,logger,or,a,static,logger,default,is,a,static,logger,for,this,trace,interceptor,p,used,to,determine,which,code,log,instance,should,be,used,to,write,log,messages,for,a,particular,method,invocation,a,dynamic,one,for,the,code,class,getting,called,or,a,static,one,for,the,code,class,of,the,trace,interceptor,p,b,note,b,specify,either,this,property,or,logger,name,not,both,see,get,logger,for,invocation,org,aopalliance,intercept,method,invocation;public,void,set,use,dynamic,logger,boolean,use,dynamic,logger,this,default,logger,use,dynamic,logger,null,log,factory,get,log,get,class
AbstractTraceInterceptor -> public void setUseDynamicLogger(boolean useDynamicLogger);1499944780;Set whether to use a dynamic logger or a static logger._Default is a static logger for this trace interceptor._<p>Used to determine which {@code Log} instance should be used to write_log messages for a particular method invocation: a dynamic one for the_{@code Class} getting called, or a static one for the {@code Class}_of the trace interceptor._<p><b>NOTE:</b> Specify either this property or "loggerName", not both._@see #getLoggerForInvocation(org.aopalliance.intercept.MethodInvocation);public void setUseDynamicLogger(boolean useDynamicLogger) {_		_		this.defaultLogger = (useDynamicLogger ? null : LogFactory.getLog(getClass()))__	};set,whether,to,use,a,dynamic,logger,or,a,static,logger,default,is,a,static,logger,for,this,trace,interceptor,p,used,to,determine,which,code,log,instance,should,be,used,to,write,log,messages,for,a,particular,method,invocation,a,dynamic,one,for,the,code,class,getting,called,or,a,static,one,for,the,code,class,of,the,trace,interceptor,p,b,note,b,specify,either,this,property,or,logger,name,not,both,see,get,logger,for,invocation,org,aopalliance,intercept,method,invocation;public,void,set,use,dynamic,logger,boolean,use,dynamic,logger,this,default,logger,use,dynamic,logger,null,log,factory,get,log,get,class
AbstractTraceInterceptor -> public void setUseDynamicLogger(boolean useDynamicLogger);1550825428;Set whether to use a dynamic logger or a static logger._Default is a static logger for this trace interceptor._<p>Used to determine which {@code Log} instance should be used to write_log messages for a particular method invocation: a dynamic one for the_{@code Class} getting called, or a static one for the {@code Class}_of the trace interceptor._<p><b>NOTE:</b> Specify either this property or "loggerName", not both._@see #getLoggerForInvocation(org.aopalliance.intercept.MethodInvocation);public void setUseDynamicLogger(boolean useDynamicLogger) {_		_		this.defaultLogger = (useDynamicLogger ? null : LogFactory.getLog(getClass()))__	};set,whether,to,use,a,dynamic,logger,or,a,static,logger,default,is,a,static,logger,for,this,trace,interceptor,p,used,to,determine,which,code,log,instance,should,be,used,to,write,log,messages,for,a,particular,method,invocation,a,dynamic,one,for,the,code,class,getting,called,or,a,static,one,for,the,code,class,of,the,trace,interceptor,p,b,note,b,specify,either,this,property,or,logger,name,not,both,see,get,logger,for,invocation,org,aopalliance,intercept,method,invocation;public,void,set,use,dynamic,logger,boolean,use,dynamic,logger,this,default,logger,use,dynamic,logger,null,log,factory,get,log,get,class
AbstractTraceInterceptor -> public Object invoke(MethodInvocation invocation) throws Throwable;1328020251;Determines whether or not logging is enabled for the particular <code>MethodInvocation</code>._If not, the method invocation proceeds as normal, otherwise the method invocation is passed_to the <code>invokeUnderTrace</code> method for handling._@see #invokeUnderTrace(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log);public Object invoke(MethodInvocation invocation) throws Throwable {_		Log logger = getLoggerForInvocation(invocation)__		if (isInterceptorEnabled(invocation, logger)) {_			return invokeUnderTrace(invocation, logger)__		}_		else {_			return invocation.proceed()__		}_	};determines,whether,or,not,logging,is,enabled,for,the,particular,code,method,invocation,code,if,not,the,method,invocation,proceeds,as,normal,otherwise,the,method,invocation,is,passed,to,the,code,invoke,under,trace,code,method,for,handling,see,invoke,under,trace,org,aopalliance,intercept,method,invocation,org,apache,commons,logging,log;public,object,invoke,method,invocation,invocation,throws,throwable,log,logger,get,logger,for,invocation,invocation,if,is,interceptor,enabled,invocation,logger,return,invoke,under,trace,invocation,logger,else,return,invocation,proceed
AbstractTraceInterceptor -> public Object invoke(MethodInvocation invocation) throws Throwable;1357119239;Determines whether or not logging is enabled for the particular {@code MethodInvocation}._If not, the method invocation proceeds as normal, otherwise the method invocation is passed_to the {@code invokeUnderTrace} method for handling._@see #invokeUnderTrace(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log);public Object invoke(MethodInvocation invocation) throws Throwable {_		Log logger = getLoggerForInvocation(invocation)__		if (isInterceptorEnabled(invocation, logger)) {_			return invokeUnderTrace(invocation, logger)__		}_		else {_			return invocation.proceed()__		}_	};determines,whether,or,not,logging,is,enabled,for,the,particular,code,method,invocation,if,not,the,method,invocation,proceeds,as,normal,otherwise,the,method,invocation,is,passed,to,the,code,invoke,under,trace,method,for,handling,see,invoke,under,trace,org,aopalliance,intercept,method,invocation,org,apache,commons,logging,log;public,object,invoke,method,invocation,invocation,throws,throwable,log,logger,get,logger,for,invocation,invocation,if,is,interceptor,enabled,invocation,logger,return,invoke,under,trace,invocation,logger,else,return,invocation,proceed
AbstractTraceInterceptor -> protected void writeToLog(Log logger, String message, @Nullable Throwable ex);1499944780;Write the supplied trace message and {@link Throwable} to the_supplied {@code Log} instance._<p>To be called by {@link #invokeUnderTrace} for enter/exit outcomes,_potentially including an exception. Note that an exception's stack trace_won't get logged when {@link #setLogExceptionStackTrace} is "false"._<p>By default messages are written at {@code TRACE} level. Subclasses_can override this method to control which level the message is written_at, typically also overriding {@link #isLogEnabled} accordingly._@since 4.3.10_@see #setLogExceptionStackTrace_@see #isLogEnabled;protected void writeToLog(Log logger, String message, @Nullable Throwable ex) {_		if (ex != null && this.logExceptionStackTrace) {_			logger.trace(message, ex)__		}_		else {_			logger.trace(message)__		}_	};write,the,supplied,trace,message,and,link,throwable,to,the,supplied,code,log,instance,p,to,be,called,by,link,invoke,under,trace,for,enter,exit,outcomes,potentially,including,an,exception,note,that,an,exception,s,stack,trace,won,t,get,logged,when,link,set,log,exception,stack,trace,is,false,p,by,default,messages,are,written,at,code,trace,level,subclasses,can,override,this,method,to,control,which,level,the,message,is,written,at,typically,also,overriding,link,is,log,enabled,accordingly,since,4,3,10,see,set,log,exception,stack,trace,see,is,log,enabled;protected,void,write,to,log,log,logger,string,message,nullable,throwable,ex,if,ex,null,this,log,exception,stack,trace,logger,trace,message,ex,else,logger,trace,message
AbstractTraceInterceptor -> protected void writeToLog(Log logger, String message, @Nullable Throwable ex);1550825428;Write the supplied trace message and {@link Throwable} to the_supplied {@code Log} instance._<p>To be called by {@link #invokeUnderTrace} for enter/exit outcomes,_potentially including an exception. Note that an exception's stack trace_won't get logged when {@link #setLogExceptionStackTrace} is "false"._<p>By default messages are written at {@code TRACE} level. Subclasses_can override this method to control which level the message is written_at, typically also overriding {@link #isLogEnabled} accordingly._@since 4.3.10_@see #setLogExceptionStackTrace_@see #isLogEnabled;protected void writeToLog(Log logger, String message, @Nullable Throwable ex) {_		if (ex != null && this.logExceptionStackTrace) {_			logger.trace(message, ex)__		}_		else {_			logger.trace(message)__		}_	};write,the,supplied,trace,message,and,link,throwable,to,the,supplied,code,log,instance,p,to,be,called,by,link,invoke,under,trace,for,enter,exit,outcomes,potentially,including,an,exception,note,that,an,exception,s,stack,trace,won,t,get,logged,when,link,set,log,exception,stack,trace,is,false,p,by,default,messages,are,written,at,code,trace,level,subclasses,can,override,this,method,to,control,which,level,the,message,is,written,at,typically,also,overriding,link,is,log,enabled,accordingly,since,4,3,10,see,set,log,exception,stack,trace,see,is,log,enabled;protected,void,write,to,log,log,logger,string,message,nullable,throwable,ex,if,ex,null,this,log,exception,stack,trace,logger,trace,message,ex,else,logger,trace,message
AbstractTraceInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1356735495;Determines whether or not logging is enabled for the particular {@code MethodInvocation}._If not, the method invocation proceeds as normal, otherwise the method invocation is passed_to the {@code invokeUnderTrace} method for handling._@see #invokeUnderTrace(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log);@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		Log logger = getLoggerForInvocation(invocation)__		if (isInterceptorEnabled(invocation, logger)) {_			return invokeUnderTrace(invocation, logger)__		}_		else {_			return invocation.proceed()__		}_	};determines,whether,or,not,logging,is,enabled,for,the,particular,code,method,invocation,if,not,the,method,invocation,proceeds,as,normal,otherwise,the,method,invocation,is,passed,to,the,code,invoke,under,trace,method,for,handling,see,invoke,under,trace,org,aopalliance,intercept,method,invocation,org,apache,commons,logging,log;override,public,object,invoke,method,invocation,invocation,throws,throwable,log,logger,get,logger,for,invocation,invocation,if,is,interceptor,enabled,invocation,logger,return,invoke,under,trace,invocation,logger,else,return,invocation,proceed
AbstractTraceInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1368482696;Determines whether or not logging is enabled for the particular {@code MethodInvocation}._If not, the method invocation proceeds as normal, otherwise the method invocation is passed_to the {@code invokeUnderTrace} method for handling._@see #invokeUnderTrace(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log);@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		Log logger = getLoggerForInvocation(invocation)__		if (isInterceptorEnabled(invocation, logger)) {_			return invokeUnderTrace(invocation, logger)__		}_		else {_			return invocation.proceed()__		}_	};determines,whether,or,not,logging,is,enabled,for,the,particular,code,method,invocation,if,not,the,method,invocation,proceeds,as,normal,otherwise,the,method,invocation,is,passed,to,the,code,invoke,under,trace,method,for,handling,see,invoke,under,trace,org,aopalliance,intercept,method,invocation,org,apache,commons,logging,log;override,public,object,invoke,method,invocation,invocation,throws,throwable,log,logger,get,logger,for,invocation,invocation,if,is,interceptor,enabled,invocation,logger,return,invoke,under,trace,invocation,logger,else,return,invocation,proceed
AbstractTraceInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1385412762;Determines whether or not logging is enabled for the particular {@code MethodInvocation}._If not, the method invocation proceeds as normal, otherwise the method invocation is passed_to the {@code invokeUnderTrace} method for handling._@see #invokeUnderTrace(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log);@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		Log logger = getLoggerForInvocation(invocation)__		if (isInterceptorEnabled(invocation, logger)) {_			return invokeUnderTrace(invocation, logger)__		}_		else {_			return invocation.proceed()__		}_	};determines,whether,or,not,logging,is,enabled,for,the,particular,code,method,invocation,if,not,the,method,invocation,proceeds,as,normal,otherwise,the,method,invocation,is,passed,to,the,code,invoke,under,trace,method,for,handling,see,invoke,under,trace,org,aopalliance,intercept,method,invocation,org,apache,commons,logging,log;override,public,object,invoke,method,invocation,invocation,throws,throwable,log,logger,get,logger,for,invocation,invocation,if,is,interceptor,enabled,invocation,logger,return,invoke,under,trace,invocation,logger,else,return,invocation,proceed
AbstractTraceInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1498780456;Determines whether or not logging is enabled for the particular {@code MethodInvocation}._If not, the method invocation proceeds as normal, otherwise the method invocation is passed_to the {@code invokeUnderTrace} method for handling._@see #invokeUnderTrace(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log);@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		Log logger = getLoggerForInvocation(invocation)__		if (isInterceptorEnabled(invocation, logger)) {_			return invokeUnderTrace(invocation, logger)__		}_		else {_			return invocation.proceed()__		}_	};determines,whether,or,not,logging,is,enabled,for,the,particular,code,method,invocation,if,not,the,method,invocation,proceeds,as,normal,otherwise,the,method,invocation,is,passed,to,the,code,invoke,under,trace,method,for,handling,see,invoke,under,trace,org,aopalliance,intercept,method,invocation,org,apache,commons,logging,log;override,public,object,invoke,method,invocation,invocation,throws,throwable,log,logger,get,logger,for,invocation,invocation,if,is,interceptor,enabled,invocation,logger,return,invoke,under,trace,invocation,logger,else,return,invocation,proceed
AbstractTraceInterceptor -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1499944780;Determines whether or not logging is enabled for the particular {@code MethodInvocation}._If not, the method invocation proceeds as normal, otherwise the method invocation is passed_to the {@code invokeUnderTrace} method for handling._@see #invokeUnderTrace(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log);@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		Log logger = getLoggerForInvocation(invocation)__		if (isInterceptorEnabled(invocation, logger)) {_			return invokeUnderTrace(invocation, logger)__		}_		else {_			return invocation.proceed()__		}_	};determines,whether,or,not,logging,is,enabled,for,the,particular,code,method,invocation,if,not,the,method,invocation,proceeds,as,normal,otherwise,the,method,invocation,is,passed,to,the,code,invoke,under,trace,method,for,handling,see,invoke,under,trace,org,aopalliance,intercept,method,invocation,org,apache,commons,logging,log;override,public,object,invoke,method,invocation,invocation,throws,throwable,log,logger,get,logger,for,invocation,invocation,if,is,interceptor,enabled,invocation,logger,return,invoke,under,trace,invocation,logger,else,return,invocation,proceed
