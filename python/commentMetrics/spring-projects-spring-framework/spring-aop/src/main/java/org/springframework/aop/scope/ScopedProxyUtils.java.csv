# id;timestamp;commentText;codeText;commentWords;codeWords
ScopedProxyUtils -> public static boolean isScopedTarget(String beanName);1419347032;Specify if the {@code beanName} is the name of a bean that references the target_bean within a scoped proxy.;public static boolean isScopedTarget(String beanName) {_		return beanName.startsWith(TARGET_NAME_PREFIX)__	};specify,if,the,code,bean,name,is,the,name,of,a,bean,that,references,the,target,bean,within,a,scoped,proxy;public,static,boolean,is,scoped,target,string,bean,name,return,bean,name,starts,with
ScopedProxyUtils -> public static boolean isScopedTarget(String beanName);1419862420;Specify if the {@code beanName} is the name of a bean that references the target_bean within a scoped proxy._@since 4.1.4;public static boolean isScopedTarget(String beanName) {_		return (beanName != null && beanName.startsWith(TARGET_NAME_PREFIX))__	};specify,if,the,code,bean,name,is,the,name,of,a,bean,that,references,the,target,bean,within,a,scoped,proxy,since,4,1,4;public,static,boolean,is,scoped,target,string,bean,name,return,bean,name,null,bean,name,starts,with
ScopedProxyUtils -> public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition, 			BeanDefinitionRegistry registry, boolean proxyTargetClass);1328020251;Generates a scoped proxy for the supplied target bean, registering the target_bean with an internal name and setting 'targetBeanName' on the scoped proxy._@param definition the original bean definition_@param registry the bean definition registry_@param proxyTargetClass whether to create a target class proxy_@return the scoped proxy definition;public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition,_			BeanDefinitionRegistry registry, boolean proxyTargetClass) {_		_		String originalBeanName = definition.getBeanName()__		BeanDefinition targetDefinition = definition.getBeanDefinition()___		_		_		RootBeanDefinition proxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class)__		proxyDefinition.setOriginatingBeanDefinition(definition.getBeanDefinition())__		proxyDefinition.setSource(definition.getSource())__		proxyDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)___		String targetBeanName = getTargetBeanName(originalBeanName)__		proxyDefinition.getPropertyValues().add("targetBeanName", targetBeanName)___		if (proxyTargetClass) {_			targetDefinition.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			_		}_		else {_			proxyDefinition.getPropertyValues().add("proxyTargetClass", Boolean.FALSE)__		}__		_		proxyDefinition.setAutowireCandidate(targetDefinition.isAutowireCandidate())__		proxyDefinition.setPrimary(targetDefinition.isPrimary())__		if (targetDefinition instanceof AbstractBeanDefinition) {_			proxyDefinition.copyQualifiersFrom((AbstractBeanDefinition) targetDefinition)__		}__		_		targetDefinition.setAutowireCandidate(false)__		targetDefinition.setPrimary(false)___		_		registry.registerBeanDefinition(targetBeanName, targetDefinition)___		_		_		return new BeanDefinitionHolder(proxyDefinition, originalBeanName, definition.getAliases())__	};generates,a,scoped,proxy,for,the,supplied,target,bean,registering,the,target,bean,with,an,internal,name,and,setting,target,bean,name,on,the,scoped,proxy,param,definition,the,original,bean,definition,param,registry,the,bean,definition,registry,param,proxy,target,class,whether,to,create,a,target,class,proxy,return,the,scoped,proxy,definition;public,static,bean,definition,holder,create,scoped,proxy,bean,definition,holder,definition,bean,definition,registry,registry,boolean,proxy,target,class,string,original,bean,name,definition,get,bean,name,bean,definition,target,definition,definition,get,bean,definition,root,bean,definition,proxy,definition,new,root,bean,definition,scoped,proxy,factory,bean,class,proxy,definition,set,originating,bean,definition,definition,get,bean,definition,proxy,definition,set,source,definition,get,source,proxy,definition,set,role,bean,definition,string,target,bean,name,get,target,bean,name,original,bean,name,proxy,definition,get,property,values,add,target,bean,name,target,bean,name,if,proxy,target,class,target,definition,set,attribute,auto,proxy,utils,boolean,true,else,proxy,definition,get,property,values,add,proxy,target,class,boolean,false,proxy,definition,set,autowire,candidate,target,definition,is,autowire,candidate,proxy,definition,set,primary,target,definition,is,primary,if,target,definition,instanceof,abstract,bean,definition,proxy,definition,copy,qualifiers,from,abstract,bean,definition,target,definition,target,definition,set,autowire,candidate,false,target,definition,set,primary,false,registry,register,bean,definition,target,bean,name,target,definition,return,new,bean,definition,holder,proxy,definition,original,bean,name,definition,get,aliases
ScopedProxyUtils -> public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition, 			BeanDefinitionRegistry registry, boolean proxyTargetClass);1356735495;Generates a scoped proxy for the supplied target bean, registering the target_bean with an internal name and setting 'targetBeanName' on the scoped proxy._@param definition the original bean definition_@param registry the bean definition registry_@param proxyTargetClass whether to create a target class proxy_@return the scoped proxy definition;public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition,_			BeanDefinitionRegistry registry, boolean proxyTargetClass) {__		String originalBeanName = definition.getBeanName()__		BeanDefinition targetDefinition = definition.getBeanDefinition()___		_		_		RootBeanDefinition proxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class)__		proxyDefinition.setOriginatingBeanDefinition(definition.getBeanDefinition())__		proxyDefinition.setSource(definition.getSource())__		proxyDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)___		String targetBeanName = getTargetBeanName(originalBeanName)__		proxyDefinition.getPropertyValues().add("targetBeanName", targetBeanName)___		if (proxyTargetClass) {_			targetDefinition.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			_		}_		else {_			proxyDefinition.getPropertyValues().add("proxyTargetClass", Boolean.FALSE)__		}__		_		proxyDefinition.setAutowireCandidate(targetDefinition.isAutowireCandidate())__		proxyDefinition.setPrimary(targetDefinition.isPrimary())__		if (targetDefinition instanceof AbstractBeanDefinition) {_			proxyDefinition.copyQualifiersFrom((AbstractBeanDefinition) targetDefinition)__		}__		_		targetDefinition.setAutowireCandidate(false)__		targetDefinition.setPrimary(false)___		_		registry.registerBeanDefinition(targetBeanName, targetDefinition)___		_		_		return new BeanDefinitionHolder(proxyDefinition, originalBeanName, definition.getAliases())__	};generates,a,scoped,proxy,for,the,supplied,target,bean,registering,the,target,bean,with,an,internal,name,and,setting,target,bean,name,on,the,scoped,proxy,param,definition,the,original,bean,definition,param,registry,the,bean,definition,registry,param,proxy,target,class,whether,to,create,a,target,class,proxy,return,the,scoped,proxy,definition;public,static,bean,definition,holder,create,scoped,proxy,bean,definition,holder,definition,bean,definition,registry,registry,boolean,proxy,target,class,string,original,bean,name,definition,get,bean,name,bean,definition,target,definition,definition,get,bean,definition,root,bean,definition,proxy,definition,new,root,bean,definition,scoped,proxy,factory,bean,class,proxy,definition,set,originating,bean,definition,definition,get,bean,definition,proxy,definition,set,source,definition,get,source,proxy,definition,set,role,bean,definition,string,target,bean,name,get,target,bean,name,original,bean,name,proxy,definition,get,property,values,add,target,bean,name,target,bean,name,if,proxy,target,class,target,definition,set,attribute,auto,proxy,utils,boolean,true,else,proxy,definition,get,property,values,add,proxy,target,class,boolean,false,proxy,definition,set,autowire,candidate,target,definition,is,autowire,candidate,proxy,definition,set,primary,target,definition,is,primary,if,target,definition,instanceof,abstract,bean,definition,proxy,definition,copy,qualifiers,from,abstract,bean,definition,target,definition,target,definition,set,autowire,candidate,false,target,definition,set,primary,false,registry,register,bean,definition,target,bean,name,target,definition,return,new,bean,definition,holder,proxy,definition,original,bean,name,definition,get,aliases
ScopedProxyUtils -> public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition, 			BeanDefinitionRegistry registry, boolean proxyTargetClass);1383605087;Generates a scoped proxy for the supplied target bean, registering the target_bean with an internal name and setting 'targetBeanName' on the scoped proxy._@param definition the original bean definition_@param registry the bean definition registry_@param proxyTargetClass whether to create a target class proxy_@return the scoped proxy definition;public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition,_			BeanDefinitionRegistry registry, boolean proxyTargetClass) {__		String originalBeanName = definition.getBeanName()__		BeanDefinition targetDefinition = definition.getBeanDefinition()___		_		_		RootBeanDefinition proxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class)__		proxyDefinition.setOriginatingBeanDefinition(targetDefinition)__		proxyDefinition.setSource(definition.getSource())__		proxyDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)___		String targetBeanName = getTargetBeanName(originalBeanName)__		proxyDefinition.getPropertyValues().add("targetBeanName", targetBeanName)___		if (proxyTargetClass) {_			targetDefinition.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			_		}_		else {_			proxyDefinition.getPropertyValues().add("proxyTargetClass", Boolean.FALSE)__		}__		_		proxyDefinition.setAutowireCandidate(targetDefinition.isAutowireCandidate())__		proxyDefinition.setPrimary(targetDefinition.isPrimary())__		if (targetDefinition instanceof AbstractBeanDefinition) {_			proxyDefinition.copyQualifiersFrom((AbstractBeanDefinition) targetDefinition)__		}__		_		targetDefinition.setAutowireCandidate(false)__		targetDefinition.setPrimary(false)___		_		registry.registerBeanDefinition(targetBeanName, targetDefinition)___		_		_		return new BeanDefinitionHolder(proxyDefinition, originalBeanName, definition.getAliases())__	};generates,a,scoped,proxy,for,the,supplied,target,bean,registering,the,target,bean,with,an,internal,name,and,setting,target,bean,name,on,the,scoped,proxy,param,definition,the,original,bean,definition,param,registry,the,bean,definition,registry,param,proxy,target,class,whether,to,create,a,target,class,proxy,return,the,scoped,proxy,definition;public,static,bean,definition,holder,create,scoped,proxy,bean,definition,holder,definition,bean,definition,registry,registry,boolean,proxy,target,class,string,original,bean,name,definition,get,bean,name,bean,definition,target,definition,definition,get,bean,definition,root,bean,definition,proxy,definition,new,root,bean,definition,scoped,proxy,factory,bean,class,proxy,definition,set,originating,bean,definition,target,definition,proxy,definition,set,source,definition,get,source,proxy,definition,set,role,bean,definition,string,target,bean,name,get,target,bean,name,original,bean,name,proxy,definition,get,property,values,add,target,bean,name,target,bean,name,if,proxy,target,class,target,definition,set,attribute,auto,proxy,utils,boolean,true,else,proxy,definition,get,property,values,add,proxy,target,class,boolean,false,proxy,definition,set,autowire,candidate,target,definition,is,autowire,candidate,proxy,definition,set,primary,target,definition,is,primary,if,target,definition,instanceof,abstract,bean,definition,proxy,definition,copy,qualifiers,from,abstract,bean,definition,target,definition,target,definition,set,autowire,candidate,false,target,definition,set,primary,false,registry,register,bean,definition,target,bean,name,target,definition,return,new,bean,definition,holder,proxy,definition,original,bean,name,definition,get,aliases
ScopedProxyUtils -> public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition, 			BeanDefinitionRegistry registry, boolean proxyTargetClass);1385992556;Generate a scoped proxy for the supplied target bean, registering the target_bean with an internal name and setting 'targetBeanName' on the scoped proxy._@param definition the original bean definition_@param registry the bean definition registry_@param proxyTargetClass whether to create a target class proxy_@return the scoped proxy definition;public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition,_			BeanDefinitionRegistry registry, boolean proxyTargetClass) {__		String originalBeanName = definition.getBeanName()__		BeanDefinition targetDefinition = definition.getBeanDefinition()___		_		_		RootBeanDefinition proxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class)__		proxyDefinition.setOriginatingBeanDefinition(targetDefinition)__		proxyDefinition.setSource(definition.getSource())__		proxyDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)___		String targetBeanName = getTargetBeanName(originalBeanName)__		proxyDefinition.getPropertyValues().add("targetBeanName", targetBeanName)___		if (proxyTargetClass) {_			targetDefinition.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			_		}_		else {_			proxyDefinition.getPropertyValues().add("proxyTargetClass", Boolean.FALSE)__		}__		_		proxyDefinition.setAutowireCandidate(targetDefinition.isAutowireCandidate())__		proxyDefinition.setPrimary(targetDefinition.isPrimary())__		if (targetDefinition instanceof AbstractBeanDefinition) {_			proxyDefinition.copyQualifiersFrom((AbstractBeanDefinition) targetDefinition)__		}__		_		targetDefinition.setAutowireCandidate(false)__		targetDefinition.setPrimary(false)___		_		registry.registerBeanDefinition(targetBeanName, targetDefinition)___		_		_		return new BeanDefinitionHolder(proxyDefinition, originalBeanName, definition.getAliases())__	};generate,a,scoped,proxy,for,the,supplied,target,bean,registering,the,target,bean,with,an,internal,name,and,setting,target,bean,name,on,the,scoped,proxy,param,definition,the,original,bean,definition,param,registry,the,bean,definition,registry,param,proxy,target,class,whether,to,create,a,target,class,proxy,return,the,scoped,proxy,definition;public,static,bean,definition,holder,create,scoped,proxy,bean,definition,holder,definition,bean,definition,registry,registry,boolean,proxy,target,class,string,original,bean,name,definition,get,bean,name,bean,definition,target,definition,definition,get,bean,definition,root,bean,definition,proxy,definition,new,root,bean,definition,scoped,proxy,factory,bean,class,proxy,definition,set,originating,bean,definition,target,definition,proxy,definition,set,source,definition,get,source,proxy,definition,set,role,bean,definition,string,target,bean,name,get,target,bean,name,original,bean,name,proxy,definition,get,property,values,add,target,bean,name,target,bean,name,if,proxy,target,class,target,definition,set,attribute,auto,proxy,utils,boolean,true,else,proxy,definition,get,property,values,add,proxy,target,class,boolean,false,proxy,definition,set,autowire,candidate,target,definition,is,autowire,candidate,proxy,definition,set,primary,target,definition,is,primary,if,target,definition,instanceof,abstract,bean,definition,proxy,definition,copy,qualifiers,from,abstract,bean,definition,target,definition,target,definition,set,autowire,candidate,false,target,definition,set,primary,false,registry,register,bean,definition,target,bean,name,target,definition,return,new,bean,definition,holder,proxy,definition,original,bean,name,definition,get,aliases
ScopedProxyUtils -> public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition, 			BeanDefinitionRegistry registry, boolean proxyTargetClass);1386541456;Generate a scoped proxy for the supplied target bean, registering the target_bean with an internal name and setting 'targetBeanName' on the scoped proxy._@param definition the original bean definition_@param registry the bean definition registry_@param proxyTargetClass whether to create a target class proxy_@return the scoped proxy definition;public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition,_			BeanDefinitionRegistry registry, boolean proxyTargetClass) {__		String originalBeanName = definition.getBeanName()__		BeanDefinition targetDefinition = definition.getBeanDefinition()__		String targetBeanName = getTargetBeanName(originalBeanName)___		_		_		RootBeanDefinition proxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class)__		proxyDefinition.setDecoratedDefinition(new BeanDefinitionHolder(targetDefinition, targetBeanName))__		proxyDefinition.setOriginatingBeanDefinition(targetDefinition)__		proxyDefinition.setSource(definition.getSource())__		proxyDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)___		proxyDefinition.getPropertyValues().add("targetBeanName", targetBeanName)__		if (proxyTargetClass) {_			targetDefinition.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			_		}_		else {_			proxyDefinition.getPropertyValues().add("proxyTargetClass", Boolean.FALSE)__		}__		_		proxyDefinition.setAutowireCandidate(targetDefinition.isAutowireCandidate())__		proxyDefinition.setPrimary(targetDefinition.isPrimary())__		if (targetDefinition instanceof AbstractBeanDefinition) {_			proxyDefinition.copyQualifiersFrom((AbstractBeanDefinition) targetDefinition)__		}__		_		targetDefinition.setAutowireCandidate(false)__		targetDefinition.setPrimary(false)___		_		registry.registerBeanDefinition(targetBeanName, targetDefinition)___		_		_		return new BeanDefinitionHolder(proxyDefinition, originalBeanName, definition.getAliases())__	};generate,a,scoped,proxy,for,the,supplied,target,bean,registering,the,target,bean,with,an,internal,name,and,setting,target,bean,name,on,the,scoped,proxy,param,definition,the,original,bean,definition,param,registry,the,bean,definition,registry,param,proxy,target,class,whether,to,create,a,target,class,proxy,return,the,scoped,proxy,definition;public,static,bean,definition,holder,create,scoped,proxy,bean,definition,holder,definition,bean,definition,registry,registry,boolean,proxy,target,class,string,original,bean,name,definition,get,bean,name,bean,definition,target,definition,definition,get,bean,definition,string,target,bean,name,get,target,bean,name,original,bean,name,root,bean,definition,proxy,definition,new,root,bean,definition,scoped,proxy,factory,bean,class,proxy,definition,set,decorated,definition,new,bean,definition,holder,target,definition,target,bean,name,proxy,definition,set,originating,bean,definition,target,definition,proxy,definition,set,source,definition,get,source,proxy,definition,set,role,bean,definition,proxy,definition,get,property,values,add,target,bean,name,target,bean,name,if,proxy,target,class,target,definition,set,attribute,auto,proxy,utils,boolean,true,else,proxy,definition,get,property,values,add,proxy,target,class,boolean,false,proxy,definition,set,autowire,candidate,target,definition,is,autowire,candidate,proxy,definition,set,primary,target,definition,is,primary,if,target,definition,instanceof,abstract,bean,definition,proxy,definition,copy,qualifiers,from,abstract,bean,definition,target,definition,target,definition,set,autowire,candidate,false,target,definition,set,primary,false,registry,register,bean,definition,target,bean,name,target,definition,return,new,bean,definition,holder,proxy,definition,original,bean,name,definition,get,aliases
ScopedProxyUtils -> public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition, 			BeanDefinitionRegistry registry, boolean proxyTargetClass);1387226855;Generate a scoped proxy for the supplied target bean, registering the target_bean with an internal name and setting 'targetBeanName' on the scoped proxy._@param definition the original bean definition_@param registry the bean definition registry_@param proxyTargetClass whether to create a target class proxy_@return the scoped proxy definition;public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition,_			BeanDefinitionRegistry registry, boolean proxyTargetClass) {__		String originalBeanName = definition.getBeanName()__		BeanDefinition targetDefinition = definition.getBeanDefinition()__		String targetBeanName = getTargetBeanName(originalBeanName)___		_		_		RootBeanDefinition proxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class)__		proxyDefinition.setDecoratedDefinition(new BeanDefinitionHolder(targetDefinition, targetBeanName))__		proxyDefinition.setOriginatingBeanDefinition(targetDefinition)__		proxyDefinition.setSource(definition.getSource())__		proxyDefinition.setRole(targetDefinition.getRole())___		proxyDefinition.getPropertyValues().add("targetBeanName", targetBeanName)__		if (proxyTargetClass) {_			targetDefinition.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			_		}_		else {_			proxyDefinition.getPropertyValues().add("proxyTargetClass", Boolean.FALSE)__		}__		_		proxyDefinition.setAutowireCandidate(targetDefinition.isAutowireCandidate())__		proxyDefinition.setPrimary(targetDefinition.isPrimary())__		if (targetDefinition instanceof AbstractBeanDefinition) {_			proxyDefinition.copyQualifiersFrom((AbstractBeanDefinition) targetDefinition)__		}__		_		targetDefinition.setAutowireCandidate(false)__		targetDefinition.setPrimary(false)___		_		registry.registerBeanDefinition(targetBeanName, targetDefinition)___		_		_		return new BeanDefinitionHolder(proxyDefinition, originalBeanName, definition.getAliases())__	};generate,a,scoped,proxy,for,the,supplied,target,bean,registering,the,target,bean,with,an,internal,name,and,setting,target,bean,name,on,the,scoped,proxy,param,definition,the,original,bean,definition,param,registry,the,bean,definition,registry,param,proxy,target,class,whether,to,create,a,target,class,proxy,return,the,scoped,proxy,definition;public,static,bean,definition,holder,create,scoped,proxy,bean,definition,holder,definition,bean,definition,registry,registry,boolean,proxy,target,class,string,original,bean,name,definition,get,bean,name,bean,definition,target,definition,definition,get,bean,definition,string,target,bean,name,get,target,bean,name,original,bean,name,root,bean,definition,proxy,definition,new,root,bean,definition,scoped,proxy,factory,bean,class,proxy,definition,set,decorated,definition,new,bean,definition,holder,target,definition,target,bean,name,proxy,definition,set,originating,bean,definition,target,definition,proxy,definition,set,source,definition,get,source,proxy,definition,set,role,target,definition,get,role,proxy,definition,get,property,values,add,target,bean,name,target,bean,name,if,proxy,target,class,target,definition,set,attribute,auto,proxy,utils,boolean,true,else,proxy,definition,get,property,values,add,proxy,target,class,boolean,false,proxy,definition,set,autowire,candidate,target,definition,is,autowire,candidate,proxy,definition,set,primary,target,definition,is,primary,if,target,definition,instanceof,abstract,bean,definition,proxy,definition,copy,qualifiers,from,abstract,bean,definition,target,definition,target,definition,set,autowire,candidate,false,target,definition,set,primary,false,registry,register,bean,definition,target,bean,name,target,definition,return,new,bean,definition,holder,proxy,definition,original,bean,name,definition,get,aliases
ScopedProxyUtils -> public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition, 			BeanDefinitionRegistry registry, boolean proxyTargetClass);1419347032;Generate a scoped proxy for the supplied target bean, registering the target_bean with an internal name and setting 'targetBeanName' on the scoped proxy._@param definition the original bean definition_@param registry the bean definition registry_@param proxyTargetClass whether to create a target class proxy_@return the scoped proxy definition;public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition,_			BeanDefinitionRegistry registry, boolean proxyTargetClass) {__		String originalBeanName = definition.getBeanName()__		BeanDefinition targetDefinition = definition.getBeanDefinition()__		String targetBeanName = getTargetBeanName(originalBeanName)___		_		_		RootBeanDefinition proxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class)__		proxyDefinition.setDecoratedDefinition(new BeanDefinitionHolder(targetDefinition, targetBeanName))__		proxyDefinition.setOriginatingBeanDefinition(targetDefinition)__		proxyDefinition.setSource(definition.getSource())__		proxyDefinition.setRole(targetDefinition.getRole())___		proxyDefinition.getPropertyValues().add("targetBeanName", targetBeanName)__		if (proxyTargetClass) {_			targetDefinition.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			_		}_		else {_			proxyDefinition.getPropertyValues().add("proxyTargetClass", Boolean.FALSE)__		}__		_		proxyDefinition.setAutowireCandidate(targetDefinition.isAutowireCandidate())__		proxyDefinition.setPrimary(targetDefinition.isPrimary())__		if (targetDefinition instanceof AbstractBeanDefinition) {_			proxyDefinition.copyQualifiersFrom((AbstractBeanDefinition) targetDefinition)__		}__		_		targetDefinition.setAutowireCandidate(false)__		targetDefinition.setPrimary(false)___		_		registry.registerBeanDefinition(targetBeanName, targetDefinition)___		_		_		return new BeanDefinitionHolder(proxyDefinition, originalBeanName, definition.getAliases())__	};generate,a,scoped,proxy,for,the,supplied,target,bean,registering,the,target,bean,with,an,internal,name,and,setting,target,bean,name,on,the,scoped,proxy,param,definition,the,original,bean,definition,param,registry,the,bean,definition,registry,param,proxy,target,class,whether,to,create,a,target,class,proxy,return,the,scoped,proxy,definition;public,static,bean,definition,holder,create,scoped,proxy,bean,definition,holder,definition,bean,definition,registry,registry,boolean,proxy,target,class,string,original,bean,name,definition,get,bean,name,bean,definition,target,definition,definition,get,bean,definition,string,target,bean,name,get,target,bean,name,original,bean,name,root,bean,definition,proxy,definition,new,root,bean,definition,scoped,proxy,factory,bean,class,proxy,definition,set,decorated,definition,new,bean,definition,holder,target,definition,target,bean,name,proxy,definition,set,originating,bean,definition,target,definition,proxy,definition,set,source,definition,get,source,proxy,definition,set,role,target,definition,get,role,proxy,definition,get,property,values,add,target,bean,name,target,bean,name,if,proxy,target,class,target,definition,set,attribute,auto,proxy,utils,boolean,true,else,proxy,definition,get,property,values,add,proxy,target,class,boolean,false,proxy,definition,set,autowire,candidate,target,definition,is,autowire,candidate,proxy,definition,set,primary,target,definition,is,primary,if,target,definition,instanceof,abstract,bean,definition,proxy,definition,copy,qualifiers,from,abstract,bean,definition,target,definition,target,definition,set,autowire,candidate,false,target,definition,set,primary,false,registry,register,bean,definition,target,bean,name,target,definition,return,new,bean,definition,holder,proxy,definition,original,bean,name,definition,get,aliases
ScopedProxyUtils -> public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition, 			BeanDefinitionRegistry registry, boolean proxyTargetClass);1419862420;Generate a scoped proxy for the supplied target bean, registering the target_bean with an internal name and setting 'targetBeanName' on the scoped proxy._@param definition the original bean definition_@param registry the bean definition registry_@param proxyTargetClass whether to create a target class proxy_@return the scoped proxy definition;public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition,_			BeanDefinitionRegistry registry, boolean proxyTargetClass) {__		String originalBeanName = definition.getBeanName()__		BeanDefinition targetDefinition = definition.getBeanDefinition()__		String targetBeanName = getTargetBeanName(originalBeanName)___		_		_		RootBeanDefinition proxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class)__		proxyDefinition.setDecoratedDefinition(new BeanDefinitionHolder(targetDefinition, targetBeanName))__		proxyDefinition.setOriginatingBeanDefinition(targetDefinition)__		proxyDefinition.setSource(definition.getSource())__		proxyDefinition.setRole(targetDefinition.getRole())___		proxyDefinition.getPropertyValues().add("targetBeanName", targetBeanName)__		if (proxyTargetClass) {_			targetDefinition.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			_		}_		else {_			proxyDefinition.getPropertyValues().add("proxyTargetClass", Boolean.FALSE)__		}__		_		proxyDefinition.setAutowireCandidate(targetDefinition.isAutowireCandidate())__		proxyDefinition.setPrimary(targetDefinition.isPrimary())__		if (targetDefinition instanceof AbstractBeanDefinition) {_			proxyDefinition.copyQualifiersFrom((AbstractBeanDefinition) targetDefinition)__		}__		_		targetDefinition.setAutowireCandidate(false)__		targetDefinition.setPrimary(false)___		_		registry.registerBeanDefinition(targetBeanName, targetDefinition)___		_		_		return new BeanDefinitionHolder(proxyDefinition, originalBeanName, definition.getAliases())__	};generate,a,scoped,proxy,for,the,supplied,target,bean,registering,the,target,bean,with,an,internal,name,and,setting,target,bean,name,on,the,scoped,proxy,param,definition,the,original,bean,definition,param,registry,the,bean,definition,registry,param,proxy,target,class,whether,to,create,a,target,class,proxy,return,the,scoped,proxy,definition;public,static,bean,definition,holder,create,scoped,proxy,bean,definition,holder,definition,bean,definition,registry,registry,boolean,proxy,target,class,string,original,bean,name,definition,get,bean,name,bean,definition,target,definition,definition,get,bean,definition,string,target,bean,name,get,target,bean,name,original,bean,name,root,bean,definition,proxy,definition,new,root,bean,definition,scoped,proxy,factory,bean,class,proxy,definition,set,decorated,definition,new,bean,definition,holder,target,definition,target,bean,name,proxy,definition,set,originating,bean,definition,target,definition,proxy,definition,set,source,definition,get,source,proxy,definition,set,role,target,definition,get,role,proxy,definition,get,property,values,add,target,bean,name,target,bean,name,if,proxy,target,class,target,definition,set,attribute,auto,proxy,utils,boolean,true,else,proxy,definition,get,property,values,add,proxy,target,class,boolean,false,proxy,definition,set,autowire,candidate,target,definition,is,autowire,candidate,proxy,definition,set,primary,target,definition,is,primary,if,target,definition,instanceof,abstract,bean,definition,proxy,definition,copy,qualifiers,from,abstract,bean,definition,target,definition,target,definition,set,autowire,candidate,false,target,definition,set,primary,false,registry,register,bean,definition,target,bean,name,target,definition,return,new,bean,definition,holder,proxy,definition,original,bean,name,definition,get,aliases
ScopedProxyUtils -> public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition, 			BeanDefinitionRegistry registry, boolean proxyTargetClass);1496837955;Generate a scoped proxy for the supplied target bean, registering the target_bean with an internal name and setting 'targetBeanName' on the scoped proxy._@param definition the original bean definition_@param registry the bean definition registry_@param proxyTargetClass whether to create a target class proxy_@return the scoped proxy definition;public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition,_			BeanDefinitionRegistry registry, boolean proxyTargetClass) {__		String originalBeanName = definition.getBeanName()__		BeanDefinition targetDefinition = definition.getBeanDefinition()__		String targetBeanName = getTargetBeanName(originalBeanName)___		_		_		RootBeanDefinition proxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class)__		proxyDefinition.setDecoratedDefinition(new BeanDefinitionHolder(targetDefinition, targetBeanName))__		proxyDefinition.setOriginatingBeanDefinition(targetDefinition)__		proxyDefinition.setSource(definition.getSource())__		proxyDefinition.setRole(targetDefinition.getRole())___		proxyDefinition.getPropertyValues().add("targetBeanName", targetBeanName)__		if (proxyTargetClass) {_			targetDefinition.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			_		}_		else {_			proxyDefinition.getPropertyValues().add("proxyTargetClass", Boolean.FALSE)__		}__		_		proxyDefinition.setAutowireCandidate(targetDefinition.isAutowireCandidate())__		proxyDefinition.setPrimary(targetDefinition.isPrimary())__		if (targetDefinition instanceof AbstractBeanDefinition) {_			proxyDefinition.copyQualifiersFrom((AbstractBeanDefinition) targetDefinition)__		}__		_		targetDefinition.setAutowireCandidate(false)__		targetDefinition.setPrimary(false)___		_		registry.registerBeanDefinition(targetBeanName, targetDefinition)___		_		_		return new BeanDefinitionHolder(proxyDefinition, originalBeanName, definition.getAliases())__	};generate,a,scoped,proxy,for,the,supplied,target,bean,registering,the,target,bean,with,an,internal,name,and,setting,target,bean,name,on,the,scoped,proxy,param,definition,the,original,bean,definition,param,registry,the,bean,definition,registry,param,proxy,target,class,whether,to,create,a,target,class,proxy,return,the,scoped,proxy,definition;public,static,bean,definition,holder,create,scoped,proxy,bean,definition,holder,definition,bean,definition,registry,registry,boolean,proxy,target,class,string,original,bean,name,definition,get,bean,name,bean,definition,target,definition,definition,get,bean,definition,string,target,bean,name,get,target,bean,name,original,bean,name,root,bean,definition,proxy,definition,new,root,bean,definition,scoped,proxy,factory,bean,class,proxy,definition,set,decorated,definition,new,bean,definition,holder,target,definition,target,bean,name,proxy,definition,set,originating,bean,definition,target,definition,proxy,definition,set,source,definition,get,source,proxy,definition,set,role,target,definition,get,role,proxy,definition,get,property,values,add,target,bean,name,target,bean,name,if,proxy,target,class,target,definition,set,attribute,auto,proxy,utils,boolean,true,else,proxy,definition,get,property,values,add,proxy,target,class,boolean,false,proxy,definition,set,autowire,candidate,target,definition,is,autowire,candidate,proxy,definition,set,primary,target,definition,is,primary,if,target,definition,instanceof,abstract,bean,definition,proxy,definition,copy,qualifiers,from,abstract,bean,definition,target,definition,target,definition,set,autowire,candidate,false,target,definition,set,primary,false,registry,register,bean,definition,target,bean,name,target,definition,return,new,bean,definition,holder,proxy,definition,original,bean,name,definition,get,aliases
ScopedProxyUtils -> public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition, 			BeanDefinitionRegistry registry, boolean proxyTargetClass);1500495747;Generate a scoped proxy for the supplied target bean, registering the target_bean with an internal name and setting 'targetBeanName' on the scoped proxy._@param definition the original bean definition_@param registry the bean definition registry_@param proxyTargetClass whether to create a target class proxy_@return the scoped proxy definition;public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition,_			BeanDefinitionRegistry registry, boolean proxyTargetClass) {__		String originalBeanName = definition.getBeanName()__		BeanDefinition targetDefinition = definition.getBeanDefinition()__		String targetBeanName = getTargetBeanName(originalBeanName)___		_		_		RootBeanDefinition proxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class)__		proxyDefinition.setDecoratedDefinition(new BeanDefinitionHolder(targetDefinition, targetBeanName))__		proxyDefinition.setOriginatingBeanDefinition(targetDefinition)__		proxyDefinition.setSource(definition.getSource())__		proxyDefinition.setRole(targetDefinition.getRole())___		proxyDefinition.getPropertyValues().add("targetBeanName", targetBeanName)__		if (proxyTargetClass) {_			targetDefinition.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE)__			_		}_		else {_			proxyDefinition.getPropertyValues().add("proxyTargetClass", Boolean.FALSE)__		}__		_		proxyDefinition.setAutowireCandidate(targetDefinition.isAutowireCandidate())__		proxyDefinition.setPrimary(targetDefinition.isPrimary())__		if (targetDefinition instanceof AbstractBeanDefinition) {_			proxyDefinition.copyQualifiersFrom((AbstractBeanDefinition) targetDefinition)__		}__		_		targetDefinition.setAutowireCandidate(false)__		targetDefinition.setPrimary(false)___		_		registry.registerBeanDefinition(targetBeanName, targetDefinition)___		_		_		return new BeanDefinitionHolder(proxyDefinition, originalBeanName, definition.getAliases())__	};generate,a,scoped,proxy,for,the,supplied,target,bean,registering,the,target,bean,with,an,internal,name,and,setting,target,bean,name,on,the,scoped,proxy,param,definition,the,original,bean,definition,param,registry,the,bean,definition,registry,param,proxy,target,class,whether,to,create,a,target,class,proxy,return,the,scoped,proxy,definition;public,static,bean,definition,holder,create,scoped,proxy,bean,definition,holder,definition,bean,definition,registry,registry,boolean,proxy,target,class,string,original,bean,name,definition,get,bean,name,bean,definition,target,definition,definition,get,bean,definition,string,target,bean,name,get,target,bean,name,original,bean,name,root,bean,definition,proxy,definition,new,root,bean,definition,scoped,proxy,factory,bean,class,proxy,definition,set,decorated,definition,new,bean,definition,holder,target,definition,target,bean,name,proxy,definition,set,originating,bean,definition,target,definition,proxy,definition,set,source,definition,get,source,proxy,definition,set,role,target,definition,get,role,proxy,definition,get,property,values,add,target,bean,name,target,bean,name,if,proxy,target,class,target,definition,set,attribute,auto,proxy,utils,boolean,true,else,proxy,definition,get,property,values,add,proxy,target,class,boolean,false,proxy,definition,set,autowire,candidate,target,definition,is,autowire,candidate,proxy,definition,set,primary,target,definition,is,primary,if,target,definition,instanceof,abstract,bean,definition,proxy,definition,copy,qualifiers,from,abstract,bean,definition,target,definition,target,definition,set,autowire,candidate,false,target,definition,set,primary,false,registry,register,bean,definition,target,bean,name,target,definition,return,new,bean,definition,holder,proxy,definition,original,bean,name,definition,get,aliases
ScopedProxyUtils -> public static boolean isScopedTarget(@Nullable String beanName);1496837955;Specify if the {@code beanName} is the name of a bean that references the target_bean within a scoped proxy._@since 4.1.4;public static boolean isScopedTarget(@Nullable String beanName) {_		return (beanName != null && beanName.startsWith(TARGET_NAME_PREFIX))__	};specify,if,the,code,bean,name,is,the,name,of,a,bean,that,references,the,target,bean,within,a,scoped,proxy,since,4,1,4;public,static,boolean,is,scoped,target,nullable,string,bean,name,return,bean,name,null,bean,name,starts,with
ScopedProxyUtils -> public static boolean isScopedTarget(@Nullable String beanName);1500495747;Specify if the {@code beanName} is the name of a bean that references the target_bean within a scoped proxy._@since 4.1.4;public static boolean isScopedTarget(@Nullable String beanName) {_		return (beanName != null && beanName.startsWith(TARGET_NAME_PREFIX))__	};specify,if,the,code,bean,name,is,the,name,of,a,bean,that,references,the,target,bean,within,a,scoped,proxy,since,4,1,4;public,static,boolean,is,scoped,target,nullable,string,bean,name,return,bean,name,null,bean,name,starts,with
ScopedProxyUtils -> public static String getTargetBeanName(String originalBeanName);1328020251;Generates the bean name that is used within the scoped proxy to reference the target bean._@param originalBeanName the original name of bean_@return the generated bean to be used to reference the target bean;public static String getTargetBeanName(String originalBeanName) {_		return TARGET_NAME_PREFIX + originalBeanName__	};generates,the,bean,name,that,is,used,within,the,scoped,proxy,to,reference,the,target,bean,param,original,bean,name,the,original,name,of,bean,return,the,generated,bean,to,be,used,to,reference,the,target,bean;public,static,string,get,target,bean,name,string,original,bean,name,return,original,bean,name
ScopedProxyUtils -> public static String getTargetBeanName(String originalBeanName);1356735495;Generates the bean name that is used within the scoped proxy to reference the target bean._@param originalBeanName the original name of bean_@return the generated bean to be used to reference the target bean;public static String getTargetBeanName(String originalBeanName) {_		return TARGET_NAME_PREFIX + originalBeanName__	};generates,the,bean,name,that,is,used,within,the,scoped,proxy,to,reference,the,target,bean,param,original,bean,name,the,original,name,of,bean,return,the,generated,bean,to,be,used,to,reference,the,target,bean;public,static,string,get,target,bean,name,string,original,bean,name,return,original,bean,name
ScopedProxyUtils -> public static String getTargetBeanName(String originalBeanName);1383605087;Generates the bean name that is used within the scoped proxy to reference the target bean._@param originalBeanName the original name of bean_@return the generated bean to be used to reference the target bean;public static String getTargetBeanName(String originalBeanName) {_		return TARGET_NAME_PREFIX + originalBeanName__	};generates,the,bean,name,that,is,used,within,the,scoped,proxy,to,reference,the,target,bean,param,original,bean,name,the,original,name,of,bean,return,the,generated,bean,to,be,used,to,reference,the,target,bean;public,static,string,get,target,bean,name,string,original,bean,name,return,original,bean,name
ScopedProxyUtils -> public static String getTargetBeanName(String originalBeanName);1385992556;Generates the bean name that is used within the scoped proxy to reference the target bean._@param originalBeanName the original name of bean_@return the generated bean to be used to reference the target bean;public static String getTargetBeanName(String originalBeanName) {_		return TARGET_NAME_PREFIX + originalBeanName__	};generates,the,bean,name,that,is,used,within,the,scoped,proxy,to,reference,the,target,bean,param,original,bean,name,the,original,name,of,bean,return,the,generated,bean,to,be,used,to,reference,the,target,bean;public,static,string,get,target,bean,name,string,original,bean,name,return,original,bean,name
ScopedProxyUtils -> public static String getTargetBeanName(String originalBeanName);1386541456;Generates the bean name that is used within the scoped proxy to reference the target bean._@param originalBeanName the original name of bean_@return the generated bean to be used to reference the target bean;public static String getTargetBeanName(String originalBeanName) {_		return TARGET_NAME_PREFIX + originalBeanName__	};generates,the,bean,name,that,is,used,within,the,scoped,proxy,to,reference,the,target,bean,param,original,bean,name,the,original,name,of,bean,return,the,generated,bean,to,be,used,to,reference,the,target,bean;public,static,string,get,target,bean,name,string,original,bean,name,return,original,bean,name
ScopedProxyUtils -> public static String getTargetBeanName(String originalBeanName);1387226855;Generates the bean name that is used within the scoped proxy to reference the target bean._@param originalBeanName the original name of bean_@return the generated bean to be used to reference the target bean;public static String getTargetBeanName(String originalBeanName) {_		return TARGET_NAME_PREFIX + originalBeanName__	};generates,the,bean,name,that,is,used,within,the,scoped,proxy,to,reference,the,target,bean,param,original,bean,name,the,original,name,of,bean,return,the,generated,bean,to,be,used,to,reference,the,target,bean;public,static,string,get,target,bean,name,string,original,bean,name,return,original,bean,name
ScopedProxyUtils -> public static String getTargetBeanName(String originalBeanName);1419347032;Generates the bean name that is used within the scoped proxy to reference the target bean._@param originalBeanName the original name of bean_@return the generated bean to be used to reference the target bean;public static String getTargetBeanName(String originalBeanName) {_		return TARGET_NAME_PREFIX + originalBeanName__	};generates,the,bean,name,that,is,used,within,the,scoped,proxy,to,reference,the,target,bean,param,original,bean,name,the,original,name,of,bean,return,the,generated,bean,to,be,used,to,reference,the,target,bean;public,static,string,get,target,bean,name,string,original,bean,name,return,original,bean,name
ScopedProxyUtils -> public static String getTargetBeanName(String originalBeanName);1419862420;Generates the bean name that is used within the scoped proxy to reference the target bean._@param originalBeanName the original name of bean_@return the generated bean to be used to reference the target bean;public static String getTargetBeanName(String originalBeanName) {_		return TARGET_NAME_PREFIX + originalBeanName__	};generates,the,bean,name,that,is,used,within,the,scoped,proxy,to,reference,the,target,bean,param,original,bean,name,the,original,name,of,bean,return,the,generated,bean,to,be,used,to,reference,the,target,bean;public,static,string,get,target,bean,name,string,original,bean,name,return,original,bean,name
ScopedProxyUtils -> public static String getTargetBeanName(String originalBeanName);1496837955;Generates the bean name that is used within the scoped proxy to reference the target bean._@param originalBeanName the original name of bean_@return the generated bean to be used to reference the target bean;public static String getTargetBeanName(String originalBeanName) {_		return TARGET_NAME_PREFIX + originalBeanName__	};generates,the,bean,name,that,is,used,within,the,scoped,proxy,to,reference,the,target,bean,param,original,bean,name,the,original,name,of,bean,return,the,generated,bean,to,be,used,to,reference,the,target,bean;public,static,string,get,target,bean,name,string,original,bean,name,return,original,bean,name
ScopedProxyUtils -> public static String getTargetBeanName(String originalBeanName);1500495747;Generate the bean name that is used within the scoped proxy to reference the target bean._@param originalBeanName the original name of bean_@return the generated bean to be used to reference the target bean;public static String getTargetBeanName(String originalBeanName) {_		return TARGET_NAME_PREFIX + originalBeanName__	};generate,the,bean,name,that,is,used,within,the,scoped,proxy,to,reference,the,target,bean,param,original,bean,name,the,original,name,of,bean,return,the,generated,bean,to,be,used,to,reference,the,target,bean;public,static,string,get,target,bean,name,string,original,bean,name,return,original,bean,name
