# id;timestamp;commentText;codeText;commentWords;codeWords
AspectJProxyFactory -> private Object getSingletonAspectInstance(Class aspectClass);1328020251;Get the singleton aspect instance for the supplied aspect type. An instance_is created if one cannot be found in the instance cache.;private Object getSingletonAspectInstance(Class aspectClass) {_		synchronized (aspectCache) {_			Object instance = aspectCache.get(aspectClass)__			if (instance != null) {_				return instance__			}_			try {_				instance = aspectClass.newInstance()__				aspectCache.put(aspectClass, instance)__				return instance__			}_			catch (InstantiationException ex) {_				throw new AopConfigException("Unable to instantiate aspect class [" + aspectClass.getName() + "]", ex)__			}_			catch (IllegalAccessException ex) {_				throw new AopConfigException("Cannot access aspect class [" + aspectClass.getName() + "]", ex)__			}_		}_	};get,the,singleton,aspect,instance,for,the,supplied,aspect,type,an,instance,is,created,if,one,cannot,be,found,in,the,instance,cache;private,object,get,singleton,aspect,instance,class,aspect,class,synchronized,aspect,cache,object,instance,aspect,cache,get,aspect,class,if,instance,null,return,instance,try,instance,aspect,class,new,instance,aspect,cache,put,aspect,class,instance,return,instance,catch,instantiation,exception,ex,throw,new,aop,config,exception,unable,to,instantiate,aspect,class,aspect,class,get,name,ex,catch,illegal,access,exception,ex,throw,new,aop,config,exception,cannot,access,aspect,class,aspect,class,get,name,ex
AspectJProxyFactory -> private Object getSingletonAspectInstance(Class aspectClass);1355313310;Get the singleton aspect instance for the supplied aspect type. An instance_is created if one cannot be found in the instance cache.;private Object getSingletonAspectInstance(Class aspectClass) {_		synchronized (aspectCache) {_			Object instance = aspectCache.get(aspectClass)__			if (instance != null) {_				return instance__			}_			try {_				instance = aspectClass.newInstance()__				aspectCache.put(aspectClass, instance)__				return instance__			}_			catch (InstantiationException ex) {_				throw new AopConfigException("Unable to instantiate aspect class [" + aspectClass.getName() + "]", ex)__			}_			catch (IllegalAccessException ex) {_				throw new AopConfigException("Cannot access aspect class [" + aspectClass.getName() + "]", ex)__			}_		}_	};get,the,singleton,aspect,instance,for,the,supplied,aspect,type,an,instance,is,created,if,one,cannot,be,found,in,the,instance,cache;private,object,get,singleton,aspect,instance,class,aspect,class,synchronized,aspect,cache,object,instance,aspect,cache,get,aspect,class,if,instance,null,return,instance,try,instance,aspect,class,new,instance,aspect,cache,put,aspect,class,instance,return,instance,catch,instantiation,exception,ex,throw,new,aop,config,exception,unable,to,instantiate,aspect,class,aspect,class,get,name,ex,catch,illegal,access,exception,ex,throw,new,aop,config,exception,cannot,access,aspect,class,aspect,class,get,name,ex
AspectJProxyFactory -> private Object getSingletonAspectInstance(Class aspectClass);1356735495;Get the singleton aspect instance for the supplied aspect type. An instance_is created if one cannot be found in the instance cache.;private Object getSingletonAspectInstance(Class aspectClass) {_		synchronized (aspectCache) {_			Object instance = aspectCache.get(aspectClass)__			if (instance != null) {_				return instance__			}_			try {_				instance = aspectClass.newInstance()__				aspectCache.put(aspectClass, instance)__				return instance__			}_			catch (InstantiationException ex) {_				throw new AopConfigException("Unable to instantiate aspect class [" + aspectClass.getName() + "]", ex)__			}_			catch (IllegalAccessException ex) {_				throw new AopConfigException("Cannot access aspect class [" + aspectClass.getName() + "]", ex)__			}_		}_	};get,the,singleton,aspect,instance,for,the,supplied,aspect,type,an,instance,is,created,if,one,cannot,be,found,in,the,instance,cache;private,object,get,singleton,aspect,instance,class,aspect,class,synchronized,aspect,cache,object,instance,aspect,cache,get,aspect,class,if,instance,null,return,instance,try,instance,aspect,class,new,instance,aspect,cache,put,aspect,class,instance,return,instance,catch,instantiation,exception,ex,throw,new,aop,config,exception,unable,to,instantiate,aspect,class,aspect,class,get,name,ex,catch,illegal,access,exception,ex,throw,new,aop,config,exception,cannot,access,aspect,class,aspect,class,get,name,ex
AspectJProxyFactory -> private MetadataAwareAspectInstanceFactory createAspectInstanceFactory( 			AspectMetadata am, Class aspectClass, String aspectName);1328020251;Create a {@link MetadataAwareAspectInstanceFactory} for the supplied aspect type. If the aspect type_has no per clause, then a {@link SingletonMetadataAwareAspectInstanceFactory} is returned, otherwise_a {@link PrototypeAspectInstanceFactory} is returned.;private MetadataAwareAspectInstanceFactory createAspectInstanceFactory(_			AspectMetadata am, Class aspectClass, String aspectName) {__		MetadataAwareAspectInstanceFactory instanceFactory = null__		if (am.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_			_			Object instance = getSingletonAspectInstance(aspectClass)__			instanceFactory = new SingletonMetadataAwareAspectInstanceFactory(instance, aspectName)__		}_		else {_			_			instanceFactory = new SimpleMetadataAwareAspectInstanceFactory(aspectClass, aspectName)__		}_		return instanceFactory__	};create,a,link,metadata,aware,aspect,instance,factory,for,the,supplied,aspect,type,if,the,aspect,type,has,no,per,clause,then,a,link,singleton,metadata,aware,aspect,instance,factory,is,returned,otherwise,a,link,prototype,aspect,instance,factory,is,returned;private,metadata,aware,aspect,instance,factory,create,aspect,instance,factory,aspect,metadata,am,class,aspect,class,string,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,null,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,object,instance,get,singleton,aspect,instance,aspect,class,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,instance,aspect,name,else,instance,factory,new,simple,metadata,aware,aspect,instance,factory,aspect,class,aspect,name,return,instance,factory
AspectJProxyFactory -> private MetadataAwareAspectInstanceFactory createAspectInstanceFactory( 			AspectMetadata am, Class aspectClass, String aspectName);1355313310;Create a {@link MetadataAwareAspectInstanceFactory} for the supplied aspect type. If the aspect type_has no per clause, then a {@link SingletonMetadataAwareAspectInstanceFactory} is returned, otherwise_a {@link PrototypeAspectInstanceFactory} is returned.;private MetadataAwareAspectInstanceFactory createAspectInstanceFactory(_			AspectMetadata am, Class aspectClass, String aspectName) {__		MetadataAwareAspectInstanceFactory instanceFactory = null__		if (am.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_			_			Object instance = getSingletonAspectInstance(aspectClass)__			instanceFactory = new SingletonMetadataAwareAspectInstanceFactory(instance, aspectName)__		}_		else {_			_			instanceFactory = new SimpleMetadataAwareAspectInstanceFactory(aspectClass, aspectName)__		}_		return instanceFactory__	};create,a,link,metadata,aware,aspect,instance,factory,for,the,supplied,aspect,type,if,the,aspect,type,has,no,per,clause,then,a,link,singleton,metadata,aware,aspect,instance,factory,is,returned,otherwise,a,link,prototype,aspect,instance,factory,is,returned;private,metadata,aware,aspect,instance,factory,create,aspect,instance,factory,aspect,metadata,am,class,aspect,class,string,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,null,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,object,instance,get,singleton,aspect,instance,aspect,class,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,instance,aspect,name,else,instance,factory,new,simple,metadata,aware,aspect,instance,factory,aspect,class,aspect,name,return,instance,factory
AspectJProxyFactory -> private MetadataAwareAspectInstanceFactory createAspectInstanceFactory( 			AspectMetadata am, Class aspectClass, String aspectName);1356735495;Create a {@link MetadataAwareAspectInstanceFactory} for the supplied aspect type. If the aspect type_has no per clause, then a {@link SingletonMetadataAwareAspectInstanceFactory} is returned, otherwise_a {@link PrototypeAspectInstanceFactory} is returned.;private MetadataAwareAspectInstanceFactory createAspectInstanceFactory(_			AspectMetadata am, Class aspectClass, String aspectName) {__		MetadataAwareAspectInstanceFactory instanceFactory = null__		if (am.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_			_			Object instance = getSingletonAspectInstance(aspectClass)__			instanceFactory = new SingletonMetadataAwareAspectInstanceFactory(instance, aspectName)__		}_		else {_			_			instanceFactory = new SimpleMetadataAwareAspectInstanceFactory(aspectClass, aspectName)__		}_		return instanceFactory__	};create,a,link,metadata,aware,aspect,instance,factory,for,the,supplied,aspect,type,if,the,aspect,type,has,no,per,clause,then,a,link,singleton,metadata,aware,aspect,instance,factory,is,returned,otherwise,a,link,prototype,aspect,instance,factory,is,returned;private,metadata,aware,aspect,instance,factory,create,aspect,instance,factory,aspect,metadata,am,class,aspect,class,string,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,null,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,object,instance,get,singleton,aspect,instance,aspect,class,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,instance,aspect,name,else,instance,factory,new,simple,metadata,aware,aspect,instance,factory,aspect,class,aspect,name,return,instance,factory
AspectJProxyFactory -> public AspectJProxyFactory(Object target);1328020251;Create a new AspectJProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public AspectJProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,aspect,jproxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,aspect,jproxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
AspectJProxyFactory -> public AspectJProxyFactory(Object target);1355313310;Create a new AspectJProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public AspectJProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,aspect,jproxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,aspect,jproxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
AspectJProxyFactory -> public AspectJProxyFactory(Object target);1356735495;Create a new AspectJProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public AspectJProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,aspect,jproxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,aspect,jproxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
AspectJProxyFactory -> public AspectJProxyFactory(Object target);1385412762;Create a new AspectJProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public AspectJProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,aspect,jproxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,aspect,jproxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
AspectJProxyFactory -> public AspectJProxyFactory(Object target);1426267113;Create a new AspectJProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public AspectJProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,aspect,jproxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,aspect,jproxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
AspectJProxyFactory -> public AspectJProxyFactory(Object target);1441703603;Create a new AspectJProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public AspectJProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,aspect,jproxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,aspect,jproxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
AspectJProxyFactory -> public AspectJProxyFactory(Object target);1467730834;Create a new AspectJProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public AspectJProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,aspect,jproxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,aspect,jproxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
AspectJProxyFactory -> public AspectJProxyFactory(Object target);1468948866;Create a new AspectJProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public AspectJProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,aspect,jproxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,aspect,jproxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
AspectJProxyFactory -> public AspectJProxyFactory(Object target);1482422404;Create a new AspectJProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public AspectJProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,aspect,jproxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,aspect,jproxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
AspectJProxyFactory -> public AspectJProxyFactory(Object target);1496837955;Create a new AspectJProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public AspectJProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,aspect,jproxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,aspect,jproxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
AspectJProxyFactory -> public AspectJProxyFactory(Object target);1519772955;Create a new AspectJProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public AspectJProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,aspect,jproxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,aspect,jproxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
AspectJProxyFactory -> public AspectJProxyFactory(Object target);1530174524;Create a new AspectJProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public AspectJProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,aspect,jproxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,aspect,jproxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
AspectJProxyFactory -> public AspectJProxyFactory(Class<?>[] interfaces);1385412762;Create a new {@code AspectJProxyFactory}._No target, only interfaces. Must add interceptors.;public AspectJProxyFactory(Class<?>[] interfaces) {_		setInterfaces(interfaces)__	};create,a,new,code,aspect,jproxy,factory,no,target,only,interfaces,must,add,interceptors;public,aspect,jproxy,factory,class,interfaces,set,interfaces,interfaces
AspectJProxyFactory -> public AspectJProxyFactory(Class<?>[] interfaces);1426267113;Create a new {@code AspectJProxyFactory}._No target, only interfaces. Must add interceptors.;public AspectJProxyFactory(Class<?>[] interfaces) {_		setInterfaces(interfaces)__	};create,a,new,code,aspect,jproxy,factory,no,target,only,interfaces,must,add,interceptors;public,aspect,jproxy,factory,class,interfaces,set,interfaces,interfaces
AspectJProxyFactory -> private Object getSingletonAspectInstance(Class<?> aspectClass);1385412762;Get the singleton aspect instance for the supplied aspect type. An instance_is created if one cannot be found in the instance cache.;private Object getSingletonAspectInstance(Class<?> aspectClass) {_		synchronized (aspectCache) {_			Object instance = aspectCache.get(aspectClass)__			if (instance != null) {_				return instance__			}_			try {_				instance = aspectClass.newInstance()__				aspectCache.put(aspectClass, instance)__				return instance__			}_			catch (InstantiationException ex) {_				throw new AopConfigException("Unable to instantiate aspect class [" + aspectClass.getName() + "]", ex)__			}_			catch (IllegalAccessException ex) {_				throw new AopConfigException("Cannot access aspect class [" + aspectClass.getName() + "]", ex)__			}_		}_	};get,the,singleton,aspect,instance,for,the,supplied,aspect,type,an,instance,is,created,if,one,cannot,be,found,in,the,instance,cache;private,object,get,singleton,aspect,instance,class,aspect,class,synchronized,aspect,cache,object,instance,aspect,cache,get,aspect,class,if,instance,null,return,instance,try,instance,aspect,class,new,instance,aspect,cache,put,aspect,class,instance,return,instance,catch,instantiation,exception,ex,throw,new,aop,config,exception,unable,to,instantiate,aspect,class,aspect,class,get,name,ex,catch,illegal,access,exception,ex,throw,new,aop,config,exception,cannot,access,aspect,class,aspect,class,get,name,ex
AspectJProxyFactory -> private Object getSingletonAspectInstance(Class<?> aspectClass);1426267113;Get the singleton aspect instance for the supplied aspect type. An instance_is created if one cannot be found in the instance cache.;private Object getSingletonAspectInstance(Class<?> aspectClass) {_		synchronized (aspectCache) {_			Object instance = aspectCache.get(aspectClass)__			if (instance != null) {_				return instance__			}_			try {_				instance = aspectClass.newInstance()__				aspectCache.put(aspectClass, instance)__				return instance__			}_			catch (InstantiationException ex) {_				throw new AopConfigException("Unable to instantiate aspect class [" + aspectClass.getName() + "]", ex)__			}_			catch (IllegalAccessException ex) {_				throw new AopConfigException("Cannot access aspect class [" + aspectClass.getName() + "]", ex)__			}_		}_	};get,the,singleton,aspect,instance,for,the,supplied,aspect,type,an,instance,is,created,if,one,cannot,be,found,in,the,instance,cache;private,object,get,singleton,aspect,instance,class,aspect,class,synchronized,aspect,cache,object,instance,aspect,cache,get,aspect,class,if,instance,null,return,instance,try,instance,aspect,class,new,instance,aspect,cache,put,aspect,class,instance,return,instance,catch,instantiation,exception,ex,throw,new,aop,config,exception,unable,to,instantiate,aspect,class,aspect,class,get,name,ex,catch,illegal,access,exception,ex,throw,new,aop,config,exception,cannot,access,aspect,class,aspect,class,get,name,ex
AspectJProxyFactory -> private Object getSingletonAspectInstance(Class<?> aspectClass);1441703603;Get the singleton aspect instance for the supplied aspect type. An instance_is created if one cannot be found in the instance cache.;private Object getSingletonAspectInstance(Class<?> aspectClass) {_		synchronized (aspectCache) {_			Object instance = aspectCache.get(aspectClass)__			if (instance != null) {_				return instance__			}_			try {_				instance = aspectClass.newInstance()__				aspectCache.put(aspectClass, instance)__				return instance__			}_			catch (InstantiationException ex) {_				throw new AopConfigException("Unable to instantiate aspect class [" + aspectClass.getName() + "]", ex)__			}_			catch (IllegalAccessException ex) {_				throw new AopConfigException("Cannot access aspect class [" + aspectClass.getName() + "]", ex)__			}_		}_	};get,the,singleton,aspect,instance,for,the,supplied,aspect,type,an,instance,is,created,if,one,cannot,be,found,in,the,instance,cache;private,object,get,singleton,aspect,instance,class,aspect,class,synchronized,aspect,cache,object,instance,aspect,cache,get,aspect,class,if,instance,null,return,instance,try,instance,aspect,class,new,instance,aspect,cache,put,aspect,class,instance,return,instance,catch,instantiation,exception,ex,throw,new,aop,config,exception,unable,to,instantiate,aspect,class,aspect,class,get,name,ex,catch,illegal,access,exception,ex,throw,new,aop,config,exception,cannot,access,aspect,class,aspect,class,get,name,ex
AspectJProxyFactory -> private Object getSingletonAspectInstance(Class<?> aspectClass);1467730834;Get the singleton aspect instance for the supplied aspect type. An instance_is created if one cannot be found in the instance cache.;private Object getSingletonAspectInstance(Class<?> aspectClass) {_		synchronized (aspectCache) {_			Object instance = aspectCache.get(aspectClass)__			if (instance != null) {_				return instance__			}_			try {_				instance = aspectClass.newInstance()__				aspectCache.put(aspectClass, instance)__				return instance__			}_			catch (InstantiationException ex) {_				throw new AopConfigException("Unable to instantiate aspect class [" + aspectClass.getName() + "]", ex)__			}_			catch (IllegalAccessException ex) {_				throw new AopConfigException("Cannot access aspect class [" + aspectClass.getName() + "]", ex)__			}_		}_	};get,the,singleton,aspect,instance,for,the,supplied,aspect,type,an,instance,is,created,if,one,cannot,be,found,in,the,instance,cache;private,object,get,singleton,aspect,instance,class,aspect,class,synchronized,aspect,cache,object,instance,aspect,cache,get,aspect,class,if,instance,null,return,instance,try,instance,aspect,class,new,instance,aspect,cache,put,aspect,class,instance,return,instance,catch,instantiation,exception,ex,throw,new,aop,config,exception,unable,to,instantiate,aspect,class,aspect,class,get,name,ex,catch,illegal,access,exception,ex,throw,new,aop,config,exception,cannot,access,aspect,class,aspect,class,get,name,ex
AspectJProxyFactory -> private Object getSingletonAspectInstance(Class<?> aspectClass);1468948866;Get the singleton aspect instance for the supplied aspect type. An instance_is created if one cannot be found in the instance cache.;private Object getSingletonAspectInstance(Class<?> aspectClass) {_		synchronized (aspectCache) {_			Object instance = aspectCache.get(aspectClass)__			if (instance != null) {_				return instance__			}_			instance = new SimpleAspectInstanceFactory(aspectClass).getAspectInstance()__			aspectCache.put(aspectClass, instance)__			return instance__		}_	};get,the,singleton,aspect,instance,for,the,supplied,aspect,type,an,instance,is,created,if,one,cannot,be,found,in,the,instance,cache;private,object,get,singleton,aspect,instance,class,aspect,class,synchronized,aspect,cache,object,instance,aspect,cache,get,aspect,class,if,instance,null,return,instance,instance,new,simple,aspect,instance,factory,aspect,class,get,aspect,instance,aspect,cache,put,aspect,class,instance,return,instance
AspectJProxyFactory -> private Object getSingletonAspectInstance(Class<?> aspectClass);1482422404;Get the singleton aspect instance for the supplied aspect type. An instance_is created if one cannot be found in the instance cache.;private Object getSingletonAspectInstance(Class<?> aspectClass) {_		_		Object instance = aspectCache.get(aspectClass)__		if (instance == null) {_			synchronized (aspectCache) {_				_				instance = aspectCache.get(aspectClass)__				if (instance != null) {_					return instance__				}_				instance = new SimpleAspectInstanceFactory(aspectClass).getAspectInstance()__				aspectCache.put(aspectClass, instance)__			}_		}_		return instance__	};get,the,singleton,aspect,instance,for,the,supplied,aspect,type,an,instance,is,created,if,one,cannot,be,found,in,the,instance,cache;private,object,get,singleton,aspect,instance,class,aspect,class,object,instance,aspect,cache,get,aspect,class,if,instance,null,synchronized,aspect,cache,instance,aspect,cache,get,aspect,class,if,instance,null,return,instance,instance,new,simple,aspect,instance,factory,aspect,class,get,aspect,instance,aspect,cache,put,aspect,class,instance,return,instance
AspectJProxyFactory -> private Object getSingletonAspectInstance(Class<?> aspectClass);1496837955;Get the singleton aspect instance for the supplied aspect type. An instance_is created if one cannot be found in the instance cache.;private Object getSingletonAspectInstance(Class<?> aspectClass) {_		_		Object instance = aspectCache.get(aspectClass)__		if (instance == null) {_			synchronized (aspectCache) {_				_				instance = aspectCache.get(aspectClass)__				if (instance != null) {_					return instance__				}_				instance = new SimpleAspectInstanceFactory(aspectClass).getAspectInstance()__				aspectCache.put(aspectClass, instance)__			}_		}_		return instance__	};get,the,singleton,aspect,instance,for,the,supplied,aspect,type,an,instance,is,created,if,one,cannot,be,found,in,the,instance,cache;private,object,get,singleton,aspect,instance,class,aspect,class,object,instance,aspect,cache,get,aspect,class,if,instance,null,synchronized,aspect,cache,instance,aspect,cache,get,aspect,class,if,instance,null,return,instance,instance,new,simple,aspect,instance,factory,aspect,class,get,aspect,instance,aspect,cache,put,aspect,class,instance,return,instance
AspectJProxyFactory -> private Object getSingletonAspectInstance(Class<?> aspectClass);1519772955;Get the singleton aspect instance for the supplied aspect type. An instance_is created if one cannot be found in the instance cache.;private Object getSingletonAspectInstance(Class<?> aspectClass) {_		_		Object instance = aspectCache.get(aspectClass)__		if (instance == null) {_			synchronized (aspectCache) {_				_				instance = aspectCache.get(aspectClass)__				if (instance == null) {_					instance = new SimpleAspectInstanceFactory(aspectClass).getAspectInstance()__					aspectCache.put(aspectClass, instance)__				}_			}_		}_		return instance__	};get,the,singleton,aspect,instance,for,the,supplied,aspect,type,an,instance,is,created,if,one,cannot,be,found,in,the,instance,cache;private,object,get,singleton,aspect,instance,class,aspect,class,object,instance,aspect,cache,get,aspect,class,if,instance,null,synchronized,aspect,cache,instance,aspect,cache,get,aspect,class,if,instance,null,instance,new,simple,aspect,instance,factory,aspect,class,get,aspect,instance,aspect,cache,put,aspect,class,instance,return,instance
AspectJProxyFactory -> private Object getSingletonAspectInstance(Class<?> aspectClass);1530174524;Get the singleton aspect instance for the supplied aspect type. An instance_is created if one cannot be found in the instance cache.;private Object getSingletonAspectInstance(Class<?> aspectClass) {_		_		Object instance = aspectCache.get(aspectClass)__		if (instance == null) {_			synchronized (aspectCache) {_				_				instance = aspectCache.get(aspectClass)__				if (instance == null) {_					instance = new SimpleAspectInstanceFactory(aspectClass).getAspectInstance()__					aspectCache.put(aspectClass, instance)__				}_			}_		}_		return instance__	};get,the,singleton,aspect,instance,for,the,supplied,aspect,type,an,instance,is,created,if,one,cannot,be,found,in,the,instance,cache;private,object,get,singleton,aspect,instance,class,aspect,class,object,instance,aspect,cache,get,aspect,class,if,instance,null,synchronized,aspect,cache,instance,aspect,cache,get,aspect,class,if,instance,null,instance,new,simple,aspect,instance,factory,aspect,class,get,aspect,instance,aspect,cache,put,aspect,class,instance,return,instance
AspectJProxyFactory -> private AspectMetadata createAspectMetadata(Class aspectClass, String aspectName);1328020251;Create an {@link AspectMetadata} instance for the supplied aspect type.;private AspectMetadata createAspectMetadata(Class aspectClass, String aspectName) {_		AspectMetadata am = new AspectMetadata(aspectClass, aspectName)__		if (!am.getAjType().isAspect()) {_			throw new IllegalArgumentException("Class [" + aspectClass.getName() + "] is not a valid aspect type")__		}_		return am__	};create,an,link,aspect,metadata,instance,for,the,supplied,aspect,type;private,aspect,metadata,create,aspect,metadata,class,aspect,class,string,aspect,name,aspect,metadata,am,new,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,is,aspect,throw,new,illegal,argument,exception,class,aspect,class,get,name,is,not,a,valid,aspect,type,return,am
AspectJProxyFactory -> private AspectMetadata createAspectMetadata(Class aspectClass, String aspectName);1355313310;Create an {@link AspectMetadata} instance for the supplied aspect type.;private AspectMetadata createAspectMetadata(Class aspectClass, String aspectName) {_		AspectMetadata am = new AspectMetadata(aspectClass, aspectName)__		if (!am.getAjType().isAspect()) {_			throw new IllegalArgumentException("Class [" + aspectClass.getName() + "] is not a valid aspect type")__		}_		return am__	};create,an,link,aspect,metadata,instance,for,the,supplied,aspect,type;private,aspect,metadata,create,aspect,metadata,class,aspect,class,string,aspect,name,aspect,metadata,am,new,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,is,aspect,throw,new,illegal,argument,exception,class,aspect,class,get,name,is,not,a,valid,aspect,type,return,am
AspectJProxyFactory -> private AspectMetadata createAspectMetadata(Class aspectClass, String aspectName);1356735495;Create an {@link AspectMetadata} instance for the supplied aspect type.;private AspectMetadata createAspectMetadata(Class aspectClass, String aspectName) {_		AspectMetadata am = new AspectMetadata(aspectClass, aspectName)__		if (!am.getAjType().isAspect()) {_			throw new IllegalArgumentException("Class [" + aspectClass.getName() + "] is not a valid aspect type")__		}_		return am__	};create,an,link,aspect,metadata,instance,for,the,supplied,aspect,type;private,aspect,metadata,create,aspect,metadata,class,aspect,class,string,aspect,name,aspect,metadata,am,new,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,is,aspect,throw,new,illegal,argument,exception,class,aspect,class,get,name,is,not,a,valid,aspect,type,return,am
AspectJProxyFactory -> private MetadataAwareAspectInstanceFactory createAspectInstanceFactory( 			AspectMetadata am, Class<?> aspectClass, String aspectName);1385412762;Create a {@link MetadataAwareAspectInstanceFactory} for the supplied aspect type. If the aspect type_has no per clause, then a {@link SingletonMetadataAwareAspectInstanceFactory} is returned, otherwise_a {@link PrototypeAspectInstanceFactory} is returned.;private MetadataAwareAspectInstanceFactory createAspectInstanceFactory(_			AspectMetadata am, Class<?> aspectClass, String aspectName) {__		MetadataAwareAspectInstanceFactory instanceFactory = null__		if (am.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_			_			Object instance = getSingletonAspectInstance(aspectClass)__			instanceFactory = new SingletonMetadataAwareAspectInstanceFactory(instance, aspectName)__		}_		else {_			_			instanceFactory = new SimpleMetadataAwareAspectInstanceFactory(aspectClass, aspectName)__		}_		return instanceFactory__	};create,a,link,metadata,aware,aspect,instance,factory,for,the,supplied,aspect,type,if,the,aspect,type,has,no,per,clause,then,a,link,singleton,metadata,aware,aspect,instance,factory,is,returned,otherwise,a,link,prototype,aspect,instance,factory,is,returned;private,metadata,aware,aspect,instance,factory,create,aspect,instance,factory,aspect,metadata,am,class,aspect,class,string,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,null,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,object,instance,get,singleton,aspect,instance,aspect,class,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,instance,aspect,name,else,instance,factory,new,simple,metadata,aware,aspect,instance,factory,aspect,class,aspect,name,return,instance,factory
AspectJProxyFactory -> private MetadataAwareAspectInstanceFactory createAspectInstanceFactory( 			AspectMetadata am, Class<?> aspectClass, String aspectName);1426267113;Create a {@link MetadataAwareAspectInstanceFactory} for the supplied aspect type. If the aspect type_has no per clause, then a {@link SingletonMetadataAwareAspectInstanceFactory} is returned, otherwise_a {@link PrototypeAspectInstanceFactory} is returned.;private MetadataAwareAspectInstanceFactory createAspectInstanceFactory(_			AspectMetadata am, Class<?> aspectClass, String aspectName) {__		MetadataAwareAspectInstanceFactory instanceFactory = null__		if (am.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_			_			Object instance = getSingletonAspectInstance(aspectClass)__			instanceFactory = new SingletonMetadataAwareAspectInstanceFactory(instance, aspectName)__		}_		else {_			_			instanceFactory = new SimpleMetadataAwareAspectInstanceFactory(aspectClass, aspectName)__		}_		return instanceFactory__	};create,a,link,metadata,aware,aspect,instance,factory,for,the,supplied,aspect,type,if,the,aspect,type,has,no,per,clause,then,a,link,singleton,metadata,aware,aspect,instance,factory,is,returned,otherwise,a,link,prototype,aspect,instance,factory,is,returned;private,metadata,aware,aspect,instance,factory,create,aspect,instance,factory,aspect,metadata,am,class,aspect,class,string,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,null,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,object,instance,get,singleton,aspect,instance,aspect,class,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,instance,aspect,name,else,instance,factory,new,simple,metadata,aware,aspect,instance,factory,aspect,class,aspect,name,return,instance,factory
AspectJProxyFactory -> private MetadataAwareAspectInstanceFactory createAspectInstanceFactory( 			AspectMetadata am, Class<?> aspectClass, String aspectName);1441703603;Create a {@link MetadataAwareAspectInstanceFactory} for the supplied aspect type. If the aspect type_has no per clause, then a {@link SingletonMetadataAwareAspectInstanceFactory} is returned, otherwise_a {@link PrototypeAspectInstanceFactory} is returned.;private MetadataAwareAspectInstanceFactory createAspectInstanceFactory(_			AspectMetadata am, Class<?> aspectClass, String aspectName) {__		MetadataAwareAspectInstanceFactory instanceFactory = null__		if (am.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_			_			Object instance = getSingletonAspectInstance(aspectClass)__			instanceFactory = new SingletonMetadataAwareAspectInstanceFactory(instance, aspectName)__		}_		else {_			_			instanceFactory = new SimpleMetadataAwareAspectInstanceFactory(aspectClass, aspectName)__		}_		return instanceFactory__	};create,a,link,metadata,aware,aspect,instance,factory,for,the,supplied,aspect,type,if,the,aspect,type,has,no,per,clause,then,a,link,singleton,metadata,aware,aspect,instance,factory,is,returned,otherwise,a,link,prototype,aspect,instance,factory,is,returned;private,metadata,aware,aspect,instance,factory,create,aspect,instance,factory,aspect,metadata,am,class,aspect,class,string,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,null,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,object,instance,get,singleton,aspect,instance,aspect,class,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,instance,aspect,name,else,instance,factory,new,simple,metadata,aware,aspect,instance,factory,aspect,class,aspect,name,return,instance,factory
AspectJProxyFactory -> private MetadataAwareAspectInstanceFactory createAspectInstanceFactory( 			AspectMetadata am, Class<?> aspectClass, String aspectName);1467730834;Create a {@link MetadataAwareAspectInstanceFactory} for the supplied aspect type. If the aspect type_has no per clause, then a {@link SingletonMetadataAwareAspectInstanceFactory} is returned, otherwise_a {@link PrototypeAspectInstanceFactory} is returned.;private MetadataAwareAspectInstanceFactory createAspectInstanceFactory(_			AspectMetadata am, Class<?> aspectClass, String aspectName) {__		MetadataAwareAspectInstanceFactory instanceFactory = null__		if (am.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_			_			Object instance = getSingletonAspectInstance(aspectClass)__			instanceFactory = new SingletonMetadataAwareAspectInstanceFactory(instance, aspectName)__		}_		else {_			_			instanceFactory = new SimpleMetadataAwareAspectInstanceFactory(aspectClass, aspectName)__		}_		return instanceFactory__	};create,a,link,metadata,aware,aspect,instance,factory,for,the,supplied,aspect,type,if,the,aspect,type,has,no,per,clause,then,a,link,singleton,metadata,aware,aspect,instance,factory,is,returned,otherwise,a,link,prototype,aspect,instance,factory,is,returned;private,metadata,aware,aspect,instance,factory,create,aspect,instance,factory,aspect,metadata,am,class,aspect,class,string,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,null,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,object,instance,get,singleton,aspect,instance,aspect,class,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,instance,aspect,name,else,instance,factory,new,simple,metadata,aware,aspect,instance,factory,aspect,class,aspect,name,return,instance,factory
AspectJProxyFactory -> private MetadataAwareAspectInstanceFactory createAspectInstanceFactory( 			AspectMetadata am, Class<?> aspectClass, String aspectName);1468948866;Create a {@link MetadataAwareAspectInstanceFactory} for the supplied aspect type. If the aspect type_has no per clause, then a {@link SingletonMetadataAwareAspectInstanceFactory} is returned, otherwise_a {@link PrototypeAspectInstanceFactory} is returned.;private MetadataAwareAspectInstanceFactory createAspectInstanceFactory(_			AspectMetadata am, Class<?> aspectClass, String aspectName) {__		MetadataAwareAspectInstanceFactory instanceFactory = null__		if (am.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_			_			Object instance = getSingletonAspectInstance(aspectClass)__			instanceFactory = new SingletonMetadataAwareAspectInstanceFactory(instance, aspectName)__		}_		else {_			_			instanceFactory = new SimpleMetadataAwareAspectInstanceFactory(aspectClass, aspectName)__		}_		return instanceFactory__	};create,a,link,metadata,aware,aspect,instance,factory,for,the,supplied,aspect,type,if,the,aspect,type,has,no,per,clause,then,a,link,singleton,metadata,aware,aspect,instance,factory,is,returned,otherwise,a,link,prototype,aspect,instance,factory,is,returned;private,metadata,aware,aspect,instance,factory,create,aspect,instance,factory,aspect,metadata,am,class,aspect,class,string,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,null,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,object,instance,get,singleton,aspect,instance,aspect,class,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,instance,aspect,name,else,instance,factory,new,simple,metadata,aware,aspect,instance,factory,aspect,class,aspect,name,return,instance,factory
AspectJProxyFactory -> private MetadataAwareAspectInstanceFactory createAspectInstanceFactory( 			AspectMetadata am, Class<?> aspectClass, String aspectName);1482422404;Create a {@link MetadataAwareAspectInstanceFactory} for the supplied aspect type. If the aspect type_has no per clause, then a {@link SingletonMetadataAwareAspectInstanceFactory} is returned, otherwise_a {@link PrototypeAspectInstanceFactory} is returned.;private MetadataAwareAspectInstanceFactory createAspectInstanceFactory(_			AspectMetadata am, Class<?> aspectClass, String aspectName) {__		MetadataAwareAspectInstanceFactory instanceFactory__		if (am.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_			_			Object instance = getSingletonAspectInstance(aspectClass)__			instanceFactory = new SingletonMetadataAwareAspectInstanceFactory(instance, aspectName)__		}_		else {_			_			instanceFactory = new SimpleMetadataAwareAspectInstanceFactory(aspectClass, aspectName)__		}_		return instanceFactory__	};create,a,link,metadata,aware,aspect,instance,factory,for,the,supplied,aspect,type,if,the,aspect,type,has,no,per,clause,then,a,link,singleton,metadata,aware,aspect,instance,factory,is,returned,otherwise,a,link,prototype,aspect,instance,factory,is,returned;private,metadata,aware,aspect,instance,factory,create,aspect,instance,factory,aspect,metadata,am,class,aspect,class,string,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,object,instance,get,singleton,aspect,instance,aspect,class,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,instance,aspect,name,else,instance,factory,new,simple,metadata,aware,aspect,instance,factory,aspect,class,aspect,name,return,instance,factory
AspectJProxyFactory -> private MetadataAwareAspectInstanceFactory createAspectInstanceFactory( 			AspectMetadata am, Class<?> aspectClass, String aspectName);1496837955;Create a {@link MetadataAwareAspectInstanceFactory} for the supplied aspect type. If the aspect type_has no per clause, then a {@link SingletonMetadataAwareAspectInstanceFactory} is returned, otherwise_a {@link PrototypeAspectInstanceFactory} is returned.;private MetadataAwareAspectInstanceFactory createAspectInstanceFactory(_			AspectMetadata am, Class<?> aspectClass, String aspectName) {__		MetadataAwareAspectInstanceFactory instanceFactory__		if (am.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_			_			Object instance = getSingletonAspectInstance(aspectClass)__			instanceFactory = new SingletonMetadataAwareAspectInstanceFactory(instance, aspectName)__		}_		else {_			_			instanceFactory = new SimpleMetadataAwareAspectInstanceFactory(aspectClass, aspectName)__		}_		return instanceFactory__	};create,a,link,metadata,aware,aspect,instance,factory,for,the,supplied,aspect,type,if,the,aspect,type,has,no,per,clause,then,a,link,singleton,metadata,aware,aspect,instance,factory,is,returned,otherwise,a,link,prototype,aspect,instance,factory,is,returned;private,metadata,aware,aspect,instance,factory,create,aspect,instance,factory,aspect,metadata,am,class,aspect,class,string,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,object,instance,get,singleton,aspect,instance,aspect,class,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,instance,aspect,name,else,instance,factory,new,simple,metadata,aware,aspect,instance,factory,aspect,class,aspect,name,return,instance,factory
AspectJProxyFactory -> private MetadataAwareAspectInstanceFactory createAspectInstanceFactory( 			AspectMetadata am, Class<?> aspectClass, String aspectName);1519772955;Create a {@link MetadataAwareAspectInstanceFactory} for the supplied aspect type. If the aspect type_has no per clause, then a {@link SingletonMetadataAwareAspectInstanceFactory} is returned, otherwise_a {@link PrototypeAspectInstanceFactory} is returned.;private MetadataAwareAspectInstanceFactory createAspectInstanceFactory(_			AspectMetadata am, Class<?> aspectClass, String aspectName) {__		MetadataAwareAspectInstanceFactory instanceFactory__		if (am.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_			_			Object instance = getSingletonAspectInstance(aspectClass)__			instanceFactory = new SingletonMetadataAwareAspectInstanceFactory(instance, aspectName)__		}_		else {_			_			instanceFactory = new SimpleMetadataAwareAspectInstanceFactory(aspectClass, aspectName)__		}_		return instanceFactory__	};create,a,link,metadata,aware,aspect,instance,factory,for,the,supplied,aspect,type,if,the,aspect,type,has,no,per,clause,then,a,link,singleton,metadata,aware,aspect,instance,factory,is,returned,otherwise,a,link,prototype,aspect,instance,factory,is,returned;private,metadata,aware,aspect,instance,factory,create,aspect,instance,factory,aspect,metadata,am,class,aspect,class,string,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,object,instance,get,singleton,aspect,instance,aspect,class,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,instance,aspect,name,else,instance,factory,new,simple,metadata,aware,aspect,instance,factory,aspect,class,aspect,name,return,instance,factory
AspectJProxyFactory -> private MetadataAwareAspectInstanceFactory createAspectInstanceFactory( 			AspectMetadata am, Class<?> aspectClass, String aspectName);1530174524;Create a {@link MetadataAwareAspectInstanceFactory} for the supplied aspect type. If the aspect type_has no per clause, then a {@link SingletonMetadataAwareAspectInstanceFactory} is returned, otherwise_a {@link PrototypeAspectInstanceFactory} is returned.;private MetadataAwareAspectInstanceFactory createAspectInstanceFactory(_			AspectMetadata am, Class<?> aspectClass, String aspectName) {__		MetadataAwareAspectInstanceFactory instanceFactory__		if (am.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_			_			Object instance = getSingletonAspectInstance(aspectClass)__			instanceFactory = new SingletonMetadataAwareAspectInstanceFactory(instance, aspectName)__		}_		else {_			_			instanceFactory = new SimpleMetadataAwareAspectInstanceFactory(aspectClass, aspectName)__		}_		return instanceFactory__	};create,a,link,metadata,aware,aspect,instance,factory,for,the,supplied,aspect,type,if,the,aspect,type,has,no,per,clause,then,a,link,singleton,metadata,aware,aspect,instance,factory,is,returned,otherwise,a,link,prototype,aspect,instance,factory,is,returned;private,metadata,aware,aspect,instance,factory,create,aspect,instance,factory,aspect,metadata,am,class,aspect,class,string,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,object,instance,get,singleton,aspect,instance,aspect,class,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,instance,aspect,name,else,instance,factory,new,simple,metadata,aware,aspect,instance,factory,aspect,class,aspect,name,return,instance,factory
AspectJProxyFactory -> private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory);1328020251;Add all {@link Advisor Advisors} from the supplied {@link MetadataAwareAspectInstanceFactory}_to the current chain. Exposes any special purpose {@link Advisor Advisors} if needed._@see #makeAdvisorChainAspectJCapableIfNecessary();private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory) {_		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory)__		advisors = AopUtils.findAdvisorsThatCanApply(advisors, getTargetClass())__		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors)__		OrderComparator.sort(advisors)__		addAdvisors(advisors)__	};add,all,link,advisor,advisors,from,the,supplied,link,metadata,aware,aspect,instance,factory,to,the,current,chain,exposes,any,special,purpose,link,advisor,advisors,if,needed,see,make,advisor,chain,aspect,jcapable,if,necessary;private,void,add,advisors,from,aspect,instance,factory,metadata,aware,aspect,instance,factory,instance,factory,list,advisor,advisors,this,aspect,factory,get,advisors,instance,factory,advisors,aop,utils,find,advisors,that,can,apply,advisors,get,target,class,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,advisors,order,comparator,sort,advisors,add,advisors,advisors
AspectJProxyFactory -> private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory);1355313310;Add all {@link Advisor Advisors} from the supplied {@link MetadataAwareAspectInstanceFactory}_to the current chain. Exposes any special purpose {@link Advisor Advisors} if needed._@see AspectJProxyUtils#makeAdvisorChainAspectJCapableIfNecessary(List);private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory) {_		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory)__		advisors = AopUtils.findAdvisorsThatCanApply(advisors, getTargetClass())__		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors)__		OrderComparator.sort(advisors)__		addAdvisors(advisors)__	};add,all,link,advisor,advisors,from,the,supplied,link,metadata,aware,aspect,instance,factory,to,the,current,chain,exposes,any,special,purpose,link,advisor,advisors,if,needed,see,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,list;private,void,add,advisors,from,aspect,instance,factory,metadata,aware,aspect,instance,factory,instance,factory,list,advisor,advisors,this,aspect,factory,get,advisors,instance,factory,advisors,aop,utils,find,advisors,that,can,apply,advisors,get,target,class,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,advisors,order,comparator,sort,advisors,add,advisors,advisors
AspectJProxyFactory -> private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory);1356735495;Add all {@link Advisor Advisors} from the supplied {@link MetadataAwareAspectInstanceFactory}_to the current chain. Exposes any special purpose {@link Advisor Advisors} if needed._@see AspectJProxyUtils#makeAdvisorChainAspectJCapableIfNecessary(List);private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory) {_		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory)__		advisors = AopUtils.findAdvisorsThatCanApply(advisors, getTargetClass())__		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors)__		OrderComparator.sort(advisors)__		addAdvisors(advisors)__	};add,all,link,advisor,advisors,from,the,supplied,link,metadata,aware,aspect,instance,factory,to,the,current,chain,exposes,any,special,purpose,link,advisor,advisors,if,needed,see,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,list;private,void,add,advisors,from,aspect,instance,factory,metadata,aware,aspect,instance,factory,instance,factory,list,advisor,advisors,this,aspect,factory,get,advisors,instance,factory,advisors,aop,utils,find,advisors,that,can,apply,advisors,get,target,class,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,advisors,order,comparator,sort,advisors,add,advisors,advisors
AspectJProxyFactory -> private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory);1385412762;Add all {@link Advisor Advisors} from the supplied {@link MetadataAwareAspectInstanceFactory}_to the current chain. Exposes any special purpose {@link Advisor Advisors} if needed._@see AspectJProxyUtils#makeAdvisorChainAspectJCapableIfNecessary(List);private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory) {_		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory)__		advisors = AopUtils.findAdvisorsThatCanApply(advisors, getTargetClass())__		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors)__		OrderComparator.sort(advisors)__		addAdvisors(advisors)__	};add,all,link,advisor,advisors,from,the,supplied,link,metadata,aware,aspect,instance,factory,to,the,current,chain,exposes,any,special,purpose,link,advisor,advisors,if,needed,see,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,list;private,void,add,advisors,from,aspect,instance,factory,metadata,aware,aspect,instance,factory,instance,factory,list,advisor,advisors,this,aspect,factory,get,advisors,instance,factory,advisors,aop,utils,find,advisors,that,can,apply,advisors,get,target,class,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,advisors,order,comparator,sort,advisors,add,advisors,advisors
AspectJProxyFactory -> private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory);1426267113;Add all {@link Advisor Advisors} from the supplied {@link MetadataAwareAspectInstanceFactory}_to the current chain. Exposes any special purpose {@link Advisor Advisors} if needed._@see AspectJProxyUtils#makeAdvisorChainAspectJCapableIfNecessary(List);private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory) {_		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory)__		advisors = AopUtils.findAdvisorsThatCanApply(advisors, getTargetClass())__		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors)__		AnnotationAwareOrderComparator.sort(advisors)__		addAdvisors(advisors)__	};add,all,link,advisor,advisors,from,the,supplied,link,metadata,aware,aspect,instance,factory,to,the,current,chain,exposes,any,special,purpose,link,advisor,advisors,if,needed,see,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,list;private,void,add,advisors,from,aspect,instance,factory,metadata,aware,aspect,instance,factory,instance,factory,list,advisor,advisors,this,aspect,factory,get,advisors,instance,factory,advisors,aop,utils,find,advisors,that,can,apply,advisors,get,target,class,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,advisors,annotation,aware,order,comparator,sort,advisors,add,advisors,advisors
AspectJProxyFactory -> private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory);1441703603;Add all {@link Advisor Advisors} from the supplied {@link MetadataAwareAspectInstanceFactory}_to the current chain. Exposes any special purpose {@link Advisor Advisors} if needed._@see AspectJProxyUtils#makeAdvisorChainAspectJCapableIfNecessary(List);private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory) {_		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory)__		advisors = AopUtils.findAdvisorsThatCanApply(advisors, getTargetClass())__		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors)__		AnnotationAwareOrderComparator.sort(advisors)__		addAdvisors(advisors)__	};add,all,link,advisor,advisors,from,the,supplied,link,metadata,aware,aspect,instance,factory,to,the,current,chain,exposes,any,special,purpose,link,advisor,advisors,if,needed,see,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,list;private,void,add,advisors,from,aspect,instance,factory,metadata,aware,aspect,instance,factory,instance,factory,list,advisor,advisors,this,aspect,factory,get,advisors,instance,factory,advisors,aop,utils,find,advisors,that,can,apply,advisors,get,target,class,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,advisors,annotation,aware,order,comparator,sort,advisors,add,advisors,advisors
AspectJProxyFactory -> private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory);1467730834;Add all {@link Advisor Advisors} from the supplied {@link MetadataAwareAspectInstanceFactory}_to the current chain. Exposes any special purpose {@link Advisor Advisors} if needed._@see AspectJProxyUtils#makeAdvisorChainAspectJCapableIfNecessary(List);private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory) {_		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory)__		advisors = AopUtils.findAdvisorsThatCanApply(advisors, getTargetClass())__		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors)__		AnnotationAwareOrderComparator.sort(advisors)__		addAdvisors(advisors)__	};add,all,link,advisor,advisors,from,the,supplied,link,metadata,aware,aspect,instance,factory,to,the,current,chain,exposes,any,special,purpose,link,advisor,advisors,if,needed,see,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,list;private,void,add,advisors,from,aspect,instance,factory,metadata,aware,aspect,instance,factory,instance,factory,list,advisor,advisors,this,aspect,factory,get,advisors,instance,factory,advisors,aop,utils,find,advisors,that,can,apply,advisors,get,target,class,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,advisors,annotation,aware,order,comparator,sort,advisors,add,advisors,advisors
AspectJProxyFactory -> private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory);1468948866;Add all {@link Advisor Advisors} from the supplied {@link MetadataAwareAspectInstanceFactory}_to the current chain. Exposes any special purpose {@link Advisor Advisors} if needed._@see AspectJProxyUtils#makeAdvisorChainAspectJCapableIfNecessary(List);private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory) {_		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory)__		advisors = AopUtils.findAdvisorsThatCanApply(advisors, getTargetClass())__		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors)__		AnnotationAwareOrderComparator.sort(advisors)__		addAdvisors(advisors)__	};add,all,link,advisor,advisors,from,the,supplied,link,metadata,aware,aspect,instance,factory,to,the,current,chain,exposes,any,special,purpose,link,advisor,advisors,if,needed,see,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,list;private,void,add,advisors,from,aspect,instance,factory,metadata,aware,aspect,instance,factory,instance,factory,list,advisor,advisors,this,aspect,factory,get,advisors,instance,factory,advisors,aop,utils,find,advisors,that,can,apply,advisors,get,target,class,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,advisors,annotation,aware,order,comparator,sort,advisors,add,advisors,advisors
AspectJProxyFactory -> private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory);1482422404;Add all {@link Advisor Advisors} from the supplied {@link MetadataAwareAspectInstanceFactory}_to the current chain. Exposes any special purpose {@link Advisor Advisors} if needed._@see AspectJProxyUtils#makeAdvisorChainAspectJCapableIfNecessary(List);private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory) {_		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory)__		advisors = AopUtils.findAdvisorsThatCanApply(advisors, getTargetClass())__		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors)__		AnnotationAwareOrderComparator.sort(advisors)__		addAdvisors(advisors)__	};add,all,link,advisor,advisors,from,the,supplied,link,metadata,aware,aspect,instance,factory,to,the,current,chain,exposes,any,special,purpose,link,advisor,advisors,if,needed,see,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,list;private,void,add,advisors,from,aspect,instance,factory,metadata,aware,aspect,instance,factory,instance,factory,list,advisor,advisors,this,aspect,factory,get,advisors,instance,factory,advisors,aop,utils,find,advisors,that,can,apply,advisors,get,target,class,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,advisors,annotation,aware,order,comparator,sort,advisors,add,advisors,advisors
AspectJProxyFactory -> private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory);1496837955;Add all {@link Advisor Advisors} from the supplied {@link MetadataAwareAspectInstanceFactory}_to the current chain. Exposes any special purpose {@link Advisor Advisors} if needed._@see AspectJProxyUtils#makeAdvisorChainAspectJCapableIfNecessary(List);private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory) {_		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory)__		Class<?> targetClass = getTargetClass()__		Assert.state(targetClass != null, "Unresolvable target class")__		advisors = AopUtils.findAdvisorsThatCanApply(advisors, targetClass)__		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors)__		AnnotationAwareOrderComparator.sort(advisors)__		addAdvisors(advisors)__	};add,all,link,advisor,advisors,from,the,supplied,link,metadata,aware,aspect,instance,factory,to,the,current,chain,exposes,any,special,purpose,link,advisor,advisors,if,needed,see,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,list;private,void,add,advisors,from,aspect,instance,factory,metadata,aware,aspect,instance,factory,instance,factory,list,advisor,advisors,this,aspect,factory,get,advisors,instance,factory,class,target,class,get,target,class,assert,state,target,class,null,unresolvable,target,class,advisors,aop,utils,find,advisors,that,can,apply,advisors,target,class,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,advisors,annotation,aware,order,comparator,sort,advisors,add,advisors,advisors
AspectJProxyFactory -> private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory);1519772955;Add all {@link Advisor Advisors} from the supplied {@link MetadataAwareAspectInstanceFactory}_to the current chain. Exposes any special purpose {@link Advisor Advisors} if needed._@see AspectJProxyUtils#makeAdvisorChainAspectJCapableIfNecessary(List);private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory) {_		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory)__		Class<?> targetClass = getTargetClass()__		Assert.state(targetClass != null, "Unresolvable target class")__		advisors = AopUtils.findAdvisorsThatCanApply(advisors, targetClass)__		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors)__		AnnotationAwareOrderComparator.sort(advisors)__		addAdvisors(advisors)__	};add,all,link,advisor,advisors,from,the,supplied,link,metadata,aware,aspect,instance,factory,to,the,current,chain,exposes,any,special,purpose,link,advisor,advisors,if,needed,see,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,list;private,void,add,advisors,from,aspect,instance,factory,metadata,aware,aspect,instance,factory,instance,factory,list,advisor,advisors,this,aspect,factory,get,advisors,instance,factory,class,target,class,get,target,class,assert,state,target,class,null,unresolvable,target,class,advisors,aop,utils,find,advisors,that,can,apply,advisors,target,class,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,advisors,annotation,aware,order,comparator,sort,advisors,add,advisors,advisors
AspectJProxyFactory -> private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory);1530174524;Add all {@link Advisor Advisors} from the supplied {@link MetadataAwareAspectInstanceFactory}_to the current chain. Exposes any special purpose {@link Advisor Advisors} if needed._@see AspectJProxyUtils#makeAdvisorChainAspectJCapableIfNecessary(List);private void addAdvisorsFromAspectInstanceFactory(MetadataAwareAspectInstanceFactory instanceFactory) {_		List<Advisor> advisors = this.aspectFactory.getAdvisors(instanceFactory)__		Class<?> targetClass = getTargetClass()__		Assert.state(targetClass != null, "Unresolvable target class")__		advisors = AopUtils.findAdvisorsThatCanApply(advisors, targetClass)__		AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors)__		AnnotationAwareOrderComparator.sort(advisors)__		addAdvisors(advisors)__	};add,all,link,advisor,advisors,from,the,supplied,link,metadata,aware,aspect,instance,factory,to,the,current,chain,exposes,any,special,purpose,link,advisor,advisors,if,needed,see,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,list;private,void,add,advisors,from,aspect,instance,factory,metadata,aware,aspect,instance,factory,instance,factory,list,advisor,advisors,this,aspect,factory,get,advisors,instance,factory,class,target,class,get,target,class,assert,state,target,class,null,unresolvable,target,class,advisors,aop,utils,find,advisors,that,can,apply,advisors,target,class,aspect,jproxy,utils,make,advisor,chain,aspect,jcapable,if,necessary,advisors,annotation,aware,order,comparator,sort,advisors,add,advisors,advisors
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy();1328020251;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy() {_		return (T) createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,return,t,create,aop,proxy,get,proxy
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy();1355313310;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy() {_		return (T) createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,return,t,create,aop,proxy,get,proxy
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy();1356735495;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy() {_		return (T) createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,return,t,create,aop,proxy,get,proxy
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy();1385412762;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy() {_		return (T) createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,return,t,create,aop,proxy,get,proxy
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy();1426267113;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy() {_		return (T) createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,return,t,create,aop,proxy,get,proxy
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy();1441703603;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy() {_		return (T) createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,return,t,create,aop,proxy,get,proxy
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy();1467730834;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy() {_		return (T) createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,return,t,create,aop,proxy,get,proxy
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy();1468948866;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy() {_		return (T) createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,return,t,create,aop,proxy,get,proxy
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy();1482422404;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy() {_		return (T) createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,return,t,create,aop,proxy,get,proxy
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy();1496837955;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy() {_		return (T) createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,return,t,create,aop,proxy,get,proxy
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy();1519772955;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy() {_		return (T) createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,return,t,create,aop,proxy,get,proxy
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy();1530174524;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy() {_		return (T) createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,return,t,create,aop,proxy,get,proxy
AspectJProxyFactory -> private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName);1385412762;Create an {@link AspectMetadata} instance for the supplied aspect type.;private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName) {_		AspectMetadata am = new AspectMetadata(aspectClass, aspectName)__		if (!am.getAjType().isAspect()) {_			throw new IllegalArgumentException("Class [" + aspectClass.getName() + "] is not a valid aspect type")__		}_		return am__	};create,an,link,aspect,metadata,instance,for,the,supplied,aspect,type;private,aspect,metadata,create,aspect,metadata,class,aspect,class,string,aspect,name,aspect,metadata,am,new,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,is,aspect,throw,new,illegal,argument,exception,class,aspect,class,get,name,is,not,a,valid,aspect,type,return,am
AspectJProxyFactory -> private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName);1426267113;Create an {@link AspectMetadata} instance for the supplied aspect type.;private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName) {_		AspectMetadata am = new AspectMetadata(aspectClass, aspectName)__		if (!am.getAjType().isAspect()) {_			throw new IllegalArgumentException("Class [" + aspectClass.getName() + "] is not a valid aspect type")__		}_		return am__	};create,an,link,aspect,metadata,instance,for,the,supplied,aspect,type;private,aspect,metadata,create,aspect,metadata,class,aspect,class,string,aspect,name,aspect,metadata,am,new,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,is,aspect,throw,new,illegal,argument,exception,class,aspect,class,get,name,is,not,a,valid,aspect,type,return,am
AspectJProxyFactory -> private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName);1441703603;Create an {@link AspectMetadata} instance for the supplied aspect type.;private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName) {_		AspectMetadata am = new AspectMetadata(aspectClass, aspectName)__		if (!am.getAjType().isAspect()) {_			throw new IllegalArgumentException("Class [" + aspectClass.getName() + "] is not a valid aspect type")__		}_		return am__	};create,an,link,aspect,metadata,instance,for,the,supplied,aspect,type;private,aspect,metadata,create,aspect,metadata,class,aspect,class,string,aspect,name,aspect,metadata,am,new,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,is,aspect,throw,new,illegal,argument,exception,class,aspect,class,get,name,is,not,a,valid,aspect,type,return,am
AspectJProxyFactory -> private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName);1467730834;Create an {@link AspectMetadata} instance for the supplied aspect type.;private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName) {_		AspectMetadata am = new AspectMetadata(aspectClass, aspectName)__		if (!am.getAjType().isAspect()) {_			throw new IllegalArgumentException("Class [" + aspectClass.getName() + "] is not a valid aspect type")__		}_		return am__	};create,an,link,aspect,metadata,instance,for,the,supplied,aspect,type;private,aspect,metadata,create,aspect,metadata,class,aspect,class,string,aspect,name,aspect,metadata,am,new,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,is,aspect,throw,new,illegal,argument,exception,class,aspect,class,get,name,is,not,a,valid,aspect,type,return,am
AspectJProxyFactory -> private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName);1468948866;Create an {@link AspectMetadata} instance for the supplied aspect type.;private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName) {_		AspectMetadata am = new AspectMetadata(aspectClass, aspectName)__		if (!am.getAjType().isAspect()) {_			throw new IllegalArgumentException("Class [" + aspectClass.getName() + "] is not a valid aspect type")__		}_		return am__	};create,an,link,aspect,metadata,instance,for,the,supplied,aspect,type;private,aspect,metadata,create,aspect,metadata,class,aspect,class,string,aspect,name,aspect,metadata,am,new,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,is,aspect,throw,new,illegal,argument,exception,class,aspect,class,get,name,is,not,a,valid,aspect,type,return,am
AspectJProxyFactory -> private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName);1482422404;Create an {@link AspectMetadata} instance for the supplied aspect type.;private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName) {_		AspectMetadata am = new AspectMetadata(aspectClass, aspectName)__		if (!am.getAjType().isAspect()) {_			throw new IllegalArgumentException("Class [" + aspectClass.getName() + "] is not a valid aspect type")__		}_		return am__	};create,an,link,aspect,metadata,instance,for,the,supplied,aspect,type;private,aspect,metadata,create,aspect,metadata,class,aspect,class,string,aspect,name,aspect,metadata,am,new,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,is,aspect,throw,new,illegal,argument,exception,class,aspect,class,get,name,is,not,a,valid,aspect,type,return,am
AspectJProxyFactory -> private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName);1496837955;Create an {@link AspectMetadata} instance for the supplied aspect type.;private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName) {_		AspectMetadata am = new AspectMetadata(aspectClass, aspectName)__		if (!am.getAjType().isAspect()) {_			throw new IllegalArgumentException("Class [" + aspectClass.getName() + "] is not a valid aspect type")__		}_		return am__	};create,an,link,aspect,metadata,instance,for,the,supplied,aspect,type;private,aspect,metadata,create,aspect,metadata,class,aspect,class,string,aspect,name,aspect,metadata,am,new,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,is,aspect,throw,new,illegal,argument,exception,class,aspect,class,get,name,is,not,a,valid,aspect,type,return,am
AspectJProxyFactory -> private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName);1519772955;Create an {@link AspectMetadata} instance for the supplied aspect type.;private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName) {_		AspectMetadata am = new AspectMetadata(aspectClass, aspectName)__		if (!am.getAjType().isAspect()) {_			throw new IllegalArgumentException("Class [" + aspectClass.getName() + "] is not a valid aspect type")__		}_		return am__	};create,an,link,aspect,metadata,instance,for,the,supplied,aspect,type;private,aspect,metadata,create,aspect,metadata,class,aspect,class,string,aspect,name,aspect,metadata,am,new,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,is,aspect,throw,new,illegal,argument,exception,class,aspect,class,get,name,is,not,a,valid,aspect,type,return,am
AspectJProxyFactory -> private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName);1530174524;Create an {@link AspectMetadata} instance for the supplied aspect type.;private AspectMetadata createAspectMetadata(Class<?> aspectClass, String aspectName) {_		AspectMetadata am = new AspectMetadata(aspectClass, aspectName)__		if (!am.getAjType().isAspect()) {_			throw new IllegalArgumentException("Class [" + aspectClass.getName() + "] is not a valid aspect type")__		}_		return am__	};create,an,link,aspect,metadata,instance,for,the,supplied,aspect,type;private,aspect,metadata,create,aspect,metadata,class,aspect,class,string,aspect,name,aspect,metadata,am,new,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,is,aspect,throw,new,illegal,argument,exception,class,aspect,class,get,name,is,not,a,valid,aspect,type,return,am
AspectJProxyFactory -> public void addAspect(Class aspectClass);1328020251;Add an aspect of the supplied type to the end of the advice chain._@param aspectClass the AspectJ aspect class;public void addAspect(Class aspectClass) {_		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		MetadataAwareAspectInstanceFactory instanceFactory = createAspectInstanceFactory(am, aspectClass, aspectName)__		addAdvisorsFromAspectInstanceFactory(instanceFactory)__	};add,an,aspect,of,the,supplied,type,to,the,end,of,the,advice,chain,param,aspect,class,the,aspect,j,aspect,class;public,void,add,aspect,class,aspect,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,create,aspect,instance,factory,am,aspect,class,aspect,name,add,advisors,from,aspect,instance,factory,instance,factory
AspectJProxyFactory -> public void addAspect(Class aspectClass);1355313310;Add an aspect of the supplied type to the end of the advice chain._@param aspectClass the AspectJ aspect class;public void addAspect(Class aspectClass) {_		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		MetadataAwareAspectInstanceFactory instanceFactory = createAspectInstanceFactory(am, aspectClass, aspectName)__		addAdvisorsFromAspectInstanceFactory(instanceFactory)__	};add,an,aspect,of,the,supplied,type,to,the,end,of,the,advice,chain,param,aspect,class,the,aspect,j,aspect,class;public,void,add,aspect,class,aspect,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,create,aspect,instance,factory,am,aspect,class,aspect,name,add,advisors,from,aspect,instance,factory,instance,factory
AspectJProxyFactory -> public void addAspect(Class aspectClass);1356735495;Add an aspect of the supplied type to the end of the advice chain._@param aspectClass the AspectJ aspect class;public void addAspect(Class aspectClass) {_		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		MetadataAwareAspectInstanceFactory instanceFactory = createAspectInstanceFactory(am, aspectClass, aspectName)__		addAdvisorsFromAspectInstanceFactory(instanceFactory)__	};add,an,aspect,of,the,supplied,type,to,the,end,of,the,advice,chain,param,aspect,class,the,aspect,j,aspect,class;public,void,add,aspect,class,aspect,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,create,aspect,instance,factory,am,aspect,class,aspect,name,add,advisors,from,aspect,instance,factory,instance,factory
AspectJProxyFactory -> public void addAspect(Object aspectInstance);1328020251;Add the supplied aspect instance to the chain. The type of the aspect instance_supplied must be a singleton aspect. True singleton lifecycle is not honoured when_using this method - the caller is responsible for managing the lifecycle of any_aspects added in this way._@param aspectInstance the AspectJ aspect instance;public void addAspect(Object aspectInstance) {_		Class aspectClass = aspectInstance.getClass()__		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) {_			throw new IllegalArgumentException(_					"Aspect class [" + aspectClass.getName() + "] does not define a singleton aspect")__		}_		addAdvisorsFromAspectInstanceFactory(_				new SingletonMetadataAwareAspectInstanceFactory(aspectInstance, aspectName))__	};add,the,supplied,aspect,instance,to,the,chain,the,type,of,the,aspect,instance,supplied,must,be,a,singleton,aspect,true,singleton,lifecycle,is,not,honoured,when,using,this,method,the,caller,is,responsible,for,managing,the,lifecycle,of,any,aspects,added,in,this,way,param,aspect,instance,the,aspect,j,aspect,instance;public,void,add,aspect,object,aspect,instance,class,aspect,class,aspect,instance,get,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,throw,new,illegal,argument,exception,aspect,class,aspect,class,get,name,does,not,define,a,singleton,aspect,add,advisors,from,aspect,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,aspect,instance,aspect,name
AspectJProxyFactory -> public void addAspect(Object aspectInstance);1355313310;Add the supplied aspect instance to the chain. The type of the aspect instance_supplied must be a singleton aspect. True singleton lifecycle is not honoured when_using this method - the caller is responsible for managing the lifecycle of any_aspects added in this way._@param aspectInstance the AspectJ aspect instance;public void addAspect(Object aspectInstance) {_		Class aspectClass = aspectInstance.getClass()__		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) {_			throw new IllegalArgumentException(_					"Aspect class [" + aspectClass.getName() + "] does not define a singleton aspect")__		}_		addAdvisorsFromAspectInstanceFactory(_				new SingletonMetadataAwareAspectInstanceFactory(aspectInstance, aspectName))__	};add,the,supplied,aspect,instance,to,the,chain,the,type,of,the,aspect,instance,supplied,must,be,a,singleton,aspect,true,singleton,lifecycle,is,not,honoured,when,using,this,method,the,caller,is,responsible,for,managing,the,lifecycle,of,any,aspects,added,in,this,way,param,aspect,instance,the,aspect,j,aspect,instance;public,void,add,aspect,object,aspect,instance,class,aspect,class,aspect,instance,get,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,throw,new,illegal,argument,exception,aspect,class,aspect,class,get,name,does,not,define,a,singleton,aspect,add,advisors,from,aspect,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,aspect,instance,aspect,name
AspectJProxyFactory -> public void addAspect(Object aspectInstance);1356735495;Add the supplied aspect instance to the chain. The type of the aspect instance_supplied must be a singleton aspect. True singleton lifecycle is not honoured when_using this method - the caller is responsible for managing the lifecycle of any_aspects added in this way._@param aspectInstance the AspectJ aspect instance;public void addAspect(Object aspectInstance) {_		Class aspectClass = aspectInstance.getClass()__		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) {_			throw new IllegalArgumentException(_					"Aspect class [" + aspectClass.getName() + "] does not define a singleton aspect")__		}_		addAdvisorsFromAspectInstanceFactory(_				new SingletonMetadataAwareAspectInstanceFactory(aspectInstance, aspectName))__	};add,the,supplied,aspect,instance,to,the,chain,the,type,of,the,aspect,instance,supplied,must,be,a,singleton,aspect,true,singleton,lifecycle,is,not,honoured,when,using,this,method,the,caller,is,responsible,for,managing,the,lifecycle,of,any,aspects,added,in,this,way,param,aspect,instance,the,aspect,j,aspect,instance;public,void,add,aspect,object,aspect,instance,class,aspect,class,aspect,instance,get,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,throw,new,illegal,argument,exception,aspect,class,aspect,class,get,name,does,not,define,a,singleton,aspect,add,advisors,from,aspect,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,aspect,instance,aspect,name
AspectJProxyFactory -> public void addAspect(Object aspectInstance);1385412762;Add the supplied aspect instance to the chain. The type of the aspect instance_supplied must be a singleton aspect. True singleton lifecycle is not honoured when_using this method - the caller is responsible for managing the lifecycle of any_aspects added in this way._@param aspectInstance the AspectJ aspect instance;public void addAspect(Object aspectInstance) {_		Class<?> aspectClass = aspectInstance.getClass()__		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) {_			throw new IllegalArgumentException(_					"Aspect class [" + aspectClass.getName() + "] does not define a singleton aspect")__		}_		addAdvisorsFromAspectInstanceFactory(_				new SingletonMetadataAwareAspectInstanceFactory(aspectInstance, aspectName))__	};add,the,supplied,aspect,instance,to,the,chain,the,type,of,the,aspect,instance,supplied,must,be,a,singleton,aspect,true,singleton,lifecycle,is,not,honoured,when,using,this,method,the,caller,is,responsible,for,managing,the,lifecycle,of,any,aspects,added,in,this,way,param,aspect,instance,the,aspect,j,aspect,instance;public,void,add,aspect,object,aspect,instance,class,aspect,class,aspect,instance,get,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,throw,new,illegal,argument,exception,aspect,class,aspect,class,get,name,does,not,define,a,singleton,aspect,add,advisors,from,aspect,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,aspect,instance,aspect,name
AspectJProxyFactory -> public void addAspect(Object aspectInstance);1426267113;Add the supplied aspect instance to the chain. The type of the aspect instance_supplied must be a singleton aspect. True singleton lifecycle is not honoured when_using this method - the caller is responsible for managing the lifecycle of any_aspects added in this way._@param aspectInstance the AspectJ aspect instance;public void addAspect(Object aspectInstance) {_		Class<?> aspectClass = aspectInstance.getClass()__		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) {_			throw new IllegalArgumentException(_					"Aspect class [" + aspectClass.getName() + "] does not define a singleton aspect")__		}_		addAdvisorsFromAspectInstanceFactory(_				new SingletonMetadataAwareAspectInstanceFactory(aspectInstance, aspectName))__	};add,the,supplied,aspect,instance,to,the,chain,the,type,of,the,aspect,instance,supplied,must,be,a,singleton,aspect,true,singleton,lifecycle,is,not,honoured,when,using,this,method,the,caller,is,responsible,for,managing,the,lifecycle,of,any,aspects,added,in,this,way,param,aspect,instance,the,aspect,j,aspect,instance;public,void,add,aspect,object,aspect,instance,class,aspect,class,aspect,instance,get,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,throw,new,illegal,argument,exception,aspect,class,aspect,class,get,name,does,not,define,a,singleton,aspect,add,advisors,from,aspect,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,aspect,instance,aspect,name
AspectJProxyFactory -> public void addAspect(Object aspectInstance);1441703603;Add the supplied aspect instance to the chain. The type of the aspect instance_supplied must be a singleton aspect. True singleton lifecycle is not honoured when_using this method - the caller is responsible for managing the lifecycle of any_aspects added in this way._@param aspectInstance the AspectJ aspect instance;public void addAspect(Object aspectInstance) {_		Class<?> aspectClass = aspectInstance.getClass()__		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) {_			throw new IllegalArgumentException(_					"Aspect class [" + aspectClass.getName() + "] does not define a singleton aspect")__		}_		addAdvisorsFromAspectInstanceFactory(_				new SingletonMetadataAwareAspectInstanceFactory(aspectInstance, aspectName))__	};add,the,supplied,aspect,instance,to,the,chain,the,type,of,the,aspect,instance,supplied,must,be,a,singleton,aspect,true,singleton,lifecycle,is,not,honoured,when,using,this,method,the,caller,is,responsible,for,managing,the,lifecycle,of,any,aspects,added,in,this,way,param,aspect,instance,the,aspect,j,aspect,instance;public,void,add,aspect,object,aspect,instance,class,aspect,class,aspect,instance,get,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,throw,new,illegal,argument,exception,aspect,class,aspect,class,get,name,does,not,define,a,singleton,aspect,add,advisors,from,aspect,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,aspect,instance,aspect,name
AspectJProxyFactory -> public void addAspect(Object aspectInstance);1467730834;Add the supplied aspect instance to the chain. The type of the aspect instance_supplied must be a singleton aspect. True singleton lifecycle is not honoured when_using this method - the caller is responsible for managing the lifecycle of any_aspects added in this way._@param aspectInstance the AspectJ aspect instance;public void addAspect(Object aspectInstance) {_		Class<?> aspectClass = aspectInstance.getClass()__		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) {_			throw new IllegalArgumentException(_					"Aspect class [" + aspectClass.getName() + "] does not define a singleton aspect")__		}_		addAdvisorsFromAspectInstanceFactory(_				new SingletonMetadataAwareAspectInstanceFactory(aspectInstance, aspectName))__	};add,the,supplied,aspect,instance,to,the,chain,the,type,of,the,aspect,instance,supplied,must,be,a,singleton,aspect,true,singleton,lifecycle,is,not,honoured,when,using,this,method,the,caller,is,responsible,for,managing,the,lifecycle,of,any,aspects,added,in,this,way,param,aspect,instance,the,aspect,j,aspect,instance;public,void,add,aspect,object,aspect,instance,class,aspect,class,aspect,instance,get,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,throw,new,illegal,argument,exception,aspect,class,aspect,class,get,name,does,not,define,a,singleton,aspect,add,advisors,from,aspect,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,aspect,instance,aspect,name
AspectJProxyFactory -> public void addAspect(Object aspectInstance);1468948866;Add the supplied aspect instance to the chain. The type of the aspect instance_supplied must be a singleton aspect. True singleton lifecycle is not honoured when_using this method - the caller is responsible for managing the lifecycle of any_aspects added in this way._@param aspectInstance the AspectJ aspect instance;public void addAspect(Object aspectInstance) {_		Class<?> aspectClass = aspectInstance.getClass()__		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) {_			throw new IllegalArgumentException(_					"Aspect class [" + aspectClass.getName() + "] does not define a singleton aspect")__		}_		addAdvisorsFromAspectInstanceFactory(_				new SingletonMetadataAwareAspectInstanceFactory(aspectInstance, aspectName))__	};add,the,supplied,aspect,instance,to,the,chain,the,type,of,the,aspect,instance,supplied,must,be,a,singleton,aspect,true,singleton,lifecycle,is,not,honoured,when,using,this,method,the,caller,is,responsible,for,managing,the,lifecycle,of,any,aspects,added,in,this,way,param,aspect,instance,the,aspect,j,aspect,instance;public,void,add,aspect,object,aspect,instance,class,aspect,class,aspect,instance,get,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,throw,new,illegal,argument,exception,aspect,class,aspect,class,get,name,does,not,define,a,singleton,aspect,add,advisors,from,aspect,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,aspect,instance,aspect,name
AspectJProxyFactory -> public void addAspect(Object aspectInstance);1482422404;Add the supplied aspect instance to the chain. The type of the aspect instance_supplied must be a singleton aspect. True singleton lifecycle is not honoured when_using this method - the caller is responsible for managing the lifecycle of any_aspects added in this way._@param aspectInstance the AspectJ aspect instance;public void addAspect(Object aspectInstance) {_		Class<?> aspectClass = aspectInstance.getClass()__		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) {_			throw new IllegalArgumentException(_					"Aspect class [" + aspectClass.getName() + "] does not define a singleton aspect")__		}_		addAdvisorsFromAspectInstanceFactory(_				new SingletonMetadataAwareAspectInstanceFactory(aspectInstance, aspectName))__	};add,the,supplied,aspect,instance,to,the,chain,the,type,of,the,aspect,instance,supplied,must,be,a,singleton,aspect,true,singleton,lifecycle,is,not,honoured,when,using,this,method,the,caller,is,responsible,for,managing,the,lifecycle,of,any,aspects,added,in,this,way,param,aspect,instance,the,aspect,j,aspect,instance;public,void,add,aspect,object,aspect,instance,class,aspect,class,aspect,instance,get,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,throw,new,illegal,argument,exception,aspect,class,aspect,class,get,name,does,not,define,a,singleton,aspect,add,advisors,from,aspect,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,aspect,instance,aspect,name
AspectJProxyFactory -> public void addAspect(Object aspectInstance);1496837955;Add the supplied aspect instance to the chain. The type of the aspect instance_supplied must be a singleton aspect. True singleton lifecycle is not honoured when_using this method - the caller is responsible for managing the lifecycle of any_aspects added in this way._@param aspectInstance the AspectJ aspect instance;public void addAspect(Object aspectInstance) {_		Class<?> aspectClass = aspectInstance.getClass()__		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) {_			throw new IllegalArgumentException(_					"Aspect class [" + aspectClass.getName() + "] does not define a singleton aspect")__		}_		addAdvisorsFromAspectInstanceFactory(_				new SingletonMetadataAwareAspectInstanceFactory(aspectInstance, aspectName))__	};add,the,supplied,aspect,instance,to,the,chain,the,type,of,the,aspect,instance,supplied,must,be,a,singleton,aspect,true,singleton,lifecycle,is,not,honoured,when,using,this,method,the,caller,is,responsible,for,managing,the,lifecycle,of,any,aspects,added,in,this,way,param,aspect,instance,the,aspect,j,aspect,instance;public,void,add,aspect,object,aspect,instance,class,aspect,class,aspect,instance,get,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,throw,new,illegal,argument,exception,aspect,class,aspect,class,get,name,does,not,define,a,singleton,aspect,add,advisors,from,aspect,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,aspect,instance,aspect,name
AspectJProxyFactory -> public void addAspect(Object aspectInstance);1519772955;Add the supplied aspect instance to the chain. The type of the aspect instance_supplied must be a singleton aspect. True singleton lifecycle is not honoured when_using this method - the caller is responsible for managing the lifecycle of any_aspects added in this way._@param aspectInstance the AspectJ aspect instance;public void addAspect(Object aspectInstance) {_		Class<?> aspectClass = aspectInstance.getClass()__		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) {_			throw new IllegalArgumentException(_					"Aspect class [" + aspectClass.getName() + "] does not define a singleton aspect")__		}_		addAdvisorsFromAspectInstanceFactory(_				new SingletonMetadataAwareAspectInstanceFactory(aspectInstance, aspectName))__	};add,the,supplied,aspect,instance,to,the,chain,the,type,of,the,aspect,instance,supplied,must,be,a,singleton,aspect,true,singleton,lifecycle,is,not,honoured,when,using,this,method,the,caller,is,responsible,for,managing,the,lifecycle,of,any,aspects,added,in,this,way,param,aspect,instance,the,aspect,j,aspect,instance;public,void,add,aspect,object,aspect,instance,class,aspect,class,aspect,instance,get,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,throw,new,illegal,argument,exception,aspect,class,aspect,class,get,name,does,not,define,a,singleton,aspect,add,advisors,from,aspect,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,aspect,instance,aspect,name
AspectJProxyFactory -> public void addAspect(Object aspectInstance);1530174524;Add the supplied aspect instance to the chain. The type of the aspect instance_supplied must be a singleton aspect. True singleton lifecycle is not honoured when_using this method - the caller is responsible for managing the lifecycle of any_aspects added in this way._@param aspectInstance the AspectJ aspect instance;public void addAspect(Object aspectInstance) {_		Class<?> aspectClass = aspectInstance.getClass()__		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) {_			throw new IllegalArgumentException(_					"Aspect class [" + aspectClass.getName() + "] does not define a singleton aspect")__		}_		addAdvisorsFromAspectInstanceFactory(_				new SingletonMetadataAwareAspectInstanceFactory(aspectInstance, aspectName))__	};add,the,supplied,aspect,instance,to,the,chain,the,type,of,the,aspect,instance,supplied,must,be,a,singleton,aspect,true,singleton,lifecycle,is,not,honoured,when,using,this,method,the,caller,is,responsible,for,managing,the,lifecycle,of,any,aspects,added,in,this,way,param,aspect,instance,the,aspect,j,aspect,instance;public,void,add,aspect,object,aspect,instance,class,aspect,class,aspect,instance,get,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,if,am,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,throw,new,illegal,argument,exception,aspect,class,aspect,class,get,name,does,not,define,a,singleton,aspect,add,advisors,from,aspect,instance,factory,new,singleton,metadata,aware,aspect,instance,factory,aspect,instance,aspect,name
AspectJProxyFactory -> public AspectJProxyFactory();1328020251;Create a new AspectJProxyFactory.;public AspectJProxyFactory() {_	};create,a,new,aspect,jproxy,factory;public,aspect,jproxy,factory
AspectJProxyFactory -> public AspectJProxyFactory();1355313310;Create a new AspectJProxyFactory.;public AspectJProxyFactory() {_	};create,a,new,aspect,jproxy,factory;public,aspect,jproxy,factory
AspectJProxyFactory -> public AspectJProxyFactory();1356735495;Create a new AspectJProxyFactory.;public AspectJProxyFactory() {_	};create,a,new,aspect,jproxy,factory;public,aspect,jproxy,factory
AspectJProxyFactory -> public AspectJProxyFactory();1385412762;Create a new AspectJProxyFactory.;public AspectJProxyFactory() {_	};create,a,new,aspect,jproxy,factory;public,aspect,jproxy,factory
AspectJProxyFactory -> public AspectJProxyFactory();1426267113;Create a new AspectJProxyFactory.;public AspectJProxyFactory() {_	};create,a,new,aspect,jproxy,factory;public,aspect,jproxy,factory
AspectJProxyFactory -> public AspectJProxyFactory();1441703603;Create a new AspectJProxyFactory.;public AspectJProxyFactory() {_	};create,a,new,aspect,jproxy,factory;public,aspect,jproxy,factory
AspectJProxyFactory -> public AspectJProxyFactory();1467730834;Create a new AspectJProxyFactory.;public AspectJProxyFactory() {_	};create,a,new,aspect,jproxy,factory;public,aspect,jproxy,factory
AspectJProxyFactory -> public AspectJProxyFactory();1468948866;Create a new AspectJProxyFactory.;public AspectJProxyFactory() {_	};create,a,new,aspect,jproxy,factory;public,aspect,jproxy,factory
AspectJProxyFactory -> public AspectJProxyFactory();1482422404;Create a new AspectJProxyFactory.;public AspectJProxyFactory() {_	};create,a,new,aspect,jproxy,factory;public,aspect,jproxy,factory
AspectJProxyFactory -> public AspectJProxyFactory();1496837955;Create a new AspectJProxyFactory.;public AspectJProxyFactory() {_	};create,a,new,aspect,jproxy,factory;public,aspect,jproxy,factory
AspectJProxyFactory -> public AspectJProxyFactory();1519772955;Create a new AspectJProxyFactory.;public AspectJProxyFactory() {_	};create,a,new,aspect,jproxy,factory;public,aspect,jproxy,factory
AspectJProxyFactory -> public AspectJProxyFactory();1530174524;Create a new AspectJProxyFactory.;public AspectJProxyFactory() {_	};create,a,new,aspect,jproxy,factory;public,aspect,jproxy,factory
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy(ClassLoader classLoader);1328020251;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy(ClassLoader classLoader) {_		return (T) createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,class,loader,class,loader,return,t,create,aop,proxy,get,proxy,class,loader
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy(ClassLoader classLoader);1355313310;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy(ClassLoader classLoader) {_		return (T) createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,class,loader,class,loader,return,t,create,aop,proxy,get,proxy,class,loader
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy(ClassLoader classLoader);1356735495;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy(ClassLoader classLoader) {_		return (T) createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,class,loader,class,loader,return,t,create,aop,proxy,get,proxy,class,loader
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy(ClassLoader classLoader);1385412762;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy(ClassLoader classLoader) {_		return (T) createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,class,loader,class,loader,return,t,create,aop,proxy,get,proxy,class,loader
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy(ClassLoader classLoader);1426267113;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy(ClassLoader classLoader) {_		return (T) createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,class,loader,class,loader,return,t,create,aop,proxy,get,proxy,class,loader
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy(ClassLoader classLoader);1441703603;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy(ClassLoader classLoader) {_		return (T) createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,class,loader,class,loader,return,t,create,aop,proxy,get,proxy,class,loader
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy(ClassLoader classLoader);1467730834;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy(ClassLoader classLoader) {_		return (T) createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,class,loader,class,loader,return,t,create,aop,proxy,get,proxy,class,loader
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy(ClassLoader classLoader);1468948866;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy(ClassLoader classLoader) {_		return (T) createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,class,loader,class,loader,return,t,create,aop,proxy,get,proxy,class,loader
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy(ClassLoader classLoader);1482422404;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy(ClassLoader classLoader) {_		return (T) createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,class,loader,class,loader,return,t,create,aop,proxy,get,proxy,class,loader
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy(ClassLoader classLoader);1496837955;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy(ClassLoader classLoader) {_		return (T) createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,class,loader,class,loader,return,t,create,aop,proxy,get,proxy,class,loader
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy(ClassLoader classLoader);1519772955;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy(ClassLoader classLoader) {_		return (T) createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,class,loader,class,loader,return,t,create,aop,proxy,get,proxy,class,loader
AspectJProxyFactory -> @SuppressWarnings("unchecked") 	public <T> T getProxy(ClassLoader classLoader);1530174524;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_@return the new proxy;@SuppressWarnings("unchecked")_	public <T> T getProxy(ClassLoader classLoader) {_		return (T) createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,return,the,new,proxy;suppress,warnings,unchecked,public,t,t,get,proxy,class,loader,class,loader,return,t,create,aop,proxy,get,proxy,class,loader
AspectJProxyFactory -> public AspectJProxyFactory(Class<?>... interfaces);1441703603;Create a new {@code AspectJProxyFactory}._No target, only interfaces. Must add interceptors.;public AspectJProxyFactory(Class<?>... interfaces) {_		setInterfaces(interfaces)__	};create,a,new,code,aspect,jproxy,factory,no,target,only,interfaces,must,add,interceptors;public,aspect,jproxy,factory,class,interfaces,set,interfaces,interfaces
AspectJProxyFactory -> public AspectJProxyFactory(Class<?>... interfaces);1467730834;Create a new {@code AspectJProxyFactory}._No target, only interfaces. Must add interceptors.;public AspectJProxyFactory(Class<?>... interfaces) {_		setInterfaces(interfaces)__	};create,a,new,code,aspect,jproxy,factory,no,target,only,interfaces,must,add,interceptors;public,aspect,jproxy,factory,class,interfaces,set,interfaces,interfaces
AspectJProxyFactory -> public AspectJProxyFactory(Class<?>... interfaces);1468948866;Create a new {@code AspectJProxyFactory}._No target, only interfaces. Must add interceptors.;public AspectJProxyFactory(Class<?>... interfaces) {_		setInterfaces(interfaces)__	};create,a,new,code,aspect,jproxy,factory,no,target,only,interfaces,must,add,interceptors;public,aspect,jproxy,factory,class,interfaces,set,interfaces,interfaces
AspectJProxyFactory -> public AspectJProxyFactory(Class<?>... interfaces);1482422404;Create a new {@code AspectJProxyFactory}._No target, only interfaces. Must add interceptors.;public AspectJProxyFactory(Class<?>... interfaces) {_		setInterfaces(interfaces)__	};create,a,new,code,aspect,jproxy,factory,no,target,only,interfaces,must,add,interceptors;public,aspect,jproxy,factory,class,interfaces,set,interfaces,interfaces
AspectJProxyFactory -> public AspectJProxyFactory(Class<?>... interfaces);1496837955;Create a new {@code AspectJProxyFactory}._No target, only interfaces. Must add interceptors.;public AspectJProxyFactory(Class<?>... interfaces) {_		setInterfaces(interfaces)__	};create,a,new,code,aspect,jproxy,factory,no,target,only,interfaces,must,add,interceptors;public,aspect,jproxy,factory,class,interfaces,set,interfaces,interfaces
AspectJProxyFactory -> public AspectJProxyFactory(Class<?>... interfaces);1519772955;Create a new {@code AspectJProxyFactory}._No target, only interfaces. Must add interceptors.;public AspectJProxyFactory(Class<?>... interfaces) {_		setInterfaces(interfaces)__	};create,a,new,code,aspect,jproxy,factory,no,target,only,interfaces,must,add,interceptors;public,aspect,jproxy,factory,class,interfaces,set,interfaces,interfaces
AspectJProxyFactory -> public AspectJProxyFactory(Class<?>... interfaces);1530174524;Create a new {@code AspectJProxyFactory}._No target, only interfaces. Must add interceptors.;public AspectJProxyFactory(Class<?>... interfaces) {_		setInterfaces(interfaces)__	};create,a,new,code,aspect,jproxy,factory,no,target,only,interfaces,must,add,interceptors;public,aspect,jproxy,factory,class,interfaces,set,interfaces,interfaces
AspectJProxyFactory -> public AspectJProxyFactory(Class[] interfaces);1328020251;Create a new <code>AspectJProxyFactory</code>._No target, only interfaces. Must add interceptors.;public AspectJProxyFactory(Class[] interfaces) {_		setInterfaces(interfaces)__	};create,a,new,code,aspect,jproxy,factory,code,no,target,only,interfaces,must,add,interceptors;public,aspect,jproxy,factory,class,interfaces,set,interfaces,interfaces
AspectJProxyFactory -> public AspectJProxyFactory(Class[] interfaces);1355313310;Create a new <code>AspectJProxyFactory</code>._No target, only interfaces. Must add interceptors.;public AspectJProxyFactory(Class[] interfaces) {_		setInterfaces(interfaces)__	};create,a,new,code,aspect,jproxy,factory,code,no,target,only,interfaces,must,add,interceptors;public,aspect,jproxy,factory,class,interfaces,set,interfaces,interfaces
AspectJProxyFactory -> public AspectJProxyFactory(Class[] interfaces);1356735495;Create a new {@code AspectJProxyFactory}._No target, only interfaces. Must add interceptors.;public AspectJProxyFactory(Class[] interfaces) {_		setInterfaces(interfaces)__	};create,a,new,code,aspect,jproxy,factory,no,target,only,interfaces,must,add,interceptors;public,aspect,jproxy,factory,class,interfaces,set,interfaces,interfaces
AspectJProxyFactory -> public void addAspect(Class<?> aspectClass);1385412762;Add an aspect of the supplied type to the end of the advice chain._@param aspectClass the AspectJ aspect class;public void addAspect(Class<?> aspectClass) {_		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		MetadataAwareAspectInstanceFactory instanceFactory = createAspectInstanceFactory(am, aspectClass, aspectName)__		addAdvisorsFromAspectInstanceFactory(instanceFactory)__	};add,an,aspect,of,the,supplied,type,to,the,end,of,the,advice,chain,param,aspect,class,the,aspect,j,aspect,class;public,void,add,aspect,class,aspect,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,create,aspect,instance,factory,am,aspect,class,aspect,name,add,advisors,from,aspect,instance,factory,instance,factory
AspectJProxyFactory -> public void addAspect(Class<?> aspectClass);1426267113;Add an aspect of the supplied type to the end of the advice chain._@param aspectClass the AspectJ aspect class;public void addAspect(Class<?> aspectClass) {_		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		MetadataAwareAspectInstanceFactory instanceFactory = createAspectInstanceFactory(am, aspectClass, aspectName)__		addAdvisorsFromAspectInstanceFactory(instanceFactory)__	};add,an,aspect,of,the,supplied,type,to,the,end,of,the,advice,chain,param,aspect,class,the,aspect,j,aspect,class;public,void,add,aspect,class,aspect,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,create,aspect,instance,factory,am,aspect,class,aspect,name,add,advisors,from,aspect,instance,factory,instance,factory
AspectJProxyFactory -> public void addAspect(Class<?> aspectClass);1441703603;Add an aspect of the supplied type to the end of the advice chain._@param aspectClass the AspectJ aspect class;public void addAspect(Class<?> aspectClass) {_		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		MetadataAwareAspectInstanceFactory instanceFactory = createAspectInstanceFactory(am, aspectClass, aspectName)__		addAdvisorsFromAspectInstanceFactory(instanceFactory)__	};add,an,aspect,of,the,supplied,type,to,the,end,of,the,advice,chain,param,aspect,class,the,aspect,j,aspect,class;public,void,add,aspect,class,aspect,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,create,aspect,instance,factory,am,aspect,class,aspect,name,add,advisors,from,aspect,instance,factory,instance,factory
AspectJProxyFactory -> public void addAspect(Class<?> aspectClass);1467730834;Add an aspect of the supplied type to the end of the advice chain._@param aspectClass the AspectJ aspect class;public void addAspect(Class<?> aspectClass) {_		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		MetadataAwareAspectInstanceFactory instanceFactory = createAspectInstanceFactory(am, aspectClass, aspectName)__		addAdvisorsFromAspectInstanceFactory(instanceFactory)__	};add,an,aspect,of,the,supplied,type,to,the,end,of,the,advice,chain,param,aspect,class,the,aspect,j,aspect,class;public,void,add,aspect,class,aspect,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,create,aspect,instance,factory,am,aspect,class,aspect,name,add,advisors,from,aspect,instance,factory,instance,factory
AspectJProxyFactory -> public void addAspect(Class<?> aspectClass);1468948866;Add an aspect of the supplied type to the end of the advice chain._@param aspectClass the AspectJ aspect class;public void addAspect(Class<?> aspectClass) {_		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		MetadataAwareAspectInstanceFactory instanceFactory = createAspectInstanceFactory(am, aspectClass, aspectName)__		addAdvisorsFromAspectInstanceFactory(instanceFactory)__	};add,an,aspect,of,the,supplied,type,to,the,end,of,the,advice,chain,param,aspect,class,the,aspect,j,aspect,class;public,void,add,aspect,class,aspect,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,create,aspect,instance,factory,am,aspect,class,aspect,name,add,advisors,from,aspect,instance,factory,instance,factory
AspectJProxyFactory -> public void addAspect(Class<?> aspectClass);1482422404;Add an aspect of the supplied type to the end of the advice chain._@param aspectClass the AspectJ aspect class;public void addAspect(Class<?> aspectClass) {_		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		MetadataAwareAspectInstanceFactory instanceFactory = createAspectInstanceFactory(am, aspectClass, aspectName)__		addAdvisorsFromAspectInstanceFactory(instanceFactory)__	};add,an,aspect,of,the,supplied,type,to,the,end,of,the,advice,chain,param,aspect,class,the,aspect,j,aspect,class;public,void,add,aspect,class,aspect,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,create,aspect,instance,factory,am,aspect,class,aspect,name,add,advisors,from,aspect,instance,factory,instance,factory
AspectJProxyFactory -> public void addAspect(Class<?> aspectClass);1496837955;Add an aspect of the supplied type to the end of the advice chain._@param aspectClass the AspectJ aspect class;public void addAspect(Class<?> aspectClass) {_		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		MetadataAwareAspectInstanceFactory instanceFactory = createAspectInstanceFactory(am, aspectClass, aspectName)__		addAdvisorsFromAspectInstanceFactory(instanceFactory)__	};add,an,aspect,of,the,supplied,type,to,the,end,of,the,advice,chain,param,aspect,class,the,aspect,j,aspect,class;public,void,add,aspect,class,aspect,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,create,aspect,instance,factory,am,aspect,class,aspect,name,add,advisors,from,aspect,instance,factory,instance,factory
AspectJProxyFactory -> public void addAspect(Class<?> aspectClass);1519772955;Add an aspect of the supplied type to the end of the advice chain._@param aspectClass the AspectJ aspect class;public void addAspect(Class<?> aspectClass) {_		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		MetadataAwareAspectInstanceFactory instanceFactory = createAspectInstanceFactory(am, aspectClass, aspectName)__		addAdvisorsFromAspectInstanceFactory(instanceFactory)__	};add,an,aspect,of,the,supplied,type,to,the,end,of,the,advice,chain,param,aspect,class,the,aspect,j,aspect,class;public,void,add,aspect,class,aspect,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,create,aspect,instance,factory,am,aspect,class,aspect,name,add,advisors,from,aspect,instance,factory,instance,factory
AspectJProxyFactory -> public void addAspect(Class<?> aspectClass);1530174524;Add an aspect of the supplied type to the end of the advice chain._@param aspectClass the AspectJ aspect class;public void addAspect(Class<?> aspectClass) {_		String aspectName = aspectClass.getName()__		AspectMetadata am = createAspectMetadata(aspectClass, aspectName)__		MetadataAwareAspectInstanceFactory instanceFactory = createAspectInstanceFactory(am, aspectClass, aspectName)__		addAdvisorsFromAspectInstanceFactory(instanceFactory)__	};add,an,aspect,of,the,supplied,type,to,the,end,of,the,advice,chain,param,aspect,class,the,aspect,j,aspect,class;public,void,add,aspect,class,aspect,class,string,aspect,name,aspect,class,get,name,aspect,metadata,am,create,aspect,metadata,aspect,class,aspect,name,metadata,aware,aspect,instance,factory,instance,factory,create,aspect,instance,factory,am,aspect,class,aspect,name,add,advisors,from,aspect,instance,factory,instance,factory
