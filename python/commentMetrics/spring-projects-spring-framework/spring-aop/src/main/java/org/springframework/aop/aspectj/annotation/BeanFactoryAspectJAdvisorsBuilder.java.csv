# id;timestamp;commentText;codeText;commentWords;codeWords
BeanFactoryAspectJAdvisorsBuilder -> protected boolean isEligibleBean(String beanName);1328020251;Return whether the aspect bean with the given name is eligible._@param beanName the name of the aspect bean_@return whether the bean is eligible;protected boolean isEligibleBean(String beanName) {_		return true__	};return,whether,the,aspect,bean,with,the,given,name,is,eligible,param,bean,name,the,name,of,the,aspect,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,bean,string,bean,name,return,true
BeanFactoryAspectJAdvisorsBuilder -> protected boolean isEligibleBean(String beanName);1385412762;Return whether the aspect bean with the given name is eligible._@param beanName the name of the aspect bean_@return whether the bean is eligible;protected boolean isEligibleBean(String beanName) {_		return true__	};return,whether,the,aspect,bean,with,the,given,name,is,eligible,param,bean,name,the,name,of,the,aspect,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,bean,string,bean,name,return,true
BeanFactoryAspectJAdvisorsBuilder -> protected boolean isEligibleBean(String beanName);1467730834;Return whether the aspect bean with the given name is eligible._@param beanName the name of the aspect bean_@return whether the bean is eligible;protected boolean isEligibleBean(String beanName) {_		return true__	};return,whether,the,aspect,bean,with,the,given,name,is,eligible,param,bean,name,the,name,of,the,aspect,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,bean,string,bean,name,return,true
BeanFactoryAspectJAdvisorsBuilder -> protected boolean isEligibleBean(String beanName);1482422404;Return whether the aspect bean with the given name is eligible._@param beanName the name of the aspect bean_@return whether the bean is eligible;protected boolean isEligibleBean(String beanName) {_		return true__	};return,whether,the,aspect,bean,with,the,given,name,is,eligible,param,bean,name,the,name,of,the,aspect,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,bean,string,bean,name,return,true
BeanFactoryAspectJAdvisorsBuilder -> protected boolean isEligibleBean(String beanName);1498780456;Return whether the aspect bean with the given name is eligible._@param beanName the name of the aspect bean_@return whether the bean is eligible;protected boolean isEligibleBean(String beanName) {_		return true__	};return,whether,the,aspect,bean,with,the,given,name,is,eligible,param,bean,name,the,name,of,the,aspect,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,bean,string,bean,name,return,true
BeanFactoryAspectJAdvisorsBuilder -> protected boolean isEligibleBean(String beanName);1531945062;Return whether the aspect bean with the given name is eligible._@param beanName the name of the aspect bean_@return whether the bean is eligible;protected boolean isEligibleBean(String beanName) {_		return true__	};return,whether,the,aspect,bean,with,the,given,name,is,eligible,param,bean,name,the,name,of,the,aspect,bean,return,whether,the,bean,is,eligible;protected,boolean,is,eligible,bean,string,bean,name,return,true
BeanFactoryAspectJAdvisorsBuilder -> public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory);1328020251;Create a new BeanFactoryAspectJAdvisorsBuilder for the given BeanFactory._@param beanFactory the ListableBeanFactory to scan;public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory) {_		this(beanFactory, new ReflectiveAspectJAdvisorFactory())__	};create,a,new,bean,factory,aspect,jadvisors,builder,for,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,scan;public,bean,factory,aspect,jadvisors,builder,listable,bean,factory,bean,factory,this,bean,factory,new,reflective,aspect,jadvisor,factory
BeanFactoryAspectJAdvisorsBuilder -> public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory);1385412762;Create a new BeanFactoryAspectJAdvisorsBuilder for the given BeanFactory._@param beanFactory the ListableBeanFactory to scan;public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory) {_		this(beanFactory, new ReflectiveAspectJAdvisorFactory())__	};create,a,new,bean,factory,aspect,jadvisors,builder,for,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,scan;public,bean,factory,aspect,jadvisors,builder,listable,bean,factory,bean,factory,this,bean,factory,new,reflective,aspect,jadvisor,factory
BeanFactoryAspectJAdvisorsBuilder -> public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory);1467730834;Create a new BeanFactoryAspectJAdvisorsBuilder for the given BeanFactory._@param beanFactory the ListableBeanFactory to scan;public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory) {_		this(beanFactory, new ReflectiveAspectJAdvisorFactory())__	};create,a,new,bean,factory,aspect,jadvisors,builder,for,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,scan;public,bean,factory,aspect,jadvisors,builder,listable,bean,factory,bean,factory,this,bean,factory,new,reflective,aspect,jadvisor,factory
BeanFactoryAspectJAdvisorsBuilder -> public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory);1482422404;Create a new BeanFactoryAspectJAdvisorsBuilder for the given BeanFactory._@param beanFactory the ListableBeanFactory to scan;public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory) {_		this(beanFactory, new ReflectiveAspectJAdvisorFactory(beanFactory))__	};create,a,new,bean,factory,aspect,jadvisors,builder,for,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,scan;public,bean,factory,aspect,jadvisors,builder,listable,bean,factory,bean,factory,this,bean,factory,new,reflective,aspect,jadvisor,factory,bean,factory
BeanFactoryAspectJAdvisorsBuilder -> public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory);1498780456;Create a new BeanFactoryAspectJAdvisorsBuilder for the given BeanFactory._@param beanFactory the ListableBeanFactory to scan;public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory) {_		this(beanFactory, new ReflectiveAspectJAdvisorFactory(beanFactory))__	};create,a,new,bean,factory,aspect,jadvisors,builder,for,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,scan;public,bean,factory,aspect,jadvisors,builder,listable,bean,factory,bean,factory,this,bean,factory,new,reflective,aspect,jadvisor,factory,bean,factory
BeanFactoryAspectJAdvisorsBuilder -> public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory);1531945062;Create a new BeanFactoryAspectJAdvisorsBuilder for the given BeanFactory._@param beanFactory the ListableBeanFactory to scan;public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory) {_		this(beanFactory, new ReflectiveAspectJAdvisorFactory(beanFactory))__	};create,a,new,bean,factory,aspect,jadvisors,builder,for,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,scan;public,bean,factory,aspect,jadvisors,builder,listable,bean,factory,bean,factory,this,bean,factory,new,reflective,aspect,jadvisor,factory,bean,factory
BeanFactoryAspectJAdvisorsBuilder -> public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory, AspectJAdvisorFactory advisorFactory);1328020251;Create a new BeanFactoryAspectJAdvisorsBuilder for the given BeanFactory._@param beanFactory the ListableBeanFactory to scan_@param advisorFactory the AspectJAdvisorFactory to build each Advisor with;public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory, AspectJAdvisorFactory advisorFactory) {_		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		Assert.notNull(advisorFactory, "AspectJAdvisorFactory must not be null")__		this.beanFactory = beanFactory__		this.advisorFactory = advisorFactory__	};create,a,new,bean,factory,aspect,jadvisors,builder,for,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,scan,param,advisor,factory,the,aspect,jadvisor,factory,to,build,each,advisor,with;public,bean,factory,aspect,jadvisors,builder,listable,bean,factory,bean,factory,aspect,jadvisor,factory,advisor,factory,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,assert,not,null,advisor,factory,aspect,jadvisor,factory,must,not,be,null,this,bean,factory,bean,factory,this,advisor,factory,advisor,factory
BeanFactoryAspectJAdvisorsBuilder -> public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory, AspectJAdvisorFactory advisorFactory);1385412762;Create a new BeanFactoryAspectJAdvisorsBuilder for the given BeanFactory._@param beanFactory the ListableBeanFactory to scan_@param advisorFactory the AspectJAdvisorFactory to build each Advisor with;public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory, AspectJAdvisorFactory advisorFactory) {_		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		Assert.notNull(advisorFactory, "AspectJAdvisorFactory must not be null")__		this.beanFactory = beanFactory__		this.advisorFactory = advisorFactory__	};create,a,new,bean,factory,aspect,jadvisors,builder,for,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,scan,param,advisor,factory,the,aspect,jadvisor,factory,to,build,each,advisor,with;public,bean,factory,aspect,jadvisors,builder,listable,bean,factory,bean,factory,aspect,jadvisor,factory,advisor,factory,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,assert,not,null,advisor,factory,aspect,jadvisor,factory,must,not,be,null,this,bean,factory,bean,factory,this,advisor,factory,advisor,factory
BeanFactoryAspectJAdvisorsBuilder -> public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory, AspectJAdvisorFactory advisorFactory);1467730834;Create a new BeanFactoryAspectJAdvisorsBuilder for the given BeanFactory._@param beanFactory the ListableBeanFactory to scan_@param advisorFactory the AspectJAdvisorFactory to build each Advisor with;public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory, AspectJAdvisorFactory advisorFactory) {_		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		Assert.notNull(advisorFactory, "AspectJAdvisorFactory must not be null")__		this.beanFactory = beanFactory__		this.advisorFactory = advisorFactory__	};create,a,new,bean,factory,aspect,jadvisors,builder,for,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,scan,param,advisor,factory,the,aspect,jadvisor,factory,to,build,each,advisor,with;public,bean,factory,aspect,jadvisors,builder,listable,bean,factory,bean,factory,aspect,jadvisor,factory,advisor,factory,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,assert,not,null,advisor,factory,aspect,jadvisor,factory,must,not,be,null,this,bean,factory,bean,factory,this,advisor,factory,advisor,factory
BeanFactoryAspectJAdvisorsBuilder -> public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory, AspectJAdvisorFactory advisorFactory);1482422404;Create a new BeanFactoryAspectJAdvisorsBuilder for the given BeanFactory._@param beanFactory the ListableBeanFactory to scan_@param advisorFactory the AspectJAdvisorFactory to build each Advisor with;public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory, AspectJAdvisorFactory advisorFactory) {_		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		Assert.notNull(advisorFactory, "AspectJAdvisorFactory must not be null")__		this.beanFactory = beanFactory__		this.advisorFactory = advisorFactory__	};create,a,new,bean,factory,aspect,jadvisors,builder,for,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,scan,param,advisor,factory,the,aspect,jadvisor,factory,to,build,each,advisor,with;public,bean,factory,aspect,jadvisors,builder,listable,bean,factory,bean,factory,aspect,jadvisor,factory,advisor,factory,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,assert,not,null,advisor,factory,aspect,jadvisor,factory,must,not,be,null,this,bean,factory,bean,factory,this,advisor,factory,advisor,factory
BeanFactoryAspectJAdvisorsBuilder -> public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory, AspectJAdvisorFactory advisorFactory);1498780456;Create a new BeanFactoryAspectJAdvisorsBuilder for the given BeanFactory._@param beanFactory the ListableBeanFactory to scan_@param advisorFactory the AspectJAdvisorFactory to build each Advisor with;public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory, AspectJAdvisorFactory advisorFactory) {_		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		Assert.notNull(advisorFactory, "AspectJAdvisorFactory must not be null")__		this.beanFactory = beanFactory__		this.advisorFactory = advisorFactory__	};create,a,new,bean,factory,aspect,jadvisors,builder,for,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,scan,param,advisor,factory,the,aspect,jadvisor,factory,to,build,each,advisor,with;public,bean,factory,aspect,jadvisors,builder,listable,bean,factory,bean,factory,aspect,jadvisor,factory,advisor,factory,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,assert,not,null,advisor,factory,aspect,jadvisor,factory,must,not,be,null,this,bean,factory,bean,factory,this,advisor,factory,advisor,factory
BeanFactoryAspectJAdvisorsBuilder -> public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory, AspectJAdvisorFactory advisorFactory);1531945062;Create a new BeanFactoryAspectJAdvisorsBuilder for the given BeanFactory._@param beanFactory the ListableBeanFactory to scan_@param advisorFactory the AspectJAdvisorFactory to build each Advisor with;public BeanFactoryAspectJAdvisorsBuilder(ListableBeanFactory beanFactory, AspectJAdvisorFactory advisorFactory) {_		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		Assert.notNull(advisorFactory, "AspectJAdvisorFactory must not be null")__		this.beanFactory = beanFactory__		this.advisorFactory = advisorFactory__	};create,a,new,bean,factory,aspect,jadvisors,builder,for,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,scan,param,advisor,factory,the,aspect,jadvisor,factory,to,build,each,advisor,with;public,bean,factory,aspect,jadvisors,builder,listable,bean,factory,bean,factory,aspect,jadvisor,factory,advisor,factory,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,assert,not,null,advisor,factory,aspect,jadvisor,factory,must,not,be,null,this,bean,factory,bean,factory,this,advisor,factory,advisor,factory
BeanFactoryAspectJAdvisorsBuilder -> public List<Advisor> buildAspectJAdvisors();1328020251;Look for AspectJ-annotated aspect beans in the current bean factory,_and return to a list of Spring AOP Advisors representing them._<p>Creates a Spring Advisor for each AspectJ advice method._@return the list of {@link org.springframework.aop.Advisor} beans_@see #isEligibleBean;public List<Advisor> buildAspectJAdvisors() {_		List<String> aspectNames = null___		synchronized (this) {_			aspectNames = this.aspectBeanNames__			if (aspectNames == null) {_				List<Advisor> advisors = new LinkedList<Advisor>()__				aspectNames = new LinkedList<String>()__				String[] beanNames =_						BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, Object.class, true, false)__				for (String beanName : beanNames) {_					if (!isEligibleBean(beanName)) {_						continue__					}_					_					_					_					Class beanType = this.beanFactory.getType(beanName)__					if (beanType == null) {_						continue__					}_					if (this.advisorFactory.isAspect(beanType)) {_						aspectNames.add(beanName)__						AspectMetadata amd = new AspectMetadata(beanType, beanName)__						if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_							MetadataAwareAspectInstanceFactory factory =_									new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)__							List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory)__							if (this.beanFactory.isSingleton(beanName)) {_								this.advisorsCache.put(beanName, classAdvisors)__							}_							else {_								this.aspectFactoryCache.put(beanName, factory)__							}_							advisors.addAll(classAdvisors)__						}_						else {_							_							if (this.beanFactory.isSingleton(beanName)) {_								throw new IllegalArgumentException("Bean with name '" + beanName +_										"' is a singleton, but aspect instantiation model is not singleton")__							}_							MetadataAwareAspectInstanceFactory factory =_									new PrototypeAspectInstanceFactory(this.beanFactory, beanName)__							this.aspectFactoryCache.put(beanName, factory)__							advisors.addAll(this.advisorFactory.getAdvisors(factory))__						}_					}_				}_				this.aspectBeanNames = aspectNames__				return advisors__			}_		}__		if (aspectNames.isEmpty()) {_			return Collections.EMPTY_LIST__		}_		List<Advisor> advisors = new LinkedList<Advisor>()__		for (String aspectName : aspectNames) {_			List<Advisor> cachedAdvisors = this.advisorsCache.get(aspectName)__			if (cachedAdvisors != null) {_				advisors.addAll(cachedAdvisors)__			}_			else {_				MetadataAwareAspectInstanceFactory factory = this.aspectFactoryCache.get(aspectName)__				advisors.addAll(this.advisorFactory.getAdvisors(factory))__			}_		}_		return advisors__	};look,for,aspect,j,annotated,aspect,beans,in,the,current,bean,factory,and,return,to,a,list,of,spring,aop,advisors,representing,them,p,creates,a,spring,advisor,for,each,aspect,j,advice,method,return,the,list,of,link,org,springframework,aop,advisor,beans,see,is,eligible,bean;public,list,advisor,build,aspect,jadvisors,list,string,aspect,names,null,synchronized,this,aspect,names,this,aspect,bean,names,if,aspect,names,null,list,advisor,advisors,new,linked,list,advisor,aspect,names,new,linked,list,string,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,object,class,true,false,for,string,bean,name,bean,names,if,is,eligible,bean,bean,name,continue,class,bean,type,this,bean,factory,get,type,bean,name,if,bean,type,null,continue,if,this,advisor,factory,is,aspect,bean,type,aspect,names,add,bean,name,aspect,metadata,amd,new,aspect,metadata,bean,type,bean,name,if,amd,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,metadata,aware,aspect,instance,factory,factory,new,bean,factory,aspect,instance,factory,this,bean,factory,bean,name,list,advisor,class,advisors,this,advisor,factory,get,advisors,factory,if,this,bean,factory,is,singleton,bean,name,this,advisors,cache,put,bean,name,class,advisors,else,this,aspect,factory,cache,put,bean,name,factory,advisors,add,all,class,advisors,else,if,this,bean,factory,is,singleton,bean,name,throw,new,illegal,argument,exception,bean,with,name,bean,name,is,a,singleton,but,aspect,instantiation,model,is,not,singleton,metadata,aware,aspect,instance,factory,factory,new,prototype,aspect,instance,factory,this,bean,factory,bean,name,this,aspect,factory,cache,put,bean,name,factory,advisors,add,all,this,advisor,factory,get,advisors,factory,this,aspect,bean,names,aspect,names,return,advisors,if,aspect,names,is,empty,return,collections,list,advisor,advisors,new,linked,list,advisor,for,string,aspect,name,aspect,names,list,advisor,cached,advisors,this,advisors,cache,get,aspect,name,if,cached,advisors,null,advisors,add,all,cached,advisors,else,metadata,aware,aspect,instance,factory,factory,this,aspect,factory,cache,get,aspect,name,advisors,add,all,this,advisor,factory,get,advisors,factory,return,advisors
BeanFactoryAspectJAdvisorsBuilder -> public List<Advisor> buildAspectJAdvisors();1385412762;Look for AspectJ-annotated aspect beans in the current bean factory,_and return to a list of Spring AOP Advisors representing them._<p>Creates a Spring Advisor for each AspectJ advice method._@return the list of {@link org.springframework.aop.Advisor} beans_@see #isEligibleBean;public List<Advisor> buildAspectJAdvisors() {_		List<String> aspectNames = null___		synchronized (this) {_			aspectNames = this.aspectBeanNames__			if (aspectNames == null) {_				List<Advisor> advisors = new LinkedList<Advisor>()__				aspectNames = new LinkedList<String>()__				String[] beanNames =_						BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, Object.class, true, false)__				for (String beanName : beanNames) {_					if (!isEligibleBean(beanName)) {_						continue__					}_					_					_					_					Class<?> beanType = this.beanFactory.getType(beanName)__					if (beanType == null) {_						continue__					}_					if (this.advisorFactory.isAspect(beanType)) {_						aspectNames.add(beanName)__						AspectMetadata amd = new AspectMetadata(beanType, beanName)__						if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_							MetadataAwareAspectInstanceFactory factory =_									new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)__							List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory)__							if (this.beanFactory.isSingleton(beanName)) {_								this.advisorsCache.put(beanName, classAdvisors)__							}_							else {_								this.aspectFactoryCache.put(beanName, factory)__							}_							advisors.addAll(classAdvisors)__						}_						else {_							_							if (this.beanFactory.isSingleton(beanName)) {_								throw new IllegalArgumentException("Bean with name '" + beanName +_										"' is a singleton, but aspect instantiation model is not singleton")__							}_							MetadataAwareAspectInstanceFactory factory =_									new PrototypeAspectInstanceFactory(this.beanFactory, beanName)__							this.aspectFactoryCache.put(beanName, factory)__							advisors.addAll(this.advisorFactory.getAdvisors(factory))__						}_					}_				}_				this.aspectBeanNames = aspectNames__				return advisors__			}_		}__		if (aspectNames.isEmpty()) {_			return Collections.emptyList()__		}_		List<Advisor> advisors = new LinkedList<Advisor>()__		for (String aspectName : aspectNames) {_			List<Advisor> cachedAdvisors = this.advisorsCache.get(aspectName)__			if (cachedAdvisors != null) {_				advisors.addAll(cachedAdvisors)__			}_			else {_				MetadataAwareAspectInstanceFactory factory = this.aspectFactoryCache.get(aspectName)__				advisors.addAll(this.advisorFactory.getAdvisors(factory))__			}_		}_		return advisors__	};look,for,aspect,j,annotated,aspect,beans,in,the,current,bean,factory,and,return,to,a,list,of,spring,aop,advisors,representing,them,p,creates,a,spring,advisor,for,each,aspect,j,advice,method,return,the,list,of,link,org,springframework,aop,advisor,beans,see,is,eligible,bean;public,list,advisor,build,aspect,jadvisors,list,string,aspect,names,null,synchronized,this,aspect,names,this,aspect,bean,names,if,aspect,names,null,list,advisor,advisors,new,linked,list,advisor,aspect,names,new,linked,list,string,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,object,class,true,false,for,string,bean,name,bean,names,if,is,eligible,bean,bean,name,continue,class,bean,type,this,bean,factory,get,type,bean,name,if,bean,type,null,continue,if,this,advisor,factory,is,aspect,bean,type,aspect,names,add,bean,name,aspect,metadata,amd,new,aspect,metadata,bean,type,bean,name,if,amd,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,metadata,aware,aspect,instance,factory,factory,new,bean,factory,aspect,instance,factory,this,bean,factory,bean,name,list,advisor,class,advisors,this,advisor,factory,get,advisors,factory,if,this,bean,factory,is,singleton,bean,name,this,advisors,cache,put,bean,name,class,advisors,else,this,aspect,factory,cache,put,bean,name,factory,advisors,add,all,class,advisors,else,if,this,bean,factory,is,singleton,bean,name,throw,new,illegal,argument,exception,bean,with,name,bean,name,is,a,singleton,but,aspect,instantiation,model,is,not,singleton,metadata,aware,aspect,instance,factory,factory,new,prototype,aspect,instance,factory,this,bean,factory,bean,name,this,aspect,factory,cache,put,bean,name,factory,advisors,add,all,this,advisor,factory,get,advisors,factory,this,aspect,bean,names,aspect,names,return,advisors,if,aspect,names,is,empty,return,collections,empty,list,list,advisor,advisors,new,linked,list,advisor,for,string,aspect,name,aspect,names,list,advisor,cached,advisors,this,advisors,cache,get,aspect,name,if,cached,advisors,null,advisors,add,all,cached,advisors,else,metadata,aware,aspect,instance,factory,factory,this,aspect,factory,cache,get,aspect,name,advisors,add,all,this,advisor,factory,get,advisors,factory,return,advisors
BeanFactoryAspectJAdvisorsBuilder -> public List<Advisor> buildAspectJAdvisors();1467730834;Look for AspectJ-annotated aspect beans in the current bean factory,_and return to a list of Spring AOP Advisors representing them._<p>Creates a Spring Advisor for each AspectJ advice method._@return the list of {@link org.springframework.aop.Advisor} beans_@see #isEligibleBean;public List<Advisor> buildAspectJAdvisors() {_		List<String> aspectNames = null___		synchronized (this) {_			aspectNames = this.aspectBeanNames__			if (aspectNames == null) {_				List<Advisor> advisors = new LinkedList<>()__				aspectNames = new LinkedList<>()__				String[] beanNames =_						BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, Object.class, true, false)__				for (String beanName : beanNames) {_					if (!isEligibleBean(beanName)) {_						continue__					}_					_					_					_					Class<?> beanType = this.beanFactory.getType(beanName)__					if (beanType == null) {_						continue__					}_					if (this.advisorFactory.isAspect(beanType)) {_						aspectNames.add(beanName)__						AspectMetadata amd = new AspectMetadata(beanType, beanName)__						if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_							MetadataAwareAspectInstanceFactory factory =_									new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)__							List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory)__							if (this.beanFactory.isSingleton(beanName)) {_								this.advisorsCache.put(beanName, classAdvisors)__							}_							else {_								this.aspectFactoryCache.put(beanName, factory)__							}_							advisors.addAll(classAdvisors)__						}_						else {_							_							if (this.beanFactory.isSingleton(beanName)) {_								throw new IllegalArgumentException("Bean with name '" + beanName +_										"' is a singleton, but aspect instantiation model is not singleton")__							}_							MetadataAwareAspectInstanceFactory factory =_									new PrototypeAspectInstanceFactory(this.beanFactory, beanName)__							this.aspectFactoryCache.put(beanName, factory)__							advisors.addAll(this.advisorFactory.getAdvisors(factory))__						}_					}_				}_				this.aspectBeanNames = aspectNames__				return advisors__			}_		}__		if (aspectNames.isEmpty()) {_			return Collections.emptyList()__		}_		List<Advisor> advisors = new LinkedList<>()__		for (String aspectName : aspectNames) {_			List<Advisor> cachedAdvisors = this.advisorsCache.get(aspectName)__			if (cachedAdvisors != null) {_				advisors.addAll(cachedAdvisors)__			}_			else {_				MetadataAwareAspectInstanceFactory factory = this.aspectFactoryCache.get(aspectName)__				advisors.addAll(this.advisorFactory.getAdvisors(factory))__			}_		}_		return advisors__	};look,for,aspect,j,annotated,aspect,beans,in,the,current,bean,factory,and,return,to,a,list,of,spring,aop,advisors,representing,them,p,creates,a,spring,advisor,for,each,aspect,j,advice,method,return,the,list,of,link,org,springframework,aop,advisor,beans,see,is,eligible,bean;public,list,advisor,build,aspect,jadvisors,list,string,aspect,names,null,synchronized,this,aspect,names,this,aspect,bean,names,if,aspect,names,null,list,advisor,advisors,new,linked,list,aspect,names,new,linked,list,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,object,class,true,false,for,string,bean,name,bean,names,if,is,eligible,bean,bean,name,continue,class,bean,type,this,bean,factory,get,type,bean,name,if,bean,type,null,continue,if,this,advisor,factory,is,aspect,bean,type,aspect,names,add,bean,name,aspect,metadata,amd,new,aspect,metadata,bean,type,bean,name,if,amd,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,metadata,aware,aspect,instance,factory,factory,new,bean,factory,aspect,instance,factory,this,bean,factory,bean,name,list,advisor,class,advisors,this,advisor,factory,get,advisors,factory,if,this,bean,factory,is,singleton,bean,name,this,advisors,cache,put,bean,name,class,advisors,else,this,aspect,factory,cache,put,bean,name,factory,advisors,add,all,class,advisors,else,if,this,bean,factory,is,singleton,bean,name,throw,new,illegal,argument,exception,bean,with,name,bean,name,is,a,singleton,but,aspect,instantiation,model,is,not,singleton,metadata,aware,aspect,instance,factory,factory,new,prototype,aspect,instance,factory,this,bean,factory,bean,name,this,aspect,factory,cache,put,bean,name,factory,advisors,add,all,this,advisor,factory,get,advisors,factory,this,aspect,bean,names,aspect,names,return,advisors,if,aspect,names,is,empty,return,collections,empty,list,list,advisor,advisors,new,linked,list,for,string,aspect,name,aspect,names,list,advisor,cached,advisors,this,advisors,cache,get,aspect,name,if,cached,advisors,null,advisors,add,all,cached,advisors,else,metadata,aware,aspect,instance,factory,factory,this,aspect,factory,cache,get,aspect,name,advisors,add,all,this,advisor,factory,get,advisors,factory,return,advisors
BeanFactoryAspectJAdvisorsBuilder -> public List<Advisor> buildAspectJAdvisors();1482422404;Look for AspectJ-annotated aspect beans in the current bean factory,_and return to a list of Spring AOP Advisors representing them._<p>Creates a Spring Advisor for each AspectJ advice method._@return the list of {@link org.springframework.aop.Advisor} beans_@see #isEligibleBean;public List<Advisor> buildAspectJAdvisors() {_		List<String> aspectNames = this.aspectBeanNames___		if (aspectNames == null) {_			synchronized (this) {_				aspectNames = this.aspectBeanNames__				if (aspectNames == null) {_					List<Advisor> advisors = new LinkedList<>()__					aspectNames = new LinkedList<>()__					String[] beanNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(_							this.beanFactory, Object.class, true, false)__					for (String beanName : beanNames) {_						if (!isEligibleBean(beanName)) {_							continue__						}_						_						_						Class<?> beanType = this.beanFactory.getType(beanName)__						if (beanType == null) {_							continue__						}_						if (this.advisorFactory.isAspect(beanType)) {_							aspectNames.add(beanName)__							AspectMetadata amd = new AspectMetadata(beanType, beanName)__							if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_								MetadataAwareAspectInstanceFactory factory =_										new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)__								List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory)__								if (this.beanFactory.isSingleton(beanName)) {_									this.advisorsCache.put(beanName, classAdvisors)__								}_								else {_									this.aspectFactoryCache.put(beanName, factory)__								}_								advisors.addAll(classAdvisors)__							}_							else {_								_								if (this.beanFactory.isSingleton(beanName)) {_									throw new IllegalArgumentException("Bean with name '" + beanName +_											"' is a singleton, but aspect instantiation model is not singleton")__								}_								MetadataAwareAspectInstanceFactory factory =_										new PrototypeAspectInstanceFactory(this.beanFactory, beanName)__								this.aspectFactoryCache.put(beanName, factory)__								advisors.addAll(this.advisorFactory.getAdvisors(factory))__							}_						}_					}_					this.aspectBeanNames = aspectNames__					return advisors__				}_			}_		}__		if (aspectNames.isEmpty()) {_			return Collections.emptyList()__		}_		List<Advisor> advisors = new LinkedList<>()__		for (String aspectName : aspectNames) {_			List<Advisor> cachedAdvisors = this.advisorsCache.get(aspectName)__			if (cachedAdvisors != null) {_				advisors.addAll(cachedAdvisors)__			}_			else {_				MetadataAwareAspectInstanceFactory factory = this.aspectFactoryCache.get(aspectName)__				advisors.addAll(this.advisorFactory.getAdvisors(factory))__			}_		}_		return advisors__	};look,for,aspect,j,annotated,aspect,beans,in,the,current,bean,factory,and,return,to,a,list,of,spring,aop,advisors,representing,them,p,creates,a,spring,advisor,for,each,aspect,j,advice,method,return,the,list,of,link,org,springframework,aop,advisor,beans,see,is,eligible,bean;public,list,advisor,build,aspect,jadvisors,list,string,aspect,names,this,aspect,bean,names,if,aspect,names,null,synchronized,this,aspect,names,this,aspect,bean,names,if,aspect,names,null,list,advisor,advisors,new,linked,list,aspect,names,new,linked,list,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,object,class,true,false,for,string,bean,name,bean,names,if,is,eligible,bean,bean,name,continue,class,bean,type,this,bean,factory,get,type,bean,name,if,bean,type,null,continue,if,this,advisor,factory,is,aspect,bean,type,aspect,names,add,bean,name,aspect,metadata,amd,new,aspect,metadata,bean,type,bean,name,if,amd,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,metadata,aware,aspect,instance,factory,factory,new,bean,factory,aspect,instance,factory,this,bean,factory,bean,name,list,advisor,class,advisors,this,advisor,factory,get,advisors,factory,if,this,bean,factory,is,singleton,bean,name,this,advisors,cache,put,bean,name,class,advisors,else,this,aspect,factory,cache,put,bean,name,factory,advisors,add,all,class,advisors,else,if,this,bean,factory,is,singleton,bean,name,throw,new,illegal,argument,exception,bean,with,name,bean,name,is,a,singleton,but,aspect,instantiation,model,is,not,singleton,metadata,aware,aspect,instance,factory,factory,new,prototype,aspect,instance,factory,this,bean,factory,bean,name,this,aspect,factory,cache,put,bean,name,factory,advisors,add,all,this,advisor,factory,get,advisors,factory,this,aspect,bean,names,aspect,names,return,advisors,if,aspect,names,is,empty,return,collections,empty,list,list,advisor,advisors,new,linked,list,for,string,aspect,name,aspect,names,list,advisor,cached,advisors,this,advisors,cache,get,aspect,name,if,cached,advisors,null,advisors,add,all,cached,advisors,else,metadata,aware,aspect,instance,factory,factory,this,aspect,factory,cache,get,aspect,name,advisors,add,all,this,advisor,factory,get,advisors,factory,return,advisors
BeanFactoryAspectJAdvisorsBuilder -> public List<Advisor> buildAspectJAdvisors();1498780456;Look for AspectJ-annotated aspect beans in the current bean factory,_and return to a list of Spring AOP Advisors representing them._<p>Creates a Spring Advisor for each AspectJ advice method._@return the list of {@link org.springframework.aop.Advisor} beans_@see #isEligibleBean;public List<Advisor> buildAspectJAdvisors() {_		List<String> aspectNames = this.aspectBeanNames___		if (aspectNames == null) {_			synchronized (this) {_				aspectNames = this.aspectBeanNames__				if (aspectNames == null) {_					List<Advisor> advisors = new LinkedList<>()__					aspectNames = new LinkedList<>()__					String[] beanNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(_							this.beanFactory, Object.class, true, false)__					for (String beanName : beanNames) {_						if (!isEligibleBean(beanName)) {_							continue__						}_						_						_						Class<?> beanType = this.beanFactory.getType(beanName)__						if (beanType == null) {_							continue__						}_						if (this.advisorFactory.isAspect(beanType)) {_							aspectNames.add(beanName)__							AspectMetadata amd = new AspectMetadata(beanType, beanName)__							if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_								MetadataAwareAspectInstanceFactory factory =_										new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)__								List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory)__								if (this.beanFactory.isSingleton(beanName)) {_									this.advisorsCache.put(beanName, classAdvisors)__								}_								else {_									this.aspectFactoryCache.put(beanName, factory)__								}_								advisors.addAll(classAdvisors)__							}_							else {_								_								if (this.beanFactory.isSingleton(beanName)) {_									throw new IllegalArgumentException("Bean with name '" + beanName +_											"' is a singleton, but aspect instantiation model is not singleton")__								}_								MetadataAwareAspectInstanceFactory factory =_										new PrototypeAspectInstanceFactory(this.beanFactory, beanName)__								this.aspectFactoryCache.put(beanName, factory)__								advisors.addAll(this.advisorFactory.getAdvisors(factory))__							}_						}_					}_					this.aspectBeanNames = aspectNames__					return advisors__				}_			}_		}__		if (aspectNames.isEmpty()) {_			return Collections.emptyList()__		}_		List<Advisor> advisors = new LinkedList<>()__		for (String aspectName : aspectNames) {_			List<Advisor> cachedAdvisors = this.advisorsCache.get(aspectName)__			if (cachedAdvisors != null) {_				advisors.addAll(cachedAdvisors)__			}_			else {_				MetadataAwareAspectInstanceFactory factory = this.aspectFactoryCache.get(aspectName)__				advisors.addAll(this.advisorFactory.getAdvisors(factory))__			}_		}_		return advisors__	};look,for,aspect,j,annotated,aspect,beans,in,the,current,bean,factory,and,return,to,a,list,of,spring,aop,advisors,representing,them,p,creates,a,spring,advisor,for,each,aspect,j,advice,method,return,the,list,of,link,org,springframework,aop,advisor,beans,see,is,eligible,bean;public,list,advisor,build,aspect,jadvisors,list,string,aspect,names,this,aspect,bean,names,if,aspect,names,null,synchronized,this,aspect,names,this,aspect,bean,names,if,aspect,names,null,list,advisor,advisors,new,linked,list,aspect,names,new,linked,list,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,object,class,true,false,for,string,bean,name,bean,names,if,is,eligible,bean,bean,name,continue,class,bean,type,this,bean,factory,get,type,bean,name,if,bean,type,null,continue,if,this,advisor,factory,is,aspect,bean,type,aspect,names,add,bean,name,aspect,metadata,amd,new,aspect,metadata,bean,type,bean,name,if,amd,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,metadata,aware,aspect,instance,factory,factory,new,bean,factory,aspect,instance,factory,this,bean,factory,bean,name,list,advisor,class,advisors,this,advisor,factory,get,advisors,factory,if,this,bean,factory,is,singleton,bean,name,this,advisors,cache,put,bean,name,class,advisors,else,this,aspect,factory,cache,put,bean,name,factory,advisors,add,all,class,advisors,else,if,this,bean,factory,is,singleton,bean,name,throw,new,illegal,argument,exception,bean,with,name,bean,name,is,a,singleton,but,aspect,instantiation,model,is,not,singleton,metadata,aware,aspect,instance,factory,factory,new,prototype,aspect,instance,factory,this,bean,factory,bean,name,this,aspect,factory,cache,put,bean,name,factory,advisors,add,all,this,advisor,factory,get,advisors,factory,this,aspect,bean,names,aspect,names,return,advisors,if,aspect,names,is,empty,return,collections,empty,list,list,advisor,advisors,new,linked,list,for,string,aspect,name,aspect,names,list,advisor,cached,advisors,this,advisors,cache,get,aspect,name,if,cached,advisors,null,advisors,add,all,cached,advisors,else,metadata,aware,aspect,instance,factory,factory,this,aspect,factory,cache,get,aspect,name,advisors,add,all,this,advisor,factory,get,advisors,factory,return,advisors
BeanFactoryAspectJAdvisorsBuilder -> public List<Advisor> buildAspectJAdvisors();1531945062;Look for AspectJ-annotated aspect beans in the current bean factory,_and return to a list of Spring AOP Advisors representing them._<p>Creates a Spring Advisor for each AspectJ advice method._@return the list of {@link org.springframework.aop.Advisor} beans_@see #isEligibleBean;public List<Advisor> buildAspectJAdvisors() {_		List<String> aspectNames = this.aspectBeanNames___		if (aspectNames == null) {_			synchronized (this) {_				aspectNames = this.aspectBeanNames__				if (aspectNames == null) {_					List<Advisor> advisors = new ArrayList<>()__					aspectNames = new ArrayList<>()__					String[] beanNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(_							this.beanFactory, Object.class, true, false)__					for (String beanName : beanNames) {_						if (!isEligibleBean(beanName)) {_							continue__						}_						_						_						Class<?> beanType = this.beanFactory.getType(beanName)__						if (beanType == null) {_							continue__						}_						if (this.advisorFactory.isAspect(beanType)) {_							aspectNames.add(beanName)__							AspectMetadata amd = new AspectMetadata(beanType, beanName)__							if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {_								MetadataAwareAspectInstanceFactory factory =_										new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)__								List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory)__								if (this.beanFactory.isSingleton(beanName)) {_									this.advisorsCache.put(beanName, classAdvisors)__								}_								else {_									this.aspectFactoryCache.put(beanName, factory)__								}_								advisors.addAll(classAdvisors)__							}_							else {_								_								if (this.beanFactory.isSingleton(beanName)) {_									throw new IllegalArgumentException("Bean with name '" + beanName +_											"' is a singleton, but aspect instantiation model is not singleton")__								}_								MetadataAwareAspectInstanceFactory factory =_										new PrototypeAspectInstanceFactory(this.beanFactory, beanName)__								this.aspectFactoryCache.put(beanName, factory)__								advisors.addAll(this.advisorFactory.getAdvisors(factory))__							}_						}_					}_					this.aspectBeanNames = aspectNames__					return advisors__				}_			}_		}__		if (aspectNames.isEmpty()) {_			return Collections.emptyList()__		}_		List<Advisor> advisors = new ArrayList<>()__		for (String aspectName : aspectNames) {_			List<Advisor> cachedAdvisors = this.advisorsCache.get(aspectName)__			if (cachedAdvisors != null) {_				advisors.addAll(cachedAdvisors)__			}_			else {_				MetadataAwareAspectInstanceFactory factory = this.aspectFactoryCache.get(aspectName)__				advisors.addAll(this.advisorFactory.getAdvisors(factory))__			}_		}_		return advisors__	};look,for,aspect,j,annotated,aspect,beans,in,the,current,bean,factory,and,return,to,a,list,of,spring,aop,advisors,representing,them,p,creates,a,spring,advisor,for,each,aspect,j,advice,method,return,the,list,of,link,org,springframework,aop,advisor,beans,see,is,eligible,bean;public,list,advisor,build,aspect,jadvisors,list,string,aspect,names,this,aspect,bean,names,if,aspect,names,null,synchronized,this,aspect,names,this,aspect,bean,names,if,aspect,names,null,list,advisor,advisors,new,array,list,aspect,names,new,array,list,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,object,class,true,false,for,string,bean,name,bean,names,if,is,eligible,bean,bean,name,continue,class,bean,type,this,bean,factory,get,type,bean,name,if,bean,type,null,continue,if,this,advisor,factory,is,aspect,bean,type,aspect,names,add,bean,name,aspect,metadata,amd,new,aspect,metadata,bean,type,bean,name,if,amd,get,aj,type,get,per,clause,get,kind,per,clause,kind,singleton,metadata,aware,aspect,instance,factory,factory,new,bean,factory,aspect,instance,factory,this,bean,factory,bean,name,list,advisor,class,advisors,this,advisor,factory,get,advisors,factory,if,this,bean,factory,is,singleton,bean,name,this,advisors,cache,put,bean,name,class,advisors,else,this,aspect,factory,cache,put,bean,name,factory,advisors,add,all,class,advisors,else,if,this,bean,factory,is,singleton,bean,name,throw,new,illegal,argument,exception,bean,with,name,bean,name,is,a,singleton,but,aspect,instantiation,model,is,not,singleton,metadata,aware,aspect,instance,factory,factory,new,prototype,aspect,instance,factory,this,bean,factory,bean,name,this,aspect,factory,cache,put,bean,name,factory,advisors,add,all,this,advisor,factory,get,advisors,factory,this,aspect,bean,names,aspect,names,return,advisors,if,aspect,names,is,empty,return,collections,empty,list,list,advisor,advisors,new,array,list,for,string,aspect,name,aspect,names,list,advisor,cached,advisors,this,advisors,cache,get,aspect,name,if,cached,advisors,null,advisors,add,all,cached,advisors,else,metadata,aware,aspect,instance,factory,factory,this,aspect,factory,cache,get,aspect,name,advisors,add,all,this,advisor,factory,get,advisors,factory,return,advisors
