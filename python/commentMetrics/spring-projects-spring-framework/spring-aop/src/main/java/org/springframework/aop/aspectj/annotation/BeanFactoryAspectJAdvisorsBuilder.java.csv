commented;modifiers;parameterAmount;loc;comment;code
true;public;0;71;/**  * Look for AspectJ-annotated aspect beans in the current bean factory,  * and return to a list of Spring AOP Advisors representing them.  * <p>Creates a Spring Advisor for each AspectJ advice method.  * @return the list of {@link org.springframework.aop.Advisor} beans  * @see #isEligibleBean  */ ;/**  * Look for AspectJ-annotated aspect beans in the current bean factory,  * and return to a list of Spring AOP Advisors representing them.  * <p>Creates a Spring Advisor for each AspectJ advice method.  * @return the list of {@link org.springframework.aop.Advisor} beans  * @see #isEligibleBean  */ public List<Advisor> buildAspectJAdvisors() {     List<String> aspectNames = this.aspectBeanNames.     if (aspectNames == null) {         synchronized (this) {             aspectNames = this.aspectBeanNames.             if (aspectNames == null) {                 List<Advisor> advisors = new ArrayList<>().                 aspectNames = new ArrayList<>().                 String[] beanNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, Object.class, true, false).                 for (String beanName : beanNames) {                     if (!isEligibleBean(beanName)) {                         continue.                     }                     // We must be careful not to instantiate beans eagerly as in this case they                     // would be cached by the Spring container but would not have been weaved.                     Class<?> beanType = this.beanFactory.getType(beanName).                     if (beanType == null) {                         continue.                     }                     if (this.advisorFactory.isAspect(beanType)) {                         aspectNames.add(beanName).                         AspectMetadata amd = new AspectMetadata(beanType, beanName).                         if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {                             MetadataAwareAspectInstanceFactory factory = new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName).                             List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory).                             if (this.beanFactory.isSingleton(beanName)) {                                 this.advisorsCache.put(beanName, classAdvisors).                             } else {                                 this.aspectFactoryCache.put(beanName, factory).                             }                             advisors.addAll(classAdvisors).                         } else {                             // Per target or per this.                             if (this.beanFactory.isSingleton(beanName)) {                                 throw new IllegalArgumentException("Bean with name '" + beanName + "' is a singleton, but aspect instantiation model is not singleton").                             }                             MetadataAwareAspectInstanceFactory factory = new PrototypeAspectInstanceFactory(this.beanFactory, beanName).                             this.aspectFactoryCache.put(beanName, factory).                             advisors.addAll(this.advisorFactory.getAdvisors(factory)).                         }                     }                 }                 this.aspectBeanNames = aspectNames.                 return advisors.             }         }     }     if (aspectNames.isEmpty()) {         return Collections.emptyList().     }     List<Advisor> advisors = new ArrayList<>().     for (String aspectName : aspectNames) {         List<Advisor> cachedAdvisors = this.advisorsCache.get(aspectName).         if (cachedAdvisors != null) {             advisors.addAll(cachedAdvisors).         } else {             MetadataAwareAspectInstanceFactory factory = this.aspectFactoryCache.get(aspectName).             advisors.addAll(this.advisorFactory.getAdvisors(factory)).         }     }     return advisors. }
true;protected;1;3;/**  * Return whether the aspect bean with the given name is eligible.  * @param beanName the name of the aspect bean  * @return whether the bean is eligible  */ ;/**  * Return whether the aspect bean with the given name is eligible.  * @param beanName the name of the aspect bean  * @return whether the bean is eligible  */ protected boolean isEligibleBean(String beanName) {     return true. }
