# id;timestamp;commentText;codeText;commentWords;codeWords
DelegatePerTargetObjectIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1328020251;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatePerTargetObjectIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1356735495;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatePerTargetObjectIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1357119239;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatePerTargetObjectIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1368482696;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatePerTargetObjectIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1385412762;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatePerTargetObjectIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1385423968;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatePerTargetObjectIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1467730834;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatePerTargetObjectIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1468948866;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatePerTargetObjectIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1500416137;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatePerTargetObjectIntroductionInterceptor -> @Override 	public Object invoke(MethodInvocation mi) throws Throwable;1356735495;Subclasses may need to override this if they want to perform custom_behaviour in around advice. However, subclasses should invoke this_method, which handles introduced interfaces and forwarding to the target.;@Override_	public Object invoke(MethodInvocation mi) throws Throwable {_		if (isMethodOnIntroducedInterface(mi)) {_			Object delegate = getIntroductionDelegateFor(mi.getThis())___			_			_			_			Object retVal = AopUtils.invokeJoinpointUsingReflection(delegate, mi.getMethod(), mi.getArguments())___			_			_			if (retVal == delegate && mi instanceof ProxyMethodInvocation) {_				retVal = ((ProxyMethodInvocation) mi).getProxy()__			}_			return retVal__		}__		return doProceed(mi)__	};subclasses,may,need,to,override,this,if,they,want,to,perform,custom,behaviour,in,around,advice,however,subclasses,should,invoke,this,method,which,handles,introduced,interfaces,and,forwarding,to,the,target;override,public,object,invoke,method,invocation,mi,throws,throwable,if,is,method,on,introduced,interface,mi,object,delegate,get,introduction,delegate,for,mi,get,this,object,ret,val,aop,utils,invoke,joinpoint,using,reflection,delegate,mi,get,method,mi,get,arguments,if,ret,val,delegate,mi,instanceof,proxy,method,invocation,ret,val,proxy,method,invocation,mi,get,proxy,return,ret,val,return,do,proceed,mi
DelegatePerTargetObjectIntroductionInterceptor -> @Override 	public Object invoke(MethodInvocation mi) throws Throwable;1368482696;Subclasses may need to override this if they want to perform custom_behaviour in around advice. However, subclasses should invoke this_method, which handles introduced interfaces and forwarding to the target.;@Override_	public Object invoke(MethodInvocation mi) throws Throwable {_		if (isMethodOnIntroducedInterface(mi)) {_			Object delegate = getIntroductionDelegateFor(mi.getThis())___			_			_			_			Object retVal = AopUtils.invokeJoinpointUsingReflection(delegate, mi.getMethod(), mi.getArguments())___			_			_			if (retVal == delegate && mi instanceof ProxyMethodInvocation) {_				retVal = ((ProxyMethodInvocation) mi).getProxy()__			}_			return retVal__		}__		return doProceed(mi)__	};subclasses,may,need,to,override,this,if,they,want,to,perform,custom,behaviour,in,around,advice,however,subclasses,should,invoke,this,method,which,handles,introduced,interfaces,and,forwarding,to,the,target;override,public,object,invoke,method,invocation,mi,throws,throwable,if,is,method,on,introduced,interface,mi,object,delegate,get,introduction,delegate,for,mi,get,this,object,ret,val,aop,utils,invoke,joinpoint,using,reflection,delegate,mi,get,method,mi,get,arguments,if,ret,val,delegate,mi,instanceof,proxy,method,invocation,ret,val,proxy,method,invocation,mi,get,proxy,return,ret,val,return,do,proceed,mi
DelegatePerTargetObjectIntroductionInterceptor -> @Override 	public Object invoke(MethodInvocation mi) throws Throwable;1385412762;Subclasses may need to override this if they want to perform custom_behaviour in around advice. However, subclasses should invoke this_method, which handles introduced interfaces and forwarding to the target.;@Override_	public Object invoke(MethodInvocation mi) throws Throwable {_		if (isMethodOnIntroducedInterface(mi)) {_			Object delegate = getIntroductionDelegateFor(mi.getThis())___			_			_			_			Object retVal = AopUtils.invokeJoinpointUsingReflection(delegate, mi.getMethod(), mi.getArguments())___			_			_			if (retVal == delegate && mi instanceof ProxyMethodInvocation) {_				retVal = ((ProxyMethodInvocation) mi).getProxy()__			}_			return retVal__		}__		return doProceed(mi)__	};subclasses,may,need,to,override,this,if,they,want,to,perform,custom,behaviour,in,around,advice,however,subclasses,should,invoke,this,method,which,handles,introduced,interfaces,and,forwarding,to,the,target;override,public,object,invoke,method,invocation,mi,throws,throwable,if,is,method,on,introduced,interface,mi,object,delegate,get,introduction,delegate,for,mi,get,this,object,ret,val,aop,utils,invoke,joinpoint,using,reflection,delegate,mi,get,method,mi,get,arguments,if,ret,val,delegate,mi,instanceof,proxy,method,invocation,ret,val,proxy,method,invocation,mi,get,proxy,return,ret,val,return,do,proceed,mi
DelegatePerTargetObjectIntroductionInterceptor -> @Override 	public Object invoke(MethodInvocation mi) throws Throwable;1385423968;Subclasses may need to override this if they want to perform custom_behaviour in around advice. However, subclasses should invoke this_method, which handles introduced interfaces and forwarding to the target.;@Override_	public Object invoke(MethodInvocation mi) throws Throwable {_		if (isMethodOnIntroducedInterface(mi)) {_			Object delegate = getIntroductionDelegateFor(mi.getThis())___			_			_			_			Object retVal = AopUtils.invokeJoinpointUsingReflection(delegate, mi.getMethod(), mi.getArguments())___			_			_			if (retVal == delegate && mi instanceof ProxyMethodInvocation) {_				retVal = ((ProxyMethodInvocation) mi).getProxy()__			}_			return retVal__		}__		return doProceed(mi)__	};subclasses,may,need,to,override,this,if,they,want,to,perform,custom,behaviour,in,around,advice,however,subclasses,should,invoke,this,method,which,handles,introduced,interfaces,and,forwarding,to,the,target;override,public,object,invoke,method,invocation,mi,throws,throwable,if,is,method,on,introduced,interface,mi,object,delegate,get,introduction,delegate,for,mi,get,this,object,ret,val,aop,utils,invoke,joinpoint,using,reflection,delegate,mi,get,method,mi,get,arguments,if,ret,val,delegate,mi,instanceof,proxy,method,invocation,ret,val,proxy,method,invocation,mi,get,proxy,return,ret,val,return,do,proceed,mi
DelegatePerTargetObjectIntroductionInterceptor -> @Override 	public Object invoke(MethodInvocation mi) throws Throwable;1467730834;Subclasses may need to override this if they want to perform custom_behaviour in around advice. However, subclasses should invoke this_method, which handles introduced interfaces and forwarding to the target.;@Override_	public Object invoke(MethodInvocation mi) throws Throwable {_		if (isMethodOnIntroducedInterface(mi)) {_			Object delegate = getIntroductionDelegateFor(mi.getThis())___			_			_			_			Object retVal = AopUtils.invokeJoinpointUsingReflection(delegate, mi.getMethod(), mi.getArguments())___			_			_			if (retVal == delegate && mi instanceof ProxyMethodInvocation) {_				retVal = ((ProxyMethodInvocation) mi).getProxy()__			}_			return retVal__		}__		return doProceed(mi)__	};subclasses,may,need,to,override,this,if,they,want,to,perform,custom,behaviour,in,around,advice,however,subclasses,should,invoke,this,method,which,handles,introduced,interfaces,and,forwarding,to,the,target;override,public,object,invoke,method,invocation,mi,throws,throwable,if,is,method,on,introduced,interface,mi,object,delegate,get,introduction,delegate,for,mi,get,this,object,ret,val,aop,utils,invoke,joinpoint,using,reflection,delegate,mi,get,method,mi,get,arguments,if,ret,val,delegate,mi,instanceof,proxy,method,invocation,ret,val,proxy,method,invocation,mi,get,proxy,return,ret,val,return,do,proceed,mi
DelegatePerTargetObjectIntroductionInterceptor -> @Override 	public Object invoke(MethodInvocation mi) throws Throwable;1468948866;Subclasses may need to override this if they want to perform custom_behaviour in around advice. However, subclasses should invoke this_method, which handles introduced interfaces and forwarding to the target.;@Override_	public Object invoke(MethodInvocation mi) throws Throwable {_		if (isMethodOnIntroducedInterface(mi)) {_			Object delegate = getIntroductionDelegateFor(mi.getThis())___			_			_			_			Object retVal = AopUtils.invokeJoinpointUsingReflection(delegate, mi.getMethod(), mi.getArguments())___			_			_			if (retVal == delegate && mi instanceof ProxyMethodInvocation) {_				retVal = ((ProxyMethodInvocation) mi).getProxy()__			}_			return retVal__		}__		return doProceed(mi)__	};subclasses,may,need,to,override,this,if,they,want,to,perform,custom,behaviour,in,around,advice,however,subclasses,should,invoke,this,method,which,handles,introduced,interfaces,and,forwarding,to,the,target;override,public,object,invoke,method,invocation,mi,throws,throwable,if,is,method,on,introduced,interface,mi,object,delegate,get,introduction,delegate,for,mi,get,this,object,ret,val,aop,utils,invoke,joinpoint,using,reflection,delegate,mi,get,method,mi,get,arguments,if,ret,val,delegate,mi,instanceof,proxy,method,invocation,ret,val,proxy,method,invocation,mi,get,proxy,return,ret,val,return,do,proceed,mi
DelegatePerTargetObjectIntroductionInterceptor -> public Object invoke(MethodInvocation mi) throws Throwable;1328020251;Subclasses may need to override this if they want to perform custom_behaviour in around advice. However, subclasses should invoke this_method, which handles introduced interfaces and forwarding to the target.;public Object invoke(MethodInvocation mi) throws Throwable {_		if (isMethodOnIntroducedInterface(mi)) {_			Object delegate = getIntroductionDelegateFor(mi.getThis())__			_			_			_			_			Object retVal = AopUtils.invokeJoinpointUsingReflection(delegate, mi.getMethod(), mi.getArguments())__			_			_			_			if (retVal == delegate && mi instanceof ProxyMethodInvocation) {_				retVal = ((ProxyMethodInvocation) mi).getProxy()__			}_			return retVal__		}__		return doProceed(mi)__	};subclasses,may,need,to,override,this,if,they,want,to,perform,custom,behaviour,in,around,advice,however,subclasses,should,invoke,this,method,which,handles,introduced,interfaces,and,forwarding,to,the,target;public,object,invoke,method,invocation,mi,throws,throwable,if,is,method,on,introduced,interface,mi,object,delegate,get,introduction,delegate,for,mi,get,this,object,ret,val,aop,utils,invoke,joinpoint,using,reflection,delegate,mi,get,method,mi,get,arguments,if,ret,val,delegate,mi,instanceof,proxy,method,invocation,ret,val,proxy,method,invocation,mi,get,proxy,return,ret,val,return,do,proceed,mi
DelegatePerTargetObjectIntroductionInterceptor -> public Object invoke(MethodInvocation mi) throws Throwable;1357119239;Subclasses may need to override this if they want to perform custom_behaviour in around advice. However, subclasses should invoke this_method, which handles introduced interfaces and forwarding to the target.;public Object invoke(MethodInvocation mi) throws Throwable {_		if (isMethodOnIntroducedInterface(mi)) {_			Object delegate = getIntroductionDelegateFor(mi.getThis())___			_			_			_			Object retVal = AopUtils.invokeJoinpointUsingReflection(delegate, mi.getMethod(), mi.getArguments())___			_			_			if (retVal == delegate && mi instanceof ProxyMethodInvocation) {_				retVal = ((ProxyMethodInvocation) mi).getProxy()__			}_			return retVal__		}__		return doProceed(mi)__	};subclasses,may,need,to,override,this,if,they,want,to,perform,custom,behaviour,in,around,advice,however,subclasses,should,invoke,this,method,which,handles,introduced,interfaces,and,forwarding,to,the,target;public,object,invoke,method,invocation,mi,throws,throwable,if,is,method,on,introduced,interface,mi,object,delegate,get,introduction,delegate,for,mi,get,this,object,ret,val,aop,utils,invoke,joinpoint,using,reflection,delegate,mi,get,method,mi,get,arguments,if,ret,val,delegate,mi,instanceof,proxy,method,invocation,ret,val,proxy,method,invocation,mi,get,proxy,return,ret,val,return,do,proceed,mi
