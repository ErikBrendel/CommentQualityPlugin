commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isBeforeAdvice() {     return false. }
false;public;0;4;;@Override public boolean isAfterAdvice() {     return true. }
false;public;1;4;;@Override public void setReturningName(String name) {     setReturningNameNoCheck(name). }
false;public;4;6;;@Override public void afterReturning(@Nullable Object returnValue, Method method, Object[] args, @Nullable Object target) throws Throwable {     if (shouldInvokeOnReturnValueOf(method, returnValue)) {         invokeAdviceMethod(getJoinPointMatch(), returnValue, null).     } }
true;private;2;8;/**  * Following AspectJ semantics, if a returning clause was specified, then the  * advice is only invoked if the returned value is an instance of the given  * returning type and generic type parameters, if any, match the assignment  * rules. If the returning type is Object, the advice is *always* invoked.  * @param returnValue the return value of the target method  * @return whether to invoke the advice method for the given return value  */ ;/**  * Following AspectJ semantics, if a returning clause was specified, then the  * advice is only invoked if the returned value is an instance of the given  * returning type and generic type parameters, if any, match the assignment  * rules. If the returning type is Object, the advice is *always* invoked.  * @param returnValue the return value of the target method  * @return whether to invoke the advice method for the given return value  */ private boolean shouldInvokeOnReturnValueOf(Method method, @Nullable Object returnValue) {     Class<?> type = getDiscoveredReturningType().     Type genericType = getDiscoveredReturningGenericType().     // If we aren't dealing with a raw type, check if generic parameters are assignable.     return (matchesReturnValue(type, method, returnValue) && (genericType == null || genericType == type || TypeUtils.isAssignable(genericType, method.getGenericReturnType()))). }
true;private;3;11;/**  * Following AspectJ semantics, if a return value is null (or return type is void),  * then the return type of target method should be used to determine whether advice  * is invoked or not. Also, even if the return type is void, if the type of argument  * declared in the advice method is Object, then the advice must still get invoked.  * @param type the type of argument declared in advice method  * @param method the advice method  * @param returnValue the return value of the target method  * @return whether to invoke the advice method for the given return value and type  */ ;/**  * Following AspectJ semantics, if a return value is null (or return type is void),  * then the return type of target method should be used to determine whether advice  * is invoked or not. Also, even if the return type is void, if the type of argument  * declared in the advice method is Object, then the advice must still get invoked.  * @param type the type of argument declared in advice method  * @param method the advice method  * @param returnValue the return value of the target method  * @return whether to invoke the advice method for the given return value and type  */ private boolean matchesReturnValue(Class<?> type, Method method, @Nullable Object returnValue) {     if (returnValue != null) {         return ClassUtils.isAssignableValue(type, returnValue).     } else if (Object.class == type && void.class == method.getReturnType()) {         return true.     } else {         return ClassUtils.isAssignable(type, method.getReturnType()).     } }
