# id;timestamp;commentText;codeText;commentWords;codeWords
AspectJAfterReturningAdvice -> private boolean matchesReturnValue(Class<?> type, Method method, @Nullable Object returnValue);1495868221;Following AspectJ semantics, if a return value is null (or return type is void),_then the return type of target method should be used to determine whether advice_is invoked or not. Also, even if the return type is void, if the type of argument_declared in the advice method is Object, then the advice must still get invoked._@param type the type of argument declared in advice method_@param method the advice method_@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value and type;private boolean matchesReturnValue(Class<?> type, Method method, @Nullable Object returnValue) {_		if (returnValue != null) {_			return ClassUtils.isAssignableValue(type, returnValue)__		}_		else if (Object.class == type && void.class == method.getReturnType()) {_			return true__		}_		else {_			return ClassUtils.isAssignable(type, method.getReturnType())__		}_	};following,aspect,j,semantics,if,a,return,value,is,null,or,return,type,is,void,then,the,return,type,of,target,method,should,be,used,to,determine,whether,advice,is,invoked,or,not,also,even,if,the,return,type,is,void,if,the,type,of,argument,declared,in,the,advice,method,is,object,then,the,advice,must,still,get,invoked,param,type,the,type,of,argument,declared,in,advice,method,param,method,the,advice,method,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value,and,type;private,boolean,matches,return,value,class,type,method,method,nullable,object,return,value,if,return,value,null,return,class,utils,is,assignable,value,type,return,value,else,if,object,class,type,void,class,method,get,return,type,return,true,else,return,class,utils,is,assignable,type,method,get,return,type
AspectJAfterReturningAdvice -> private boolean matchesReturnValue(Class<?> type, Method method, @Nullable Object returnValue);1496242568;Following AspectJ semantics, if a return value is null (or return type is void),_then the return type of target method should be used to determine whether advice_is invoked or not. Also, even if the return type is void, if the type of argument_declared in the advice method is Object, then the advice must still get invoked._@param type the type of argument declared in advice method_@param method the advice method_@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value and type;private boolean matchesReturnValue(Class<?> type, Method method, @Nullable Object returnValue) {_		if (returnValue != null) {_			return ClassUtils.isAssignableValue(type, returnValue)__		}_		else if (Object.class == type && void.class == method.getReturnType()) {_			return true__		}_		else {_			return ClassUtils.isAssignable(type, method.getReturnType())__		}_	};following,aspect,j,semantics,if,a,return,value,is,null,or,return,type,is,void,then,the,return,type,of,target,method,should,be,used,to,determine,whether,advice,is,invoked,or,not,also,even,if,the,return,type,is,void,if,the,type,of,argument,declared,in,the,advice,method,is,object,then,the,advice,must,still,get,invoked,param,type,the,type,of,argument,declared,in,advice,method,param,method,the,advice,method,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value,and,type;private,boolean,matches,return,value,class,type,method,method,nullable,object,return,value,if,return,value,null,return,class,utils,is,assignable,value,type,return,value,else,if,object,class,type,void,class,method,get,return,type,return,true,else,return,class,utils,is,assignable,type,method,get,return,type
AspectJAfterReturningAdvice -> private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue);1328020251;Following AspectJ semantics, if a returning clause was specified, then the_advice is only invoked if the returned value is an instance of the given_returning type and generic type parameters, if any, match the assignment_rules. If the returning type is Object, the advice is *always* invoked._@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value;private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue) {_		Class type = getDiscoveredReturningType()__		Type genericType = getDiscoveredReturningGenericType()__		_		return (ClassUtils.isAssignableValue(type, returnValue) &&_				(genericType == null || genericType == type ||_						TypeUtils.isAssignable(genericType, method.getGenericReturnType())))__	};following,aspect,j,semantics,if,a,returning,clause,was,specified,then,the,advice,is,only,invoked,if,the,returned,value,is,an,instance,of,the,given,returning,type,and,generic,type,parameters,if,any,match,the,assignment,rules,if,the,returning,type,is,object,the,advice,is,always,invoked,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value;private,boolean,should,invoke,on,return,value,of,method,method,object,return,value,class,type,get,discovered,returning,type,type,generic,type,get,discovered,returning,generic,type,return,class,utils,is,assignable,value,type,return,value,generic,type,null,generic,type,type,type,utils,is,assignable,generic,type,method,get,generic,return,type
AspectJAfterReturningAdvice -> private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue);1356735495;Following AspectJ semantics, if a returning clause was specified, then the_advice is only invoked if the returned value is an instance of the given_returning type and generic type parameters, if any, match the assignment_rules. If the returning type is Object, the advice is *always* invoked._@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value;private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue) {_		Class type = getDiscoveredReturningType()__		Type genericType = getDiscoveredReturningGenericType()__		_		return (ClassUtils.isAssignableValue(type, returnValue) &&_				(genericType == null || genericType == type ||_						TypeUtils.isAssignable(genericType, method.getGenericReturnType())))__	};following,aspect,j,semantics,if,a,returning,clause,was,specified,then,the,advice,is,only,invoked,if,the,returned,value,is,an,instance,of,the,given,returning,type,and,generic,type,parameters,if,any,match,the,assignment,rules,if,the,returning,type,is,object,the,advice,is,always,invoked,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value;private,boolean,should,invoke,on,return,value,of,method,method,object,return,value,class,type,get,discovered,returning,type,type,generic,type,get,discovered,returning,generic,type,return,class,utils,is,assignable,value,type,return,value,generic,type,null,generic,type,type,type,utils,is,assignable,generic,type,method,get,generic,return,type
AspectJAfterReturningAdvice -> private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue);1357119239;Following AspectJ semantics, if a returning clause was specified, then the_advice is only invoked if the returned value is an instance of the given_returning type and generic type parameters, if any, match the assignment_rules. If the returning type is Object, the advice is *always* invoked._@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value;private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue) {_		Class type = getDiscoveredReturningType()__		Type genericType = getDiscoveredReturningGenericType()__		_		return (ClassUtils.isAssignableValue(type, returnValue) &&_				(genericType == null || genericType == type ||_						TypeUtils.isAssignable(genericType, method.getGenericReturnType())))__	};following,aspect,j,semantics,if,a,returning,clause,was,specified,then,the,advice,is,only,invoked,if,the,returned,value,is,an,instance,of,the,given,returning,type,and,generic,type,parameters,if,any,match,the,assignment,rules,if,the,returning,type,is,object,the,advice,is,always,invoked,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value;private,boolean,should,invoke,on,return,value,of,method,method,object,return,value,class,type,get,discovered,returning,type,type,generic,type,get,discovered,returning,generic,type,return,class,utils,is,assignable,value,type,return,value,generic,type,null,generic,type,type,type,utils,is,assignable,generic,type,method,get,generic,return,type
AspectJAfterReturningAdvice -> private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue);1368482696;Following AspectJ semantics, if a returning clause was specified, then the_advice is only invoked if the returned value is an instance of the given_returning type and generic type parameters, if any, match the assignment_rules. If the returning type is Object, the advice is *always* invoked._@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value;private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue) {_		Class type = getDiscoveredReturningType()__		Type genericType = getDiscoveredReturningGenericType()__		_		return (ClassUtils.isAssignableValue(type, returnValue) &&_				(genericType == null || genericType == type ||_						TypeUtils.isAssignable(genericType, method.getGenericReturnType())))__	};following,aspect,j,semantics,if,a,returning,clause,was,specified,then,the,advice,is,only,invoked,if,the,returned,value,is,an,instance,of,the,given,returning,type,and,generic,type,parameters,if,any,match,the,assignment,rules,if,the,returning,type,is,object,the,advice,is,always,invoked,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value;private,boolean,should,invoke,on,return,value,of,method,method,object,return,value,class,type,get,discovered,returning,type,type,generic,type,get,discovered,returning,generic,type,return,class,utils,is,assignable,value,type,return,value,generic,type,null,generic,type,type,type,utils,is,assignable,generic,type,method,get,generic,return,type
AspectJAfterReturningAdvice -> private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue);1380220065;Following AspectJ semantics, if a returning clause was specified, then the_advice is only invoked if the returned value is an instance of the given_returning type and generic type parameters, if any, match the assignment_rules. If the returning type is Object, the advice is *always* invoked._@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value;private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue) {_		Class<?> type = getDiscoveredReturningType()__		Type genericType = getDiscoveredReturningGenericType()__		_		return (matchesReturnValue(type, method, returnValue) &&_				(genericType == null || genericType == type ||_						TypeUtils.isAssignable(genericType, method.getGenericReturnType())))__	};following,aspect,j,semantics,if,a,returning,clause,was,specified,then,the,advice,is,only,invoked,if,the,returned,value,is,an,instance,of,the,given,returning,type,and,generic,type,parameters,if,any,match,the,assignment,rules,if,the,returning,type,is,object,the,advice,is,always,invoked,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value;private,boolean,should,invoke,on,return,value,of,method,method,object,return,value,class,type,get,discovered,returning,type,type,generic,type,get,discovered,returning,generic,type,return,matches,return,value,type,method,return,value,generic,type,null,generic,type,type,type,utils,is,assignable,generic,type,method,get,generic,return,type
AspectJAfterReturningAdvice -> private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue);1432125256;Following AspectJ semantics, if a returning clause was specified, then the_advice is only invoked if the returned value is an instance of the given_returning type and generic type parameters, if any, match the assignment_rules. If the returning type is Object, the advice is *always* invoked._@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value;private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue) {_		Class<?> type = getDiscoveredReturningType()__		Type genericType = getDiscoveredReturningGenericType()__		_		return (matchesReturnValue(type, method, returnValue) &&_				(genericType == null || genericType == type ||_						TypeUtils.isAssignable(genericType, method.getGenericReturnType())))__	};following,aspect,j,semantics,if,a,returning,clause,was,specified,then,the,advice,is,only,invoked,if,the,returned,value,is,an,instance,of,the,given,returning,type,and,generic,type,parameters,if,any,match,the,assignment,rules,if,the,returning,type,is,object,the,advice,is,always,invoked,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value;private,boolean,should,invoke,on,return,value,of,method,method,object,return,value,class,type,get,discovered,returning,type,type,generic,type,get,discovered,returning,generic,type,return,matches,return,value,type,method,return,value,generic,type,null,generic,type,type,type,utils,is,assignable,generic,type,method,get,generic,return,type
AspectJAfterReturningAdvice -> private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue);1450815633;Following AspectJ semantics, if a returning clause was specified, then the_advice is only invoked if the returned value is an instance of the given_returning type and generic type parameters, if any, match the assignment_rules. If the returning type is Object, the advice is *always* invoked._@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value;private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue) {_		Class<?> type = getDiscoveredReturningType()__		Type genericType = getDiscoveredReturningGenericType()__		_		return (matchesReturnValue(type, method, returnValue) &&_				(genericType == null || genericType == type ||_						TypeUtils.isAssignable(genericType, method.getGenericReturnType())))__	};following,aspect,j,semantics,if,a,returning,clause,was,specified,then,the,advice,is,only,invoked,if,the,returned,value,is,an,instance,of,the,given,returning,type,and,generic,type,parameters,if,any,match,the,assignment,rules,if,the,returning,type,is,object,the,advice,is,always,invoked,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value;private,boolean,should,invoke,on,return,value,of,method,method,object,return,value,class,type,get,discovered,returning,type,type,generic,type,get,discovered,returning,generic,type,return,matches,return,value,type,method,return,value,generic,type,null,generic,type,type,type,utils,is,assignable,generic,type,method,get,generic,return,type
AspectJAfterReturningAdvice -> private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue);1458843770;Following AspectJ semantics, if a returning clause was specified, then the_advice is only invoked if the returned value is an instance of the given_returning type and generic type parameters, if any, match the assignment_rules. If the returning type is Object, the advice is *always* invoked._@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value;private boolean shouldInvokeOnReturnValueOf(Method method, Object returnValue) {_		Class<?> type = getDiscoveredReturningType()__		Type genericType = getDiscoveredReturningGenericType()__		_		return (matchesReturnValue(type, method, returnValue) &&_				(genericType == null || genericType == type ||_						TypeUtils.isAssignable(genericType, method.getGenericReturnType())))__	};following,aspect,j,semantics,if,a,returning,clause,was,specified,then,the,advice,is,only,invoked,if,the,returned,value,is,an,instance,of,the,given,returning,type,and,generic,type,parameters,if,any,match,the,assignment,rules,if,the,returning,type,is,object,the,advice,is,always,invoked,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value;private,boolean,should,invoke,on,return,value,of,method,method,object,return,value,class,type,get,discovered,returning,type,type,generic,type,get,discovered,returning,generic,type,return,matches,return,value,type,method,return,value,generic,type,null,generic,type,type,type,utils,is,assignable,generic,type,method,get,generic,return,type
AspectJAfterReturningAdvice -> private boolean matchesReturnValue(Class<?> type, Method method, Object returnValue);1380220065;Following AspectJ semantics, if a return value is null (or return type is void),_then the return type of target method should be used to determine whether advice_is invoked or not. Also, even if the return type is void, if the type of argument_declared in the advice method is Object, then the advice must still get invoked._@param type the type of argument declared in advice method_@param method the advice method_@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value and type;private boolean matchesReturnValue(Class<?> type, Method method, Object returnValue) {_		if (returnValue != null) {_			return ClassUtils.isAssignableValue(type, returnValue)__		}_		else if (type.equals(Object.class) && method.getReturnType().equals(void.class)) {_			return true__		}_		else{_			return ClassUtils.isAssignable(type, method.getReturnType())__		}_	};following,aspect,j,semantics,if,a,return,value,is,null,or,return,type,is,void,then,the,return,type,of,target,method,should,be,used,to,determine,whether,advice,is,invoked,or,not,also,even,if,the,return,type,is,void,if,the,type,of,argument,declared,in,the,advice,method,is,object,then,the,advice,must,still,get,invoked,param,type,the,type,of,argument,declared,in,advice,method,param,method,the,advice,method,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value,and,type;private,boolean,matches,return,value,class,type,method,method,object,return,value,if,return,value,null,return,class,utils,is,assignable,value,type,return,value,else,if,type,equals,object,class,method,get,return,type,equals,void,class,return,true,else,return,class,utils,is,assignable,type,method,get,return,type
AspectJAfterReturningAdvice -> private boolean matchesReturnValue(Class<?> type, Method method, Object returnValue);1432125256;Following AspectJ semantics, if a return value is null (or return type is void),_then the return type of target method should be used to determine whether advice_is invoked or not. Also, even if the return type is void, if the type of argument_declared in the advice method is Object, then the advice must still get invoked._@param type the type of argument declared in advice method_@param method the advice method_@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value and type;private boolean matchesReturnValue(Class<?> type, Method method, Object returnValue) {_		if (returnValue != null) {_			return ClassUtils.isAssignableValue(type, returnValue)__		}_		else if (Object.class == type && void.class == method.getReturnType()) {_			return true__		}_		else{_			return ClassUtils.isAssignable(type, method.getReturnType())__		}_	};following,aspect,j,semantics,if,a,return,value,is,null,or,return,type,is,void,then,the,return,type,of,target,method,should,be,used,to,determine,whether,advice,is,invoked,or,not,also,even,if,the,return,type,is,void,if,the,type,of,argument,declared,in,the,advice,method,is,object,then,the,advice,must,still,get,invoked,param,type,the,type,of,argument,declared,in,advice,method,param,method,the,advice,method,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value,and,type;private,boolean,matches,return,value,class,type,method,method,object,return,value,if,return,value,null,return,class,utils,is,assignable,value,type,return,value,else,if,object,class,type,void,class,method,get,return,type,return,true,else,return,class,utils,is,assignable,type,method,get,return,type
AspectJAfterReturningAdvice -> private boolean matchesReturnValue(Class<?> type, Method method, Object returnValue);1450815633;Following AspectJ semantics, if a return value is null (or return type is void),_then the return type of target method should be used to determine whether advice_is invoked or not. Also, even if the return type is void, if the type of argument_declared in the advice method is Object, then the advice must still get invoked._@param type the type of argument declared in advice method_@param method the advice method_@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value and type;private boolean matchesReturnValue(Class<?> type, Method method, Object returnValue) {_		if (returnValue != null) {_			return ClassUtils.isAssignableValue(type, returnValue)__		}_		else if (Object.class == type && void.class == method.getReturnType()) {_			return true__		}_		else{_			return ClassUtils.isAssignable(type, method.getReturnType())__		}_	};following,aspect,j,semantics,if,a,return,value,is,null,or,return,type,is,void,then,the,return,type,of,target,method,should,be,used,to,determine,whether,advice,is,invoked,or,not,also,even,if,the,return,type,is,void,if,the,type,of,argument,declared,in,the,advice,method,is,object,then,the,advice,must,still,get,invoked,param,type,the,type,of,argument,declared,in,advice,method,param,method,the,advice,method,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value,and,type;private,boolean,matches,return,value,class,type,method,method,object,return,value,if,return,value,null,return,class,utils,is,assignable,value,type,return,value,else,if,object,class,type,void,class,method,get,return,type,return,true,else,return,class,utils,is,assignable,type,method,get,return,type
AspectJAfterReturningAdvice -> private boolean matchesReturnValue(Class<?> type, Method method, Object returnValue);1458843770;Following AspectJ semantics, if a return value is null (or return type is void),_then the return type of target method should be used to determine whether advice_is invoked or not. Also, even if the return type is void, if the type of argument_declared in the advice method is Object, then the advice must still get invoked._@param type the type of argument declared in advice method_@param method the advice method_@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value and type;private boolean matchesReturnValue(Class<?> type, Method method, Object returnValue) {_		if (returnValue != null) {_			return ClassUtils.isAssignableValue(type, returnValue)__		}_		else if (Object.class == type && void.class == method.getReturnType()) {_			return true__		}_		else {_			return ClassUtils.isAssignable(type, method.getReturnType())__		}_	};following,aspect,j,semantics,if,a,return,value,is,null,or,return,type,is,void,then,the,return,type,of,target,method,should,be,used,to,determine,whether,advice,is,invoked,or,not,also,even,if,the,return,type,is,void,if,the,type,of,argument,declared,in,the,advice,method,is,object,then,the,advice,must,still,get,invoked,param,type,the,type,of,argument,declared,in,advice,method,param,method,the,advice,method,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value,and,type;private,boolean,matches,return,value,class,type,method,method,object,return,value,if,return,value,null,return,class,utils,is,assignable,value,type,return,value,else,if,object,class,type,void,class,method,get,return,type,return,true,else,return,class,utils,is,assignable,type,method,get,return,type
AspectJAfterReturningAdvice -> private boolean shouldInvokeOnReturnValueOf(Method method, @Nullable Object returnValue);1495868221;Following AspectJ semantics, if a returning clause was specified, then the_advice is only invoked if the returned value is an instance of the given_returning type and generic type parameters, if any, match the assignment_rules. If the returning type is Object, the advice is *always* invoked._@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value;private boolean shouldInvokeOnReturnValueOf(Method method, @Nullable Object returnValue) {_		Class<?> type = getDiscoveredReturningType()__		Type genericType = getDiscoveredReturningGenericType()__		_		return (matchesReturnValue(type, method, returnValue) &&_				(genericType == null || genericType == type ||_						TypeUtils.isAssignable(genericType, method.getGenericReturnType())))__	};following,aspect,j,semantics,if,a,returning,clause,was,specified,then,the,advice,is,only,invoked,if,the,returned,value,is,an,instance,of,the,given,returning,type,and,generic,type,parameters,if,any,match,the,assignment,rules,if,the,returning,type,is,object,the,advice,is,always,invoked,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value;private,boolean,should,invoke,on,return,value,of,method,method,nullable,object,return,value,class,type,get,discovered,returning,type,type,generic,type,get,discovered,returning,generic,type,return,matches,return,value,type,method,return,value,generic,type,null,generic,type,type,type,utils,is,assignable,generic,type,method,get,generic,return,type
AspectJAfterReturningAdvice -> private boolean shouldInvokeOnReturnValueOf(Method method, @Nullable Object returnValue);1496242568;Following AspectJ semantics, if a returning clause was specified, then the_advice is only invoked if the returned value is an instance of the given_returning type and generic type parameters, if any, match the assignment_rules. If the returning type is Object, the advice is *always* invoked._@param returnValue the return value of the target method_@return whether to invoke the advice method for the given return value;private boolean shouldInvokeOnReturnValueOf(Method method, @Nullable Object returnValue) {_		Class<?> type = getDiscoveredReturningType()__		Type genericType = getDiscoveredReturningGenericType()__		_		return (matchesReturnValue(type, method, returnValue) &&_				(genericType == null || genericType == type ||_						TypeUtils.isAssignable(genericType, method.getGenericReturnType())))__	};following,aspect,j,semantics,if,a,returning,clause,was,specified,then,the,advice,is,only,invoked,if,the,returned,value,is,an,instance,of,the,given,returning,type,and,generic,type,parameters,if,any,match,the,assignment,rules,if,the,returning,type,is,object,the,advice,is,always,invoked,param,return,value,the,return,value,of,the,target,method,return,whether,to,invoke,the,advice,method,for,the,given,return,value;private,boolean,should,invoke,on,return,value,of,method,method,nullable,object,return,value,class,type,get,discovered,returning,type,type,generic,type,get,discovered,returning,generic,type,return,matches,return,value,type,method,return,value,generic,type,null,generic,type,type,type,utils,is,assignable,generic,type,method,get,generic,return,type
