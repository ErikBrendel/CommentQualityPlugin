# id;timestamp;commentText;codeText;commentWords;codeWords
SingletonMetadataAwareAspectInstanceFactory -> @Override 	protected int getOrderForAspectClass(Class<?> aspectClass);1328020251;Check whether the aspect class carries an_{@link org.springframework.core.annotation.Order} annotation,_falling back to <code>Ordered.LOWEST_PRECEDENCE</code>._@see org.springframework.core.annotation.Order;@Override_	protected int getOrderForAspectClass(Class<?> aspectClass) {_		Order order = aspectClass.getAnnotation(Order.class)__		if (order != null) {_			return order.value()__		}_		return Ordered.LOWEST_PRECEDENCE__	};check,whether,the,aspect,class,carries,an,link,org,springframework,core,annotation,order,annotation,falling,back,to,code,ordered,code,see,org,springframework,core,annotation,order;override,protected,int,get,order,for,aspect,class,class,aspect,class,order,order,aspect,class,get,annotation,order,class,if,order,null,return,order,value,return,ordered
SingletonMetadataAwareAspectInstanceFactory -> @Override 	protected int getOrderForAspectClass(Class<?> aspectClass);1356735495;Check whether the aspect class carries an_{@link org.springframework.core.annotation.Order} annotation,_falling back to {@code Ordered.LOWEST_PRECEDENCE}._@see org.springframework.core.annotation.Order;@Override_	protected int getOrderForAspectClass(Class<?> aspectClass) {_		Order order = aspectClass.getAnnotation(Order.class)__		if (order != null) {_			return order.value()__		}_		return Ordered.LOWEST_PRECEDENCE__	};check,whether,the,aspect,class,carries,an,link,org,springframework,core,annotation,order,annotation,falling,back,to,code,ordered,see,org,springframework,core,annotation,order;override,protected,int,get,order,for,aspect,class,class,aspect,class,order,order,aspect,class,get,annotation,order,class,if,order,null,return,order,value,return,ordered
SingletonMetadataAwareAspectInstanceFactory -> @Override 	protected int getOrderForAspectClass(Class<?> aspectClass);1357119239;Check whether the aspect class carries an_{@link org.springframework.core.annotation.Order} annotation,_falling back to {@code Ordered.LOWEST_PRECEDENCE}._@see org.springframework.core.annotation.Order;@Override_	protected int getOrderForAspectClass(Class<?> aspectClass) {_		Order order = aspectClass.getAnnotation(Order.class)__		if (order != null) {_			return order.value()__		}_		return Ordered.LOWEST_PRECEDENCE__	};check,whether,the,aspect,class,carries,an,link,org,springframework,core,annotation,order,annotation,falling,back,to,code,ordered,see,org,springframework,core,annotation,order;override,protected,int,get,order,for,aspect,class,class,aspect,class,order,order,aspect,class,get,annotation,order,class,if,order,null,return,order,value,return,ordered
SingletonMetadataAwareAspectInstanceFactory -> @Override 	protected int getOrderForAspectClass(Class<?> aspectClass);1368482696;Check whether the aspect class carries an_{@link org.springframework.core.annotation.Order} annotation,_falling back to {@code Ordered.LOWEST_PRECEDENCE}._@see org.springframework.core.annotation.Order;@Override_	protected int getOrderForAspectClass(Class<?> aspectClass) {_		Order order = aspectClass.getAnnotation(Order.class)__		if (order != null) {_			return order.value()__		}_		return Ordered.LOWEST_PRECEDENCE__	};check,whether,the,aspect,class,carries,an,link,org,springframework,core,annotation,order,annotation,falling,back,to,code,ordered,see,org,springframework,core,annotation,order;override,protected,int,get,order,for,aspect,class,class,aspect,class,order,order,aspect,class,get,annotation,order,class,if,order,null,return,order,value,return,ordered
SingletonMetadataAwareAspectInstanceFactory -> @Override 	protected int getOrderForAspectClass(Class<?> aspectClass);1368720356;Check whether the aspect class carries an_{@link org.springframework.core.annotation.Order} annotation,_falling back to {@code Ordered.LOWEST_PRECEDENCE}._@see org.springframework.core.annotation.Order;@Override_	protected int getOrderForAspectClass(Class<?> aspectClass) {_		Order order = AnnotationUtils.findAnnotation(aspectClass, Order.class)__		if (order != null) {_			return order.value()__		}_		return Ordered.LOWEST_PRECEDENCE__	};check,whether,the,aspect,class,carries,an,link,org,springframework,core,annotation,order,annotation,falling,back,to,code,ordered,see,org,springframework,core,annotation,order;override,protected,int,get,order,for,aspect,class,class,aspect,class,order,order,annotation,utils,find,annotation,aspect,class,order,class,if,order,null,return,order,value,return,ordered
SingletonMetadataAwareAspectInstanceFactory -> public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName);1328020251;Create a new SingletonMetadataAwareAspectInstanceFactory for the given aspect._@param aspectInstance the singleton aspect instance_@param aspectName the name of the aspect;public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName) {_		super(aspectInstance)__		this.metadata = new AspectMetadata(aspectInstance.getClass(), aspectName)__	};create,a,new,singleton,metadata,aware,aspect,instance,factory,for,the,given,aspect,param,aspect,instance,the,singleton,aspect,instance,param,aspect,name,the,name,of,the,aspect;public,singleton,metadata,aware,aspect,instance,factory,object,aspect,instance,string,aspect,name,super,aspect,instance,this,metadata,new,aspect,metadata,aspect,instance,get,class,aspect,name
SingletonMetadataAwareAspectInstanceFactory -> public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName);1356735495;Create a new SingletonMetadataAwareAspectInstanceFactory for the given aspect._@param aspectInstance the singleton aspect instance_@param aspectName the name of the aspect;public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName) {_		super(aspectInstance)__		this.metadata = new AspectMetadata(aspectInstance.getClass(), aspectName)__	};create,a,new,singleton,metadata,aware,aspect,instance,factory,for,the,given,aspect,param,aspect,instance,the,singleton,aspect,instance,param,aspect,name,the,name,of,the,aspect;public,singleton,metadata,aware,aspect,instance,factory,object,aspect,instance,string,aspect,name,super,aspect,instance,this,metadata,new,aspect,metadata,aspect,instance,get,class,aspect,name
SingletonMetadataAwareAspectInstanceFactory -> public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName);1357119239;Create a new SingletonMetadataAwareAspectInstanceFactory for the given aspect._@param aspectInstance the singleton aspect instance_@param aspectName the name of the aspect;public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName) {_		super(aspectInstance)__		this.metadata = new AspectMetadata(aspectInstance.getClass(), aspectName)__	};create,a,new,singleton,metadata,aware,aspect,instance,factory,for,the,given,aspect,param,aspect,instance,the,singleton,aspect,instance,param,aspect,name,the,name,of,the,aspect;public,singleton,metadata,aware,aspect,instance,factory,object,aspect,instance,string,aspect,name,super,aspect,instance,this,metadata,new,aspect,metadata,aspect,instance,get,class,aspect,name
SingletonMetadataAwareAspectInstanceFactory -> public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName);1368482696;Create a new SingletonMetadataAwareAspectInstanceFactory for the given aspect._@param aspectInstance the singleton aspect instance_@param aspectName the name of the aspect;public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName) {_		super(aspectInstance)__		this.metadata = new AspectMetadata(aspectInstance.getClass(), aspectName)__	};create,a,new,singleton,metadata,aware,aspect,instance,factory,for,the,given,aspect,param,aspect,instance,the,singleton,aspect,instance,param,aspect,name,the,name,of,the,aspect;public,singleton,metadata,aware,aspect,instance,factory,object,aspect,instance,string,aspect,name,super,aspect,instance,this,metadata,new,aspect,metadata,aspect,instance,get,class,aspect,name
SingletonMetadataAwareAspectInstanceFactory -> public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName);1368720356;Create a new SingletonMetadataAwareAspectInstanceFactory for the given aspect._@param aspectInstance the singleton aspect instance_@param aspectName the name of the aspect;public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName) {_		super(aspectInstance)__		this.metadata = new AspectMetadata(aspectInstance.getClass(), aspectName)__	};create,a,new,singleton,metadata,aware,aspect,instance,factory,for,the,given,aspect,param,aspect,instance,the,singleton,aspect,instance,param,aspect,name,the,name,of,the,aspect;public,singleton,metadata,aware,aspect,instance,factory,object,aspect,instance,string,aspect,name,super,aspect,instance,this,metadata,new,aspect,metadata,aspect,instance,get,class,aspect,name
SingletonMetadataAwareAspectInstanceFactory -> public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName);1396355447;Create a new SingletonMetadataAwareAspectInstanceFactory for the given aspect._@param aspectInstance the singleton aspect instance_@param aspectName the name of the aspect;public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName) {_		super(aspectInstance)__		this.metadata = new AspectMetadata(aspectInstance.getClass(), aspectName)__	};create,a,new,singleton,metadata,aware,aspect,instance,factory,for,the,given,aspect,param,aspect,instance,the,singleton,aspect,instance,param,aspect,name,the,name,of,the,aspect;public,singleton,metadata,aware,aspect,instance,factory,object,aspect,instance,string,aspect,name,super,aspect,instance,this,metadata,new,aspect,metadata,aspect,instance,get,class,aspect,name
SingletonMetadataAwareAspectInstanceFactory -> public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName);1450815633;Create a new SingletonMetadataAwareAspectInstanceFactory for the given aspect._@param aspectInstance the singleton aspect instance_@param aspectName the name of the aspect;public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName) {_		super(aspectInstance)__		this.metadata = new AspectMetadata(aspectInstance.getClass(), aspectName)__	};create,a,new,singleton,metadata,aware,aspect,instance,factory,for,the,given,aspect,param,aspect,instance,the,singleton,aspect,instance,param,aspect,name,the,name,of,the,aspect;public,singleton,metadata,aware,aspect,instance,factory,object,aspect,instance,string,aspect,name,super,aspect,instance,this,metadata,new,aspect,metadata,aspect,instance,get,class,aspect,name
SingletonMetadataAwareAspectInstanceFactory -> public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName);1462345408;Create a new SingletonMetadataAwareAspectInstanceFactory for the given aspect._@param aspectInstance the singleton aspect instance_@param aspectName the name of the aspect;public SingletonMetadataAwareAspectInstanceFactory(Object aspectInstance, String aspectName) {_		super(aspectInstance)__		this.metadata = new AspectMetadata(aspectInstance.getClass(), aspectName)__	};create,a,new,singleton,metadata,aware,aspect,instance,factory,for,the,given,aspect,param,aspect,instance,the,singleton,aspect,instance,param,aspect,name,the,name,of,the,aspect;public,singleton,metadata,aware,aspect,instance,factory,object,aspect,instance,string,aspect,name,super,aspect,instance,this,metadata,new,aspect,metadata,aspect,instance,get,class,aspect,name
