# id;timestamp;commentText;codeText;commentWords;codeWords
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1328020251;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<Advisor>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisor,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1356735495;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<Advisor>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisor,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1357119239;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<Advisor>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisor,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1368482696;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<Advisor>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisor,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1385412762;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<Advisor>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisor,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1407511029;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<Advisor>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisor,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1423726989;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<Advisor>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisor,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1426267113;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<Advisor>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisor,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1467730834;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1496242568;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1496837955;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1498780456;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1502974979;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1530174524;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1530174524;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> private List<Advisor> freshAdvisorChain();1532091916;Return an independent advisor chain._We need to do this every time a new prototype instance is returned,_to return distinct instances of prototype Advisors and Advices.;private List<Advisor> freshAdvisorChain() {_		Advisor[] advisors = getAdvisors()__		List<Advisor> freshAdvisors = new ArrayList<>(advisors.length)__		for (Advisor advisor : advisors) {_			if (advisor instanceof PrototypePlaceholderAdvisor) {_				PrototypePlaceholderAdvisor pa = (PrototypePlaceholderAdvisor) advisor__				if (logger.isDebugEnabled()) {_					logger.debug("Refreshing bean named '" + pa.getBeanName() + "'")__				}_				_				_				if (this.beanFactory == null) {_					throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_							"- cannot resolve prototype advisor '" + pa.getBeanName() + "'")__				}_				Object bean = this.beanFactory.getBean(pa.getBeanName())__				Advisor refreshedAdvisor = namedBeanToAdvisor(bean)__				freshAdvisors.add(refreshedAdvisor)__			}_			else {_				_				freshAdvisors.add(advisor)__			}_		}_		return freshAdvisors__	};return,an,independent,advisor,chain,we,need,to,do,this,every,time,a,new,prototype,instance,is,returned,to,return,distinct,instances,of,prototype,advisors,and,advices;private,list,advisor,fresh,advisor,chain,advisor,advisors,get,advisors,list,advisor,fresh,advisors,new,array,list,advisors,length,for,advisor,advisor,advisors,if,advisor,instanceof,prototype,placeholder,advisor,prototype,placeholder,advisor,pa,prototype,placeholder,advisor,advisor,if,logger,is,debug,enabled,logger,debug,refreshing,bean,named,pa,get,bean,name,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,prototype,advisor,pa,get,bean,name,object,bean,this,bean,factory,get,bean,pa,get,bean,name,advisor,refreshed,advisor,named,bean,to,advisor,bean,fresh,advisors,add,refreshed,advisor,else,fresh,advisors,add,advisor,return,fresh,advisors
ProxyFactoryBean -> @Override 	protected void adviceChanged();1328020251;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> @Override 	protected void adviceChanged();1356735495;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> @Override 	protected void adviceChanged();1357119239;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> @Override 	protected void adviceChanged();1368482696;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> @Override 	protected void adviceChanged();1385412762;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> @Override 	protected void adviceChanged();1407511029;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> @Override 	protected void adviceChanged();1423726989;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> @Override 	protected void adviceChanged();1426267113;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> @Override 	protected void adviceChanged();1467730834;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> @Override 	protected void adviceChanged();1496242568;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> @Override 	protected void adviceChanged();1496837955;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> @Override 	protected void adviceChanged();1498780456;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> @Override 	protected void adviceChanged();1502974979;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> @Override 	protected void adviceChanged();1530174524;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> @Override 	protected void adviceChanged();1530174524;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> @Override 	protected void adviceChanged();1532091916;Blow away and recache singleton on an advice change.;@Override_	protected void adviceChanged() {_		super.adviceChanged()__		if (this.singleton) {_			logger.debug("Advice has changed_ recaching singleton instance")__			synchronized (this) {_				this.singletonInstance = null__			}_		}_	};blow,away,and,recache,singleton,on,an,advice,change;override,protected,void,advice,changed,super,advice,changed,if,this,singleton,logger,debug,advice,has,changed,recaching,singleton,instance,synchronized,this,this,singleton,instance,null
ProxyFactoryBean -> public void setProxyClassLoader(ClassLoader classLoader);1328020251;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> public void setProxyClassLoader(ClassLoader classLoader);1356735495;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> public void setProxyClassLoader(ClassLoader classLoader);1357119239;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> public void setProxyClassLoader(ClassLoader classLoader);1368482696;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> public void setProxyClassLoader(ClassLoader classLoader);1385412762;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> public void setProxyClassLoader(ClassLoader classLoader);1407511029;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> public void setProxyClassLoader(ClassLoader classLoader);1423726989;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> public void setProxyClassLoader(ClassLoader classLoader);1426267113;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> public void setProxyClassLoader(ClassLoader classLoader);1467730834;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1328020251;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1356735495;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1357119239;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1368482696;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1385412762;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1407511029;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1423726989;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1426267113;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1467730834;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1496242568;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1496837955;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1498780456;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1502974979;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1530174524;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1530174524;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> public void setAutodetectInterfaces(boolean autodetectInterfaces);1532091916;Set whether to autodetect proxy interfaces if none specified._<p>Default is "true". Turn this flag off to create a CGLIB_proxy for the full target class if no interfaces specified._@see #setProxyTargetClass;public void setAutodetectInterfaces(boolean autodetectInterfaces) {_		this.autodetectInterfaces = autodetectInterfaces__	};set,whether,to,autodetect,proxy,interfaces,if,none,specified,p,default,is,true,turn,this,flag,off,to,create,a,cglib,proxy,for,the,full,target,class,if,no,interfaces,specified,see,set,proxy,target,class;public,void,set,autodetect,interfaces,boolean,autodetect,interfaces,this,autodetect,interfaces,autodetect,interfaces
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1328020251;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return <code>true</code> if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Class namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,code,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1356735495;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return {@code true} if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Class namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1357119239;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return {@code true} if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Class namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1368482696;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return {@code true} if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Class namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1385412762;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return {@code true} if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Class<?> namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1407511029;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return {@code true} if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Class<?> namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1423726989;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return {@code true} if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Class<?> namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1426267113;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return {@code true} if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Class<?> namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1467730834;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return {@code true} if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Class<?> namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1496242568;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return {@code true} if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Class<?> namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1496837955;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return {@code true} if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Class<?> namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1498780456;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return {@code true} if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Assert.state(this.beanFactory != null, "No BeanFactory set")__		Class<?> namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,assert,state,this,bean,factory,null,no,bean,factory,set,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1502974979;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return {@code true} if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Assert.state(this.beanFactory != null, "No BeanFactory set")__		Class<?> namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,assert,state,this,bean,factory,null,no,bean,factory,set,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1530174524;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return {@code true} if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Assert.state(this.beanFactory != null, "No BeanFactory set")__		Class<?> namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,assert,state,this,bean,factory,null,no,bean,factory,set,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1530174524;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return {@code true} if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Assert.state(this.beanFactory != null, "No BeanFactory set")__		Class<?> namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,assert,state,this,bean,factory,null,no,bean,factory,set,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> private boolean isNamedBeanAnAdvisorOrAdvice(String beanName);1532091916;Look at bean factory metadata to work out whether this bean name,_which concludes the interceptorNames list, is an Advisor or Advice,_or may be a target._@param beanName bean name to check_@return {@code true} if it's an Advisor or Advice;private boolean isNamedBeanAnAdvisorOrAdvice(String beanName) {_		Assert.state(this.beanFactory != null, "No BeanFactory set")__		Class<?> namedBeanClass = this.beanFactory.getType(beanName)__		if (namedBeanClass != null) {_			return (Advisor.class.isAssignableFrom(namedBeanClass) || Advice.class.isAssignableFrom(namedBeanClass))__		}_		_		if (logger.isDebugEnabled()) {_			logger.debug("Could not determine type of bean with name '" + beanName +_					"' - assuming it is neither an Advisor nor an Advice")__		}_		return false__	};look,at,bean,factory,metadata,to,work,out,whether,this,bean,name,which,concludes,the,interceptor,names,list,is,an,advisor,or,advice,or,may,be,a,target,param,bean,name,bean,name,to,check,return,code,true,if,it,s,an,advisor,or,advice;private,boolean,is,named,bean,an,advisor,or,advice,string,bean,name,assert,state,this,bean,factory,null,no,bean,factory,set,class,named,bean,class,this,bean,factory,get,type,bean,name,if,named,bean,class,null,return,advisor,class,is,assignable,from,named,bean,class,advice,class,is,assignable,from,named,bean,class,if,logger,is,debug,enabled,logger,debug,could,not,determine,type,of,bean,with,name,bean,name,assuming,it,is,neither,an,advisor,nor,an,advice,return,false
ProxyFactoryBean -> public Class<?> getObjectType();1328020251;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> public Class<?> getObjectType();1357119239;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> public void setProxyInterfaces(Class[] proxyInterfaces) throws ClassNotFoundException;1328020251;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
ProxyFactoryBean -> public void setProxyInterfaces(Class[] proxyInterfaces) throws ClassNotFoundException;1356735495;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
ProxyFactoryBean -> public void setProxyInterfaces(Class[] proxyInterfaces) throws ClassNotFoundException;1357119239;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
ProxyFactoryBean -> public void setProxyInterfaces(Class[] proxyInterfaces) throws ClassNotFoundException;1368482696;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1328020251;Create the advisor (interceptor) chain. Aadvisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,aadvisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1356735495;Create the advisor (interceptor) chain. Aadvisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,aadvisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1357119239;Create the advisor (interceptor) chain. Aadvisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,aadvisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1368482696;Create the advisor (interceptor) chain. Aadvisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,aadvisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1385412762;Create the advisor (interceptor) chain. Aadvisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,aadvisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1407511029;Create the advisor (interceptor) chain. Aadvisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,aadvisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1423726989;Create the advisor (interceptor) chain. Advisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,advisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1426267113;Create the advisor (interceptor) chain. Advisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,advisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1467730834;Create the advisor (interceptor) chain. Advisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,advisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1496242568;Create the advisor (interceptor) chain. Advisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,advisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1496837955;Create the advisor (interceptor) chain. Advisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,advisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1498780456;Create the advisor (interceptor) chain. Advisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,advisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1502974979;Create the advisor (interceptor) chain. Advisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,advisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1530174524;Create the advisor (interceptor) chain. Advisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,advisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1530174524;Create the advisor (interceptor) chain. Advisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,advisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException;1532091916;Create the advisor (interceptor) chain. Advisors that are sourced_from a BeanFactory will be refreshed each time a new prototype instance_is added. Interceptors added programmatically through the factory API_are unaffected by such changes.;private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException {_		if (this.advisorChainInitialized) {_			return__		}__		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve interceptor names " + Arrays.asList(this.interceptorNames))__			}__			_			if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(GLOBAL_SUFFIX) &&_					this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				throw new AopConfigException("Target required after globals")__			}__			_			for (String name : this.interceptorNames) {_				if (logger.isTraceEnabled()) {_					logger.trace("Configuring advisor or advice '" + name + "'")__				}__				if (name.endsWith(GLOBAL_SUFFIX)) {_					if (!(this.beanFactory instanceof ListableBeanFactory)) {_						throw new AopConfigException(_								"Can only use global advisors or interceptors with a ListableBeanFactory")__					}_					addGlobalAdvisor((ListableBeanFactory) this.beanFactory,_							name.substring(0, name.length() - GLOBAL_SUFFIX.length()))__				}__				else {_					_					_					Object advice__					if (this.singleton || this.beanFactory.isSingleton(name)) {_						_						advice = this.beanFactory.getBean(name)__					}_					else {_						_						_						advice = new PrototypePlaceholderAdvisor(name)__					}_					addAdvisorOnChainCreation(advice, name)__				}_			}_		}__		this.advisorChainInitialized = true__	};create,the,advisor,interceptor,chain,advisors,that,are,sourced,from,a,bean,factory,will,be,refreshed,each,time,a,new,prototype,instance,is,added,interceptors,added,programmatically,through,the,factory,api,are,unaffected,by,such,changes;private,synchronized,void,initialize,advisor,chain,throws,aop,config,exception,beans,exception,if,this,advisor,chain,initialized,return,if,object,utils,is,empty,this,interceptor,names,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,interceptor,names,arrays,as,list,this,interceptor,names,if,this,interceptor,names,this,interceptor,names,length,1,ends,with,this,target,name,null,this,target,source,throw,new,aop,config,exception,target,required,after,globals,for,string,name,this,interceptor,names,if,logger,is,trace,enabled,logger,trace,configuring,advisor,or,advice,name,if,name,ends,with,if,this,bean,factory,instanceof,listable,bean,factory,throw,new,aop,config,exception,can,only,use,global,advisors,or,interceptors,with,a,listable,bean,factory,add,global,advisor,listable,bean,factory,this,bean,factory,name,substring,0,name,length,length,else,object,advice,if,this,singleton,this,bean,factory,is,singleton,name,advice,this,bean,factory,get,bean,name,else,advice,new,prototype,placeholder,advisor,name,add,advisor,on,chain,creation,advice,name,this,advisor,chain,initialized,true
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1328020251;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}			_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1356735495;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1357119239;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1368482696;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1385412762;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1407511029;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1423726989;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1426267113;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1467730834;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1496242568;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1496837955;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1498780456;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1502974979;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1530174524;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1530174524;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> private void addAdvisorOnChainCreation(Object next, String name);1532091916;Invoked when advice chain is created._<p>Add the given advice, advisor or object to the interceptor list._Because of these three possibilities, we can't type the signature_more strongly._@param next advice, advisor or target object_@param name bean name from which we obtained this object in our owning_bean factory;private void addAdvisorOnChainCreation(Object next, String name) {_		_		_		Advisor advisor = namedBeanToAdvisor(next)__		if (logger.isTraceEnabled()) {_			logger.trace("Adding advisor with name '" + name + "'")__		}_		addAdvisor(advisor)__	};invoked,when,advice,chain,is,created,p,add,the,given,advice,advisor,or,object,to,the,interceptor,list,because,of,these,three,possibilities,we,can,t,type,the,signature,more,strongly,param,next,advice,advisor,or,target,object,param,name,bean,name,from,which,we,obtained,this,object,in,our,owning,bean,factory;private,void,add,advisor,on,chain,creation,object,next,string,name,advisor,advisor,named,bean,to,advisor,next,if,logger,is,trace,enabled,logger,trace,adding,advisor,with,name,name,add,advisor,advisor
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1328020251;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1356735495;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1357119239;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1368482696;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1385412762;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1407511029;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1423726989;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1426267113;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1467730834;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1496242568;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1496837955;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1498780456;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1502974979;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1530174524;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1530174524;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1532091916;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1328020251;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			copy.setInterfaces(_					ClassUtils.getAllInterfacesForClass(targetSource.getTargetClass(), this.proxyClassLoader))__		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,source,get,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1356735495;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			copy.setInterfaces(_					ClassUtils.getAllInterfacesForClass(targetSource.getTargetClass(), this.proxyClassLoader))__		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,source,get,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1357119239;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			copy.setInterfaces(_					ClassUtils.getAllInterfacesForClass(targetSource.getTargetClass(), this.proxyClassLoader))__		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,source,get,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1368482696;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			copy.setInterfaces(_					ClassUtils.getAllInterfacesForClass(targetSource.getTargetClass(), this.proxyClassLoader))__		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,source,get,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1385412762;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			copy.setInterfaces(_					ClassUtils.getAllInterfacesForClass(targetSource.getTargetClass(), this.proxyClassLoader))__		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,source,get,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1407511029;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			copy.setInterfaces(_					ClassUtils.getAllInterfacesForClass(targetSource.getTargetClass(), this.proxyClassLoader))__		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,source,get,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1423726989;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			copy.setInterfaces(_					ClassUtils.getAllInterfacesForClass(targetSource.getTargetClass(), this.proxyClassLoader))__		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,source,get,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1426267113;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			copy.setInterfaces(_					ClassUtils.getAllInterfacesForClass(targetSource.getTargetClass(), this.proxyClassLoader))__		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,source,get,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1467730834;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			copy.setInterfaces(_					ClassUtils.getAllInterfacesForClass(targetSource.getTargetClass(), this.proxyClassLoader))__		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,source,get,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1496242568;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			copy.setInterfaces(_					ClassUtils.getAllInterfacesForClass(targetSource.getTargetClass(), this.proxyClassLoader))__		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,source,get,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1496837955;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			Class<?> targetClass = targetSource.getTargetClass()__			if (targetClass != null) {_				copy.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,target,source,get,target,class,if,target,class,null,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1498780456;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			Class<?> targetClass = targetSource.getTargetClass()__			if (targetClass != null) {_				copy.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,target,source,get,target,class,if,target,class,null,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1502974979;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			Class<?> targetClass = targetSource.getTargetClass()__			if (targetClass != null) {_				copy.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,target,source,get,target,class,if,target,class,null,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1530174524;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			Class<?> targetClass = targetSource.getTargetClass()__			if (targetClass != null) {_				copy.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,target,source,get,target,class,if,target,class,null,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1530174524;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			Class<?> targetClass = targetSource.getTargetClass()__			if (targetClass != null) {_				copy.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,target,source,get,target,class,if,target,class,null,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> private synchronized Object newPrototypeInstance();1532091916;Create a new prototype instance of this class's created proxy object,_backed by an independent AdvisedSupport configuration._@return a totally independent proxy, whose advice we may manipulate in isolation;private synchronized Object newPrototypeInstance() {_		_		_		_		_		if (logger.isTraceEnabled()) {_			logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this)__		}__		ProxyCreatorSupport copy = new ProxyCreatorSupport(getAopProxyFactory())__		_		TargetSource targetSource = freshTargetSource()__		copy.copyConfigurationFrom(this, targetSource, freshAdvisorChain())__		if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_			_			Class<?> targetClass = targetSource.getTargetClass()__			if (targetClass != null) {_				copy.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_		}_		copy.setFrozen(this.freezeProxy)___		if (logger.isTraceEnabled()) {_			logger.trace("Using ProxyCreatorSupport copy: " + copy)__		}_		return getProxy(copy.createAopProxy())__	};create,a,new,prototype,instance,of,this,class,s,created,proxy,object,backed,by,an,independent,advised,support,configuration,return,a,totally,independent,proxy,whose,advice,we,may,manipulate,in,isolation;private,synchronized,object,new,prototype,instance,if,logger,is,trace,enabled,logger,trace,creating,copy,of,prototype,proxy,factory,bean,config,this,proxy,creator,support,copy,new,proxy,creator,support,get,aop,proxy,factory,target,source,target,source,fresh,target,source,copy,copy,configuration,from,this,target,source,fresh,advisor,chain,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,target,source,get,target,class,if,target,class,null,copy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,copy,set,frozen,this,freeze,proxy,if,logger,is,trace,enabled,logger,trace,using,proxy,creator,support,copy,copy,return,get,proxy,copy,create,aop,proxy
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1328020251;Return the proxy object to expose._<p>The default implementation uses a <code>getProxy</code> call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,code,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1356735495;Return the proxy object to expose._<p>The default implementation uses a {@code getProxy} call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1357119239;Return the proxy object to expose._<p>The default implementation uses a {@code getProxy} call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1368482696;Return the proxy object to expose._<p>The default implementation uses a {@code getProxy} call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1385412762;Return the proxy object to expose._<p>The default implementation uses a {@code getProxy} call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1407511029;Return the proxy object to expose._<p>The default implementation uses a {@code getProxy} call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1423726989;Return the proxy object to expose._<p>The default implementation uses a {@code getProxy} call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1426267113;Return the proxy object to expose._<p>The default implementation uses a {@code getProxy} call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1467730834;Return the proxy object to expose._<p>The default implementation uses a {@code getProxy} call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1496242568;Return the proxy object to expose._<p>The default implementation uses a {@code getProxy} call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1496837955;Return the proxy object to expose._<p>The default implementation uses a {@code getProxy} call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1498780456;Return the proxy object to expose._<p>The default implementation uses a {@code getProxy} call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1502974979;Return the proxy object to expose._<p>The default implementation uses a {@code getProxy} call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1530174524;Return the proxy object to expose._<p>The default implementation uses a {@code getProxy} call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1530174524;Return the proxy object to expose._<p>The default implementation uses a {@code getProxy} call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Object getProxy(AopProxy aopProxy);1532091916;Return the proxy object to expose._<p>The default implementation uses a {@code getProxy} call with_the factory's bean class loader. Can be overridden to specify a_custom class loader._@param aopProxy the prepared AopProxy instance to get the proxy from_@return the proxy object to expose_@see AopProxy#getProxy(ClassLoader);protected Object getProxy(AopProxy aopProxy) {_		return aopProxy.getProxy(this.proxyClassLoader)__	};return,the,proxy,object,to,expose,p,the,default,implementation,uses,a,code,get,proxy,call,with,the,factory,s,bean,class,loader,can,be,overridden,to,specify,a,custom,class,loader,param,aop,proxy,the,prepared,aop,proxy,instance,to,get,the,proxy,from,return,the,proxy,object,to,expose,see,aop,proxy,get,proxy,class,loader;protected,object,get,proxy,aop,proxy,aop,proxy,return,aop,proxy,get,proxy,this,proxy,class,loader
ProxyFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1385412762;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1407511029;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1423726989;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1426267113;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1467730834;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1496242568;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1496837955;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1498780456;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1502974979;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1530174524;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1530174524;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> protected Class<?> createCompositeInterface(Class<?>[] interfaces);1532091916;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class<?> createCompositeInterface(Class<?>[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> @Override 	@Nullable 	public Object getObject() throws BeansException;1502974979;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_{@code getObject()} for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;@Override_	@Nullable_	public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;override,nullable,public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,warn,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> @Override 	@Nullable 	public Object getObject() throws BeansException;1530174524;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_{@code getObject()} for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;@Override_	@Nullable_	public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;override,nullable,public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,warn,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> @Override 	@Nullable 	public Object getObject() throws BeansException;1530174524;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_{@code getObject()} for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;@Override_	@Nullable_	public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;override,nullable,public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,warn,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> @Override 	@Nullable 	public Object getObject() throws BeansException;1532091916;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_{@code getObject()} for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;@Override_	@Nullable_	public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.info("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;override,nullable,public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,info,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> public void setInterceptorNames(String[] interceptorNames);1328020251;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String[] interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> public void setInterceptorNames(String[] interceptorNames);1356735495;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String[] interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> public void setInterceptorNames(String[] interceptorNames);1357119239;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String[] interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> public void setInterceptorNames(String[] interceptorNames);1368482696;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String[] interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> public void setInterceptorNames(String[] interceptorNames);1385412762;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String[] interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> @Override 	public Object getObject() throws BeansException;1356735495;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_{@code getObject()} for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;@Override_	public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;override,public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,warn,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> @Override 	public Object getObject() throws BeansException;1368482696;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_{@code getObject()} for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;@Override_	public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;override,public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,warn,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> @Override 	public Object getObject() throws BeansException;1385412762;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_{@code getObject()} for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;@Override_	public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;override,public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,warn,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> @Override 	public Object getObject() throws BeansException;1407511029;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_{@code getObject()} for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;@Override_	public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;override,public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,warn,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> @Override 	public Object getObject() throws BeansException;1423726989;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_{@code getObject()} for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;@Override_	public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;override,public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,warn,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> @Override 	public Object getObject() throws BeansException;1426267113;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_{@code getObject()} for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;@Override_	public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;override,public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,warn,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> @Override 	public Object getObject() throws BeansException;1467730834;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_{@code getObject()} for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;@Override_	public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;override,public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,warn,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> @Override 	public Object getObject() throws BeansException;1496242568;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_{@code getObject()} for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;@Override_	public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;override,public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,warn,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> @Override 	public Object getObject() throws BeansException;1496837955;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_{@code getObject()} for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;@Override_	public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;override,public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,warn,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> @Override 	public Object getObject() throws BeansException;1498780456;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_{@code getObject()} for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;@Override_	public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;override,public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,warn,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> public void setInterceptorNames(String... interceptorNames);1407511029;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> public void setInterceptorNames(String... interceptorNames);1423726989;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> public void setInterceptorNames(String... interceptorNames);1426267113;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> public void setInterceptorNames(String... interceptorNames);1467730834;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> public void setInterceptorNames(String... interceptorNames);1496242568;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> public void setInterceptorNames(String... interceptorNames);1496837955;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> public void setInterceptorNames(String... interceptorNames);1498780456;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> public void setInterceptorNames(String... interceptorNames);1502974979;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> public void setInterceptorNames(String... interceptorNames);1530174524;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> public void setInterceptorNames(String... interceptorNames);1530174524;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> public void setInterceptorNames(String... interceptorNames);1532091916;Set the list of Advice/Advisor bean names. This must always be set_to use this factory bean in a bean factory._<p>The referenced beans should be of type Interceptor, Advisor or Advice_The last entry in the list can be the name of any bean in the factory._If it's neither an Advice nor an Advisor, a new SingletonTargetSource_is added to wrap it. Such a target bean cannot be used if the "target"_or "targetSource" or "targetName" property is set, in which case the_"interceptorNames" array must contain only Advice/Advisor bean names._<p><b>NOTE: Specifying a target bean as final name in the "interceptorNames"_list is deprecated and will be removed in a future Spring version.</b>_Use the {@link #setTargetName "targetName"} property instead._@see org.aopalliance.intercept.MethodInterceptor_@see org.springframework.aop.Advisor_@see org.aopalliance.aop.Advice_@see org.springframework.aop.target.SingletonTargetSource;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,list,of,advice,advisor,bean,names,this,must,always,be,set,to,use,this,factory,bean,in,a,bean,factory,p,the,referenced,beans,should,be,of,type,interceptor,advisor,or,advice,the,last,entry,in,the,list,can,be,the,name,of,any,bean,in,the,factory,if,it,s,neither,an,advice,nor,an,advisor,a,new,singleton,target,source,is,added,to,wrap,it,such,a,target,bean,cannot,be,used,if,the,target,or,target,source,or,target,name,property,is,set,in,which,case,the,interceptor,names,array,must,contain,only,advice,advisor,bean,names,p,b,note,specifying,a,target,bean,as,final,name,in,the,interceptor,names,list,is,deprecated,and,will,be,removed,in,a,future,spring,version,b,use,the,link,set,target,name,target,name,property,instead,see,org,aopalliance,intercept,method,interceptor,see,org,springframework,aop,advisor,see,org,aopalliance,aop,advice,see,org,springframework,aop,target,singleton,target,source;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
ProxyFactoryBean -> private void checkInterceptorNames();1328020251;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private void checkInterceptorNames();1356735495;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private void checkInterceptorNames();1357119239;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private void checkInterceptorNames();1368482696;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private void checkInterceptorNames();1385412762;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private void checkInterceptorNames();1407511029;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private void checkInterceptorNames();1423726989;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private void checkInterceptorNames();1426267113;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private void checkInterceptorNames();1467730834;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private void checkInterceptorNames();1496242568;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private void checkInterceptorNames();1496837955;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private void checkInterceptorNames();1498780456;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private void checkInterceptorNames();1502974979;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private void checkInterceptorNames();1530174524;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private void checkInterceptorNames();1530174524;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private void checkInterceptorNames();1532091916;Check the interceptorNames list whether it contains a target name as final element._If found, remove the final name from the list and set it as targetName.;private void checkInterceptorNames() {_		if (!ObjectUtils.isEmpty(this.interceptorNames)) {_			String finalName = this.interceptorNames[this.interceptorNames.length - 1]__			if (this.targetName == null && this.targetSource == EMPTY_TARGET_SOURCE) {_				_				_				if (!finalName.endsWith(GLOBAL_SUFFIX) && !isNamedBeanAnAdvisorOrAdvice(finalName)) {_					_					this.targetName = finalName__					if (logger.isDebugEnabled()) {_						logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " +_								"is not an advisor class: treating it as a target or TargetSource")__					}_					String[] newNames = new String[this.interceptorNames.length - 1]__					System.arraycopy(this.interceptorNames, 0, newNames, 0, newNames.length)__					this.interceptorNames = newNames__				}_			}_		}_	};check,the,interceptor,names,list,whether,it,contains,a,target,name,as,final,element,if,found,remove,the,final,name,from,the,list,and,set,it,as,target,name;private,void,check,interceptor,names,if,object,utils,is,empty,this,interceptor,names,string,final,name,this,interceptor,names,this,interceptor,names,length,1,if,this,target,name,null,this,target,source,if,final,name,ends,with,is,named,bean,an,advisor,or,advice,final,name,this,target,name,final,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,final,name,concluding,interceptor,chain,is,not,an,advisor,class,treating,it,as,a,target,or,target,source,string,new,names,new,string,this,interceptor,names,length,1,system,arraycopy,this,interceptor,names,0,new,names,0,new,names,length,this,interceptor,names,new,names
ProxyFactoryBean -> private TargetSource freshTargetSource();1328020251;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> private TargetSource freshTargetSource();1356735495;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> private TargetSource freshTargetSource();1357119239;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> private TargetSource freshTargetSource();1368482696;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> private TargetSource freshTargetSource();1385412762;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> private TargetSource freshTargetSource();1407511029;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> private TargetSource freshTargetSource();1423726989;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> private TargetSource freshTargetSource();1426267113;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> private TargetSource freshTargetSource();1467730834;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> private TargetSource freshTargetSource();1496242568;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> private TargetSource freshTargetSource();1496837955;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> private TargetSource freshTargetSource();1498780456;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> private TargetSource freshTargetSource();1502974979;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> private TargetSource freshTargetSource();1530174524;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> private TargetSource freshTargetSource();1530174524;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> private TargetSource freshTargetSource();1532091916;Return a TargetSource to use when creating a proxy. If the target was not_specified at the end of the interceptorNames list, the TargetSource will be_this class's TargetSource member. Otherwise, we get the target bean and wrap_it in a TargetSource if necessary.;private TargetSource freshTargetSource() {_		if (this.targetName == null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.")__			}_			return this.targetSource__		}_		else {_			if (this.beanFactory == null) {_				throw new IllegalStateException("No BeanFactory available anymore (probably due to serialization) " +_						"- cannot resolve target with name '" + this.targetName + "'")__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Refreshing target with name '" + this.targetName + "'")__			}_			Object target = this.beanFactory.getBean(this.targetName)__			return (target instanceof TargetSource ? (TargetSource) target : new SingletonTargetSource(target))__		}_	};return,a,target,source,to,use,when,creating,a,proxy,if,the,target,was,not,specified,at,the,end,of,the,interceptor,names,list,the,target,source,will,be,this,class,s,target,source,member,otherwise,we,get,the,target,bean,and,wrap,it,in,a,target,source,if,necessary;private,target,source,fresh,target,source,if,this,target,name,null,if,logger,is,trace,enabled,logger,trace,not,refreshing,target,bean,name,not,specified,in,interceptor,names,return,this,target,source,else,if,this,bean,factory,null,throw,new,illegal,state,exception,no,bean,factory,available,anymore,probably,due,to,serialization,cannot,resolve,target,with,name,this,target,name,if,logger,is,debug,enabled,logger,debug,refreshing,target,with,name,this,target,name,object,target,this,bean,factory,get,bean,this,target,name,return,target,instanceof,target,source,target,source,target,new,singleton,target,source,target
ProxyFactoryBean -> public Object getObject() throws BeansException;1328020251;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_<code>getObject()</code> for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,code,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,warn,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> public Object getObject() throws BeansException;1357119239;Return a proxy. Invoked when clients obtain beans from this factory bean._Create an instance of the AOP proxy to be returned by this factory._The instance will be cached for a singleton, and create on each call to_{@code getObject()} for a proxy._@return a fresh AOP proxy reflecting the current state of this factory;public Object getObject() throws BeansException {_		initializeAdvisorChain()__		if (isSingleton()) {_			return getSingletonInstance()__		}_		else {_			if (this.targetName == null) {_				logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " +_						"Enable prototype proxies by setting the 'targetName' property.")__			}_			return newPrototypeInstance()__		}_	};return,a,proxy,invoked,when,clients,obtain,beans,from,this,factory,bean,create,an,instance,of,the,aop,proxy,to,be,returned,by,this,factory,the,instance,will,be,cached,for,a,singleton,and,create,on,each,call,to,code,get,object,for,a,proxy,return,a,fresh,aop,proxy,reflecting,the,current,state,of,this,factory;public,object,get,object,throws,beans,exception,initialize,advisor,chain,if,is,singleton,return,get,singleton,instance,else,if,this,target,name,null,logger,warn,using,non,singleton,proxies,with,singleton,targets,is,often,undesirable,enable,prototype,proxies,by,setting,the,target,name,property,return,new,prototype,instance
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1328020251;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<Object>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<Object, String>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		OrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,object,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,object,string,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1356735495;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<Object>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<Object, String>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		OrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,object,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,object,string,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1357119239;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<Object>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<Object, String>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		OrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,object,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,object,string,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1368482696;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<Object>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<Object, String>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		OrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,object,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,object,string,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1385412762;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<Object>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<Object, String>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		OrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,object,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,object,string,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1407511029;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<Object>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<Object, String>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		OrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,object,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,object,string,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1423726989;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<Object>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<Object, String>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		OrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,object,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,object,string,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1426267113;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<Object>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<Object, String>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		AnnotationAwareOrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,object,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,object,string,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,annotation,aware,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1467730834;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		AnnotationAwareOrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,annotation,aware,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1496242568;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		AnnotationAwareOrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,annotation,aware,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1496837955;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		AnnotationAwareOrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,annotation,aware,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1498780456;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		AnnotationAwareOrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,annotation,aware,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1502974979;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		AnnotationAwareOrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,annotation,aware,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1530174524;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		AnnotationAwareOrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,annotation,aware,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1530174524;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		AnnotationAwareOrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,annotation,aware,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix);1532091916;Add all global interceptors and pointcuts.;private void addGlobalAdvisor(ListableBeanFactory beanFactory, String prefix) {_		String[] globalAdvisorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Advisor.class)__		String[] globalInterceptorNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, Interceptor.class)__		List<Object> beans = new ArrayList<>(globalAdvisorNames.length + globalInterceptorNames.length)__		Map<Object, String> names = new HashMap<>(beans.size())__		for (String name : globalAdvisorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		for (String name : globalInterceptorNames) {_			Object bean = beanFactory.getBean(name)__			beans.add(bean)__			names.put(bean, name)__		}_		AnnotationAwareOrderComparator.sort(beans)__		for (Object bean : beans) {_			String name = names.get(bean)__			if (name.startsWith(prefix)) {_				addAdvisorOnChainCreation(bean, name)__			}_		}_	};add,all,global,interceptors,and,pointcuts;private,void,add,global,advisor,listable,bean,factory,bean,factory,string,prefix,string,global,advisor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,advisor,class,string,global,interceptor,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,interceptor,class,list,object,beans,new,array,list,global,advisor,names,length,global,interceptor,names,length,map,object,string,names,new,hash,map,beans,size,for,string,name,global,advisor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,for,string,name,global,interceptor,names,object,bean,bean,factory,get,bean,name,beans,add,bean,names,put,bean,name,annotation,aware,order,comparator,sort,beans,for,object,bean,beans,string,name,names,get,bean,if,name,starts,with,prefix,add,advisor,on,chain,creation,bean,name
ProxyFactoryBean -> protected Class createCompositeInterface(Class[] interfaces);1328020251;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class createCompositeInterface(Class[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> protected Class createCompositeInterface(Class[] interfaces);1356735495;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class createCompositeInterface(Class[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> protected Class createCompositeInterface(Class[] interfaces);1357119239;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class createCompositeInterface(Class[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> protected Class createCompositeInterface(Class[] interfaces);1368482696;Create a composite interface Class for the given interfaces,_implementing the given interfaces in one single Class._<p>The default implementation builds a JDK proxy class for the_given interfaces._@param interfaces the interfaces to merge_@return the merged interface as Class_@see java.lang.reflect.Proxy#getProxyClass;protected Class createCompositeInterface(Class[] interfaces) {_		return ClassUtils.createCompositeInterface(interfaces, this.proxyClassLoader)__	};create,a,composite,interface,class,for,the,given,interfaces,implementing,the,given,interfaces,in,one,single,class,p,the,default,implementation,builds,a,jdk,proxy,class,for,the,given,interfaces,param,interfaces,the,interfaces,to,merge,return,the,merged,interface,as,class,see,java,lang,reflect,proxy,get,proxy,class;protected,class,create,composite,interface,class,interfaces,return,class,utils,create,composite,interface,interfaces,this,proxy,class,loader
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1328020251;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1356735495;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1357119239;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1368482696;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1385412762;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class<?> targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1407511029;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class<?> targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1423726989;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class<?> targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1426267113;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class<?> targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1467730834;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class<?> targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1496242568;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class<?> targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1496837955;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class<?> targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1498780456;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class<?> targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1502974979;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class<?> targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1530174524;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class<?> targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1530174524;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class<?> targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> private synchronized Object getSingletonInstance();1532091916;Return the singleton instance of this class's proxy object,_lazily creating it if it hasn't been created already._@return the shared singleton proxy;private synchronized Object getSingletonInstance() {_		if (this.singletonInstance == null) {_			this.targetSource = freshTargetSource()__			if (this.autodetectInterfaces && getProxiedInterfaces().length == 0 && !isProxyTargetClass()) {_				_				Class<?> targetClass = getTargetClass()__				if (targetClass == null) {_					throw new FactoryBeanNotInitializedException("Cannot determine target class for proxy")__				}_				setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader))__			}_			_			super.setFrozen(this.freezeProxy)__			this.singletonInstance = getProxy(createAopProxy())__		}_		return this.singletonInstance__	};return,the,singleton,instance,of,this,class,s,proxy,object,lazily,creating,it,if,it,hasn,t,been,created,already,return,the,shared,singleton,proxy;private,synchronized,object,get,singleton,instance,if,this,singleton,instance,null,this,target,source,fresh,target,source,if,this,autodetect,interfaces,get,proxied,interfaces,length,0,is,proxy,target,class,class,target,class,get,target,class,if,target,class,null,throw,new,factory,bean,not,initialized,exception,cannot,determine,target,class,for,proxy,set,interfaces,class,utils,get,all,interfaces,for,class,target,class,this,proxy,class,loader,super,set,frozen,this,freeze,proxy,this,singleton,instance,get,proxy,create,aop,proxy,return,this,singleton,instance
ProxyFactoryBean -> public void setProxyClassLoader(@Nullable ClassLoader classLoader);1496242568;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(@Nullable ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,nullable,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> public void setProxyClassLoader(@Nullable ClassLoader classLoader);1496837955;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(@Nullable ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,nullable,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> public void setProxyClassLoader(@Nullable ClassLoader classLoader);1498780456;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(@Nullable ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,nullable,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> public void setProxyClassLoader(@Nullable ClassLoader classLoader);1502974979;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(@Nullable ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,nullable,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> public void setProxyClassLoader(@Nullable ClassLoader classLoader);1530174524;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(@Nullable ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,nullable,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> public void setProxyClassLoader(@Nullable ClassLoader classLoader);1530174524;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(@Nullable ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,nullable,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> public void setProxyClassLoader(@Nullable ClassLoader classLoader);1532091916;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(@Nullable ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,nullable,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1328020251;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1356735495;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1357119239;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1368482696;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1385412762;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1407511029;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1423726989;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1426267113;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1467730834;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1496242568;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1496837955;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1498780456;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1502974979;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1530174524;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1530174524;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> private Advisor namedBeanToAdvisor(Object next);1532091916;Convert the following object sourced from calling getBean() on a name in the_interceptorNames array to an Advisor or TargetSource.;private Advisor namedBeanToAdvisor(Object next) {_		try {_			return this.advisorAdapterRegistry.wrap(next)__		}_		catch (UnknownAdviceTypeException ex) {_			_			_			throw new AopConfigException("Unknown advisor type " + next.getClass() +_					"_ Can only include Advisor or Advice type beans in interceptorNames chain except for last entry," +_					"which may also be target or TargetSource", ex)__		}_	};convert,the,following,object,sourced,from,calling,get,bean,on,a,name,in,the,interceptor,names,array,to,an,advisor,or,target,source;private,advisor,named,bean,to,advisor,object,next,try,return,this,advisor,adapter,registry,wrap,next,catch,unknown,advice,type,exception,ex,throw,new,aop,config,exception,unknown,advisor,type,next,get,class,can,only,include,advisor,or,advice,type,beans,in,interceptor,names,chain,except,for,last,entry,which,may,also,be,target,or,target,source,ex
ProxyFactoryBean -> public void setTargetName(String targetName);1328020251;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> public void setTargetName(String targetName);1356735495;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> public void setTargetName(String targetName);1357119239;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> public void setTargetName(String targetName);1368482696;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> public void setTargetName(String targetName);1385412762;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> public void setTargetName(String targetName);1407511029;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> public void setTargetName(String targetName);1423726989;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> public void setTargetName(String targetName);1426267113;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> public void setTargetName(String targetName);1467730834;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> public void setTargetName(String targetName);1496242568;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> public void setTargetName(String targetName);1496837955;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> public void setTargetName(String targetName);1498780456;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> public void setTargetName(String targetName);1502974979;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> public void setTargetName(String targetName);1530174524;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> public void setTargetName(String targetName);1530174524;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> public void setTargetName(String targetName);1532091916;Set the name of the target bean. This is an alternative to specifying_the target name at the end of the "interceptorNames" array._<p>You can also specify a target object or a TargetSource object_directly, via the "target"/"targetSource" property, respectively._@see #setInterceptorNames(String[])_@see #setTarget(Object)_@see #setTargetSource(org.springframework.aop.TargetSource);public void setTargetName(String targetName) {_		this.targetName = targetName__	};set,the,name,of,the,target,bean,this,is,an,alternative,to,specifying,the,target,name,at,the,end,of,the,interceptor,names,array,p,you,can,also,specify,a,target,object,or,a,target,source,object,directly,via,the,target,target,source,property,respectively,see,set,interceptor,names,string,see,set,target,object,see,set,target,source,org,springframework,aop,target,source;public,void,set,target,name,string,target,name,this,target,name,target,name
ProxyFactoryBean -> @Override 	public Class<?> getObjectType();1356735495;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;@Override_	public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;override,public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> @Override 	public Class<?> getObjectType();1368482696;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;@Override_	public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;override,public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> @Override 	public Class<?> getObjectType();1385412762;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;@Override_	public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class<?>[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;override,public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> @Override 	public Class<?> getObjectType();1407511029;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;@Override_	public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class<?>[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;override,public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> @Override 	public Class<?> getObjectType();1423726989;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;@Override_	public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class<?>[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;override,public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> @Override 	public Class<?> getObjectType();1426267113;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;@Override_	public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class<?>[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;override,public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> @Override 	public Class<?> getObjectType();1467730834;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;@Override_	public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class<?>[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;override,public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> @Override 	public Class<?> getObjectType();1496242568;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;@Override_	public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class<?>[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;override,public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> @Override 	public Class<?> getObjectType();1496837955;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;@Override_	public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class<?>[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;override,public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> @Override 	public Class<?> getObjectType();1498780456;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;@Override_	public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class<?>[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;override,public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> @Override 	public Class<?> getObjectType();1502974979;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;@Override_	public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class<?>[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;override,public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> @Override 	public Class<?> getObjectType();1530174524;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;@Override_	public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class<?>[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;override,public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> @Override 	public Class<?> getObjectType();1530174524;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;@Override_	public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class<?>[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;override,public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> @Override 	public Class<?> getObjectType();1532091916;Return the type of the proxy. Will check the singleton instance if_already created, else fall back to the proxy interface (in case of just_a single one), the target bean type, or the TargetSource's target class._@see org.springframework.aop.TargetSource#getTargetClass;@Override_	public Class<?> getObjectType() {_		synchronized (this) {_			if (this.singletonInstance != null) {_				return this.singletonInstance.getClass()__			}_		}_		Class<?>[] ifcs = getProxiedInterfaces()__		if (ifcs.length == 1) {_			return ifcs[0]__		}_		else if (ifcs.length > 1) {_			return createCompositeInterface(ifcs)__		}_		else if (this.targetName != null && this.beanFactory != null) {_			return this.beanFactory.getType(this.targetName)__		}_		else {_			return getTargetClass()__		}_	};return,the,type,of,the,proxy,will,check,the,singleton,instance,if,already,created,else,fall,back,to,the,proxy,interface,in,case,of,just,a,single,one,the,target,bean,type,or,the,target,source,s,target,class,see,org,springframework,aop,target,source,get,target,class;override,public,class,get,object,type,synchronized,this,if,this,singleton,instance,null,return,this,singleton,instance,get,class,class,ifcs,get,proxied,interfaces,if,ifcs,length,1,return,ifcs,0,else,if,ifcs,length,1,return,create,composite,interface,ifcs,else,if,this,target,name,null,this,bean,factory,null,return,this,bean,factory,get,type,this,target,name,else,return,get,target,class
ProxyFactoryBean -> public void setSingleton(boolean singleton);1328020251;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setSingleton(boolean singleton);1356735495;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setSingleton(boolean singleton);1357119239;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setSingleton(boolean singleton);1368482696;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setSingleton(boolean singleton);1385412762;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setSingleton(boolean singleton);1407511029;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setSingleton(boolean singleton);1423726989;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setSingleton(boolean singleton);1426267113;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setSingleton(boolean singleton);1467730834;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setSingleton(boolean singleton);1496242568;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setSingleton(boolean singleton);1496837955;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setSingleton(boolean singleton);1498780456;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setSingleton(boolean singleton);1502974979;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setSingleton(boolean singleton);1530174524;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setSingleton(boolean singleton);1530174524;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setSingleton(boolean singleton);1532091916;Set the value of the singleton property. Governs whether this factory_should always return the same proxy instance (which implies the same target)_or whether it should return a new prototype instance, which implies that_the target and interceptors may be new instances also, if they are obtained_from prototype bean definitions. This allows for fine control of_independence/uniqueness in the object graph.;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,the,value,of,the,singleton,property,governs,whether,this,factory,should,always,return,the,same,proxy,instance,which,implies,the,same,target,or,whether,it,should,return,a,new,prototype,instance,which,implies,that,the,target,and,interceptors,may,be,new,instances,also,if,they,are,obtained,from,prototype,bean,definitions,this,allows,for,fine,control,of,independence,uniqueness,in,the,object,graph;public,void,set,singleton,boolean,singleton,this,singleton,singleton
ProxyFactoryBean -> public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException;1385412762;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
ProxyFactoryBean -> public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException;1407511029;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
ProxyFactoryBean -> public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException;1423726989;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
ProxyFactoryBean -> public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException;1426267113;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
ProxyFactoryBean -> public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException;1467730834;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
ProxyFactoryBean -> public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException;1496242568;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
ProxyFactoryBean -> public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException;1496837955;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
ProxyFactoryBean -> public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException;1498780456;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
ProxyFactoryBean -> public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException;1502974979;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
ProxyFactoryBean -> public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException;1530174524;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
ProxyFactoryBean -> public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException;1530174524;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
ProxyFactoryBean -> public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException;1532091916;Set the names of the interfaces we're proxying. If no interface_is given, a CGLIB for the actual class will be created._<p>This is essentially equivalent to the "setInterfaces" method,_but mirrors TransactionProxyFactoryBean's "setProxyInterfaces"._@see #setInterfaces_@see AbstractSingletonProxyFactoryBean#setProxyInterfaces;public void setProxyInterfaces(Class<?>[] proxyInterfaces) throws ClassNotFoundException {_		setInterfaces(proxyInterfaces)__	};set,the,names,of,the,interfaces,we,re,proxying,if,no,interface,is,given,a,cglib,for,the,actual,class,will,be,created,p,this,is,essentially,equivalent,to,the,set,interfaces,method,but,mirrors,transaction,proxy,factory,bean,s,set,proxy,interfaces,see,set,interfaces,see,abstract,singleton,proxy,factory,bean,set,proxy,interfaces;public,void,set,proxy,interfaces,class,proxy,interfaces,throws,class,not,found,exception,set,interfaces,proxy,interfaces
