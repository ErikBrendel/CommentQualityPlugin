# id;timestamp;commentText;codeText;commentWords;codeWords
Pointcuts -> public static Pointcut union(Pointcut pc1, Pointcut pc2);1328020251;Match all methods that <b>either</b> (or both) of the given pointcuts matches._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that either_of the given Pointcuts matches;public static Pointcut union(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).union(pc2)__	};match,all,methods,that,b,either,b,or,both,of,the,given,pointcuts,matches,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,either,of,the,given,pointcuts,matches;public,static,pointcut,union,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,union,pc2
Pointcuts -> public static Pointcut union(Pointcut pc1, Pointcut pc2);1356735495;Match all methods that <b>either</b> (or both) of the given pointcuts matches._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that either_of the given Pointcuts matches;public static Pointcut union(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).union(pc2)__	};match,all,methods,that,b,either,b,or,both,of,the,given,pointcuts,matches,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,either,of,the,given,pointcuts,matches;public,static,pointcut,union,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,union,pc2
Pointcuts -> public static Pointcut union(Pointcut pc1, Pointcut pc2);1357119239;Match all methods that <b>either</b> (or both) of the given pointcuts matches._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that either_of the given Pointcuts matches;public static Pointcut union(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).union(pc2)__	};match,all,methods,that,b,either,b,or,both,of,the,given,pointcuts,matches,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,either,of,the,given,pointcuts,matches;public,static,pointcut,union,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,union,pc2
Pointcuts -> public static Pointcut union(Pointcut pc1, Pointcut pc2);1368482696;Match all methods that <b>either</b> (or both) of the given pointcuts matches._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that either_of the given Pointcuts matches;public static Pointcut union(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).union(pc2)__	};match,all,methods,that,b,either,b,or,both,of,the,given,pointcuts,matches,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,either,of,the,given,pointcuts,matches;public,static,pointcut,union,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,union,pc2
Pointcuts -> public static Pointcut union(Pointcut pc1, Pointcut pc2);1385412762;Match all methods that <b>either</b> (or both) of the given pointcuts matches._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that either_of the given Pointcuts matches;public static Pointcut union(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).union(pc2)__	};match,all,methods,that,b,either,b,or,both,of,the,given,pointcuts,matches,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,either,of,the,given,pointcuts,matches;public,static,pointcut,union,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,union,pc2
Pointcuts -> public static Pointcut union(Pointcut pc1, Pointcut pc2);1450827071;Match all methods that <b>either</b> (or both) of the given pointcuts matches._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that either_of the given Pointcuts matches;public static Pointcut union(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).union(pc2)__	};match,all,methods,that,b,either,b,or,both,of,the,given,pointcuts,matches,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,either,of,the,given,pointcuts,matches;public,static,pointcut,union,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,union,pc2
Pointcuts -> public static Pointcut union(Pointcut pc1, Pointcut pc2);1467846264;Match all methods that <b>either</b> (or both) of the given pointcuts matches._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that either_of the given Pointcuts matches;public static Pointcut union(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).union(pc2)__	};match,all,methods,that,b,either,b,or,both,of,the,given,pointcuts,matches,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,either,of,the,given,pointcuts,matches;public,static,pointcut,union,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,union,pc2
Pointcuts -> public static Pointcut union(Pointcut pc1, Pointcut pc2);1496242568;Match all methods that <b>either</b> (or both) of the given pointcuts matches._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that either_of the given Pointcuts matches;public static Pointcut union(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).union(pc2)__	};match,all,methods,that,b,either,b,or,both,of,the,given,pointcuts,matches,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,either,of,the,given,pointcuts,matches;public,static,pointcut,union,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,union,pc2
Pointcuts -> public static Pointcut union(Pointcut pc1, Pointcut pc2);1518260959;Match all methods that <b>either</b> (or both) of the given pointcuts matches._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that either_of the given Pointcuts matches;public static Pointcut union(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).union(pc2)__	};match,all,methods,that,b,either,b,or,both,of,the,given,pointcuts,matches,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,either,of,the,given,pointcuts,matches;public,static,pointcut,union,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,union,pc2
Pointcuts -> public static Pointcut union(Pointcut pc1, Pointcut pc2);1530174524;Match all methods that <b>either</b> (or both) of the given pointcuts matches._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that either_of the given Pointcuts matches;public static Pointcut union(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).union(pc2)__	};match,all,methods,that,b,either,b,or,both,of,the,given,pointcuts,matches,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,either,of,the,given,pointcuts,matches;public,static,pointcut,union,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,union,pc2
Pointcuts -> public static Pointcut union(Pointcut pc1, Pointcut pc2);1532038651;Match all methods that <b>either</b> (or both) of the given pointcuts matches._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that either_of the given Pointcuts matches;public static Pointcut union(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).union(pc2)__	};match,all,methods,that,b,either,b,or,both,of,the,given,pointcuts,matches,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,either,of,the,given,pointcuts,matches;public,static,pointcut,union,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,union,pc2
Pointcuts -> public static boolean matches(Pointcut pointcut, Method method, Class targetClass, Object[] args);1328020251;Perform the least expensive check for a pointcut match._@param pointcut the pointcut to match_@param method the candidate method_@param targetClass the target class_@param args arguments to the method_@return whether there's a runtime match;public static boolean matches(Pointcut pointcut, Method method, Class targetClass, Object[] args) {_		Assert.notNull(pointcut, "Pointcut must not be null")__		if (pointcut == Pointcut.TRUE) {_			return true__		}_		if (pointcut.getClassFilter().matches(targetClass)) {_			_			MethodMatcher mm = pointcut.getMethodMatcher()__			if (mm.matches(method, targetClass)) {_				_				return (!mm.isRuntime() || mm.matches(method, targetClass, args))__			}_		}_		return false__	};perform,the,least,expensive,check,for,a,pointcut,match,param,pointcut,the,pointcut,to,match,param,method,the,candidate,method,param,target,class,the,target,class,param,args,arguments,to,the,method,return,whether,there,s,a,runtime,match;public,static,boolean,matches,pointcut,pointcut,method,method,class,target,class,object,args,assert,not,null,pointcut,pointcut,must,not,be,null,if,pointcut,pointcut,true,return,true,if,pointcut,get,class,filter,matches,target,class,method,matcher,mm,pointcut,get,method,matcher,if,mm,matches,method,target,class,return,mm,is,runtime,mm,matches,method,target,class,args,return,false
Pointcuts -> public static boolean matches(Pointcut pointcut, Method method, Class targetClass, Object[] args);1356735495;Perform the least expensive check for a pointcut match._@param pointcut the pointcut to match_@param method the candidate method_@param targetClass the target class_@param args arguments to the method_@return whether there's a runtime match;public static boolean matches(Pointcut pointcut, Method method, Class targetClass, Object[] args) {_		Assert.notNull(pointcut, "Pointcut must not be null")__		if (pointcut == Pointcut.TRUE) {_			return true__		}_		if (pointcut.getClassFilter().matches(targetClass)) {_			_			MethodMatcher mm = pointcut.getMethodMatcher()__			if (mm.matches(method, targetClass)) {_				_				return (!mm.isRuntime() || mm.matches(method, targetClass, args))__			}_		}_		return false__	};perform,the,least,expensive,check,for,a,pointcut,match,param,pointcut,the,pointcut,to,match,param,method,the,candidate,method,param,target,class,the,target,class,param,args,arguments,to,the,method,return,whether,there,s,a,runtime,match;public,static,boolean,matches,pointcut,pointcut,method,method,class,target,class,object,args,assert,not,null,pointcut,pointcut,must,not,be,null,if,pointcut,pointcut,true,return,true,if,pointcut,get,class,filter,matches,target,class,method,matcher,mm,pointcut,get,method,matcher,if,mm,matches,method,target,class,return,mm,is,runtime,mm,matches,method,target,class,args,return,false
Pointcuts -> public static boolean matches(Pointcut pointcut, Method method, Class targetClass, Object[] args);1357119239;Perform the least expensive check for a pointcut match._@param pointcut the pointcut to match_@param method the candidate method_@param targetClass the target class_@param args arguments to the method_@return whether there's a runtime match;public static boolean matches(Pointcut pointcut, Method method, Class targetClass, Object[] args) {_		Assert.notNull(pointcut, "Pointcut must not be null")__		if (pointcut == Pointcut.TRUE) {_			return true__		}_		if (pointcut.getClassFilter().matches(targetClass)) {_			_			MethodMatcher mm = pointcut.getMethodMatcher()__			if (mm.matches(method, targetClass)) {_				_				return (!mm.isRuntime() || mm.matches(method, targetClass, args))__			}_		}_		return false__	};perform,the,least,expensive,check,for,a,pointcut,match,param,pointcut,the,pointcut,to,match,param,method,the,candidate,method,param,target,class,the,target,class,param,args,arguments,to,the,method,return,whether,there,s,a,runtime,match;public,static,boolean,matches,pointcut,pointcut,method,method,class,target,class,object,args,assert,not,null,pointcut,pointcut,must,not,be,null,if,pointcut,pointcut,true,return,true,if,pointcut,get,class,filter,matches,target,class,method,matcher,mm,pointcut,get,method,matcher,if,mm,matches,method,target,class,return,mm,is,runtime,mm,matches,method,target,class,args,return,false
Pointcuts -> public static boolean matches(Pointcut pointcut, Method method, Class targetClass, Object[] args);1368482696;Perform the least expensive check for a pointcut match._@param pointcut the pointcut to match_@param method the candidate method_@param targetClass the target class_@param args arguments to the method_@return whether there's a runtime match;public static boolean matches(Pointcut pointcut, Method method, Class targetClass, Object[] args) {_		Assert.notNull(pointcut, "Pointcut must not be null")__		if (pointcut == Pointcut.TRUE) {_			return true__		}_		if (pointcut.getClassFilter().matches(targetClass)) {_			_			MethodMatcher mm = pointcut.getMethodMatcher()__			if (mm.matches(method, targetClass)) {_				_				return (!mm.isRuntime() || mm.matches(method, targetClass, args))__			}_		}_		return false__	};perform,the,least,expensive,check,for,a,pointcut,match,param,pointcut,the,pointcut,to,match,param,method,the,candidate,method,param,target,class,the,target,class,param,args,arguments,to,the,method,return,whether,there,s,a,runtime,match;public,static,boolean,matches,pointcut,pointcut,method,method,class,target,class,object,args,assert,not,null,pointcut,pointcut,must,not,be,null,if,pointcut,pointcut,true,return,true,if,pointcut,get,class,filter,matches,target,class,method,matcher,mm,pointcut,get,method,matcher,if,mm,matches,method,target,class,return,mm,is,runtime,mm,matches,method,target,class,args,return,false
Pointcuts -> public static boolean matches(Pointcut pointcut, Method method, Class<?> targetClass, Object... args);1450827071;Perform the least expensive check for a pointcut match._@param pointcut the pointcut to match_@param method the candidate method_@param targetClass the target class_@param args arguments to the method_@return whether there's a runtime match;public static boolean matches(Pointcut pointcut, Method method, Class<?> targetClass, Object... args) {_		Assert.notNull(pointcut, "Pointcut must not be null")__		if (pointcut == Pointcut.TRUE) {_			return true__		}_		if (pointcut.getClassFilter().matches(targetClass)) {_			_			MethodMatcher mm = pointcut.getMethodMatcher()__			if (mm.matches(method, targetClass)) {_				_				return (!mm.isRuntime() || mm.matches(method, targetClass, args))__			}_		}_		return false__	};perform,the,least,expensive,check,for,a,pointcut,match,param,pointcut,the,pointcut,to,match,param,method,the,candidate,method,param,target,class,the,target,class,param,args,arguments,to,the,method,return,whether,there,s,a,runtime,match;public,static,boolean,matches,pointcut,pointcut,method,method,class,target,class,object,args,assert,not,null,pointcut,pointcut,must,not,be,null,if,pointcut,pointcut,true,return,true,if,pointcut,get,class,filter,matches,target,class,method,matcher,mm,pointcut,get,method,matcher,if,mm,matches,method,target,class,return,mm,is,runtime,mm,matches,method,target,class,args,return,false
Pointcuts -> public static boolean matches(Pointcut pointcut, Method method, Class<?> targetClass, Object... args);1467846264;Perform the least expensive check for a pointcut match._@param pointcut the pointcut to match_@param method the candidate method_@param targetClass the target class_@param args arguments to the method_@return whether there's a runtime match;public static boolean matches(Pointcut pointcut, Method method, Class<?> targetClass, Object... args) {_		Assert.notNull(pointcut, "Pointcut must not be null")__		if (pointcut == Pointcut.TRUE) {_			return true__		}_		if (pointcut.getClassFilter().matches(targetClass)) {_			_			MethodMatcher mm = pointcut.getMethodMatcher()__			if (mm.matches(method, targetClass)) {_				_				return (!mm.isRuntime() || mm.matches(method, targetClass, args))__			}_		}_		return false__	};perform,the,least,expensive,check,for,a,pointcut,match,param,pointcut,the,pointcut,to,match,param,method,the,candidate,method,param,target,class,the,target,class,param,args,arguments,to,the,method,return,whether,there,s,a,runtime,match;public,static,boolean,matches,pointcut,pointcut,method,method,class,target,class,object,args,assert,not,null,pointcut,pointcut,must,not,be,null,if,pointcut,pointcut,true,return,true,if,pointcut,get,class,filter,matches,target,class,method,matcher,mm,pointcut,get,method,matcher,if,mm,matches,method,target,class,return,mm,is,runtime,mm,matches,method,target,class,args,return,false
Pointcuts -> public static boolean matches(Pointcut pointcut, Method method, Class<?> targetClass, Object... args);1496242568;Perform the least expensive check for a pointcut match._@param pointcut the pointcut to match_@param method the candidate method_@param targetClass the target class_@param args arguments to the method_@return whether there's a runtime match;public static boolean matches(Pointcut pointcut, Method method, Class<?> targetClass, Object... args) {_		Assert.notNull(pointcut, "Pointcut must not be null")__		if (pointcut == Pointcut.TRUE) {_			return true__		}_		if (pointcut.getClassFilter().matches(targetClass)) {_			_			MethodMatcher mm = pointcut.getMethodMatcher()__			if (mm.matches(method, targetClass)) {_				_				return (!mm.isRuntime() || mm.matches(method, targetClass, args))__			}_		}_		return false__	};perform,the,least,expensive,check,for,a,pointcut,match,param,pointcut,the,pointcut,to,match,param,method,the,candidate,method,param,target,class,the,target,class,param,args,arguments,to,the,method,return,whether,there,s,a,runtime,match;public,static,boolean,matches,pointcut,pointcut,method,method,class,target,class,object,args,assert,not,null,pointcut,pointcut,must,not,be,null,if,pointcut,pointcut,true,return,true,if,pointcut,get,class,filter,matches,target,class,method,matcher,mm,pointcut,get,method,matcher,if,mm,matches,method,target,class,return,mm,is,runtime,mm,matches,method,target,class,args,return,false
Pointcuts -> public static boolean matches(Pointcut pointcut, Method method, Class<?> targetClass, Object... args);1518260959;Perform the least expensive check for a pointcut match._@param pointcut the pointcut to match_@param method the candidate method_@param targetClass the target class_@param args arguments to the method_@return whether there's a runtime match;public static boolean matches(Pointcut pointcut, Method method, Class<?> targetClass, Object... args) {_		Assert.notNull(pointcut, "Pointcut must not be null")__		if (pointcut == Pointcut.TRUE) {_			return true__		}_		if (pointcut.getClassFilter().matches(targetClass)) {_			_			MethodMatcher mm = pointcut.getMethodMatcher()__			if (mm.matches(method, targetClass)) {_				_				return (!mm.isRuntime() || mm.matches(method, targetClass, args))__			}_		}_		return false__	};perform,the,least,expensive,check,for,a,pointcut,match,param,pointcut,the,pointcut,to,match,param,method,the,candidate,method,param,target,class,the,target,class,param,args,arguments,to,the,method,return,whether,there,s,a,runtime,match;public,static,boolean,matches,pointcut,pointcut,method,method,class,target,class,object,args,assert,not,null,pointcut,pointcut,must,not,be,null,if,pointcut,pointcut,true,return,true,if,pointcut,get,class,filter,matches,target,class,method,matcher,mm,pointcut,get,method,matcher,if,mm,matches,method,target,class,return,mm,is,runtime,mm,matches,method,target,class,args,return,false
Pointcuts -> public static boolean matches(Pointcut pointcut, Method method, Class<?> targetClass, Object... args);1530174524;Perform the least expensive check for a pointcut match._@param pointcut the pointcut to match_@param method the candidate method_@param targetClass the target class_@param args arguments to the method_@return whether there's a runtime match;public static boolean matches(Pointcut pointcut, Method method, Class<?> targetClass, Object... args) {_		Assert.notNull(pointcut, "Pointcut must not be null")__		if (pointcut == Pointcut.TRUE) {_			return true__		}_		if (pointcut.getClassFilter().matches(targetClass)) {_			_			MethodMatcher mm = pointcut.getMethodMatcher()__			if (mm.matches(method, targetClass)) {_				_				return (!mm.isRuntime() || mm.matches(method, targetClass, args))__			}_		}_		return false__	};perform,the,least,expensive,check,for,a,pointcut,match,param,pointcut,the,pointcut,to,match,param,method,the,candidate,method,param,target,class,the,target,class,param,args,arguments,to,the,method,return,whether,there,s,a,runtime,match;public,static,boolean,matches,pointcut,pointcut,method,method,class,target,class,object,args,assert,not,null,pointcut,pointcut,must,not,be,null,if,pointcut,pointcut,true,return,true,if,pointcut,get,class,filter,matches,target,class,method,matcher,mm,pointcut,get,method,matcher,if,mm,matches,method,target,class,return,mm,is,runtime,mm,matches,method,target,class,args,return,false
Pointcuts -> public static boolean matches(Pointcut pointcut, Method method, Class<?> targetClass, Object... args);1532038651;Perform the least expensive check for a pointcut match._@param pointcut the pointcut to match_@param method the candidate method_@param targetClass the target class_@param args arguments to the method_@return whether there's a runtime match;public static boolean matches(Pointcut pointcut, Method method, Class<?> targetClass, Object... args) {_		Assert.notNull(pointcut, "Pointcut must not be null")__		if (pointcut == Pointcut.TRUE) {_			return true__		}_		if (pointcut.getClassFilter().matches(targetClass)) {_			_			MethodMatcher mm = pointcut.getMethodMatcher()__			if (mm.matches(method, targetClass)) {_				_				return (!mm.isRuntime() || mm.matches(method, targetClass, args))__			}_		}_		return false__	};perform,the,least,expensive,check,for,a,pointcut,match,param,pointcut,the,pointcut,to,match,param,method,the,candidate,method,param,target,class,the,target,class,param,args,arguments,to,the,method,return,whether,there,s,a,runtime,match;public,static,boolean,matches,pointcut,pointcut,method,method,class,target,class,object,args,assert,not,null,pointcut,pointcut,must,not,be,null,if,pointcut,pointcut,true,return,true,if,pointcut,get,class,filter,matches,target,class,method,matcher,mm,pointcut,get,method,matcher,if,mm,matches,method,target,class,return,mm,is,runtime,mm,matches,method,target,class,args,return,false
Pointcuts -> public static Pointcut intersection(Pointcut pc1, Pointcut pc2);1328020251;Match all methods that <b>both</b> the given pointcuts match._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that both_of the given Pointcuts match;public static Pointcut intersection(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).intersection(pc2)__	};match,all,methods,that,b,both,b,the,given,pointcuts,match,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,both,of,the,given,pointcuts,match;public,static,pointcut,intersection,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,intersection,pc2
Pointcuts -> public static Pointcut intersection(Pointcut pc1, Pointcut pc2);1356735495;Match all methods that <b>both</b> the given pointcuts match._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that both_of the given Pointcuts match;public static Pointcut intersection(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).intersection(pc2)__	};match,all,methods,that,b,both,b,the,given,pointcuts,match,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,both,of,the,given,pointcuts,match;public,static,pointcut,intersection,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,intersection,pc2
Pointcuts -> public static Pointcut intersection(Pointcut pc1, Pointcut pc2);1357119239;Match all methods that <b>both</b> the given pointcuts match._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that both_of the given Pointcuts match;public static Pointcut intersection(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).intersection(pc2)__	};match,all,methods,that,b,both,b,the,given,pointcuts,match,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,both,of,the,given,pointcuts,match;public,static,pointcut,intersection,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,intersection,pc2
Pointcuts -> public static Pointcut intersection(Pointcut pc1, Pointcut pc2);1368482696;Match all methods that <b>both</b> the given pointcuts match._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that both_of the given Pointcuts match;public static Pointcut intersection(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).intersection(pc2)__	};match,all,methods,that,b,both,b,the,given,pointcuts,match,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,both,of,the,given,pointcuts,match;public,static,pointcut,intersection,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,intersection,pc2
Pointcuts -> public static Pointcut intersection(Pointcut pc1, Pointcut pc2);1385412762;Match all methods that <b>both</b> the given pointcuts match._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that both_of the given Pointcuts match;public static Pointcut intersection(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).intersection(pc2)__	};match,all,methods,that,b,both,b,the,given,pointcuts,match,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,both,of,the,given,pointcuts,match;public,static,pointcut,intersection,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,intersection,pc2
Pointcuts -> public static Pointcut intersection(Pointcut pc1, Pointcut pc2);1450827071;Match all methods that <b>both</b> the given pointcuts match._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that both_of the given Pointcuts match;public static Pointcut intersection(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).intersection(pc2)__	};match,all,methods,that,b,both,b,the,given,pointcuts,match,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,both,of,the,given,pointcuts,match;public,static,pointcut,intersection,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,intersection,pc2
Pointcuts -> public static Pointcut intersection(Pointcut pc1, Pointcut pc2);1467846264;Match all methods that <b>both</b> the given pointcuts match._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that both_of the given Pointcuts match;public static Pointcut intersection(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).intersection(pc2)__	};match,all,methods,that,b,both,b,the,given,pointcuts,match,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,both,of,the,given,pointcuts,match;public,static,pointcut,intersection,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,intersection,pc2
Pointcuts -> public static Pointcut intersection(Pointcut pc1, Pointcut pc2);1496242568;Match all methods that <b>both</b> the given pointcuts match._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that both_of the given Pointcuts match;public static Pointcut intersection(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).intersection(pc2)__	};match,all,methods,that,b,both,b,the,given,pointcuts,match,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,both,of,the,given,pointcuts,match;public,static,pointcut,intersection,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,intersection,pc2
Pointcuts -> public static Pointcut intersection(Pointcut pc1, Pointcut pc2);1518260959;Match all methods that <b>both</b> the given pointcuts match._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that both_of the given Pointcuts match;public static Pointcut intersection(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).intersection(pc2)__	};match,all,methods,that,b,both,b,the,given,pointcuts,match,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,both,of,the,given,pointcuts,match;public,static,pointcut,intersection,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,intersection,pc2
Pointcuts -> public static Pointcut intersection(Pointcut pc1, Pointcut pc2);1530174524;Match all methods that <b>both</b> the given pointcuts match._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that both_of the given Pointcuts match;public static Pointcut intersection(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).intersection(pc2)__	};match,all,methods,that,b,both,b,the,given,pointcuts,match,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,both,of,the,given,pointcuts,match;public,static,pointcut,intersection,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,intersection,pc2
Pointcuts -> public static Pointcut intersection(Pointcut pc1, Pointcut pc2);1532038651;Match all methods that <b>both</b> the given pointcuts match._@param pc1 the first Pointcut_@param pc2 the second Pointcut_@return a distinct Pointcut that matches all methods that both_of the given Pointcuts match;public static Pointcut intersection(Pointcut pc1, Pointcut pc2) {_		return new ComposablePointcut(pc1).intersection(pc2)__	};match,all,methods,that,b,both,b,the,given,pointcuts,match,param,pc1,the,first,pointcut,param,pc2,the,second,pointcut,return,a,distinct,pointcut,that,matches,all,methods,that,both,of,the,given,pointcuts,match;public,static,pointcut,intersection,pointcut,pc1,pointcut,pc2,return,new,composable,pointcut,pc1,intersection,pc2
