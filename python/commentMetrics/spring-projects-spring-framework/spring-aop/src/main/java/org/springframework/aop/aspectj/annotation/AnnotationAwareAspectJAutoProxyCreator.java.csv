# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationAwareAspectJAutoProxyCreator -> protected boolean isEligibleAspectBean(String beanName);1328020251;Check whether the given aspect bean is eligible for auto-proxying._<p>If no &lt_aop:include&gt_ elements were used then "includePatterns" will be_<code>null</code> and all beans are included. If "includePatterns" is non-null,_then one of the patterns must match.;protected boolean isEligibleAspectBean(String beanName) {_		if (this.includePatterns == null) {_			return true__		}_		else {_			for (Pattern pattern : this.includePatterns) {_				if (pattern.matcher(beanName).matches()) {_					return true__				}_			}_			return false__		}_	};check,whether,the,given,aspect,bean,is,eligible,for,auto,proxying,p,if,no,lt,aop,include,gt,elements,were,used,then,include,patterns,will,be,code,null,code,and,all,beans,are,included,if,include,patterns,is,non,null,then,one,of,the,patterns,must,match;protected,boolean,is,eligible,aspect,bean,string,bean,name,if,this,include,patterns,null,return,true,else,for,pattern,pattern,this,include,patterns,if,pattern,matcher,bean,name,matches,return,true,return,false
AnnotationAwareAspectJAutoProxyCreator -> protected boolean isEligibleAspectBean(String beanName);1356735495;Check whether the given aspect bean is eligible for auto-proxying._<p>If no &lt_aop:include&gt_ elements were used then "includePatterns" will be_{@code null} and all beans are included. If "includePatterns" is non-null,_then one of the patterns must match.;protected boolean isEligibleAspectBean(String beanName) {_		if (this.includePatterns == null) {_			return true__		}_		else {_			for (Pattern pattern : this.includePatterns) {_				if (pattern.matcher(beanName).matches()) {_					return true__				}_			}_			return false__		}_	};check,whether,the,given,aspect,bean,is,eligible,for,auto,proxying,p,if,no,lt,aop,include,gt,elements,were,used,then,include,patterns,will,be,code,null,and,all,beans,are,included,if,include,patterns,is,non,null,then,one,of,the,patterns,must,match;protected,boolean,is,eligible,aspect,bean,string,bean,name,if,this,include,patterns,null,return,true,else,for,pattern,pattern,this,include,patterns,if,pattern,matcher,bean,name,matches,return,true,return,false
AnnotationAwareAspectJAutoProxyCreator -> protected boolean isEligibleAspectBean(String beanName);1385412762;Check whether the given aspect bean is eligible for auto-proxying._<p>If no &lt_aop:include&gt_ elements were used then "includePatterns" will be_{@code null} and all beans are included. If "includePatterns" is non-null,_then one of the patterns must match.;protected boolean isEligibleAspectBean(String beanName) {_		if (this.includePatterns == null) {_			return true__		}_		else {_			for (Pattern pattern : this.includePatterns) {_				if (pattern.matcher(beanName).matches()) {_					return true__				}_			}_			return false__		}_	};check,whether,the,given,aspect,bean,is,eligible,for,auto,proxying,p,if,no,lt,aop,include,gt,elements,were,used,then,include,patterns,will,be,code,null,and,all,beans,are,included,if,include,patterns,is,non,null,then,one,of,the,patterns,must,match;protected,boolean,is,eligible,aspect,bean,string,bean,name,if,this,include,patterns,null,return,true,else,for,pattern,pattern,this,include,patterns,if,pattern,matcher,bean,name,matches,return,true,return,false
AnnotationAwareAspectJAutoProxyCreator -> protected boolean isEligibleAspectBean(String beanName);1390235870;Check whether the given aspect bean is eligible for auto-proxying._<p>If no &lt_aop:include&gt_ elements were used then "includePatterns" will be_{@code null} and all beans are included. If "includePatterns" is non-null,_then one of the patterns must match.;protected boolean isEligibleAspectBean(String beanName) {_		if (this.includePatterns == null) {_			return true__		}_		else {_			for (Pattern pattern : this.includePatterns) {_				if (pattern.matcher(beanName).matches()) {_					return true__				}_			}_			return false__		}_	};check,whether,the,given,aspect,bean,is,eligible,for,auto,proxying,p,if,no,lt,aop,include,gt,elements,were,used,then,include,patterns,will,be,code,null,and,all,beans,are,included,if,include,patterns,is,non,null,then,one,of,the,patterns,must,match;protected,boolean,is,eligible,aspect,bean,string,bean,name,if,this,include,patterns,null,return,true,else,for,pattern,pattern,this,include,patterns,if,pattern,matcher,bean,name,matches,return,true,return,false
AnnotationAwareAspectJAutoProxyCreator -> protected boolean isEligibleAspectBean(String beanName);1467730834;Check whether the given aspect bean is eligible for auto-proxying._<p>If no &lt_aop:include&gt_ elements were used then "includePatterns" will be_{@code null} and all beans are included. If "includePatterns" is non-null,_then one of the patterns must match.;protected boolean isEligibleAspectBean(String beanName) {_		if (this.includePatterns == null) {_			return true__		}_		else {_			for (Pattern pattern : this.includePatterns) {_				if (pattern.matcher(beanName).matches()) {_					return true__				}_			}_			return false__		}_	};check,whether,the,given,aspect,bean,is,eligible,for,auto,proxying,p,if,no,lt,aop,include,gt,elements,were,used,then,include,patterns,will,be,code,null,and,all,beans,are,included,if,include,patterns,is,non,null,then,one,of,the,patterns,must,match;protected,boolean,is,eligible,aspect,bean,string,bean,name,if,this,include,patterns,null,return,true,else,for,pattern,pattern,this,include,patterns,if,pattern,matcher,bean,name,matches,return,true,return,false
AnnotationAwareAspectJAutoProxyCreator -> protected boolean isEligibleAspectBean(String beanName);1482422404;Check whether the given aspect bean is eligible for auto-proxying._<p>If no &lt_aop:include&gt_ elements were used then "includePatterns" will be_{@code null} and all beans are included. If "includePatterns" is non-null,_then one of the patterns must match.;protected boolean isEligibleAspectBean(String beanName) {_		if (this.includePatterns == null) {_			return true__		}_		else {_			for (Pattern pattern : this.includePatterns) {_				if (pattern.matcher(beanName).matches()) {_					return true__				}_			}_			return false__		}_	};check,whether,the,given,aspect,bean,is,eligible,for,auto,proxying,p,if,no,lt,aop,include,gt,elements,were,used,then,include,patterns,will,be,code,null,and,all,beans,are,included,if,include,patterns,is,non,null,then,one,of,the,patterns,must,match;protected,boolean,is,eligible,aspect,bean,string,bean,name,if,this,include,patterns,null,return,true,else,for,pattern,pattern,this,include,patterns,if,pattern,matcher,bean,name,matches,return,true,return,false
AnnotationAwareAspectJAutoProxyCreator -> protected boolean isEligibleAspectBean(String beanName);1498780456;Check whether the given aspect bean is eligible for auto-proxying._<p>If no &lt_aop:include&gt_ elements were used then "includePatterns" will be_{@code null} and all beans are included. If "includePatterns" is non-null,_then one of the patterns must match.;protected boolean isEligibleAspectBean(String beanName) {_		if (this.includePatterns == null) {_			return true__		}_		else {_			for (Pattern pattern : this.includePatterns) {_				if (pattern.matcher(beanName).matches()) {_					return true__				}_			}_			return false__		}_	};check,whether,the,given,aspect,bean,is,eligible,for,auto,proxying,p,if,no,lt,aop,include,gt,elements,were,used,then,include,patterns,will,be,code,null,and,all,beans,are,included,if,include,patterns,is,non,null,then,one,of,the,patterns,must,match;protected,boolean,is,eligible,aspect,bean,string,bean,name,if,this,include,patterns,null,return,true,else,for,pattern,pattern,this,include,patterns,if,pattern,matcher,bean,name,matches,return,true,return,false
AnnotationAwareAspectJAutoProxyCreator -> public void setIncludePatterns(List<String> patterns);1328020251;Set a list of regex patterns, matching eligible @AspectJ bean names._<p>Default is to consider all @AspectJ beans as eligible.;public void setIncludePatterns(List<String> patterns) {_		this.includePatterns = new ArrayList<Pattern>(patterns.size())__		for (String patternText : patterns) {_			this.includePatterns.add(Pattern.compile(patternText))__		}_	};set,a,list,of,regex,patterns,matching,eligible,aspect,j,bean,names,p,default,is,to,consider,all,aspect,j,beans,as,eligible;public,void,set,include,patterns,list,string,patterns,this,include,patterns,new,array,list,pattern,patterns,size,for,string,pattern,text,patterns,this,include,patterns,add,pattern,compile,pattern,text
AnnotationAwareAspectJAutoProxyCreator -> public void setIncludePatterns(List<String> patterns);1356735495;Set a list of regex patterns, matching eligible @AspectJ bean names._<p>Default is to consider all @AspectJ beans as eligible.;public void setIncludePatterns(List<String> patterns) {_		this.includePatterns = new ArrayList<Pattern>(patterns.size())__		for (String patternText : patterns) {_			this.includePatterns.add(Pattern.compile(patternText))__		}_	};set,a,list,of,regex,patterns,matching,eligible,aspect,j,bean,names,p,default,is,to,consider,all,aspect,j,beans,as,eligible;public,void,set,include,patterns,list,string,patterns,this,include,patterns,new,array,list,pattern,patterns,size,for,string,pattern,text,patterns,this,include,patterns,add,pattern,compile,pattern,text
AnnotationAwareAspectJAutoProxyCreator -> public void setIncludePatterns(List<String> patterns);1385412762;Set a list of regex patterns, matching eligible @AspectJ bean names._<p>Default is to consider all @AspectJ beans as eligible.;public void setIncludePatterns(List<String> patterns) {_		this.includePatterns = new ArrayList<Pattern>(patterns.size())__		for (String patternText : patterns) {_			this.includePatterns.add(Pattern.compile(patternText))__		}_	};set,a,list,of,regex,patterns,matching,eligible,aspect,j,bean,names,p,default,is,to,consider,all,aspect,j,beans,as,eligible;public,void,set,include,patterns,list,string,patterns,this,include,patterns,new,array,list,pattern,patterns,size,for,string,pattern,text,patterns,this,include,patterns,add,pattern,compile,pattern,text
AnnotationAwareAspectJAutoProxyCreator -> public void setIncludePatterns(List<String> patterns);1390235870;Set a list of regex patterns, matching eligible @AspectJ bean names._<p>Default is to consider all @AspectJ beans as eligible.;public void setIncludePatterns(List<String> patterns) {_		this.includePatterns = new ArrayList<Pattern>(patterns.size())__		for (String patternText : patterns) {_			this.includePatterns.add(Pattern.compile(patternText))__		}_	};set,a,list,of,regex,patterns,matching,eligible,aspect,j,bean,names,p,default,is,to,consider,all,aspect,j,beans,as,eligible;public,void,set,include,patterns,list,string,patterns,this,include,patterns,new,array,list,pattern,patterns,size,for,string,pattern,text,patterns,this,include,patterns,add,pattern,compile,pattern,text
AnnotationAwareAspectJAutoProxyCreator -> public void setIncludePatterns(List<String> patterns);1467730834;Set a list of regex patterns, matching eligible @AspectJ bean names._<p>Default is to consider all @AspectJ beans as eligible.;public void setIncludePatterns(List<String> patterns) {_		this.includePatterns = new ArrayList<>(patterns.size())__		for (String patternText : patterns) {_			this.includePatterns.add(Pattern.compile(patternText))__		}_	};set,a,list,of,regex,patterns,matching,eligible,aspect,j,bean,names,p,default,is,to,consider,all,aspect,j,beans,as,eligible;public,void,set,include,patterns,list,string,patterns,this,include,patterns,new,array,list,patterns,size,for,string,pattern,text,patterns,this,include,patterns,add,pattern,compile,pattern,text
AnnotationAwareAspectJAutoProxyCreator -> public void setIncludePatterns(List<String> patterns);1482422404;Set a list of regex patterns, matching eligible @AspectJ bean names._<p>Default is to consider all @AspectJ beans as eligible.;public void setIncludePatterns(List<String> patterns) {_		this.includePatterns = new ArrayList<>(patterns.size())__		for (String patternText : patterns) {_			this.includePatterns.add(Pattern.compile(patternText))__		}_	};set,a,list,of,regex,patterns,matching,eligible,aspect,j,bean,names,p,default,is,to,consider,all,aspect,j,beans,as,eligible;public,void,set,include,patterns,list,string,patterns,this,include,patterns,new,array,list,patterns,size,for,string,pattern,text,patterns,this,include,patterns,add,pattern,compile,pattern,text
AnnotationAwareAspectJAutoProxyCreator -> public void setIncludePatterns(List<String> patterns);1498780456;Set a list of regex patterns, matching eligible @AspectJ bean names._<p>Default is to consider all @AspectJ beans as eligible.;public void setIncludePatterns(List<String> patterns) {_		this.includePatterns = new ArrayList<>(patterns.size())__		for (String patternText : patterns) {_			this.includePatterns.add(Pattern.compile(patternText))__		}_	};set,a,list,of,regex,patterns,matching,eligible,aspect,j,bean,names,p,default,is,to,consider,all,aspect,j,beans,as,eligible;public,void,set,include,patterns,list,string,patterns,this,include,patterns,new,array,list,patterns,size,for,string,pattern,text,patterns,this,include,patterns,add,pattern,compile,pattern,text
