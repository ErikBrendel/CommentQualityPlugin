commented;modifiers;parameterAmount;loc;comment;code
false;public;1;35;;@Override public boolean handleMessage(IMessage message) throws AbortException {     Kind messageKind = message.getKind().     if (messageKind == IMessage.DEBUG) {         if (logger.isDebugEnabled()) {             logger.debug(makeMessageFor(message)).             return true.         }     } else if (messageKind == IMessage.INFO || messageKind == IMessage.WEAVEINFO) {         if (logger.isInfoEnabled()) {             logger.info(makeMessageFor(message)).             return true.         }     } else if (messageKind == IMessage.WARNING) {         if (logger.isWarnEnabled()) {             logger.warn(makeMessageFor(message)).             return true.         }     } else if (messageKind == IMessage.ERROR) {         if (logger.isErrorEnabled()) {             logger.error(makeMessageFor(message)).             return true.         }     } else if (messageKind == IMessage.ABORT) {         if (logger.isFatalEnabled()) {             logger.fatal(makeMessageFor(message)).             return true.         }     }     return false. }
false;private;1;3;;private String makeMessageFor(IMessage aMessage) {     return AJ_ID + aMessage.getMessage(). }
false;public;1;5;;@Override public boolean isIgnoring(Kind messageKind) {     // We want to see everything, and allow configuration of log levels dynamically.     return false. }
false;public;1;4;;@Override public void dontIgnore(Kind messageKind) { // We weren't ignoring anything anyway... }
false;public;1;4;;@Override public void ignore(Kind kind) { // We weren't ignoring anything anyway... }
