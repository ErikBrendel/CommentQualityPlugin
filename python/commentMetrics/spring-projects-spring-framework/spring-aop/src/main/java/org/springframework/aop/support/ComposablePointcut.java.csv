commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Apply a union with the given ClassFilter.  * @param other the ClassFilter to apply a union with  * @return this composable pointcut (for call chaining)  */ ;/**  * Apply a union with the given ClassFilter.  * @param other the ClassFilter to apply a union with  * @return this composable pointcut (for call chaining)  */ public ComposablePointcut union(ClassFilter other) {     this.classFilter = ClassFilters.union(this.classFilter, other).     return this. }
true;public;1;4;/**  * Apply an intersection with the given ClassFilter.  * @param other the ClassFilter to apply an intersection with  * @return this composable pointcut (for call chaining)  */ ;/**  * Apply an intersection with the given ClassFilter.  * @param other the ClassFilter to apply an intersection with  * @return this composable pointcut (for call chaining)  */ public ComposablePointcut intersection(ClassFilter other) {     this.classFilter = ClassFilters.intersection(this.classFilter, other).     return this. }
true;public;1;4;/**  * Apply a union with the given MethodMatcher.  * @param other the MethodMatcher to apply a union with  * @return this composable pointcut (for call chaining)  */ ;/**  * Apply a union with the given MethodMatcher.  * @param other the MethodMatcher to apply a union with  * @return this composable pointcut (for call chaining)  */ public ComposablePointcut union(MethodMatcher other) {     this.methodMatcher = MethodMatchers.union(this.methodMatcher, other).     return this. }
true;public;1;4;/**  * Apply an intersection with the given MethodMatcher.  * @param other the MethodMatcher to apply an intersection with  * @return this composable pointcut (for call chaining)  */ ;/**  * Apply an intersection with the given MethodMatcher.  * @param other the MethodMatcher to apply an intersection with  * @return this composable pointcut (for call chaining)  */ public ComposablePointcut intersection(MethodMatcher other) {     this.methodMatcher = MethodMatchers.intersection(this.methodMatcher, other).     return this. }
true;public;1;6;/**  * Apply a union with the given Pointcut.  * <p>Note that for a Pointcut union, methods will only match if their  * original ClassFilter (from the originating Pointcut) matches as well.  * MethodMatchers and ClassFilters from different Pointcuts will never  * get interleaved with each other.  * @param other the Pointcut to apply a union with  * @return this composable pointcut (for call chaining)  */ ;/**  * Apply a union with the given Pointcut.  * <p>Note that for a Pointcut union, methods will only match if their  * original ClassFilter (from the originating Pointcut) matches as well.  * MethodMatchers and ClassFilters from different Pointcuts will never  * get interleaved with each other.  * @param other the Pointcut to apply a union with  * @return this composable pointcut (for call chaining)  */ public ComposablePointcut union(Pointcut other) {     this.methodMatcher = MethodMatchers.union(this.methodMatcher, this.classFilter, other.getMethodMatcher(), other.getClassFilter()).     this.classFilter = ClassFilters.union(this.classFilter, other.getClassFilter()).     return this. }
true;public;1;5;/**  * Apply an intersection with the given Pointcut.  * @param other the Pointcut to apply an intersection with  * @return this composable pointcut (for call chaining)  */ ;/**  * Apply an intersection with the given Pointcut.  * @param other the Pointcut to apply an intersection with  * @return this composable pointcut (for call chaining)  */ public ComposablePointcut intersection(Pointcut other) {     this.classFilter = ClassFilters.intersection(this.classFilter, other.getClassFilter()).     this.methodMatcher = MethodMatchers.intersection(this.methodMatcher, other.getMethodMatcher()).     return this. }
false;public;0;4;;@Override public ClassFilter getClassFilter() {     return this.classFilter. }
false;public;0;4;;@Override public MethodMatcher getMethodMatcher() {     return this.methodMatcher. }
false;public;1;12;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof ComposablePointcut)) {         return false.     }     ComposablePointcut otherPointcut = (ComposablePointcut) other.     return (this.classFilter.equals(otherPointcut.classFilter) && this.methodMatcher.equals(otherPointcut.methodMatcher)). }
false;public;0;4;;@Override public int hashCode() {     return this.classFilter.hashCode() * 37 + this.methodMatcher.hashCode(). }
false;public;0;4;;@Override public String toString() {     return "ComposablePointcut: " + this.classFilter + ", " + this.methodMatcher. }
