commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the name of the aspect bean. This is the bean that is returned when calling  * {@link #getAspectInstance()}.  */ ;/**  * Set the name of the aspect bean. This is the bean that is returned when calling  * {@link #getAspectInstance()}.  */ public void setAspectBeanName(String aspectBeanName) {     this.aspectBeanName = aspectBeanName. }
false;public;1;5;;@Override public void setBeanFactory(BeanFactory beanFactory) {     this.beanFactory = beanFactory.     Assert.notNull(this.aspectBeanName, "'aspectBeanName' is required"). }
true;public;0;6;/**  * Look up the aspect bean from the {@link BeanFactory} and returns it.  * @see #setAspectBeanName  */ ;/**  * Look up the aspect bean from the {@link BeanFactory} and returns it.  * @see #setAspectBeanName  */ @Override public Object getAspectInstance() {     Assert.state(this.beanFactory != null, "No BeanFactory set").     Assert.state(this.aspectBeanName != null, "No 'aspectBeanName' set").     return this.beanFactory.getBean(this.aspectBeanName). }
false;public;0;10;;@Override @Nullable public ClassLoader getAspectClassLoader() {     if (this.beanFactory instanceof ConfigurableBeanFactory) {         return ((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader().     } else {         return ClassUtils.getDefaultClassLoader().     } }
false;public;0;9;;@Override public int getOrder() {     if (this.beanFactory != null && this.aspectBeanName != null && this.beanFactory.isSingleton(this.aspectBeanName) && this.beanFactory.isTypeMatch(this.aspectBeanName, Ordered.class)) {         return ((Ordered) this.beanFactory.getBean(this.aspectBeanName)).getOrder().     }     return Ordered.LOWEST_PRECEDENCE. }
