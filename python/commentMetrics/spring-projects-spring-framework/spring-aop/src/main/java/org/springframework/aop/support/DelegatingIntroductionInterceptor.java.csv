# id;timestamp;commentText;codeText;commentWords;codeWords
DelegatingIntroductionInterceptor -> private void init(Object delegate);1328020251;Both constructors use this init method, as it is impossible to pass_a "this" reference from one constructor to another._@param delegate the delegate object;private void init(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__		implementInterfacesOnObject(delegate)___		_		suppressInterface(IntroductionInterceptor.class)__		suppressInterface(DynamicIntroductionAdvice.class)__	};both,constructors,use,this,init,method,as,it,is,impossible,to,pass,a,this,reference,from,one,constructor,to,another,param,delegate,the,delegate,object;private,void,init,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate,implement,interfaces,on,object,delegate,suppress,interface,introduction,interceptor,class,suppress,interface,dynamic,introduction,advice,class
DelegatingIntroductionInterceptor -> private void init(Object delegate);1356735495;Both constructors use this init method, as it is impossible to pass_a "this" reference from one constructor to another._@param delegate the delegate object;private void init(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__		implementInterfacesOnObject(delegate)___		_		suppressInterface(IntroductionInterceptor.class)__		suppressInterface(DynamicIntroductionAdvice.class)__	};both,constructors,use,this,init,method,as,it,is,impossible,to,pass,a,this,reference,from,one,constructor,to,another,param,delegate,the,delegate,object;private,void,init,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate,implement,interfaces,on,object,delegate,suppress,interface,introduction,interceptor,class,suppress,interface,dynamic,introduction,advice,class
DelegatingIntroductionInterceptor -> private void init(Object delegate);1357119239;Both constructors use this init method, as it is impossible to pass_a "this" reference from one constructor to another._@param delegate the delegate object;private void init(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__		implementInterfacesOnObject(delegate)___		_		suppressInterface(IntroductionInterceptor.class)__		suppressInterface(DynamicIntroductionAdvice.class)__	};both,constructors,use,this,init,method,as,it,is,impossible,to,pass,a,this,reference,from,one,constructor,to,another,param,delegate,the,delegate,object;private,void,init,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate,implement,interfaces,on,object,delegate,suppress,interface,introduction,interceptor,class,suppress,interface,dynamic,introduction,advice,class
DelegatingIntroductionInterceptor -> private void init(Object delegate);1362408075;Both constructors use this init method, as it is impossible to pass_a "this" reference from one constructor to another._@param delegate the delegate object;private void init(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__		implementInterfacesOnObject(delegate)___		_		suppressInterface(IntroductionInterceptor.class)__		suppressInterface(DynamicIntroductionAdvice.class)__	};both,constructors,use,this,init,method,as,it,is,impossible,to,pass,a,this,reference,from,one,constructor,to,another,param,delegate,the,delegate,object;private,void,init,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate,implement,interfaces,on,object,delegate,suppress,interface,introduction,interceptor,class,suppress,interface,dynamic,introduction,advice,class
DelegatingIntroductionInterceptor -> private void init(Object delegate);1368482696;Both constructors use this init method, as it is impossible to pass_a "this" reference from one constructor to another._@param delegate the delegate object;private void init(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__		implementInterfacesOnObject(delegate)___		_		suppressInterface(IntroductionInterceptor.class)__		suppressInterface(DynamicIntroductionAdvice.class)__	};both,constructors,use,this,init,method,as,it,is,impossible,to,pass,a,this,reference,from,one,constructor,to,another,param,delegate,the,delegate,object;private,void,init,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate,implement,interfaces,on,object,delegate,suppress,interface,introduction,interceptor,class,suppress,interface,dynamic,introduction,advice,class
DelegatingIntroductionInterceptor -> private void init(Object delegate);1500416137;Both constructors use this init method, as it is impossible to pass_a "this" reference from one constructor to another._@param delegate the delegate object;private void init(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__		implementInterfacesOnObject(delegate)___		_		suppressInterface(IntroductionInterceptor.class)__		suppressInterface(DynamicIntroductionAdvice.class)__	};both,constructors,use,this,init,method,as,it,is,impossible,to,pass,a,this,reference,from,one,constructor,to,another,param,delegate,the,delegate,object;private,void,init,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate,implement,interfaces,on,object,delegate,suppress,interface,introduction,interceptor,class,suppress,interface,dynamic,introduction,advice,class
DelegatingIntroductionInterceptor -> private void init(Object delegate);1500495740;Both constructors use this init method, as it is impossible to pass_a "this" reference from one constructor to another._@param delegate the delegate object;private void init(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__		implementInterfacesOnObject(delegate)___		_		suppressInterface(IntroductionInterceptor.class)__		suppressInterface(DynamicIntroductionAdvice.class)__	};both,constructors,use,this,init,method,as,it,is,impossible,to,pass,a,this,reference,from,one,constructor,to,another,param,delegate,the,delegate,object;private,void,init,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate,implement,interfaces,on,object,delegate,suppress,interface,introduction,interceptor,class,suppress,interface,dynamic,introduction,advice,class
DelegatingIntroductionInterceptor -> public DelegatingIntroductionInterceptor(Object delegate);1328020251;Construct a new DelegatingIntroductionInterceptor, providing_a delegate that implements the interfaces to be introduced._@param delegate the delegate that implements the introduced interfaces;public DelegatingIntroductionInterceptor(Object delegate) {_		init(delegate)__	};construct,a,new,delegating,introduction,interceptor,providing,a,delegate,that,implements,the,interfaces,to,be,introduced,param,delegate,the,delegate,that,implements,the,introduced,interfaces;public,delegating,introduction,interceptor,object,delegate,init,delegate
DelegatingIntroductionInterceptor -> public DelegatingIntroductionInterceptor(Object delegate);1356735495;Construct a new DelegatingIntroductionInterceptor, providing_a delegate that implements the interfaces to be introduced._@param delegate the delegate that implements the introduced interfaces;public DelegatingIntroductionInterceptor(Object delegate) {_		init(delegate)__	};construct,a,new,delegating,introduction,interceptor,providing,a,delegate,that,implements,the,interfaces,to,be,introduced,param,delegate,the,delegate,that,implements,the,introduced,interfaces;public,delegating,introduction,interceptor,object,delegate,init,delegate
DelegatingIntroductionInterceptor -> public DelegatingIntroductionInterceptor(Object delegate);1357119239;Construct a new DelegatingIntroductionInterceptor, providing_a delegate that implements the interfaces to be introduced._@param delegate the delegate that implements the introduced interfaces;public DelegatingIntroductionInterceptor(Object delegate) {_		init(delegate)__	};construct,a,new,delegating,introduction,interceptor,providing,a,delegate,that,implements,the,interfaces,to,be,introduced,param,delegate,the,delegate,that,implements,the,introduced,interfaces;public,delegating,introduction,interceptor,object,delegate,init,delegate
DelegatingIntroductionInterceptor -> public DelegatingIntroductionInterceptor(Object delegate);1362408075;Construct a new DelegatingIntroductionInterceptor, providing_a delegate that implements the interfaces to be introduced._@param delegate the delegate that implements the introduced interfaces;public DelegatingIntroductionInterceptor(Object delegate) {_		init(delegate)__	};construct,a,new,delegating,introduction,interceptor,providing,a,delegate,that,implements,the,interfaces,to,be,introduced,param,delegate,the,delegate,that,implements,the,introduced,interfaces;public,delegating,introduction,interceptor,object,delegate,init,delegate
DelegatingIntroductionInterceptor -> public DelegatingIntroductionInterceptor(Object delegate);1368482696;Construct a new DelegatingIntroductionInterceptor, providing_a delegate that implements the interfaces to be introduced._@param delegate the delegate that implements the introduced interfaces;public DelegatingIntroductionInterceptor(Object delegate) {_		init(delegate)__	};construct,a,new,delegating,introduction,interceptor,providing,a,delegate,that,implements,the,interfaces,to,be,introduced,param,delegate,the,delegate,that,implements,the,introduced,interfaces;public,delegating,introduction,interceptor,object,delegate,init,delegate
DelegatingIntroductionInterceptor -> public DelegatingIntroductionInterceptor(Object delegate);1500416137;Construct a new DelegatingIntroductionInterceptor, providing_a delegate that implements the interfaces to be introduced._@param delegate the delegate that implements the introduced interfaces;public DelegatingIntroductionInterceptor(Object delegate) {_		init(delegate)__	};construct,a,new,delegating,introduction,interceptor,providing,a,delegate,that,implements,the,interfaces,to,be,introduced,param,delegate,the,delegate,that,implements,the,introduced,interfaces;public,delegating,introduction,interceptor,object,delegate,init,delegate
DelegatingIntroductionInterceptor -> public DelegatingIntroductionInterceptor(Object delegate);1500495740;Construct a new DelegatingIntroductionInterceptor, providing_a delegate that implements the interfaces to be introduced._@param delegate the delegate that implements the introduced interfaces;public DelegatingIntroductionInterceptor(Object delegate) {_		init(delegate)__	};construct,a,new,delegating,introduction,interceptor,providing,a,delegate,that,implements,the,interfaces,to,be,introduced,param,delegate,the,delegate,that,implements,the,introduced,interfaces;public,delegating,introduction,interceptor,object,delegate,init,delegate
DelegatingIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1328020251;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatingIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1356735495;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatingIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1357119239;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatingIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1362408075;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatingIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1368482696;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatingIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1500416137;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatingIntroductionInterceptor -> protected Object doProceed(MethodInvocation mi) throws Throwable;1500495740;Proceed with the supplied {@link org.aopalliance.intercept.MethodInterceptor}._Subclasses can override this method to intercept method invocations on the_target object which is useful when an introduction needs to monitor the object_that it is introduced into. This method is <strong>never</strong> called for_{@link MethodInvocation MethodInvocations} on the introduced interfaces.;protected Object doProceed(MethodInvocation mi) throws Throwable {_		_		return mi.proceed()__	};proceed,with,the,supplied,link,org,aopalliance,intercept,method,interceptor,subclasses,can,override,this,method,to,intercept,method,invocations,on,the,target,object,which,is,useful,when,an,introduction,needs,to,monitor,the,object,that,it,is,introduced,into,this,method,is,strong,never,strong,called,for,link,method,invocation,method,invocations,on,the,introduced,interfaces;protected,object,do,proceed,method,invocation,mi,throws,throwable,return,mi,proceed
DelegatingIntroductionInterceptor -> public Object invoke(MethodInvocation mi) throws Throwable;1328020251;Subclasses may need to override this if they want to  perform custom_behaviour in around advice. However, subclasses should invoke this_method, which handles introduced interfaces and forwarding to the target.;public Object invoke(MethodInvocation mi) throws Throwable {_		if (isMethodOnIntroducedInterface(mi)) {_			_			_			_			Object retVal = AopUtils.invokeJoinpointUsingReflection(this.delegate, mi.getMethod(), mi.getArguments())__			_			_			_			if (retVal == this.delegate && mi instanceof ProxyMethodInvocation) {_				Object proxy = ((ProxyMethodInvocation) mi).getProxy()__				if (mi.getMethod().getReturnType().isInstance(proxy)) {_					retVal = proxy__				}_			}_			return retVal__		}__		return doProceed(mi)__	};subclasses,may,need,to,override,this,if,they,want,to,perform,custom,behaviour,in,around,advice,however,subclasses,should,invoke,this,method,which,handles,introduced,interfaces,and,forwarding,to,the,target;public,object,invoke,method,invocation,mi,throws,throwable,if,is,method,on,introduced,interface,mi,object,ret,val,aop,utils,invoke,joinpoint,using,reflection,this,delegate,mi,get,method,mi,get,arguments,if,ret,val,this,delegate,mi,instanceof,proxy,method,invocation,object,proxy,proxy,method,invocation,mi,get,proxy,if,mi,get,method,get,return,type,is,instance,proxy,ret,val,proxy,return,ret,val,return,do,proceed,mi
DelegatingIntroductionInterceptor -> public Object invoke(MethodInvocation mi) throws Throwable;1357119239;Subclasses may need to override this if they want to  perform custom_behaviour in around advice. However, subclasses should invoke this_method, which handles introduced interfaces and forwarding to the target.;public Object invoke(MethodInvocation mi) throws Throwable {_		if (isMethodOnIntroducedInterface(mi)) {_			_			_			_			Object retVal = AopUtils.invokeJoinpointUsingReflection(this.delegate, mi.getMethod(), mi.getArguments())___			_			_			if (retVal == this.delegate && mi instanceof ProxyMethodInvocation) {_				Object proxy = ((ProxyMethodInvocation) mi).getProxy()__				if (mi.getMethod().getReturnType().isInstance(proxy)) {_					retVal = proxy__				}_			}_			return retVal__		}__		return doProceed(mi)__	};subclasses,may,need,to,override,this,if,they,want,to,perform,custom,behaviour,in,around,advice,however,subclasses,should,invoke,this,method,which,handles,introduced,interfaces,and,forwarding,to,the,target;public,object,invoke,method,invocation,mi,throws,throwable,if,is,method,on,introduced,interface,mi,object,ret,val,aop,utils,invoke,joinpoint,using,reflection,this,delegate,mi,get,method,mi,get,arguments,if,ret,val,this,delegate,mi,instanceof,proxy,method,invocation,object,proxy,proxy,method,invocation,mi,get,proxy,if,mi,get,method,get,return,type,is,instance,proxy,ret,val,proxy,return,ret,val,return,do,proceed,mi
DelegatingIntroductionInterceptor -> public Object invoke(MethodInvocation mi) throws Throwable;1362408075;Subclasses may need to override this if they want to perform custom_behaviour in around advice. However, subclasses should invoke this_method, which handles introduced interfaces and forwarding to the target.;public Object invoke(MethodInvocation mi) throws Throwable {_		if (isMethodOnIntroducedInterface(mi)) {_			_			_			_			Object retVal = AopUtils.invokeJoinpointUsingReflection(this.delegate, mi.getMethod(), mi.getArguments())___			_			_			if (retVal == this.delegate && mi instanceof ProxyMethodInvocation) {_				Object proxy = ((ProxyMethodInvocation) mi).getProxy()__				if (mi.getMethod().getReturnType().isInstance(proxy)) {_					retVal = proxy__				}_			}_			return retVal__		}__		return doProceed(mi)__	};subclasses,may,need,to,override,this,if,they,want,to,perform,custom,behaviour,in,around,advice,however,subclasses,should,invoke,this,method,which,handles,introduced,interfaces,and,forwarding,to,the,target;public,object,invoke,method,invocation,mi,throws,throwable,if,is,method,on,introduced,interface,mi,object,ret,val,aop,utils,invoke,joinpoint,using,reflection,this,delegate,mi,get,method,mi,get,arguments,if,ret,val,this,delegate,mi,instanceof,proxy,method,invocation,object,proxy,proxy,method,invocation,mi,get,proxy,if,mi,get,method,get,return,type,is,instance,proxy,ret,val,proxy,return,ret,val,return,do,proceed,mi
DelegatingIntroductionInterceptor -> protected DelegatingIntroductionInterceptor();1328020251;Construct a new DelegatingIntroductionInterceptor._The delegate will be the subclass, which must implement_additional interfaces.;protected DelegatingIntroductionInterceptor() {_		init(this)__	};construct,a,new,delegating,introduction,interceptor,the,delegate,will,be,the,subclass,which,must,implement,additional,interfaces;protected,delegating,introduction,interceptor,init,this
DelegatingIntroductionInterceptor -> protected DelegatingIntroductionInterceptor();1356735495;Construct a new DelegatingIntroductionInterceptor._The delegate will be the subclass, which must implement_additional interfaces.;protected DelegatingIntroductionInterceptor() {_		init(this)__	};construct,a,new,delegating,introduction,interceptor,the,delegate,will,be,the,subclass,which,must,implement,additional,interfaces;protected,delegating,introduction,interceptor,init,this
DelegatingIntroductionInterceptor -> protected DelegatingIntroductionInterceptor();1357119239;Construct a new DelegatingIntroductionInterceptor._The delegate will be the subclass, which must implement_additional interfaces.;protected DelegatingIntroductionInterceptor() {_		init(this)__	};construct,a,new,delegating,introduction,interceptor,the,delegate,will,be,the,subclass,which,must,implement,additional,interfaces;protected,delegating,introduction,interceptor,init,this
DelegatingIntroductionInterceptor -> protected DelegatingIntroductionInterceptor();1362408075;Construct a new DelegatingIntroductionInterceptor._The delegate will be the subclass, which must implement_additional interfaces.;protected DelegatingIntroductionInterceptor() {_		init(this)__	};construct,a,new,delegating,introduction,interceptor,the,delegate,will,be,the,subclass,which,must,implement,additional,interfaces;protected,delegating,introduction,interceptor,init,this
DelegatingIntroductionInterceptor -> protected DelegatingIntroductionInterceptor();1368482696;Construct a new DelegatingIntroductionInterceptor._The delegate will be the subclass, which must implement_additional interfaces.;protected DelegatingIntroductionInterceptor() {_		init(this)__	};construct,a,new,delegating,introduction,interceptor,the,delegate,will,be,the,subclass,which,must,implement,additional,interfaces;protected,delegating,introduction,interceptor,init,this
DelegatingIntroductionInterceptor -> protected DelegatingIntroductionInterceptor();1500416137;Construct a new DelegatingIntroductionInterceptor._The delegate will be the subclass, which must implement_additional interfaces.;protected DelegatingIntroductionInterceptor() {_		init(this)__	};construct,a,new,delegating,introduction,interceptor,the,delegate,will,be,the,subclass,which,must,implement,additional,interfaces;protected,delegating,introduction,interceptor,init,this
DelegatingIntroductionInterceptor -> protected DelegatingIntroductionInterceptor();1500495740;Construct a new DelegatingIntroductionInterceptor._The delegate will be the subclass, which must implement_additional interfaces.;protected DelegatingIntroductionInterceptor() {_		init(this)__	};construct,a,new,delegating,introduction,interceptor,the,delegate,will,be,the,subclass,which,must,implement,additional,interfaces;protected,delegating,introduction,interceptor,init,this
DelegatingIntroductionInterceptor -> @Override 	@Nullable 	public Object invoke(MethodInvocation mi) throws Throwable;1500416137;Subclasses may need to override this if they want to perform custom_behaviour in around advice. However, subclasses should invoke this_method, which handles introduced interfaces and forwarding to the target.;@Override_	@Nullable_	public Object invoke(MethodInvocation mi) throws Throwable {_		if (isMethodOnIntroducedInterface(mi)) {_			_			_			_			Object retVal = AopUtils.invokeJoinpointUsingReflection(this.delegate, mi.getMethod(), mi.getArguments())___			_			_			if (retVal == this.delegate && mi instanceof ProxyMethodInvocation) {_				Object proxy = ((ProxyMethodInvocation) mi).getProxy()__				if (mi.getMethod().getReturnType().isInstance(proxy)) {_					retVal = proxy__				}_			}_			return retVal__		}__		return doProceed(mi)__	};subclasses,may,need,to,override,this,if,they,want,to,perform,custom,behaviour,in,around,advice,however,subclasses,should,invoke,this,method,which,handles,introduced,interfaces,and,forwarding,to,the,target;override,nullable,public,object,invoke,method,invocation,mi,throws,throwable,if,is,method,on,introduced,interface,mi,object,ret,val,aop,utils,invoke,joinpoint,using,reflection,this,delegate,mi,get,method,mi,get,arguments,if,ret,val,this,delegate,mi,instanceof,proxy,method,invocation,object,proxy,proxy,method,invocation,mi,get,proxy,if,mi,get,method,get,return,type,is,instance,proxy,ret,val,proxy,return,ret,val,return,do,proceed,mi
DelegatingIntroductionInterceptor -> @Override 	@Nullable 	public Object invoke(MethodInvocation mi) throws Throwable;1500495740;Subclasses may need to override this if they want to perform custom_behaviour in around advice. However, subclasses should invoke this_method, which handles introduced interfaces and forwarding to the target.;@Override_	@Nullable_	public Object invoke(MethodInvocation mi) throws Throwable {_		if (isMethodOnIntroducedInterface(mi)) {_			_			_			_			Object retVal = AopUtils.invokeJoinpointUsingReflection(this.delegate, mi.getMethod(), mi.getArguments())___			_			_			if (retVal == this.delegate && mi instanceof ProxyMethodInvocation) {_				Object proxy = ((ProxyMethodInvocation) mi).getProxy()__				if (mi.getMethod().getReturnType().isInstance(proxy)) {_					retVal = proxy__				}_			}_			return retVal__		}__		return doProceed(mi)__	};subclasses,may,need,to,override,this,if,they,want,to,perform,custom,behaviour,in,around,advice,however,subclasses,should,invoke,this,method,which,handles,introduced,interfaces,and,forwarding,to,the,target;override,nullable,public,object,invoke,method,invocation,mi,throws,throwable,if,is,method,on,introduced,interface,mi,object,ret,val,aop,utils,invoke,joinpoint,using,reflection,this,delegate,mi,get,method,mi,get,arguments,if,ret,val,this,delegate,mi,instanceof,proxy,method,invocation,object,proxy,proxy,method,invocation,mi,get,proxy,if,mi,get,method,get,return,type,is,instance,proxy,ret,val,proxy,return,ret,val,return,do,proceed,mi
DelegatingIntroductionInterceptor -> @Override 	public Object invoke(MethodInvocation mi) throws Throwable;1356735495;Subclasses may need to override this if they want to  perform custom_behaviour in around advice. However, subclasses should invoke this_method, which handles introduced interfaces and forwarding to the target.;@Override_	public Object invoke(MethodInvocation mi) throws Throwable {_		if (isMethodOnIntroducedInterface(mi)) {_			_			_			_			Object retVal = AopUtils.invokeJoinpointUsingReflection(this.delegate, mi.getMethod(), mi.getArguments())___			_			_			if (retVal == this.delegate && mi instanceof ProxyMethodInvocation) {_				Object proxy = ((ProxyMethodInvocation) mi).getProxy()__				if (mi.getMethod().getReturnType().isInstance(proxy)) {_					retVal = proxy__				}_			}_			return retVal__		}__		return doProceed(mi)__	};subclasses,may,need,to,override,this,if,they,want,to,perform,custom,behaviour,in,around,advice,however,subclasses,should,invoke,this,method,which,handles,introduced,interfaces,and,forwarding,to,the,target;override,public,object,invoke,method,invocation,mi,throws,throwable,if,is,method,on,introduced,interface,mi,object,ret,val,aop,utils,invoke,joinpoint,using,reflection,this,delegate,mi,get,method,mi,get,arguments,if,ret,val,this,delegate,mi,instanceof,proxy,method,invocation,object,proxy,proxy,method,invocation,mi,get,proxy,if,mi,get,method,get,return,type,is,instance,proxy,ret,val,proxy,return,ret,val,return,do,proceed,mi
DelegatingIntroductionInterceptor -> @Override 	public Object invoke(MethodInvocation mi) throws Throwable;1368482696;Subclasses may need to override this if they want to perform custom_behaviour in around advice. However, subclasses should invoke this_method, which handles introduced interfaces and forwarding to the target.;@Override_	public Object invoke(MethodInvocation mi) throws Throwable {_		if (isMethodOnIntroducedInterface(mi)) {_			_			_			_			Object retVal = AopUtils.invokeJoinpointUsingReflection(this.delegate, mi.getMethod(), mi.getArguments())___			_			_			if (retVal == this.delegate && mi instanceof ProxyMethodInvocation) {_				Object proxy = ((ProxyMethodInvocation) mi).getProxy()__				if (mi.getMethod().getReturnType().isInstance(proxy)) {_					retVal = proxy__				}_			}_			return retVal__		}__		return doProceed(mi)__	};subclasses,may,need,to,override,this,if,they,want,to,perform,custom,behaviour,in,around,advice,however,subclasses,should,invoke,this,method,which,handles,introduced,interfaces,and,forwarding,to,the,target;override,public,object,invoke,method,invocation,mi,throws,throwable,if,is,method,on,introduced,interface,mi,object,ret,val,aop,utils,invoke,joinpoint,using,reflection,this,delegate,mi,get,method,mi,get,arguments,if,ret,val,this,delegate,mi,instanceof,proxy,method,invocation,object,proxy,proxy,method,invocation,mi,get,proxy,if,mi,get,method,get,return,type,is,instance,proxy,ret,val,proxy,return,ret,val,return,do,proceed,mi
