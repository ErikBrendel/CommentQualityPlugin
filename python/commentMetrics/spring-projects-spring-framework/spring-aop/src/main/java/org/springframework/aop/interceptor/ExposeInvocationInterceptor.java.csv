# id;timestamp;commentText;codeText;commentWords;codeWords
ExposeInvocationInterceptor -> private Object readResolve();1328020251;Required to support serialization. Replaces with canonical instance_on deserialization, protecting Singleton pattern._<p>Alternative to overriding the <code>equals</code> method.;private Object readResolve() {_		return INSTANCE__	};required,to,support,serialization,replaces,with,canonical,instance,on,deserialization,protecting,singleton,pattern,p,alternative,to,overriding,the,code,equals,code,method;private,object,read,resolve,return,instance
ExposeInvocationInterceptor -> private Object readResolve();1356735495;Required to support serialization. Replaces with canonical instance_on deserialization, protecting Singleton pattern._<p>Alternative to overriding the {@code equals} method.;private Object readResolve() {_		return INSTANCE__	};required,to,support,serialization,replaces,with,canonical,instance,on,deserialization,protecting,singleton,pattern,p,alternative,to,overriding,the,code,equals,method;private,object,read,resolve,return,instance
ExposeInvocationInterceptor -> private Object readResolve();1357119239;Required to support serialization. Replaces with canonical instance_on deserialization, protecting Singleton pattern._<p>Alternative to overriding the {@code equals} method.;private Object readResolve() {_		return INSTANCE__	};required,to,support,serialization,replaces,with,canonical,instance,on,deserialization,protecting,singleton,pattern,p,alternative,to,overriding,the,code,equals,method;private,object,read,resolve,return,instance
ExposeInvocationInterceptor -> private Object readResolve();1368482696;Required to support serialization. Replaces with canonical instance_on deserialization, protecting Singleton pattern._<p>Alternative to overriding the {@code equals} method.;private Object readResolve() {_		return INSTANCE__	};required,to,support,serialization,replaces,with,canonical,instance,on,deserialization,protecting,singleton,pattern,p,alternative,to,overriding,the,code,equals,method;private,object,read,resolve,return,instance
ExposeInvocationInterceptor -> private Object readResolve();1413812709;Required to support serialization. Replaces with canonical instance_on deserialization, protecting Singleton pattern._<p>Alternative to overriding the {@code equals} method.;private Object readResolve() {_		return INSTANCE__	};required,to,support,serialization,replaces,with,canonical,instance,on,deserialization,protecting,singleton,pattern,p,alternative,to,overriding,the,code,equals,method;private,object,read,resolve,return,instance
ExposeInvocationInterceptor -> private Object readResolve();1467730834;Required to support serialization. Replaces with canonical instance_on deserialization, protecting Singleton pattern._<p>Alternative to overriding the {@code equals} method.;private Object readResolve() {_		return INSTANCE__	};required,to,support,serialization,replaces,with,canonical,instance,on,deserialization,protecting,singleton,pattern,p,alternative,to,overriding,the,code,equals,method;private,object,read,resolve,return,instance
ExposeInvocationInterceptor -> private Object readResolve();1530174524;Required to support serialization. Replaces with canonical instance_on deserialization, protecting Singleton pattern._<p>Alternative to overriding the {@code equals} method.;private Object readResolve() {_		return INSTANCE__	};required,to,support,serialization,replaces,with,canonical,instance,on,deserialization,protecting,singleton,pattern,p,alternative,to,overriding,the,code,equals,method;private,object,read,resolve,return,instance
ExposeInvocationInterceptor -> private Object readResolve();1530174524;Required to support serialization. Replaces with canonical instance_on deserialization, protecting Singleton pattern._<p>Alternative to overriding the {@code equals} method.;private Object readResolve() {_		return INSTANCE__	};required,to,support,serialization,replaces,with,canonical,instance,on,deserialization,protecting,singleton,pattern,p,alternative,to,overriding,the,code,equals,method;private,object,read,resolve,return,instance
ExposeInvocationInterceptor -> private Object readResolve();1530174524;Required to support serialization. Replaces with canonical instance_on deserialization, protecting Singleton pattern._<p>Alternative to overriding the {@code equals} method.;private Object readResolve() {_		return INSTANCE__	};required,to,support,serialization,replaces,with,canonical,instance,on,deserialization,protecting,singleton,pattern,p,alternative,to,overriding,the,code,equals,method;private,object,read,resolve,return,instance
ExposeInvocationInterceptor -> public static MethodInvocation currentInvocation() throws IllegalStateException;1328020251;Return the AOP Alliance MethodInvocation object associated with the current invocation._@return the invocation object associated with the current invocation_@throws IllegalStateException if there is no AOP invocation in progress,_or if the ExposeInvocationInterceptor was not added to this interceptor chain;public static MethodInvocation currentInvocation() throws IllegalStateException {_		MethodInvocation mi = invocation.get()__		if (mi == null)_			throw new IllegalStateException(_					"No MethodInvocation found: Check that an AOP invocation is in progress, and that the " +_					"ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that " +_					"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor!")__		return mi__	};return,the,aop,alliance,method,invocation,object,associated,with,the,current,invocation,return,the,invocation,object,associated,with,the,current,invocation,throws,illegal,state,exception,if,there,is,no,aop,invocation,in,progress,or,if,the,expose,invocation,interceptor,was,not,added,to,this,interceptor,chain;public,static,method,invocation,current,invocation,throws,illegal,state,exception,method,invocation,mi,invocation,get,if,mi,null,throw,new,illegal,state,exception,no,method,invocation,found,check,that,an,aop,invocation,is,in,progress,and,that,the,expose,invocation,interceptor,is,upfront,in,the,interceptor,chain,specifically,note,that,advices,with,order,will,execute,before,expose,invocation,interceptor,return,mi
ExposeInvocationInterceptor -> public static MethodInvocation currentInvocation() throws IllegalStateException;1356735495;Return the AOP Alliance MethodInvocation object associated with the current invocation._@return the invocation object associated with the current invocation_@throws IllegalStateException if there is no AOP invocation in progress,_or if the ExposeInvocationInterceptor was not added to this interceptor chain;public static MethodInvocation currentInvocation() throws IllegalStateException {_		MethodInvocation mi = invocation.get()__		if (mi == null)_			throw new IllegalStateException(_					"No MethodInvocation found: Check that an AOP invocation is in progress, and that the " +_					"ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that " +_					"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor!")__		return mi__	};return,the,aop,alliance,method,invocation,object,associated,with,the,current,invocation,return,the,invocation,object,associated,with,the,current,invocation,throws,illegal,state,exception,if,there,is,no,aop,invocation,in,progress,or,if,the,expose,invocation,interceptor,was,not,added,to,this,interceptor,chain;public,static,method,invocation,current,invocation,throws,illegal,state,exception,method,invocation,mi,invocation,get,if,mi,null,throw,new,illegal,state,exception,no,method,invocation,found,check,that,an,aop,invocation,is,in,progress,and,that,the,expose,invocation,interceptor,is,upfront,in,the,interceptor,chain,specifically,note,that,advices,with,order,will,execute,before,expose,invocation,interceptor,return,mi
ExposeInvocationInterceptor -> public static MethodInvocation currentInvocation() throws IllegalStateException;1357119239;Return the AOP Alliance MethodInvocation object associated with the current invocation._@return the invocation object associated with the current invocation_@throws IllegalStateException if there is no AOP invocation in progress,_or if the ExposeInvocationInterceptor was not added to this interceptor chain;public static MethodInvocation currentInvocation() throws IllegalStateException {_		MethodInvocation mi = invocation.get()__		if (mi == null)_			throw new IllegalStateException(_					"No MethodInvocation found: Check that an AOP invocation is in progress, and that the " +_					"ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that " +_					"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor!")__		return mi__	};return,the,aop,alliance,method,invocation,object,associated,with,the,current,invocation,return,the,invocation,object,associated,with,the,current,invocation,throws,illegal,state,exception,if,there,is,no,aop,invocation,in,progress,or,if,the,expose,invocation,interceptor,was,not,added,to,this,interceptor,chain;public,static,method,invocation,current,invocation,throws,illegal,state,exception,method,invocation,mi,invocation,get,if,mi,null,throw,new,illegal,state,exception,no,method,invocation,found,check,that,an,aop,invocation,is,in,progress,and,that,the,expose,invocation,interceptor,is,upfront,in,the,interceptor,chain,specifically,note,that,advices,with,order,will,execute,before,expose,invocation,interceptor,return,mi
ExposeInvocationInterceptor -> public static MethodInvocation currentInvocation() throws IllegalStateException;1368482696;Return the AOP Alliance MethodInvocation object associated with the current invocation._@return the invocation object associated with the current invocation_@throws IllegalStateException if there is no AOP invocation in progress,_or if the ExposeInvocationInterceptor was not added to this interceptor chain;public static MethodInvocation currentInvocation() throws IllegalStateException {_		MethodInvocation mi = invocation.get()__		if (mi == null)_			throw new IllegalStateException(_					"No MethodInvocation found: Check that an AOP invocation is in progress, and that the " +_					"ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that " +_					"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor!")__		return mi__	};return,the,aop,alliance,method,invocation,object,associated,with,the,current,invocation,return,the,invocation,object,associated,with,the,current,invocation,throws,illegal,state,exception,if,there,is,no,aop,invocation,in,progress,or,if,the,expose,invocation,interceptor,was,not,added,to,this,interceptor,chain;public,static,method,invocation,current,invocation,throws,illegal,state,exception,method,invocation,mi,invocation,get,if,mi,null,throw,new,illegal,state,exception,no,method,invocation,found,check,that,an,aop,invocation,is,in,progress,and,that,the,expose,invocation,interceptor,is,upfront,in,the,interceptor,chain,specifically,note,that,advices,with,order,will,execute,before,expose,invocation,interceptor,return,mi
ExposeInvocationInterceptor -> public static MethodInvocation currentInvocation() throws IllegalStateException;1413812709;Return the AOP Alliance MethodInvocation object associated with the current invocation._@return the invocation object associated with the current invocation_@throws IllegalStateException if there is no AOP invocation in progress,_or if the ExposeInvocationInterceptor was not added to this interceptor chain;public static MethodInvocation currentInvocation() throws IllegalStateException {_		MethodInvocation mi = invocation.get()__		if (mi == null)_			throw new IllegalStateException(_					"No MethodInvocation found: Check that an AOP invocation is in progress, and that the " +_					"ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that " +_					"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor!")__		return mi__	};return,the,aop,alliance,method,invocation,object,associated,with,the,current,invocation,return,the,invocation,object,associated,with,the,current,invocation,throws,illegal,state,exception,if,there,is,no,aop,invocation,in,progress,or,if,the,expose,invocation,interceptor,was,not,added,to,this,interceptor,chain;public,static,method,invocation,current,invocation,throws,illegal,state,exception,method,invocation,mi,invocation,get,if,mi,null,throw,new,illegal,state,exception,no,method,invocation,found,check,that,an,aop,invocation,is,in,progress,and,that,the,expose,invocation,interceptor,is,upfront,in,the,interceptor,chain,specifically,note,that,advices,with,order,will,execute,before,expose,invocation,interceptor,return,mi
ExposeInvocationInterceptor -> public static MethodInvocation currentInvocation() throws IllegalStateException;1467730834;Return the AOP Alliance MethodInvocation object associated with the current invocation._@return the invocation object associated with the current invocation_@throws IllegalStateException if there is no AOP invocation in progress,_or if the ExposeInvocationInterceptor was not added to this interceptor chain;public static MethodInvocation currentInvocation() throws IllegalStateException {_		MethodInvocation mi = invocation.get()__		if (mi == null)_			throw new IllegalStateException(_					"No MethodInvocation found: Check that an AOP invocation is in progress, and that the " +_					"ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that " +_					"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor!")__		return mi__	};return,the,aop,alliance,method,invocation,object,associated,with,the,current,invocation,return,the,invocation,object,associated,with,the,current,invocation,throws,illegal,state,exception,if,there,is,no,aop,invocation,in,progress,or,if,the,expose,invocation,interceptor,was,not,added,to,this,interceptor,chain;public,static,method,invocation,current,invocation,throws,illegal,state,exception,method,invocation,mi,invocation,get,if,mi,null,throw,new,illegal,state,exception,no,method,invocation,found,check,that,an,aop,invocation,is,in,progress,and,that,the,expose,invocation,interceptor,is,upfront,in,the,interceptor,chain,specifically,note,that,advices,with,order,will,execute,before,expose,invocation,interceptor,return,mi
ExposeInvocationInterceptor -> public static MethodInvocation currentInvocation() throws IllegalStateException;1530174524;Return the AOP Alliance MethodInvocation object associated with the current invocation._@return the invocation object associated with the current invocation_@throws IllegalStateException if there is no AOP invocation in progress,_or if the ExposeInvocationInterceptor was not added to this interceptor chain;public static MethodInvocation currentInvocation() throws IllegalStateException {_		MethodInvocation mi = invocation.get()__		if (mi == null)_			throw new IllegalStateException(_					"No MethodInvocation found: Check that an AOP invocation is in progress, and that the " +_					"ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that " +_					"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor!")__		return mi__	};return,the,aop,alliance,method,invocation,object,associated,with,the,current,invocation,return,the,invocation,object,associated,with,the,current,invocation,throws,illegal,state,exception,if,there,is,no,aop,invocation,in,progress,or,if,the,expose,invocation,interceptor,was,not,added,to,this,interceptor,chain;public,static,method,invocation,current,invocation,throws,illegal,state,exception,method,invocation,mi,invocation,get,if,mi,null,throw,new,illegal,state,exception,no,method,invocation,found,check,that,an,aop,invocation,is,in,progress,and,that,the,expose,invocation,interceptor,is,upfront,in,the,interceptor,chain,specifically,note,that,advices,with,order,will,execute,before,expose,invocation,interceptor,return,mi
ExposeInvocationInterceptor -> public static MethodInvocation currentInvocation() throws IllegalStateException;1530174524;Return the AOP Alliance MethodInvocation object associated with the current invocation._@return the invocation object associated with the current invocation_@throws IllegalStateException if there is no AOP invocation in progress,_or if the ExposeInvocationInterceptor was not added to this interceptor chain;public static MethodInvocation currentInvocation() throws IllegalStateException {_		MethodInvocation mi = invocation.get()__		if (mi == null) {_			throw new IllegalStateException(_					"No MethodInvocation found: Check that an AOP invocation is in progress, and that the " +_					"ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that " +_					"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor!")__		}_		return mi__	};return,the,aop,alliance,method,invocation,object,associated,with,the,current,invocation,return,the,invocation,object,associated,with,the,current,invocation,throws,illegal,state,exception,if,there,is,no,aop,invocation,in,progress,or,if,the,expose,invocation,interceptor,was,not,added,to,this,interceptor,chain;public,static,method,invocation,current,invocation,throws,illegal,state,exception,method,invocation,mi,invocation,get,if,mi,null,throw,new,illegal,state,exception,no,method,invocation,found,check,that,an,aop,invocation,is,in,progress,and,that,the,expose,invocation,interceptor,is,upfront,in,the,interceptor,chain,specifically,note,that,advices,with,order,will,execute,before,expose,invocation,interceptor,return,mi
ExposeInvocationInterceptor -> public static MethodInvocation currentInvocation() throws IllegalStateException;1530174524;Return the AOP Alliance MethodInvocation object associated with the current invocation._@return the invocation object associated with the current invocation_@throws IllegalStateException if there is no AOP invocation in progress,_or if the ExposeInvocationInterceptor was not added to this interceptor chain;public static MethodInvocation currentInvocation() throws IllegalStateException {_		MethodInvocation mi = invocation.get()__		if (mi == null) {_			throw new IllegalStateException(_					"No MethodInvocation found: Check that an AOP invocation is in progress, and that the " +_					"ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that " +_					"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor!")__		}_		return mi__	};return,the,aop,alliance,method,invocation,object,associated,with,the,current,invocation,return,the,invocation,object,associated,with,the,current,invocation,throws,illegal,state,exception,if,there,is,no,aop,invocation,in,progress,or,if,the,expose,invocation,interceptor,was,not,added,to,this,interceptor,chain;public,static,method,invocation,current,invocation,throws,illegal,state,exception,method,invocation,mi,invocation,get,if,mi,null,throw,new,illegal,state,exception,no,method,invocation,found,check,that,an,aop,invocation,is,in,progress,and,that,the,expose,invocation,interceptor,is,upfront,in,the,interceptor,chain,specifically,note,that,advices,with,order,will,execute,before,expose,invocation,interceptor,return,mi
ExposeInvocationInterceptor -> private ExposeInvocationInterceptor();1328020251;Ensures that only the canonical instance can be created.;private ExposeInvocationInterceptor() {_	};ensures,that,only,the,canonical,instance,can,be,created;private,expose,invocation,interceptor
ExposeInvocationInterceptor -> private ExposeInvocationInterceptor();1356735495;Ensures that only the canonical instance can be created.;private ExposeInvocationInterceptor() {_	};ensures,that,only,the,canonical,instance,can,be,created;private,expose,invocation,interceptor
ExposeInvocationInterceptor -> private ExposeInvocationInterceptor();1357119239;Ensures that only the canonical instance can be created.;private ExposeInvocationInterceptor() {_	};ensures,that,only,the,canonical,instance,can,be,created;private,expose,invocation,interceptor
ExposeInvocationInterceptor -> private ExposeInvocationInterceptor();1368482696;Ensures that only the canonical instance can be created.;private ExposeInvocationInterceptor() {_	};ensures,that,only,the,canonical,instance,can,be,created;private,expose,invocation,interceptor
ExposeInvocationInterceptor -> private ExposeInvocationInterceptor();1413812709;Ensures that only the canonical instance can be created.;private ExposeInvocationInterceptor() {_	};ensures,that,only,the,canonical,instance,can,be,created;private,expose,invocation,interceptor
ExposeInvocationInterceptor -> private ExposeInvocationInterceptor();1467730834;Ensures that only the canonical instance can be created.;private ExposeInvocationInterceptor() {_	};ensures,that,only,the,canonical,instance,can,be,created;private,expose,invocation,interceptor
ExposeInvocationInterceptor -> private ExposeInvocationInterceptor();1530174524;Ensures that only the canonical instance can be created.;private ExposeInvocationInterceptor() {_	};ensures,that,only,the,canonical,instance,can,be,created;private,expose,invocation,interceptor
ExposeInvocationInterceptor -> private ExposeInvocationInterceptor();1530174524;Ensures that only the canonical instance can be created.;private ExposeInvocationInterceptor() {_	};ensures,that,only,the,canonical,instance,can,be,created;private,expose,invocation,interceptor
ExposeInvocationInterceptor -> private ExposeInvocationInterceptor();1530174524;Ensures that only the canonical instance can be created.;private ExposeInvocationInterceptor() {_	};ensures,that,only,the,canonical,instance,can,be,created;private,expose,invocation,interceptor
