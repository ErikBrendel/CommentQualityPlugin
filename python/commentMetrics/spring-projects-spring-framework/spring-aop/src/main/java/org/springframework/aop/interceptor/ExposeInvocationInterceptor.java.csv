commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return ExposeInvocationInterceptor.class.getName() + ".ADVISOR". }
true;public,static;0;10;/**  * Return the AOP Alliance MethodInvocation object associated with the current invocation.  * @return the invocation object associated with the current invocation  * @throws IllegalStateException if there is no AOP invocation in progress,  * or if the ExposeInvocationInterceptor was not added to this interceptor chain  */ ;/**  * Return the AOP Alliance MethodInvocation object associated with the current invocation.  * @return the invocation object associated with the current invocation  * @throws IllegalStateException if there is no AOP invocation in progress,  * or if the ExposeInvocationInterceptor was not added to this interceptor chain  */ public static MethodInvocation currentInvocation() throws IllegalStateException {     MethodInvocation mi = invocation.get().     if (mi == null) {         throw new IllegalStateException("No MethodInvocation found: Check that an AOP invocation is in progress, and that the " + "ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that " + "advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor!").     }     return mi. }
false;public;1;11;;@Override public Object invoke(MethodInvocation mi) throws Throwable {     MethodInvocation oldInvocation = invocation.get().     invocation.set(mi).     try {         return mi.proceed().     } finally {         invocation.set(oldInvocation).     } }
false;public;0;4;;@Override public int getOrder() {     return PriorityOrdered.HIGHEST_PRECEDENCE + 1. }
true;private;0;3;/**  * Required to support serialization. Replaces with canonical instance  * on deserialization, protecting Singleton pattern.  * <p>Alternative to overriding the {@code equals} method.  */ ;/**  * Required to support serialization. Replaces with canonical instance  * on deserialization, protecting Singleton pattern.  * <p>Alternative to overriding the {@code equals} method.  */ private Object readResolve() {     return INSTANCE. }
