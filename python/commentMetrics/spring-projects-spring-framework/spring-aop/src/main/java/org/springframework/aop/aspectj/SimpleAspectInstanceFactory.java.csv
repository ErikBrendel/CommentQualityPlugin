# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleAspectInstanceFactory -> public final Class<?> getAspectClass();1385412762;Return the specified aspect class (never {@code null}).;public final Class<?> getAspectClass() {_		return this.aspectClass__	};return,the,specified,aspect,class,never,code,null;public,final,class,get,aspect,class,return,this,aspect,class
SimpleAspectInstanceFactory -> public final Class<?> getAspectClass();1468948866;Return the specified aspect class (never {@code null}).;public final Class<?> getAspectClass() {_		return this.aspectClass__	};return,the,specified,aspect,class,never,code,null;public,final,class,get,aspect,class,return,this,aspect,class
SimpleAspectInstanceFactory -> public final Class<?> getAspectClass();1502974979;Return the specified aspect class (never {@code null}).;public final Class<?> getAspectClass() {_		return this.aspectClass__	};return,the,specified,aspect,class,never,code,null;public,final,class,get,aspect,class,return,this,aspect,class
SimpleAspectInstanceFactory -> public final Class<?> getAspectClass();1519832519;Return the specified aspect class (never {@code null}).;public final Class<?> getAspectClass() {_		return this.aspectClass__	};return,the,specified,aspect,class,never,code,null;public,final,class,get,aspect,class,return,this,aspect,class
SimpleAspectInstanceFactory -> public SimpleAspectInstanceFactory(Class<?> aspectClass);1385412762;Create a new SimpleAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class;public SimpleAspectInstanceFactory(Class<?> aspectClass) {_		Assert.notNull(aspectClass, "Aspect class must not be null")__		this.aspectClass = aspectClass__	};create,a,new,simple,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class;public,simple,aspect,instance,factory,class,aspect,class,assert,not,null,aspect,class,aspect,class,must,not,be,null,this,aspect,class,aspect,class
SimpleAspectInstanceFactory -> public SimpleAspectInstanceFactory(Class<?> aspectClass);1468948866;Create a new SimpleAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class;public SimpleAspectInstanceFactory(Class<?> aspectClass) {_		Assert.notNull(aspectClass, "Aspect class must not be null")__		this.aspectClass = aspectClass__	};create,a,new,simple,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class;public,simple,aspect,instance,factory,class,aspect,class,assert,not,null,aspect,class,aspect,class,must,not,be,null,this,aspect,class,aspect,class
SimpleAspectInstanceFactory -> public SimpleAspectInstanceFactory(Class<?> aspectClass);1502974979;Create a new SimpleAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class;public SimpleAspectInstanceFactory(Class<?> aspectClass) {_		Assert.notNull(aspectClass, "Aspect class must not be null")__		this.aspectClass = aspectClass__	};create,a,new,simple,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class;public,simple,aspect,instance,factory,class,aspect,class,assert,not,null,aspect,class,aspect,class,must,not,be,null,this,aspect,class,aspect,class
SimpleAspectInstanceFactory -> public SimpleAspectInstanceFactory(Class<?> aspectClass);1519832519;Create a new SimpleAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class;public SimpleAspectInstanceFactory(Class<?> aspectClass) {_		Assert.notNull(aspectClass, "Aspect class must not be null")__		this.aspectClass = aspectClass__	};create,a,new,simple,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class;public,simple,aspect,instance,factory,class,aspect,class,assert,not,null,aspect,class,aspect,class,must,not,be,null,this,aspect,class,aspect,class
SimpleAspectInstanceFactory -> public int getOrder();1328020251;Determine the order for this factory's aspect instance,_either an instance-specific order expressed through implementing_the {@link org.springframework.core.Ordered} interface,_or a fallback order._@see org.springframework.core.Ordered_@see #getOrderForAspectClass;public int getOrder() {_		return getOrderForAspectClass(this.aspectClass)__	};determine,the,order,for,this,factory,s,aspect,instance,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,or,a,fallback,order,see,org,springframework,core,ordered,see,get,order,for,aspect,class;public,int,get,order,return,get,order,for,aspect,class,this,aspect,class
SimpleAspectInstanceFactory -> public int getOrder();1357119239;Determine the order for this factory's aspect instance,_either an instance-specific order expressed through implementing_the {@link org.springframework.core.Ordered} interface,_or a fallback order._@see org.springframework.core.Ordered_@see #getOrderForAspectClass;public int getOrder() {_		return getOrderForAspectClass(this.aspectClass)__	};determine,the,order,for,this,factory,s,aspect,instance,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,or,a,fallback,order,see,org,springframework,core,ordered,see,get,order,for,aspect,class;public,int,get,order,return,get,order,for,aspect,class,this,aspect,class
SimpleAspectInstanceFactory -> protected int getOrderForAspectClass(Class<?> aspectClass);1328020251;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns <code>Ordered.LOWEST_PRECEDENCE</code>._@param aspectClass the aspect class;protected int getOrderForAspectClass(Class<?> aspectClass) {_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,code,param,aspect,class,the,aspect,class;protected,int,get,order,for,aspect,class,class,aspect,class,return,ordered
SimpleAspectInstanceFactory -> protected int getOrderForAspectClass(Class<?> aspectClass);1356735495;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;protected int getOrderForAspectClass(Class<?> aspectClass) {_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;protected,int,get,order,for,aspect,class,class,aspect,class,return,ordered
SimpleAspectInstanceFactory -> protected int getOrderForAspectClass(Class<?> aspectClass);1357119239;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;protected int getOrderForAspectClass(Class<?> aspectClass) {_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;protected,int,get,order,for,aspect,class,class,aspect,class,return,ordered
SimpleAspectInstanceFactory -> protected int getOrderForAspectClass(Class<?> aspectClass);1368482696;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;protected int getOrderForAspectClass(Class<?> aspectClass) {_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;protected,int,get,order,for,aspect,class,class,aspect,class,return,ordered
SimpleAspectInstanceFactory -> protected int getOrderForAspectClass(Class<?> aspectClass);1385412762;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;protected int getOrderForAspectClass(Class<?> aspectClass) {_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;protected,int,get,order,for,aspect,class,class,aspect,class,return,ordered
SimpleAspectInstanceFactory -> protected int getOrderForAspectClass(Class<?> aspectClass);1468948866;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;protected int getOrderForAspectClass(Class<?> aspectClass) {_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;protected,int,get,order,for,aspect,class,class,aspect,class,return,ordered
SimpleAspectInstanceFactory -> protected int getOrderForAspectClass(Class<?> aspectClass);1502974979;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;protected int getOrderForAspectClass(Class<?> aspectClass) {_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;protected,int,get,order,for,aspect,class,class,aspect,class,return,ordered
SimpleAspectInstanceFactory -> protected int getOrderForAspectClass(Class<?> aspectClass);1519832519;Determine a fallback order for the case that the aspect instance_does not express an instance-specific order through implementing_the {@link org.springframework.core.Ordered} interface._<p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}._@param aspectClass the aspect class;protected int getOrderForAspectClass(Class<?> aspectClass) {_		return Ordered.LOWEST_PRECEDENCE__	};determine,a,fallback,order,for,the,case,that,the,aspect,instance,does,not,express,an,instance,specific,order,through,implementing,the,link,org,springframework,core,ordered,interface,p,the,default,implementation,simply,returns,code,ordered,param,aspect,class,the,aspect,class;protected,int,get,order,for,aspect,class,class,aspect,class,return,ordered
SimpleAspectInstanceFactory -> @Override 	public int getOrder();1356735495;Determine the order for this factory's aspect instance,_either an instance-specific order expressed through implementing_the {@link org.springframework.core.Ordered} interface,_or a fallback order._@see org.springframework.core.Ordered_@see #getOrderForAspectClass;@Override_	public int getOrder() {_		return getOrderForAspectClass(this.aspectClass)__	};determine,the,order,for,this,factory,s,aspect,instance,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,or,a,fallback,order,see,org,springframework,core,ordered,see,get,order,for,aspect,class;override,public,int,get,order,return,get,order,for,aspect,class,this,aspect,class
SimpleAspectInstanceFactory -> @Override 	public int getOrder();1368482696;Determine the order for this factory's aspect instance,_either an instance-specific order expressed through implementing_the {@link org.springframework.core.Ordered} interface,_or a fallback order._@see org.springframework.core.Ordered_@see #getOrderForAspectClass;@Override_	public int getOrder() {_		return getOrderForAspectClass(this.aspectClass)__	};determine,the,order,for,this,factory,s,aspect,instance,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,or,a,fallback,order,see,org,springframework,core,ordered,see,get,order,for,aspect,class;override,public,int,get,order,return,get,order,for,aspect,class,this,aspect,class
SimpleAspectInstanceFactory -> @Override 	public int getOrder();1385412762;Determine the order for this factory's aspect instance,_either an instance-specific order expressed through implementing_the {@link org.springframework.core.Ordered} interface,_or a fallback order._@see org.springframework.core.Ordered_@see #getOrderForAspectClass;@Override_	public int getOrder() {_		return getOrderForAspectClass(this.aspectClass)__	};determine,the,order,for,this,factory,s,aspect,instance,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,or,a,fallback,order,see,org,springframework,core,ordered,see,get,order,for,aspect,class;override,public,int,get,order,return,get,order,for,aspect,class,this,aspect,class
SimpleAspectInstanceFactory -> @Override 	public int getOrder();1468948866;Determine the order for this factory's aspect instance,_either an instance-specific order expressed through implementing_the {@link org.springframework.core.Ordered} interface,_or a fallback order._@see org.springframework.core.Ordered_@see #getOrderForAspectClass;@Override_	public int getOrder() {_		return getOrderForAspectClass(this.aspectClass)__	};determine,the,order,for,this,factory,s,aspect,instance,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,or,a,fallback,order,see,org,springframework,core,ordered,see,get,order,for,aspect,class;override,public,int,get,order,return,get,order,for,aspect,class,this,aspect,class
SimpleAspectInstanceFactory -> @Override 	public int getOrder();1502974979;Determine the order for this factory's aspect instance,_either an instance-specific order expressed through implementing_the {@link org.springframework.core.Ordered} interface,_or a fallback order._@see org.springframework.core.Ordered_@see #getOrderForAspectClass;@Override_	public int getOrder() {_		return getOrderForAspectClass(this.aspectClass)__	};determine,the,order,for,this,factory,s,aspect,instance,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,or,a,fallback,order,see,org,springframework,core,ordered,see,get,order,for,aspect,class;override,public,int,get,order,return,get,order,for,aspect,class,this,aspect,class
SimpleAspectInstanceFactory -> @Override 	public int getOrder();1519832519;Determine the order for this factory's aspect instance,_either an instance-specific order expressed through implementing_the {@link org.springframework.core.Ordered} interface,_or a fallback order._@see org.springframework.core.Ordered_@see #getOrderForAspectClass;@Override_	public int getOrder() {_		return getOrderForAspectClass(this.aspectClass)__	};determine,the,order,for,this,factory,s,aspect,instance,either,an,instance,specific,order,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,or,a,fallback,order,see,org,springframework,core,ordered,see,get,order,for,aspect,class;override,public,int,get,order,return,get,order,for,aspect,class,this,aspect,class
SimpleAspectInstanceFactory -> public final Class getAspectClass();1328020251;Return the specified aspect class (never <code>null</code>).;public final Class getAspectClass() {_		return this.aspectClass__	};return,the,specified,aspect,class,never,code,null,code;public,final,class,get,aspect,class,return,this,aspect,class
SimpleAspectInstanceFactory -> public final Class getAspectClass();1356735495;Return the specified aspect class (never {@code null}).;public final Class getAspectClass() {_		return this.aspectClass__	};return,the,specified,aspect,class,never,code,null;public,final,class,get,aspect,class,return,this,aspect,class
SimpleAspectInstanceFactory -> public final Class getAspectClass();1357119239;Return the specified aspect class (never {@code null}).;public final Class getAspectClass() {_		return this.aspectClass__	};return,the,specified,aspect,class,never,code,null;public,final,class,get,aspect,class,return,this,aspect,class
SimpleAspectInstanceFactory -> public final Class getAspectClass();1368482696;Return the specified aspect class (never {@code null}).;public final Class getAspectClass() {_		return this.aspectClass__	};return,the,specified,aspect,class,never,code,null;public,final,class,get,aspect,class,return,this,aspect,class
SimpleAspectInstanceFactory -> public SimpleAspectInstanceFactory(Class aspectClass);1328020251;Create a new SimpleAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class;public SimpleAspectInstanceFactory(Class aspectClass) {_		Assert.notNull(aspectClass, "Aspect class must not be null")__		this.aspectClass = aspectClass__	};create,a,new,simple,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class;public,simple,aspect,instance,factory,class,aspect,class,assert,not,null,aspect,class,aspect,class,must,not,be,null,this,aspect,class,aspect,class
SimpleAspectInstanceFactory -> public SimpleAspectInstanceFactory(Class aspectClass);1356735495;Create a new SimpleAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class;public SimpleAspectInstanceFactory(Class aspectClass) {_		Assert.notNull(aspectClass, "Aspect class must not be null")__		this.aspectClass = aspectClass__	};create,a,new,simple,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class;public,simple,aspect,instance,factory,class,aspect,class,assert,not,null,aspect,class,aspect,class,must,not,be,null,this,aspect,class,aspect,class
SimpleAspectInstanceFactory -> public SimpleAspectInstanceFactory(Class aspectClass);1357119239;Create a new SimpleAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class;public SimpleAspectInstanceFactory(Class aspectClass) {_		Assert.notNull(aspectClass, "Aspect class must not be null")__		this.aspectClass = aspectClass__	};create,a,new,simple,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class;public,simple,aspect,instance,factory,class,aspect,class,assert,not,null,aspect,class,aspect,class,must,not,be,null,this,aspect,class,aspect,class
SimpleAspectInstanceFactory -> public SimpleAspectInstanceFactory(Class aspectClass);1368482696;Create a new SimpleAspectInstanceFactory for the given aspect class._@param aspectClass the aspect class;public SimpleAspectInstanceFactory(Class aspectClass) {_		Assert.notNull(aspectClass, "Aspect class must not be null")__		this.aspectClass = aspectClass__	};create,a,new,simple,aspect,instance,factory,for,the,given,aspect,class,param,aspect,class,the,aspect,class;public,simple,aspect,instance,factory,class,aspect,class,assert,not,null,aspect,class,aspect,class,must,not,be,null,this,aspect,class,aspect,class
