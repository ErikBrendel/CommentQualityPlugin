commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return the specified aspect class (never {@code null}).  */ ;/**  * Return the specified aspect class (never {@code null}).  */ public final Class<?> getAspectClass() {     return this.aspectClass. }
false;public,final;0;22;;@Override public final Object getAspectInstance() {     try {         return ReflectionUtils.accessibleConstructor(this.aspectClass).newInstance().     } catch (NoSuchMethodException ex) {         throw new AopConfigException("No default constructor on aspect class: " + this.aspectClass.getName(), ex).     } catch (InstantiationException ex) {         throw new AopConfigException("Unable to instantiate aspect class: " + this.aspectClass.getName(), ex).     } catch (IllegalAccessException ex) {         throw new AopConfigException("Could not access aspect constructor: " + this.aspectClass.getName(), ex).     } catch (InvocationTargetException ex) {         throw new AopConfigException("Failed to invoke aspect constructor: " + this.aspectClass.getName(), ex.getTargetException()).     } }
false;public;0;5;;@Override @Nullable public ClassLoader getAspectClassLoader() {     return this.aspectClass.getClassLoader(). }
true;public;0;4;/**  * Determine the order for this factory's aspect instance,  * either an instance-specific order expressed through implementing  * the {@link org.springframework.core.Ordered} interface,  * or a fallback order.  * @see org.springframework.core.Ordered  * @see #getOrderForAspectClass  */ ;/**  * Determine the order for this factory's aspect instance,  * either an instance-specific order expressed through implementing  * the {@link org.springframework.core.Ordered} interface,  * or a fallback order.  * @see org.springframework.core.Ordered  * @see #getOrderForAspectClass  */ @Override public int getOrder() {     return getOrderForAspectClass(this.aspectClass). }
true;protected;1;3;/**  * Determine a fallback order for the case that the aspect instance  * does not express an instance-specific order through implementing  * the {@link org.springframework.core.Ordered} interface.  * <p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}.  * @param aspectClass the aspect class  */ ;/**  * Determine a fallback order for the case that the aspect instance  * does not express an instance-specific order through implementing  * the {@link org.springframework.core.Ordered} interface.  * <p>The default implementation simply returns {@code Ordered.LOWEST_PRECEDENCE}.  * @param aspectClass the aspect class  */ protected int getOrderForAspectClass(Class<?> aspectClass) {     return Ordered.LOWEST_PRECEDENCE. }
