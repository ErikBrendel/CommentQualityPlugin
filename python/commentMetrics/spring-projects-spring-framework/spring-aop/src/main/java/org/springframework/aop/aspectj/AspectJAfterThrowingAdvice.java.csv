commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isBeforeAdvice() {     return false. }
false;public;0;4;;@Override public boolean isAfterAdvice() {     return true. }
false;public;1;4;;@Override public void setThrowingName(String name) {     setThrowingNameNoCheck(name). }
false;public;1;12;;@Override public Object invoke(MethodInvocation mi) throws Throwable {     try {         return mi.proceed().     } catch (Throwable ex) {         if (shouldInvokeOnThrowing(ex)) {             invokeAdviceMethod(getJoinPointMatch(), null, ex).         }         throw ex.     } }
true;private;1;3;/**  * In AspectJ semantics, after throwing advice that specifies a throwing clause  * is only invoked if the thrown exception is a subtype of the given throwing type.  */ ;/**  * In AspectJ semantics, after throwing advice that specifies a throwing clause  * is only invoked if the thrown exception is a subtype of the given throwing type.  */ private boolean shouldInvokeOnThrowing(Throwable ex) {     return getDiscoveredThrowingType().isAssignableFrom(ex.getClass()). }
