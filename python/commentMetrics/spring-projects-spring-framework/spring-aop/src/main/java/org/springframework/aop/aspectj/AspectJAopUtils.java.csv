# id;timestamp;commentText;codeText;commentWords;codeWords
AspectJAopUtils -> public static boolean isAfterAdvice(Advisor anAdvisor);1328020251;Return <code>true</code> if the advisor is a form of after advice.;public static boolean isAfterAdvice(Advisor anAdvisor) {_		AspectJPrecedenceInformation precedenceInfo = getAspectJPrecedenceInformationFor(anAdvisor)__		if (precedenceInfo != null) {_			return precedenceInfo.isAfterAdvice()__		}_		return (anAdvisor.getAdvice() instanceof AfterAdvice)__	};return,code,true,code,if,the,advisor,is,a,form,of,after,advice;public,static,boolean,is,after,advice,advisor,an,advisor,aspect,jprecedence,information,precedence,info,get,aspect,jprecedence,information,for,an,advisor,if,precedence,info,null,return,precedence,info,is,after,advice,return,an,advisor,get,advice,instanceof,after,advice
AspectJAopUtils -> public static boolean isAfterAdvice(Advisor anAdvisor);1356735495;Return {@code true} if the advisor is a form of after advice.;public static boolean isAfterAdvice(Advisor anAdvisor) {_		AspectJPrecedenceInformation precedenceInfo = getAspectJPrecedenceInformationFor(anAdvisor)__		if (precedenceInfo != null) {_			return precedenceInfo.isAfterAdvice()__		}_		return (anAdvisor.getAdvice() instanceof AfterAdvice)__	};return,code,true,if,the,advisor,is,a,form,of,after,advice;public,static,boolean,is,after,advice,advisor,an,advisor,aspect,jprecedence,information,precedence,info,get,aspect,jprecedence,information,for,an,advisor,if,precedence,info,null,return,precedence,info,is,after,advice,return,an,advisor,get,advice,instanceof,after,advice
AspectJAopUtils -> public static boolean isAfterAdvice(Advisor anAdvisor);1495868221;Return {@code true} if the advisor is a form of after advice.;public static boolean isAfterAdvice(Advisor anAdvisor) {_		AspectJPrecedenceInformation precedenceInfo = getAspectJPrecedenceInformationFor(anAdvisor)__		if (precedenceInfo != null) {_			return precedenceInfo.isAfterAdvice()__		}_		return (anAdvisor.getAdvice() instanceof AfterAdvice)__	};return,code,true,if,the,advisor,is,a,form,of,after,advice;public,static,boolean,is,after,advice,advisor,an,advisor,aspect,jprecedence,information,precedence,info,get,aspect,jprecedence,information,for,an,advisor,if,precedence,info,null,return,precedence,info,is,after,advice,return,an,advisor,get,advice,instanceof,after,advice
AspectJAopUtils -> public static boolean isBeforeAdvice(Advisor anAdvisor);1328020251;Return <code>true</code> if the advisor is a form of before advice.;public static boolean isBeforeAdvice(Advisor anAdvisor) {_		AspectJPrecedenceInformation precedenceInfo = getAspectJPrecedenceInformationFor(anAdvisor)__		if (precedenceInfo != null) {_			return precedenceInfo.isBeforeAdvice()__		}_		return (anAdvisor.getAdvice() instanceof BeforeAdvice)__	};return,code,true,code,if,the,advisor,is,a,form,of,before,advice;public,static,boolean,is,before,advice,advisor,an,advisor,aspect,jprecedence,information,precedence,info,get,aspect,jprecedence,information,for,an,advisor,if,precedence,info,null,return,precedence,info,is,before,advice,return,an,advisor,get,advice,instanceof,before,advice
AspectJAopUtils -> public static boolean isBeforeAdvice(Advisor anAdvisor);1356735495;Return {@code true} if the advisor is a form of before advice.;public static boolean isBeforeAdvice(Advisor anAdvisor) {_		AspectJPrecedenceInformation precedenceInfo = getAspectJPrecedenceInformationFor(anAdvisor)__		if (precedenceInfo != null) {_			return precedenceInfo.isBeforeAdvice()__		}_		return (anAdvisor.getAdvice() instanceof BeforeAdvice)__	};return,code,true,if,the,advisor,is,a,form,of,before,advice;public,static,boolean,is,before,advice,advisor,an,advisor,aspect,jprecedence,information,precedence,info,get,aspect,jprecedence,information,for,an,advisor,if,precedence,info,null,return,precedence,info,is,before,advice,return,an,advisor,get,advice,instanceof,before,advice
AspectJAopUtils -> public static boolean isBeforeAdvice(Advisor anAdvisor);1495868221;Return {@code true} if the advisor is a form of before advice.;public static boolean isBeforeAdvice(Advisor anAdvisor) {_		AspectJPrecedenceInformation precedenceInfo = getAspectJPrecedenceInformationFor(anAdvisor)__		if (precedenceInfo != null) {_			return precedenceInfo.isBeforeAdvice()__		}_		return (anAdvisor.getAdvice() instanceof BeforeAdvice)__	};return,code,true,if,the,advisor,is,a,form,of,before,advice;public,static,boolean,is,before,advice,advisor,an,advisor,aspect,jprecedence,information,precedence,info,get,aspect,jprecedence,information,for,an,advisor,if,precedence,info,null,return,precedence,info,is,before,advice,return,an,advisor,get,advice,instanceof,before,advice
AspectJAopUtils -> public static AspectJPrecedenceInformation getAspectJPrecedenceInformationFor(Advisor anAdvisor);1328020251;Return the AspectJPrecedenceInformation provided by this advisor or its advice._If neither the advisor nor the advice have precedence information, this method_will return <code>null</code>.;public static AspectJPrecedenceInformation getAspectJPrecedenceInformationFor(Advisor anAdvisor) {_		if (anAdvisor instanceof AspectJPrecedenceInformation) {_			return (AspectJPrecedenceInformation) anAdvisor__		}_		Advice advice = anAdvisor.getAdvice()__		if (advice instanceof AspectJPrecedenceInformation) {_			return (AspectJPrecedenceInformation) advice__		}_		return null__	};return,the,aspect,jprecedence,information,provided,by,this,advisor,or,its,advice,if,neither,the,advisor,nor,the,advice,have,precedence,information,this,method,will,return,code,null,code;public,static,aspect,jprecedence,information,get,aspect,jprecedence,information,for,advisor,an,advisor,if,an,advisor,instanceof,aspect,jprecedence,information,return,aspect,jprecedence,information,an,advisor,advice,advice,an,advisor,get,advice,if,advice,instanceof,aspect,jprecedence,information,return,aspect,jprecedence,information,advice,return,null
AspectJAopUtils -> public static AspectJPrecedenceInformation getAspectJPrecedenceInformationFor(Advisor anAdvisor);1356735495;Return the AspectJPrecedenceInformation provided by this advisor or its advice._If neither the advisor nor the advice have precedence information, this method_will return {@code null}.;public static AspectJPrecedenceInformation getAspectJPrecedenceInformationFor(Advisor anAdvisor) {_		if (anAdvisor instanceof AspectJPrecedenceInformation) {_			return (AspectJPrecedenceInformation) anAdvisor__		}_		Advice advice = anAdvisor.getAdvice()__		if (advice instanceof AspectJPrecedenceInformation) {_			return (AspectJPrecedenceInformation) advice__		}_		return null__	};return,the,aspect,jprecedence,information,provided,by,this,advisor,or,its,advice,if,neither,the,advisor,nor,the,advice,have,precedence,information,this,method,will,return,code,null;public,static,aspect,jprecedence,information,get,aspect,jprecedence,information,for,advisor,an,advisor,if,an,advisor,instanceof,aspect,jprecedence,information,return,aspect,jprecedence,information,an,advisor,advice,advice,an,advisor,get,advice,if,advice,instanceof,aspect,jprecedence,information,return,aspect,jprecedence,information,advice,return,null
