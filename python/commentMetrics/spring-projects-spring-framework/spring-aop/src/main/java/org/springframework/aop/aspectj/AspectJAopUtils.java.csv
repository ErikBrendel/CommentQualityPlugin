commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;7;/**  * Return {@code true} if the advisor is a form of before advice.  */ ;/**  * Return {@code true} if the advisor is a form of before advice.  */ public static boolean isBeforeAdvice(Advisor anAdvisor) {     AspectJPrecedenceInformation precedenceInfo = getAspectJPrecedenceInformationFor(anAdvisor).     if (precedenceInfo != null) {         return precedenceInfo.isBeforeAdvice().     }     return (anAdvisor.getAdvice() instanceof BeforeAdvice). }
true;public,static;1;7;/**  * Return {@code true} if the advisor is a form of after advice.  */ ;/**  * Return {@code true} if the advisor is a form of after advice.  */ public static boolean isAfterAdvice(Advisor anAdvisor) {     AspectJPrecedenceInformation precedenceInfo = getAspectJPrecedenceInformationFor(anAdvisor).     if (precedenceInfo != null) {         return precedenceInfo.isAfterAdvice().     }     return (anAdvisor.getAdvice() instanceof AfterAdvice). }
true;public,static;1;11;/**  * Return the AspectJPrecedenceInformation provided by this advisor or its advice.  * If neither the advisor nor the advice have precedence information, this method  * will return {@code null}.  */ ;/**  * Return the AspectJPrecedenceInformation provided by this advisor or its advice.  * If neither the advisor nor the advice have precedence information, this method  * will return {@code null}.  */ @Nullable public static AspectJPrecedenceInformation getAspectJPrecedenceInformationFor(Advisor anAdvisor) {     if (anAdvisor instanceof AspectJPrecedenceInformation) {         return (AspectJPrecedenceInformation) anAdvisor.     }     Advice advice = anAdvisor.getAdvice().     if (advice instanceof AspectJPrecedenceInformation) {         return (AspectJPrecedenceInformation) advice.     }     return null. }
