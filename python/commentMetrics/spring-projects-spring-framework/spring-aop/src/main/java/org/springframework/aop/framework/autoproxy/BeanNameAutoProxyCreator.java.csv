# id;timestamp;commentText;codeText;commentWords;codeWords
BeanNameAutoProxyCreator -> public void setBeanNames(String... beanNames);1407511029;Set the names of the beans that should automatically get wrapped with proxies._A name can specify a prefix to match by ending with "*", e.g. "myBean,tx*"_will match the bean named "myBean" and all beans whose name start with "tx"._<p><b>NOTE:</b> In case of a FactoryBean, only the objects created by the_FactoryBean will get proxied. This default behavior applies as of Spring 2.0._If you intend to proxy a FactoryBean instance itself (a rare use case, but_Spring 1.2's default behavior), specify the bean name of the FactoryBean_including the factory-bean prefix "&": e.g. "&myFactoryBean"._@see org.springframework.beans.factory.FactoryBean_@see org.springframework.beans.factory.BeanFactory#FACTORY_BEAN_PREFIX;public void setBeanNames(String... beanNames) {_		Assert.notEmpty(beanNames, "'beanNames' must not be empty")__		this.beanNames = new ArrayList<String>(beanNames.length)__		for (String mappedName : beanNames) {_			this.beanNames.add(StringUtils.trimWhitespace(mappedName))__		}_	};set,the,names,of,the,beans,that,should,automatically,get,wrapped,with,proxies,a,name,can,specify,a,prefix,to,match,by,ending,with,e,g,my,bean,tx,will,match,the,bean,named,my,bean,and,all,beans,whose,name,start,with,tx,p,b,note,b,in,case,of,a,factory,bean,only,the,objects,created,by,the,factory,bean,will,get,proxied,this,default,behavior,applies,as,of,spring,2,0,if,you,intend,to,proxy,a,factory,bean,instance,itself,a,rare,use,case,but,spring,1,2,s,default,behavior,specify,the,bean,name,of,the,factory,bean,including,the,factory,bean,prefix,e,g,my,factory,bean,see,org,springframework,beans,factory,factory,bean,see,org,springframework,beans,factory,bean,factory;public,void,set,bean,names,string,bean,names,assert,not,empty,bean,names,bean,names,must,not,be,empty,this,bean,names,new,array,list,string,bean,names,length,for,string,mapped,name,bean,names,this,bean,names,add,string,utils,trim,whitespace,mapped,name
BeanNameAutoProxyCreator -> public void setBeanNames(String... beanNames);1467730834;Set the names of the beans that should automatically get wrapped with proxies._A name can specify a prefix to match by ending with "*", e.g. "myBean,tx*"_will match the bean named "myBean" and all beans whose name start with "tx"._<p><b>NOTE:</b> In case of a FactoryBean, only the objects created by the_FactoryBean will get proxied. This default behavior applies as of Spring 2.0._If you intend to proxy a FactoryBean instance itself (a rare use case, but_Spring 1.2's default behavior), specify the bean name of the FactoryBean_including the factory-bean prefix "&": e.g. "&myFactoryBean"._@see org.springframework.beans.factory.FactoryBean_@see org.springframework.beans.factory.BeanFactory#FACTORY_BEAN_PREFIX;public void setBeanNames(String... beanNames) {_		Assert.notEmpty(beanNames, "'beanNames' must not be empty")__		this.beanNames = new ArrayList<>(beanNames.length)__		for (String mappedName : beanNames) {_			this.beanNames.add(StringUtils.trimWhitespace(mappedName))__		}_	};set,the,names,of,the,beans,that,should,automatically,get,wrapped,with,proxies,a,name,can,specify,a,prefix,to,match,by,ending,with,e,g,my,bean,tx,will,match,the,bean,named,my,bean,and,all,beans,whose,name,start,with,tx,p,b,note,b,in,case,of,a,factory,bean,only,the,objects,created,by,the,factory,bean,will,get,proxied,this,default,behavior,applies,as,of,spring,2,0,if,you,intend,to,proxy,a,factory,bean,instance,itself,a,rare,use,case,but,spring,1,2,s,default,behavior,specify,the,bean,name,of,the,factory,bean,including,the,factory,bean,prefix,e,g,my,factory,bean,see,org,springframework,beans,factory,factory,bean,see,org,springframework,beans,factory,bean,factory;public,void,set,bean,names,string,bean,names,assert,not,empty,bean,names,bean,names,must,not,be,empty,this,bean,names,new,array,list,bean,names,length,for,string,mapped,name,bean,names,this,bean,names,add,string,utils,trim,whitespace,mapped,name
BeanNameAutoProxyCreator -> public void setBeanNames(String... beanNames);1496242568;Set the names of the beans that should automatically get wrapped with proxies._A name can specify a prefix to match by ending with "*", e.g. "myBean,tx*"_will match the bean named "myBean" and all beans whose name start with "tx"._<p><b>NOTE:</b> In case of a FactoryBean, only the objects created by the_FactoryBean will get proxied. This default behavior applies as of Spring 2.0._If you intend to proxy a FactoryBean instance itself (a rare use case, but_Spring 1.2's default behavior), specify the bean name of the FactoryBean_including the factory-bean prefix "&": e.g. "&myFactoryBean"._@see org.springframework.beans.factory.FactoryBean_@see org.springframework.beans.factory.BeanFactory#FACTORY_BEAN_PREFIX;public void setBeanNames(String... beanNames) {_		Assert.notEmpty(beanNames, "'beanNames' must not be empty")__		this.beanNames = new ArrayList<>(beanNames.length)__		for (String mappedName : beanNames) {_			this.beanNames.add(StringUtils.trimWhitespace(mappedName))__		}_	};set,the,names,of,the,beans,that,should,automatically,get,wrapped,with,proxies,a,name,can,specify,a,prefix,to,match,by,ending,with,e,g,my,bean,tx,will,match,the,bean,named,my,bean,and,all,beans,whose,name,start,with,tx,p,b,note,b,in,case,of,a,factory,bean,only,the,objects,created,by,the,factory,bean,will,get,proxied,this,default,behavior,applies,as,of,spring,2,0,if,you,intend,to,proxy,a,factory,bean,instance,itself,a,rare,use,case,but,spring,1,2,s,default,behavior,specify,the,bean,name,of,the,factory,bean,including,the,factory,bean,prefix,e,g,my,factory,bean,see,org,springframework,beans,factory,factory,bean,see,org,springframework,beans,factory,bean,factory;public,void,set,bean,names,string,bean,names,assert,not,empty,bean,names,bean,names,must,not,be,empty,this,bean,names,new,array,list,bean,names,length,for,string,mapped,name,bean,names,this,bean,names,add,string,utils,trim,whitespace,mapped,name
BeanNameAutoProxyCreator -> public void setBeanNames(String... beanNames);1498780456;Set the names of the beans that should automatically get wrapped with proxies._A name can specify a prefix to match by ending with "*", e.g. "myBean,tx*"_will match the bean named "myBean" and all beans whose name start with "tx"._<p><b>NOTE:</b> In case of a FactoryBean, only the objects created by the_FactoryBean will get proxied. This default behavior applies as of Spring 2.0._If you intend to proxy a FactoryBean instance itself (a rare use case, but_Spring 1.2's default behavior), specify the bean name of the FactoryBean_including the factory-bean prefix "&": e.g. "&myFactoryBean"._@see org.springframework.beans.factory.FactoryBean_@see org.springframework.beans.factory.BeanFactory#FACTORY_BEAN_PREFIX;public void setBeanNames(String... beanNames) {_		Assert.notEmpty(beanNames, "'beanNames' must not be empty")__		this.beanNames = new ArrayList<>(beanNames.length)__		for (String mappedName : beanNames) {_			this.beanNames.add(StringUtils.trimWhitespace(mappedName))__		}_	};set,the,names,of,the,beans,that,should,automatically,get,wrapped,with,proxies,a,name,can,specify,a,prefix,to,match,by,ending,with,e,g,my,bean,tx,will,match,the,bean,named,my,bean,and,all,beans,whose,name,start,with,tx,p,b,note,b,in,case,of,a,factory,bean,only,the,objects,created,by,the,factory,bean,will,get,proxied,this,default,behavior,applies,as,of,spring,2,0,if,you,intend,to,proxy,a,factory,bean,instance,itself,a,rare,use,case,but,spring,1,2,s,default,behavior,specify,the,bean,name,of,the,factory,bean,including,the,factory,bean,prefix,e,g,my,factory,bean,see,org,springframework,beans,factory,factory,bean,see,org,springframework,beans,factory,bean,factory;public,void,set,bean,names,string,bean,names,assert,not,empty,bean,names,bean,names,must,not,be,empty,this,bean,names,new,array,list,bean,names,length,for,string,mapped,name,bean,names,this,bean,names,add,string,utils,trim,whitespace,mapped,name
BeanNameAutoProxyCreator -> public void setBeanNames(String... beanNames);1500495740;Set the names of the beans that should automatically get wrapped with proxies._A name can specify a prefix to match by ending with "*", e.g. "myBean,tx*"_will match the bean named "myBean" and all beans whose name start with "tx"._<p><b>NOTE:</b> In case of a FactoryBean, only the objects created by the_FactoryBean will get proxied. This default behavior applies as of Spring 2.0._If you intend to proxy a FactoryBean instance itself (a rare use case, but_Spring 1.2's default behavior), specify the bean name of the FactoryBean_including the factory-bean prefix "&": e.g. "&myFactoryBean"._@see org.springframework.beans.factory.FactoryBean_@see org.springframework.beans.factory.BeanFactory#FACTORY_BEAN_PREFIX;public void setBeanNames(String... beanNames) {_		Assert.notEmpty(beanNames, "'beanNames' must not be empty")__		this.beanNames = new ArrayList<>(beanNames.length)__		for (String mappedName : beanNames) {_			this.beanNames.add(StringUtils.trimWhitespace(mappedName))__		}_	};set,the,names,of,the,beans,that,should,automatically,get,wrapped,with,proxies,a,name,can,specify,a,prefix,to,match,by,ending,with,e,g,my,bean,tx,will,match,the,bean,named,my,bean,and,all,beans,whose,name,start,with,tx,p,b,note,b,in,case,of,a,factory,bean,only,the,objects,created,by,the,factory,bean,will,get,proxied,this,default,behavior,applies,as,of,spring,2,0,if,you,intend,to,proxy,a,factory,bean,instance,itself,a,rare,use,case,but,spring,1,2,s,default,behavior,specify,the,bean,name,of,the,factory,bean,including,the,factory,bean,prefix,e,g,my,factory,bean,see,org,springframework,beans,factory,factory,bean,see,org,springframework,beans,factory,bean,factory;public,void,set,bean,names,string,bean,names,assert,not,empty,bean,names,bean,names,must,not,be,empty,this,bean,names,new,array,list,bean,names,length,for,string,mapped,name,bean,names,this,bean,names,add,string,utils,trim,whitespace,mapped,name
BeanNameAutoProxyCreator -> protected boolean isMatch(String beanName, String mappedName);1328020251;Return if the given bean name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param beanName the bean name to check_@param mappedName the name in the configured list of names_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String beanName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, beanName)__	};return,if,the,given,bean,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,bean,name,the,bean,name,to,check,param,mapped,name,the,name,in,the,configured,list,of,names,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,bean,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,bean,name
BeanNameAutoProxyCreator -> protected boolean isMatch(String beanName, String mappedName);1356735495;Return if the given bean name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param beanName the bean name to check_@param mappedName the name in the configured list of names_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String beanName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, beanName)__	};return,if,the,given,bean,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,bean,name,the,bean,name,to,check,param,mapped,name,the,name,in,the,configured,list,of,names,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,bean,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,bean,name
BeanNameAutoProxyCreator -> protected boolean isMatch(String beanName, String mappedName);1385412762;Return if the given bean name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param beanName the bean name to check_@param mappedName the name in the configured list of names_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String beanName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, beanName)__	};return,if,the,given,bean,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,bean,name,the,bean,name,to,check,param,mapped,name,the,name,in,the,configured,list,of,names,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,bean,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,bean,name
BeanNameAutoProxyCreator -> protected boolean isMatch(String beanName, String mappedName);1407511029;Return if the given bean name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param beanName the bean name to check_@param mappedName the name in the configured list of names_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String beanName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, beanName)__	};return,if,the,given,bean,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,bean,name,the,bean,name,to,check,param,mapped,name,the,name,in,the,configured,list,of,names,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,bean,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,bean,name
BeanNameAutoProxyCreator -> protected boolean isMatch(String beanName, String mappedName);1467730834;Return if the given bean name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param beanName the bean name to check_@param mappedName the name in the configured list of names_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String beanName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, beanName)__	};return,if,the,given,bean,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,bean,name,the,bean,name,to,check,param,mapped,name,the,name,in,the,configured,list,of,names,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,bean,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,bean,name
BeanNameAutoProxyCreator -> protected boolean isMatch(String beanName, String mappedName);1496242568;Return if the given bean name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param beanName the bean name to check_@param mappedName the name in the configured list of names_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String beanName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, beanName)__	};return,if,the,given,bean,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,bean,name,the,bean,name,to,check,param,mapped,name,the,name,in,the,configured,list,of,names,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,bean,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,bean,name
BeanNameAutoProxyCreator -> protected boolean isMatch(String beanName, String mappedName);1498780456;Return if the given bean name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param beanName the bean name to check_@param mappedName the name in the configured list of names_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String beanName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, beanName)__	};return,if,the,given,bean,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,bean,name,the,bean,name,to,check,param,mapped,name,the,name,in,the,configured,list,of,names,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,bean,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,bean,name
BeanNameAutoProxyCreator -> protected boolean isMatch(String beanName, String mappedName);1500495740;Return if the given bean name matches the mapped name._<p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,_as well as direct equality. Can be overridden in subclasses._@param beanName the bean name to check_@param mappedName the name in the configured list of names_@return if the names match_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean isMatch(String beanName, String mappedName) {_		return PatternMatchUtils.simpleMatch(mappedName, beanName)__	};return,if,the,given,bean,name,matches,the,mapped,name,p,the,default,implementation,checks,for,xxx,xxx,and,xxx,matches,as,well,as,direct,equality,can,be,overridden,in,subclasses,param,bean,name,the,bean,name,to,check,param,mapped,name,the,name,in,the,configured,list,of,names,return,if,the,names,match,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,is,match,string,bean,name,string,mapped,name,return,pattern,match,utils,simple,match,mapped,name,bean,name
BeanNameAutoProxyCreator -> @Override 	protected Object[] getAdvicesAndAdvisorsForBean(Class beanClass, String beanName, TargetSource targetSource);1328020251;Identify as bean to proxy if the bean name is in the configured list of names.;@Override_	protected Object[] getAdvicesAndAdvisorsForBean(Class beanClass, String beanName, TargetSource targetSource) {_		if (this.beanNames != null) {_			for (String mappedName : this.beanNames) {_				if (FactoryBean.class.isAssignableFrom(beanClass)) {_					if (!mappedName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX)) {_						continue__					}_					mappedName = mappedName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())__				}_				if (isMatch(beanName, mappedName)) {_					return PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS__				}_				BeanFactory beanFactory = getBeanFactory()__				if (beanFactory != null) {_					String[] aliases = beanFactory.getAliases(beanName)__					for (String alias : aliases) {_						if (isMatch(alias, mappedName)) {_							return PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS__						}_					}_				}_			}_		}_		return DO_NOT_PROXY__	};identify,as,bean,to,proxy,if,the,bean,name,is,in,the,configured,list,of,names;override,protected,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,target,source,if,this,bean,names,null,for,string,mapped,name,this,bean,names,if,factory,bean,class,is,assignable,from,bean,class,if,mapped,name,starts,with,bean,factory,continue,mapped,name,mapped,name,substring,bean,factory,length,if,is,match,bean,name,mapped,name,return,bean,factory,bean,factory,get,bean,factory,if,bean,factory,null,string,aliases,bean,factory,get,aliases,bean,name,for,string,alias,aliases,if,is,match,alias,mapped,name,return,return
BeanNameAutoProxyCreator -> @Override 	protected Object[] getAdvicesAndAdvisorsForBean(Class beanClass, String beanName, TargetSource targetSource);1356735495;Identify as bean to proxy if the bean name is in the configured list of names.;@Override_	protected Object[] getAdvicesAndAdvisorsForBean(Class beanClass, String beanName, TargetSource targetSource) {_		if (this.beanNames != null) {_			for (String mappedName : this.beanNames) {_				if (FactoryBean.class.isAssignableFrom(beanClass)) {_					if (!mappedName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX)) {_						continue__					}_					mappedName = mappedName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())__				}_				if (isMatch(beanName, mappedName)) {_					return PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS__				}_				BeanFactory beanFactory = getBeanFactory()__				if (beanFactory != null) {_					String[] aliases = beanFactory.getAliases(beanName)__					for (String alias : aliases) {_						if (isMatch(alias, mappedName)) {_							return PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS__						}_					}_				}_			}_		}_		return DO_NOT_PROXY__	};identify,as,bean,to,proxy,if,the,bean,name,is,in,the,configured,list,of,names;override,protected,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,target,source,if,this,bean,names,null,for,string,mapped,name,this,bean,names,if,factory,bean,class,is,assignable,from,bean,class,if,mapped,name,starts,with,bean,factory,continue,mapped,name,mapped,name,substring,bean,factory,length,if,is,match,bean,name,mapped,name,return,bean,factory,bean,factory,get,bean,factory,if,bean,factory,null,string,aliases,bean,factory,get,aliases,bean,name,for,string,alias,aliases,if,is,match,alias,mapped,name,return,return
BeanNameAutoProxyCreator -> @Override 	protected Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, TargetSource targetSource);1385412762;Identify as bean to proxy if the bean name is in the configured list of names.;@Override_	protected Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, TargetSource targetSource) {_		if (this.beanNames != null) {_			for (String mappedName : this.beanNames) {_				if (FactoryBean.class.isAssignableFrom(beanClass)) {_					if (!mappedName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX)) {_						continue__					}_					mappedName = mappedName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())__				}_				if (isMatch(beanName, mappedName)) {_					return PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS__				}_				BeanFactory beanFactory = getBeanFactory()__				if (beanFactory != null) {_					String[] aliases = beanFactory.getAliases(beanName)__					for (String alias : aliases) {_						if (isMatch(alias, mappedName)) {_							return PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS__						}_					}_				}_			}_		}_		return DO_NOT_PROXY__	};identify,as,bean,to,proxy,if,the,bean,name,is,in,the,configured,list,of,names;override,protected,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,target,source,if,this,bean,names,null,for,string,mapped,name,this,bean,names,if,factory,bean,class,is,assignable,from,bean,class,if,mapped,name,starts,with,bean,factory,continue,mapped,name,mapped,name,substring,bean,factory,length,if,is,match,bean,name,mapped,name,return,bean,factory,bean,factory,get,bean,factory,if,bean,factory,null,string,aliases,bean,factory,get,aliases,bean,name,for,string,alias,aliases,if,is,match,alias,mapped,name,return,return
BeanNameAutoProxyCreator -> @Override 	protected Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, TargetSource targetSource);1407511029;Identify as bean to proxy if the bean name is in the configured list of names.;@Override_	protected Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, TargetSource targetSource) {_		if (this.beanNames != null) {_			for (String mappedName : this.beanNames) {_				if (FactoryBean.class.isAssignableFrom(beanClass)) {_					if (!mappedName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX)) {_						continue__					}_					mappedName = mappedName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())__				}_				if (isMatch(beanName, mappedName)) {_					return PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS__				}_				BeanFactory beanFactory = getBeanFactory()__				if (beanFactory != null) {_					String[] aliases = beanFactory.getAliases(beanName)__					for (String alias : aliases) {_						if (isMatch(alias, mappedName)) {_							return PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS__						}_					}_				}_			}_		}_		return DO_NOT_PROXY__	};identify,as,bean,to,proxy,if,the,bean,name,is,in,the,configured,list,of,names;override,protected,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,target,source,if,this,bean,names,null,for,string,mapped,name,this,bean,names,if,factory,bean,class,is,assignable,from,bean,class,if,mapped,name,starts,with,bean,factory,continue,mapped,name,mapped,name,substring,bean,factory,length,if,is,match,bean,name,mapped,name,return,bean,factory,bean,factory,get,bean,factory,if,bean,factory,null,string,aliases,bean,factory,get,aliases,bean,name,for,string,alias,aliases,if,is,match,alias,mapped,name,return,return
BeanNameAutoProxyCreator -> @Override 	protected Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, TargetSource targetSource);1467730834;Identify as bean to proxy if the bean name is in the configured list of names.;@Override_	protected Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, TargetSource targetSource) {_		if (this.beanNames != null) {_			for (String mappedName : this.beanNames) {_				if (FactoryBean.class.isAssignableFrom(beanClass)) {_					if (!mappedName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX)) {_						continue__					}_					mappedName = mappedName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())__				}_				if (isMatch(beanName, mappedName)) {_					return PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS__				}_				BeanFactory beanFactory = getBeanFactory()__				if (beanFactory != null) {_					String[] aliases = beanFactory.getAliases(beanName)__					for (String alias : aliases) {_						if (isMatch(alias, mappedName)) {_							return PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS__						}_					}_				}_			}_		}_		return DO_NOT_PROXY__	};identify,as,bean,to,proxy,if,the,bean,name,is,in,the,configured,list,of,names;override,protected,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,target,source,if,this,bean,names,null,for,string,mapped,name,this,bean,names,if,factory,bean,class,is,assignable,from,bean,class,if,mapped,name,starts,with,bean,factory,continue,mapped,name,mapped,name,substring,bean,factory,length,if,is,match,bean,name,mapped,name,return,bean,factory,bean,factory,get,bean,factory,if,bean,factory,null,string,aliases,bean,factory,get,aliases,bean,name,for,string,alias,aliases,if,is,match,alias,mapped,name,return,return
BeanNameAutoProxyCreator -> @Override 	@Nullable 	protected Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, @Nullable TargetSource targetSource);1496242568;Identify as bean to proxy if the bean name is in the configured list of names.;@Override_	@Nullable_	protected Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, @Nullable TargetSource targetSource) {_		if (this.beanNames != null) {_			for (String mappedName : this.beanNames) {_				if (FactoryBean.class.isAssignableFrom(beanClass)) {_					if (!mappedName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX)) {_						continue__					}_					mappedName = mappedName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())__				}_				if (isMatch(beanName, mappedName)) {_					return PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS__				}_				BeanFactory beanFactory = getBeanFactory()__				if (beanFactory != null) {_					String[] aliases = beanFactory.getAliases(beanName)__					for (String alias : aliases) {_						if (isMatch(alias, mappedName)) {_							return PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS__						}_					}_				}_			}_		}_		return DO_NOT_PROXY__	};identify,as,bean,to,proxy,if,the,bean,name,is,in,the,configured,list,of,names;override,nullable,protected,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,nullable,target,source,target,source,if,this,bean,names,null,for,string,mapped,name,this,bean,names,if,factory,bean,class,is,assignable,from,bean,class,if,mapped,name,starts,with,bean,factory,continue,mapped,name,mapped,name,substring,bean,factory,length,if,is,match,bean,name,mapped,name,return,bean,factory,bean,factory,get,bean,factory,if,bean,factory,null,string,aliases,bean,factory,get,aliases,bean,name,for,string,alias,aliases,if,is,match,alias,mapped,name,return,return
BeanNameAutoProxyCreator -> @Override 	@Nullable 	protected Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, @Nullable TargetSource targetSource);1498780456;Identify as bean to proxy if the bean name is in the configured list of names.;@Override_	@Nullable_	protected Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, @Nullable TargetSource targetSource) {_		if (this.beanNames != null) {_			for (String mappedName : this.beanNames) {_				if (FactoryBean.class.isAssignableFrom(beanClass)) {_					if (!mappedName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX)) {_						continue__					}_					mappedName = mappedName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())__				}_				if (isMatch(beanName, mappedName)) {_					return PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS__				}_				BeanFactory beanFactory = getBeanFactory()__				if (beanFactory != null) {_					String[] aliases = beanFactory.getAliases(beanName)__					for (String alias : aliases) {_						if (isMatch(alias, mappedName)) {_							return PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS__						}_					}_				}_			}_		}_		return DO_NOT_PROXY__	};identify,as,bean,to,proxy,if,the,bean,name,is,in,the,configured,list,of,names;override,nullable,protected,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,nullable,target,source,target,source,if,this,bean,names,null,for,string,mapped,name,this,bean,names,if,factory,bean,class,is,assignable,from,bean,class,if,mapped,name,starts,with,bean,factory,continue,mapped,name,mapped,name,substring,bean,factory,length,if,is,match,bean,name,mapped,name,return,bean,factory,bean,factory,get,bean,factory,if,bean,factory,null,string,aliases,bean,factory,get,aliases,bean,name,for,string,alias,aliases,if,is,match,alias,mapped,name,return,return
BeanNameAutoProxyCreator -> public void setBeanNames(String[] beanNames);1328020251;Set the names of the beans that should automatically get wrapped with proxies._A name can specify a prefix to match by ending with "*", e.g. "myBean,tx*"_will match the bean named "myBean" and all beans whose name start with "tx"._<p><b>NOTE:</b> In case of a FactoryBean, only the objects created by the_FactoryBean will get proxied. This default behavior applies as of Spring 2.0._If you intend to proxy a FactoryBean instance itself (a rare use case, but_Spring 1.2's default behavior), specify the bean name of the FactoryBean_including the factory-bean prefix "&": e.g. "&myFactoryBean"._@see org.springframework.beans.factory.FactoryBean_@see org.springframework.beans.factory.BeanFactory#FACTORY_BEAN_PREFIX;public void setBeanNames(String[] beanNames) {_		Assert.notEmpty(beanNames, "'beanNames' must not be empty")__		this.beanNames = new ArrayList<String>(beanNames.length)__		for (String mappedName : beanNames) {_			this.beanNames.add(StringUtils.trimWhitespace(mappedName))__		}_	};set,the,names,of,the,beans,that,should,automatically,get,wrapped,with,proxies,a,name,can,specify,a,prefix,to,match,by,ending,with,e,g,my,bean,tx,will,match,the,bean,named,my,bean,and,all,beans,whose,name,start,with,tx,p,b,note,b,in,case,of,a,factory,bean,only,the,objects,created,by,the,factory,bean,will,get,proxied,this,default,behavior,applies,as,of,spring,2,0,if,you,intend,to,proxy,a,factory,bean,instance,itself,a,rare,use,case,but,spring,1,2,s,default,behavior,specify,the,bean,name,of,the,factory,bean,including,the,factory,bean,prefix,e,g,my,factory,bean,see,org,springframework,beans,factory,factory,bean,see,org,springframework,beans,factory,bean,factory;public,void,set,bean,names,string,bean,names,assert,not,empty,bean,names,bean,names,must,not,be,empty,this,bean,names,new,array,list,string,bean,names,length,for,string,mapped,name,bean,names,this,bean,names,add,string,utils,trim,whitespace,mapped,name
BeanNameAutoProxyCreator -> public void setBeanNames(String[] beanNames);1356735495;Set the names of the beans that should automatically get wrapped with proxies._A name can specify a prefix to match by ending with "*", e.g. "myBean,tx*"_will match the bean named "myBean" and all beans whose name start with "tx"._<p><b>NOTE:</b> In case of a FactoryBean, only the objects created by the_FactoryBean will get proxied. This default behavior applies as of Spring 2.0._If you intend to proxy a FactoryBean instance itself (a rare use case, but_Spring 1.2's default behavior), specify the bean name of the FactoryBean_including the factory-bean prefix "&": e.g. "&myFactoryBean"._@see org.springframework.beans.factory.FactoryBean_@see org.springframework.beans.factory.BeanFactory#FACTORY_BEAN_PREFIX;public void setBeanNames(String[] beanNames) {_		Assert.notEmpty(beanNames, "'beanNames' must not be empty")__		this.beanNames = new ArrayList<String>(beanNames.length)__		for (String mappedName : beanNames) {_			this.beanNames.add(StringUtils.trimWhitespace(mappedName))__		}_	};set,the,names,of,the,beans,that,should,automatically,get,wrapped,with,proxies,a,name,can,specify,a,prefix,to,match,by,ending,with,e,g,my,bean,tx,will,match,the,bean,named,my,bean,and,all,beans,whose,name,start,with,tx,p,b,note,b,in,case,of,a,factory,bean,only,the,objects,created,by,the,factory,bean,will,get,proxied,this,default,behavior,applies,as,of,spring,2,0,if,you,intend,to,proxy,a,factory,bean,instance,itself,a,rare,use,case,but,spring,1,2,s,default,behavior,specify,the,bean,name,of,the,factory,bean,including,the,factory,bean,prefix,e,g,my,factory,bean,see,org,springframework,beans,factory,factory,bean,see,org,springframework,beans,factory,bean,factory;public,void,set,bean,names,string,bean,names,assert,not,empty,bean,names,bean,names,must,not,be,empty,this,bean,names,new,array,list,string,bean,names,length,for,string,mapped,name,bean,names,this,bean,names,add,string,utils,trim,whitespace,mapped,name
BeanNameAutoProxyCreator -> public void setBeanNames(String[] beanNames);1385412762;Set the names of the beans that should automatically get wrapped with proxies._A name can specify a prefix to match by ending with "*", e.g. "myBean,tx*"_will match the bean named "myBean" and all beans whose name start with "tx"._<p><b>NOTE:</b> In case of a FactoryBean, only the objects created by the_FactoryBean will get proxied. This default behavior applies as of Spring 2.0._If you intend to proxy a FactoryBean instance itself (a rare use case, but_Spring 1.2's default behavior), specify the bean name of the FactoryBean_including the factory-bean prefix "&": e.g. "&myFactoryBean"._@see org.springframework.beans.factory.FactoryBean_@see org.springframework.beans.factory.BeanFactory#FACTORY_BEAN_PREFIX;public void setBeanNames(String[] beanNames) {_		Assert.notEmpty(beanNames, "'beanNames' must not be empty")__		this.beanNames = new ArrayList<String>(beanNames.length)__		for (String mappedName : beanNames) {_			this.beanNames.add(StringUtils.trimWhitespace(mappedName))__		}_	};set,the,names,of,the,beans,that,should,automatically,get,wrapped,with,proxies,a,name,can,specify,a,prefix,to,match,by,ending,with,e,g,my,bean,tx,will,match,the,bean,named,my,bean,and,all,beans,whose,name,start,with,tx,p,b,note,b,in,case,of,a,factory,bean,only,the,objects,created,by,the,factory,bean,will,get,proxied,this,default,behavior,applies,as,of,spring,2,0,if,you,intend,to,proxy,a,factory,bean,instance,itself,a,rare,use,case,but,spring,1,2,s,default,behavior,specify,the,bean,name,of,the,factory,bean,including,the,factory,bean,prefix,e,g,my,factory,bean,see,org,springframework,beans,factory,factory,bean,see,org,springframework,beans,factory,bean,factory;public,void,set,bean,names,string,bean,names,assert,not,empty,bean,names,bean,names,must,not,be,empty,this,bean,names,new,array,list,string,bean,names,length,for,string,mapped,name,bean,names,this,bean,names,add,string,utils,trim,whitespace,mapped,name
