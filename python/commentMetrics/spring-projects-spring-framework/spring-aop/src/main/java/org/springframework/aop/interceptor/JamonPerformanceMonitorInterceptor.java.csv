commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether to track all invocations that go through this interceptor,  * or just invocations with trace logging enabled.  * <p>Default is "false": Only invocations with trace logging enabled will  * be monitored. Specify "true" to let JAMon track all invocations,  * gathering statistics even when trace logging is disabled.  */ ;/**  * Set whether to track all invocations that go through this interceptor,  * or just invocations with trace logging enabled.  * <p>Default is "false": Only invocations with trace logging enabled will  * be monitored. Specify "true" to let JAMon track all invocations,  * gathering statistics even when trace logging is disabled.  */ public void setTrackAllInvocations(boolean trackAllInvocations) {     this.trackAllInvocations = trackAllInvocations. }
true;protected;2;4;/**  * Always applies the interceptor if the "trackAllInvocations" flag has been set.  * else just kicks in if the log is enabled.  * @see #setTrackAllInvocations  * @see #isLogEnabled  */ ;/**  * Always applies the interceptor if the "trackAllInvocations" flag has been set.  * else just kicks in if the log is enabled.  * @see #setTrackAllInvocations  * @see #isLogEnabled  */ @Override protected boolean isInterceptorEnabled(MethodInvocation invocation, Log logger) {     return (this.trackAllInvocations || isLogEnabled(logger)). }
true;protected;2;20;/**  * Wraps the invocation with a JAMon Monitor and writes the current  * performance statistics to the log (if enabled).  * @see com.jamonapi.MonitorFactory#start  * @see com.jamonapi.Monitor#stop  */ ;/**  * Wraps the invocation with a JAMon Monitor and writes the current  * performance statistics to the log (if enabled).  * @see com.jamonapi.MonitorFactory#start  * @see com.jamonapi.Monitor#stop  */ @Override protected Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable {     String name = createInvocationTraceName(invocation).     MonKey key = new MonKeyImp(name, name, "ms.").     Monitor monitor = MonitorFactory.start(key).     try {         return invocation.proceed().     } catch (Throwable ex) {         trackException(key, ex).         throw ex.     } finally {         monitor.stop().         if (!this.trackAllInvocations || isLogEnabled(logger)) {             writeToLog(logger, "JAMon performance statistics for method [" + name + "]:\n" + monitor).         }     } }
true;protected;2;10;/**  * Count the thrown exception and put the stack trace in the details portion of the key.  * This will allow the stack trace to be viewed in the JAMon web application.  */ ;/**  * Count the thrown exception and put the stack trace in the details portion of the key.  * This will allow the stack trace to be viewed in the JAMon web application.  */ protected void trackException(MonKey key, Throwable ex) {     String stackTrace = "stackTrace=" + Misc.getExceptionTrace(ex).     key.setDetails(stackTrace).     // Specific exception counter. Example: java.lang.RuntimeException     MonitorFactory.add(new MonKeyImp(ex.getClass().getName(), stackTrace, "Exception"), 1).     // General exception counter which is a total for all exceptions thrown     MonitorFactory.add(new MonKeyImp(MonitorFactory.EXCEPTIONS_LABEL, stackTrace, "Exception"), 1). }
