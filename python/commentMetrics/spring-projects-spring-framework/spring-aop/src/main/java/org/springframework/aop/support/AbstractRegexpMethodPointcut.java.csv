# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractRegexpMethodPointcut -> public boolean matches(Method method, Class targetClass);1328020251;Try to match the regular expression against the fully qualified name_of the target class as well as against the method's declaring class,_plus the name of the method.;public boolean matches(Method method, Class targetClass) {_		return ((targetClass != null && matchesPattern(targetClass.getName() + "." + method.getName())) ||_				matchesPattern(method.getDeclaringClass().getName() + "." + method.getName()))__	};try,to,match,the,regular,expression,against,the,fully,qualified,name,of,the,target,class,as,well,as,against,the,method,s,declaring,class,plus,the,name,of,the,method;public,boolean,matches,method,method,class,target,class,return,target,class,null,matches,pattern,target,class,get,name,method,get,name,matches,pattern,method,get,declaring,class,get,name,method,get,name
AbstractRegexpMethodPointcut -> public boolean matches(Method method, Class targetClass);1353977966;Try to match the regular expression against the fully qualified name_of the target class as well as against the method's declaring class,_plus the name of the method.;public boolean matches(Method method, Class targetClass) {_		return ((targetClass != null && matchesPattern(targetClass.getName() + "." + method.getName())) ||_				matchesPattern(method.getDeclaringClass().getName() + "." + method.getName()))__	};try,to,match,the,regular,expression,against,the,fully,qualified,name,of,the,target,class,as,well,as,against,the,method,s,declaring,class,plus,the,name,of,the,method;public,boolean,matches,method,method,class,target,class,return,target,class,null,matches,pattern,target,class,get,name,method,get,name,matches,pattern,method,get,declaring,class,get,name,method,get,name
AbstractRegexpMethodPointcut -> public boolean matches(Method method, Class targetClass);1357119239;Try to match the regular expression against the fully qualified name_of the target class as well as against the method's declaring class,_plus the name of the method.;public boolean matches(Method method, Class targetClass) {_		return ((targetClass != null && matchesPattern(targetClass.getName() + "." + method.getName())) ||_				matchesPattern(method.getDeclaringClass().getName() + "." + method.getName()))__	};try,to,match,the,regular,expression,against,the,fully,qualified,name,of,the,target,class,as,well,as,against,the,method,s,declaring,class,plus,the,name,of,the,method;public,boolean,matches,method,method,class,target,class,return,target,class,null,matches,pattern,target,class,get,name,method,get,name,matches,pattern,method,get,declaring,class,get,name,method,get,name
AbstractRegexpMethodPointcut -> public void setExcludedPatterns(String... excludedPatterns);1388872086;Set the regular expressions defining methods to match for exclusion._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setExcludedPatterns(String... excludedPatterns) {_		Assert.notEmpty(excludedPatterns, "'excludedPatterns' must not be empty")__		this.excludedPatterns = new String[excludedPatterns.length]__		for (int i = 0_ i < excludedPatterns.length_ i++) {_			this.excludedPatterns[i] = StringUtils.trimWhitespace(excludedPatterns[i])__		}_		initExcludedPatternRepresentation(this.excludedPatterns)__	};set,the,regular,expressions,defining,methods,to,match,for,exclusion,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,excluded,patterns,string,excluded,patterns,assert,not,empty,excluded,patterns,excluded,patterns,must,not,be,empty,this,excluded,patterns,new,string,excluded,patterns,length,for,int,i,0,i,excluded,patterns,length,i,this,excluded,patterns,i,string,utils,trim,whitespace,excluded,patterns,i,init,excluded,pattern,representation,this,excluded,patterns
AbstractRegexpMethodPointcut -> public void setExcludedPatterns(String... excludedPatterns);1388877361;Set the regular expressions defining methods to match for exclusion._Matching will be the union of all these_ if any match, the pointcut matches._@see #setExcludedPattern;public void setExcludedPatterns(String... excludedPatterns) {_		Assert.notEmpty(excludedPatterns, "'excludedPatterns' must not be empty")__		this.excludedPatterns = new String[excludedPatterns.length]__		for (int i = 0_ i < excludedPatterns.length_ i++) {_			this.excludedPatterns[i] = StringUtils.trimWhitespace(excludedPatterns[i])__		}_		initExcludedPatternRepresentation(this.excludedPatterns)__	};set,the,regular,expressions,defining,methods,to,match,for,exclusion,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches,see,set,excluded,pattern;public,void,set,excluded,patterns,string,excluded,patterns,assert,not,empty,excluded,patterns,excluded,patterns,must,not,be,empty,this,excluded,patterns,new,string,excluded,patterns,length,for,int,i,0,i,excluded,patterns,length,i,this,excluded,patterns,i,string,utils,trim,whitespace,excluded,patterns,i,init,excluded,pattern,representation,this,excluded,patterns
AbstractRegexpMethodPointcut -> public void setExcludedPatterns(String... excludedPatterns);1477045587;Set the regular expressions defining methods to match for exclusion._Matching will be the union of all these_ if any match, the pointcut matches._@see #setExcludedPattern;public void setExcludedPatterns(String... excludedPatterns) {_		Assert.notEmpty(excludedPatterns, "'excludedPatterns' must not be empty")__		this.excludedPatterns = new String[excludedPatterns.length]__		for (int i = 0_ i < excludedPatterns.length_ i++) {_			this.excludedPatterns[i] = StringUtils.trimWhitespace(excludedPatterns[i])__		}_		initExcludedPatternRepresentation(this.excludedPatterns)__	};set,the,regular,expressions,defining,methods,to,match,for,exclusion,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches,see,set,excluded,pattern;public,void,set,excluded,patterns,string,excluded,patterns,assert,not,empty,excluded,patterns,excluded,patterns,must,not,be,empty,this,excluded,patterns,new,string,excluded,patterns,length,for,int,i,0,i,excluded,patterns,length,i,this,excluded,patterns,i,string,utils,trim,whitespace,excluded,patterns,i,init,excluded,pattern,representation,this,excluded,patterns
AbstractRegexpMethodPointcut -> public void setExcludedPatterns(String... excludedPatterns);1496242568;Set the regular expressions defining methods to match for exclusion._Matching will be the union of all these_ if any match, the pointcut matches._@see #setExcludedPattern;public void setExcludedPatterns(String... excludedPatterns) {_		Assert.notEmpty(excludedPatterns, "'excludedPatterns' must not be empty")__		this.excludedPatterns = new String[excludedPatterns.length]__		for (int i = 0_ i < excludedPatterns.length_ i++) {_			this.excludedPatterns[i] = StringUtils.trimWhitespace(excludedPatterns[i])__		}_		initExcludedPatternRepresentation(this.excludedPatterns)__	};set,the,regular,expressions,defining,methods,to,match,for,exclusion,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches,see,set,excluded,pattern;public,void,set,excluded,patterns,string,excluded,patterns,assert,not,empty,excluded,patterns,excluded,patterns,must,not,be,empty,this,excluded,patterns,new,string,excluded,patterns,length,for,int,i,0,i,excluded,patterns,length,i,this,excluded,patterns,i,string,utils,trim,whitespace,excluded,patterns,i,init,excluded,pattern,representation,this,excluded,patterns
AbstractRegexpMethodPointcut -> public void setExcludedPatterns(String... excludedPatterns);1532038651;Set the regular expressions defining methods to match for exclusion._Matching will be the union of all these_ if any match, the pointcut matches._@see #setExcludedPattern;public void setExcludedPatterns(String... excludedPatterns) {_		Assert.notEmpty(excludedPatterns, "'excludedPatterns' must not be empty")__		this.excludedPatterns = new String[excludedPatterns.length]__		for (int i = 0_ i < excludedPatterns.length_ i++) {_			this.excludedPatterns[i] = StringUtils.trimWhitespace(excludedPatterns[i])__		}_		initExcludedPatternRepresentation(this.excludedPatterns)__	};set,the,regular,expressions,defining,methods,to,match,for,exclusion,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches,see,set,excluded,pattern;public,void,set,excluded,patterns,string,excluded,patterns,assert,not,empty,excluded,patterns,excluded,patterns,must,not,be,empty,this,excluded,patterns,new,string,excluded,patterns,length,for,int,i,0,i,excluded,patterns,length,i,this,excluded,patterns,i,string,utils,trim,whitespace,excluded,patterns,i,init,excluded,pattern,representation,this,excluded,patterns
AbstractRegexpMethodPointcut -> protected abstract boolean matches(String pattern, int patternIndex)_;1328020251;Does the pattern at the given index match this string?_@param pattern <code>String</code> pattern to match_@param patternIndex index of pattern from 0_@return <code>true</code> if there is a match, else <code>false</code>.;protected abstract boolean matches(String pattern, int patternIndex)_;does,the,pattern,at,the,given,index,match,this,string,param,pattern,code,string,code,pattern,to,match,param,pattern,index,index,of,pattern,from,0,return,code,true,code,if,there,is,a,match,else,code,false,code;protected,abstract,boolean,matches,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matches(String pattern, int patternIndex)_;1353977966;Does the pattern at the given index match this string?_@param pattern <code>String</code> pattern to match_@param patternIndex index of pattern from 0_@return <code>true</code> if there is a match, else <code>false</code>.;protected abstract boolean matches(String pattern, int patternIndex)_;does,the,pattern,at,the,given,index,match,this,string,param,pattern,code,string,code,pattern,to,match,param,pattern,index,index,of,pattern,from,0,return,code,true,code,if,there,is,a,match,else,code,false,code;protected,abstract,boolean,matches,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matches(String pattern, int patternIndex)_;1356735495;Does the pattern at the given index match this string?_@param pattern {@code String} pattern to match_@param patternIndex index of pattern from 0_@return {@code true} if there is a match, else {@code false}.;protected abstract boolean matches(String pattern, int patternIndex)_;does,the,pattern,at,the,given,index,match,this,string,param,pattern,code,string,pattern,to,match,param,pattern,index,index,of,pattern,from,0,return,code,true,if,there,is,a,match,else,code,false;protected,abstract,boolean,matches,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matches(String pattern, int patternIndex)_;1357119239;Does the pattern at the given index match this string?_@param pattern {@code String} pattern to match_@param patternIndex index of pattern from 0_@return {@code true} if there is a match, else {@code false}.;protected abstract boolean matches(String pattern, int patternIndex)_;does,the,pattern,at,the,given,index,match,this,string,param,pattern,code,string,pattern,to,match,param,pattern,index,index,of,pattern,from,0,return,code,true,if,there,is,a,match,else,code,false;protected,abstract,boolean,matches,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matches(String pattern, int patternIndex)_;1368482696;Does the pattern at the given index match this string?_@param pattern {@code String} pattern to match_@param patternIndex index of pattern from 0_@return {@code true} if there is a match, else {@code false}.;protected abstract boolean matches(String pattern, int patternIndex)_;does,the,pattern,at,the,given,index,match,this,string,param,pattern,code,string,pattern,to,match,param,pattern,index,index,of,pattern,from,0,return,code,true,if,there,is,a,match,else,code,false;protected,abstract,boolean,matches,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matches(String pattern, int patternIndex)_;1385412762;Does the pattern at the given index match this string?_@param pattern {@code String} pattern to match_@param patternIndex index of pattern from 0_@return {@code true} if there is a match, else {@code false}.;protected abstract boolean matches(String pattern, int patternIndex)_;does,the,pattern,at,the,given,index,match,this,string,param,pattern,code,string,pattern,to,match,param,pattern,index,index,of,pattern,from,0,return,code,true,if,there,is,a,match,else,code,false;protected,abstract,boolean,matches,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matches(String pattern, int patternIndex)_;1388872086;Does the pattern at the given index match this string?_@param pattern {@code String} pattern to match_@param patternIndex index of pattern from 0_@return {@code true} if there is a match, else {@code false}.;protected abstract boolean matches(String pattern, int patternIndex)_;does,the,pattern,at,the,given,index,match,this,string,param,pattern,code,string,pattern,to,match,param,pattern,index,index,of,pattern,from,0,return,code,true,if,there,is,a,match,else,code,false;protected,abstract,boolean,matches,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matches(String pattern, int patternIndex)_;1388877361;Does the pattern at the given index match the given String?_@param pattern the {@code String} pattern to match_@param patternIndex index of pattern (starting from 0)_@return {@code true} if there is a match, {@code false} otherwise;protected abstract boolean matches(String pattern, int patternIndex)_;does,the,pattern,at,the,given,index,match,the,given,string,param,pattern,the,code,string,pattern,to,match,param,pattern,index,index,of,pattern,starting,from,0,return,code,true,if,there,is,a,match,code,false,otherwise;protected,abstract,boolean,matches,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matches(String pattern, int patternIndex)_;1477045587;Does the pattern at the given index match the given String?_@param pattern the {@code String} pattern to match_@param patternIndex index of pattern (starting from 0)_@return {@code true} if there is a match, {@code false} otherwise;protected abstract boolean matches(String pattern, int patternIndex)_;does,the,pattern,at,the,given,index,match,the,given,string,param,pattern,the,code,string,pattern,to,match,param,pattern,index,index,of,pattern,starting,from,0,return,code,true,if,there,is,a,match,code,false,otherwise;protected,abstract,boolean,matches,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matches(String pattern, int patternIndex)_;1496242568;Does the pattern at the given index match the given String?_@param pattern the {@code String} pattern to match_@param patternIndex index of pattern (starting from 0)_@return {@code true} if there is a match, {@code false} otherwise;protected abstract boolean matches(String pattern, int patternIndex)_;does,the,pattern,at,the,given,index,match,the,given,string,param,pattern,the,code,string,pattern,to,match,param,pattern,index,index,of,pattern,starting,from,0,return,code,true,if,there,is,a,match,code,false,otherwise;protected,abstract,boolean,matches,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matches(String pattern, int patternIndex)_;1532038651;Does the pattern at the given index match the given String?_@param pattern the {@code String} pattern to match_@param patternIndex index of pattern (starting from 0)_@return {@code true} if there is a match, {@code false} otherwise;protected abstract boolean matches(String pattern, int patternIndex)_;does,the,pattern,at,the,given,index,match,the,given,string,param,pattern,the,code,string,pattern,to,match,param,pattern,index,index,of,pattern,starting,from,0,return,code,true,if,there,is,a,match,code,false,otherwise;protected,abstract,boolean,matches,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> @Override 	public boolean matches(Method method, Class<?> targetClass);1385412762;Try to match the regular expression against the fully qualified name_of the target class as well as against the method's declaring class,_plus the name of the method.;@Override_	public boolean matches(Method method, Class<?> targetClass) {_		return ((targetClass != null && matchesPattern(targetClass.getName() + "." + method.getName())) ||_				matchesPattern(method.getDeclaringClass().getName() + "." + method.getName()))__	};try,to,match,the,regular,expression,against,the,fully,qualified,name,of,the,target,class,as,well,as,against,the,method,s,declaring,class,plus,the,name,of,the,method;override,public,boolean,matches,method,method,class,target,class,return,target,class,null,matches,pattern,target,class,get,name,method,get,name,matches,pattern,method,get,declaring,class,get,name,method,get,name
AbstractRegexpMethodPointcut -> @Override 	public boolean matches(Method method, Class<?> targetClass);1388872086;Try to match the regular expression against the fully qualified name_of the target class as well as against the method's declaring class,_plus the name of the method.;@Override_	public boolean matches(Method method, Class<?> targetClass) {_		return ((targetClass != null && matchesPattern(targetClass.getName() + "." + method.getName())) ||_				matchesPattern(method.getDeclaringClass().getName() + "." + method.getName()))__	};try,to,match,the,regular,expression,against,the,fully,qualified,name,of,the,target,class,as,well,as,against,the,method,s,declaring,class,plus,the,name,of,the,method;override,public,boolean,matches,method,method,class,target,class,return,target,class,null,matches,pattern,target,class,get,name,method,get,name,matches,pattern,method,get,declaring,class,get,name,method,get,name
AbstractRegexpMethodPointcut -> @Override 	public boolean matches(Method method, Class<?> targetClass);1388877361;Try to match the regular expression against the fully qualified name_of the target class as well as against the method's declaring class,_plus the name of the method.;@Override_	public boolean matches(Method method, Class<?> targetClass) {_		return ((targetClass != null && matchesPattern(targetClass.getName() + "." + method.getName())) ||_				matchesPattern(method.getDeclaringClass().getName() + "." + method.getName()))__	};try,to,match,the,regular,expression,against,the,fully,qualified,name,of,the,target,class,as,well,as,against,the,method,s,declaring,class,plus,the,name,of,the,method;override,public,boolean,matches,method,method,class,target,class,return,target,class,null,matches,pattern,target,class,get,name,method,get,name,matches,pattern,method,get,declaring,class,get,name,method,get,name
AbstractRegexpMethodPointcut -> @Override 	public boolean matches(Method method, Class<?> targetClass);1477045587;Try to match the regular expression against the fully qualified name_of the target class as well as against the method's declaring class,_plus the name of the method.;@Override_	public boolean matches(Method method, Class<?> targetClass) {_		return ((targetClass != null && matchesPattern(ClassUtils.getQualifiedMethodName(method, targetClass))) ||_				matchesPattern(ClassUtils.getQualifiedMethodName(method)))__	};try,to,match,the,regular,expression,against,the,fully,qualified,name,of,the,target,class,as,well,as,against,the,method,s,declaring,class,plus,the,name,of,the,method;override,public,boolean,matches,method,method,class,target,class,return,target,class,null,matches,pattern,class,utils,get,qualified,method,name,method,target,class,matches,pattern,class,utils,get,qualified,method,name,method
AbstractRegexpMethodPointcut -> @Override 	public boolean matches(Method method, Class<?> targetClass);1532038651;Try to match the regular expression against the fully qualified name_of the target class as well as against the method's declaring class,_plus the name of the method.;@Override_	public boolean matches(Method method, Class<?> targetClass) {_		return (matchesPattern(ClassUtils.getQualifiedMethodName(method, targetClass)) ||_				(targetClass != method.getDeclaringClass() &&_						matchesPattern(ClassUtils.getQualifiedMethodName(method, method.getDeclaringClass()))))__	};try,to,match,the,regular,expression,against,the,fully,qualified,name,of,the,target,class,as,well,as,against,the,method,s,declaring,class,plus,the,name,of,the,method;override,public,boolean,matches,method,method,class,target,class,return,matches,pattern,class,utils,get,qualified,method,name,method,target,class,target,class,method,get,declaring,class,matches,pattern,class,utils,get,qualified,method,name,method,method,get,declaring,class
AbstractRegexpMethodPointcut -> public void setPatterns(String... patterns);1388872086;Set the regular expressions defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setPatterns(String... patterns) {_		Assert.notEmpty(patterns, "'patterns' must not be empty")__		this.patterns = new String[patterns.length]__		for (int i = 0_ i < patterns.length_ i++) {_			this.patterns[i] = StringUtils.trimWhitespace(patterns[i])__		}_		initPatternRepresentation(this.patterns)__	};set,the,regular,expressions,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,patterns,string,patterns,assert,not,empty,patterns,patterns,must,not,be,empty,this,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,this,patterns,i,string,utils,trim,whitespace,patterns,i,init,pattern,representation,this,patterns
AbstractRegexpMethodPointcut -> public void setPatterns(String... patterns);1388877361;Set the regular expressions defining methods to match._Matching will be the union of all these_ if any match, the pointcut matches._@see #setPattern;public void setPatterns(String... patterns) {_		Assert.notEmpty(patterns, "'patterns' must not be empty")__		this.patterns = new String[patterns.length]__		for (int i = 0_ i < patterns.length_ i++) {_			this.patterns[i] = StringUtils.trimWhitespace(patterns[i])__		}_		initPatternRepresentation(this.patterns)__	};set,the,regular,expressions,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches,see,set,pattern;public,void,set,patterns,string,patterns,assert,not,empty,patterns,patterns,must,not,be,empty,this,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,this,patterns,i,string,utils,trim,whitespace,patterns,i,init,pattern,representation,this,patterns
AbstractRegexpMethodPointcut -> public void setPatterns(String... patterns);1477045587;Set the regular expressions defining methods to match._Matching will be the union of all these_ if any match, the pointcut matches._@see #setPattern;public void setPatterns(String... patterns) {_		Assert.notEmpty(patterns, "'patterns' must not be empty")__		this.patterns = new String[patterns.length]__		for (int i = 0_ i < patterns.length_ i++) {_			this.patterns[i] = StringUtils.trimWhitespace(patterns[i])__		}_		initPatternRepresentation(this.patterns)__	};set,the,regular,expressions,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches,see,set,pattern;public,void,set,patterns,string,patterns,assert,not,empty,patterns,patterns,must,not,be,empty,this,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,this,patterns,i,string,utils,trim,whitespace,patterns,i,init,pattern,representation,this,patterns
AbstractRegexpMethodPointcut -> public void setPatterns(String... patterns);1496242568;Set the regular expressions defining methods to match._Matching will be the union of all these_ if any match, the pointcut matches._@see #setPattern;public void setPatterns(String... patterns) {_		Assert.notEmpty(patterns, "'patterns' must not be empty")__		this.patterns = new String[patterns.length]__		for (int i = 0_ i < patterns.length_ i++) {_			this.patterns[i] = StringUtils.trimWhitespace(patterns[i])__		}_		initPatternRepresentation(this.patterns)__	};set,the,regular,expressions,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches,see,set,pattern;public,void,set,patterns,string,patterns,assert,not,empty,patterns,patterns,must,not,be,empty,this,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,this,patterns,i,string,utils,trim,whitespace,patterns,i,init,pattern,representation,this,patterns
AbstractRegexpMethodPointcut -> public void setPatterns(String... patterns);1532038651;Set the regular expressions defining methods to match._Matching will be the union of all these_ if any match, the pointcut matches._@see #setPattern;public void setPatterns(String... patterns) {_		Assert.notEmpty(patterns, "'patterns' must not be empty")__		this.patterns = new String[patterns.length]__		for (int i = 0_ i < patterns.length_ i++) {_			this.patterns[i] = StringUtils.trimWhitespace(patterns[i])__		}_		initPatternRepresentation(this.patterns)__	};set,the,regular,expressions,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches,see,set,pattern;public,void,set,patterns,string,patterns,assert,not,empty,patterns,patterns,must,not,be,empty,this,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,this,patterns,i,string,utils,trim,whitespace,patterns,i,init,pattern,representation,this,patterns
AbstractRegexpMethodPointcut -> @Override 	public boolean matches(Method method, Class targetClass);1356735495;Try to match the regular expression against the fully qualified name_of the target class as well as against the method's declaring class,_plus the name of the method.;@Override_	public boolean matches(Method method, Class targetClass) {_		return ((targetClass != null && matchesPattern(targetClass.getName() + "." + method.getName())) ||_				matchesPattern(method.getDeclaringClass().getName() + "." + method.getName()))__	};try,to,match,the,regular,expression,against,the,fully,qualified,name,of,the,target,class,as,well,as,against,the,method,s,declaring,class,plus,the,name,of,the,method;override,public,boolean,matches,method,method,class,target,class,return,target,class,null,matches,pattern,target,class,get,name,method,get,name,matches,pattern,method,get,declaring,class,get,name,method,get,name
AbstractRegexpMethodPointcut -> @Override 	public boolean matches(Method method, Class targetClass);1368482696;Try to match the regular expression against the fully qualified name_of the target class as well as against the method's declaring class,_plus the name of the method.;@Override_	public boolean matches(Method method, Class targetClass) {_		return ((targetClass != null && matchesPattern(targetClass.getName() + "." + method.getName())) ||_				matchesPattern(method.getDeclaringClass().getName() + "." + method.getName()))__	};try,to,match,the,regular,expression,against,the,fully,qualified,name,of,the,target,class,as,well,as,against,the,method,s,declaring,class,plus,the,name,of,the,method;override,public,boolean,matches,method,method,class,target,class,return,target,class,null,matches,pattern,target,class,get,name,method,get,name,matches,pattern,method,get,declaring,class,get,name,method,get,name
AbstractRegexpMethodPointcut -> public void setPattern(String pattern);1328020251;Convenience method when we have only a single pattern._Use either this method or {@link #setPatterns}, not both._@see #setPatterns;public void setPattern(String pattern) {_		setPatterns(new String[] {pattern})__	};convenience,method,when,we,have,only,a,single,pattern,use,either,this,method,or,link,set,patterns,not,both,see,set,patterns;public,void,set,pattern,string,pattern,set,patterns,new,string,pattern
AbstractRegexpMethodPointcut -> public void setPattern(String pattern);1353977966;Convenience method when we have only a single pattern._Use either this method or {@link #setPatterns}, not both._@see #setPatterns;public void setPattern(String pattern) {_		setPatterns(new String[] {pattern})__	};convenience,method,when,we,have,only,a,single,pattern,use,either,this,method,or,link,set,patterns,not,both,see,set,patterns;public,void,set,pattern,string,pattern,set,patterns,new,string,pattern
AbstractRegexpMethodPointcut -> public void setPattern(String pattern);1356735495;Convenience method when we have only a single pattern._Use either this method or {@link #setPatterns}, not both._@see #setPatterns;public void setPattern(String pattern) {_		setPatterns(new String[] {pattern})__	};convenience,method,when,we,have,only,a,single,pattern,use,either,this,method,or,link,set,patterns,not,both,see,set,patterns;public,void,set,pattern,string,pattern,set,patterns,new,string,pattern
AbstractRegexpMethodPointcut -> public void setPattern(String pattern);1357119239;Convenience method when we have only a single pattern._Use either this method or {@link #setPatterns}, not both._@see #setPatterns;public void setPattern(String pattern) {_		setPatterns(new String[] {pattern})__	};convenience,method,when,we,have,only,a,single,pattern,use,either,this,method,or,link,set,patterns,not,both,see,set,patterns;public,void,set,pattern,string,pattern,set,patterns,new,string,pattern
AbstractRegexpMethodPointcut -> public void setPattern(String pattern);1368482696;Convenience method when we have only a single pattern._Use either this method or {@link #setPatterns}, not both._@see #setPatterns;public void setPattern(String pattern) {_		setPatterns(new String[] {pattern})__	};convenience,method,when,we,have,only,a,single,pattern,use,either,this,method,or,link,set,patterns,not,both,see,set,patterns;public,void,set,pattern,string,pattern,set,patterns,new,string,pattern
AbstractRegexpMethodPointcut -> public void setPattern(String pattern);1385412762;Convenience method when we have only a single pattern._Use either this method or {@link #setPatterns}, not both._@see #setPatterns;public void setPattern(String pattern) {_		setPatterns(new String[] {pattern})__	};convenience,method,when,we,have,only,a,single,pattern,use,either,this,method,or,link,set,patterns,not,both,see,set,patterns;public,void,set,pattern,string,pattern,set,patterns,new,string,pattern
AbstractRegexpMethodPointcut -> public void setPattern(String pattern);1388872086;Convenience method when we have only a single pattern._Use either this method or {@link #setPatterns}, not both._@see #setPatterns;public void setPattern(String pattern) {_		setPatterns(pattern)__	};convenience,method,when,we,have,only,a,single,pattern,use,either,this,method,or,link,set,patterns,not,both,see,set,patterns;public,void,set,pattern,string,pattern,set,patterns,pattern
AbstractRegexpMethodPointcut -> public void setPattern(String pattern);1388877361;Convenience method when we have only a single pattern._Use either this method or {@link #setPatterns}, not both._@see #setPatterns;public void setPattern(String pattern) {_		setPatterns(pattern)__	};convenience,method,when,we,have,only,a,single,pattern,use,either,this,method,or,link,set,patterns,not,both,see,set,patterns;public,void,set,pattern,string,pattern,set,patterns,pattern
AbstractRegexpMethodPointcut -> public void setPattern(String pattern);1477045587;Convenience method when we have only a single pattern._Use either this method or {@link #setPatterns}, not both._@see #setPatterns;public void setPattern(String pattern) {_		setPatterns(pattern)__	};convenience,method,when,we,have,only,a,single,pattern,use,either,this,method,or,link,set,patterns,not,both,see,set,patterns;public,void,set,pattern,string,pattern,set,patterns,pattern
AbstractRegexpMethodPointcut -> public void setPattern(String pattern);1496242568;Convenience method when we have only a single pattern._Use either this method or {@link #setPatterns}, not both._@see #setPatterns;public void setPattern(String pattern) {_		setPatterns(pattern)__	};convenience,method,when,we,have,only,a,single,pattern,use,either,this,method,or,link,set,patterns,not,both,see,set,patterns;public,void,set,pattern,string,pattern,set,patterns,pattern
AbstractRegexpMethodPointcut -> public void setPattern(String pattern);1532038651;Convenience method when we have only a single pattern._Use either this method or {@link #setPatterns}, not both._@see #setPatterns;public void setPattern(String pattern) {_		setPatterns(pattern)__	};convenience,method,when,we,have,only,a,single,pattern,use,either,this,method,or,link,set,patterns,not,both,see,set,patterns;public,void,set,pattern,string,pattern,set,patterns,pattern
AbstractRegexpMethodPointcut -> public void setExcludedPattern(String excludedPattern);1328020251;Convenience method when we have only a single exclusion pattern._Use either this method or {@link #setExcludedPatterns}, not both._@see #setExcludedPatterns;public void setExcludedPattern(String excludedPattern) {_		setExcludedPatterns(new String[] {excludedPattern})__	};convenience,method,when,we,have,only,a,single,exclusion,pattern,use,either,this,method,or,link,set,excluded,patterns,not,both,see,set,excluded,patterns;public,void,set,excluded,pattern,string,excluded,pattern,set,excluded,patterns,new,string,excluded,pattern
AbstractRegexpMethodPointcut -> public void setExcludedPattern(String excludedPattern);1353977966;Convenience method when we have only a single exclusion pattern._Use either this method or {@link #setExcludedPatterns}, not both._@see #setExcludedPatterns;public void setExcludedPattern(String excludedPattern) {_		setExcludedPatterns(new String[] {excludedPattern})__	};convenience,method,when,we,have,only,a,single,exclusion,pattern,use,either,this,method,or,link,set,excluded,patterns,not,both,see,set,excluded,patterns;public,void,set,excluded,pattern,string,excluded,pattern,set,excluded,patterns,new,string,excluded,pattern
AbstractRegexpMethodPointcut -> public void setExcludedPattern(String excludedPattern);1356735495;Convenience method when we have only a single exclusion pattern._Use either this method or {@link #setExcludedPatterns}, not both._@see #setExcludedPatterns;public void setExcludedPattern(String excludedPattern) {_		setExcludedPatterns(new String[] {excludedPattern})__	};convenience,method,when,we,have,only,a,single,exclusion,pattern,use,either,this,method,or,link,set,excluded,patterns,not,both,see,set,excluded,patterns;public,void,set,excluded,pattern,string,excluded,pattern,set,excluded,patterns,new,string,excluded,pattern
AbstractRegexpMethodPointcut -> public void setExcludedPattern(String excludedPattern);1357119239;Convenience method when we have only a single exclusion pattern._Use either this method or {@link #setExcludedPatterns}, not both._@see #setExcludedPatterns;public void setExcludedPattern(String excludedPattern) {_		setExcludedPatterns(new String[] {excludedPattern})__	};convenience,method,when,we,have,only,a,single,exclusion,pattern,use,either,this,method,or,link,set,excluded,patterns,not,both,see,set,excluded,patterns;public,void,set,excluded,pattern,string,excluded,pattern,set,excluded,patterns,new,string,excluded,pattern
AbstractRegexpMethodPointcut -> public void setExcludedPattern(String excludedPattern);1368482696;Convenience method when we have only a single exclusion pattern._Use either this method or {@link #setExcludedPatterns}, not both._@see #setExcludedPatterns;public void setExcludedPattern(String excludedPattern) {_		setExcludedPatterns(new String[] {excludedPattern})__	};convenience,method,when,we,have,only,a,single,exclusion,pattern,use,either,this,method,or,link,set,excluded,patterns,not,both,see,set,excluded,patterns;public,void,set,excluded,pattern,string,excluded,pattern,set,excluded,patterns,new,string,excluded,pattern
AbstractRegexpMethodPointcut -> public void setExcludedPattern(String excludedPattern);1385412762;Convenience method when we have only a single exclusion pattern._Use either this method or {@link #setExcludedPatterns}, not both._@see #setExcludedPatterns;public void setExcludedPattern(String excludedPattern) {_		setExcludedPatterns(new String[] {excludedPattern})__	};convenience,method,when,we,have,only,a,single,exclusion,pattern,use,either,this,method,or,link,set,excluded,patterns,not,both,see,set,excluded,patterns;public,void,set,excluded,pattern,string,excluded,pattern,set,excluded,patterns,new,string,excluded,pattern
AbstractRegexpMethodPointcut -> public void setExcludedPattern(String excludedPattern);1388872086;Convenience method when we have only a single exclusion pattern._Use either this method or {@link #setExcludedPatterns}, not both._@see #setExcludedPatterns;public void setExcludedPattern(String excludedPattern) {_		setExcludedPatterns(excludedPattern)__	};convenience,method,when,we,have,only,a,single,exclusion,pattern,use,either,this,method,or,link,set,excluded,patterns,not,both,see,set,excluded,patterns;public,void,set,excluded,pattern,string,excluded,pattern,set,excluded,patterns,excluded,pattern
AbstractRegexpMethodPointcut -> public void setExcludedPattern(String excludedPattern);1388877361;Convenience method when we have only a single exclusion pattern._Use either this method or {@link #setExcludedPatterns}, not both._@see #setExcludedPatterns;public void setExcludedPattern(String excludedPattern) {_		setExcludedPatterns(excludedPattern)__	};convenience,method,when,we,have,only,a,single,exclusion,pattern,use,either,this,method,or,link,set,excluded,patterns,not,both,see,set,excluded,patterns;public,void,set,excluded,pattern,string,excluded,pattern,set,excluded,patterns,excluded,pattern
AbstractRegexpMethodPointcut -> public void setExcludedPattern(String excludedPattern);1477045587;Convenience method when we have only a single exclusion pattern._Use either this method or {@link #setExcludedPatterns}, not both._@see #setExcludedPatterns;public void setExcludedPattern(String excludedPattern) {_		setExcludedPatterns(excludedPattern)__	};convenience,method,when,we,have,only,a,single,exclusion,pattern,use,either,this,method,or,link,set,excluded,patterns,not,both,see,set,excluded,patterns;public,void,set,excluded,pattern,string,excluded,pattern,set,excluded,patterns,excluded,pattern
AbstractRegexpMethodPointcut -> public void setExcludedPattern(String excludedPattern);1496242568;Convenience method when we have only a single exclusion pattern._Use either this method or {@link #setExcludedPatterns}, not both._@see #setExcludedPatterns;public void setExcludedPattern(String excludedPattern) {_		setExcludedPatterns(excludedPattern)__	};convenience,method,when,we,have,only,a,single,exclusion,pattern,use,either,this,method,or,link,set,excluded,patterns,not,both,see,set,excluded,patterns;public,void,set,excluded,pattern,string,excluded,pattern,set,excluded,patterns,excluded,pattern
AbstractRegexpMethodPointcut -> public void setExcludedPattern(String excludedPattern);1532038651;Convenience method when we have only a single exclusion pattern._Use either this method or {@link #setExcludedPatterns}, not both._@see #setExcludedPatterns;public void setExcludedPattern(String excludedPattern) {_		setExcludedPatterns(excludedPattern)__	};convenience,method,when,we,have,only,a,single,exclusion,pattern,use,either,this,method,or,link,set,excluded,patterns,not,both,see,set,excluded,patterns;public,void,set,excluded,pattern,string,excluded,pattern,set,excluded,patterns,excluded,pattern
AbstractRegexpMethodPointcut -> public void setExcludedPatterns(String[] excludedPatterns);1328020251;Set the regular expressions defining methods to match for exclusion._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setExcludedPatterns(String[] excludedPatterns) {_		Assert.notEmpty(excludedPatterns, "'excludedPatterns' must not be empty")__		this.excludedPatterns = new String[excludedPatterns.length]__		for (int i = 0_ i < excludedPatterns.length_ i++) {_			this.excludedPatterns[i] = StringUtils.trimWhitespace(excludedPatterns[i])__		}_		initExcludedPatternRepresentation(this.excludedPatterns)__	};set,the,regular,expressions,defining,methods,to,match,for,exclusion,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,excluded,patterns,string,excluded,patterns,assert,not,empty,excluded,patterns,excluded,patterns,must,not,be,empty,this,excluded,patterns,new,string,excluded,patterns,length,for,int,i,0,i,excluded,patterns,length,i,this,excluded,patterns,i,string,utils,trim,whitespace,excluded,patterns,i,init,excluded,pattern,representation,this,excluded,patterns
AbstractRegexpMethodPointcut -> public void setExcludedPatterns(String[] excludedPatterns);1353977966;Set the regular expressions defining methods to match for exclusion._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setExcludedPatterns(String[] excludedPatterns) {_		Assert.notEmpty(excludedPatterns, "'excludedPatterns' must not be empty")__		this.excludedPatterns = new String[excludedPatterns.length]__		for (int i = 0_ i < excludedPatterns.length_ i++) {_			this.excludedPatterns[i] = StringUtils.trimWhitespace(excludedPatterns[i])__		}_		initExcludedPatternRepresentation(this.excludedPatterns)__	};set,the,regular,expressions,defining,methods,to,match,for,exclusion,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,excluded,patterns,string,excluded,patterns,assert,not,empty,excluded,patterns,excluded,patterns,must,not,be,empty,this,excluded,patterns,new,string,excluded,patterns,length,for,int,i,0,i,excluded,patterns,length,i,this,excluded,patterns,i,string,utils,trim,whitespace,excluded,patterns,i,init,excluded,pattern,representation,this,excluded,patterns
AbstractRegexpMethodPointcut -> public void setExcludedPatterns(String[] excludedPatterns);1356735495;Set the regular expressions defining methods to match for exclusion._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setExcludedPatterns(String[] excludedPatterns) {_		Assert.notEmpty(excludedPatterns, "'excludedPatterns' must not be empty")__		this.excludedPatterns = new String[excludedPatterns.length]__		for (int i = 0_ i < excludedPatterns.length_ i++) {_			this.excludedPatterns[i] = StringUtils.trimWhitespace(excludedPatterns[i])__		}_		initExcludedPatternRepresentation(this.excludedPatterns)__	};set,the,regular,expressions,defining,methods,to,match,for,exclusion,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,excluded,patterns,string,excluded,patterns,assert,not,empty,excluded,patterns,excluded,patterns,must,not,be,empty,this,excluded,patterns,new,string,excluded,patterns,length,for,int,i,0,i,excluded,patterns,length,i,this,excluded,patterns,i,string,utils,trim,whitespace,excluded,patterns,i,init,excluded,pattern,representation,this,excluded,patterns
AbstractRegexpMethodPointcut -> public void setExcludedPatterns(String[] excludedPatterns);1357119239;Set the regular expressions defining methods to match for exclusion._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setExcludedPatterns(String[] excludedPatterns) {_		Assert.notEmpty(excludedPatterns, "'excludedPatterns' must not be empty")__		this.excludedPatterns = new String[excludedPatterns.length]__		for (int i = 0_ i < excludedPatterns.length_ i++) {_			this.excludedPatterns[i] = StringUtils.trimWhitespace(excludedPatterns[i])__		}_		initExcludedPatternRepresentation(this.excludedPatterns)__	};set,the,regular,expressions,defining,methods,to,match,for,exclusion,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,excluded,patterns,string,excluded,patterns,assert,not,empty,excluded,patterns,excluded,patterns,must,not,be,empty,this,excluded,patterns,new,string,excluded,patterns,length,for,int,i,0,i,excluded,patterns,length,i,this,excluded,patterns,i,string,utils,trim,whitespace,excluded,patterns,i,init,excluded,pattern,representation,this,excluded,patterns
AbstractRegexpMethodPointcut -> public void setExcludedPatterns(String[] excludedPatterns);1368482696;Set the regular expressions defining methods to match for exclusion._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setExcludedPatterns(String[] excludedPatterns) {_		Assert.notEmpty(excludedPatterns, "'excludedPatterns' must not be empty")__		this.excludedPatterns = new String[excludedPatterns.length]__		for (int i = 0_ i < excludedPatterns.length_ i++) {_			this.excludedPatterns[i] = StringUtils.trimWhitespace(excludedPatterns[i])__		}_		initExcludedPatternRepresentation(this.excludedPatterns)__	};set,the,regular,expressions,defining,methods,to,match,for,exclusion,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,excluded,patterns,string,excluded,patterns,assert,not,empty,excluded,patterns,excluded,patterns,must,not,be,empty,this,excluded,patterns,new,string,excluded,patterns,length,for,int,i,0,i,excluded,patterns,length,i,this,excluded,patterns,i,string,utils,trim,whitespace,excluded,patterns,i,init,excluded,pattern,representation,this,excluded,patterns
AbstractRegexpMethodPointcut -> public void setExcludedPatterns(String[] excludedPatterns);1385412762;Set the regular expressions defining methods to match for exclusion._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setExcludedPatterns(String[] excludedPatterns) {_		Assert.notEmpty(excludedPatterns, "'excludedPatterns' must not be empty")__		this.excludedPatterns = new String[excludedPatterns.length]__		for (int i = 0_ i < excludedPatterns.length_ i++) {_			this.excludedPatterns[i] = StringUtils.trimWhitespace(excludedPatterns[i])__		}_		initExcludedPatternRepresentation(this.excludedPatterns)__	};set,the,regular,expressions,defining,methods,to,match,for,exclusion,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,excluded,patterns,string,excluded,patterns,assert,not,empty,excluded,patterns,excluded,patterns,must,not,be,empty,this,excluded,patterns,new,string,excluded,patterns,length,for,int,i,0,i,excluded,patterns,length,i,this,excluded,patterns,i,string,utils,trim,whitespace,excluded,patterns,i,init,excluded,pattern,representation,this,excluded,patterns
AbstractRegexpMethodPointcut -> public String[] getExcludedPatterns();1328020251;Returns the regular expressions for exclusion matching.;public String[] getExcludedPatterns() {_		return this.excludedPatterns__	};returns,the,regular,expressions,for,exclusion,matching;public,string,get,excluded,patterns,return,this,excluded,patterns
AbstractRegexpMethodPointcut -> public String[] getExcludedPatterns();1353977966;Returns the regular expressions for exclusion matching.;public String[] getExcludedPatterns() {_		return this.excludedPatterns__	};returns,the,regular,expressions,for,exclusion,matching;public,string,get,excluded,patterns,return,this,excluded,patterns
AbstractRegexpMethodPointcut -> public String[] getExcludedPatterns();1356735495;Returns the regular expressions for exclusion matching.;public String[] getExcludedPatterns() {_		return this.excludedPatterns__	};returns,the,regular,expressions,for,exclusion,matching;public,string,get,excluded,patterns,return,this,excluded,patterns
AbstractRegexpMethodPointcut -> public String[] getExcludedPatterns();1357119239;Returns the regular expressions for exclusion matching.;public String[] getExcludedPatterns() {_		return this.excludedPatterns__	};returns,the,regular,expressions,for,exclusion,matching;public,string,get,excluded,patterns,return,this,excluded,patterns
AbstractRegexpMethodPointcut -> public String[] getExcludedPatterns();1368482696;Returns the regular expressions for exclusion matching.;public String[] getExcludedPatterns() {_		return this.excludedPatterns__	};returns,the,regular,expressions,for,exclusion,matching;public,string,get,excluded,patterns,return,this,excluded,patterns
AbstractRegexpMethodPointcut -> public String[] getExcludedPatterns();1385412762;Returns the regular expressions for exclusion matching.;public String[] getExcludedPatterns() {_		return this.excludedPatterns__	};returns,the,regular,expressions,for,exclusion,matching;public,string,get,excluded,patterns,return,this,excluded,patterns
AbstractRegexpMethodPointcut -> public String[] getExcludedPatterns();1388872086;Returns the regular expressions for exclusion matching.;public String[] getExcludedPatterns() {_		return this.excludedPatterns__	};returns,the,regular,expressions,for,exclusion,matching;public,string,get,excluded,patterns,return,this,excluded,patterns
AbstractRegexpMethodPointcut -> public String[] getExcludedPatterns();1388877361;Returns the regular expressions for exclusion matching.;public String[] getExcludedPatterns() {_		return this.excludedPatterns__	};returns,the,regular,expressions,for,exclusion,matching;public,string,get,excluded,patterns,return,this,excluded,patterns
AbstractRegexpMethodPointcut -> public String[] getExcludedPatterns();1477045587;Returns the regular expressions for exclusion matching.;public String[] getExcludedPatterns() {_		return this.excludedPatterns__	};returns,the,regular,expressions,for,exclusion,matching;public,string,get,excluded,patterns,return,this,excluded,patterns
AbstractRegexpMethodPointcut -> public String[] getExcludedPatterns();1496242568;Returns the regular expressions for exclusion matching.;public String[] getExcludedPatterns() {_		return this.excludedPatterns__	};returns,the,regular,expressions,for,exclusion,matching;public,string,get,excluded,patterns,return,this,excluded,patterns
AbstractRegexpMethodPointcut -> public String[] getExcludedPatterns();1532038651;Returns the regular expressions for exclusion matching.;public String[] getExcludedPatterns() {_		return this.excludedPatterns__	};returns,the,regular,expressions,for,exclusion,matching;public,string,get,excluded,patterns,return,this,excluded,patterns
AbstractRegexpMethodPointcut -> protected boolean matchesPattern(String signatureString);1328020251;Match the specified candidate against the configured patterns._@param signatureString "java.lang.Object.hashCode" style signature_@return whether the candidate matches at least one of the specified patterns;protected boolean matchesPattern(String signatureString) {_		for (int i = 0_ i < this.patterns.length_ i++) {_			boolean matched = matches(signatureString, i)__			if (matched) {_				for (int j = 0_ j < this.excludedPatterns.length_ j++) {_					boolean excluded = matchesExclusion(signatureString, j)__					if (excluded) {_						return false__					}_				}_				return true__			}_		}_		return false__	};match,the,specified,candidate,against,the,configured,patterns,param,signature,string,java,lang,object,hash,code,style,signature,return,whether,the,candidate,matches,at,least,one,of,the,specified,patterns;protected,boolean,matches,pattern,string,signature,string,for,int,i,0,i,this,patterns,length,i,boolean,matched,matches,signature,string,i,if,matched,for,int,j,0,j,this,excluded,patterns,length,j,boolean,excluded,matches,exclusion,signature,string,j,if,excluded,return,false,return,true,return,false
AbstractRegexpMethodPointcut -> protected boolean matchesPattern(String signatureString);1353977966;Match the specified candidate against the configured patterns._@param signatureString "java.lang.Object.hashCode" style signature_@return whether the candidate matches at least one of the specified patterns;protected boolean matchesPattern(String signatureString) {_		for (int i = 0_ i < this.patterns.length_ i++) {_			boolean matched = matches(signatureString, i)__			if (matched) {_				for (int j = 0_ j < this.excludedPatterns.length_ j++) {_					boolean excluded = matchesExclusion(signatureString, j)__					if (excluded) {_						return false__					}_				}_				return true__			}_		}_		return false__	};match,the,specified,candidate,against,the,configured,patterns,param,signature,string,java,lang,object,hash,code,style,signature,return,whether,the,candidate,matches,at,least,one,of,the,specified,patterns;protected,boolean,matches,pattern,string,signature,string,for,int,i,0,i,this,patterns,length,i,boolean,matched,matches,signature,string,i,if,matched,for,int,j,0,j,this,excluded,patterns,length,j,boolean,excluded,matches,exclusion,signature,string,j,if,excluded,return,false,return,true,return,false
AbstractRegexpMethodPointcut -> protected boolean matchesPattern(String signatureString);1356735495;Match the specified candidate against the configured patterns._@param signatureString "java.lang.Object.hashCode" style signature_@return whether the candidate matches at least one of the specified patterns;protected boolean matchesPattern(String signatureString) {_		for (int i = 0_ i < this.patterns.length_ i++) {_			boolean matched = matches(signatureString, i)__			if (matched) {_				for (int j = 0_ j < this.excludedPatterns.length_ j++) {_					boolean excluded = matchesExclusion(signatureString, j)__					if (excluded) {_						return false__					}_				}_				return true__			}_		}_		return false__	};match,the,specified,candidate,against,the,configured,patterns,param,signature,string,java,lang,object,hash,code,style,signature,return,whether,the,candidate,matches,at,least,one,of,the,specified,patterns;protected,boolean,matches,pattern,string,signature,string,for,int,i,0,i,this,patterns,length,i,boolean,matched,matches,signature,string,i,if,matched,for,int,j,0,j,this,excluded,patterns,length,j,boolean,excluded,matches,exclusion,signature,string,j,if,excluded,return,false,return,true,return,false
AbstractRegexpMethodPointcut -> protected boolean matchesPattern(String signatureString);1357119239;Match the specified candidate against the configured patterns._@param signatureString "java.lang.Object.hashCode" style signature_@return whether the candidate matches at least one of the specified patterns;protected boolean matchesPattern(String signatureString) {_		for (int i = 0_ i < this.patterns.length_ i++) {_			boolean matched = matches(signatureString, i)__			if (matched) {_				for (int j = 0_ j < this.excludedPatterns.length_ j++) {_					boolean excluded = matchesExclusion(signatureString, j)__					if (excluded) {_						return false__					}_				}_				return true__			}_		}_		return false__	};match,the,specified,candidate,against,the,configured,patterns,param,signature,string,java,lang,object,hash,code,style,signature,return,whether,the,candidate,matches,at,least,one,of,the,specified,patterns;protected,boolean,matches,pattern,string,signature,string,for,int,i,0,i,this,patterns,length,i,boolean,matched,matches,signature,string,i,if,matched,for,int,j,0,j,this,excluded,patterns,length,j,boolean,excluded,matches,exclusion,signature,string,j,if,excluded,return,false,return,true,return,false
AbstractRegexpMethodPointcut -> protected boolean matchesPattern(String signatureString);1368482696;Match the specified candidate against the configured patterns._@param signatureString "java.lang.Object.hashCode" style signature_@return whether the candidate matches at least one of the specified patterns;protected boolean matchesPattern(String signatureString) {_		for (int i = 0_ i < this.patterns.length_ i++) {_			boolean matched = matches(signatureString, i)__			if (matched) {_				for (int j = 0_ j < this.excludedPatterns.length_ j++) {_					boolean excluded = matchesExclusion(signatureString, j)__					if (excluded) {_						return false__					}_				}_				return true__			}_		}_		return false__	};match,the,specified,candidate,against,the,configured,patterns,param,signature,string,java,lang,object,hash,code,style,signature,return,whether,the,candidate,matches,at,least,one,of,the,specified,patterns;protected,boolean,matches,pattern,string,signature,string,for,int,i,0,i,this,patterns,length,i,boolean,matched,matches,signature,string,i,if,matched,for,int,j,0,j,this,excluded,patterns,length,j,boolean,excluded,matches,exclusion,signature,string,j,if,excluded,return,false,return,true,return,false
AbstractRegexpMethodPointcut -> protected boolean matchesPattern(String signatureString);1385412762;Match the specified candidate against the configured patterns._@param signatureString "java.lang.Object.hashCode" style signature_@return whether the candidate matches at least one of the specified patterns;protected boolean matchesPattern(String signatureString) {_		for (int i = 0_ i < this.patterns.length_ i++) {_			boolean matched = matches(signatureString, i)__			if (matched) {_				for (int j = 0_ j < this.excludedPatterns.length_ j++) {_					boolean excluded = matchesExclusion(signatureString, j)__					if (excluded) {_						return false__					}_				}_				return true__			}_		}_		return false__	};match,the,specified,candidate,against,the,configured,patterns,param,signature,string,java,lang,object,hash,code,style,signature,return,whether,the,candidate,matches,at,least,one,of,the,specified,patterns;protected,boolean,matches,pattern,string,signature,string,for,int,i,0,i,this,patterns,length,i,boolean,matched,matches,signature,string,i,if,matched,for,int,j,0,j,this,excluded,patterns,length,j,boolean,excluded,matches,exclusion,signature,string,j,if,excluded,return,false,return,true,return,false
AbstractRegexpMethodPointcut -> protected boolean matchesPattern(String signatureString);1388872086;Match the specified candidate against the configured patterns._@param signatureString "java.lang.Object.hashCode" style signature_@return whether the candidate matches at least one of the specified patterns;protected boolean matchesPattern(String signatureString) {_		for (int i = 0_ i < this.patterns.length_ i++) {_			boolean matched = matches(signatureString, i)__			if (matched) {_				for (int j = 0_ j < this.excludedPatterns.length_ j++) {_					boolean excluded = matchesExclusion(signatureString, j)__					if (excluded) {_						return false__					}_				}_				return true__			}_		}_		return false__	};match,the,specified,candidate,against,the,configured,patterns,param,signature,string,java,lang,object,hash,code,style,signature,return,whether,the,candidate,matches,at,least,one,of,the,specified,patterns;protected,boolean,matches,pattern,string,signature,string,for,int,i,0,i,this,patterns,length,i,boolean,matched,matches,signature,string,i,if,matched,for,int,j,0,j,this,excluded,patterns,length,j,boolean,excluded,matches,exclusion,signature,string,j,if,excluded,return,false,return,true,return,false
AbstractRegexpMethodPointcut -> protected boolean matchesPattern(String signatureString);1388877361;Match the specified candidate against the configured patterns._@param signatureString "java.lang.Object.hashCode" style signature_@return whether the candidate matches at least one of the specified patterns;protected boolean matchesPattern(String signatureString) {_		for (int i = 0_ i < this.patterns.length_ i++) {_			boolean matched = matches(signatureString, i)__			if (matched) {_				for (int j = 0_ j < this.excludedPatterns.length_ j++) {_					boolean excluded = matchesExclusion(signatureString, j)__					if (excluded) {_						return false__					}_				}_				return true__			}_		}_		return false__	};match,the,specified,candidate,against,the,configured,patterns,param,signature,string,java,lang,object,hash,code,style,signature,return,whether,the,candidate,matches,at,least,one,of,the,specified,patterns;protected,boolean,matches,pattern,string,signature,string,for,int,i,0,i,this,patterns,length,i,boolean,matched,matches,signature,string,i,if,matched,for,int,j,0,j,this,excluded,patterns,length,j,boolean,excluded,matches,exclusion,signature,string,j,if,excluded,return,false,return,true,return,false
AbstractRegexpMethodPointcut -> protected boolean matchesPattern(String signatureString);1477045587;Match the specified candidate against the configured patterns._@param signatureString "java.lang.Object.hashCode" style signature_@return whether the candidate matches at least one of the specified patterns;protected boolean matchesPattern(String signatureString) {_		for (int i = 0_ i < this.patterns.length_ i++) {_			boolean matched = matches(signatureString, i)__			if (matched) {_				for (int j = 0_ j < this.excludedPatterns.length_ j++) {_					boolean excluded = matchesExclusion(signatureString, j)__					if (excluded) {_						return false__					}_				}_				return true__			}_		}_		return false__	};match,the,specified,candidate,against,the,configured,patterns,param,signature,string,java,lang,object,hash,code,style,signature,return,whether,the,candidate,matches,at,least,one,of,the,specified,patterns;protected,boolean,matches,pattern,string,signature,string,for,int,i,0,i,this,patterns,length,i,boolean,matched,matches,signature,string,i,if,matched,for,int,j,0,j,this,excluded,patterns,length,j,boolean,excluded,matches,exclusion,signature,string,j,if,excluded,return,false,return,true,return,false
AbstractRegexpMethodPointcut -> protected boolean matchesPattern(String signatureString);1496242568;Match the specified candidate against the configured patterns._@param signatureString "java.lang.Object.hashCode" style signature_@return whether the candidate matches at least one of the specified patterns;protected boolean matchesPattern(String signatureString) {_		for (int i = 0_ i < this.patterns.length_ i++) {_			boolean matched = matches(signatureString, i)__			if (matched) {_				for (int j = 0_ j < this.excludedPatterns.length_ j++) {_					boolean excluded = matchesExclusion(signatureString, j)__					if (excluded) {_						return false__					}_				}_				return true__			}_		}_		return false__	};match,the,specified,candidate,against,the,configured,patterns,param,signature,string,java,lang,object,hash,code,style,signature,return,whether,the,candidate,matches,at,least,one,of,the,specified,patterns;protected,boolean,matches,pattern,string,signature,string,for,int,i,0,i,this,patterns,length,i,boolean,matched,matches,signature,string,i,if,matched,for,int,j,0,j,this,excluded,patterns,length,j,boolean,excluded,matches,exclusion,signature,string,j,if,excluded,return,false,return,true,return,false
AbstractRegexpMethodPointcut -> protected boolean matchesPattern(String signatureString);1532038651;Match the specified candidate against the configured patterns._@param signatureString "java.lang.Object.hashCode" style signature_@return whether the candidate matches at least one of the specified patterns;protected boolean matchesPattern(String signatureString) {_		for (int i = 0_ i < this.patterns.length_ i++) {_			boolean matched = matches(signatureString, i)__			if (matched) {_				for (int j = 0_ j < this.excludedPatterns.length_ j++) {_					boolean excluded = matchesExclusion(signatureString, j)__					if (excluded) {_						return false__					}_				}_				return true__			}_		}_		return false__	};match,the,specified,candidate,against,the,configured,patterns,param,signature,string,java,lang,object,hash,code,style,signature,return,whether,the,candidate,matches,at,least,one,of,the,specified,patterns;protected,boolean,matches,pattern,string,signature,string,for,int,i,0,i,this,patterns,length,i,boolean,matched,matches,signature,string,i,if,matched,for,int,j,0,j,this,excluded,patterns,length,j,boolean,excluded,matches,exclusion,signature,string,j,if,excluded,return,false,return,true,return,false
AbstractRegexpMethodPointcut -> protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;1328020251;Does the exclusion pattern at the given index match this string?_@param pattern <code>String</code> pattern to match._@param patternIndex index of pattern starting from 0._@return <code>true</code> if there is a match, else <code>false</code>.;protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;does,the,exclusion,pattern,at,the,given,index,match,this,string,param,pattern,code,string,code,pattern,to,match,param,pattern,index,index,of,pattern,starting,from,0,return,code,true,code,if,there,is,a,match,else,code,false,code;protected,abstract,boolean,matches,exclusion,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;1353977966;Does the exclusion pattern at the given index match this string?_@param pattern <code>String</code> pattern to match._@param patternIndex index of pattern starting from 0._@return <code>true</code> if there is a match, else <code>false</code>.;protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;does,the,exclusion,pattern,at,the,given,index,match,this,string,param,pattern,code,string,code,pattern,to,match,param,pattern,index,index,of,pattern,starting,from,0,return,code,true,code,if,there,is,a,match,else,code,false,code;protected,abstract,boolean,matches,exclusion,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;1356735495;Does the exclusion pattern at the given index match this string?_@param pattern {@code String} pattern to match._@param patternIndex index of pattern starting from 0._@return {@code true} if there is a match, else {@code false}.;protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;does,the,exclusion,pattern,at,the,given,index,match,this,string,param,pattern,code,string,pattern,to,match,param,pattern,index,index,of,pattern,starting,from,0,return,code,true,if,there,is,a,match,else,code,false;protected,abstract,boolean,matches,exclusion,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;1357119239;Does the exclusion pattern at the given index match this string?_@param pattern {@code String} pattern to match._@param patternIndex index of pattern starting from 0._@return {@code true} if there is a match, else {@code false}.;protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;does,the,exclusion,pattern,at,the,given,index,match,this,string,param,pattern,code,string,pattern,to,match,param,pattern,index,index,of,pattern,starting,from,0,return,code,true,if,there,is,a,match,else,code,false;protected,abstract,boolean,matches,exclusion,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;1368482696;Does the exclusion pattern at the given index match this string?_@param pattern {@code String} pattern to match._@param patternIndex index of pattern starting from 0._@return {@code true} if there is a match, else {@code false}.;protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;does,the,exclusion,pattern,at,the,given,index,match,this,string,param,pattern,code,string,pattern,to,match,param,pattern,index,index,of,pattern,starting,from,0,return,code,true,if,there,is,a,match,else,code,false;protected,abstract,boolean,matches,exclusion,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;1385412762;Does the exclusion pattern at the given index match this string?_@param pattern {@code String} pattern to match._@param patternIndex index of pattern starting from 0._@return {@code true} if there is a match, else {@code false}.;protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;does,the,exclusion,pattern,at,the,given,index,match,this,string,param,pattern,code,string,pattern,to,match,param,pattern,index,index,of,pattern,starting,from,0,return,code,true,if,there,is,a,match,else,code,false;protected,abstract,boolean,matches,exclusion,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;1388872086;Does the exclusion pattern at the given index match this string?_@param pattern {@code String} pattern to match._@param patternIndex index of pattern starting from 0._@return {@code true} if there is a match, else {@code false}.;protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;does,the,exclusion,pattern,at,the,given,index,match,this,string,param,pattern,code,string,pattern,to,match,param,pattern,index,index,of,pattern,starting,from,0,return,code,true,if,there,is,a,match,else,code,false;protected,abstract,boolean,matches,exclusion,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;1388877361;Does the exclusion pattern at the given index match the given String?_@param pattern the {@code String} pattern to match_@param patternIndex index of pattern (starting from 0)_@return {@code true} if there is a match, {@code false} otherwise;protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;does,the,exclusion,pattern,at,the,given,index,match,the,given,string,param,pattern,the,code,string,pattern,to,match,param,pattern,index,index,of,pattern,starting,from,0,return,code,true,if,there,is,a,match,code,false,otherwise;protected,abstract,boolean,matches,exclusion,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;1477045587;Does the exclusion pattern at the given index match the given String?_@param pattern the {@code String} pattern to match_@param patternIndex index of pattern (starting from 0)_@return {@code true} if there is a match, {@code false} otherwise;protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;does,the,exclusion,pattern,at,the,given,index,match,the,given,string,param,pattern,the,code,string,pattern,to,match,param,pattern,index,index,of,pattern,starting,from,0,return,code,true,if,there,is,a,match,code,false,otherwise;protected,abstract,boolean,matches,exclusion,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;1496242568;Does the exclusion pattern at the given index match the given String?_@param pattern the {@code String} pattern to match_@param patternIndex index of pattern (starting from 0)_@return {@code true} if there is a match, {@code false} otherwise;protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;does,the,exclusion,pattern,at,the,given,index,match,the,given,string,param,pattern,the,code,string,pattern,to,match,param,pattern,index,index,of,pattern,starting,from,0,return,code,true,if,there,is,a,match,code,false,otherwise;protected,abstract,boolean,matches,exclusion,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;1532038651;Does the exclusion pattern at the given index match the given String?_@param pattern the {@code String} pattern to match_@param patternIndex index of pattern (starting from 0)_@return {@code true} if there is a match, {@code false} otherwise;protected abstract boolean matchesExclusion(String pattern, int patternIndex)_;does,the,exclusion,pattern,at,the,given,index,match,the,given,string,param,pattern,the,code,string,pattern,to,match,param,pattern,index,index,of,pattern,starting,from,0,return,code,true,if,there,is,a,match,code,false,otherwise;protected,abstract,boolean,matches,exclusion,string,pattern,int,pattern,index
AbstractRegexpMethodPointcut -> public void setPatterns(String[] patterns);1328020251;Set the regular expressions defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setPatterns(String[] patterns) {_		Assert.notEmpty(patterns, "'patterns' must not be empty")__		this.patterns = new String[patterns.length]__		for (int i = 0_ i < patterns.length_ i++) {_			this.patterns[i] = StringUtils.trimWhitespace(patterns[i])__		}_		initPatternRepresentation(this.patterns)__	};set,the,regular,expressions,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,patterns,string,patterns,assert,not,empty,patterns,patterns,must,not,be,empty,this,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,this,patterns,i,string,utils,trim,whitespace,patterns,i,init,pattern,representation,this,patterns
AbstractRegexpMethodPointcut -> public void setPatterns(String[] patterns);1353977966;Set the regular expressions defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setPatterns(String[] patterns) {_		Assert.notEmpty(patterns, "'patterns' must not be empty")__		this.patterns = new String[patterns.length]__		for (int i = 0_ i < patterns.length_ i++) {_			this.patterns[i] = StringUtils.trimWhitespace(patterns[i])__		}_		initPatternRepresentation(this.patterns)__	};set,the,regular,expressions,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,patterns,string,patterns,assert,not,empty,patterns,patterns,must,not,be,empty,this,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,this,patterns,i,string,utils,trim,whitespace,patterns,i,init,pattern,representation,this,patterns
AbstractRegexpMethodPointcut -> public void setPatterns(String[] patterns);1356735495;Set the regular expressions defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setPatterns(String[] patterns) {_		Assert.notEmpty(patterns, "'patterns' must not be empty")__		this.patterns = new String[patterns.length]__		for (int i = 0_ i < patterns.length_ i++) {_			this.patterns[i] = StringUtils.trimWhitespace(patterns[i])__		}_		initPatternRepresentation(this.patterns)__	};set,the,regular,expressions,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,patterns,string,patterns,assert,not,empty,patterns,patterns,must,not,be,empty,this,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,this,patterns,i,string,utils,trim,whitespace,patterns,i,init,pattern,representation,this,patterns
AbstractRegexpMethodPointcut -> public void setPatterns(String[] patterns);1357119239;Set the regular expressions defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setPatterns(String[] patterns) {_		Assert.notEmpty(patterns, "'patterns' must not be empty")__		this.patterns = new String[patterns.length]__		for (int i = 0_ i < patterns.length_ i++) {_			this.patterns[i] = StringUtils.trimWhitespace(patterns[i])__		}_		initPatternRepresentation(this.patterns)__	};set,the,regular,expressions,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,patterns,string,patterns,assert,not,empty,patterns,patterns,must,not,be,empty,this,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,this,patterns,i,string,utils,trim,whitespace,patterns,i,init,pattern,representation,this,patterns
AbstractRegexpMethodPointcut -> public void setPatterns(String[] patterns);1368482696;Set the regular expressions defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setPatterns(String[] patterns) {_		Assert.notEmpty(patterns, "'patterns' must not be empty")__		this.patterns = new String[patterns.length]__		for (int i = 0_ i < patterns.length_ i++) {_			this.patterns[i] = StringUtils.trimWhitespace(patterns[i])__		}_		initPatternRepresentation(this.patterns)__	};set,the,regular,expressions,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,patterns,string,patterns,assert,not,empty,patterns,patterns,must,not,be,empty,this,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,this,patterns,i,string,utils,trim,whitespace,patterns,i,init,pattern,representation,this,patterns
AbstractRegexpMethodPointcut -> public void setPatterns(String[] patterns);1385412762;Set the regular expressions defining methods to match._Matching will be the union of all these_ if any match,_the pointcut matches.;public void setPatterns(String[] patterns) {_		Assert.notEmpty(patterns, "'patterns' must not be empty")__		this.patterns = new String[patterns.length]__		for (int i = 0_ i < patterns.length_ i++) {_			this.patterns[i] = StringUtils.trimWhitespace(patterns[i])__		}_		initPatternRepresentation(this.patterns)__	};set,the,regular,expressions,defining,methods,to,match,matching,will,be,the,union,of,all,these,if,any,match,the,pointcut,matches;public,void,set,patterns,string,patterns,assert,not,empty,patterns,patterns,must,not,be,empty,this,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,this,patterns,i,string,utils,trim,whitespace,patterns,i,init,pattern,representation,this,patterns
AbstractRegexpMethodPointcut -> public String[] getPatterns();1328020251;Return the regular expressions for method matching.;public String[] getPatterns() {_		return this.patterns__	};return,the,regular,expressions,for,method,matching;public,string,get,patterns,return,this,patterns
AbstractRegexpMethodPointcut -> public String[] getPatterns();1353977966;Return the regular expressions for method matching.;public String[] getPatterns() {_		return this.patterns__	};return,the,regular,expressions,for,method,matching;public,string,get,patterns,return,this,patterns
AbstractRegexpMethodPointcut -> public String[] getPatterns();1356735495;Return the regular expressions for method matching.;public String[] getPatterns() {_		return this.patterns__	};return,the,regular,expressions,for,method,matching;public,string,get,patterns,return,this,patterns
AbstractRegexpMethodPointcut -> public String[] getPatterns();1357119239;Return the regular expressions for method matching.;public String[] getPatterns() {_		return this.patterns__	};return,the,regular,expressions,for,method,matching;public,string,get,patterns,return,this,patterns
AbstractRegexpMethodPointcut -> public String[] getPatterns();1368482696;Return the regular expressions for method matching.;public String[] getPatterns() {_		return this.patterns__	};return,the,regular,expressions,for,method,matching;public,string,get,patterns,return,this,patterns
AbstractRegexpMethodPointcut -> public String[] getPatterns();1385412762;Return the regular expressions for method matching.;public String[] getPatterns() {_		return this.patterns__	};return,the,regular,expressions,for,method,matching;public,string,get,patterns,return,this,patterns
AbstractRegexpMethodPointcut -> public String[] getPatterns();1388872086;Return the regular expressions for method matching.;public String[] getPatterns() {_		return this.patterns__	};return,the,regular,expressions,for,method,matching;public,string,get,patterns,return,this,patterns
AbstractRegexpMethodPointcut -> public String[] getPatterns();1388877361;Return the regular expressions for method matching.;public String[] getPatterns() {_		return this.patterns__	};return,the,regular,expressions,for,method,matching;public,string,get,patterns,return,this,patterns
AbstractRegexpMethodPointcut -> public String[] getPatterns();1477045587;Return the regular expressions for method matching.;public String[] getPatterns() {_		return this.patterns__	};return,the,regular,expressions,for,method,matching;public,string,get,patterns,return,this,patterns
AbstractRegexpMethodPointcut -> public String[] getPatterns();1496242568;Return the regular expressions for method matching.;public String[] getPatterns() {_		return this.patterns__	};return,the,regular,expressions,for,method,matching;public,string,get,patterns,return,this,patterns
AbstractRegexpMethodPointcut -> public String[] getPatterns();1532038651;Return the regular expressions for method matching.;public String[] getPatterns() {_		return this.patterns__	};return,the,regular,expressions,for,method,matching;public,string,get,patterns,return,this,patterns
AbstractRegexpMethodPointcut -> protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1328020251;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1353977966;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1356735495;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1357119239;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1368482696;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1385412762;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1388872086;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1388877361;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1477045587;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1496242568;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1532038651;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1328020251;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setExcludedPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,excluded,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,excluded,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1353977966;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setExcludedPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,excluded,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,excluded,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1356735495;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setExcludedPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,excluded,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,excluded,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1357119239;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setExcludedPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,excluded,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,excluded,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1368482696;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setExcludedPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,excluded,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,excluded,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1385412762;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setExcludedPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,excluded,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,excluded,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1388872086;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setExcludedPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,excluded,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,excluded,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1388877361;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setExcludedPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,excluded,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,excluded,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1477045587;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setExcludedPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,excluded,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,excluded,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1496242568;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setExcludedPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,excluded,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,excluded,pattern,representation,string,patterns,throws,illegal,argument,exception
AbstractRegexpMethodPointcut -> protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;1532038651;Subclasses must implement this to initialize regexp pointcuts._Can be invoked multiple times._<p>This method will be invoked from the {@link #setExcludedPatterns} method,_and also on deserialization._@param patterns the patterns to initialize_@throws IllegalArgumentException in case of an invalid pattern;protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException_;subclasses,must,implement,this,to,initialize,regexp,pointcuts,can,be,invoked,multiple,times,p,this,method,will,be,invoked,from,the,link,set,excluded,patterns,method,and,also,on,deserialization,param,patterns,the,patterns,to,initialize,throws,illegal,argument,exception,in,case,of,an,invalid,pattern;protected,abstract,void,init,excluded,pattern,representation,string,patterns,throws,illegal,argument,exception
