# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractAutoProxyCreator -> public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1328020251;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1355352386;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.containsKey(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,key,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1357119239;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.containsKey(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,key,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1362408075;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.containsKey(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,key,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1364505266;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1328020251;Subclasses should override this method to return <code>true</code> if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns <code>false</code>._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,code,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,code,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1355352386;Subclasses should override this method to return <code>true</code> if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns <code>false</code>._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,code,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,code,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1356735495;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1357119239;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1362408075;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1364505266;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1368482696;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1392159680;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1398791249;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1407154420;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1407511029;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1412610171;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1447077603;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1447399603;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1460663185;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1467730834;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1469561191;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1483047576;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1495868221;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1500495740;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1502974979;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1506097334;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1515363805;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1519295386;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1530174524;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1530188116;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1533908746;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1535064541;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening, e.g. if it will lead to_a circular reference or if the existing target instance needs to be preserved._This implementation returns {@code false} unless the bean name indicates an_"original instance" according to {@code AutowireCapableBeanFactory} conventions._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean_@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#ORIGINAL_INSTANCE_SUFFIX;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return AutoProxyUtils.isOriginalInstance(beanName, beanClass)__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,e,g,if,it,will,lead,to,a,circular,reference,or,if,the,existing,target,instance,needs,to,be,preserved,this,implementation,returns,code,false,unless,the,bean,name,indicates,an,original,instance,according,to,code,autowire,capable,bean,factory,conventions,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean,see,org,springframework,beans,factory,config,autowire,capable,bean,factory;protected,boolean,should,skip,class,bean,class,string,bean,name,return,auto,proxy,utils,is,original,instance,bean,name,bean,class
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, String beanName);1549551674;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening, e.g. if it will lead to_a circular reference or if the existing target instance needs to be preserved._This implementation returns {@code false} unless the bean name indicates an_"original instance" according to {@code AutowireCapableBeanFactory} conventions._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean_@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#ORIGINAL_INSTANCE_SUFFIX;protected boolean shouldSkip(Class<?> beanClass, String beanName) {_		return AutoProxyUtils.isOriginalInstance(beanName, beanClass)__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,e,g,if,it,will,lead,to,a,circular,reference,or,if,the,existing,target,instance,needs,to,be,preserved,this,implementation,returns,code,false,unless,the,bean,name,indicates,an,original,instance,according,to,code,autowire,capable,bean,factory,conventions,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean,see,org,springframework,beans,factory,config,autowire,capable,bean,factory;protected,boolean,should,skip,class,bean,class,string,bean,name,return,auto,proxy,utils,is,original,instance,bean,name,bean,class
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName);1530188116;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,nullable,object,bean,string,bean,name,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName);1533908746;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,nullable,object,bean,string,bean,name,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName);1535064541;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,nullable,object,bean,string,bean,name,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName);1549551674;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (this.earlyProxyReferences.remove(cacheKey) != bean) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,nullable,object,bean,string,bean,name,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,remove,cache,key,bean,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1328020251;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (this.nonAdvisedBeans.contains(cacheKey)) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.nonAdvisedBeans.add(cacheKey)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.add(cacheKey)__			Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.nonAdvisedBeans.add(cacheKey)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,this,target,sourced,beans,contains,bean,name,return,bean,if,this,non,advised,beans,contains,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,non,advised,beans,add,cache,key,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,add,cache,key,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,non,advised,beans,add,cache,key,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1355352386;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (this.targetSourcedBeans.containsKey(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,this,target,sourced,beans,contains,key,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1356735495;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.containsKey(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,key,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1357119239;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.containsKey(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,key,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1362408075;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.containsKey(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,key,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1364505266;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1368482696;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1392159680;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1398791249;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1407154420;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1407511029;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1412610171;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1447077603;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1447399603;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1460663185;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1467730834;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1469561191;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1483047576;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1495868221;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1500495740;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (StringUtils.hasLength(beanName) && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,string,utils,has,length,bean,name,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1502974979;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (StringUtils.hasLength(beanName) && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,string,utils,has,length,bean,name,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1506097334;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (StringUtils.hasLength(beanName) && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,string,utils,has,length,bean,name,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1515363805;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (StringUtils.hasLength(beanName) && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,string,utils,has,length,bean,name,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1519295386;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (StringUtils.hasLength(beanName) && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,string,utils,has,length,bean,name,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1530174524;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (StringUtils.hasLength(beanName) && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,string,utils,has,length,bean,name,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1530188116;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (StringUtils.hasLength(beanName) && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,string,utils,has,length,bean,name,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1533908746;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (StringUtils.hasLength(beanName) && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,string,utils,has,length,bean,name,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1535064541;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (StringUtils.hasLength(beanName) && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,string,utils,has,length,bean,name,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey);1549551674;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {_		if (StringUtils.hasLength(beanName) && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,string,bean,name,object,cache,key,if,string,utils,has,length,bean,name,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1328020251;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns <code>null</code> if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,code,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1355352386;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns <code>null</code> if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,code,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1356735495;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1357119239;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1362408075;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1364505266;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1368482696;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1392159680;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1398791249;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1407154420;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1407511029;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1412610171;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1447077603;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1447399603;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1460663185;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1467730834;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1469561191;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1483047576;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1407511029;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1412610171;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1447077603;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1447399603;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1460663185;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1467730834;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1469561191;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1483047576;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1495868221;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1496837955;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1498780456;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1499873102;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1500448076;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1500495740;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1502974979;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1506097334;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1515363805;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1519295386;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1530174524;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1530188116;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1533908746;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1535064541;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String... interceptorNames);1549551674;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String... interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1328020251;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>Default implementation considers Advisors, Advices and_AbstractAutoProxyCreators as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.springframework.aop.Advisor_@see org.aopalliance.intercept.MethodInterceptor_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advisor.class.isAssignableFrom(beanClass) ||_				Advice.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,default,implementation,considers,advisors,advices,and,abstract,auto,proxy,creators,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,springframework,aop,advisor,see,org,aopalliance,intercept,method,interceptor,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advisor,class,is,assignable,from,bean,class,advice,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1355352386;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>Default implementation considers Advisors, Advices and_AbstractAutoProxyCreators as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.springframework.aop.Advisor_@see org.aopalliance.intercept.MethodInterceptor_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advisor.class.isAssignableFrom(beanClass) ||_				Advice.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,default,implementation,considers,advisors,advices,and,abstract,auto,proxy,creators,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,springframework,aop,advisor,see,org,aopalliance,intercept,method,interceptor,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advisor,class,is,assignable,from,bean,class,advice,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1356735495;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1357119239;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1362408075;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1364505266;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1368482696;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1392159680;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1398791249;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1407154420;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1407511029;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1412610171;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1447077603;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1447399603;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1460663185;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1467730834;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1469561191;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1483047576;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1495868221;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1496837955;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1498780456;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1499873102;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1500448076;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1500495740;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1502974979;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1506097334;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1515363805;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1519295386;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1530174524;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1530188116;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1533908746;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1535064541;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected boolean isInfrastructureClass(Class<?> beanClass);1549551674;Return whether the given bean class represents an infrastructure class_that should never be proxied._<p>The default implementation considers Advices, Advisors and_AopInfrastructureBeans as infrastructure classes._@param beanClass the class of the bean_@return whether the bean represents an infrastructure class_@see org.aopalliance.aop.Advice_@see org.springframework.aop.Advisor_@see org.springframework.aop.framework.AopInfrastructureBean_@see #shouldSkip;protected boolean isInfrastructureClass(Class<?> beanClass) {_		boolean retVal = Advice.class.isAssignableFrom(beanClass) ||_				Pointcut.class.isAssignableFrom(beanClass) ||_				Advisor.class.isAssignableFrom(beanClass) ||_				AopInfrastructureBean.class.isAssignableFrom(beanClass)__		if (retVal && logger.isTraceEnabled()) {_			logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]")__		}_		return retVal__	};return,whether,the,given,bean,class,represents,an,infrastructure,class,that,should,never,be,proxied,p,the,default,implementation,considers,advices,advisors,and,aop,infrastructure,beans,as,infrastructure,classes,param,bean,class,the,class,of,the,bean,return,whether,the,bean,represents,an,infrastructure,class,see,org,aopalliance,aop,advice,see,org,springframework,aop,advisor,see,org,springframework,aop,framework,aop,infrastructure,bean,see,should,skip;protected,boolean,is,infrastructure,class,class,bean,class,boolean,ret,val,advice,class,is,assignable,from,bean,class,pointcut,class,is,assignable,from,bean,class,advisor,class,is,assignable,from,bean,class,aop,infrastructure,bean,class,is,assignable,from,bean,class,if,ret,val,logger,is,trace,enabled,logger,trace,did,not,attempt,to,auto,proxy,infrastructure,class,bean,class,get,name,return,ret,val
AbstractAutoProxyCreator -> protected Object createProxy(Class<?> beanClass, @Nullable String beanName, 			@Nullable Object[] specificInterceptors, TargetSource targetSource);1496837955;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(Class<?> beanClass, @Nullable String beanName,_			@Nullable Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,nullable,string,bean,name,nullable,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy(Class<?> beanClass, @Nullable String beanName, 			@Nullable Object[] specificInterceptors, TargetSource targetSource);1498780456;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(Class<?> beanClass, @Nullable String beanName,_			@Nullable Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,nullable,string,bean,name,nullable,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy(Class<?> beanClass, @Nullable String beanName, 			@Nullable Object[] specificInterceptors, TargetSource targetSource);1499873102;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(Class<?> beanClass, @Nullable String beanName,_			@Nullable Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		proxyFactory.addAdvisors(advisors)__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,nullable,string,bean,name,nullable,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,proxy,factory,add,advisors,advisors,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy(Class<?> beanClass, @Nullable String beanName, 			@Nullable Object[] specificInterceptors, TargetSource targetSource);1500448076;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(Class<?> beanClass, @Nullable String beanName,_			@Nullable Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		proxyFactory.addAdvisors(advisors)__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,nullable,string,bean,name,nullable,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,proxy,factory,add,advisors,advisors,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy(Class<?> beanClass, @Nullable String beanName, 			@Nullable Object[] specificInterceptors, TargetSource targetSource);1500495740;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(Class<?> beanClass, @Nullable String beanName,_			@Nullable Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		proxyFactory.addAdvisors(advisors)__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,nullable,string,bean,name,nullable,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,proxy,factory,add,advisors,advisors,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy(Class<?> beanClass, @Nullable String beanName, 			@Nullable Object[] specificInterceptors, TargetSource targetSource);1502974979;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(Class<?> beanClass, @Nullable String beanName,_			@Nullable Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		proxyFactory.addAdvisors(advisors)__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,nullable,string,bean,name,nullable,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,proxy,factory,add,advisors,advisors,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy(Class<?> beanClass, @Nullable String beanName, 			@Nullable Object[] specificInterceptors, TargetSource targetSource);1506097334;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(Class<?> beanClass, @Nullable String beanName,_			@Nullable Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		proxyFactory.addAdvisors(advisors)__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,nullable,string,bean,name,nullable,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,proxy,factory,add,advisors,advisors,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy(Class<?> beanClass, @Nullable String beanName, 			@Nullable Object[] specificInterceptors, TargetSource targetSource);1515363805;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(Class<?> beanClass, @Nullable String beanName,_			@Nullable Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		proxyFactory.addAdvisors(advisors)__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,nullable,string,bean,name,nullable,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,proxy,factory,add,advisors,advisors,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy(Class<?> beanClass, @Nullable String beanName, 			@Nullable Object[] specificInterceptors, TargetSource targetSource);1519295386;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(Class<?> beanClass, @Nullable String beanName,_			@Nullable Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		proxyFactory.addAdvisors(advisors)__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,nullable,string,bean,name,nullable,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,proxy,factory,add,advisors,advisors,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy(Class<?> beanClass, @Nullable String beanName, 			@Nullable Object[] specificInterceptors, TargetSource targetSource);1530174524;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(Class<?> beanClass, @Nullable String beanName,_			@Nullable Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		proxyFactory.addAdvisors(advisors)__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,nullable,string,bean,name,nullable,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,proxy,factory,add,advisors,advisors,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy(Class<?> beanClass, @Nullable String beanName, 			@Nullable Object[] specificInterceptors, TargetSource targetSource);1530188116;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(Class<?> beanClass, @Nullable String beanName,_			@Nullable Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		proxyFactory.addAdvisors(advisors)__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,nullable,string,bean,name,nullable,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,proxy,factory,add,advisors,advisors,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy(Class<?> beanClass, @Nullable String beanName, 			@Nullable Object[] specificInterceptors, TargetSource targetSource);1533908746;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(Class<?> beanClass, @Nullable String beanName,_			@Nullable Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		proxyFactory.addAdvisors(advisors)__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,nullable,string,bean,name,nullable,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,proxy,factory,add,advisors,advisors,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy(Class<?> beanClass, @Nullable String beanName, 			@Nullable Object[] specificInterceptors, TargetSource targetSource);1535064541;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(Class<?> beanClass, @Nullable String beanName,_			@Nullable Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		proxyFactory.addAdvisors(advisors)__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,nullable,string,bean,name,nullable,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,proxy,factory,add,advisors,advisors,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy(Class<?> beanClass, @Nullable String beanName, 			@Nullable Object[] specificInterceptors, TargetSource targetSource);1549551674;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(Class<?> beanClass, @Nullable String beanName,_			@Nullable Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		proxyFactory.addAdvisors(advisors)__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,nullable,string,bean,name,nullable,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,proxy,factory,add,advisors,advisors,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> public final void setOrder(int order);1328020251;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple BeanPostProcessors._<p>Default value is <code>Integer.MAX_VALUE</code>, meaning that it's non-ordered._@param order ordering value;public final void setOrder(int order) {_	  this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,bean,post,processors,p,default,value,is,code,integer,code,meaning,that,it,s,non,ordered,param,order,ordering,value;public,final,void,set,order,int,order,this,order,order
AbstractAutoProxyCreator -> public final void setOrder(int order);1355352386;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple BeanPostProcessors._<p>Default value is <code>Integer.MAX_VALUE</code>, meaning that it's non-ordered._@param order ordering value;public final void setOrder(int order) {_	  this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,bean,post,processors,p,default,value,is,code,integer,code,meaning,that,it,s,non,ordered,param,order,ordering,value;public,final,void,set,order,int,order,this,order,order
AbstractAutoProxyCreator -> public final void setOrder(int order);1356735495;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple BeanPostProcessors._<p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered._@param order ordering value;public final void setOrder(int order) {_	  this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,bean,post,processors,p,default,value,is,code,integer,meaning,that,it,s,non,ordered,param,order,ordering,value;public,final,void,set,order,int,order,this,order,order
AbstractAutoProxyCreator -> public final void setOrder(int order);1357119239;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple BeanPostProcessors._<p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered._@param order ordering value;public final void setOrder(int order) {_	  this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,bean,post,processors,p,default,value,is,code,integer,meaning,that,it,s,non,ordered,param,order,ordering,value;public,final,void,set,order,int,order,this,order,order
AbstractAutoProxyCreator -> public final void setOrder(int order);1362408075;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple BeanPostProcessors._<p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered._@param order ordering value;public final void setOrder(int order) {_		this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,bean,post,processors,p,default,value,is,code,integer,meaning,that,it,s,non,ordered,param,order,ordering,value;public,final,void,set,order,int,order,this,order,order
AbstractAutoProxyCreator -> public final void setOrder(int order);1364505266;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple BeanPostProcessors._<p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered._@param order ordering value;public final void setOrder(int order) {_		this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,bean,post,processors,p,default,value,is,code,integer,meaning,that,it,s,non,ordered,param,order,ordering,value;public,final,void,set,order,int,order,this,order,order
AbstractAutoProxyCreator -> public final void setOrder(int order);1368482696;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple BeanPostProcessors._<p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered._@param order ordering value;public final void setOrder(int order) {_		this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,bean,post,processors,p,default,value,is,code,integer,meaning,that,it,s,non,ordered,param,order,ordering,value;public,final,void,set,order,int,order,this,order,order
AbstractAutoProxyCreator -> public final void setOrder(int order);1392159680;Set the ordering which will apply to this class's implementation_of Ordered, used when applying multiple BeanPostProcessors._<p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered._@param order ordering value;public final void setOrder(int order) {_		this.order = order__	};set,the,ordering,which,will,apply,to,this,class,s,implementation,of,ordered,used,when,applying,multiple,bean,post,processors,p,default,value,is,code,integer,meaning,that,it,s,non,ordered,param,order,ordering,value;public,final,void,set,order,int,order,this,order,order
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName);1496837955;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,nullable,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName);1498780456;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,nullable,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName);1499873102;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,nullable,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName);1500448076;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,nullable,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName);1500495740;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,nullable,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName);1502974979;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,nullable,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName);1506097334;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,nullable,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName);1515363805;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,nullable,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName);1519295386;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,nullable,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName);1530174524;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,nullable,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName);1530188116;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,nullable,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName);1533908746;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,nullable,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName);1535064541;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,nullable,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName);1549551674;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, @Nullable String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,nullable,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1328020251;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is <code>false</code>. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,code,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1355352386;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is <code>false</code>. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,code,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1356735495;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1357119239;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1362408075;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1364505266;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1368482696;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1392159680;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1398791249;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1407154420;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1407511029;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1412610171;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1447077603;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1447399603;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1460663185;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1467730834;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1469561191;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1483047576;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1495868221;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1496837955;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1498780456;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1499873102;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1500448076;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1500495740;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1502974979;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1506097334;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1515363805;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1519295386;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1530174524;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1530188116;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1533908746;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1535064541;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> protected boolean advisorsPreFiltered();1549551674;Return whether the Advisors returned by the subclass are pre-filtered_to match the bean's target class already, allowing the ClassFilter check_to be skipped when building advisors chains for AOP invocations._<p>Default is {@code false}. Subclasses may override this if they_will always return pre-filtered Advisors._@return whether the Advisors are pre-filtered_@see #getAdvicesAndAdvisorsForBean_@see org.springframework.aop.framework.Advised#setPreFiltered;protected boolean advisorsPreFiltered() {_		return false__	};return,whether,the,advisors,returned,by,the,subclass,are,pre,filtered,to,match,the,bean,s,target,class,already,allowing,the,class,filter,check,to,be,skipped,when,building,advisors,chains,for,aop,invocations,p,default,is,code,false,subclasses,may,override,this,if,they,will,always,return,pre,filtered,advisors,return,whether,the,advisors,are,pre,filtered,see,get,advices,and,advisors,for,bean,see,org,springframework,aop,framework,advised,set,pre,filtered;protected,boolean,advisors,pre,filtered,return,false
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException;1496837955;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,nullable,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException;1498780456;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,nullable,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException;1499873102;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,nullable,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException;1500448076;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,nullable,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException;1500495740;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,nullable,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException;1502974979;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,nullable,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException;1506097334;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,nullable,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException;1515363805;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,nullable,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException;1519295386;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,nullable,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException;1530174524;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,nullable,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1328020251;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediably after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediably,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1355352386;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediably after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediably,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1356735495;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediably after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediably,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1357119239;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediably after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediably,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1362408075;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediably after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediably,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1364505266;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediably after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediably,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1368482696;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediably after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediably,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1392159680;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediably after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediably,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1398791249;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediably after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediably,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1407154420;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediably after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediably,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1407511029;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediably after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediably,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1412610171;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediably after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediably,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1447077603;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1447399603;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1460663185;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1467730834;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1469561191;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1483047576;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1495868221;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1496837955;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1498780456;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1499873102;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1500448076;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1500495740;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1502974979;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1506097334;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1515363805;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1519295386;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1530174524;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory a ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,a,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1530188116;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory a ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,a,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1533908746;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory a ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,a,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1535064541;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory a ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,a,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> protected void customizeProxyFactory(ProxyFactory proxyFactory);1549551674;Subclasses may choose to implement this: for example,_to change the interfaces exposed._<p>The default implementation is empty._@param proxyFactory a ProxyFactory that is already configured with_TargetSource and interfaces and will be used to create the proxy_immediately after this method returns;protected void customizeProxyFactory(ProxyFactory proxyFactory) {_	};subclasses,may,choose,to,implement,this,for,example,to,change,the,interfaces,exposed,p,the,default,implementation,is,empty,param,proxy,factory,a,proxy,factory,that,is,already,configured,with,target,source,and,interfaces,and,will,be,used,to,create,the,proxy,immediately,after,this,method,returns;protected,void,customize,proxy,factory,proxy,factory,proxy,factory
AbstractAutoProxyCreator -> @Nullable 	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1495868221;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;@Nullable_	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;nullable,protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> @Nullable 	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1496837955;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;@Nullable_	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;nullable,protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> @Nullable 	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1498780456;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;@Nullable_	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;nullable,protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> @Nullable 	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1499873102;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;@Nullable_	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;nullable,protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> @Nullable 	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1500448076;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;@Nullable_	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;nullable,protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> @Nullable 	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1500495740;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;@Nullable_	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;nullable,protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> @Nullable 	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1502974979;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;@Nullable_	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;nullable,protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> @Nullable 	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1506097334;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;@Nullable_	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;nullable,protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> @Nullable 	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1515363805;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;@Nullable_	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;nullable,protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> @Nullable 	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1519295386;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;@Nullable_	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;nullable,protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> @Nullable 	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1530174524;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;@Nullable_	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;nullable,protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> @Nullable 	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1530188116;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;@Nullable_	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("TargetSourceCreator [" + tsc +_								" found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;nullable,protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,debug,enabled,logger,debug,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> @Nullable 	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1533908746;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;@Nullable_	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isTraceEnabled()) {_						logger.trace("TargetSourceCreator [" + tsc +_								"] found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;nullable,protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,trace,enabled,logger,trace,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> @Nullable 	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1535064541;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;@Nullable_	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isTraceEnabled()) {_						logger.trace("TargetSourceCreator [" + tsc +_								"] found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;nullable,protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,trace,enabled,logger,trace,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> @Nullable 	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName);1549551674;Create a target source for bean instances. Uses any TargetSourceCreators if set._Returns {@code null} if no custom TargetSource should be used._<p>This implementation uses the "customTargetSourceCreators" property._Subclasses can override this method to use a different mechanism._@param beanClass the class of the bean to create a TargetSource for_@param beanName the name of the bean_@return a TargetSource for this bean_@see #setCustomTargetSourceCreators;@Nullable_	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {_		_		if (this.customTargetSourceCreators != null &&_				this.beanFactory != null && this.beanFactory.containsBean(beanName)) {_			for (TargetSourceCreator tsc : this.customTargetSourceCreators) {_				TargetSource ts = tsc.getTargetSource(beanClass, beanName)__				if (ts != null) {_					_					if (logger.isTraceEnabled()) {_						logger.trace("TargetSourceCreator [" + tsc +_								"] found custom TargetSource for bean with name '" + beanName + "'")__					}_					return ts__				}_			}_		}__		_		return null__	};create,a,target,source,for,bean,instances,uses,any,target,source,creators,if,set,returns,code,null,if,no,custom,target,source,should,be,used,p,this,implementation,uses,the,custom,target,source,creators,property,subclasses,can,override,this,method,to,use,a,different,mechanism,param,bean,class,the,class,of,the,bean,to,create,a,target,source,for,param,bean,name,the,name,of,the,bean,return,a,target,source,for,this,bean,see,set,custom,target,source,creators;nullable,protected,target,source,get,custom,target,source,class,bean,class,string,bean,name,if,this,custom,target,source,creators,null,this,bean,factory,null,this,bean,factory,contains,bean,bean,name,for,target,source,creator,tsc,this,custom,target,source,creators,target,source,ts,tsc,get,target,source,bean,class,bean,name,if,ts,null,if,logger,is,trace,enabled,logger,trace,target,source,creator,tsc,found,custom,target,source,for,bean,with,name,bean,name,return,ts,return,null
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators);1328020251;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators);1355352386;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators);1356735495;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators);1357119239;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators);1362408075;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators);1364505266;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators);1368482696;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators);1392159680;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators);1398791249;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators);1407154420;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator[] targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1328020251;Return the owning BeanFactory._May be <code>null</code>, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,code,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1355352386;Return the owning BeanFactory._May be <code>null</code>, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,code,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1356735495;Return the owning BeanFactory._May be {@code null}, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1357119239;Return the owning BeanFactory._May be {@code null}, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1362408075;Return the owning BeanFactory._May be {@code null}, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1364505266;Return the owning BeanFactory._May be {@code null}, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1368482696;Return the owning BeanFactory._May be {@code null}, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1392159680;Return the owning BeanFactory._May be {@code null}, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1398791249;Return the owning BeanFactory._May be {@code null}, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1407154420;Return the owning BeanFactory._May be {@code null}, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1407511029;Return the owning BeanFactory._May be {@code null}, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1412610171;Return the owning BeanFactory._May be {@code null}, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1447077603;Return the owning BeanFactory._May be {@code null}, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1447399603;Return the owning BeanFactory._May be {@code null}, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1460663185;Return the owning BeanFactory._May be {@code null}, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1467730834;Return the owning BeanFactory._May be {@code null}, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1469561191;Return the owning BeanFactory._May be {@code null}, as this object doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,bean,factory,may,be,code,null,as,this,object,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected BeanFactory getBeanFactory();1483047576;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName);1496837955;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,nullable,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName);1498780456;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,nullable,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName);1499873102;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,nullable,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName);1500448076;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,nullable,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName);1500495740;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,nullable,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName);1502974979;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,nullable,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName);1506097334;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,nullable,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName);1515363805;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,nullable,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName);1519295386;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,nullable,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName);1530174524;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,nullable,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName);1530188116;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,nullable,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName);1533908746;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,nullable,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName);1535064541;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,nullable,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName);1549551674;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, @Nullable String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,nullable,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, @Nullable String beanName, Object cacheKey);1496837955;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, @Nullable String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,nullable,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, @Nullable String beanName, Object cacheKey);1498780456;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, @Nullable String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,nullable,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, @Nullable String beanName, Object cacheKey);1499873102;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, @Nullable String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,nullable,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected Object wrapIfNecessary(Object bean, @Nullable String beanName, Object cacheKey);1500448076;Wrap the given bean if necessary, i.e. if it is eligible for being proxied._@param bean the raw bean instance_@param beanName the name of the bean_@param cacheKey the cache key for metadata access_@return a proxy wrapping the bean, or the raw bean instance as-is;protected Object wrapIfNecessary(Object bean, @Nullable String beanName, Object cacheKey) {_		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {_			return bean__		}_		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {_			return bean__		}_		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {_			this.advisedBeans.put(cacheKey, Boolean.FALSE)__			return bean__		}__		_		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)__		if (specificInterceptors != DO_NOT_PROXY) {_			this.advisedBeans.put(cacheKey, Boolean.TRUE)__			Object proxy = createProxy(_					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))__			this.proxyTypes.put(cacheKey, proxy.getClass())__			return proxy__		}__		this.advisedBeans.put(cacheKey, Boolean.FALSE)__		return bean__	};wrap,the,given,bean,if,necessary,i,e,if,it,is,eligible,for,being,proxied,param,bean,the,raw,bean,instance,param,bean,name,the,name,of,the,bean,param,cache,key,the,cache,key,for,metadata,access,return,a,proxy,wrapping,the,bean,or,the,raw,bean,instance,as,is;protected,object,wrap,if,necessary,object,bean,nullable,string,bean,name,object,cache,key,if,bean,name,null,this,target,sourced,beans,contains,bean,name,return,bean,if,boolean,false,equals,this,advised,beans,get,cache,key,return,bean,if,is,infrastructure,class,bean,get,class,should,skip,bean,get,class,bean,name,this,advised,beans,put,cache,key,boolean,false,return,bean,object,specific,interceptors,get,advices,and,advisors,for,bean,bean,get,class,bean,name,null,if,specific,interceptors,this,advised,beans,put,cache,key,boolean,true,object,proxy,create,proxy,bean,get,class,bean,name,specific,interceptors,new,singleton,target,source,bean,this,proxy,types,put,cache,key,proxy,get,class,return,proxy,this,advised,beans,put,cache,key,boolean,false,return,bean
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, @Nullable String beanName);1496837955;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, @Nullable String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,nullable,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, @Nullable String beanName);1498780456;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, @Nullable String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,nullable,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, @Nullable String beanName);1499873102;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, @Nullable String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,nullable,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldSkip(Class<?> beanClass, @Nullable String beanName);1500448076;Subclasses should override this method to return {@code true} if the_given bean should not be considered for auto-proxying by this post-processor._<p>Sometimes we need to be able to avoid this happening if it will lead to_a circular reference. This implementation returns {@code false}._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether to skip the given bean;protected boolean shouldSkip(Class<?> beanClass, @Nullable String beanName) {_		return false__	};subclasses,should,override,this,method,to,return,code,true,if,the,given,bean,should,not,be,considered,for,auto,proxying,by,this,post,processor,p,sometimes,we,need,to,be,able,to,avoid,this,happening,if,it,will,lead,to,a,circular,reference,this,implementation,returns,code,false,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,to,skip,the,given,bean;protected,boolean,should,skip,class,bean,class,nullable,string,bean,name,return,false
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1328020251;Determine whether the given bean should be proxied with its target_class rather than its interfaces. Checks the_{@link #setProxyTargetClass "proxyTargetClass" setting} as well as the_{@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (isProxyTargetClass() ||_				(this.beanFactory instanceof ConfigurableListableBeanFactory &&_						AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName)))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,checks,the,link,set,proxy,target,class,proxy,target,class,setting,as,well,as,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,is,proxy,target,class,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1355352386;Determine whether the given bean should be proxied with its target_class rather than its interfaces. Checks the_{@link #setProxyTargetClass "proxyTargetClass" setting} as well as the_{@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (isProxyTargetClass() ||_				(this.beanFactory instanceof ConfigurableListableBeanFactory &&_						AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName)))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,checks,the,link,set,proxy,target,class,proxy,target,class,setting,as,well,as,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,is,proxy,target,class,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1356735495;Determine whether the given bean should be proxied with its target_class rather than its interfaces. Checks the_{@link #setProxyTargetClass "proxyTargetClass" setting} as well as the_{@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (isProxyTargetClass() ||_				(this.beanFactory instanceof ConfigurableListableBeanFactory &&_						AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName)))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,checks,the,link,set,proxy,target,class,proxy,target,class,setting,as,well,as,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,is,proxy,target,class,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1357119239;Determine whether the given bean should be proxied with its target_class rather than its interfaces. Checks the_{@link #setProxyTargetClass "proxyTargetClass" setting} as well as the_{@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (isProxyTargetClass() ||_				(this.beanFactory instanceof ConfigurableListableBeanFactory &&_						AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName)))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,checks,the,link,set,proxy,target,class,proxy,target,class,setting,as,well,as,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,is,proxy,target,class,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1362408075;Determine whether the given bean should be proxied with its target_class rather than its interfaces. Checks the_{@link #setProxyTargetClass "proxyTargetClass" setting} as well as the_{@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (isProxyTargetClass() ||_				(this.beanFactory instanceof ConfigurableListableBeanFactory &&_						AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName)))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,checks,the,link,set,proxy,target,class,proxy,target,class,setting,as,well,as,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,is,proxy,target,class,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1364505266;Determine whether the given bean should be proxied with its target_class rather than its interfaces. Checks the_{@link #setProxyTargetClass "proxyTargetClass" setting} as well as the_{@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (isProxyTargetClass() ||_				(this.beanFactory instanceof ConfigurableListableBeanFactory &&_						AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName)))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,checks,the,link,set,proxy,target,class,proxy,target,class,setting,as,well,as,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,is,proxy,target,class,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1368482696;Determine whether the given bean should be proxied with its target_class rather than its interfaces. Checks the_{@link #setProxyTargetClass "proxyTargetClass" setting} as well as the_{@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (isProxyTargetClass() ||_				(this.beanFactory instanceof ConfigurableListableBeanFactory &&_						AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName)))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,checks,the,link,set,proxy,target,class,proxy,target,class,setting,as,well,as,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,is,proxy,target,class,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1392159680;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1398791249;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1407154420;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1407511029;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1412610171;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1447077603;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1447399603;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1460663185;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1467730834;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1469561191;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1483047576;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName);1495868221;Determine whether the given bean should be proxied with its target class rather than its interfaces._<p>Checks the {@link AutoProxyUtils#PRESERVE_TARGET_CLASS_ATTRIBUTE "preserveTargetClass" attribute}_of the corresponding bean definition._@param beanClass the class of the bean_@param beanName the name of the bean_@return whether the given bean should be proxied with its target class_@see AutoProxyUtils#shouldProxyTargetClass;protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {_		return (this.beanFactory instanceof ConfigurableListableBeanFactory &&_				AutoProxyUtils.shouldProxyTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName))__	};determine,whether,the,given,bean,should,be,proxied,with,its,target,class,rather,than,its,interfaces,p,checks,the,link,auto,proxy,utils,preserve,target,class,attribute,of,the,corresponding,bean,definition,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,return,whether,the,given,bean,should,be,proxied,with,its,target,class,see,auto,proxy,utils,should,proxy,target,class;protected,boolean,should,proxy,target,class,class,bean,class,string,bean,name,return,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,should,proxy,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1328020251;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<Object>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors != null) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = (commonInterceptors != null ? commonInterceptors.length : 0)__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,object,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,null,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,null,common,interceptors,length,0,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1355352386;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<Object>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors != null) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = (commonInterceptors != null ? commonInterceptors.length : 0)__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,object,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,null,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,null,common,interceptors,length,0,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1356735495;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<Object>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors != null) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = (commonInterceptors != null ? commonInterceptors.length : 0)__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,object,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,null,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,null,common,interceptors,length,0,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1357119239;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<Object>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors != null) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = (commonInterceptors != null ? commonInterceptors.length : 0)__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,object,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,null,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,null,common,interceptors,length,0,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1362408075;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<Object>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors != null) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = (commonInterceptors != null ? commonInterceptors.length : 0)__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,object,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,null,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,null,common,interceptors,length,0,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1364505266;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<Object>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors != null) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = (commonInterceptors != null ? commonInterceptors.length : 0)__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,object,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,null,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,null,common,interceptors,length,0,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1368482696;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<Object>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors != null) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = (commonInterceptors != null ? commonInterceptors.length : 0)__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,object,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,null,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,null,common,interceptors,length,0,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1392159680;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<Object>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors != null) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = (commonInterceptors != null ? commonInterceptors.length : 0)__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,object,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,null,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,null,common,interceptors,length,0,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1398791249;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<Object>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors != null) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = (commonInterceptors != null ? commonInterceptors.length : 0)__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,object,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,null,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,null,common,interceptors,length,0,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1407154420;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<Object>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors != null) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = (commonInterceptors != null ? commonInterceptors.length : 0)__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,object,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,null,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,null,common,interceptors,length,0,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1407511029;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<Object>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors != null) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = (commonInterceptors != null ? commonInterceptors.length : 0)__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,object,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,null,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,null,common,interceptors,length,0,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1412610171;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<Object>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors != null) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = (commonInterceptors != null ? commonInterceptors.length : 0)__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,object,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,null,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,null,common,interceptors,length,0,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1447077603;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<Object>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,object,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1447399603;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<Object>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,object,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1460663185;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<Object>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,object,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1467730834;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1469561191;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1483047576;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors);1495868221;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(String beanName, Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,string,bean,name,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> @Nullable 	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, 			@Nullable String beanName, @Nullable TargetSource customTargetSource) 			throws BeansException_;1496837955;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;@Nullable_	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass,_			@Nullable String beanName, @Nullable TargetSource customTargetSource)_			throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;nullable,protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,nullable,string,bean,name,nullable,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> @Nullable 	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, 			@Nullable String beanName, @Nullable TargetSource customTargetSource) 			throws BeansException_;1498780456;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;@Nullable_	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass,_			@Nullable String beanName, @Nullable TargetSource customTargetSource)_			throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;nullable,protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,nullable,string,bean,name,nullable,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> @Nullable 	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, 			@Nullable String beanName, @Nullable TargetSource customTargetSource) 			throws BeansException_;1499873102;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;@Nullable_	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass,_			@Nullable String beanName, @Nullable TargetSource customTargetSource)_			throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;nullable,protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,nullable,string,bean,name,nullable,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> @Nullable 	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, 			@Nullable String beanName, @Nullable TargetSource customTargetSource) 			throws BeansException_;1500448076;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;@Nullable_	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass,_			@Nullable String beanName, @Nullable TargetSource customTargetSource)_			throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;nullable,protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,nullable,string,bean,name,nullable,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1328020251;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		ProxyFactory proxyFactory = new ProxyFactory()__		_		proxyFactory.copyFrom(this)___		if (!shouldProxyTargetClass(beanClass, beanName)) {_			_			_			Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, this.proxyClassLoader)__			for (Class<?> targetInterface : targetInterfaces) {_				proxyFactory.addInterface(targetInterface)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(this.proxyClassLoader)__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,should,proxy,target,class,bean,class,bean,name,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,this,proxy,class,loader,for,class,target,interface,target,interfaces,proxy,factory,add,interface,target,interface,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,this,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1355352386;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		ProxyFactory proxyFactory = new ProxyFactory()__		_		proxyFactory.copyFrom(this)___		if (!shouldProxyTargetClass(beanClass, beanName)) {_			_			_			Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, this.proxyClassLoader)__			for (Class<?> targetInterface : targetInterfaces) {_				proxyFactory.addInterface(targetInterface)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(this.proxyClassLoader)__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,should,proxy,target,class,bean,class,bean,name,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,this,proxy,class,loader,for,class,target,interface,target,interfaces,proxy,factory,add,interface,target,interface,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,this,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1356735495;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		ProxyFactory proxyFactory = new ProxyFactory()__		_		proxyFactory.copyFrom(this)___		if (!shouldProxyTargetClass(beanClass, beanName)) {_			_			_			Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, this.proxyClassLoader)__			for (Class<?> targetInterface : targetInterfaces) {_				proxyFactory.addInterface(targetInterface)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(this.proxyClassLoader)__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,should,proxy,target,class,bean,class,bean,name,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,this,proxy,class,loader,for,class,target,interface,target,interfaces,proxy,factory,add,interface,target,interface,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,this,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1357119239;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		ProxyFactory proxyFactory = new ProxyFactory()__		_		proxyFactory.copyFrom(this)___		if (!shouldProxyTargetClass(beanClass, beanName)) {_			_			_			Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, this.proxyClassLoader)__			for (Class<?> targetInterface : targetInterfaces) {_				proxyFactory.addInterface(targetInterface)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(this.proxyClassLoader)__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,should,proxy,target,class,bean,class,bean,name,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,this,proxy,class,loader,for,class,target,interface,target,interfaces,proxy,factory,add,interface,target,interface,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,this,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1362408075;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		ProxyFactory proxyFactory = new ProxyFactory()__		_		proxyFactory.copyFrom(this)___		if (!shouldProxyTargetClass(beanClass, beanName)) {_			_			_			Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, this.proxyClassLoader)__			for (Class<?> targetInterface : targetInterfaces) {_				proxyFactory.addInterface(targetInterface)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(this.proxyClassLoader)__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,should,proxy,target,class,bean,class,bean,name,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,this,proxy,class,loader,for,class,target,interface,target,interfaces,proxy,factory,add,interface,target,interface,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,this,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1364505266;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		ProxyFactory proxyFactory = new ProxyFactory()__		_		proxyFactory.copyFrom(this)___		if (!shouldProxyTargetClass(beanClass, beanName)) {_			_			_			Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, this.proxyClassLoader)__			for (Class<?> targetInterface : targetInterfaces) {_				proxyFactory.addInterface(targetInterface)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(this.proxyClassLoader)__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,should,proxy,target,class,bean,class,bean,name,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,this,proxy,class,loader,for,class,target,interface,target,interfaces,proxy,factory,add,interface,target,interface,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,this,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1368482696;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		ProxyFactory proxyFactory = new ProxyFactory()__		_		proxyFactory.copyFrom(this)___		if (!shouldProxyTargetClass(beanClass, beanName)) {_			_			_			Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, this.proxyClassLoader)__			for (Class<?> targetInterface : targetInterfaces) {_				proxyFactory.addInterface(targetInterface)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(this.proxyClassLoader)__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,should,proxy,target,class,bean,class,bean,name,class,target,interfaces,class,utils,get,all,interfaces,for,class,bean,class,this,proxy,class,loader,for,class,target,interface,target,interfaces,proxy,factory,add,interface,target,interface,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,this,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1392159680;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		ProxyFactory proxyFactory = new ProxyFactory()__		_		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(this.proxyClassLoader)__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,this,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1398791249;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1407154420;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1407511029;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1412610171;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1447077603;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		if (beanName != null && this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,if,bean,name,null,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1447399603;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1460663185;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1467730834;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1469561191;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1483047576;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> protected Object createProxy( 			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource);1495868221;Create an AOP proxy for the given bean._@param beanClass the class of the bean_@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@param targetSource the TargetSource for the proxy,_already pre-configured to access the bean_@return the AOP proxy for the bean_@see #buildAdvisors;protected Object createProxy(_			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass)__		}__		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.copyFrom(this)___		if (!proxyFactory.isProxyTargetClass()) {_			if (shouldProxyTargetClass(beanClass, beanName)) {_				proxyFactory.setProxyTargetClass(true)__			}_			else {_				evaluateProxyInterfaces(beanClass, proxyFactory)__			}_		}__		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors)__		for (Advisor advisor : advisors) {_			proxyFactory.addAdvisor(advisor)__		}__		proxyFactory.setTargetSource(targetSource)__		customizeProxyFactory(proxyFactory)___		proxyFactory.setFrozen(this.freezeProxy)__		if (advisorsPreFiltered()) {_			proxyFactory.setPreFiltered(true)__		}__		return proxyFactory.getProxy(getProxyClassLoader())__	};create,an,aop,proxy,for,the,given,bean,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,param,target,source,the,target,source,for,the,proxy,already,pre,configured,to,access,the,bean,return,the,aop,proxy,for,the,bean,see,build,advisors;protected,object,create,proxy,class,bean,class,string,bean,name,object,specific,interceptors,target,source,target,source,if,this,bean,factory,instanceof,configurable,listable,bean,factory,auto,proxy,utils,expose,target,class,configurable,listable,bean,factory,this,bean,factory,bean,name,bean,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,copy,from,this,if,proxy,factory,is,proxy,target,class,if,should,proxy,target,class,bean,class,bean,name,proxy,factory,set,proxy,target,class,true,else,evaluate,proxy,interfaces,bean,class,proxy,factory,advisor,advisors,build,advisors,bean,name,specific,interceptors,for,advisor,advisor,advisors,proxy,factory,add,advisor,advisor,proxy,factory,set,target,source,target,source,customize,proxy,factory,proxy,factory,proxy,factory,set,frozen,this,freeze,proxy,if,advisors,pre,filtered,proxy,factory,set,pre,filtered,true,return,proxy,factory,get,proxy,get,proxy,class,loader
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1328020251;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory) ?_				(ConfigurableBeanFactory) this.beanFactory : null__		List<Advisor> advisors = new ArrayList<Advisor>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,advisor,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1355352386;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory) ?_				(ConfigurableBeanFactory) this.beanFactory : null__		List<Advisor> advisors = new ArrayList<Advisor>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,advisor,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1356735495;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory) ?_				(ConfigurableBeanFactory) this.beanFactory : null__		List<Advisor> advisors = new ArrayList<Advisor>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,advisor,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1357119239;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory) ?_				(ConfigurableBeanFactory) this.beanFactory : null__		List<Advisor> advisors = new ArrayList<Advisor>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,advisor,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1362408075;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory) ?_				(ConfigurableBeanFactory) this.beanFactory : null__		List<Advisor> advisors = new ArrayList<Advisor>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,advisor,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1364505266;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory) ?_				(ConfigurableBeanFactory) this.beanFactory : null__		List<Advisor> advisors = new ArrayList<Advisor>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,advisor,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1368482696;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory) ?_				(ConfigurableBeanFactory) this.beanFactory : null__		List<Advisor> advisors = new ArrayList<Advisor>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,advisor,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1392159680;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory) ?_				(ConfigurableBeanFactory) this.beanFactory : null__		List<Advisor> advisors = new ArrayList<Advisor>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,advisor,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1398791249;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory) ?_				(ConfigurableBeanFactory) this.beanFactory : null__		List<Advisor> advisors = new ArrayList<Advisor>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,advisor,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1407154420;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory) ?_				(ConfigurableBeanFactory) this.beanFactory : null__		List<Advisor> advisors = new ArrayList<Advisor>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,advisor,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1407511029;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory) ?_				(ConfigurableBeanFactory) this.beanFactory : null__		List<Advisor> advisors = new ArrayList<Advisor>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,advisor,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1412610171;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory) ?_				(ConfigurableBeanFactory) this.beanFactory : null__		List<Advisor> advisors = new ArrayList<Advisor>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,advisor,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1447077603;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ?_				(ConfigurableBeanFactory) this.beanFactory : null)__		List<Advisor> advisors = new ArrayList<Advisor>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,advisor,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1447399603;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ?_				(ConfigurableBeanFactory) this.beanFactory : null)__		List<Advisor> advisors = new ArrayList<Advisor>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,advisor,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1460663185;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ?_				(ConfigurableBeanFactory) this.beanFactory : null)__		List<Advisor> advisors = new ArrayList<Advisor>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,advisor,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1467730834;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ?_				(ConfigurableBeanFactory) this.beanFactory : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1469561191;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ?_				(ConfigurableBeanFactory) this.beanFactory : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1483047576;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ?_				(ConfigurableBeanFactory) this.beanFactory : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1495868221;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ?_				(ConfigurableBeanFactory) this.beanFactory : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1496837955;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ?_				(ConfigurableBeanFactory) this.beanFactory : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1498780456;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ?_				(ConfigurableBeanFactory) this.beanFactory : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1499873102;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ?_				(ConfigurableBeanFactory) this.beanFactory : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1500448076;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ?_				(ConfigurableBeanFactory) this.beanFactory : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1500495740;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ?_				(ConfigurableBeanFactory) this.beanFactory : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1502974979;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ?_				(ConfigurableBeanFactory) this.beanFactory : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1506097334;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		Assert.state(this.beanFactory != null, "BeanFactory required for resolving interceptor names")__		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ?_				(ConfigurableBeanFactory) this.beanFactory : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Object next = this.beanFactory.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,assert,state,this,bean,factory,null,bean,factory,required,for,resolving,interceptor,names,configurable,bean,factory,cbf,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,object,next,this,bean,factory,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1515363805;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		BeanFactory bf = this.beanFactory__		ConfigurableBeanFactory cbf = (bf instanceof ConfigurableBeanFactory ? (ConfigurableBeanFactory) bf : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Assert.state(bf != null, "BeanFactory required for resolving interceptor names")__				Object next = bf.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[advisors.size()])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,bean,factory,bf,this,bean,factory,configurable,bean,factory,cbf,bf,instanceof,configurable,bean,factory,configurable,bean,factory,bf,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,assert,state,bf,null,bean,factory,required,for,resolving,interceptor,names,object,next,bf,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,advisors,size
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1519295386;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		BeanFactory bf = this.beanFactory__		ConfigurableBeanFactory cbf = (bf instanceof ConfigurableBeanFactory ? (ConfigurableBeanFactory) bf : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Assert.state(bf != null, "BeanFactory required for resolving interceptor names")__				Object next = bf.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[0])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,bean,factory,bf,this,bean,factory,configurable,bean,factory,cbf,bf,instanceof,configurable,bean,factory,configurable,bean,factory,bf,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,assert,state,bf,null,bean,factory,required,for,resolving,interceptor,names,object,next,bf,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,0
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1530174524;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		BeanFactory bf = this.beanFactory__		ConfigurableBeanFactory cbf = (bf instanceof ConfigurableBeanFactory ? (ConfigurableBeanFactory) bf : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Assert.state(bf != null, "BeanFactory required for resolving interceptor names")__				Object next = bf.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[0])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,bean,factory,bf,this,bean,factory,configurable,bean,factory,cbf,bf,instanceof,configurable,bean,factory,configurable,bean,factory,bf,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,assert,state,bf,null,bean,factory,required,for,resolving,interceptor,names,object,next,bf,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,0
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1530188116;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		BeanFactory bf = this.beanFactory__		ConfigurableBeanFactory cbf = (bf instanceof ConfigurableBeanFactory ? (ConfigurableBeanFactory) bf : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Assert.state(bf != null, "BeanFactory required for resolving interceptor names")__				Object next = bf.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[0])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,bean,factory,bf,this,bean,factory,configurable,bean,factory,cbf,bf,instanceof,configurable,bean,factory,configurable,bean,factory,bf,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,assert,state,bf,null,bean,factory,required,for,resolving,interceptor,names,object,next,bf,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,0
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1533908746;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		BeanFactory bf = this.beanFactory__		ConfigurableBeanFactory cbf = (bf instanceof ConfigurableBeanFactory ? (ConfigurableBeanFactory) bf : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Assert.state(bf != null, "BeanFactory required for resolving interceptor names")__				Object next = bf.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[0])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,bean,factory,bf,this,bean,factory,configurable,bean,factory,cbf,bf,instanceof,configurable,bean,factory,configurable,bean,factory,bf,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,assert,state,bf,null,bean,factory,required,for,resolving,interceptor,names,object,next,bf,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,0
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1535064541;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		BeanFactory bf = this.beanFactory__		ConfigurableBeanFactory cbf = (bf instanceof ConfigurableBeanFactory ? (ConfigurableBeanFactory) bf : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Assert.state(bf != null, "BeanFactory required for resolving interceptor names")__				Object next = bf.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[0])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,bean,factory,bf,this,bean,factory,configurable,bean,factory,cbf,bf,instanceof,configurable,bean,factory,configurable,bean,factory,bf,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,assert,state,bf,null,bean,factory,required,for,resolving,interceptor,names,object,next,bf,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,0
AbstractAutoProxyCreator -> private Advisor[] resolveInterceptorNames();1549551674;Resolves the specified interceptor names to Advisor objects._@see #setInterceptorNames;private Advisor[] resolveInterceptorNames() {_		BeanFactory bf = this.beanFactory__		ConfigurableBeanFactory cbf = (bf instanceof ConfigurableBeanFactory ? (ConfigurableBeanFactory) bf : null)__		List<Advisor> advisors = new ArrayList<>()__		for (String beanName : this.interceptorNames) {_			if (cbf == null || !cbf.isCurrentlyInCreation(beanName)) {_				Assert.state(bf != null, "BeanFactory required for resolving interceptor names")__				Object next = bf.getBean(beanName)__				advisors.add(this.advisorAdapterRegistry.wrap(next))__			}_		}_		return advisors.toArray(new Advisor[0])__	};resolves,the,specified,interceptor,names,to,advisor,objects,see,set,interceptor,names;private,advisor,resolve,interceptor,names,bean,factory,bf,this,bean,factory,configurable,bean,factory,cbf,bf,instanceof,configurable,bean,factory,configurable,bean,factory,bf,null,list,advisor,advisors,new,array,list,for,string,bean,name,this,interceptor,names,if,cbf,null,cbf,is,currently,in,creation,bean,name,assert,state,bf,null,bean,factory,required,for,resolving,interceptor,names,object,next,bf,get,bean,bean,name,advisors,add,this,advisor,adapter,registry,wrap,next,return,advisors,to,array,new,advisor,0
AbstractAutoProxyCreator -> public void setProxyClassLoader(ClassLoader classLoader);1328020251;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
AbstractAutoProxyCreator -> public void setProxyClassLoader(ClassLoader classLoader);1355352386;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
AbstractAutoProxyCreator -> public void setProxyClassLoader(ClassLoader classLoader);1356735495;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
AbstractAutoProxyCreator -> public void setProxyClassLoader(ClassLoader classLoader);1357119239;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
AbstractAutoProxyCreator -> public void setProxyClassLoader(ClassLoader classLoader);1362408075;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
AbstractAutoProxyCreator -> public void setProxyClassLoader(ClassLoader classLoader);1364505266;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
AbstractAutoProxyCreator -> public void setProxyClassLoader(ClassLoader classLoader);1368482696;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
AbstractAutoProxyCreator -> public void setProxyClassLoader(ClassLoader classLoader);1392159680;Set the ClassLoader to generate the proxy class in._<p>Default is the bean ClassLoader, i.e. the ClassLoader used by the_containing BeanFactory for loading all bean classes. This can be_overridden here for specific proxies.;public void setProxyClassLoader(ClassLoader classLoader) {_		this.proxyClassLoader = classLoader__		this.classLoaderConfigured = (classLoader != null)__	};set,the,class,loader,to,generate,the,proxy,class,in,p,default,is,the,bean,class,loader,i,e,the,class,loader,used,by,the,containing,bean,factory,for,loading,all,bean,classes,this,can,be,overridden,here,for,specific,proxies;public,void,set,proxy,class,loader,class,loader,class,loader,this,proxy,class,loader,class,loader,this,class,loader,configured,class,loader,null
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1328020251;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1355352386;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1356735495;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1357119239;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1362408075;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1364505266;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1368482696;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1392159680;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1398791249;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1407154420;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1407511029;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1412610171;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1447077603;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1447399603;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1460663185;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1467730834;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1469561191;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1483047576;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1495868221;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1496837955;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1498780456;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1499873102;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1500448076;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1500495740;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1502974979;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1506097334;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1515363805;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1519295386;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1530174524;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1530188116;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1533908746;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1535064541;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst);1549551674;Set whether the common interceptors should be applied before bean-specific ones._Default is "true"_ else, bean-specific interceptors will get applied first.;public void setApplyCommonInterceptorsFirst(boolean applyCommonInterceptorsFirst) {_		this.applyCommonInterceptorsFirst = applyCommonInterceptorsFirst__	};set,whether,the,common,interceptors,should,be,applied,before,bean,specific,ones,default,is,true,else,bean,specific,interceptors,will,get,applied,first;public,void,set,apply,common,interceptors,first,boolean,apply,common,interceptors,first,this,apply,common,interceptors,first,apply,common,interceptors,first
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1356735495;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.containsKey(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,key,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1368482696;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1392159680;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1398791249;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1407154420;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1407511029;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1412610171;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1447077603;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1447399603;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1460663185;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1467730834;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1469561191;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1483047576;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> @Override 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;1495868221;Create a proxy with the configured interceptors if the bean is_identified as one to proxy by the subclass._@see #getAdvicesAndAdvisorsForBean;@Override_	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {_		if (bean != null) {_			Object cacheKey = getCacheKey(bean.getClass(), beanName)__			if (!this.earlyProxyReferences.contains(cacheKey)) {_				return wrapIfNecessary(bean, beanName, cacheKey)__			}_		}_		return bean__	};create,a,proxy,with,the,configured,interceptors,if,the,bean,is,identified,as,one,to,proxy,by,the,subclass,see,get,advices,and,advisors,for,bean;override,public,object,post,process,after,initialization,object,bean,string,bean,name,throws,beans,exception,if,bean,null,object,cache,key,get,cache,key,bean,get,class,bean,name,if,this,early,proxy,references,contains,cache,key,return,wrap,if,necessary,bean,bean,name,cache,key,return,bean
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1328020251;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1355352386;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1356735495;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1357119239;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1362408075;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1364505266;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1368482696;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1392159680;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1398791249;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1407154420;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1407511029;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1412610171;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1447077603;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1447399603;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1460663185;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1467730834;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1469561191;Specify the AdvisorAdapterRegistry to use._Default is the global AdvisorAdapterRegistry._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,advisor,adapter,registry,to,use,default,is,the,global,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1483047576;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1495868221;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1496837955;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1498780456;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1499873102;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1500448076;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1500495740;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1502974979;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1506097334;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1515363805;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1519295386;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1530174524;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1530188116;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1533908746;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1535064541;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry);1549551674;Specify the {@link AdvisorAdapterRegistry} to use._<p>Default is the global {@link AdvisorAdapterRegistry}._@see org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;public void setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {_		this.advisorAdapterRegistry = advisorAdapterRegistry__	};specify,the,link,advisor,adapter,registry,to,use,p,default,is,the,global,link,advisor,adapter,registry,see,org,springframework,aop,framework,adapter,global,advisor,adapter,registry;public,void,set,advisor,adapter,registry,advisor,adapter,registry,advisor,adapter,registry,this,advisor,adapter,registry,advisor,adapter,registry
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors);1496837955;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,nullable,string,bean,name,nullable,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors);1498780456;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,nullable,string,bean,name,nullable,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors);1499873102;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,nullable,string,bean,name,nullable,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors);1500448076;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,nullable,string,bean,name,nullable,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors);1500495740;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,nullable,string,bean,name,nullable,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors);1502974979;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,nullable,string,bean,name,nullable,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors);1506097334;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,nullable,string,bean,name,nullable,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors);1515363805;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,nullable,string,bean,name,nullable,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors);1519295386;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,nullable,string,bean,name,nullable,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors);1530174524;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,nullable,string,bean,name,nullable,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors);1530188116;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isDebugEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,nullable,string,bean,name,nullable,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,debug,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,debug,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors);1533908746;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isTraceEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.trace("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,nullable,string,bean,name,nullable,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,trace,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,trace,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors);1535064541;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isTraceEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.trace("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,nullable,string,bean,name,nullable,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,trace,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,trace,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors);1549551674;Determine the advisors for the given bean, including the specific interceptors_as well as the common interceptor, all adapted to the Advisor interface._@param beanName the name of the bean_@param specificInterceptors the set of interceptors that is_specific to this bean (may be empty, but not null)_@return the list of Advisors for the given bean;protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[] specificInterceptors) {_		_		Advisor[] commonInterceptors = resolveInterceptorNames()___		List<Object> allInterceptors = new ArrayList<>()__		if (specificInterceptors != null) {_			allInterceptors.addAll(Arrays.asList(specificInterceptors))__			if (commonInterceptors.length > 0) {_				if (this.applyCommonInterceptorsFirst) {_					allInterceptors.addAll(0, Arrays.asList(commonInterceptors))__				}_				else {_					allInterceptors.addAll(Arrays.asList(commonInterceptors))__				}_			}_		}_		if (logger.isTraceEnabled()) {_			int nrOfCommonInterceptors = commonInterceptors.length__			int nrOfSpecificInterceptors = (specificInterceptors != null ? specificInterceptors.length : 0)__			logger.trace("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors +_					" common interceptors and " + nrOfSpecificInterceptors + " specific interceptors")__		}__		Advisor[] advisors = new Advisor[allInterceptors.size()]__		for (int i = 0_ i < allInterceptors.size()_ i++) {_			advisors[i] = this.advisorAdapterRegistry.wrap(allInterceptors.get(i))__		}_		return advisors__	};determine,the,advisors,for,the,given,bean,including,the,specific,interceptors,as,well,as,the,common,interceptor,all,adapted,to,the,advisor,interface,param,bean,name,the,name,of,the,bean,param,specific,interceptors,the,set,of,interceptors,that,is,specific,to,this,bean,may,be,empty,but,not,null,return,the,list,of,advisors,for,the,given,bean;protected,advisor,build,advisors,nullable,string,bean,name,nullable,object,specific,interceptors,advisor,common,interceptors,resolve,interceptor,names,list,object,all,interceptors,new,array,list,if,specific,interceptors,null,all,interceptors,add,all,arrays,as,list,specific,interceptors,if,common,interceptors,length,0,if,this,apply,common,interceptors,first,all,interceptors,add,all,0,arrays,as,list,common,interceptors,else,all,interceptors,add,all,arrays,as,list,common,interceptors,if,logger,is,trace,enabled,int,nr,of,common,interceptors,common,interceptors,length,int,nr,of,specific,interceptors,specific,interceptors,null,specific,interceptors,length,0,logger,trace,creating,implicit,proxy,for,bean,bean,name,with,nr,of,common,interceptors,common,interceptors,and,nr,of,specific,interceptors,specific,interceptors,advisor,advisors,new,advisor,all,interceptors,size,for,int,i,0,i,all,interceptors,size,i,advisors,i,this,advisor,adapter,registry,wrap,all,interceptors,get,i,return,advisors
AbstractAutoProxyCreator -> public void setInterceptorNames(String[] interceptorNames);1328020251;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String[] interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String[] interceptorNames);1355352386;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String[] interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String[] interceptorNames);1356735495;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String[] interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String[] interceptorNames);1357119239;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String[] interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String[] interceptorNames);1362408075;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String[] interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String[] interceptorNames);1364505266;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String[] interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String[] interceptorNames);1368482696;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String[] interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String[] interceptorNames);1392159680;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String[] interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String[] interceptorNames);1398791249;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String[] interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> public void setInterceptorNames(String[] interceptorNames);1407154420;Set the common interceptors. These must be bean names in the current factory._They can be of any advice or advisor type Spring supports._<p>If this property isn't set, there will be zero common interceptors._This is perfectly valid, if "specific" interceptors such as matching_Advisors are all we want.;public void setInterceptorNames(String[] interceptorNames) {_		this.interceptorNames = interceptorNames__	};set,the,common,interceptors,these,must,be,bean,names,in,the,current,factory,they,can,be,of,any,advice,or,advisor,type,spring,supports,p,if,this,property,isn,t,set,there,will,be,zero,common,interceptors,this,is,perfectly,valid,if,specific,interceptors,such,as,matching,advisors,are,all,we,want;public,void,set,interceptor,names,string,interceptor,names,this,interceptor,names,interceptor,names
AbstractAutoProxyCreator -> @Nullable 	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, 			@Nullable TargetSource customTargetSource) throws BeansException_;1500495740;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;@Nullable_	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName,_			@Nullable TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;nullable,protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,nullable,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> @Nullable 	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, 			@Nullable TargetSource customTargetSource) throws BeansException_;1502974979;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;@Nullable_	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName,_			@Nullable TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;nullable,protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,nullable,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> @Nullable 	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, 			@Nullable TargetSource customTargetSource) throws BeansException_;1506097334;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;@Nullable_	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName,_			@Nullable TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;nullable,protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,nullable,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> @Nullable 	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, 			@Nullable TargetSource customTargetSource) throws BeansException_;1515363805;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;@Nullable_	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName,_			@Nullable TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;nullable,protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,nullable,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> @Nullable 	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, 			@Nullable TargetSource customTargetSource) throws BeansException_;1519295386;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;@Nullable_	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName,_			@Nullable TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;nullable,protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,nullable,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> @Nullable 	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, 			@Nullable TargetSource customTargetSource) throws BeansException_;1530174524;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;@Nullable_	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName,_			@Nullable TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;nullable,protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,nullable,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> @Nullable 	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, 			@Nullable TargetSource customTargetSource) throws BeansException_;1530188116;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;@Nullable_	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName,_			@Nullable TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;nullable,protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,nullable,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> @Nullable 	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, 			@Nullable TargetSource customTargetSource) throws BeansException_;1533908746;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;@Nullable_	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName,_			@Nullable TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;nullable,protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,nullable,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> @Nullable 	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, 			@Nullable TargetSource customTargetSource) throws BeansException_;1535064541;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;@Nullable_	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName,_			@Nullable TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;nullable,protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,nullable,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> @Nullable 	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, 			@Nullable TargetSource customTargetSource) throws BeansException_;1549551674;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;@Nullable_	protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName,_			@Nullable TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;nullable,protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,nullable,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1328020251;Build a cache key for the given bean class and bean name._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		return beanClass.getName() + "_" + beanName__	};build,a,cache,key,for,the,given,bean,class,and,bean,name,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,return,bean,class,get,name,bean,name
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1355352386;Build a cache key for the given bean class and bean name._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		return beanClass.getName() + "_" + beanName__	};build,a,cache,key,for,the,given,bean,class,and,bean,name,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,return,bean,class,get,name,bean,name
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1356735495;Build a cache key for the given bean class and bean name._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		return beanClass.getName() + "_" + beanName__	};build,a,cache,key,for,the,given,bean,class,and,bean,name,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,return,bean,class,get,name,bean,name
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1357119239;Build a cache key for the given bean class and bean name._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		return beanClass.getName() + "_" + beanName__	};build,a,cache,key,for,the,given,bean,class,and,bean,name,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,return,bean,class,get,name,bean,name
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1362408075;Build a cache key for the given bean class and bean name._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		return beanClass.getName() + "_" + beanName__	};build,a,cache,key,for,the,given,bean,class,and,bean,name,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,return,bean,class,get,name,bean,name
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1364505266;Build a cache key for the given bean class and bean name._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		return beanClass.getName() + "_" + beanName__	};build,a,cache,key,for,the,given,bean,class,and,bean,name,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,return,bean,class,get,name,bean,name
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1368482696;Build a cache key for the given bean class and bean name._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		return beanClass.getName() + "_" + beanName__	};build,a,cache,key,for,the,given,bean,class,and,bean,name,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,return,bean,class,get,name,bean,name
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1392159680;Build a cache key for the given bean class and bean name._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		return beanClass.getName() + "_" + beanName__	};build,a,cache,key,for,the,given,bean,class,and,bean,name,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,return,bean,class,get,name,bean,name
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1398791249;Build a cache key for the given bean class and bean name._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		return beanClass.getName() + "_" + beanName__	};build,a,cache,key,for,the,given,bean,class,and,bean,name,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,return,bean,class,get,name,bean,name
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1407154420;Build a cache key for the given bean class and bean name._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		return beanClass.getName() + "_" + beanName__	};build,a,cache,key,for,the,given,bean,class,and,bean,name,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,return,bean,class,get,name,bean,name
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1407511029;Build a cache key for the given bean class and bean name._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		return beanClass.getName() + "_" + beanName__	};build,a,cache,key,for,the,given,bean,class,and,bean,name,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,return,bean,class,get,name,bean,name
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1412610171;Build a cache key for the given bean class and bean name._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		return beanClass.getName() + "_" + beanName__	};build,a,cache,key,for,the,given,bean,class,and,bean,name,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,return,bean,class,get,name,bean,name
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1447077603;Build a cache key for the given bean class and bean name._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		return beanClass.getName() + "_" + beanName__	};build,a,cache,key,for,the,given,bean,class,and,bean,name,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,return,bean,class,get,name,bean,name
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1447399603;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1460663185;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1467730834;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1469561191;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1483047576;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> protected Object getCacheKey(Class<?> beanClass, String beanName);1495868221;Build a cache key for the given bean class and bean name._<p>Note: As of 4.2.3, this implementation does not return a concatenated_class/name String anymore but rather the most efficient cache key possible:_a plain bean name, prepended with {@link BeanFactory#FACTORY_BEAN_PREFIX}_in case of a {@code FactoryBean}_ or if no bean name specified, then the_given bean {@code Class} as-is._@param beanClass the bean class_@param beanName the bean name_@return the cache key for the given class and name;protected Object getCacheKey(Class<?> beanClass, String beanName) {_		if (StringUtils.hasLength(beanName)) {_			return (FactoryBean.class.isAssignableFrom(beanClass) ?_					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName)__		}_		else {_			return beanClass__		}_	};build,a,cache,key,for,the,given,bean,class,and,bean,name,p,note,as,of,4,2,3,this,implementation,does,not,return,a,concatenated,class,name,string,anymore,but,rather,the,most,efficient,cache,key,possible,a,plain,bean,name,prepended,with,link,bean,factory,in,case,of,a,code,factory,bean,or,if,no,bean,name,specified,then,the,given,bean,code,class,as,is,param,bean,class,the,bean,class,param,bean,name,the,bean,name,return,the,cache,key,for,the,given,class,and,name;protected,object,get,cache,key,class,bean,class,string,bean,name,if,string,utils,has,length,bean,name,return,factory,bean,class,is,assignable,from,bean,class,bean,factory,bean,name,bean,name,else,return,bean,class
AbstractAutoProxyCreator -> @Nullable 	protected BeanFactory getBeanFactory();1495868221;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> @Nullable 	protected BeanFactory getBeanFactory();1496837955;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> @Nullable 	protected BeanFactory getBeanFactory();1498780456;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> @Nullable 	protected BeanFactory getBeanFactory();1499873102;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> @Nullable 	protected BeanFactory getBeanFactory();1500448076;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> @Nullable 	protected BeanFactory getBeanFactory();1500495740;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> @Nullable 	protected BeanFactory getBeanFactory();1502974979;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> @Nullable 	protected BeanFactory getBeanFactory();1506097334;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> @Nullable 	protected BeanFactory getBeanFactory();1515363805;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> @Nullable 	protected BeanFactory getBeanFactory();1519295386;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> @Nullable 	protected BeanFactory getBeanFactory();1530174524;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> @Nullable 	protected BeanFactory getBeanFactory();1530188116;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> @Nullable 	protected BeanFactory getBeanFactory();1533908746;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> @Nullable 	protected BeanFactory getBeanFactory();1535064541;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> @Nullable 	protected BeanFactory getBeanFactory();1549551674;Return the owning {@link BeanFactory}._May be {@code null}, as this post-processor doesn't need to belong to a bean factory.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,owning,link,bean,factory,may,be,code,null,as,this,post,processor,doesn,t,need,to,belong,to,a,bean,factory;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1328020251;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1355352386;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1356735495;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1357119239;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1362408075;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1364505266;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1368482696;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1392159680;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1398791249;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1407154420;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1407511029;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1412610171;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1447077603;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1447399603;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1460663185;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1467730834;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1469561191;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1483047576;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1495868221;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1496837955;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1498780456;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1499873102;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1500448076;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1500495740;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1502974979;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1506097334;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1515363805;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1519295386;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1530174524;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1530188116;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1533908746;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1535064541;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> @Override 	public void setFrozen(boolean frozen);1549551674;Set whether or not the proxy should be frozen, preventing advice_from being added to it once it is created._<p>Overridden from the super class to prevent the proxy configuration_from being frozen before the proxy is created.;@Override_	public void setFrozen(boolean frozen) {_		this.freezeProxy = frozen__	};set,whether,or,not,the,proxy,should,be,frozen,preventing,advice,from,being,added,to,it,once,it,is,created,p,overridden,from,the,super,class,to,prevent,the,proxy,configuration,from,being,frozen,before,the,proxy,is,created;override,public,void,set,frozen,boolean,frozen,this,freeze,proxy,frozen
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1328020251;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be <code>null</code> if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or <code>null</code> if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,code,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,code,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1355352386;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be <code>null</code> if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or <code>null</code> if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,code,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,code,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1356735495;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1357119239;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1362408075;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1364505266;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1368482696;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1392159680;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1398791249;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1407154420;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1407511029;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1412610171;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1447077603;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1447399603;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1460663185;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1467730834;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1469561191;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> protected abstract Object[] getAdvicesAndAdvisorsForBean( 			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;1483047576;Return whether the given bean is to be proxied, what additional_advices (e.g. AOP Alliance interceptors) and advisors to apply._@param beanClass the class of the bean to advise_@param beanName the name of the bean_@param customTargetSource the TargetSource returned by the_{@link #getCustomTargetSource} method: may be ignored._Will be {@code null} if no custom target source is in use._@return an array of additional interceptors for the particular bean__or an empty array if no additional interceptors but just the common ones__or {@code null} if no proxy at all, not even with the common interceptors._See constants DO_NOT_PROXY and PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS._@throws BeansException in case of errors_@see #DO_NOT_PROXY_@see #PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;protected abstract Object[] getAdvicesAndAdvisorsForBean(_			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException_;return,whether,the,given,bean,is,to,be,proxied,what,additional,advices,e,g,aop,alliance,interceptors,and,advisors,to,apply,param,bean,class,the,class,of,the,bean,to,advise,param,bean,name,the,name,of,the,bean,param,custom,target,source,the,target,source,returned,by,the,link,get,custom,target,source,method,may,be,ignored,will,be,code,null,if,no,custom,target,source,is,in,use,return,an,array,of,additional,interceptors,for,the,particular,bean,or,an,empty,array,if,no,additional,interceptors,but,just,the,common,ones,or,code,null,if,no,proxy,at,all,not,even,with,the,common,interceptors,see,constants,and,throws,beans,exception,in,case,of,errors,see,see;protected,abstract,object,get,advices,and,advisors,for,bean,class,bean,class,string,bean,name,target,source,custom,target,source,throws,beans,exception
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1407511029;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1412610171;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1447077603;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1447399603;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1460663185;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1467730834;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1469561191;Set custom TargetSourceCreators to be applied in this order._If the list is empty, or they all return null, a SingletonTargetSource_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a TargetSourceCreator_returns a TargetSource for a specific bean, that bean will be proxied_in any case._<p>TargetSourceCreators can only be invoked if this post processor is used_in a BeanFactory, and its BeanFactoryAware callback is used._@param targetSourceCreators list of TargetSourceCreator._Ordering is significant: The TargetSource returned from the first matching_TargetSourceCreator (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,target,source,creator,returns,a,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,bean,factory,and,its,bean,factory,aware,callback,is,used,param,target,source,creators,list,of,target,source,creator,ordering,is,significant,the,target,source,returned,from,the,first,matching,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1483047576;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1495868221;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1496837955;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1498780456;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1499873102;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1500448076;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1500495740;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1502974979;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1506097334;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1515363805;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1519295386;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1530174524;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1530188116;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1533908746;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1535064541;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
AbstractAutoProxyCreator -> public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators);1549551674;Set custom {@code TargetSourceCreators} to be applied in this order._If the list is empty, or they all return null, a {@link SingletonTargetSource}_will be created for each bean._<p>Note that TargetSourceCreators will kick in even for target beans_where no advices or advisors have been found. If a {@code TargetSourceCreator}_returns a {@link TargetSource} for a specific bean, that bean will be proxied_in any case._<p>{@code TargetSourceCreators} can only be invoked if this post processor is used_in a {@link BeanFactory} and its {@link BeanFactoryAware} callback is triggered._@param targetSourceCreators the list of {@code TargetSourceCreators}._Ordering is significant: The {@code TargetSource} returned from the first matching_{@code TargetSourceCreator} (that is, the first that returns non-null) will be used.;public void setCustomTargetSourceCreators(TargetSourceCreator... targetSourceCreators) {_		this.customTargetSourceCreators = targetSourceCreators__	};set,custom,code,target,source,creators,to,be,applied,in,this,order,if,the,list,is,empty,or,they,all,return,null,a,link,singleton,target,source,will,be,created,for,each,bean,p,note,that,target,source,creators,will,kick,in,even,for,target,beans,where,no,advices,or,advisors,have,been,found,if,a,code,target,source,creator,returns,a,link,target,source,for,a,specific,bean,that,bean,will,be,proxied,in,any,case,p,code,target,source,creators,can,only,be,invoked,if,this,post,processor,is,used,in,a,link,bean,factory,and,its,link,bean,factory,aware,callback,is,triggered,param,target,source,creators,the,list,of,code,target,source,creators,ordering,is,significant,the,code,target,source,returned,from,the,first,matching,code,target,source,creator,that,is,the,first,that,returns,non,null,will,be,used;public,void,set,custom,target,source,creators,target,source,creator,target,source,creators,this,custom,target,source,creators,target,source,creators
