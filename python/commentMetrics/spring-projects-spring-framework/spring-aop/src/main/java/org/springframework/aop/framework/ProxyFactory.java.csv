# id;timestamp;commentText;codeText;commentWords;codeWords
ProxyFactory -> @SuppressWarnings("unchecked") 	public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor);1328020251;Create a new proxy for the given interface and interceptor._<p>Convenience method for creating a proxy for a single interceptor,_assuming that the interceptor handles all calls itself rather than_delegating to a target, like in the case of remoting proxies._@param proxyInterface the interface that the proxy should implement_@param interceptor the interceptor that the proxy should invoke_@return the proxy object_@see #ProxyFactory(Class, org.aopalliance.intercept.Interceptor);@SuppressWarnings("unchecked")_	public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor) {_		return (T) new ProxyFactory(proxyInterface, interceptor).getProxy()__	};create,a,new,proxy,for,the,given,interface,and,interceptor,p,convenience,method,for,creating,a,proxy,for,a,single,interceptor,assuming,that,the,interceptor,handles,all,calls,itself,rather,than,delegating,to,a,target,like,in,the,case,of,remoting,proxies,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,interceptor,the,interceptor,that,the,proxy,should,invoke,return,the,proxy,object,see,proxy,factory,class,org,aopalliance,intercept,interceptor;suppress,warnings,unchecked,public,static,t,t,get,proxy,class,t,proxy,interface,interceptor,interceptor,return,t,new,proxy,factory,proxy,interface,interceptor,get,proxy
ProxyFactory -> @SuppressWarnings("unchecked") 	public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor);1337254729;Create a new proxy for the given interface and interceptor._<p>Convenience method for creating a proxy for a single interceptor,_assuming that the interceptor handles all calls itself rather than_delegating to a target, like in the case of remoting proxies._@param proxyInterface the interface that the proxy should implement_@param interceptor the interceptor that the proxy should invoke_@return the proxy object_@see #ProxyFactory(Class, org.aopalliance.intercept.Interceptor);@SuppressWarnings("unchecked")_	public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor) {_		return (T) new ProxyFactory(proxyInterface, interceptor).getProxy()__	};create,a,new,proxy,for,the,given,interface,and,interceptor,p,convenience,method,for,creating,a,proxy,for,a,single,interceptor,assuming,that,the,interceptor,handles,all,calls,itself,rather,than,delegating,to,a,target,like,in,the,case,of,remoting,proxies,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,interceptor,the,interceptor,that,the,proxy,should,invoke,return,the,proxy,object,see,proxy,factory,class,org,aopalliance,intercept,interceptor;suppress,warnings,unchecked,public,static,t,t,get,proxy,class,t,proxy,interface,interceptor,interceptor,return,t,new,proxy,factory,proxy,interface,interceptor,get,proxy
ProxyFactory -> @SuppressWarnings("unchecked") 	public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor);1356735495;Create a new proxy for the given interface and interceptor._<p>Convenience method for creating a proxy for a single interceptor,_assuming that the interceptor handles all calls itself rather than_delegating to a target, like in the case of remoting proxies._@param proxyInterface the interface that the proxy should implement_@param interceptor the interceptor that the proxy should invoke_@return the proxy object_@see #ProxyFactory(Class, org.aopalliance.intercept.Interceptor);@SuppressWarnings("unchecked")_	public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor) {_		return (T) new ProxyFactory(proxyInterface, interceptor).getProxy()__	};create,a,new,proxy,for,the,given,interface,and,interceptor,p,convenience,method,for,creating,a,proxy,for,a,single,interceptor,assuming,that,the,interceptor,handles,all,calls,itself,rather,than,delegating,to,a,target,like,in,the,case,of,remoting,proxies,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,interceptor,the,interceptor,that,the,proxy,should,invoke,return,the,proxy,object,see,proxy,factory,class,org,aopalliance,intercept,interceptor;suppress,warnings,unchecked,public,static,t,t,get,proxy,class,t,proxy,interface,interceptor,interceptor,return,t,new,proxy,factory,proxy,interface,interceptor,get,proxy
ProxyFactory -> @SuppressWarnings("unchecked") 	public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor);1377641038;Create a new proxy for the given interface and interceptor._<p>Convenience method for creating a proxy for a single interceptor,_assuming that the interceptor handles all calls itself rather than_delegating to a target, like in the case of remoting proxies._@param proxyInterface the interface that the proxy should implement_@param interceptor the interceptor that the proxy should invoke_@return the proxy object_@see #ProxyFactory(Class, org.aopalliance.intercept.Interceptor);@SuppressWarnings("unchecked")_	public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor) {_		return (T) new ProxyFactory(proxyInterface, interceptor).getProxy()__	};create,a,new,proxy,for,the,given,interface,and,interceptor,p,convenience,method,for,creating,a,proxy,for,a,single,interceptor,assuming,that,the,interceptor,handles,all,calls,itself,rather,than,delegating,to,a,target,like,in,the,case,of,remoting,proxies,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,interceptor,the,interceptor,that,the,proxy,should,invoke,return,the,proxy,object,see,proxy,factory,class,org,aopalliance,intercept,interceptor;suppress,warnings,unchecked,public,static,t,t,get,proxy,class,t,proxy,interface,interceptor,interceptor,return,t,new,proxy,factory,proxy,interface,interceptor,get,proxy
ProxyFactory -> @SuppressWarnings("unchecked") 	public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor);1398290143;Create a new proxy for the given interface and interceptor._<p>Convenience method for creating a proxy for a single interceptor,_assuming that the interceptor handles all calls itself rather than_delegating to a target, like in the case of remoting proxies._@param proxyInterface the interface that the proxy should implement_@param interceptor the interceptor that the proxy should invoke_@return the proxy object_@see #ProxyFactory(Class, org.aopalliance.intercept.Interceptor);@SuppressWarnings("unchecked")_	public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor) {_		return (T) new ProxyFactory(proxyInterface, interceptor).getProxy()__	};create,a,new,proxy,for,the,given,interface,and,interceptor,p,convenience,method,for,creating,a,proxy,for,a,single,interceptor,assuming,that,the,interceptor,handles,all,calls,itself,rather,than,delegating,to,a,target,like,in,the,case,of,remoting,proxies,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,interceptor,the,interceptor,that,the,proxy,should,invoke,return,the,proxy,object,see,proxy,factory,class,org,aopalliance,intercept,interceptor;suppress,warnings,unchecked,public,static,t,t,get,proxy,class,t,proxy,interface,interceptor,interceptor,return,t,new,proxy,factory,proxy,interface,interceptor,get,proxy
ProxyFactory -> @SuppressWarnings("unchecked") 	public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor);1458335530;Create a new proxy for the given interface and interceptor._<p>Convenience method for creating a proxy for a single interceptor,_assuming that the interceptor handles all calls itself rather than_delegating to a target, like in the case of remoting proxies._@param proxyInterface the interface that the proxy should implement_@param interceptor the interceptor that the proxy should invoke_@return the proxy object_@see #ProxyFactory(Class, org.aopalliance.intercept.Interceptor);@SuppressWarnings("unchecked")_	public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor) {_		return (T) new ProxyFactory(proxyInterface, interceptor).getProxy()__	};create,a,new,proxy,for,the,given,interface,and,interceptor,p,convenience,method,for,creating,a,proxy,for,a,single,interceptor,assuming,that,the,interceptor,handles,all,calls,itself,rather,than,delegating,to,a,target,like,in,the,case,of,remoting,proxies,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,interceptor,the,interceptor,that,the,proxy,should,invoke,return,the,proxy,object,see,proxy,factory,class,org,aopalliance,intercept,interceptor;suppress,warnings,unchecked,public,static,t,t,get,proxy,class,t,proxy,interface,interceptor,interceptor,return,t,new,proxy,factory,proxy,interface,interceptor,get,proxy
ProxyFactory -> @SuppressWarnings("unchecked") 	public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor);1495868221;Create a new proxy for the given interface and interceptor._<p>Convenience method for creating a proxy for a single interceptor,_assuming that the interceptor handles all calls itself rather than_delegating to a target, like in the case of remoting proxies._@param proxyInterface the interface that the proxy should implement_@param interceptor the interceptor that the proxy should invoke_@return the proxy object_@see #ProxyFactory(Class, org.aopalliance.intercept.Interceptor);@SuppressWarnings("unchecked")_	public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor) {_		return (T) new ProxyFactory(proxyInterface, interceptor).getProxy()__	};create,a,new,proxy,for,the,given,interface,and,interceptor,p,convenience,method,for,creating,a,proxy,for,a,single,interceptor,assuming,that,the,interceptor,handles,all,calls,itself,rather,than,delegating,to,a,target,like,in,the,case,of,remoting,proxies,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,interceptor,the,interceptor,that,the,proxy,should,invoke,return,the,proxy,object,see,proxy,factory,class,org,aopalliance,intercept,interceptor;suppress,warnings,unchecked,public,static,t,t,get,proxy,class,t,proxy,interface,interceptor,interceptor,return,t,new,proxy,factory,proxy,interface,interceptor,get,proxy
ProxyFactory -> public ProxyFactory(Class proxyInterface, TargetSource targetSource);1328020251;Create a ProxyFactory for the specified <code>TargetSource</code>,_making the proxy implement the specified interface._@param proxyInterface the interface that the proxy should implement_@param targetSource the TargetSource that the proxy should invoke;public ProxyFactory(Class proxyInterface, TargetSource targetSource) {_		addInterface(proxyInterface)__		setTargetSource(targetSource)__	};create,a,proxy,factory,for,the,specified,code,target,source,code,making,the,proxy,implement,the,specified,interface,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,target,source,the,target,source,that,the,proxy,should,invoke;public,proxy,factory,class,proxy,interface,target,source,target,source,add,interface,proxy,interface,set,target,source,target,source
ProxyFactory -> public ProxyFactory(Class proxyInterface, TargetSource targetSource);1337254729;Create a ProxyFactory for the specified <code>TargetSource</code>,_making the proxy implement the specified interface._@param proxyInterface the interface that the proxy should implement_@param targetSource the TargetSource that the proxy should invoke;public ProxyFactory(Class proxyInterface, TargetSource targetSource) {_		addInterface(proxyInterface)__		setTargetSource(targetSource)__	};create,a,proxy,factory,for,the,specified,code,target,source,code,making,the,proxy,implement,the,specified,interface,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,target,source,the,target,source,that,the,proxy,should,invoke;public,proxy,factory,class,proxy,interface,target,source,target,source,add,interface,proxy,interface,set,target,source,target,source
ProxyFactory -> public ProxyFactory(Class proxyInterface, TargetSource targetSource);1356735495;Create a ProxyFactory for the specified {@code TargetSource},_making the proxy implement the specified interface._@param proxyInterface the interface that the proxy should implement_@param targetSource the TargetSource that the proxy should invoke;public ProxyFactory(Class proxyInterface, TargetSource targetSource) {_		addInterface(proxyInterface)__		setTargetSource(targetSource)__	};create,a,proxy,factory,for,the,specified,code,target,source,making,the,proxy,implement,the,specified,interface,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,target,source,the,target,source,that,the,proxy,should,invoke;public,proxy,factory,class,proxy,interface,target,source,target,source,add,interface,proxy,interface,set,target,source,target,source
ProxyFactory -> @SuppressWarnings("unchecked") 	public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource);1328020251;Create a proxy for the specified <code>TargetSource</code>,_implementing the specified interface._@param proxyInterface the interface that the proxy should implement_@param targetSource the TargetSource that the proxy should invoke_@return the proxy object_@see #ProxyFactory(Class, org.springframework.aop.TargetSource);@SuppressWarnings("unchecked")_	public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource) {_		return (T) new ProxyFactory(proxyInterface, targetSource).getProxy()__	};create,a,proxy,for,the,specified,code,target,source,code,implementing,the,specified,interface,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,target,source,the,target,source,that,the,proxy,should,invoke,return,the,proxy,object,see,proxy,factory,class,org,springframework,aop,target,source;suppress,warnings,unchecked,public,static,t,t,get,proxy,class,t,proxy,interface,target,source,target,source,return,t,new,proxy,factory,proxy,interface,target,source,get,proxy
ProxyFactory -> @SuppressWarnings("unchecked") 	public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource);1337254729;Create a proxy for the specified <code>TargetSource</code>,_implementing the specified interface._@param proxyInterface the interface that the proxy should implement_@param targetSource the TargetSource that the proxy should invoke_@return the proxy object_@see #ProxyFactory(Class, org.springframework.aop.TargetSource);@SuppressWarnings("unchecked")_	public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource) {_		return (T) new ProxyFactory(proxyInterface, targetSource).getProxy()__	};create,a,proxy,for,the,specified,code,target,source,code,implementing,the,specified,interface,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,target,source,the,target,source,that,the,proxy,should,invoke,return,the,proxy,object,see,proxy,factory,class,org,springframework,aop,target,source;suppress,warnings,unchecked,public,static,t,t,get,proxy,class,t,proxy,interface,target,source,target,source,return,t,new,proxy,factory,proxy,interface,target,source,get,proxy
ProxyFactory -> @SuppressWarnings("unchecked") 	public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource);1356735495;Create a proxy for the specified {@code TargetSource},_implementing the specified interface._@param proxyInterface the interface that the proxy should implement_@param targetSource the TargetSource that the proxy should invoke_@return the proxy object_@see #ProxyFactory(Class, org.springframework.aop.TargetSource);@SuppressWarnings("unchecked")_	public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource) {_		return (T) new ProxyFactory(proxyInterface, targetSource).getProxy()__	};create,a,proxy,for,the,specified,code,target,source,implementing,the,specified,interface,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,target,source,the,target,source,that,the,proxy,should,invoke,return,the,proxy,object,see,proxy,factory,class,org,springframework,aop,target,source;suppress,warnings,unchecked,public,static,t,t,get,proxy,class,t,proxy,interface,target,source,target,source,return,t,new,proxy,factory,proxy,interface,target,source,get,proxy
ProxyFactory -> @SuppressWarnings("unchecked") 	public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource);1377641038;Create a proxy for the specified {@code TargetSource},_implementing the specified interface._@param proxyInterface the interface that the proxy should implement_@param targetSource the TargetSource that the proxy should invoke_@return the proxy object_@see #ProxyFactory(Class, org.springframework.aop.TargetSource);@SuppressWarnings("unchecked")_	public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource) {_		return (T) new ProxyFactory(proxyInterface, targetSource).getProxy()__	};create,a,proxy,for,the,specified,code,target,source,implementing,the,specified,interface,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,target,source,the,target,source,that,the,proxy,should,invoke,return,the,proxy,object,see,proxy,factory,class,org,springframework,aop,target,source;suppress,warnings,unchecked,public,static,t,t,get,proxy,class,t,proxy,interface,target,source,target,source,return,t,new,proxy,factory,proxy,interface,target,source,get,proxy
ProxyFactory -> @SuppressWarnings("unchecked") 	public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource);1398290143;Create a proxy for the specified {@code TargetSource},_implementing the specified interface._@param proxyInterface the interface that the proxy should implement_@param targetSource the TargetSource that the proxy should invoke_@return the proxy object_@see #ProxyFactory(Class, org.springframework.aop.TargetSource);@SuppressWarnings("unchecked")_	public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource) {_		return (T) new ProxyFactory(proxyInterface, targetSource).getProxy()__	};create,a,proxy,for,the,specified,code,target,source,implementing,the,specified,interface,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,target,source,the,target,source,that,the,proxy,should,invoke,return,the,proxy,object,see,proxy,factory,class,org,springframework,aop,target,source;suppress,warnings,unchecked,public,static,t,t,get,proxy,class,t,proxy,interface,target,source,target,source,return,t,new,proxy,factory,proxy,interface,target,source,get,proxy
ProxyFactory -> @SuppressWarnings("unchecked") 	public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource);1458335530;Create a proxy for the specified {@code TargetSource},_implementing the specified interface._@param proxyInterface the interface that the proxy should implement_@param targetSource the TargetSource that the proxy should invoke_@return the proxy object_@see #ProxyFactory(Class, org.springframework.aop.TargetSource);@SuppressWarnings("unchecked")_	public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource) {_		return (T) new ProxyFactory(proxyInterface, targetSource).getProxy()__	};create,a,proxy,for,the,specified,code,target,source,implementing,the,specified,interface,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,target,source,the,target,source,that,the,proxy,should,invoke,return,the,proxy,object,see,proxy,factory,class,org,springframework,aop,target,source;suppress,warnings,unchecked,public,static,t,t,get,proxy,class,t,proxy,interface,target,source,target,source,return,t,new,proxy,factory,proxy,interface,target,source,get,proxy
ProxyFactory -> @SuppressWarnings("unchecked") 	public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource);1495868221;Create a proxy for the specified {@code TargetSource},_implementing the specified interface._@param proxyInterface the interface that the proxy should implement_@param targetSource the TargetSource that the proxy should invoke_@return the proxy object_@see #ProxyFactory(Class, org.springframework.aop.TargetSource);@SuppressWarnings("unchecked")_	public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource) {_		return (T) new ProxyFactory(proxyInterface, targetSource).getProxy()__	};create,a,proxy,for,the,specified,code,target,source,implementing,the,specified,interface,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,target,source,the,target,source,that,the,proxy,should,invoke,return,the,proxy,object,see,proxy,factory,class,org,springframework,aop,target,source;suppress,warnings,unchecked,public,static,t,t,get,proxy,class,t,proxy,interface,target,source,target,source,return,t,new,proxy,factory,proxy,interface,target,source,get,proxy
ProxyFactory -> public ProxyFactory();1328020251;Create a new ProxyFactory.;public ProxyFactory() {_	};create,a,new,proxy,factory;public,proxy,factory
ProxyFactory -> public ProxyFactory();1337254729;Create a new ProxyFactory.;public ProxyFactory() {_	};create,a,new,proxy,factory;public,proxy,factory
ProxyFactory -> public ProxyFactory();1356735495;Create a new ProxyFactory.;public ProxyFactory() {_	};create,a,new,proxy,factory;public,proxy,factory
ProxyFactory -> public ProxyFactory();1377641038;Create a new ProxyFactory.;public ProxyFactory() {_	};create,a,new,proxy,factory;public,proxy,factory
ProxyFactory -> public ProxyFactory();1398290143;Create a new ProxyFactory.;public ProxyFactory() {_	};create,a,new,proxy,factory;public,proxy,factory
ProxyFactory -> public ProxyFactory();1458335530;Create a new ProxyFactory.;public ProxyFactory() {_	};create,a,new,proxy,factory;public,proxy,factory
ProxyFactory -> public ProxyFactory();1495868221;Create a new ProxyFactory.;public ProxyFactory() {_	};create,a,new,proxy,factory;public,proxy,factory
ProxyFactory -> public ProxyFactory(Class[] proxyInterfaces);1328020251;Create a new ProxyFactory._<p>No target, only interfaces. Must add interceptors._@param proxyInterfaces the interfaces that the proxy should implement;public ProxyFactory(Class[] proxyInterfaces) {_		setInterfaces(proxyInterfaces)__	};create,a,new,proxy,factory,p,no,target,only,interfaces,must,add,interceptors,param,proxy,interfaces,the,interfaces,that,the,proxy,should,implement;public,proxy,factory,class,proxy,interfaces,set,interfaces,proxy,interfaces
ProxyFactory -> public ProxyFactory(Class[] proxyInterfaces);1337254729;Create a new ProxyFactory._<p>No target, only interfaces. Must add interceptors._@param proxyInterfaces the interfaces that the proxy should implement;public ProxyFactory(Class[] proxyInterfaces) {_		setInterfaces(proxyInterfaces)__	};create,a,new,proxy,factory,p,no,target,only,interfaces,must,add,interceptors,param,proxy,interfaces,the,interfaces,that,the,proxy,should,implement;public,proxy,factory,class,proxy,interfaces,set,interfaces,proxy,interfaces
ProxyFactory -> public ProxyFactory(Class[] proxyInterfaces);1356735495;Create a new ProxyFactory._<p>No target, only interfaces. Must add interceptors._@param proxyInterfaces the interfaces that the proxy should implement;public ProxyFactory(Class[] proxyInterfaces) {_		setInterfaces(proxyInterfaces)__	};create,a,new,proxy,factory,p,no,target,only,interfaces,must,add,interceptors,param,proxy,interfaces,the,interfaces,that,the,proxy,should,implement;public,proxy,factory,class,proxy,interfaces,set,interfaces,proxy,interfaces
ProxyFactory -> public ProxyFactory(Object target);1328020251;Create a new ProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public ProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,proxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,proxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
ProxyFactory -> public ProxyFactory(Object target);1337254729;Create a new ProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public ProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,proxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,proxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
ProxyFactory -> public ProxyFactory(Object target);1356735495;Create a new ProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public ProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,proxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,proxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
ProxyFactory -> public ProxyFactory(Object target);1377641038;Create a new ProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public ProxyFactory(Object target) {_		Assert.notNull(target, "Target object must not be null")__		setInterfaces(ClassUtils.getAllInterfaces(target))__		setTarget(target)__	};create,a,new,proxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,proxy,factory,object,target,assert,not,null,target,target,object,must,not,be,null,set,interfaces,class,utils,get,all,interfaces,target,set,target,target
ProxyFactory -> public ProxyFactory(Object target);1398290143;Create a new ProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public ProxyFactory(Object target) {_		setTarget(target)__		setInterfaces(ClassUtils.getAllInterfaces(target))__	};create,a,new,proxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,proxy,factory,object,target,set,target,target,set,interfaces,class,utils,get,all,interfaces,target
ProxyFactory -> public ProxyFactory(Object target);1458335530;Create a new ProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public ProxyFactory(Object target) {_		setTarget(target)__		setInterfaces(ClassUtils.getAllInterfaces(target))__	};create,a,new,proxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,proxy,factory,object,target,set,target,target,set,interfaces,class,utils,get,all,interfaces,target
ProxyFactory -> public ProxyFactory(Object target);1495868221;Create a new ProxyFactory._<p>Will proxy all interfaces that the given target implements._@param target the target object to be proxied;public ProxyFactory(Object target) {_		setTarget(target)__		setInterfaces(ClassUtils.getAllInterfaces(target))__	};create,a,new,proxy,factory,p,will,proxy,all,interfaces,that,the,given,target,implements,param,target,the,target,object,to,be,proxied;public,proxy,factory,object,target,set,target,target,set,interfaces,class,utils,get,all,interfaces,target
ProxyFactory -> public ProxyFactory(Class<?>... proxyInterfaces);1377641038;Create a new ProxyFactory._<p>No target, only interfaces. Must add interceptors._@param proxyInterfaces the interfaces that the proxy should implement;public ProxyFactory(Class<?>... proxyInterfaces) {_		setInterfaces(proxyInterfaces)__	};create,a,new,proxy,factory,p,no,target,only,interfaces,must,add,interceptors,param,proxy,interfaces,the,interfaces,that,the,proxy,should,implement;public,proxy,factory,class,proxy,interfaces,set,interfaces,proxy,interfaces
ProxyFactory -> public ProxyFactory(Class<?>... proxyInterfaces);1398290143;Create a new ProxyFactory._<p>No target, only interfaces. Must add interceptors._@param proxyInterfaces the interfaces that the proxy should implement;public ProxyFactory(Class<?>... proxyInterfaces) {_		setInterfaces(proxyInterfaces)__	};create,a,new,proxy,factory,p,no,target,only,interfaces,must,add,interceptors,param,proxy,interfaces,the,interfaces,that,the,proxy,should,implement;public,proxy,factory,class,proxy,interfaces,set,interfaces,proxy,interfaces
ProxyFactory -> public ProxyFactory(Class<?>... proxyInterfaces);1458335530;Create a new ProxyFactory._<p>No target, only interfaces. Must add interceptors._@param proxyInterfaces the interfaces that the proxy should implement;public ProxyFactory(Class<?>... proxyInterfaces) {_		setInterfaces(proxyInterfaces)__	};create,a,new,proxy,factory,p,no,target,only,interfaces,must,add,interceptors,param,proxy,interfaces,the,interfaces,that,the,proxy,should,implement;public,proxy,factory,class,proxy,interfaces,set,interfaces,proxy,interfaces
ProxyFactory -> public ProxyFactory(Class<?>... proxyInterfaces);1495868221;Create a new ProxyFactory._<p>No target, only interfaces. Must add interceptors._@param proxyInterfaces the interfaces that the proxy should implement;public ProxyFactory(Class<?>... proxyInterfaces) {_		setInterfaces(proxyInterfaces)__	};create,a,new,proxy,factory,p,no,target,only,interfaces,must,add,interceptors,param,proxy,interfaces,the,interfaces,that,the,proxy,should,implement;public,proxy,factory,class,proxy,interfaces,set,interfaces,proxy,interfaces
ProxyFactory -> public ProxyFactory(Class<?> proxyInterface, Interceptor interceptor);1377641038;Create a new ProxyFactory for the given interface and interceptor._<p>Convenience method for creating a proxy for a single interceptor,_assuming that the interceptor handles all calls itself rather than_delegating to a target, like in the case of remoting proxies._@param proxyInterface the interface that the proxy should implement_@param interceptor the interceptor that the proxy should invoke;public ProxyFactory(Class<?> proxyInterface, Interceptor interceptor) {_		addInterface(proxyInterface)__		addAdvice(interceptor)__	};create,a,new,proxy,factory,for,the,given,interface,and,interceptor,p,convenience,method,for,creating,a,proxy,for,a,single,interceptor,assuming,that,the,interceptor,handles,all,calls,itself,rather,than,delegating,to,a,target,like,in,the,case,of,remoting,proxies,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,interceptor,the,interceptor,that,the,proxy,should,invoke;public,proxy,factory,class,proxy,interface,interceptor,interceptor,add,interface,proxy,interface,add,advice,interceptor
ProxyFactory -> public ProxyFactory(Class<?> proxyInterface, Interceptor interceptor);1398290143;Create a new ProxyFactory for the given interface and interceptor._<p>Convenience method for creating a proxy for a single interceptor,_assuming that the interceptor handles all calls itself rather than_delegating to a target, like in the case of remoting proxies._@param proxyInterface the interface that the proxy should implement_@param interceptor the interceptor that the proxy should invoke;public ProxyFactory(Class<?> proxyInterface, Interceptor interceptor) {_		addInterface(proxyInterface)__		addAdvice(interceptor)__	};create,a,new,proxy,factory,for,the,given,interface,and,interceptor,p,convenience,method,for,creating,a,proxy,for,a,single,interceptor,assuming,that,the,interceptor,handles,all,calls,itself,rather,than,delegating,to,a,target,like,in,the,case,of,remoting,proxies,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,interceptor,the,interceptor,that,the,proxy,should,invoke;public,proxy,factory,class,proxy,interface,interceptor,interceptor,add,interface,proxy,interface,add,advice,interceptor
ProxyFactory -> public ProxyFactory(Class<?> proxyInterface, Interceptor interceptor);1458335530;Create a new ProxyFactory for the given interface and interceptor._<p>Convenience method for creating a proxy for a single interceptor,_assuming that the interceptor handles all calls itself rather than_delegating to a target, like in the case of remoting proxies._@param proxyInterface the interface that the proxy should implement_@param interceptor the interceptor that the proxy should invoke;public ProxyFactory(Class<?> proxyInterface, Interceptor interceptor) {_		addInterface(proxyInterface)__		addAdvice(interceptor)__	};create,a,new,proxy,factory,for,the,given,interface,and,interceptor,p,convenience,method,for,creating,a,proxy,for,a,single,interceptor,assuming,that,the,interceptor,handles,all,calls,itself,rather,than,delegating,to,a,target,like,in,the,case,of,remoting,proxies,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,interceptor,the,interceptor,that,the,proxy,should,invoke;public,proxy,factory,class,proxy,interface,interceptor,interceptor,add,interface,proxy,interface,add,advice,interceptor
ProxyFactory -> public ProxyFactory(Class<?> proxyInterface, Interceptor interceptor);1495868221;Create a new ProxyFactory for the given interface and interceptor._<p>Convenience method for creating a proxy for a single interceptor,_assuming that the interceptor handles all calls itself rather than_delegating to a target, like in the case of remoting proxies._@param proxyInterface the interface that the proxy should implement_@param interceptor the interceptor that the proxy should invoke;public ProxyFactory(Class<?> proxyInterface, Interceptor interceptor) {_		addInterface(proxyInterface)__		addAdvice(interceptor)__	};create,a,new,proxy,factory,for,the,given,interface,and,interceptor,p,convenience,method,for,creating,a,proxy,for,a,single,interceptor,assuming,that,the,interceptor,handles,all,calls,itself,rather,than,delegating,to,a,target,like,in,the,case,of,remoting,proxies,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,interceptor,the,interceptor,that,the,proxy,should,invoke;public,proxy,factory,class,proxy,interface,interceptor,interceptor,add,interface,proxy,interface,add,advice,interceptor
ProxyFactory -> public Object getProxy();1337254729;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the proxy object;public Object getProxy() {_		return createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,proxy,object;public,object,get,proxy,return,create,aop,proxy,get,proxy
ProxyFactory -> public Object getProxy();1356735495;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the proxy object;public Object getProxy() {_		return createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,proxy,object;public,object,get,proxy,return,create,aop,proxy,get,proxy
ProxyFactory -> public Object getProxy();1377641038;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the proxy object;public Object getProxy() {_		return createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,proxy,object;public,object,get,proxy,return,create,aop,proxy,get,proxy
ProxyFactory -> public Object getProxy();1398290143;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the proxy object;public Object getProxy() {_		return createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,proxy,object;public,object,get,proxy,return,create,aop,proxy,get,proxy
ProxyFactory -> public Object getProxy();1458335530;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the proxy object;public Object getProxy() {_		return createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,proxy,object;public,object,get,proxy,return,create,aop,proxy,get,proxy
ProxyFactory -> public Object getProxy();1495868221;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses a default class loader: Usually, the thread context class loader_(if necessary for proxy creation)._@return the proxy object;public Object getProxy() {_		return createAopProxy().getProxy()__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,a,default,class,loader,usually,the,thread,context,class,loader,if,necessary,for,proxy,creation,return,the,proxy,object;public,object,get,proxy,return,create,aop,proxy,get,proxy
ProxyFactory -> public ProxyFactory(Class<?> proxyInterface, TargetSource targetSource);1377641038;Create a ProxyFactory for the specified {@code TargetSource},_making the proxy implement the specified interface._@param proxyInterface the interface that the proxy should implement_@param targetSource the TargetSource that the proxy should invoke;public ProxyFactory(Class<?> proxyInterface, TargetSource targetSource) {_		addInterface(proxyInterface)__		setTargetSource(targetSource)__	};create,a,proxy,factory,for,the,specified,code,target,source,making,the,proxy,implement,the,specified,interface,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,target,source,the,target,source,that,the,proxy,should,invoke;public,proxy,factory,class,proxy,interface,target,source,target,source,add,interface,proxy,interface,set,target,source,target,source
ProxyFactory -> public ProxyFactory(Class<?> proxyInterface, TargetSource targetSource);1398290143;Create a ProxyFactory for the specified {@code TargetSource},_making the proxy implement the specified interface._@param proxyInterface the interface that the proxy should implement_@param targetSource the TargetSource that the proxy should invoke;public ProxyFactory(Class<?> proxyInterface, TargetSource targetSource) {_		addInterface(proxyInterface)__		setTargetSource(targetSource)__	};create,a,proxy,factory,for,the,specified,code,target,source,making,the,proxy,implement,the,specified,interface,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,target,source,the,target,source,that,the,proxy,should,invoke;public,proxy,factory,class,proxy,interface,target,source,target,source,add,interface,proxy,interface,set,target,source,target,source
ProxyFactory -> public ProxyFactory(Class<?> proxyInterface, TargetSource targetSource);1458335530;Create a ProxyFactory for the specified {@code TargetSource},_making the proxy implement the specified interface._@param proxyInterface the interface that the proxy should implement_@param targetSource the TargetSource that the proxy should invoke;public ProxyFactory(Class<?> proxyInterface, TargetSource targetSource) {_		addInterface(proxyInterface)__		setTargetSource(targetSource)__	};create,a,proxy,factory,for,the,specified,code,target,source,making,the,proxy,implement,the,specified,interface,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,target,source,the,target,source,that,the,proxy,should,invoke;public,proxy,factory,class,proxy,interface,target,source,target,source,add,interface,proxy,interface,set,target,source,target,source
ProxyFactory -> public ProxyFactory(Class<?> proxyInterface, TargetSource targetSource);1495868221;Create a ProxyFactory for the specified {@code TargetSource},_making the proxy implement the specified interface._@param proxyInterface the interface that the proxy should implement_@param targetSource the TargetSource that the proxy should invoke;public ProxyFactory(Class<?> proxyInterface, TargetSource targetSource) {_		addInterface(proxyInterface)__		setTargetSource(targetSource)__	};create,a,proxy,factory,for,the,specified,code,target,source,making,the,proxy,implement,the,specified,interface,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,target,source,the,target,source,that,the,proxy,should,invoke;public,proxy,factory,class,proxy,interface,target,source,target,source,add,interface,proxy,interface,set,target,source,target,source
ProxyFactory -> public static Object getProxy(TargetSource targetSource);1328020251;Create a proxy for the specified <code>TargetSource</code> that extends_the target class of the <code>TargetSource</code>._@param targetSource the TargetSource that the proxy should invoke_@return the proxy object;public static Object getProxy(TargetSource targetSource) {_		if (targetSource.getTargetClass() == null) {_			throw new IllegalArgumentException("Cannot create class proxy for TargetSource with null target class")__		}_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(targetSource)__		proxyFactory.setProxyTargetClass(true)__		return proxyFactory.getProxy()__	};create,a,proxy,for,the,specified,code,target,source,code,that,extends,the,target,class,of,the,code,target,source,code,param,target,source,the,target,source,that,the,proxy,should,invoke,return,the,proxy,object;public,static,object,get,proxy,target,source,target,source,if,target,source,get,target,class,null,throw,new,illegal,argument,exception,cannot,create,class,proxy,for,target,source,with,null,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,target,source,proxy,factory,set,proxy,target,class,true,return,proxy,factory,get,proxy
ProxyFactory -> public static Object getProxy(TargetSource targetSource);1337254729;Create a proxy for the specified <code>TargetSource</code> that extends_the target class of the <code>TargetSource</code>._@param targetSource the TargetSource that the proxy should invoke_@return the proxy object;public static Object getProxy(TargetSource targetSource) {_		if (targetSource.getTargetClass() == null) {_			throw new IllegalArgumentException("Cannot create class proxy for TargetSource with null target class")__		}_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(targetSource)__		proxyFactory.setProxyTargetClass(true)__		return proxyFactory.getProxy()__	};create,a,proxy,for,the,specified,code,target,source,code,that,extends,the,target,class,of,the,code,target,source,code,param,target,source,the,target,source,that,the,proxy,should,invoke,return,the,proxy,object;public,static,object,get,proxy,target,source,target,source,if,target,source,get,target,class,null,throw,new,illegal,argument,exception,cannot,create,class,proxy,for,target,source,with,null,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,target,source,proxy,factory,set,proxy,target,class,true,return,proxy,factory,get,proxy
ProxyFactory -> public static Object getProxy(TargetSource targetSource);1356735495;Create a proxy for the specified {@code TargetSource} that extends_the target class of the {@code TargetSource}._@param targetSource the TargetSource that the proxy should invoke_@return the proxy object;public static Object getProxy(TargetSource targetSource) {_		if (targetSource.getTargetClass() == null) {_			throw new IllegalArgumentException("Cannot create class proxy for TargetSource with null target class")__		}_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(targetSource)__		proxyFactory.setProxyTargetClass(true)__		return proxyFactory.getProxy()__	};create,a,proxy,for,the,specified,code,target,source,that,extends,the,target,class,of,the,code,target,source,param,target,source,the,target,source,that,the,proxy,should,invoke,return,the,proxy,object;public,static,object,get,proxy,target,source,target,source,if,target,source,get,target,class,null,throw,new,illegal,argument,exception,cannot,create,class,proxy,for,target,source,with,null,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,target,source,proxy,factory,set,proxy,target,class,true,return,proxy,factory,get,proxy
ProxyFactory -> public static Object getProxy(TargetSource targetSource);1377641038;Create a proxy for the specified {@code TargetSource} that extends_the target class of the {@code TargetSource}._@param targetSource the TargetSource that the proxy should invoke_@return the proxy object;public static Object getProxy(TargetSource targetSource) {_		if (targetSource.getTargetClass() == null) {_			throw new IllegalArgumentException("Cannot create class proxy for TargetSource with null target class")__		}_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(targetSource)__		proxyFactory.setProxyTargetClass(true)__		return proxyFactory.getProxy()__	};create,a,proxy,for,the,specified,code,target,source,that,extends,the,target,class,of,the,code,target,source,param,target,source,the,target,source,that,the,proxy,should,invoke,return,the,proxy,object;public,static,object,get,proxy,target,source,target,source,if,target,source,get,target,class,null,throw,new,illegal,argument,exception,cannot,create,class,proxy,for,target,source,with,null,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,target,source,proxy,factory,set,proxy,target,class,true,return,proxy,factory,get,proxy
ProxyFactory -> public static Object getProxy(TargetSource targetSource);1398290143;Create a proxy for the specified {@code TargetSource} that extends_the target class of the {@code TargetSource}._@param targetSource the TargetSource that the proxy should invoke_@return the proxy object;public static Object getProxy(TargetSource targetSource) {_		if (targetSource.getTargetClass() == null) {_			throw new IllegalArgumentException("Cannot create class proxy for TargetSource with null target class")__		}_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(targetSource)__		proxyFactory.setProxyTargetClass(true)__		return proxyFactory.getProxy()__	};create,a,proxy,for,the,specified,code,target,source,that,extends,the,target,class,of,the,code,target,source,param,target,source,the,target,source,that,the,proxy,should,invoke,return,the,proxy,object;public,static,object,get,proxy,target,source,target,source,if,target,source,get,target,class,null,throw,new,illegal,argument,exception,cannot,create,class,proxy,for,target,source,with,null,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,target,source,proxy,factory,set,proxy,target,class,true,return,proxy,factory,get,proxy
ProxyFactory -> public static Object getProxy(TargetSource targetSource);1458335530;Create a proxy for the specified {@code TargetSource} that extends_the target class of the {@code TargetSource}._@param targetSource the TargetSource that the proxy should invoke_@return the proxy object;public static Object getProxy(TargetSource targetSource) {_		if (targetSource.getTargetClass() == null) {_			throw new IllegalArgumentException("Cannot create class proxy for TargetSource with null target class")__		}_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(targetSource)__		proxyFactory.setProxyTargetClass(true)__		return proxyFactory.getProxy()__	};create,a,proxy,for,the,specified,code,target,source,that,extends,the,target,class,of,the,code,target,source,param,target,source,the,target,source,that,the,proxy,should,invoke,return,the,proxy,object;public,static,object,get,proxy,target,source,target,source,if,target,source,get,target,class,null,throw,new,illegal,argument,exception,cannot,create,class,proxy,for,target,source,with,null,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,target,source,proxy,factory,set,proxy,target,class,true,return,proxy,factory,get,proxy
ProxyFactory -> public static Object getProxy(TargetSource targetSource);1495868221;Create a proxy for the specified {@code TargetSource} that extends_the target class of the {@code TargetSource}._@param targetSource the TargetSource that the proxy should invoke_@return the proxy object;public static Object getProxy(TargetSource targetSource) {_		if (targetSource.getTargetClass() == null) {_			throw new IllegalArgumentException("Cannot create class proxy for TargetSource with null target class")__		}_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setTargetSource(targetSource)__		proxyFactory.setProxyTargetClass(true)__		return proxyFactory.getProxy()__	};create,a,proxy,for,the,specified,code,target,source,that,extends,the,target,class,of,the,code,target,source,param,target,source,the,target,source,that,the,proxy,should,invoke,return,the,proxy,object;public,static,object,get,proxy,target,source,target,source,if,target,source,get,target,class,null,throw,new,illegal,argument,exception,cannot,create,class,proxy,for,target,source,with,null,target,class,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,target,source,target,source,proxy,factory,set,proxy,target,class,true,return,proxy,factory,get,proxy
ProxyFactory -> public ProxyFactory(Class proxyInterface, Interceptor interceptor);1328020251;Create a new ProxyFactory for the given interface and interceptor._<p>Convenience method for creating a proxy for a single interceptor,_assuming that the interceptor handles all calls itself rather than_delegating to a target, like in the case of remoting proxies._@param proxyInterface the interface that the proxy should implement_@param interceptor the interceptor that the proxy should invoke;public ProxyFactory(Class proxyInterface, Interceptor interceptor) {_		addInterface(proxyInterface)__		addAdvice(interceptor)__	};create,a,new,proxy,factory,for,the,given,interface,and,interceptor,p,convenience,method,for,creating,a,proxy,for,a,single,interceptor,assuming,that,the,interceptor,handles,all,calls,itself,rather,than,delegating,to,a,target,like,in,the,case,of,remoting,proxies,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,interceptor,the,interceptor,that,the,proxy,should,invoke;public,proxy,factory,class,proxy,interface,interceptor,interceptor,add,interface,proxy,interface,add,advice,interceptor
ProxyFactory -> public ProxyFactory(Class proxyInterface, Interceptor interceptor);1337254729;Create a new ProxyFactory for the given interface and interceptor._<p>Convenience method for creating a proxy for a single interceptor,_assuming that the interceptor handles all calls itself rather than_delegating to a target, like in the case of remoting proxies._@param proxyInterface the interface that the proxy should implement_@param interceptor the interceptor that the proxy should invoke;public ProxyFactory(Class proxyInterface, Interceptor interceptor) {_		addInterface(proxyInterface)__		addAdvice(interceptor)__	};create,a,new,proxy,factory,for,the,given,interface,and,interceptor,p,convenience,method,for,creating,a,proxy,for,a,single,interceptor,assuming,that,the,interceptor,handles,all,calls,itself,rather,than,delegating,to,a,target,like,in,the,case,of,remoting,proxies,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,interceptor,the,interceptor,that,the,proxy,should,invoke;public,proxy,factory,class,proxy,interface,interceptor,interceptor,add,interface,proxy,interface,add,advice,interceptor
ProxyFactory -> public ProxyFactory(Class proxyInterface, Interceptor interceptor);1356735495;Create a new ProxyFactory for the given interface and interceptor._<p>Convenience method for creating a proxy for a single interceptor,_assuming that the interceptor handles all calls itself rather than_delegating to a target, like in the case of remoting proxies._@param proxyInterface the interface that the proxy should implement_@param interceptor the interceptor that the proxy should invoke;public ProxyFactory(Class proxyInterface, Interceptor interceptor) {_		addInterface(proxyInterface)__		addAdvice(interceptor)__	};create,a,new,proxy,factory,for,the,given,interface,and,interceptor,p,convenience,method,for,creating,a,proxy,for,a,single,interceptor,assuming,that,the,interceptor,handles,all,calls,itself,rather,than,delegating,to,a,target,like,in,the,case,of,remoting,proxies,param,proxy,interface,the,interface,that,the,proxy,should,implement,param,interceptor,the,interceptor,that,the,proxy,should,invoke;public,proxy,factory,class,proxy,interface,interceptor,interceptor,add,interface,proxy,interface,add,advice,interceptor
ProxyFactory -> public Object getProxy(ClassLoader classLoader);1337254729;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_(or <code>null</code> for the low-level proxy facility's default)_@return the proxy object;public Object getProxy(ClassLoader classLoader) {_		return createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,or,code,null,code,for,the,low,level,proxy,facility,s,default,return,the,proxy,object;public,object,get,proxy,class,loader,class,loader,return,create,aop,proxy,get,proxy,class,loader
ProxyFactory -> public Object getProxy(ClassLoader classLoader);1356735495;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_(or {@code null} for the low-level proxy facility's default)_@return the proxy object;public Object getProxy(ClassLoader classLoader) {_		return createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,or,code,null,for,the,low,level,proxy,facility,s,default,return,the,proxy,object;public,object,get,proxy,class,loader,class,loader,return,create,aop,proxy,get,proxy,class,loader
ProxyFactory -> public Object getProxy(ClassLoader classLoader);1377641038;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_(or {@code null} for the low-level proxy facility's default)_@return the proxy object;public Object getProxy(ClassLoader classLoader) {_		return createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,or,code,null,for,the,low,level,proxy,facility,s,default,return,the,proxy,object;public,object,get,proxy,class,loader,class,loader,return,create,aop,proxy,get,proxy,class,loader
ProxyFactory -> public Object getProxy(ClassLoader classLoader);1398290143;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_(or {@code null} for the low-level proxy facility's default)_@return the proxy object;public Object getProxy(ClassLoader classLoader) {_		return createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,or,code,null,for,the,low,level,proxy,facility,s,default,return,the,proxy,object;public,object,get,proxy,class,loader,class,loader,return,create,aop,proxy,get,proxy,class,loader
ProxyFactory -> public Object getProxy(ClassLoader classLoader);1458335530;Create a new proxy according to the settings in this factory._<p>Can be called repeatedly. Effect will vary if we've added_or removed interfaces. Can add and remove interceptors._<p>Uses the given class loader (if necessary for proxy creation)._@param classLoader the class loader to create the proxy with_(or {@code null} for the low-level proxy facility's default)_@return the proxy object;public Object getProxy(ClassLoader classLoader) {_		return createAopProxy().getProxy(classLoader)__	};create,a,new,proxy,according,to,the,settings,in,this,factory,p,can,be,called,repeatedly,effect,will,vary,if,we,ve,added,or,removed,interfaces,can,add,and,remove,interceptors,p,uses,the,given,class,loader,if,necessary,for,proxy,creation,param,class,loader,the,class,loader,to,create,the,proxy,with,or,code,null,for,the,low,level,proxy,facility,s,default,return,the,proxy,object;public,object,get,proxy,class,loader,class,loader,return,create,aop,proxy,get,proxy,class,loader
