commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Create a new proxy according to the settings in this factory.  * <p>Can be called repeatedly. Effect will vary if we've added  * or removed interfaces. Can add and remove interceptors.  * <p>Uses a default class loader: Usually, the thread context class loader  * (if necessary for proxy creation).  * @return the proxy object  */ ;/**  * Create a new proxy according to the settings in this factory.  * <p>Can be called repeatedly. Effect will vary if we've added  * or removed interfaces. Can add and remove interceptors.  * <p>Uses a default class loader: Usually, the thread context class loader  * (if necessary for proxy creation).  * @return the proxy object  */ public Object getProxy() {     return createAopProxy().getProxy(). }
true;public;1;3;/**  * Create a new proxy according to the settings in this factory.  * <p>Can be called repeatedly. Effect will vary if we've added  * or removed interfaces. Can add and remove interceptors.  * <p>Uses the given class loader (if necessary for proxy creation).  * @param classLoader the class loader to create the proxy with  * (or {@code null} for the low-level proxy facility's default)  * @return the proxy object  */ ;/**  * Create a new proxy according to the settings in this factory.  * <p>Can be called repeatedly. Effect will vary if we've added  * or removed interfaces. Can add and remove interceptors.  * <p>Uses the given class loader (if necessary for proxy creation).  * @param classLoader the class loader to create the proxy with  * (or {@code null} for the low-level proxy facility's default)  * @return the proxy object  */ public Object getProxy(@Nullable ClassLoader classLoader) {     return createAopProxy().getProxy(classLoader). }
true;public,static;2;4;/**  * Create a new proxy for the given interface and interceptor.  * <p>Convenience method for creating a proxy for a single interceptor,  * assuming that the interceptor handles all calls itself rather than  * delegating to a target, like in the case of remoting proxies.  * @param proxyInterface the interface that the proxy should implement  * @param interceptor the interceptor that the proxy should invoke  * @return the proxy object  * @see #ProxyFactory(Class, org.aopalliance.intercept.Interceptor)  */ ;/**  * Create a new proxy for the given interface and interceptor.  * <p>Convenience method for creating a proxy for a single interceptor,  * assuming that the interceptor handles all calls itself rather than  * delegating to a target, like in the case of remoting proxies.  * @param proxyInterface the interface that the proxy should implement  * @param interceptor the interceptor that the proxy should invoke  * @return the proxy object  * @see #ProxyFactory(Class, org.aopalliance.intercept.Interceptor)  */ @SuppressWarnings("unchecked") public static <T> T getProxy(Class<T> proxyInterface, Interceptor interceptor) {     return (T) new ProxyFactory(proxyInterface, interceptor).getProxy(). }
true;public,static;2;4;/**  * Create a proxy for the specified {@code TargetSource},  * implementing the specified interface.  * @param proxyInterface the interface that the proxy should implement  * @param targetSource the TargetSource that the proxy should invoke  * @return the proxy object  * @see #ProxyFactory(Class, org.springframework.aop.TargetSource)  */ ;/**  * Create a proxy for the specified {@code TargetSource},  * implementing the specified interface.  * @param proxyInterface the interface that the proxy should implement  * @param targetSource the TargetSource that the proxy should invoke  * @return the proxy object  * @see #ProxyFactory(Class, org.springframework.aop.TargetSource)  */ @SuppressWarnings("unchecked") public static <T> T getProxy(Class<T> proxyInterface, TargetSource targetSource) {     return (T) new ProxyFactory(proxyInterface, targetSource).getProxy(). }
true;public,static;1;9;/**  * Create a proxy for the specified {@code TargetSource} that extends  * the target class of the {@code TargetSource}.  * @param targetSource the TargetSource that the proxy should invoke  * @return the proxy object  */ ;/**  * Create a proxy for the specified {@code TargetSource} that extends  * the target class of the {@code TargetSource}.  * @param targetSource the TargetSource that the proxy should invoke  * @return the proxy object  */ public static Object getProxy(TargetSource targetSource) {     if (targetSource.getTargetClass() == null) {         throw new IllegalArgumentException("Cannot create class proxy for TargetSource with null target class").     }     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTargetSource(targetSource).     proxyFactory.setProxyTargetClass(true).     return proxyFactory.getProxy(). }
