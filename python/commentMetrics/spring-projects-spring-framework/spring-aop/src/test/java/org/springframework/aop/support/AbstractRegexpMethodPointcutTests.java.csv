commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() {     rpc = getRegexpMethodPointcut(). }
false;protected,abstract;0;1;;protected abstract AbstractRegexpMethodPointcut getRegexpMethodPointcut().
false;public;0;4;;@Test public void testNoPatternSupplied() throws Exception {     noPatternSuppliedTests(rpc). }
false;public;0;5;;@Test public void testSerializationWithNoPatternSupplied() throws Exception {     rpc = (AbstractRegexpMethodPointcut) SerializationTestUtils.serializeAndDeserialize(rpc).     noPatternSuppliedTests(rpc). }
false;protected;1;5;;protected void noPatternSuppliedTests(AbstractRegexpMethodPointcut rpc) throws Exception {     assertFalse(rpc.matches(Object.class.getMethod("hashCode"), String.class)).     assertFalse(rpc.matches(Object.class.getMethod("wait"), Object.class)).     assertEquals(0, rpc.getPatterns().length). }
false;public;0;7;;@Test public void testExactMatch() throws Exception {     rpc.setPattern("java.lang.Object.hashCode").     exactMatchTests(rpc).     rpc = (AbstractRegexpMethodPointcut) SerializationTestUtils.serializeAndDeserialize(rpc).     exactMatchTests(rpc). }
false;protected;1;6;;protected void exactMatchTests(AbstractRegexpMethodPointcut rpc) throws Exception {     // assumes rpc.setPattern("java.lang.Object.hashCode").     assertTrue(rpc.matches(Object.class.getMethod("hashCode"), String.class)).     assertTrue(rpc.matches(Object.class.getMethod("hashCode"), Object.class)).     assertFalse(rpc.matches(Object.class.getMethod("wait"), Object.class)). }
false;public;0;6;;@Test public void testSpecificMatch() throws Exception {     rpc.setPattern("java.lang.String.hashCode").     assertTrue(rpc.matches(Object.class.getMethod("hashCode"), String.class)).     assertFalse(rpc.matches(Object.class.getMethod("hashCode"), Object.class)). }
false;public;0;6;;@Test public void testWildcard() throws Exception {     rpc.setPattern(".*Object.hashCode").     assertTrue(rpc.matches(Object.class.getMethod("hashCode"), Object.class)).     assertFalse(rpc.matches(Object.class.getMethod("wait"), Object.class)). }
false;public;0;6;;@Test public void testWildcardForOneClass() throws Exception {     rpc.setPattern("java.lang.Object.*").     assertTrue(rpc.matches(Object.class.getMethod("hashCode"), String.class)).     assertTrue(rpc.matches(Object.class.getMethod("wait"), String.class)). }
false;public;0;7;;@Test public void testMatchesObjectClass() throws Exception {     rpc.setPattern("java.lang.Object.*").     assertTrue(rpc.matches(Exception.class.getMethod("hashCode"), IOException.class)).     // Doesn't match a method from Throwable     assertFalse(rpc.matches(Exception.class.getMethod("getMessage"), Exception.class)). }
false;public;0;7;;@Test public void testWithExclusion() throws Exception {     this.rpc.setPattern(".*get.*").     this.rpc.setExcludedPattern(".*Age.*").     assertTrue(this.rpc.matches(TestBean.class.getMethod("getName"), TestBean.class)).     assertFalse(this.rpc.matches(TestBean.class.getMethod("getAge"), TestBean.class)). }
