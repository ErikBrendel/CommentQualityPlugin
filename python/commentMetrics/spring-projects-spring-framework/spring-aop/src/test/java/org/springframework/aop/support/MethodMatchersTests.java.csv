commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testDefaultMatchesAll() throws Exception {     MethodMatcher defaultMm = MethodMatcher.TRUE.     assertTrue(defaultMm.matches(EXCEPTION_GETMESSAGE, Exception.class)).     assertTrue(defaultMm.matches(ITESTBEAN_SETAGE, TestBean.class)). }
false;public;0;4;;@Test public void testMethodMatcherTrueSerializable() throws Exception {     assertSame(SerializationTestUtils.serializeAndDeserialize(MethodMatcher.TRUE), MethodMatcher.TRUE). }
false;public;0;10;;@Test public void testSingle() throws Exception {     MethodMatcher defaultMm = MethodMatcher.TRUE.     assertTrue(defaultMm.matches(EXCEPTION_GETMESSAGE, Exception.class)).     assertTrue(defaultMm.matches(ITESTBEAN_SETAGE, TestBean.class)).     defaultMm = MethodMatchers.intersection(defaultMm, new StartsWithMatcher("get")).     assertTrue(defaultMm.matches(EXCEPTION_GETMESSAGE, Exception.class)).     assertFalse(defaultMm.matches(ITESTBEAN_SETAGE, TestBean.class)). }
false;public;0;14;;@Test public void testDynamicAndStaticMethodMatcherIntersection() throws Exception {     MethodMatcher mm1 = MethodMatcher.TRUE.     MethodMatcher mm2 = new TestDynamicMethodMatcherWhichMatches().     MethodMatcher intersection = MethodMatchers.intersection(mm1, mm2).     assertTrue("Intersection is a dynamic matcher", intersection.isRuntime()).     assertTrue("2Matched setAge method", intersection.matches(ITESTBEAN_SETAGE, TestBean.class)).     assertTrue("3Matched setAge method", intersection.matches(ITESTBEAN_SETAGE, TestBean.class, new Integer(5))).     // Knock out dynamic part     intersection = MethodMatchers.intersection(intersection, new TestDynamicMethodMatcherWhichDoesNotMatch()).     assertTrue("Intersection is a dynamic matcher", intersection.isRuntime()).     assertTrue("2Matched setAge method", intersection.matches(ITESTBEAN_SETAGE, TestBean.class)).     assertFalse("3 - not Matched setAge method", intersection.matches(ITESTBEAN_SETAGE, TestBean.class, new Integer(5))). }
false;public;0;11;;@Test public void testStaticMethodMatcherUnion() throws Exception {     MethodMatcher getterMatcher = new StartsWithMatcher("get").     MethodMatcher setterMatcher = new StartsWithMatcher("set").     MethodMatcher union = MethodMatchers.union(getterMatcher, setterMatcher).     assertFalse("Union is a static matcher", union.isRuntime()).     assertTrue("Matched setAge method", union.matches(ITESTBEAN_SETAGE, TestBean.class)).     assertTrue("Matched getAge method", union.matches(ITESTBEAN_GETAGE, TestBean.class)).     assertFalse("Didn't matched absquatulate method", union.matches(IOTHER_ABSQUATULATE, TestBean.class)). }
false;public;0;7;;@Test public void testUnionEquals() {     MethodMatcher first = MethodMatchers.union(MethodMatcher.TRUE, MethodMatcher.TRUE).     MethodMatcher second = new ComposablePointcut(MethodMatcher.TRUE).union(new ComposablePointcut(MethodMatcher.TRUE)).getMethodMatcher().     assertTrue(first.equals(second)).     assertTrue(second.equals(first)). }
false;public;2;4;;@Override public boolean matches(Method m, @Nullable Class<?> targetClass) {     return m.getName().startsWith(prefix). }
false;public;3;4;;@Override public boolean matches(Method m, @Nullable Class<?> targetClass, Object... args) {     return true. }
false;public;3;4;;@Override public boolean matches(Method m, @Nullable Class<?> targetClass, Object... args) {     return false. }
