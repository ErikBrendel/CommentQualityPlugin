commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testAtThis() {     assertParameterNames(getMethod("oneAnnotation"), "@this(a)", new String[] { "a" }). }
false;public;0;4;;@Test public void testAtTarget() {     assertParameterNames(getMethod("oneAnnotation"), "@target(a)", new String[] { "a" }). }
false;public;0;4;;@Test public void testAtArgs() {     assertParameterNames(getMethod("oneAnnotation"), "@args(a)", new String[] { "a" }). }
false;public;0;4;;@Test public void testAtWithin() {     assertParameterNames(getMethod("oneAnnotation"), "@within(a)", new String[] { "a" }). }
false;public;0;4;;@Test public void testAtWithincode() {     assertParameterNames(getMethod("oneAnnotation"), "@withincode(a)", new String[] { "a" }). }
false;public;0;4;;@Test public void testAtAnnotation() {     assertParameterNames(getMethod("oneAnnotation"), "@annotation(a)", new String[] { "a" }). }
false;public;0;5;;@Test public void testAmbiguousAnnotationTwoVars() {     assertException(getMethod("twoAnnotations"), "@annotation(a) && @this(x)", AmbiguousBindingException.class, "Found 2 potential annotation variable(s), and 2 potential argument slots"). }
false;public;0;5;;@Test public void testAmbiguousAnnotationOneVar() {     assertException(getMethod("oneAnnotation"), "@annotation(a) && @this(x)", IllegalArgumentException.class, "Found 2 candidate annotation binding variables but only one potential argument binding slot"). }
false;public;0;5;;@Test public void testAnnotationMedley() {     assertParameterNames(getMethod("annotationMedley"), "@annotation(a) && args(count) && this(foo)", null, "ex", new String[] { "ex", "foo", "count", "a" }). }
false;public;1;1;;public void oneAnnotation(MyAnnotation ann) { }
false;public;2;1;;public void twoAnnotations(MyAnnotation ann, MyAnnotation anotherAnn) { }
false;public;4;1;;public void annotationMedley(Throwable t, Object foo, int x, MyAnnotation ma) { }
