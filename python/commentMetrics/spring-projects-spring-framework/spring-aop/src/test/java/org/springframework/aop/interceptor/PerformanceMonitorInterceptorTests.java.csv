commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testSuffixAndPrefixAssignment() {     PerformanceMonitorInterceptor interceptor = new PerformanceMonitorInterceptor().     assertNotNull(interceptor.getPrefix()).     assertNotNull(interceptor.getSuffix()).     interceptor.setPrefix(null).     interceptor.setSuffix(null).     assertNotNull(interceptor.getPrefix()).     assertNotNull(interceptor.getSuffix()). }
false;public;0;12;;@Test public void testSunnyDayPathLogsPerformanceMetricsCorrectly() throws Throwable {     MethodInvocation mi = mock(MethodInvocation.class).     given(mi.getMethod()).willReturn(String.class.getMethod("toString", new Class[0])).     Log log = mock(Log.class).     PerformanceMonitorInterceptor interceptor = new PerformanceMonitorInterceptor(true).     interceptor.invokeUnderTrace(mi, log).     verify(log).trace(anyString()). }
false;public;0;18;;@Test public void testExceptionPathStillLogsPerformanceMetricsCorrectly() throws Throwable {     MethodInvocation mi = mock(MethodInvocation.class).     given(mi.getMethod()).willReturn(String.class.getMethod("toString", new Class[0])).     given(mi.proceed()).willThrow(new IllegalArgumentException()).     Log log = mock(Log.class).     PerformanceMonitorInterceptor interceptor = new PerformanceMonitorInterceptor(true).     try {         interceptor.invokeUnderTrace(mi, log).         fail("Must have propagated the IllegalArgumentException.").     } catch (IllegalArgumentException expected) {     }     verify(log).trace(anyString()). }
