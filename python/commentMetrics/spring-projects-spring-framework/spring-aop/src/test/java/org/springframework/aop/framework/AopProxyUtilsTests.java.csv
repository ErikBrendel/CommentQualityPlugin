commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testCompleteProxiedInterfacesWorksWithNull() {     AdvisedSupport as = new AdvisedSupport().     Class<?>[] completedInterfaces = AopProxyUtils.completeProxiedInterfaces(as).     assertEquals(2, completedInterfaces.length).     List<?> ifaces = Arrays.asList(completedInterfaces).     assertTrue(ifaces.contains(Advised.class)).     assertTrue(ifaces.contains(SpringProxy.class)). }
false;public;0;7;;@Test public void testCompleteProxiedInterfacesWorksWithNullOpaque() {     AdvisedSupport as = new AdvisedSupport().     as.setOpaque(true).     Class<?>[] completedInterfaces = AopProxyUtils.completeProxiedInterfaces(as).     assertEquals(1, completedInterfaces.length). }
false;public;0;14;;@Test public void testCompleteProxiedInterfacesAdvisedNotIncluded() {     AdvisedSupport as = new AdvisedSupport().     as.addInterface(ITestBean.class).     as.addInterface(Comparable.class).     Class<?>[] completedInterfaces = AopProxyUtils.completeProxiedInterfaces(as).     assertEquals(4, completedInterfaces.length).     // Can't assume ordering for others, so use a list     List<?> l = Arrays.asList(completedInterfaces).     assertTrue(l.contains(Advised.class)).     assertTrue(l.contains(ITestBean.class)).     assertTrue(l.contains(Comparable.class)). }
false;public;0;15;;@Test public void testCompleteProxiedInterfacesAdvisedIncluded() {     AdvisedSupport as = new AdvisedSupport().     as.addInterface(ITestBean.class).     as.addInterface(Comparable.class).     as.addInterface(Advised.class).     Class<?>[] completedInterfaces = AopProxyUtils.completeProxiedInterfaces(as).     assertEquals(4, completedInterfaces.length).     // Can't assume ordering for others, so use a list     List<?> l = Arrays.asList(completedInterfaces).     assertTrue(l.contains(Advised.class)).     assertTrue(l.contains(ITestBean.class)).     assertTrue(l.contains(Comparable.class)). }
false;public;0;15;;@Test public void testCompleteProxiedInterfacesAdvisedNotIncludedOpaque() {     AdvisedSupport as = new AdvisedSupport().     as.setOpaque(true).     as.addInterface(ITestBean.class).     as.addInterface(Comparable.class).     Class<?>[] completedInterfaces = AopProxyUtils.completeProxiedInterfaces(as).     assertEquals(3, completedInterfaces.length).     // Can't assume ordering for others, so use a list     List<?> l = Arrays.asList(completedInterfaces).     assertFalse(l.contains(Advised.class)).     assertTrue(l.contains(ITestBean.class)).     assertTrue(l.contains(Comparable.class)). }
false;public;0;10;;@Test public void testProxiedUserInterfacesWithSingleInterface() {     ProxyFactory pf = new ProxyFactory().     pf.setTarget(new TestBean()).     pf.addInterface(ITestBean.class).     Object proxy = pf.getProxy().     Class<?>[] userInterfaces = AopProxyUtils.proxiedUserInterfaces(proxy).     assertEquals(1, userInterfaces.length).     assertEquals(ITestBean.class, userInterfaces[0]). }
false;public;0;12;;@Test public void testProxiedUserInterfacesWithMultipleInterfaces() {     ProxyFactory pf = new ProxyFactory().     pf.setTarget(new TestBean()).     pf.addInterface(ITestBean.class).     pf.addInterface(Comparable.class).     Object proxy = pf.getProxy().     Class<?>[] userInterfaces = AopProxyUtils.proxiedUserInterfaces(proxy).     assertEquals(2, userInterfaces.length).     assertEquals(ITestBean.class, userInterfaces[0]).     assertEquals(Comparable.class, userInterfaces[1]). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void testProxiedUserInterfacesWithNoInterface() {     Object proxy = Proxy.newProxyInstance(getClass().getClassLoader(), new Class[0], (proxy1, method, args) -> null).     AopProxyUtils.proxiedUserInterfaces(proxy). }
