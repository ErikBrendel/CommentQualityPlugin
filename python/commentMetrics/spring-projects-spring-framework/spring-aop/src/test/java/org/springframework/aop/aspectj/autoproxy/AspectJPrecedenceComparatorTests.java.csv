commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     this.comparator = new AspectJPrecedenceComparator().     this.anyOldMethod = getClass().getMethods()[0].     this.anyOldPointcut = new AspectJExpressionPointcut().     this.anyOldPointcut.setExpression("execution(* *(..))"). }
false;public;0;10;;@Test public void testSameAspectNoAfterAdvice() {     Advisor advisor1 = createAspectJBeforeAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someAspect").     Advisor advisor2 = createAspectJBeforeAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, LATE_ADVICE_DECLARATION_ORDER, "someAspect").     assertEquals("advisor1 sorted before advisor2", -1, this.comparator.compare(advisor1, advisor2)).     advisor1 = createAspectJBeforeAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, LATE_ADVICE_DECLARATION_ORDER, "someAspect").     advisor2 = createAspectJAroundAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someAspect").     assertEquals("advisor2 sorted before advisor1", 1, this.comparator.compare(advisor1, advisor2)). }
false;public;0;10;;@Test public void testSameAspectAfterAdvice() {     Advisor advisor1 = createAspectJAfterAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someAspect").     Advisor advisor2 = createAspectJAroundAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, LATE_ADVICE_DECLARATION_ORDER, "someAspect").     assertEquals("advisor2 sorted before advisor1", 1, this.comparator.compare(advisor1, advisor2)).     advisor1 = createAspectJAfterReturningAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, LATE_ADVICE_DECLARATION_ORDER, "someAspect").     advisor2 = createAspectJAfterThrowingAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someAspect").     assertEquals("advisor1 sorted before advisor2", -1, this.comparator.compare(advisor1, advisor2)). }
false;public;0;6;;@Test public void testSameAspectOneOfEach() {     Advisor advisor1 = createAspectJAfterAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someAspect").     Advisor advisor2 = createAspectJBeforeAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, LATE_ADVICE_DECLARATION_ORDER, "someAspect").     assertEquals("advisor1 and advisor2 not comparable", 1, this.comparator.compare(advisor1, advisor2)). }
false;public;0;10;;@Test public void testSameAdvisorPrecedenceDifferentAspectNoAfterAdvice() {     Advisor advisor1 = createAspectJBeforeAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someAspect").     Advisor advisor2 = createAspectJBeforeAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, LATE_ADVICE_DECLARATION_ORDER, "someOtherAspect").     assertEquals("nothing to say about order here", 0, this.comparator.compare(advisor1, advisor2)).     advisor1 = createAspectJBeforeAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, LATE_ADVICE_DECLARATION_ORDER, "someAspect").     advisor2 = createAspectJAroundAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someOtherAspect").     assertEquals("nothing to say about order here", 0, this.comparator.compare(advisor1, advisor2)). }
false;public;0;10;;@Test public void testSameAdvisorPrecedenceDifferentAspectAfterAdvice() {     Advisor advisor1 = createAspectJAfterAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someAspect").     Advisor advisor2 = createAspectJAroundAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, LATE_ADVICE_DECLARATION_ORDER, "someOtherAspect").     assertEquals("nothing to say about order here", 0, this.comparator.compare(advisor1, advisor2)).     advisor1 = createAspectJAfterReturningAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, LATE_ADVICE_DECLARATION_ORDER, "someAspect").     advisor2 = createAspectJAfterThrowingAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someOtherAspect").     assertEquals("nothing to say about order here", 0, this.comparator.compare(advisor1, advisor2)). }
false;public;0;10;;@Test public void testHigherAdvisorPrecedenceNoAfterAdvice() {     Advisor advisor1 = createSpringAOPBeforeAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER).     Advisor advisor2 = createAspectJBeforeAdvice(LOW_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someOtherAspect").     assertEquals("advisor1 sorted before advisor2", -1, this.comparator.compare(advisor1, advisor2)).     advisor1 = createAspectJBeforeAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, LATE_ADVICE_DECLARATION_ORDER, "someAspect").     advisor2 = createAspectJAroundAdvice(LOW_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someOtherAspect").     assertEquals("advisor1 sorted before advisor2", -1, this.comparator.compare(advisor1, advisor2)). }
false;public;0;10;;@Test public void testHigherAdvisorPrecedenceAfterAdvice() {     Advisor advisor1 = createAspectJAfterAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someAspect").     Advisor advisor2 = createAspectJAroundAdvice(LOW_PRECEDENCE_ADVISOR_ORDER, LATE_ADVICE_DECLARATION_ORDER, "someOtherAspect").     assertEquals("advisor1 sorted before advisor2", -1, this.comparator.compare(advisor1, advisor2)).     advisor1 = createAspectJAfterReturningAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, LATE_ADVICE_DECLARATION_ORDER, "someAspect").     advisor2 = createAspectJAfterThrowingAdvice(LOW_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someOtherAspect").     assertEquals("advisor2 sorted after advisor1", -1, this.comparator.compare(advisor1, advisor2)). }
false;public;0;10;;@Test public void testLowerAdvisorPrecedenceNoAfterAdvice() {     Advisor advisor1 = createAspectJBeforeAdvice(LOW_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someAspect").     Advisor advisor2 = createAspectJBeforeAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someOtherAspect").     assertEquals("advisor1 sorted after advisor2", 1, this.comparator.compare(advisor1, advisor2)).     advisor1 = createAspectJBeforeAdvice(LOW_PRECEDENCE_ADVISOR_ORDER, LATE_ADVICE_DECLARATION_ORDER, "someAspect").     advisor2 = createAspectJAroundAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someOtherAspect").     assertEquals("advisor1 sorted after advisor2", 1, this.comparator.compare(advisor1, advisor2)). }
false;public;0;10;;@Test public void testLowerAdvisorPrecedenceAfterAdvice() {     Advisor advisor1 = createAspectJAfterAdvice(LOW_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someAspect").     Advisor advisor2 = createAspectJAroundAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, LATE_ADVICE_DECLARATION_ORDER, "someOtherAspect").     assertEquals("advisor1 sorted after advisor2", 1, this.comparator.compare(advisor1, advisor2)).     advisor1 = createSpringAOPAfterAdvice(LOW_PRECEDENCE_ADVISOR_ORDER).     advisor2 = createAspectJAfterThrowingAdvice(HIGH_PRECEDENCE_ADVISOR_ORDER, EARLY_ADVICE_DECLARATION_ORDER, "someOtherAspect").     assertEquals("advisor1 sorted after advisor2", 1, this.comparator.compare(advisor1, advisor2)). }
false;private;3;4;;private Advisor createAspectJBeforeAdvice(int advisorOrder, int adviceDeclarationOrder, String aspectName) {     AspectJMethodBeforeAdvice advice = new AspectJMethodBeforeAdvice(this.anyOldMethod, this.anyOldPointcut, null).     return createAspectJAdvice(advisorOrder, adviceDeclarationOrder, aspectName, advice). }
false;private;3;4;;private Advisor createAspectJAroundAdvice(int advisorOrder, int adviceDeclarationOrder, String aspectName) {     AspectJAroundAdvice advice = new AspectJAroundAdvice(this.anyOldMethod, this.anyOldPointcut, null).     return createAspectJAdvice(advisorOrder, adviceDeclarationOrder, aspectName, advice). }
false;private;3;4;;private Advisor createAspectJAfterAdvice(int advisorOrder, int adviceDeclarationOrder, String aspectName) {     AspectJAfterAdvice advice = new AspectJAfterAdvice(this.anyOldMethod, this.anyOldPointcut, null).     return createAspectJAdvice(advisorOrder, adviceDeclarationOrder, aspectName, advice). }
false;private;3;4;;private Advisor createAspectJAfterReturningAdvice(int advisorOrder, int adviceDeclarationOrder, String aspectName) {     AspectJAfterReturningAdvice advice = new AspectJAfterReturningAdvice(this.anyOldMethod, this.anyOldPointcut, null).     return createAspectJAdvice(advisorOrder, adviceDeclarationOrder, aspectName, advice). }
false;private;3;4;;private Advisor createAspectJAfterThrowingAdvice(int advisorOrder, int adviceDeclarationOrder, String aspectName) {     AspectJAfterThrowingAdvice advice = new AspectJAfterThrowingAdvice(this.anyOldMethod, this.anyOldPointcut, null).     return createAspectJAdvice(advisorOrder, adviceDeclarationOrder, aspectName, advice). }
false;private;4;7;;private Advisor createAspectJAdvice(int advisorOrder, int adviceDeclarationOrder, String aspectName, AbstractAspectJAdvice advice) {     advice.setDeclarationOrder(adviceDeclarationOrder).     advice.setAspectName(aspectName).     AspectJPointcutAdvisor advisor = new AspectJPointcutAdvisor(advice).     advisor.setOrder(advisorOrder).     return advisor. }
false;public;4;3;;@Override public void afterReturning(@Nullable Object returnValue, Method method, Object[] args, @Nullable Object target) throws Throwable { }
false;private;1;10;;private Advisor createSpringAOPAfterAdvice(int order) {     AfterReturningAdvice advice = new AfterReturningAdvice() {          @Override         public void afterReturning(@Nullable Object returnValue, Method method, Object[] args, @Nullable Object target) throws Throwable {         }     }.     DefaultPointcutAdvisor advisor = new DefaultPointcutAdvisor(this.anyOldPointcut, advice).     advisor.setOrder(order).     return advisor. }
false;private;1;7;;private Advisor createSpringAOPBeforeAdvice(int order) {     BeforeAdvice advice = new BeforeAdvice() {     }.     DefaultPointcutAdvisor advisor = new DefaultPointcutAdvisor(this.anyOldPointcut, advice).     advisor.setOrder(order).     return advisor. }
