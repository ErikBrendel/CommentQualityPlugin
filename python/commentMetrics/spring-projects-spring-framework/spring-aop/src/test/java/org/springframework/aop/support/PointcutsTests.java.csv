# id;timestamp;commentText;codeText;commentWords;codeWords
PointcutsTests -> @Test 	public void testIntersectionOfSpecificGettersAndSubclassGetters();1328020251;Intersection should be MyTestBean getAge() only:_it's the union of allClassGetAge and subclass getters;@Test_	public void testIntersectionOfSpecificGettersAndSubclassGetters() {_		assertTrue(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertTrue(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		assertFalse(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertFalse(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertTrue(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertTrue(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		Pointcut intersection = Pointcuts.intersection(allClassGetAgePointcut, myTestBeanGetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class, null))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class, null))__		_		_		intersection = Pointcuts.intersection(intersection, myTestBeanSubclassGetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class, null))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class, null))__		_		_		Pointcut union = Pointcuts.union(intersection, allTestBeanMethodsPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class, null))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class, null))__		_		assertTrue(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, MyTestBean.class, null))__	};intersection,should,be,my,test,bean,get,age,only,it,s,the,union,of,all,class,get,age,and,subclass,getters;test,public,void,test,intersection,of,specific,getters,and,subclass,getters,assert,true,pointcuts,matches,all,class,get,age,pointcut,test,bean,class,null,assert,true,pointcuts,matches,all,class,get,age,pointcut,my,test,bean,class,null,assert,false,pointcuts,matches,my,test,bean,getter,pointcut,test,bean,class,null,assert,false,pointcuts,matches,my,test,bean,getter,pointcut,test,bean,class,null,assert,true,pointcuts,matches,my,test,bean,getter,pointcut,my,test,bean,class,null,assert,true,pointcuts,matches,my,test,bean,getter,pointcut,my,test,bean,class,null,pointcut,intersection,pointcuts,intersection,all,class,get,age,pointcut,my,test,bean,getter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,class,null,assert,true,pointcuts,matches,intersection,my,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,intersection,my,test,bean,subclass,class,null,intersection,pointcuts,intersection,intersection,my,test,bean,subclass,getter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,intersection,my,test,bean,subclass,class,null,pointcut,union,pointcuts,union,intersection,all,test,bean,methods,pointcut,assert,true,pointcuts,matches,union,test,bean,class,null,assert,true,pointcuts,matches,union,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,union,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,union,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,class,null
PointcutsTests -> @Test 	public void testIntersectionOfSpecificGettersAndSubclassGetters();1356735495;Intersection should be MyTestBean getAge() only:_it's the union of allClassGetAge and subclass getters;@Test_	public void testIntersectionOfSpecificGettersAndSubclassGetters() {_		assertTrue(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertTrue(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		assertFalse(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertFalse(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertTrue(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertTrue(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_AGE, MyTestBean.class, null))___		Pointcut intersection = Pointcuts.intersection(allClassGetAgePointcut, myTestBeanGetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class, null))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class, null))___		_		intersection = Pointcuts.intersection(intersection, myTestBeanSubclassGetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class, null))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class, null))___		_		Pointcut union = Pointcuts.union(intersection, allTestBeanMethodsPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class, null))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class, null))___		assertTrue(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, MyTestBean.class, null))__	};intersection,should,be,my,test,bean,get,age,only,it,s,the,union,of,all,class,get,age,and,subclass,getters;test,public,void,test,intersection,of,specific,getters,and,subclass,getters,assert,true,pointcuts,matches,all,class,get,age,pointcut,test,bean,class,null,assert,true,pointcuts,matches,all,class,get,age,pointcut,my,test,bean,class,null,assert,false,pointcuts,matches,my,test,bean,getter,pointcut,test,bean,class,null,assert,false,pointcuts,matches,my,test,bean,getter,pointcut,test,bean,class,null,assert,true,pointcuts,matches,my,test,bean,getter,pointcut,my,test,bean,class,null,assert,true,pointcuts,matches,my,test,bean,getter,pointcut,my,test,bean,class,null,pointcut,intersection,pointcuts,intersection,all,class,get,age,pointcut,my,test,bean,getter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,class,null,assert,true,pointcuts,matches,intersection,my,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,intersection,my,test,bean,subclass,class,null,intersection,pointcuts,intersection,intersection,my,test,bean,subclass,getter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,intersection,my,test,bean,subclass,class,null,pointcut,union,pointcuts,union,intersection,all,test,bean,methods,pointcut,assert,true,pointcuts,matches,union,test,bean,class,null,assert,true,pointcuts,matches,union,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,union,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,union,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,class,null
PointcutsTests -> @Test 	public void testIntersectionOfSpecificGettersAndSubclassGetters();1362408075;Intersection should be MyTestBean getAge() only:_it's the union of allClassGetAge and subclass getters;@Test_	public void testIntersectionOfSpecificGettersAndSubclassGetters() {_		assertTrue(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertTrue(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		assertFalse(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertFalse(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertTrue(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertTrue(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_AGE, MyTestBean.class, null))___		Pointcut intersection = Pointcuts.intersection(allClassGetAgePointcut, myTestBeanGetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class, null))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class, null))___		_		intersection = Pointcuts.intersection(intersection, myTestBeanSubclassGetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class, null))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class, null))___		_		Pointcut union = Pointcuts.union(intersection, allTestBeanMethodsPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class, null))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class, null))___		assertTrue(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, MyTestBean.class, null))__	};intersection,should,be,my,test,bean,get,age,only,it,s,the,union,of,all,class,get,age,and,subclass,getters;test,public,void,test,intersection,of,specific,getters,and,subclass,getters,assert,true,pointcuts,matches,all,class,get,age,pointcut,test,bean,class,null,assert,true,pointcuts,matches,all,class,get,age,pointcut,my,test,bean,class,null,assert,false,pointcuts,matches,my,test,bean,getter,pointcut,test,bean,class,null,assert,false,pointcuts,matches,my,test,bean,getter,pointcut,test,bean,class,null,assert,true,pointcuts,matches,my,test,bean,getter,pointcut,my,test,bean,class,null,assert,true,pointcuts,matches,my,test,bean,getter,pointcut,my,test,bean,class,null,pointcut,intersection,pointcuts,intersection,all,class,get,age,pointcut,my,test,bean,getter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,class,null,assert,true,pointcuts,matches,intersection,my,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,intersection,my,test,bean,subclass,class,null,intersection,pointcuts,intersection,intersection,my,test,bean,subclass,getter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,intersection,my,test,bean,subclass,class,null,pointcut,union,pointcuts,union,intersection,all,test,bean,methods,pointcut,assert,true,pointcuts,matches,union,test,bean,class,null,assert,true,pointcuts,matches,union,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,union,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,union,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,class,null
PointcutsTests -> @Test 	public void testIntersectionOfSpecificGettersAndSubclassGetters();1413848647;Intersection should be MyTestBean getAge() only:_it's the union of allClassGetAge and subclass getters;@Test_	public void testIntersectionOfSpecificGettersAndSubclassGetters() {_		assertTrue(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertTrue(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		assertFalse(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertFalse(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertTrue(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertTrue(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_AGE, MyTestBean.class, null))___		Pointcut intersection = Pointcuts.intersection(allClassGetAgePointcut, myTestBeanGetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class, null))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class, null))___		_		intersection = Pointcuts.intersection(intersection, myTestBeanSubclassGetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class, null))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class, null))___		_		Pointcut union = Pointcuts.union(intersection, allTestBeanMethodsPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_NAME, TestBean.class, null))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_NAME, MyTestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class, null))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class, null))___		assertTrue(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, MyTestBean.class, null))__	};intersection,should,be,my,test,bean,get,age,only,it,s,the,union,of,all,class,get,age,and,subclass,getters;test,public,void,test,intersection,of,specific,getters,and,subclass,getters,assert,true,pointcuts,matches,all,class,get,age,pointcut,test,bean,class,null,assert,true,pointcuts,matches,all,class,get,age,pointcut,my,test,bean,class,null,assert,false,pointcuts,matches,my,test,bean,getter,pointcut,test,bean,class,null,assert,false,pointcuts,matches,my,test,bean,getter,pointcut,test,bean,class,null,assert,true,pointcuts,matches,my,test,bean,getter,pointcut,my,test,bean,class,null,assert,true,pointcuts,matches,my,test,bean,getter,pointcut,my,test,bean,class,null,pointcut,intersection,pointcuts,intersection,all,class,get,age,pointcut,my,test,bean,getter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,class,null,assert,true,pointcuts,matches,intersection,my,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,intersection,my,test,bean,subclass,class,null,intersection,pointcuts,intersection,intersection,my,test,bean,subclass,getter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,class,null,assert,false,pointcuts,matches,intersection,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,intersection,my,test,bean,subclass,class,null,pointcut,union,pointcuts,union,intersection,all,test,bean,methods,pointcut,assert,true,pointcuts,matches,union,test,bean,class,null,assert,true,pointcuts,matches,union,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,union,my,test,bean,subclass,class,null,assert,true,pointcuts,matches,union,test,bean,class,null,assert,false,pointcuts,matches,union,my,test,bean,class,null
PointcutsTests -> @Test 	public void testIntersectionOfSpecificGettersAndSubclassGetters();1450827071;Intersection should be MyTestBean getAge() only:_it's the union of allClassGetAge and subclass getters;@Test_	public void testIntersectionOfSpecificGettersAndSubclassGetters() {_		assertTrue(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_AGE, TestBean.class))__		assertTrue(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_AGE, MyTestBean.class))__		assertFalse(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_NAME, TestBean.class))__		assertFalse(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_AGE, TestBean.class))__		assertTrue(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_NAME, MyTestBean.class))__		assertTrue(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_AGE, MyTestBean.class))___		Pointcut intersection = Pointcuts.intersection(allClassGetAgePointcut, myTestBeanGetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, TestBean.class))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBean.class))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBean.class))__		_		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class))___		_		intersection = Pointcuts.intersection(intersection, myTestBeanSubclassGetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, TestBean.class))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBean.class))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBean.class))__		_		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class))___		_		Pointcut union = Pointcuts.union(intersection, allTestBeanMethodsPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_NAME, TestBean.class))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_NAME, MyTestBean.class))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBean.class))__		_		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class))___		assertTrue(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, MyTestBean.class))__	};intersection,should,be,my,test,bean,get,age,only,it,s,the,union,of,all,class,get,age,and,subclass,getters;test,public,void,test,intersection,of,specific,getters,and,subclass,getters,assert,true,pointcuts,matches,all,class,get,age,pointcut,test,bean,class,assert,true,pointcuts,matches,all,class,get,age,pointcut,my,test,bean,class,assert,false,pointcuts,matches,my,test,bean,getter,pointcut,test,bean,class,assert,false,pointcuts,matches,my,test,bean,getter,pointcut,test,bean,class,assert,true,pointcuts,matches,my,test,bean,getter,pointcut,my,test,bean,class,assert,true,pointcuts,matches,my,test,bean,getter,pointcut,my,test,bean,class,pointcut,intersection,pointcuts,intersection,all,class,get,age,pointcut,my,test,bean,getter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,assert,false,pointcuts,matches,intersection,test,bean,class,assert,false,pointcuts,matches,intersection,my,test,bean,class,assert,true,pointcuts,matches,intersection,my,test,bean,class,assert,false,pointcuts,matches,intersection,my,test,bean,subclass,class,assert,true,pointcuts,matches,intersection,my,test,bean,subclass,class,intersection,pointcuts,intersection,intersection,my,test,bean,subclass,getter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,assert,false,pointcuts,matches,intersection,test,bean,class,assert,false,pointcuts,matches,intersection,my,test,bean,class,assert,false,pointcuts,matches,intersection,my,test,bean,class,assert,false,pointcuts,matches,intersection,my,test,bean,subclass,class,assert,true,pointcuts,matches,intersection,my,test,bean,subclass,class,pointcut,union,pointcuts,union,intersection,all,test,bean,methods,pointcut,assert,true,pointcuts,matches,union,test,bean,class,assert,true,pointcuts,matches,union,test,bean,class,assert,false,pointcuts,matches,union,my,test,bean,class,assert,false,pointcuts,matches,union,my,test,bean,class,assert,false,pointcuts,matches,union,my,test,bean,subclass,class,assert,true,pointcuts,matches,union,my,test,bean,subclass,class,assert,true,pointcuts,matches,union,test,bean,class,assert,false,pointcuts,matches,union,my,test,bean,class
PointcutsTests -> @Test 	public void testIntersectionOfSpecificGettersAndSubclassGetters();1496242568;Intersection should be MyTestBean getAge() only:_it's the union of allClassGetAge and subclass getters;@Test_	public void testIntersectionOfSpecificGettersAndSubclassGetters() {_		assertTrue(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_AGE, TestBean.class))__		assertTrue(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_AGE, MyTestBean.class))__		assertFalse(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_NAME, TestBean.class))__		assertFalse(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_AGE, TestBean.class))__		assertTrue(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_NAME, MyTestBean.class))__		assertTrue(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_AGE, MyTestBean.class))___		Pointcut intersection = Pointcuts.intersection(allClassGetAgePointcut, myTestBeanGetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, TestBean.class))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBean.class))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBean.class))__		_		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class))___		_		intersection = Pointcuts.intersection(intersection, myTestBeanSubclassGetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, TestBean.class))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBean.class))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBean.class))__		_		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class))__		assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class))___		_		Pointcut union = Pointcuts.union(intersection, allTestBeanMethodsPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_NAME, TestBean.class))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_NAME, MyTestBean.class))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBean.class))__		_		assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class))___		assertTrue(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, MyTestBean.class))__	};intersection,should,be,my,test,bean,get,age,only,it,s,the,union,of,all,class,get,age,and,subclass,getters;test,public,void,test,intersection,of,specific,getters,and,subclass,getters,assert,true,pointcuts,matches,all,class,get,age,pointcut,test,bean,class,assert,true,pointcuts,matches,all,class,get,age,pointcut,my,test,bean,class,assert,false,pointcuts,matches,my,test,bean,getter,pointcut,test,bean,class,assert,false,pointcuts,matches,my,test,bean,getter,pointcut,test,bean,class,assert,true,pointcuts,matches,my,test,bean,getter,pointcut,my,test,bean,class,assert,true,pointcuts,matches,my,test,bean,getter,pointcut,my,test,bean,class,pointcut,intersection,pointcuts,intersection,all,class,get,age,pointcut,my,test,bean,getter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,assert,false,pointcuts,matches,intersection,test,bean,class,assert,false,pointcuts,matches,intersection,my,test,bean,class,assert,true,pointcuts,matches,intersection,my,test,bean,class,assert,false,pointcuts,matches,intersection,my,test,bean,subclass,class,assert,true,pointcuts,matches,intersection,my,test,bean,subclass,class,intersection,pointcuts,intersection,intersection,my,test,bean,subclass,getter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,assert,false,pointcuts,matches,intersection,test,bean,class,assert,false,pointcuts,matches,intersection,my,test,bean,class,assert,false,pointcuts,matches,intersection,my,test,bean,class,assert,false,pointcuts,matches,intersection,my,test,bean,subclass,class,assert,true,pointcuts,matches,intersection,my,test,bean,subclass,class,pointcut,union,pointcuts,union,intersection,all,test,bean,methods,pointcut,assert,true,pointcuts,matches,union,test,bean,class,assert,true,pointcuts,matches,union,test,bean,class,assert,false,pointcuts,matches,union,my,test,bean,class,assert,false,pointcuts,matches,union,my,test,bean,class,assert,false,pointcuts,matches,union,my,test,bean,subclass,class,assert,true,pointcuts,matches,union,my,test,bean,subclass,class,assert,true,pointcuts,matches,union,test,bean,class,assert,false,pointcuts,matches,union,my,test,bean,class
PointcutsTests -> @Test 	public void testSimpleIntersection();1328020251;The intersection of these two pointcuts leaves nothing.;@Test_	public void testSimpleIntersection() {_		Pointcut intersection = Pointcuts.intersection(allClassGetterPointcut, allClassSetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_ABSQUATULATE, TestBean.class, null))__	};the,intersection,of,these,two,pointcuts,leaves,nothing;test,public,void,test,simple,intersection,pointcut,intersection,pointcuts,intersection,all,class,getter,pointcut,all,class,setter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,new,object,new,integer,6,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,test,bean,class,null
PointcutsTests -> @Test 	public void testSimpleIntersection();1356735495;The intersection of these two pointcuts leaves nothing.;@Test_	public void testSimpleIntersection() {_		Pointcut intersection = Pointcuts.intersection(allClassGetterPointcut, allClassSetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_ABSQUATULATE, TestBean.class, null))__	};the,intersection,of,these,two,pointcuts,leaves,nothing;test,public,void,test,simple,intersection,pointcut,intersection,pointcuts,intersection,all,class,getter,pointcut,all,class,setter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,new,object,new,integer,6,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,test,bean,class,null
PointcutsTests -> @Test 	public void testSimpleIntersection();1362408075;The intersection of these two pointcuts leaves nothing.;@Test_	public void testSimpleIntersection() {_		Pointcut intersection = Pointcuts.intersection(allClassGetterPointcut, allClassSetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_ABSQUATULATE, TestBean.class, null))__	};the,intersection,of,these,two,pointcuts,leaves,nothing;test,public,void,test,simple,intersection,pointcut,intersection,pointcuts,intersection,all,class,getter,pointcut,all,class,setter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,new,object,new,integer,6,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,test,bean,class,null
PointcutsTests -> @Test 	public void testSimpleIntersection();1413848647;The intersection of these two pointcuts leaves nothing.;@Test_	public void testSimpleIntersection() {_		Pointcut intersection = Pointcuts.intersection(allClassGetterPointcut, allClassSetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_ABSQUATULATE, TestBean.class, null))__	};the,intersection,of,these,two,pointcuts,leaves,nothing;test,public,void,test,simple,intersection,pointcut,intersection,pointcuts,intersection,all,class,getter,pointcut,all,class,setter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,new,object,new,integer,6,assert,false,pointcuts,matches,intersection,test,bean,class,null,assert,false,pointcuts,matches,intersection,test,bean,class,null
PointcutsTests -> @Test 	public void testSimpleIntersection();1450827071;The intersection of these two pointcuts leaves nothing.;@Test_	public void testSimpleIntersection() {_		Pointcut intersection = Pointcuts.intersection(allClassGetterPointcut, allClassSetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6)))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_ABSQUATULATE, TestBean.class))__	};the,intersection,of,these,two,pointcuts,leaves,nothing;test,public,void,test,simple,intersection,pointcut,intersection,pointcuts,intersection,all,class,getter,pointcut,all,class,setter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,new,integer,6,assert,false,pointcuts,matches,intersection,test,bean,class,assert,false,pointcuts,matches,intersection,test,bean,class
PointcutsTests -> @Test 	public void testSimpleIntersection();1496242568;The intersection of these two pointcuts leaves nothing.;@Test_	public void testSimpleIntersection() {_		Pointcut intersection = Pointcuts.intersection(allClassGetterPointcut, allClassSetterPointcut)__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6)))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class))__		assertFalse(Pointcuts.matches(intersection, TEST_BEAN_ABSQUATULATE, TestBean.class))__	};the,intersection,of,these,two,pointcuts,leaves,nothing;test,public,void,test,simple,intersection,pointcut,intersection,pointcuts,intersection,all,class,getter,pointcut,all,class,setter,pointcut,assert,false,pointcuts,matches,intersection,test,bean,class,new,integer,6,assert,false,pointcuts,matches,intersection,test,bean,class,assert,false,pointcuts,matches,intersection,test,bean,class
PointcutsTests -> @Test 	public void testUnionOfSettersAndGetters();1328020251;Should match all setters and getters on any class;@Test_	public void testUnionOfSettersAndGetters() {_		Pointcut union = Pointcuts.union(allClassGetterPointcut, allClassSetterPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class, null))__	};should,match,all,setters,and,getters,on,any,class;test,public,void,test,union,of,setters,and,getters,pointcut,union,pointcuts,union,all,class,getter,pointcut,all,class,setter,pointcut,assert,true,pointcuts,matches,union,test,bean,class,new,object,new,integer,6,assert,true,pointcuts,matches,union,test,bean,class,null,assert,false,pointcuts,matches,union,test,bean,class,null
PointcutsTests -> @Test 	public void testUnionOfSettersAndGetters();1356735495;Should match all setters and getters on any class;@Test_	public void testUnionOfSettersAndGetters() {_		Pointcut union = Pointcuts.union(allClassGetterPointcut, allClassSetterPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class, null))__	};should,match,all,setters,and,getters,on,any,class;test,public,void,test,union,of,setters,and,getters,pointcut,union,pointcuts,union,all,class,getter,pointcut,all,class,setter,pointcut,assert,true,pointcuts,matches,union,test,bean,class,new,object,new,integer,6,assert,true,pointcuts,matches,union,test,bean,class,null,assert,false,pointcuts,matches,union,test,bean,class,null
PointcutsTests -> @Test 	public void testUnionOfSettersAndGetters();1362408075;Should match all setters and getters on any class;@Test_	public void testUnionOfSettersAndGetters() {_		Pointcut union = Pointcuts.union(allClassGetterPointcut, allClassSetterPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class, null))__	};should,match,all,setters,and,getters,on,any,class;test,public,void,test,union,of,setters,and,getters,pointcut,union,pointcuts,union,all,class,getter,pointcut,all,class,setter,pointcut,assert,true,pointcuts,matches,union,test,bean,class,new,object,new,integer,6,assert,true,pointcuts,matches,union,test,bean,class,null,assert,false,pointcuts,matches,union,test,bean,class,null
PointcutsTests -> @Test 	public void testUnionOfSettersAndGetters();1413848647;Should match all setters and getters on any class;@Test_	public void testUnionOfSettersAndGetters() {_		Pointcut union = Pointcuts.union(allClassGetterPointcut, allClassSetterPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class, null))__	};should,match,all,setters,and,getters,on,any,class;test,public,void,test,union,of,setters,and,getters,pointcut,union,pointcuts,union,all,class,getter,pointcut,all,class,setter,pointcut,assert,true,pointcuts,matches,union,test,bean,class,new,object,new,integer,6,assert,true,pointcuts,matches,union,test,bean,class,null,assert,false,pointcuts,matches,union,test,bean,class,null
PointcutsTests -> @Test 	public void testUnionOfSettersAndGetters();1450827071;Should match all setters and getters on any class;@Test_	public void testUnionOfSettersAndGetters() {_		Pointcut union = Pointcuts.union(allClassGetterPointcut, allClassSetterPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6)))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class))__	};should,match,all,setters,and,getters,on,any,class;test,public,void,test,union,of,setters,and,getters,pointcut,union,pointcuts,union,all,class,getter,pointcut,all,class,setter,pointcut,assert,true,pointcuts,matches,union,test,bean,class,new,integer,6,assert,true,pointcuts,matches,union,test,bean,class,assert,false,pointcuts,matches,union,test,bean,class
PointcutsTests -> @Test 	public void testUnionOfSettersAndGetters();1496242568;Should match all setters and getters on any class;@Test_	public void testUnionOfSettersAndGetters() {_		Pointcut union = Pointcuts.union(allClassGetterPointcut, allClassSetterPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6)))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class))__	};should,match,all,setters,and,getters,on,any,class;test,public,void,test,union,of,setters,and,getters,pointcut,union,pointcuts,union,all,class,getter,pointcut,all,class,setter,pointcut,assert,true,pointcuts,matches,union,test,bean,class,new,integer,6,assert,true,pointcuts,matches,union,test,bean,class,assert,false,pointcuts,matches,union,test,bean,class
PointcutsTests -> @Test 	public void testUnionOfAllSettersAndSubclassSetters();1328020251;Tests vertical composition. First pointcut matches all setters._Second one matches all getters in the MyTestBean class. TestBean getters shouldn't pass.;@Test_	public void testUnionOfAllSettersAndSubclassSetters() {_		assertFalse(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__		assertTrue(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_SET_AGE, MyTestBean.class, new Object[] { new Integer(6)}))__		assertFalse(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_GET_AGE, TestBean.class, null))__		_		Pointcut union = Pointcuts.union(myTestBeanSetterPointcut, allClassGetterPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, MyTestBean.class, new Object[] { new Integer(6)}))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__	};tests,vertical,composition,first,pointcut,matches,all,setters,second,one,matches,all,getters,in,the,my,test,bean,class,test,bean,getters,shouldn,t,pass;test,public,void,test,union,of,all,setters,and,subclass,setters,assert,false,pointcuts,matches,my,test,bean,setter,pointcut,test,bean,class,new,object,new,integer,6,assert,true,pointcuts,matches,my,test,bean,setter,pointcut,my,test,bean,class,new,object,new,integer,6,assert,false,pointcuts,matches,my,test,bean,setter,pointcut,test,bean,class,null,pointcut,union,pointcuts,union,my,test,bean,setter,pointcut,all,class,getter,pointcut,assert,true,pointcuts,matches,union,test,bean,class,null,assert,true,pointcuts,matches,union,my,test,bean,class,null,assert,true,pointcuts,matches,union,my,test,bean,class,new,object,new,integer,6,assert,false,pointcuts,matches,union,test,bean,class,new,object,new,integer,6
PointcutsTests -> @Test 	public void testUnionOfAllSettersAndSubclassSetters();1356735495;Tests vertical composition. First pointcut matches all setters._Second one matches all getters in the MyTestBean class. TestBean getters shouldn't pass.;@Test_	public void testUnionOfAllSettersAndSubclassSetters() {_		assertFalse(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__		assertTrue(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_SET_AGE, MyTestBean.class, new Object[] { new Integer(6)}))__		assertFalse(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_GET_AGE, TestBean.class, null))___		Pointcut union = Pointcuts.union(myTestBeanSetterPointcut, allClassGetterPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, MyTestBean.class, new Object[] { new Integer(6)}))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__	};tests,vertical,composition,first,pointcut,matches,all,setters,second,one,matches,all,getters,in,the,my,test,bean,class,test,bean,getters,shouldn,t,pass;test,public,void,test,union,of,all,setters,and,subclass,setters,assert,false,pointcuts,matches,my,test,bean,setter,pointcut,test,bean,class,new,object,new,integer,6,assert,true,pointcuts,matches,my,test,bean,setter,pointcut,my,test,bean,class,new,object,new,integer,6,assert,false,pointcuts,matches,my,test,bean,setter,pointcut,test,bean,class,null,pointcut,union,pointcuts,union,my,test,bean,setter,pointcut,all,class,getter,pointcut,assert,true,pointcuts,matches,union,test,bean,class,null,assert,true,pointcuts,matches,union,my,test,bean,class,null,assert,true,pointcuts,matches,union,my,test,bean,class,new,object,new,integer,6,assert,false,pointcuts,matches,union,test,bean,class,new,object,new,integer,6
PointcutsTests -> @Test 	public void testUnionOfAllSettersAndSubclassSetters();1362408075;Tests vertical composition. First pointcut matches all setters._Second one matches all getters in the MyTestBean class. TestBean getters shouldn't pass.;@Test_	public void testUnionOfAllSettersAndSubclassSetters() {_		assertFalse(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__		assertTrue(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_SET_AGE, MyTestBean.class, new Object[] { new Integer(6)}))__		assertFalse(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_GET_AGE, TestBean.class, null))___		Pointcut union = Pointcuts.union(myTestBeanSetterPointcut, allClassGetterPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, MyTestBean.class, new Object[] { new Integer(6)}))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__	};tests,vertical,composition,first,pointcut,matches,all,setters,second,one,matches,all,getters,in,the,my,test,bean,class,test,bean,getters,shouldn,t,pass;test,public,void,test,union,of,all,setters,and,subclass,setters,assert,false,pointcuts,matches,my,test,bean,setter,pointcut,test,bean,class,new,object,new,integer,6,assert,true,pointcuts,matches,my,test,bean,setter,pointcut,my,test,bean,class,new,object,new,integer,6,assert,false,pointcuts,matches,my,test,bean,setter,pointcut,test,bean,class,null,pointcut,union,pointcuts,union,my,test,bean,setter,pointcut,all,class,getter,pointcut,assert,true,pointcuts,matches,union,test,bean,class,null,assert,true,pointcuts,matches,union,my,test,bean,class,null,assert,true,pointcuts,matches,union,my,test,bean,class,new,object,new,integer,6,assert,false,pointcuts,matches,union,test,bean,class,new,object,new,integer,6
PointcutsTests -> @Test 	public void testUnionOfAllSettersAndSubclassSetters();1413848647;Tests vertical composition. First pointcut matches all setters._Second one matches all getters in the MyTestBean class. TestBean getters shouldn't pass.;@Test_	public void testUnionOfAllSettersAndSubclassSetters() {_		assertFalse(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__		assertTrue(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_SET_AGE, MyTestBean.class, new Object[] { new Integer(6)}))__		assertFalse(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_GET_AGE, TestBean.class, null))___		Pointcut union = Pointcuts.union(myTestBeanSetterPointcut, allClassGetterPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class, null))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBean.class, null))__		_		assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, MyTestBean.class, new Object[] { new Integer(6)}))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Object[] { new Integer(6)}))__	};tests,vertical,composition,first,pointcut,matches,all,setters,second,one,matches,all,getters,in,the,my,test,bean,class,test,bean,getters,shouldn,t,pass;test,public,void,test,union,of,all,setters,and,subclass,setters,assert,false,pointcuts,matches,my,test,bean,setter,pointcut,test,bean,class,new,object,new,integer,6,assert,true,pointcuts,matches,my,test,bean,setter,pointcut,my,test,bean,class,new,object,new,integer,6,assert,false,pointcuts,matches,my,test,bean,setter,pointcut,test,bean,class,null,pointcut,union,pointcuts,union,my,test,bean,setter,pointcut,all,class,getter,pointcut,assert,true,pointcuts,matches,union,test,bean,class,null,assert,true,pointcuts,matches,union,my,test,bean,class,null,assert,true,pointcuts,matches,union,my,test,bean,class,new,object,new,integer,6,assert,false,pointcuts,matches,union,test,bean,class,new,object,new,integer,6
PointcutsTests -> @Test 	public void testUnionOfAllSettersAndSubclassSetters();1450827071;Tests vertical composition. First pointcut matches all setters._Second one matches all getters in the MyTestBean class. TestBean getters shouldn't pass.;@Test_	public void testUnionOfAllSettersAndSubclassSetters() {_		assertFalse(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6)))__		assertTrue(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_SET_AGE, MyTestBean.class, new Integer(6)))__		assertFalse(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_GET_AGE, TestBean.class))___		Pointcut union = Pointcuts.union(myTestBeanSetterPointcut, allClassGetterPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBean.class))__		_		assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, MyTestBean.class, new Integer(6)))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6)))__	};tests,vertical,composition,first,pointcut,matches,all,setters,second,one,matches,all,getters,in,the,my,test,bean,class,test,bean,getters,shouldn,t,pass;test,public,void,test,union,of,all,setters,and,subclass,setters,assert,false,pointcuts,matches,my,test,bean,setter,pointcut,test,bean,class,new,integer,6,assert,true,pointcuts,matches,my,test,bean,setter,pointcut,my,test,bean,class,new,integer,6,assert,false,pointcuts,matches,my,test,bean,setter,pointcut,test,bean,class,pointcut,union,pointcuts,union,my,test,bean,setter,pointcut,all,class,getter,pointcut,assert,true,pointcuts,matches,union,test,bean,class,assert,true,pointcuts,matches,union,my,test,bean,class,assert,true,pointcuts,matches,union,my,test,bean,class,new,integer,6,assert,false,pointcuts,matches,union,test,bean,class,new,integer,6
PointcutsTests -> @Test 	public void testUnionOfAllSettersAndSubclassSetters();1496242568;Tests vertical composition. First pointcut matches all setters._Second one matches all getters in the MyTestBean class. TestBean getters shouldn't pass.;@Test_	public void testUnionOfAllSettersAndSubclassSetters() {_		assertFalse(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6)))__		assertTrue(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_SET_AGE, MyTestBean.class, new Integer(6)))__		assertFalse(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_GET_AGE, TestBean.class))___		Pointcut union = Pointcuts.union(myTestBeanSetterPointcut, allClassGetterPointcut)__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class))__		assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBean.class))__		_		assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, MyTestBean.class, new Integer(6)))__		assertFalse(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6)))__	};tests,vertical,composition,first,pointcut,matches,all,setters,second,one,matches,all,getters,in,the,my,test,bean,class,test,bean,getters,shouldn,t,pass;test,public,void,test,union,of,all,setters,and,subclass,setters,assert,false,pointcuts,matches,my,test,bean,setter,pointcut,test,bean,class,new,integer,6,assert,true,pointcuts,matches,my,test,bean,setter,pointcut,my,test,bean,class,new,integer,6,assert,false,pointcuts,matches,my,test,bean,setter,pointcut,test,bean,class,pointcut,union,pointcuts,union,my,test,bean,setter,pointcut,all,class,getter,pointcut,assert,true,pointcuts,matches,union,test,bean,class,assert,true,pointcuts,matches,union,my,test,bean,class,assert,true,pointcuts,matches,union,my,test,bean,class,new,integer,6,assert,false,pointcuts,matches,union,test,bean,class,new,integer,6
