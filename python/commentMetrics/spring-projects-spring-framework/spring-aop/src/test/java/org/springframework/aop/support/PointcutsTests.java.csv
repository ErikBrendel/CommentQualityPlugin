commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean matches(Class<?> clazz) {     return clazz.equals(TestBean.class). }
false;public;0;9;;@Override public ClassFilter getClassFilter() {     return new ClassFilter() {          @Override         public boolean matches(Class<?> clazz) {             return clazz.equals(TestBean.class).         }     }. }
false;public;2;4;;@Override public boolean matches(Method m, @Nullable Class<?> targetClass) {     return true. }
false;public;0;4;;@Override public ClassFilter getClassFilter() {     return new RootClassFilter(MyTestBean.class). }
false;public;2;4;;@Override public boolean matches(Method m, @Nullable Class<?> targetClass) {     return m.getName().startsWith("set"). }
false;public;0;4;;@Override public ClassFilter getClassFilter() {     return new RootClassFilter(MyTestBean.class). }
false;public;2;4;;@Override public boolean matches(Method m, @Nullable Class<?> targetClass) {     return m.getName().startsWith("get"). }
false;public;0;4;;@Override public ClassFilter getClassFilter() {     return new RootClassFilter(MyTestBeanSubclass.class). }
false;public;2;4;;@Override public boolean matches(Method m, @Nullable Class<?> targetClass) {     return m.getName().startsWith("get"). }
false;public;0;9;;@Test public void testTrue() {     assertTrue(Pointcuts.matches(Pointcut.TRUE, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6))).     assertTrue(Pointcuts.matches(Pointcut.TRUE, TEST_BEAN_GET_AGE, TestBean.class)).     assertTrue(Pointcuts.matches(Pointcut.TRUE, TEST_BEAN_ABSQUATULATE, TestBean.class)).     assertTrue(Pointcuts.matches(Pointcut.TRUE, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6))).     assertTrue(Pointcuts.matches(Pointcut.TRUE, TEST_BEAN_GET_AGE, TestBean.class)).     assertTrue(Pointcuts.matches(Pointcut.TRUE, TEST_BEAN_ABSQUATULATE, TestBean.class)). }
false;public;0;9;;@Test public void testMatches() {     assertTrue(Pointcuts.matches(allClassSetterPointcut, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6))).     assertFalse(Pointcuts.matches(allClassSetterPointcut, TEST_BEAN_GET_AGE, TestBean.class)).     assertFalse(Pointcuts.matches(allClassSetterPointcut, TEST_BEAN_ABSQUATULATE, TestBean.class)).     assertFalse(Pointcuts.matches(allClassGetterPointcut, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6))).     assertTrue(Pointcuts.matches(allClassGetterPointcut, TEST_BEAN_GET_AGE, TestBean.class)).     assertFalse(Pointcuts.matches(allClassGetterPointcut, TEST_BEAN_ABSQUATULATE, TestBean.class)). }
true;public;0;7;/**  * Should match all setters and getters on any class  */ ;/**  * Should match all setters and getters on any class  */ @Test public void testUnionOfSettersAndGetters() {     Pointcut union = Pointcuts.union(allClassGetterPointcut, allClassSetterPointcut).     assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6))).     assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class)).     assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class)). }
false;public;0;19;;@Test public void testUnionOfSpecificGetters() {     Pointcut union = Pointcuts.union(allClassGetAgePointcut, allClassGetNamePointcut).     assertFalse(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6))).     assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class)).     assertFalse(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_NAME, TestBean.class)).     assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_NAME, TestBean.class)).     assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class)).     // Union with all setters     union = Pointcuts.union(union, allClassSetterPointcut).     assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6))).     assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class)).     assertFalse(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_NAME, TestBean.class)).     assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_NAME, TestBean.class)).     assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class)).     assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6))). }
true;public;0;13;/**  * Tests vertical composition. First pointcut matches all setters.  * Second one matches all getters in the MyTestBean class. TestBean getters shouldn't pass.  */ ;/**  * Tests vertical composition. First pointcut matches all setters.  * Second one matches all getters in the MyTestBean class. TestBean getters shouldn't pass.  */ @Test public void testUnionOfAllSettersAndSubclassSetters() {     assertFalse(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6))).     assertTrue(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_SET_AGE, MyTestBean.class, new Integer(6))).     assertFalse(Pointcuts.matches(myTestBeanSetterPointcut, TEST_BEAN_GET_AGE, TestBean.class)).     Pointcut union = Pointcuts.union(myTestBeanSetterPointcut, allClassGetterPointcut).     assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class)).     assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBean.class)).     // Still doesn't match superclass setter     assertTrue(Pointcuts.matches(union, TEST_BEAN_SET_AGE, MyTestBean.class, new Integer(6))).     assertFalse(Pointcuts.matches(union, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6))). }
true;public;0;41;/**  * Intersection should be MyTestBean getAge() only:  * it's the union of allClassGetAge and subclass getters  */ ;/**  * Intersection should be MyTestBean getAge() only:  * it's the union of allClassGetAge and subclass getters  */ @Test public void testIntersectionOfSpecificGettersAndSubclassGetters() {     assertTrue(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_AGE, TestBean.class)).     assertTrue(Pointcuts.matches(allClassGetAgePointcut, TEST_BEAN_GET_AGE, MyTestBean.class)).     assertFalse(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_NAME, TestBean.class)).     assertFalse(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_AGE, TestBean.class)).     assertTrue(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_NAME, MyTestBean.class)).     assertTrue(Pointcuts.matches(myTestBeanGetterPointcut, TEST_BEAN_GET_AGE, MyTestBean.class)).     Pointcut intersection = Pointcuts.intersection(allClassGetAgePointcut, myTestBeanGetterPointcut).     assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, TestBean.class)).     assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class)).     assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBean.class)).     assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBean.class)).     // Matches subclass of MyTestBean     assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class)).     assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class)).     // Now intersection with MyTestBeanSubclass getters should eliminate MyTestBean target     intersection = Pointcuts.intersection(intersection, myTestBeanSubclassGetterPointcut).     assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, TestBean.class)).     assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class)).     assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBean.class)).     assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBean.class)).     // Still matches subclass of MyTestBean     assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class)).     assertTrue(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class)).     // Now union with all TestBean methods     Pointcut union = Pointcuts.union(intersection, allTestBeanMethodsPointcut).     assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_NAME, TestBean.class)).     assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, TestBean.class)).     assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_NAME, MyTestBean.class)).     assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBean.class)).     // Still matches subclass of MyTestBean     assertFalse(Pointcuts.matches(union, TEST_BEAN_GET_NAME, MyTestBeanSubclass.class)).     assertTrue(Pointcuts.matches(union, TEST_BEAN_GET_AGE, MyTestBeanSubclass.class)).     assertTrue(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, TestBean.class)).     assertFalse(Pointcuts.matches(union, TEST_BEAN_ABSQUATULATE, MyTestBean.class)). }
true;public;0;7;/**  * The intersection of these two pointcuts leaves nothing.  */ ;/**  * The intersection of these two pointcuts leaves nothing.  */ @Test public void testSimpleIntersection() {     Pointcut intersection = Pointcuts.intersection(allClassGetterPointcut, allClassSetterPointcut).     assertFalse(Pointcuts.matches(intersection, TEST_BEAN_SET_AGE, TestBean.class, new Integer(6))).     assertFalse(Pointcuts.matches(intersection, TEST_BEAN_GET_AGE, TestBean.class)).     assertFalse(Pointcuts.matches(intersection, TEST_BEAN_ABSQUATULATE, TestBean.class)). }
