commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testManualProxyJavaWithUnconditionalPointcut() throws Exception {     TestService target = new TestServiceImpl().     LogUserAdvice logAdvice = new LogUserAdvice().     testAdvice(new DefaultPointcutAdvisor(logAdvice), logAdvice, target, "TestServiceImpl"). }
false;public;0;8;;@Test public void testManualProxyJavaWithStaticPointcut() throws Exception {     TestService target = new TestServiceImpl().     LogUserAdvice logAdvice = new LogUserAdvice().     AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut().     pointcut.setExpression(String.format("execution(* %s.TestService.*(..))", getClass().getName())).     testAdvice(new DefaultPointcutAdvisor(pointcut, logAdvice), logAdvice, target, "TestServiceImpl"). }
false;public;0;8;;@Test public void testManualProxyJavaWithDynamicPointcut() throws Exception {     TestService target = new TestServiceImpl().     LogUserAdvice logAdvice = new LogUserAdvice().     AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut().     pointcut.setExpression(String.format("@within(%s.Log)", getClass().getName())).     testAdvice(new DefaultPointcutAdvisor(pointcut, logAdvice), logAdvice, target, "TestServiceImpl"). }
false;public;0;8;;@Test public void testManualProxyJavaWithDynamicPointcutAndProxyTargetClass() throws Exception {     TestService target = new TestServiceImpl().     LogUserAdvice logAdvice = new LogUserAdvice().     AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut().     pointcut.setExpression(String.format("@within(%s.Log)", getClass().getName())).     testAdvice(new DefaultPointcutAdvisor(pointcut, logAdvice), logAdvice, target, "TestServiceImpl", true). }
false;public;0;19;;@Test public void testManualProxyJavaWithStaticPointcutAndTwoClassLoaders() throws Exception {     LogUserAdvice logAdvice = new LogUserAdvice().     AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut().     pointcut.setExpression(String.format("execution(* %s.TestService.*(..))", getClass().getName())).     // Test with default class loader first...     testAdvice(new DefaultPointcutAdvisor(pointcut, logAdvice), logAdvice, new TestServiceImpl(), "TestServiceImpl").     // Then try again with a different class loader on the target...     SimpleThrowawayClassLoader loader = new SimpleThrowawayClassLoader(new TestServiceImpl().getClass().getClassLoader()).     // Make sure the interface is loaded from the  parent class loader     loader.excludeClass(TestService.class.getName()).     loader.excludeClass(TestException.class.getName()).     TestService other = (TestService) loader.loadClass(TestServiceImpl.class.getName()).newInstance().     testAdvice(new DefaultPointcutAdvisor(pointcut, logAdvice), logAdvice, other, "TestServiceImpl"). }
false;private;4;4;;private void testAdvice(Advisor advisor, LogUserAdvice logAdvice, TestService target, String message) throws Exception {     testAdvice(advisor, logAdvice, target, message, false). }
false;private;5;20;;private void testAdvice(Advisor advisor, LogUserAdvice logAdvice, TestService target, String message, boolean proxyTargetClass) throws Exception {     logAdvice.reset().     ProxyFactory factory = new ProxyFactory(target).     factory.setProxyTargetClass(proxyTargetClass).     factory.addAdvisor(advisor).     TestService bean = (TestService) factory.getProxy().     assertEquals(0, logAdvice.getCountThrows()).     try {         bean.sayHello().         fail("Expected exception").     } catch (TestException ex) {         assertEquals(message, ex.getMessage()).     }     assertEquals(1, logAdvice.getCountThrows()). }
false;public;0;1;;public String sayHello().
false;public;0;4;;@Override public String sayHello() {     throw new TestException("TestServiceImpl"). }
false;public;3;4;;@Override public void before(Method method, Object[] objects, @Nullable Object o) throws Throwable {     countBefore++. }
false;public;1;4;;public void afterThrowing(Exception ex) throws Throwable {     countThrows++.     throw ex. }
false;public;0;3;;public int getCountBefore() {     return countBefore. }
false;public;0;3;;public int getCountThrows() {     return countThrows. }
false;public;0;4;;public void reset() {     countThrows = 0.     countBefore = 0. }
