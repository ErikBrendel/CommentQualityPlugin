commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test(expected = IllegalArgumentException.class) public void testBindingInPointcutUsedByAdvice() {     TestBean tb = new TestBean().     AspectJProxyFactory proxyFactory = new AspectJProxyFactory(tb).     proxyFactory.addAspect(NamedPointcutWithArgs.class).     ITestBean proxiedTestBean = proxyFactory.getProxy().     proxiedTestBean.setName("Supercalifragalisticexpialidocious"). }
false;public;0;9;;@Test(expected = IllegalStateException.class) public void testAnnotationArgumentNameBinding() {     TransactionalBean tb = new TransactionalBean().     AspectJProxyFactory proxyFactory = new AspectJProxyFactory(tb).     proxyFactory.addAspect(PointcutWithAnnotationArgument.class).     ITransactionalBean proxiedTestBean = proxyFactory.getProxy().     proxiedTestBean.doInTransaction(). }
false;public;0;11;;@Test public void testParameterNameDiscoverWithReferencePointcut() throws Exception {     AspectJAdviceParameterNameDiscoverer discoverer = new AspectJAdviceParameterNameDiscoverer("somepc(formal) && set(* *)").     discoverer.setRaiseExceptions(true).     Method methodUsedForParameterTypeDiscovery = getClass().getMethod("methodWithOneParam", String.class).     String[] pnames = discoverer.getParameterNames(methodUsedForParameterTypeDiscovery).     assertEquals("one parameter name", 1, pnames.length).     assertEquals("formal", pnames[0]). }
false;public;1;2;;public void methodWithOneParam(String aParam) { }
false;;0;2;;@Transactional void doInTransaction().
false;public;0;4;;@Override @Transactional public void doInTransaction() { }
false;public;2;5;;@Around(value = "execution(* org.springframework..*.*(..)) && @annotation(transaction)") public Object around(ProceedingJoinPoint pjp, Transactional transaction) throws Throwable {     System.out.println("Invoked with transaction " + transaction).     throw new IllegalStateException(). }
false;public;1;2;;@Pointcut("execution(* *(..)) && args(s,..)") public void pointcutWithArgs(String s) { }
false;public;2;5;;@Around("pointcutWithArgs(aString)") public Object doAround(ProceedingJoinPoint pjp, String aString) throws Throwable {     System.out.println("got '" + aString + "' at '" + pjp + "'").     throw new IllegalArgumentException(aString). }
