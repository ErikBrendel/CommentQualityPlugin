commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void testInvalidPattern() {     // should throw - pattern must be recognized as invalid     new TypePatternClassFilter("-"). }
false;public;0;10;;@Test public void testValidPatternMatching() {     TypePatternClassFilter tpcf = new TypePatternClassFilter("org.springframework.tests.sample.beans.*").     assertTrue("Must match: in package", tpcf.matches(TestBean.class)).     assertTrue("Must match: in package", tpcf.matches(ITestBean.class)).     assertTrue("Must match: in package", tpcf.matches(IOther.class)).     assertFalse("Must be excluded: in wrong package", tpcf.matches(DeepBean.class)).     assertFalse("Must be excluded: in wrong package", tpcf.matches(BeanFactory.class)).     assertFalse("Must be excluded: in wrong package", tpcf.matches(DefaultListableBeanFactory.class)). }
false;public;0;9;;@Test public void testSubclassMatching() {     TypePatternClassFilter tpcf = new TypePatternClassFilter("org.springframework.tests.sample.beans.ITestBean+").     assertTrue("Must match: in package", tpcf.matches(TestBean.class)).     assertTrue("Must match: in package", tpcf.matches(ITestBean.class)).     assertTrue("Must match: in package", tpcf.matches(CountingTestBean.class)).     assertFalse("Must be excluded: not subclass", tpcf.matches(IOther.class)).     assertFalse("Must be excluded: not subclass", tpcf.matches(DefaultListableBeanFactory.class)). }
false;public;0;13;;@Test public void testAndOrNotReplacement() {     TypePatternClassFilter tpcf = new TypePatternClassFilter("java.lang.Object or java.lang.String").     assertFalse("matches Number", tpcf.matches(Number.class)).     assertTrue("matches Object", tpcf.matches(Object.class)).     assertTrue("matchesString", tpcf.matches(String.class)).     tpcf = new TypePatternClassFilter("java.lang.Number+ and java.lang.Float").     assertTrue("matches Float", tpcf.matches(Float.class)).     assertFalse("matches Double", tpcf.matches(Double.class)).     tpcf = new TypePatternClassFilter("java.lang.Number+ and not java.lang.Float").     assertFalse("matches Float", tpcf.matches(Float.class)).     assertTrue("matches Double", tpcf.matches(Double.class)). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testSetTypePatternWithNullArgument() throws Exception {     new TypePatternClassFilter(null). }
false;public;0;4;;@Test(expected = IllegalStateException.class) public void testInvocationOfMatchesMethodBlowsUpWhenNoTypePatternHasBeenSet() throws Exception {     new TypePatternClassFilter().matches(String.class). }
