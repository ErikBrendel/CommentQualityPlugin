commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;3;;protected void count(Method m) {     count(m.getName()). }
false;protected;1;6;;protected void count(String methodName) {     Integer i = map.get(methodName).     i = (i != null) ? new Integer(i.intValue() + 1) : new Integer(1).     map.put(methodName, i).     ++allCount. }
false;public;1;4;;public int getCalls(String methodName) {     Integer i = map.get(methodName).     return (i != null ? i.intValue() : 0). }
false;public;0;3;;public int getCalls() {     return allCount. }
true;public;1;4;/**  * A bit simplistic: just wants the same class.  * Doesn't worry about counts.  * @see java.lang.Object#equals(java.lang.Object)  */ ;/**  * A bit simplistic: just wants the same class.  * Doesn't worry about counts.  * @see java.lang.Object#equals(java.lang.Object)  */ @Override public boolean equals(Object other) {     return (other != null && other.getClass() == this.getClass()). }
false;public;0;4;;@Override public int hashCode() {     return getClass().hashCode(). }
