# id;timestamp;commentText;codeText;commentWords;codeWords
ControlFlowPointcutTests -> @Test 	public void testSelectiveApplication();1328020251;Check that we can use a cflow pointcut only in conjunction with_a static pointcut: e.g. all setter methods that are invoked under_a particular class. This greatly reduces the number of calls_to the cflow pointcut, meaning that it's not so prohibitively_expensive.;@Test_	public void testSelectiveApplication() {_		TestBean target = new TestBean()__		target.setAge(27)__		NopInterceptor nop = new NopInterceptor()__		ControlFlowPointcut cflow = new ControlFlowPointcut(One.class)__		Pointcut settersUnderOne = Pointcuts.intersection(Pointcuts.SETTERS, cflow)__		ProxyFactory pf = new ProxyFactory(target)__		ITestBean proxied = (ITestBean) pf.getProxy()__		pf.addAdvisor(new DefaultPointcutAdvisor(settersUnderOne, nop))__	_		_		target.setAge(16)__		assertEquals(0, nop.getCount())__	_		_		assertEquals(16, new One().getAge(proxied))__		assertEquals(0, nop.getCount())__	_		_		new One().set(proxied)__		assertEquals(1, nop.getCount())__		_		_		assertEquals(1, cflow.getEvaluations())__	};check,that,we,can,use,a,cflow,pointcut,only,in,conjunction,with,a,static,pointcut,e,g,all,setter,methods,that,are,invoked,under,a,particular,class,this,greatly,reduces,the,number,of,calls,to,the,cflow,pointcut,meaning,that,it,s,not,so,prohibitively,expensive;test,public,void,test,selective,application,test,bean,target,new,test,bean,target,set,age,27,nop,interceptor,nop,new,nop,interceptor,control,flow,pointcut,cflow,new,control,flow,pointcut,one,class,pointcut,setters,under,one,pointcuts,intersection,pointcuts,setters,cflow,proxy,factory,pf,new,proxy,factory,target,itest,bean,proxied,itest,bean,pf,get,proxy,pf,add,advisor,new,default,pointcut,advisor,setters,under,one,nop,target,set,age,16,assert,equals,0,nop,get,count,assert,equals,16,new,one,get,age,proxied,assert,equals,0,nop,get,count,new,one,set,proxied,assert,equals,1,nop,get,count,assert,equals,1,cflow,get,evaluations
ControlFlowPointcutTests -> @Test 	public void testSelectiveApplication();1356735495;Check that we can use a cflow pointcut only in conjunction with_a static pointcut: e.g. all setter methods that are invoked under_a particular class. This greatly reduces the number of calls_to the cflow pointcut, meaning that it's not so prohibitively_expensive.;@Test_	public void testSelectiveApplication() {_		TestBean target = new TestBean()__		target.setAge(27)__		NopInterceptor nop = new NopInterceptor()__		ControlFlowPointcut cflow = new ControlFlowPointcut(One.class)__		Pointcut settersUnderOne = Pointcuts.intersection(Pointcuts.SETTERS, cflow)__		ProxyFactory pf = new ProxyFactory(target)__		ITestBean proxied = (ITestBean) pf.getProxy()__		pf.addAdvisor(new DefaultPointcutAdvisor(settersUnderOne, nop))___		_		target.setAge(16)__		assertEquals(0, nop.getCount())___		_		assertEquals(16, new One().getAge(proxied))__		assertEquals(0, nop.getCount())___		_		new One().set(proxied)__		assertEquals(1, nop.getCount())___		_		assertEquals(1, cflow.getEvaluations())__	};check,that,we,can,use,a,cflow,pointcut,only,in,conjunction,with,a,static,pointcut,e,g,all,setter,methods,that,are,invoked,under,a,particular,class,this,greatly,reduces,the,number,of,calls,to,the,cflow,pointcut,meaning,that,it,s,not,so,prohibitively,expensive;test,public,void,test,selective,application,test,bean,target,new,test,bean,target,set,age,27,nop,interceptor,nop,new,nop,interceptor,control,flow,pointcut,cflow,new,control,flow,pointcut,one,class,pointcut,setters,under,one,pointcuts,intersection,pointcuts,setters,cflow,proxy,factory,pf,new,proxy,factory,target,itest,bean,proxied,itest,bean,pf,get,proxy,pf,add,advisor,new,default,pointcut,advisor,setters,under,one,nop,target,set,age,16,assert,equals,0,nop,get,count,assert,equals,16,new,one,get,age,proxied,assert,equals,0,nop,get,count,new,one,set,proxied,assert,equals,1,nop,get,count,assert,equals,1,cflow,get,evaluations
ControlFlowPointcutTests -> @Test 	public void testSelectiveApplication();1362408075;Check that we can use a cflow pointcut only in conjunction with_a static pointcut: e.g. all setter methods that are invoked under_a particular class. This greatly reduces the number of calls_to the cflow pointcut, meaning that it's not so prohibitively_expensive.;@Test_	public void testSelectiveApplication() {_		TestBean target = new TestBean()__		target.setAge(27)__		NopInterceptor nop = new NopInterceptor()__		ControlFlowPointcut cflow = new ControlFlowPointcut(One.class)__		Pointcut settersUnderOne = Pointcuts.intersection(Pointcuts.SETTERS, cflow)__		ProxyFactory pf = new ProxyFactory(target)__		ITestBean proxied = (ITestBean) pf.getProxy()__		pf.addAdvisor(new DefaultPointcutAdvisor(settersUnderOne, nop))___		_		target.setAge(16)__		assertEquals(0, nop.getCount())___		_		assertEquals(16, new One().getAge(proxied))__		assertEquals(0, nop.getCount())___		_		new One().set(proxied)__		assertEquals(1, nop.getCount())___		_		assertEquals(1, cflow.getEvaluations())__	};check,that,we,can,use,a,cflow,pointcut,only,in,conjunction,with,a,static,pointcut,e,g,all,setter,methods,that,are,invoked,under,a,particular,class,this,greatly,reduces,the,number,of,calls,to,the,cflow,pointcut,meaning,that,it,s,not,so,prohibitively,expensive;test,public,void,test,selective,application,test,bean,target,new,test,bean,target,set,age,27,nop,interceptor,nop,new,nop,interceptor,control,flow,pointcut,cflow,new,control,flow,pointcut,one,class,pointcut,setters,under,one,pointcuts,intersection,pointcuts,setters,cflow,proxy,factory,pf,new,proxy,factory,target,itest,bean,proxied,itest,bean,pf,get,proxy,pf,add,advisor,new,default,pointcut,advisor,setters,under,one,nop,target,set,age,16,assert,equals,0,nop,get,count,assert,equals,16,new,one,get,age,proxied,assert,equals,0,nop,get,count,new,one,set,proxied,assert,equals,1,nop,get,count,assert,equals,1,cflow,get,evaluations
ControlFlowPointcutTests -> @Test 	public void testSelectiveApplication();1385507683;Check that we can use a cflow pointcut only in conjunction with_a static pointcut: e.g. all setter methods that are invoked under_a particular class. This greatly reduces the number of calls_to the cflow pointcut, meaning that it's not so prohibitively_expensive.;@Test_	public void testSelectiveApplication() {_		TestBean target = new TestBean()__		target.setAge(27)__		NopInterceptor nop = new NopInterceptor()__		ControlFlowPointcut cflow = new ControlFlowPointcut(One.class)__		Pointcut settersUnderOne = Pointcuts.intersection(Pointcuts.SETTERS, cflow)__		ProxyFactory pf = new ProxyFactory(target)__		ITestBean proxied = (ITestBean) pf.getProxy()__		pf.addAdvisor(new DefaultPointcutAdvisor(settersUnderOne, nop))___		_		target.setAge(16)__		assertEquals(0, nop.getCount())___		_		assertEquals(16, new One().getAge(proxied))__		assertEquals(0, nop.getCount())___		_		new One().set(proxied)__		assertEquals(1, nop.getCount())___		_		assertEquals(1, cflow.getEvaluations())__	};check,that,we,can,use,a,cflow,pointcut,only,in,conjunction,with,a,static,pointcut,e,g,all,setter,methods,that,are,invoked,under,a,particular,class,this,greatly,reduces,the,number,of,calls,to,the,cflow,pointcut,meaning,that,it,s,not,so,prohibitively,expensive;test,public,void,test,selective,application,test,bean,target,new,test,bean,target,set,age,27,nop,interceptor,nop,new,nop,interceptor,control,flow,pointcut,cflow,new,control,flow,pointcut,one,class,pointcut,setters,under,one,pointcuts,intersection,pointcuts,setters,cflow,proxy,factory,pf,new,proxy,factory,target,itest,bean,proxied,itest,bean,pf,get,proxy,pf,add,advisor,new,default,pointcut,advisor,setters,under,one,nop,target,set,age,16,assert,equals,0,nop,get,count,assert,equals,16,new,one,get,age,proxied,assert,equals,0,nop,get,count,new,one,set,proxied,assert,equals,1,nop,get,count,assert,equals,1,cflow,get,evaluations
ControlFlowPointcutTests -> @Test 	public void testSelectiveApplication();1413848647;Check that we can use a cflow pointcut only in conjunction with_a static pointcut: e.g. all setter methods that are invoked under_a particular class. This greatly reduces the number of calls_to the cflow pointcut, meaning that it's not so prohibitively_expensive.;@Test_	public void testSelectiveApplication() {_		TestBean target = new TestBean()__		target.setAge(27)__		NopInterceptor nop = new NopInterceptor()__		ControlFlowPointcut cflow = new ControlFlowPointcut(One.class)__		Pointcut settersUnderOne = Pointcuts.intersection(Pointcuts.SETTERS, cflow)__		ProxyFactory pf = new ProxyFactory(target)__		ITestBean proxied = (ITestBean) pf.getProxy()__		pf.addAdvisor(new DefaultPointcutAdvisor(settersUnderOne, nop))___		_		target.setAge(16)__		assertEquals(0, nop.getCount())___		_		assertEquals(16, new One().getAge(proxied))__		assertEquals(0, nop.getCount())___		_		new One().set(proxied)__		assertEquals(1, nop.getCount())___		_		assertEquals(1, cflow.getEvaluations())__	};check,that,we,can,use,a,cflow,pointcut,only,in,conjunction,with,a,static,pointcut,e,g,all,setter,methods,that,are,invoked,under,a,particular,class,this,greatly,reduces,the,number,of,calls,to,the,cflow,pointcut,meaning,that,it,s,not,so,prohibitively,expensive;test,public,void,test,selective,application,test,bean,target,new,test,bean,target,set,age,27,nop,interceptor,nop,new,nop,interceptor,control,flow,pointcut,cflow,new,control,flow,pointcut,one,class,pointcut,setters,under,one,pointcuts,intersection,pointcuts,setters,cflow,proxy,factory,pf,new,proxy,factory,target,itest,bean,proxied,itest,bean,pf,get,proxy,pf,add,advisor,new,default,pointcut,advisor,setters,under,one,nop,target,set,age,16,assert,equals,0,nop,get,count,assert,equals,16,new,one,get,age,proxied,assert,equals,0,nop,get,count,new,one,set,proxied,assert,equals,1,nop,get,count,assert,equals,1,cflow,get,evaluations
ControlFlowPointcutTests -> @Test 	public void testSelectiveApplication();1469546119;Check that we can use a cflow pointcut only in conjunction with_a static pointcut: e.g. all setter methods that are invoked under_a particular class. This greatly reduces the number of calls_to the cflow pointcut, meaning that it's not so prohibitively_expensive.;@Test_	public void testSelectiveApplication() {_		TestBean target = new TestBean()__		target.setAge(27)__		NopInterceptor nop = new NopInterceptor()__		ControlFlowPointcut cflow = new ControlFlowPointcut(One.class)__		Pointcut settersUnderOne = Pointcuts.intersection(Pointcuts.SETTERS, cflow)__		ProxyFactory pf = new ProxyFactory(target)__		ITestBean proxied = (ITestBean) pf.getProxy()__		pf.addAdvisor(new DefaultPointcutAdvisor(settersUnderOne, nop))___		_		target.setAge(16)__		assertEquals(0, nop.getCount())___		_		assertEquals(16, new One().getAge(proxied))__		assertEquals(0, nop.getCount())___		_		new One().set(proxied)__		assertEquals(1, nop.getCount())___		_		assertEquals(1, cflow.getEvaluations())__	};check,that,we,can,use,a,cflow,pointcut,only,in,conjunction,with,a,static,pointcut,e,g,all,setter,methods,that,are,invoked,under,a,particular,class,this,greatly,reduces,the,number,of,calls,to,the,cflow,pointcut,meaning,that,it,s,not,so,prohibitively,expensive;test,public,void,test,selective,application,test,bean,target,new,test,bean,target,set,age,27,nop,interceptor,nop,new,nop,interceptor,control,flow,pointcut,cflow,new,control,flow,pointcut,one,class,pointcut,setters,under,one,pointcuts,intersection,pointcuts,setters,cflow,proxy,factory,pf,new,proxy,factory,target,itest,bean,proxied,itest,bean,pf,get,proxy,pf,add,advisor,new,default,pointcut,advisor,setters,under,one,nop,target,set,age,16,assert,equals,0,nop,get,count,assert,equals,16,new,one,get,age,proxied,assert,equals,0,nop,get,count,new,one,set,proxied,assert,equals,1,nop,get,count,assert,equals,1,cflow,get,evaluations
