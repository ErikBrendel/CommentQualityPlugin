commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void testWithNonAspect() {     AspectJProxyFactory proxyFactory = new AspectJProxyFactory(new TestBean()).     proxyFactory.addAspect(TestBean.class). }
false;public;0;9;;@Test public void testWithSimpleAspect() throws Exception {     TestBean bean = new TestBean().     bean.setAge(2).     AspectJProxyFactory proxyFactory = new AspectJProxyFactory(bean).     proxyFactory.addAspect(MultiplyReturnValue.class).     ITestBean proxy = proxyFactory.getProxy().     assertEquals("Multiplication did not occur", bean.getAge() * 2, proxy.getAge()). }
false;public;0;19;;@Test public void testWithPerThisAspect() throws Exception {     TestBean bean1 = new TestBean().     TestBean bean2 = new TestBean().     AspectJProxyFactory pf1 = new AspectJProxyFactory(bean1).     pf1.addAspect(PerThisAspect.class).     AspectJProxyFactory pf2 = new AspectJProxyFactory(bean2).     pf2.addAspect(PerThisAspect.class).     ITestBean proxy1 = pf1.getProxy().     ITestBean proxy2 = pf2.getProxy().     assertEquals(0, proxy1.getAge()).     assertEquals(1, proxy1.getAge()).     assertEquals(0, proxy2.getAge()).     assertEquals(2, proxy1.getAge()). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void testWithInstanceWithNonAspect() throws Exception {     AspectJProxyFactory pf = new AspectJProxyFactory().     pf.addAspect(new TestBean()). }
false;public;0;10;;@Test @SuppressWarnings("unchecked") public void testSerializable() throws Exception {     AspectJProxyFactory proxyFactory = new AspectJProxyFactory(new TestBean()).     proxyFactory.addAspect(LoggingAspectOnVarargs.class).     ITestBean proxy = proxyFactory.getProxy().     assertTrue(proxy.doWithVarargs(MyEnum.A, MyOtherEnum.C)).     ITestBean tb = (ITestBean) SerializationTestUtils.serializeAndDeserialize(proxy).     assertTrue(tb.doWithVarargs(MyEnum.A, MyOtherEnum.C)). }
false;public;0;19;;@Test @SuppressWarnings("unchecked") public void testWithInstance() throws Exception {     MultiplyReturnValue aspect = new MultiplyReturnValue().     int multiple = 3.     aspect.setMultiple(multiple).     TestBean target = new TestBean().     target.setAge(24).     AspectJProxyFactory proxyFactory = new AspectJProxyFactory(target).     proxyFactory.addAspect(aspect).     ITestBean proxy = proxyFactory.getProxy().     assertEquals(target.getAge() * multiple, proxy.getAge()).     ITestBean serializedProxy = (ITestBean) SerializationTestUtils.serializeAndDeserialize(proxy).     assertEquals(target.getAge() * multiple, serializedProxy.getAge()). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void testWithNonSingletonAspectInstance() throws Exception {     AspectJProxyFactory pf = new AspectJProxyFactory().     pf.addAspect(new PerThisAspect()). }
false;public;0;8;;// SPR-13328 @Test @SuppressWarnings("unchecked") public void testProxiedVarargsWithEnumArray() throws Exception {     AspectJProxyFactory proxyFactory = new AspectJProxyFactory(new TestBean()).     proxyFactory.addAspect(LoggingAspectOnVarargs.class).     ITestBean proxy = proxyFactory.getProxy().     assertTrue(proxy.doWithVarargs(MyEnum.A, MyOtherEnum.C)). }
false;public;0;8;;// SPR-13328 @Test @SuppressWarnings("unchecked") public void testUnproxiedVarargsWithEnumArray() throws Exception {     AspectJProxyFactory proxyFactory = new AspectJProxyFactory(new TestBean()).     proxyFactory.addAspect(LoggingAspectOnSetter.class).     ITestBean proxy = proxyFactory.getProxy().     assertTrue(proxy.doWithVarargs(MyEnum.A, MyOtherEnum.C)). }
false;;0;1;;int getAge().
false;;1;2;;@SuppressWarnings("unchecked") <V extends MyInterface> boolean doWithVarargs(V... args).
false;public;0;4;;@Override public int getAge() {     return age. }
false;public;1;3;;public void setAge(int age) {     this.age = age. }
false;public;1;5;;@SuppressWarnings("unchecked") @Override public <V extends MyInterface> boolean doWithVarargs(V... args) {     return true. }
false;public;1;5;;@Around("execution(* doWithVarargs(*))") public Object doLog(ProceedingJoinPoint pjp) throws Throwable {     LogFactory.getLog(LoggingAspectOnVarargs.class).debug(Arrays.asList(pjp.getArgs())).     return pjp.proceed(). }
false;public;1;5;;@Around("execution(* setAge(*))") public Object doLog(ProceedingJoinPoint pjp) throws Throwable {     LogFactory.getLog(LoggingAspectOnSetter.class).debug(Arrays.asList(pjp.getArgs())).     return pjp.proceed(). }
false;public;1;3;;public void setMultiple(int multiple) {     this.multiple = multiple. }
false;public;0;3;;public int getMultiple() {     return this.multiple. }
false;public;1;6;;@Around("execution(int *.getAge())") public Object doubleReturnValue(ProceedingJoinPoint pjp) throws Throwable {     ++this.invocations.     int result = (Integer) pjp.proceed().     return result * this.multiple. }
