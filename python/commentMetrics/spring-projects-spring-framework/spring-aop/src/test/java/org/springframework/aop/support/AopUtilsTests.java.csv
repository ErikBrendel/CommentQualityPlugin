# id;timestamp;commentText;codeText;commentWords;codeWords
AopUtilsTests -> @Test 	public void testCanonicalFrameworkClassesStillCanonicalOnDeserialization() throws Exception;1328020251;Test that when we serialize and deserialize various canonical instances_of AOP classes, they return the same instance, not a new instance_that's subverted the singleton construction limitation.;@Test_	public void testCanonicalFrameworkClassesStillCanonicalOnDeserialization() throws Exception {_		assertSame(MethodMatcher.TRUE, SerializationTestUtils.serializeAndDeserialize(MethodMatcher.TRUE))__		assertSame(ClassFilter.TRUE, SerializationTestUtils.serializeAndDeserialize(ClassFilter.TRUE))__		assertSame(Pointcut.TRUE, SerializationTestUtils.serializeAndDeserialize(Pointcut.TRUE))__		assertSame(EmptyTargetSource.INSTANCE, SerializationTestUtils.serializeAndDeserialize(EmptyTargetSource.INSTANCE))__		assertSame(Pointcuts.SETTERS, SerializationTestUtils.serializeAndDeserialize(Pointcuts.SETTERS))__		assertSame(Pointcuts.GETTERS, SerializationTestUtils.serializeAndDeserialize(Pointcuts.GETTERS))__		assertSame(ExposeInvocationInterceptor.INSTANCE,_				SerializationTestUtils.serializeAndDeserialize(ExposeInvocationInterceptor.INSTANCE))__	};test,that,when,we,serialize,and,deserialize,various,canonical,instances,of,aop,classes,they,return,the,same,instance,not,a,new,instance,that,s,subverted,the,singleton,construction,limitation;test,public,void,test,canonical,framework,classes,still,canonical,on,deserialization,throws,exception,assert,same,method,matcher,true,serialization,test,utils,serialize,and,deserialize,method,matcher,true,assert,same,class,filter,true,serialization,test,utils,serialize,and,deserialize,class,filter,true,assert,same,pointcut,true,serialization,test,utils,serialize,and,deserialize,pointcut,true,assert,same,empty,target,source,instance,serialization,test,utils,serialize,and,deserialize,empty,target,source,instance,assert,same,pointcuts,setters,serialization,test,utils,serialize,and,deserialize,pointcuts,setters,assert,same,pointcuts,getters,serialization,test,utils,serialize,and,deserialize,pointcuts,getters,assert,same,expose,invocation,interceptor,instance,serialization,test,utils,serialize,and,deserialize,expose,invocation,interceptor,instance
AopUtilsTests -> @Test 	public void testCanonicalFrameworkClassesStillCanonicalOnDeserialization() throws Exception;1356735495;Test that when we serialize and deserialize various canonical instances_of AOP classes, they return the same instance, not a new instance_that's subverted the singleton construction limitation.;@Test_	public void testCanonicalFrameworkClassesStillCanonicalOnDeserialization() throws Exception {_		assertSame(MethodMatcher.TRUE, SerializationTestUtils.serializeAndDeserialize(MethodMatcher.TRUE))__		assertSame(ClassFilter.TRUE, SerializationTestUtils.serializeAndDeserialize(ClassFilter.TRUE))__		assertSame(Pointcut.TRUE, SerializationTestUtils.serializeAndDeserialize(Pointcut.TRUE))__		assertSame(EmptyTargetSource.INSTANCE, SerializationTestUtils.serializeAndDeserialize(EmptyTargetSource.INSTANCE))__		assertSame(Pointcuts.SETTERS, SerializationTestUtils.serializeAndDeserialize(Pointcuts.SETTERS))__		assertSame(Pointcuts.GETTERS, SerializationTestUtils.serializeAndDeserialize(Pointcuts.GETTERS))__		assertSame(ExposeInvocationInterceptor.INSTANCE,_				SerializationTestUtils.serializeAndDeserialize(ExposeInvocationInterceptor.INSTANCE))__	};test,that,when,we,serialize,and,deserialize,various,canonical,instances,of,aop,classes,they,return,the,same,instance,not,a,new,instance,that,s,subverted,the,singleton,construction,limitation;test,public,void,test,canonical,framework,classes,still,canonical,on,deserialization,throws,exception,assert,same,method,matcher,true,serialization,test,utils,serialize,and,deserialize,method,matcher,true,assert,same,class,filter,true,serialization,test,utils,serialize,and,deserialize,class,filter,true,assert,same,pointcut,true,serialization,test,utils,serialize,and,deserialize,pointcut,true,assert,same,empty,target,source,instance,serialization,test,utils,serialize,and,deserialize,empty,target,source,instance,assert,same,pointcuts,setters,serialization,test,utils,serialize,and,deserialize,pointcuts,setters,assert,same,pointcuts,getters,serialization,test,utils,serialize,and,deserialize,pointcuts,getters,assert,same,expose,invocation,interceptor,instance,serialization,test,utils,serialize,and,deserialize,expose,invocation,interceptor,instance
AopUtilsTests -> @Test 	public void testCanonicalFrameworkClassesStillCanonicalOnDeserialization() throws Exception;1362408075;Test that when we serialize and deserialize various canonical instances_of AOP classes, they return the same instance, not a new instance_that's subverted the singleton construction limitation.;@Test_	public void testCanonicalFrameworkClassesStillCanonicalOnDeserialization() throws Exception {_		assertSame(MethodMatcher.TRUE, SerializationTestUtils.serializeAndDeserialize(MethodMatcher.TRUE))__		assertSame(ClassFilter.TRUE, SerializationTestUtils.serializeAndDeserialize(ClassFilter.TRUE))__		assertSame(Pointcut.TRUE, SerializationTestUtils.serializeAndDeserialize(Pointcut.TRUE))__		assertSame(EmptyTargetSource.INSTANCE, SerializationTestUtils.serializeAndDeserialize(EmptyTargetSource.INSTANCE))__		assertSame(Pointcuts.SETTERS, SerializationTestUtils.serializeAndDeserialize(Pointcuts.SETTERS))__		assertSame(Pointcuts.GETTERS, SerializationTestUtils.serializeAndDeserialize(Pointcuts.GETTERS))__		assertSame(ExposeInvocationInterceptor.INSTANCE,_				SerializationTestUtils.serializeAndDeserialize(ExposeInvocationInterceptor.INSTANCE))__	};test,that,when,we,serialize,and,deserialize,various,canonical,instances,of,aop,classes,they,return,the,same,instance,not,a,new,instance,that,s,subverted,the,singleton,construction,limitation;test,public,void,test,canonical,framework,classes,still,canonical,on,deserialization,throws,exception,assert,same,method,matcher,true,serialization,test,utils,serialize,and,deserialize,method,matcher,true,assert,same,class,filter,true,serialization,test,utils,serialize,and,deserialize,class,filter,true,assert,same,pointcut,true,serialization,test,utils,serialize,and,deserialize,pointcut,true,assert,same,empty,target,source,instance,serialization,test,utils,serialize,and,deserialize,empty,target,source,instance,assert,same,pointcuts,setters,serialization,test,utils,serialize,and,deserialize,pointcuts,setters,assert,same,pointcuts,getters,serialization,test,utils,serialize,and,deserialize,pointcuts,getters,assert,same,expose,invocation,interceptor,instance,serialization,test,utils,serialize,and,deserialize,expose,invocation,interceptor,instance
AopUtilsTests -> @Test 	public void testCanonicalFrameworkClassesStillCanonicalOnDeserialization() throws Exception;1385507683;Test that when we serialize and deserialize various canonical instances_of AOP classes, they return the same instance, not a new instance_that's subverted the singleton construction limitation.;@Test_	public void testCanonicalFrameworkClassesStillCanonicalOnDeserialization() throws Exception {_		assertSame(MethodMatcher.TRUE, SerializationTestUtils.serializeAndDeserialize(MethodMatcher.TRUE))__		assertSame(ClassFilter.TRUE, SerializationTestUtils.serializeAndDeserialize(ClassFilter.TRUE))__		assertSame(Pointcut.TRUE, SerializationTestUtils.serializeAndDeserialize(Pointcut.TRUE))__		assertSame(EmptyTargetSource.INSTANCE, SerializationTestUtils.serializeAndDeserialize(EmptyTargetSource.INSTANCE))__		assertSame(Pointcuts.SETTERS, SerializationTestUtils.serializeAndDeserialize(Pointcuts.SETTERS))__		assertSame(Pointcuts.GETTERS, SerializationTestUtils.serializeAndDeserialize(Pointcuts.GETTERS))__		assertSame(ExposeInvocationInterceptor.INSTANCE,_				SerializationTestUtils.serializeAndDeserialize(ExposeInvocationInterceptor.INSTANCE))__	};test,that,when,we,serialize,and,deserialize,various,canonical,instances,of,aop,classes,they,return,the,same,instance,not,a,new,instance,that,s,subverted,the,singleton,construction,limitation;test,public,void,test,canonical,framework,classes,still,canonical,on,deserialization,throws,exception,assert,same,method,matcher,true,serialization,test,utils,serialize,and,deserialize,method,matcher,true,assert,same,class,filter,true,serialization,test,utils,serialize,and,deserialize,class,filter,true,assert,same,pointcut,true,serialization,test,utils,serialize,and,deserialize,pointcut,true,assert,same,empty,target,source,instance,serialization,test,utils,serialize,and,deserialize,empty,target,source,instance,assert,same,pointcuts,setters,serialization,test,utils,serialize,and,deserialize,pointcuts,setters,assert,same,pointcuts,getters,serialization,test,utils,serialize,and,deserialize,pointcuts,getters,assert,same,expose,invocation,interceptor,instance,serialization,test,utils,serialize,and,deserialize,expose,invocation,interceptor,instance
AopUtilsTests -> @Test 	public void testCanonicalFrameworkClassesStillCanonicalOnDeserialization() throws Exception;1413848647;Test that when we serialize and deserialize various canonical instances_of AOP classes, they return the same instance, not a new instance_that's subverted the singleton construction limitation.;@Test_	public void testCanonicalFrameworkClassesStillCanonicalOnDeserialization() throws Exception {_		assertSame(MethodMatcher.TRUE, SerializationTestUtils.serializeAndDeserialize(MethodMatcher.TRUE))__		assertSame(ClassFilter.TRUE, SerializationTestUtils.serializeAndDeserialize(ClassFilter.TRUE))__		assertSame(Pointcut.TRUE, SerializationTestUtils.serializeAndDeserialize(Pointcut.TRUE))__		assertSame(EmptyTargetSource.INSTANCE, SerializationTestUtils.serializeAndDeserialize(EmptyTargetSource.INSTANCE))__		assertSame(Pointcuts.SETTERS, SerializationTestUtils.serializeAndDeserialize(Pointcuts.SETTERS))__		assertSame(Pointcuts.GETTERS, SerializationTestUtils.serializeAndDeserialize(Pointcuts.GETTERS))__		assertSame(ExposeInvocationInterceptor.INSTANCE,_				SerializationTestUtils.serializeAndDeserialize(ExposeInvocationInterceptor.INSTANCE))__	};test,that,when,we,serialize,and,deserialize,various,canonical,instances,of,aop,classes,they,return,the,same,instance,not,a,new,instance,that,s,subverted,the,singleton,construction,limitation;test,public,void,test,canonical,framework,classes,still,canonical,on,deserialization,throws,exception,assert,same,method,matcher,true,serialization,test,utils,serialize,and,deserialize,method,matcher,true,assert,same,class,filter,true,serialization,test,utils,serialize,and,deserialize,class,filter,true,assert,same,pointcut,true,serialization,test,utils,serialize,and,deserialize,pointcut,true,assert,same,empty,target,source,instance,serialization,test,utils,serialize,and,deserialize,empty,target,source,instance,assert,same,pointcuts,setters,serialization,test,utils,serialize,and,deserialize,pointcuts,setters,assert,same,pointcuts,getters,serialization,test,utils,serialize,and,deserialize,pointcuts,getters,assert,same,expose,invocation,interceptor,instance,serialization,test,utils,serialize,and,deserialize,expose,invocation,interceptor,instance
AopUtilsTests -> @Test 	public void testCanonicalFrameworkClassesStillCanonicalOnDeserialization() throws Exception;1469546119;Test that when we serialize and deserialize various canonical instances_of AOP classes, they return the same instance, not a new instance_that's subverted the singleton construction limitation.;@Test_	public void testCanonicalFrameworkClassesStillCanonicalOnDeserialization() throws Exception {_		assertSame(MethodMatcher.TRUE, SerializationTestUtils.serializeAndDeserialize(MethodMatcher.TRUE))__		assertSame(ClassFilter.TRUE, SerializationTestUtils.serializeAndDeserialize(ClassFilter.TRUE))__		assertSame(Pointcut.TRUE, SerializationTestUtils.serializeAndDeserialize(Pointcut.TRUE))__		assertSame(EmptyTargetSource.INSTANCE, SerializationTestUtils.serializeAndDeserialize(EmptyTargetSource.INSTANCE))__		assertSame(Pointcuts.SETTERS, SerializationTestUtils.serializeAndDeserialize(Pointcuts.SETTERS))__		assertSame(Pointcuts.GETTERS, SerializationTestUtils.serializeAndDeserialize(Pointcuts.GETTERS))__		assertSame(ExposeInvocationInterceptor.INSTANCE,_				SerializationTestUtils.serializeAndDeserialize(ExposeInvocationInterceptor.INSTANCE))__	};test,that,when,we,serialize,and,deserialize,various,canonical,instances,of,aop,classes,they,return,the,same,instance,not,a,new,instance,that,s,subverted,the,singleton,construction,limitation;test,public,void,test,canonical,framework,classes,still,canonical,on,deserialization,throws,exception,assert,same,method,matcher,true,serialization,test,utils,serialize,and,deserialize,method,matcher,true,assert,same,class,filter,true,serialization,test,utils,serialize,and,deserialize,class,filter,true,assert,same,pointcut,true,serialization,test,utils,serialize,and,deserialize,pointcut,true,assert,same,empty,target,source,instance,serialization,test,utils,serialize,and,deserialize,empty,target,source,instance,assert,same,pointcuts,setters,serialization,test,utils,serialize,and,deserialize,pointcuts,setters,assert,same,pointcuts,getters,serialization,test,utils,serialize,and,deserialize,pointcuts,getters,assert,same,expose,invocation,interceptor,instance,serialization,test,utils,serialize,and,deserialize,expose,invocation,interceptor,instance
AopUtilsTests -> @Test 	public void testCanonicalFrameworkClassesStillCanonicalOnDeserialization() throws Exception;1496242568;Test that when we serialize and deserialize various canonical instances_of AOP classes, they return the same instance, not a new instance_that's subverted the singleton construction limitation.;@Test_	public void testCanonicalFrameworkClassesStillCanonicalOnDeserialization() throws Exception {_		assertSame(MethodMatcher.TRUE, SerializationTestUtils.serializeAndDeserialize(MethodMatcher.TRUE))__		assertSame(ClassFilter.TRUE, SerializationTestUtils.serializeAndDeserialize(ClassFilter.TRUE))__		assertSame(Pointcut.TRUE, SerializationTestUtils.serializeAndDeserialize(Pointcut.TRUE))__		assertSame(EmptyTargetSource.INSTANCE, SerializationTestUtils.serializeAndDeserialize(EmptyTargetSource.INSTANCE))__		assertSame(Pointcuts.SETTERS, SerializationTestUtils.serializeAndDeserialize(Pointcuts.SETTERS))__		assertSame(Pointcuts.GETTERS, SerializationTestUtils.serializeAndDeserialize(Pointcuts.GETTERS))__		assertSame(ExposeInvocationInterceptor.INSTANCE,_				SerializationTestUtils.serializeAndDeserialize(ExposeInvocationInterceptor.INSTANCE))__	};test,that,when,we,serialize,and,deserialize,various,canonical,instances,of,aop,classes,they,return,the,same,instance,not,a,new,instance,that,s,subverted,the,singleton,construction,limitation;test,public,void,test,canonical,framework,classes,still,canonical,on,deserialization,throws,exception,assert,same,method,matcher,true,serialization,test,utils,serialize,and,deserialize,method,matcher,true,assert,same,class,filter,true,serialization,test,utils,serialize,and,deserialize,class,filter,true,assert,same,pointcut,true,serialization,test,utils,serialize,and,deserialize,pointcut,true,assert,same,empty,target,source,instance,serialization,test,utils,serialize,and,deserialize,empty,target,source,instance,assert,same,pointcuts,setters,serialization,test,utils,serialize,and,deserialize,pointcuts,setters,assert,same,pointcuts,getters,serialization,test,utils,serialize,and,deserialize,pointcuts,getters,assert,same,expose,invocation,interceptor,instance,serialization,test,utils,serialize,and,deserialize,expose,invocation,interceptor,instance
