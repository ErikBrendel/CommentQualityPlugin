commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() throws NoSuchMethodException {     getAge = TestBean.class.getMethod("getAge").     // Assumes no overloading     for (Method method : HasGeneric.class.getMethods()) {         methodsOnHasGeneric.put(method.getName(), method).     } }
false;public;0;18;;@Test public void testMatchGenericArgument() {     String expression = "execution(* set*(java.util.List<org.springframework.tests.sample.beans.TestBean>) )".     AspectJExpressionPointcut ajexp = new AspectJExpressionPointcut().     ajexp.setExpression(expression).     // TODO this will currently map, would be nice for optimization     // assertTrue(ajexp.matches(HasGeneric.class)).     // assertFalse(ajexp.matches(TestBean.class)).     Method takesGenericList = methodsOnHasGeneric.get("setFriends").     assertTrue(ajexp.matches(takesGenericList, HasGeneric.class)).     assertTrue(ajexp.matches(methodsOnHasGeneric.get("setEnemies"), HasGeneric.class)).     assertFalse(ajexp.matches(methodsOnHasGeneric.get("setPartners"), HasGeneric.class)).     assertFalse(ajexp.matches(methodsOnHasGeneric.get("setPhoneNumbers"), HasGeneric.class)).     assertFalse(ajexp.matches(getAge, TestBean.class)). }
false;public;2;3;;public int queryForInt(String sql, Object... params) {     return 0. }
false;public;0;25;;@Test public void testMatchVarargs() throws Exception {     @SuppressWarnings("unused")     class MyTemplate {          public int queryForInt(String sql, Object... params) {             return 0.         }     }     String expression = "execution(int *.*(String, Object...))".     AspectJExpressionPointcut jdbcVarArgs = new AspectJExpressionPointcut().     jdbcVarArgs.setExpression(expression).     assertTrue(jdbcVarArgs.matches(MyTemplate.class.getMethod("queryForInt", String.class, Object[].class), MyTemplate.class)).     Method takesGenericList = methodsOnHasGeneric.get("setFriends").     assertFalse(jdbcVarArgs.matches(takesGenericList, HasGeneric.class)).     assertFalse(jdbcVarArgs.matches(methodsOnHasGeneric.get("setEnemies"), HasGeneric.class)).     assertFalse(jdbcVarArgs.matches(methodsOnHasGeneric.get("setPartners"), HasGeneric.class)).     assertFalse(jdbcVarArgs.matches(methodsOnHasGeneric.get("setPhoneNumbers"), HasGeneric.class)).     assertFalse(jdbcVarArgs.matches(getAge, TestBean.class)). }
false;public;0;5;;@Test public void testMatchAnnotationOnClassWithAtWithin() throws Exception {     String expression = "@within(test.annotation.transaction.Tx)".     testMatchAnnotationOnClass(expression). }
false;public;0;5;;@Test public void testMatchAnnotationOnClassWithoutBinding() throws Exception {     String expression = "within(@test.annotation.transaction.Tx *)".     testMatchAnnotationOnClass(expression). }
false;public;0;11;;@Test public void testMatchAnnotationOnClassWithSubpackageWildcard() throws Exception {     String expression = "within(@(test.annotation..*) *)".     AspectJExpressionPointcut springAnnotatedPc = testMatchAnnotationOnClass(expression).     assertFalse(springAnnotatedPc.matches(TestBean.class.getMethod("setName", String.class), TestBean.class)).     assertTrue(springAnnotatedPc.matches(SpringAnnotated.class.getMethod("foo"), SpringAnnotated.class)).     expression = "within(@(test.annotation.transaction..*) *)".     AspectJExpressionPointcut springTxAnnotatedPc = testMatchAnnotationOnClass(expression).     assertFalse(springTxAnnotatedPc.matches(SpringAnnotated.class.getMethod("foo"), SpringAnnotated.class)). }
false;public;0;5;;@Test public void testMatchAnnotationOnClassWithExactPackageWildcard() throws Exception {     String expression = "within(@(test.annotation.transaction.*) *)".     testMatchAnnotationOnClass(expression). }
false;private;1;11;;private AspectJExpressionPointcut testMatchAnnotationOnClass(String expression) throws Exception {     AspectJExpressionPointcut ajexp = new AspectJExpressionPointcut().     ajexp.setExpression(expression).     assertFalse(ajexp.matches(getAge, TestBean.class)).     assertTrue(ajexp.matches(HasTransactionalAnnotation.class.getMethod("foo"), HasTransactionalAnnotation.class)).     assertTrue(ajexp.matches(HasTransactionalAnnotation.class.getMethod("bar", String.class), HasTransactionalAnnotation.class)).     assertTrue(ajexp.matches(BeanB.class.getMethod("setName", String.class), BeanB.class)).     assertFalse(ajexp.matches(BeanA.class.getMethod("setName", String.class), BeanA.class)).     return ajexp. }
false;public;0;13;;@Test public void testAnnotationOnMethodWithFQN() throws Exception {     String expression = "@annotation(test.annotation.transaction.Tx)".     AspectJExpressionPointcut ajexp = new AspectJExpressionPointcut().     ajexp.setExpression(expression).     assertFalse(ajexp.matches(getAge, TestBean.class)).     assertFalse(ajexp.matches(HasTransactionalAnnotation.class.getMethod("foo"), HasTransactionalAnnotation.class)).     assertFalse(ajexp.matches(HasTransactionalAnnotation.class.getMethod("bar", String.class), HasTransactionalAnnotation.class)).     assertFalse(ajexp.matches(BeanA.class.getMethod("setName", String.class), BeanA.class)).     assertTrue(ajexp.matches(BeanA.class.getMethod("getAge"), BeanA.class)).     assertFalse(ajexp.matches(BeanA.class.getMethod("setName", String.class), BeanA.class)). }
false;public;0;11;;@Test public void testAnnotationOnCglibProxyMethod() throws Exception {     String expression = "@annotation(test.annotation.transaction.Tx)".     AspectJExpressionPointcut ajexp = new AspectJExpressionPointcut().     ajexp.setExpression(expression).     ProxyFactory factory = new ProxyFactory(new BeanA()).     factory.setProxyTargetClass(true).     BeanA proxy = (BeanA) factory.getProxy().     assertTrue(ajexp.matches(BeanA.class.getMethod("getAge"), proxy.getClass())). }
false;public;0;11;;@Test public void testAnnotationOnDynamicProxyMethod() throws Exception {     String expression = "@annotation(test.annotation.transaction.Tx)".     AspectJExpressionPointcut ajexp = new AspectJExpressionPointcut().     ajexp.setExpression(expression).     ProxyFactory factory = new ProxyFactory(new BeanA()).     factory.setProxyTargetClass(false).     IBeanA proxy = (IBeanA) factory.getProxy().     assertTrue(ajexp.matches(IBeanA.class.getMethod("getAge"), proxy.getClass())). }
false;public;0;15;;@Test public void testAnnotationOnMethodWithWildcard() throws Exception {     String expression = "execution(@(test.annotation..*) * *(..))".     AspectJExpressionPointcut anySpringMethodAnnotation = new AspectJExpressionPointcut().     anySpringMethodAnnotation.setExpression(expression).     assertFalse(anySpringMethodAnnotation.matches(getAge, TestBean.class)).     assertFalse(anySpringMethodAnnotation.matches(HasTransactionalAnnotation.class.getMethod("foo"), HasTransactionalAnnotation.class)).     assertFalse(anySpringMethodAnnotation.matches(HasTransactionalAnnotation.class.getMethod("bar", String.class), HasTransactionalAnnotation.class)).     assertFalse(anySpringMethodAnnotation.matches(BeanA.class.getMethod("setName", String.class), BeanA.class)).     assertTrue(anySpringMethodAnnotation.matches(BeanA.class.getMethod("getAge"), BeanA.class)).     assertFalse(anySpringMethodAnnotation.matches(BeanA.class.getMethod("setName", String.class), BeanA.class)). }
false;public;0;29;;@Test public void testAnnotationOnMethodArgumentsWithFQN() throws Exception {     String expression = "@args(*, test.annotation.EmptySpringAnnotation))".     AspectJExpressionPointcut takesSpringAnnotatedArgument2 = new AspectJExpressionPointcut().     takesSpringAnnotatedArgument2.setExpression(expression).     assertFalse(takesSpringAnnotatedArgument2.matches(getAge, TestBean.class)).     assertFalse(takesSpringAnnotatedArgument2.matches(HasTransactionalAnnotation.class.getMethod("foo"), HasTransactionalAnnotation.class)).     assertFalse(takesSpringAnnotatedArgument2.matches(HasTransactionalAnnotation.class.getMethod("bar", String.class), HasTransactionalAnnotation.class)).     assertFalse(takesSpringAnnotatedArgument2.matches(BeanA.class.getMethod("setName", String.class), BeanA.class)).     assertFalse(takesSpringAnnotatedArgument2.matches(BeanA.class.getMethod("getAge"), BeanA.class)).     assertFalse(takesSpringAnnotatedArgument2.matches(BeanA.class.getMethod("setName", String.class), BeanA.class)).     assertTrue(takesSpringAnnotatedArgument2.matches(ProcessesSpringAnnotatedParameters.class.getMethod("takesAnnotatedParameters", TestBean.class, SpringAnnotated.class), ProcessesSpringAnnotatedParameters.class)).     // True because it maybeMatches with potential argument subtypes     assertTrue(takesSpringAnnotatedArgument2.matches(ProcessesSpringAnnotatedParameters.class.getMethod("takesNoAnnotatedParameters", TestBean.class, BeanA.class), ProcessesSpringAnnotatedParameters.class)).     assertFalse(takesSpringAnnotatedArgument2.matches(ProcessesSpringAnnotatedParameters.class.getMethod("takesNoAnnotatedParameters", TestBean.class, BeanA.class), ProcessesSpringAnnotatedParameters.class, new TestBean(), new BeanA())). }
false;public;0;22;;@Test public void testAnnotationOnMethodArgumentsWithWildcards() throws Exception {     String expression = "execution(* *(*, @(test..*) *))".     AspectJExpressionPointcut takesSpringAnnotatedArgument2 = new AspectJExpressionPointcut().     takesSpringAnnotatedArgument2.setExpression(expression).     assertFalse(takesSpringAnnotatedArgument2.matches(getAge, TestBean.class)).     assertFalse(takesSpringAnnotatedArgument2.matches(HasTransactionalAnnotation.class.getMethod("foo"), HasTransactionalAnnotation.class)).     assertFalse(takesSpringAnnotatedArgument2.matches(HasTransactionalAnnotation.class.getMethod("bar", String.class), HasTransactionalAnnotation.class)).     assertFalse(takesSpringAnnotatedArgument2.matches(BeanA.class.getMethod("setName", String.class), BeanA.class)).     assertFalse(takesSpringAnnotatedArgument2.matches(BeanA.class.getMethod("getAge"), BeanA.class)).     assertFalse(takesSpringAnnotatedArgument2.matches(BeanA.class.getMethod("setName", String.class), BeanA.class)).     assertTrue(takesSpringAnnotatedArgument2.matches(ProcessesSpringAnnotatedParameters.class.getMethod("takesAnnotatedParameters", TestBean.class, SpringAnnotated.class), ProcessesSpringAnnotatedParameters.class)).     assertFalse(takesSpringAnnotatedArgument2.matches(ProcessesSpringAnnotatedParameters.class.getMethod("takesNoAnnotatedParameters", TestBean.class, BeanA.class), ProcessesSpringAnnotatedParameters.class)). }
false;public;1;2;;public void setFriends(List<TestBean> friends) { }
false;public;1;2;;public void setEnemies(List<TestBean> enemies) { }
false;public;1;2;;public void setPartners(List<?> partners) { }
false;public;1;2;;public void setPhoneNumbers(List<String> numbers) { }
false;public;2;2;;public void takesAnnotatedParameters(TestBean tb, SpringAnnotated sa) { }
false;public;2;2;;public void takesNoAnnotatedParameters(TestBean tb, BeanA tb3) { }
false;public;0;2;;public void foo() { }
false;public;1;3;;public Object bar(String foo) {     throw new UnsupportedOperationException(). }
false;public;0;2;;public void foo() { }
false;;0;2;;@Tx int getAge().
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;5;;@Tx @Override public int getAge() {     return age. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
