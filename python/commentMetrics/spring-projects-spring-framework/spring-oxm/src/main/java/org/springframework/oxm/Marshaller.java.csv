commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Indicate whether this marshaller can marshal instances of the supplied type.  * @param clazz the class that this marshaller is being asked if it can marshal  * @return {@code true} if this marshaller can indeed marshal instances of the supplied class.  * {@code false} otherwise  */ ;/**  * Indicate whether this marshaller can marshal instances of the supplied type.  * @param clazz the class that this marshaller is being asked if it can marshal  * @return {@code true} if this marshaller can indeed marshal instances of the supplied class.  * {@code false} otherwise  */ boolean supports(Class<?> clazz).
true;;2;1;/**  * Marshal the object graph with the given root into the provided {@link Result}.  * @param graph the root of the object graph to marshal  * @param result the result to marshal to  * @throws IOException if an I/O error occurs  * @throws XmlMappingException if the given object cannot be marshalled to the result  */ ;/**  * Marshal the object graph with the given root into the provided {@link Result}.  * @param graph the root of the object graph to marshal  * @param result the result to marshal to  * @throws IOException if an I/O error occurs  * @throws XmlMappingException if the given object cannot be marshalled to the result  */ void marshal(Object graph, Result result) throws IOException, XmlMappingException.
