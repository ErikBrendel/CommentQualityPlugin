commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Indicate whether this unmarshaller can unmarshal instances of the supplied type.  * @param clazz the class that this unmarshaller is being asked if it can marshal  * @return {@code true} if this unmarshaller can indeed unmarshal to the supplied class.  * {@code false} otherwise  */ ;/**  * Indicate whether this unmarshaller can unmarshal instances of the supplied type.  * @param clazz the class that this unmarshaller is being asked if it can marshal  * @return {@code true} if this unmarshaller can indeed unmarshal to the supplied class.  * {@code false} otherwise  */ boolean supports(Class<?> clazz).
true;;1;1;/**  * Unmarshal the given {@link Source} into an object graph.  * @param source the source to marshal from  * @return the object graph  * @throws IOException if an I/O error occurs  * @throws XmlMappingException if the given source cannot be mapped to an object  */ ;/**  * Unmarshal the given {@link Source} into an object graph.  * @param source the source to marshal from  * @return the object graph  * @throws IOException if an I/O error occurs  * @throws XmlMappingException if the given source cannot be mapped to an object  */ Object unmarshal(Source source) throws IOException, XmlMappingException.
