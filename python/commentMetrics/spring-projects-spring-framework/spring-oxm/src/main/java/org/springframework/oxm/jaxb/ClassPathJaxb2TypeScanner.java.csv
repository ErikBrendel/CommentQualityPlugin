commented;modifiers;parameterAmount;loc;comment;code
true;public;0;27;/**  * Scan the packages for classes marked with JAXB2 annotations.  * @throws UncategorizedMappingException in case of errors  */ ;/**  * Scan the packages for classes marked with JAXB2 annotations.  * @throws UncategorizedMappingException in case of errors  */ public Class<?>[] scanPackages() throws UncategorizedMappingException {     try {         List<Class<?>> jaxb2Classes = new ArrayList<>().         for (String packageToScan : this.packagesToScan) {             String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(packageToScan) + RESOURCE_PATTERN.             Resource[] resources = this.resourcePatternResolver.getResources(pattern).             MetadataReaderFactory metadataReaderFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver).             for (Resource resource : resources) {                 MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(resource).                 if (isJaxb2Class(metadataReader, metadataReaderFactory)) {                     String className = metadataReader.getClassMetadata().getClassName().                     Class<?> jaxb2AnnotatedClass = ClassUtils.forName(className, this.resourcePatternResolver.getClassLoader()).                     jaxb2Classes.add(jaxb2AnnotatedClass).                 }             }         }         return ClassUtils.toClassArray(jaxb2Classes).     } catch (IOException ex) {         throw new UncategorizedMappingException("Failed to scan classpath for unlisted classes", ex).     } catch (ClassNotFoundException ex) {         throw new UncategorizedMappingException("Failed to load annotated classes from classpath", ex).     } }
false;protected;2;8;;protected boolean isJaxb2Class(MetadataReader reader, MetadataReaderFactory factory) throws IOException {     for (TypeFilter filter : JAXB2_TYPE_FILTERS) {         if (filter.match(reader, factory) && !reader.getClassMetadata().isInterface()) {             return true.         }     }     return false. }
