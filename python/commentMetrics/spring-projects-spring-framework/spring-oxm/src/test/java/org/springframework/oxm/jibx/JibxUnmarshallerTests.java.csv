commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void compilerAssumptions() {     // JiBX compiler is currently not compatible with JDK 9     Assume.assumeTrue(System.getProperty("java.version").startsWith("1.8.")). }
false;protected;0;7;;@Override protected JibxMarshaller createUnmarshaller() throws Exception {     JibxMarshaller unmarshaller = new JibxMarshaller().     unmarshaller.setTargetClass(Flights.class).     unmarshaller.afterPropertiesSet().     return unmarshaller. }
false;protected;1;7;;@Override protected void testFlights(Object o) {     Flights flights = (Flights) o.     assertNotNull("Flights is null", flights).     assertEquals("Invalid amount of flight elements", 1, flights.sizeFlightList()).     testFlight(flights.getFlight(0)). }
false;protected;1;6;;@Override protected void testFlight(Object o) {     FlightType flight = (FlightType) o.     assertNotNull("Flight is null", flight).     assertEquals("Number is invalid", 42L, flight.getNumber()). }
false;public;0;5;;@Test @Override public void unmarshalPartialStaxSourceXmlStreamReader() throws Exception { // JiBX does not support reading XML fragments, hence the override here }
false;public;0;12;;@Test public void unmarshalStreamSourceInputStreamUsingNonDefaultEncoding() throws Exception {     String encoding = "ISO-8859-1".     unmarshaller.setEncoding(encoding).     StreamSource source = new StreamSource(new ByteArrayInputStream(INPUT_STRING_WITH_SPECIAL_CHARACTERS.getBytes(encoding))).     Object flights = unmarshaller.unmarshal(source).     testFlights(flights).     FlightType flight = ((Flights) flights).getFlight(0).     assertEquals("Airline is invalid", "Air Libert\u00e9", flight.getAirline()). }
