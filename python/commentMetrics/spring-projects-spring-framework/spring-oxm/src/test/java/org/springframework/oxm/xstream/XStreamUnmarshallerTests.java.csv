commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void createUnmarshaller() throws Exception {     unmarshaller = new XStreamMarshaller().     Map<String, Class<?>> aliases = new HashMap<>().     aliases.put("flight", Flight.class).     unmarshaller.setAliases(aliases). }
false;private;1;6;;private void testFlight(Object o) {     assertTrue("Unmarshalled object is not Flights", o instanceof Flight).     Flight flight = (Flight) o.     assertNotNull("Flight is null", flight).     assertEquals("Number is invalid", 42L, flight.getFlightNumber()). }
false;public;0;8;;@Test public void unmarshalDomSource() throws Exception {     DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder().     Document document = builder.parse(new InputSource(new StringReader(INPUT_STRING))).     DOMSource source = new DOMSource(document).     Object flight = unmarshaller.unmarshal(source).     testFlight(flight). }
false;public;0;8;;@Test public void unmarshalStaxSourceXmlStreamReader() throws Exception {     XMLInputFactory inputFactory = XMLInputFactory.newInstance().     XMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(INPUT_STRING)).     Source source = StaxUtils.createStaxSource(streamReader).     Object flights = unmarshaller.unmarshal(source).     testFlight(flights). }
false;public;0;6;;@Test public void unmarshalStreamSourceInputStream() throws Exception {     StreamSource source = new StreamSource(new ByteArrayInputStream(INPUT_STRING.getBytes("UTF-8"))).     Object flights = unmarshaller.unmarshal(source).     testFlight(flights). }
false;public;0;6;;@Test public void unmarshalStreamSourceReader() throws Exception {     StreamSource source = new StreamSource(new StringReader(INPUT_STRING)).     Object flights = unmarshaller.unmarshal(source).     testFlight(flights). }
