commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;5;;@Before public final void setUp() throws Exception {     marshaller = createMarshaller().     flights = createFlights(). }
false;protected,abstract;0;1;;protected abstract M createMarshaller() throws Exception.
false;protected,abstract;0;1;;protected abstract Object createFlights().
false;public;0;22;;@Test public void marshalDOMResult() throws Exception {     DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance().     documentBuilderFactory.setNamespaceAware(true).     DocumentBuilder builder = documentBuilderFactory.newDocumentBuilder().     Document result = builder.newDocument().     DOMResult domResult = new DOMResult(result).     marshaller.marshal(flights, domResult).     Document expected = builder.newDocument().     Element flightsElement = expected.createElementNS("http://samples.springframework.org/flight", "tns:flights").     Attr namespace = expected.createAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:tns").     namespace.setNodeValue("http://samples.springframework.org/flight").     flightsElement.setAttributeNode(namespace).     expected.appendChild(flightsElement).     Element flightElement = expected.createElementNS("http://samples.springframework.org/flight", "tns:flight").     flightsElement.appendChild(flightElement).     Element numberElement = expected.createElementNS("http://samples.springframework.org/flight", "tns:number").     flightElement.appendChild(numberElement).     Text text = expected.createTextNode("42").     numberElement.appendChild(text).     assertThat("Marshaller writes invalid DOMResult", result, isSimilarTo(expected)). }
false;public;0;23;;@Test public void marshalEmptyDOMResult() throws Exception {     DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance().     documentBuilderFactory.setNamespaceAware(true).     DocumentBuilder builder = documentBuilderFactory.newDocumentBuilder().     DOMResult domResult = new DOMResult().     marshaller.marshal(flights, domResult).     assertTrue("DOMResult does not contain a Document", domResult.getNode() instanceof Document).     Document result = (Document) domResult.getNode().     Document expected = builder.newDocument().     Element flightsElement = expected.createElementNS("http://samples.springframework.org/flight", "tns:flights").     Attr namespace = expected.createAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:tns").     namespace.setNodeValue("http://samples.springframework.org/flight").     flightsElement.setAttributeNode(namespace).     expected.appendChild(flightsElement).     Element flightElement = expected.createElementNS("http://samples.springframework.org/flight", "tns:flight").     flightsElement.appendChild(flightElement).     Element numberElement = expected.createElementNS("http://samples.springframework.org/flight", "tns:number").     flightElement.appendChild(numberElement).     Text text = expected.createTextNode("42").     numberElement.appendChild(text).     assertThat("Marshaller writes invalid DOMResult", result, isSimilarTo(expected)). }
false;public;0;7;;@Test public void marshalStreamResultWriter() throws Exception {     StringWriter writer = new StringWriter().     StreamResult result = new StreamResult(writer).     marshaller.marshal(flights, result).     assertThat("Marshaller writes invalid StreamResult", writer.toString(), isSimilarTo(EXPECTED_STRING)). }
false;public;0;8;;@Test public void marshalStreamResultOutputStream() throws Exception {     ByteArrayOutputStream os = new ByteArrayOutputStream().     StreamResult result = new StreamResult(os).     marshaller.marshal(flights, result).     assertThat("Marshaller writes invalid StreamResult", new String(os.toByteArray(), "UTF-8"), isSimilarTo(EXPECTED_STRING)). }
false;public;0;9;;@Test public void marshalStaxResultStreamWriter() throws Exception {     XMLOutputFactory outputFactory = XMLOutputFactory.newInstance().     StringWriter writer = new StringWriter().     XMLStreamWriter streamWriter = outputFactory.createXMLStreamWriter(writer).     Result result = StaxUtils.createStaxResult(streamWriter).     marshaller.marshal(flights, result).     assertThat("Marshaller writes invalid StreamResult", writer.toString(), isSimilarTo(EXPECTED_STRING)). }
false;public;0;9;;@Test public void marshalStaxResultEventWriter() throws Exception {     XMLOutputFactory outputFactory = XMLOutputFactory.newInstance().     StringWriter writer = new StringWriter().     XMLEventWriter eventWriter = outputFactory.createXMLEventWriter(writer).     Result result = StaxUtils.createStaxResult(eventWriter).     marshaller.marshal(flights, result).     assertThat("Marshaller writes invalid StreamResult", writer.toString(), isSimilarTo(EXPECTED_STRING)). }
false;public;0;9;;@Test public void marshalJaxp14StaxResultStreamWriter() throws Exception {     XMLOutputFactory outputFactory = XMLOutputFactory.newInstance().     StringWriter writer = new StringWriter().     XMLStreamWriter streamWriter = outputFactory.createXMLStreamWriter(writer).     StAXResult result = new StAXResult(streamWriter).     marshaller.marshal(flights, result).     assertThat("Marshaller writes invalid StreamResult", writer.toString(), isSimilarTo(EXPECTED_STRING)). }
false;public;0;9;;@Test public void marshalJaxp14StaxResultEventWriter() throws Exception {     XMLOutputFactory outputFactory = XMLOutputFactory.newInstance().     StringWriter writer = new StringWriter().     XMLEventWriter eventWriter = outputFactory.createXMLEventWriter(writer).     StAXResult result = new StAXResult(eventWriter).     marshaller.marshal(flights, result).     assertThat("Marshaller writes invalid StreamResult", writer.toString(), isSimilarTo(EXPECTED_STRING)). }
false;private,static;1;4;;private static CompareMatcher isSimilarTo(final Object content) {     return CompareMatcher.isSimilarTo(content).ignoreWhitespace(). }
