commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;8;;@Override protected Jaxb2Marshaller createUnmarshaller() throws Exception {     Jaxb2Marshaller unmarshaller = new Jaxb2Marshaller().     unmarshaller.setContextPath("org.springframework.oxm.jaxb.test").     unmarshaller.setSchema(new ClassPathResource("org/springframework/oxm/flight.xsd")).     unmarshaller.afterPropertiesSet().     return unmarshaller. }
false;protected;1;7;;@Override protected void testFlights(Object o) {     Flights flights = (Flights) o.     assertNotNull("Flights is null", flights).     assertEquals("Invalid amount of flight elements", 1, flights.getFlight().size()).     testFlight(flights.getFlight().get(0)). }
false;protected;1;6;;@Override protected void testFlight(Object o) {     FlightType flight = (FlightType) o.     assertNotNull("Flight is null", flight).     assertEquals("Number is invalid", 42L, flight.getNumber()). }
false;public;0;31;;@Test public void marshalAttachments() throws Exception {     unmarshaller = new Jaxb2Marshaller().     unmarshaller.setClassesToBeBound(BinaryObject.class).     unmarshaller.setMtomEnabled(true).     unmarshaller.afterPropertiesSet().     MimeContainer mimeContainer = mock(MimeContainer.class).     Resource logo = new ClassPathResource("spring-ws.png", getClass()).     DataHandler dataHandler = new DataHandler(new FileDataSource(logo.getFile())).     given(mimeContainer.isXopPackage()).willReturn(true).     given(mimeContainer.getAttachment("<6b76528d-7a9c-4def-8e13-095ab89e9bb7@http://springframework.org/spring-ws>")).willReturn(dataHandler).     given(mimeContainer.getAttachment("<99bd1592-0521-41a2-9688-a8bfb40192fb@http://springframework.org/spring-ws>")).willReturn(dataHandler).     given(mimeContainer.getAttachment("696cfb9a-4d2d-402f-bb5c-59fa69e7f0b3@spring-ws.png")).willReturn(dataHandler).     String content = "<binaryObject xmlns='http://springframework.org/spring-ws'>" + "<bytes>" + "<xop:Include href='cid:6b76528d-7a9c-4def-8e13-095ab89e9bb7@http://springframework.org/spring-ws' xmlns:xop='http://www.w3.org/2004/08/xop/include'/>" + "</bytes>" + "<dataHandler>" + "<xop:Include href='cid:99bd1592-0521-41a2-9688-a8bfb40192fb@http://springframework.org/spring-ws' xmlns:xop='http://www.w3.org/2004/08/xop/include'/>" + "</dataHandler>" + "<swaDataHandler>696cfb9a-4d2d-402f-bb5c-59fa69e7f0b3@spring-ws.png</swaDataHandler>" + "</binaryObject>".     StringReader reader = new StringReader(content).     Object result = unmarshaller.unmarshal(new StreamSource(reader), mimeContainer).     assertTrue("Result is not a BinaryObject", result instanceof BinaryObject).     BinaryObject object = (BinaryObject) result.     assertNotNull("bytes property not set", object.getBytes()).     assertTrue("bytes property not set", object.getBytes().length > 0).     assertNotNull("datahandler property not set", object.getSwaDataHandler()). }
false;public;0;13;;@Test @Override @SuppressWarnings("unchecked") public void unmarshalPartialStaxSourceXmlStreamReader() throws Exception {     XMLInputFactory inputFactory = XMLInputFactory.newInstance().     XMLStreamReader streamReader = inputFactory.createXMLStreamReader(new StringReader(INPUT_STRING)).     // skip to flights     streamReader.nextTag().     // skip to flight     streamReader.nextTag().     Source source = StaxUtils.createStaxSource(streamReader).     JAXBElement<FlightType> element = (JAXBElement<FlightType>) unmarshaller.unmarshal(source).     FlightType flight = element.getValue().     testFlight(flight). }
false;public;0;13;;@Test @SuppressWarnings("unchecked") public void unmarshalAnXmlReferingToAWrappedXmlElementDecl() throws Exception {     // SPR-10714     unmarshaller = new Jaxb2Marshaller().     unmarshaller.setPackagesToScan(new String[] { "org.springframework.oxm.jaxb" }).     unmarshaller.afterPropertiesSet().     Source source = new StreamSource(new StringReader("<brand-airplane><name>test</name></brand-airplane>")).     JAXBElement<Airplane> airplane = (JAXBElement<Airplane>) unmarshaller.unmarshal(source).     assertEquals("Unmarshalling via explicit @XmlRegistry tag should return correct type", "test", airplane.getValue().getName()). }
false;public;0;8;;@Test public void unmarshalFile() throws IOException {     Resource resource = new ClassPathResource("jaxb2.xml", getClass()).     File file = resource.getFile().     Flights f = (Flights) unmarshaller.unmarshal(new StreamSource(file)).     testFlights(f). }
