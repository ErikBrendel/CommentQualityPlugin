# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractCachingViewResolver -> protected abstract View loadView(String viewName, Locale locale) throws Exception_;1328020251;Subclasses must implement this method, building a View object_for the specified view. The returned View objects will be_cached by this ViewResolver base class._<p>Subclasses are not forced to support internationalization:_A subclass that does not may simply ignore the locale parameter._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or <code>null</code> if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #resolveViewName;protected abstract View loadView(String viewName, Locale locale) throws Exception_;subclasses,must,implement,this,method,building,a,view,object,for,the,specified,view,the,returned,view,objects,will,be,cached,by,this,view,resolver,base,class,p,subclasses,are,not,forced,to,support,internationalization,a,subclass,that,does,not,may,simply,ignore,the,locale,parameter,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,code,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,resolve,view,name;protected,abstract,view,load,view,string,view,name,locale,locale,throws,exception
AbstractCachingViewResolver -> protected abstract View loadView(String viewName, Locale locale) throws Exception_;1355279385;Subclasses must implement this method, building a View object_for the specified view. The returned View objects will be_cached by this ViewResolver base class._<p>Subclasses are not forced to support internationalization:_A subclass that does not may simply ignore the locale parameter._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or <code>null</code> if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #resolveViewName;protected abstract View loadView(String viewName, Locale locale) throws Exception_;subclasses,must,implement,this,method,building,a,view,object,for,the,specified,view,the,returned,view,objects,will,be,cached,by,this,view,resolver,base,class,p,subclasses,are,not,forced,to,support,internationalization,a,subclass,that,does,not,may,simply,ignore,the,locale,parameter,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,code,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,resolve,view,name;protected,abstract,view,load,view,string,view,name,locale,locale,throws,exception
AbstractCachingViewResolver -> protected abstract View loadView(String viewName, Locale locale) throws Exception_;1356735495;Subclasses must implement this method, building a View object_for the specified view. The returned View objects will be_cached by this ViewResolver base class._<p>Subclasses are not forced to support internationalization:_A subclass that does not may simply ignore the locale parameter._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #resolveViewName;protected abstract View loadView(String viewName, Locale locale) throws Exception_;subclasses,must,implement,this,method,building,a,view,object,for,the,specified,view,the,returned,view,objects,will,be,cached,by,this,view,resolver,base,class,p,subclasses,are,not,forced,to,support,internationalization,a,subclass,that,does,not,may,simply,ignore,the,locale,parameter,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,resolve,view,name;protected,abstract,view,load,view,string,view,name,locale,locale,throws,exception
AbstractCachingViewResolver -> protected abstract View loadView(String viewName, Locale locale) throws Exception_;1357119239;Subclasses must implement this method, building a View object_for the specified view. The returned View objects will be_cached by this ViewResolver base class._<p>Subclasses are not forced to support internationalization:_A subclass that does not may simply ignore the locale parameter._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #resolveViewName;protected abstract View loadView(String viewName, Locale locale) throws Exception_;subclasses,must,implement,this,method,building,a,view,object,for,the,specified,view,the,returned,view,objects,will,be,cached,by,this,view,resolver,base,class,p,subclasses,are,not,forced,to,support,internationalization,a,subclass,that,does,not,may,simply,ignore,the,locale,parameter,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,resolve,view,name;protected,abstract,view,load,view,string,view,name,locale,locale,throws,exception
AbstractCachingViewResolver -> protected abstract View loadView(String viewName, Locale locale) throws Exception_;1362408075;Subclasses must implement this method, building a View object_for the specified view. The returned View objects will be_cached by this ViewResolver base class._<p>Subclasses are not forced to support internationalization:_A subclass that does not may simply ignore the locale parameter._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #resolveViewName;protected abstract View loadView(String viewName, Locale locale) throws Exception_;subclasses,must,implement,this,method,building,a,view,object,for,the,specified,view,the,returned,view,objects,will,be,cached,by,this,view,resolver,base,class,p,subclasses,are,not,forced,to,support,internationalization,a,subclass,that,does,not,may,simply,ignore,the,locale,parameter,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,resolve,view,name;protected,abstract,view,load,view,string,view,name,locale,locale,throws,exception
AbstractCachingViewResolver -> protected abstract View loadView(String viewName, Locale locale) throws Exception_;1368482696;Subclasses must implement this method, building a View object_for the specified view. The returned View objects will be_cached by this ViewResolver base class._<p>Subclasses are not forced to support internationalization:_A subclass that does not may simply ignore the locale parameter._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #resolveViewName;protected abstract View loadView(String viewName, Locale locale) throws Exception_;subclasses,must,implement,this,method,building,a,view,object,for,the,specified,view,the,returned,view,objects,will,be,cached,by,this,view,resolver,base,class,p,subclasses,are,not,forced,to,support,internationalization,a,subclass,that,does,not,may,simply,ignore,the,locale,parameter,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,resolve,view,name;protected,abstract,view,load,view,string,view,name,locale,locale,throws,exception
AbstractCachingViewResolver -> protected abstract View loadView(String viewName, Locale locale) throws Exception_;1467667858;Subclasses must implement this method, building a View object_for the specified view. The returned View objects will be_cached by this ViewResolver base class._<p>Subclasses are not forced to support internationalization:_A subclass that does not may simply ignore the locale parameter._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #resolveViewName;protected abstract View loadView(String viewName, Locale locale) throws Exception_;subclasses,must,implement,this,method,building,a,view,object,for,the,specified,view,the,returned,view,objects,will,be,cached,by,this,view,resolver,base,class,p,subclasses,are,not,forced,to,support,internationalization,a,subclass,that,does,not,may,simply,ignore,the,locale,parameter,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,resolve,view,name;protected,abstract,view,load,view,string,view,name,locale,locale,throws,exception
AbstractCachingViewResolver -> protected abstract View loadView(String viewName, Locale locale) throws Exception_;1467730834;Subclasses must implement this method, building a View object_for the specified view. The returned View objects will be_cached by this ViewResolver base class._<p>Subclasses are not forced to support internationalization:_A subclass that does not may simply ignore the locale parameter._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #resolveViewName;protected abstract View loadView(String viewName, Locale locale) throws Exception_;subclasses,must,implement,this,method,building,a,view,object,for,the,specified,view,the,returned,view,objects,will,be,cached,by,this,view,resolver,base,class,p,subclasses,are,not,forced,to,support,internationalization,a,subclass,that,does,not,may,simply,ignore,the,locale,parameter,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,resolve,view,name;protected,abstract,view,load,view,string,view,name,locale,locale,throws,exception
AbstractCachingViewResolver -> protected abstract View loadView(String viewName, Locale locale) throws Exception_;1477045587;Subclasses must implement this method, building a View object_for the specified view. The returned View objects will be_cached by this ViewResolver base class._<p>Subclasses are not forced to support internationalization:_A subclass that does not may simply ignore the locale parameter._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #resolveViewName;protected abstract View loadView(String viewName, Locale locale) throws Exception_;subclasses,must,implement,this,method,building,a,view,object,for,the,specified,view,the,returned,view,objects,will,be,cached,by,this,view,resolver,base,class,p,subclasses,are,not,forced,to,support,internationalization,a,subclass,that,does,not,may,simply,ignore,the,locale,parameter,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,resolve,view,name;protected,abstract,view,load,view,string,view,name,locale,locale,throws,exception
AbstractCachingViewResolver -> public boolean isCache();1328020251;Return if caching is enabled.;public boolean isCache() {_		return this.cache__	};return,if,caching,is,enabled;public,boolean,is,cache,return,this,cache
AbstractCachingViewResolver -> public boolean isCache();1355279385;Return if caching is enabled.;public boolean isCache() {_		return (this.cacheLimit > 0)__	};return,if,caching,is,enabled;public,boolean,is,cache,return,this,cache,limit,0
AbstractCachingViewResolver -> public boolean isCache();1356735495;Return if caching is enabled.;public boolean isCache() {_		return (this.cacheLimit > 0)__	};return,if,caching,is,enabled;public,boolean,is,cache,return,this,cache,limit,0
AbstractCachingViewResolver -> public boolean isCache();1357119239;Return if caching is enabled.;public boolean isCache() {_		return (this.cacheLimit > 0)__	};return,if,caching,is,enabled;public,boolean,is,cache,return,this,cache,limit,0
AbstractCachingViewResolver -> public boolean isCache();1362408075;Return if caching is enabled.;public boolean isCache() {_		return (this.cacheLimit > 0)__	};return,if,caching,is,enabled;public,boolean,is,cache,return,this,cache,limit,0
AbstractCachingViewResolver -> public boolean isCache();1368482696;Return if caching is enabled.;public boolean isCache() {_		return (this.cacheLimit > 0)__	};return,if,caching,is,enabled;public,boolean,is,cache,return,this,cache,limit,0
AbstractCachingViewResolver -> public boolean isCache();1467667858;Return if caching is enabled.;public boolean isCache() {_		return (this.cacheLimit > 0)__	};return,if,caching,is,enabled;public,boolean,is,cache,return,this,cache,limit,0
AbstractCachingViewResolver -> public boolean isCache();1467730834;Return if caching is enabled.;public boolean isCache() {_		return (this.cacheLimit > 0)__	};return,if,caching,is,enabled;public,boolean,is,cache,return,this,cache,limit,0
AbstractCachingViewResolver -> public boolean isCache();1477045587;Return if caching is enabled.;public boolean isCache() {_		return (this.cacheLimit > 0)__	};return,if,caching,is,enabled;public,boolean,is,cache,return,this,cache,limit,0
AbstractCachingViewResolver -> public boolean isCache();1495868221;Return if caching is enabled.;public boolean isCache() {_		return (this.cacheLimit > 0)__	};return,if,caching,is,enabled;public,boolean,is,cache,return,this,cache,limit,0
AbstractCachingViewResolver -> public boolean isCache();1496242568;Return if caching is enabled.;public boolean isCache() {_		return (this.cacheLimit > 0)__	};return,if,caching,is,enabled;public,boolean,is,cache,return,this,cache,limit,0
AbstractCachingViewResolver -> public boolean isCache();1502974979;Return if caching is enabled.;public boolean isCache() {_		return (this.cacheLimit > 0)__	};return,if,caching,is,enabled;public,boolean,is,cache,return,this,cache,limit,0
AbstractCachingViewResolver -> public boolean isCache();1529361191;Return if caching is enabled.;public boolean isCache() {_		return (this.cacheLimit > 0)__	};return,if,caching,is,enabled;public,boolean,is,cache,return,this,cache,limit,0
AbstractCachingViewResolver -> public boolean isCache();1530174524;Return if caching is enabled.;public boolean isCache() {_		return (this.cacheLimit > 0)__	};return,if,caching,is,enabled;public,boolean,is,cache,return,this,cache,limit,0
AbstractCachingViewResolver -> public boolean isCache();1530174524;Return if caching is enabled.;public boolean isCache() {_		return (this.cacheLimit > 0)__	};return,if,caching,is,enabled;public,boolean,is,cache,return,this,cache,limit,0
AbstractCachingViewResolver -> public int getCacheLimit();1355279385;Return the maximum number of entries for the view cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,the,view,cache;public,int,get,cache,limit,return,this,cache,limit
AbstractCachingViewResolver -> public int getCacheLimit();1356735495;Return the maximum number of entries for the view cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,the,view,cache;public,int,get,cache,limit,return,this,cache,limit
AbstractCachingViewResolver -> public int getCacheLimit();1357119239;Return the maximum number of entries for the view cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,the,view,cache;public,int,get,cache,limit,return,this,cache,limit
AbstractCachingViewResolver -> public int getCacheLimit();1362408075;Return the maximum number of entries for the view cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,the,view,cache;public,int,get,cache,limit,return,this,cache,limit
AbstractCachingViewResolver -> public int getCacheLimit();1368482696;Return the maximum number of entries for the view cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,the,view,cache;public,int,get,cache,limit,return,this,cache,limit
AbstractCachingViewResolver -> public int getCacheLimit();1467667858;Return the maximum number of entries for the view cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,the,view,cache;public,int,get,cache,limit,return,this,cache,limit
AbstractCachingViewResolver -> public int getCacheLimit();1467730834;Return the maximum number of entries for the view cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,the,view,cache;public,int,get,cache,limit,return,this,cache,limit
AbstractCachingViewResolver -> public int getCacheLimit();1477045587;Return the maximum number of entries for the view cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,the,view,cache;public,int,get,cache,limit,return,this,cache,limit
AbstractCachingViewResolver -> public int getCacheLimit();1495868221;Return the maximum number of entries for the view cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,the,view,cache;public,int,get,cache,limit,return,this,cache,limit
AbstractCachingViewResolver -> public int getCacheLimit();1496242568;Return the maximum number of entries for the view cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,the,view,cache;public,int,get,cache,limit,return,this,cache,limit
AbstractCachingViewResolver -> public int getCacheLimit();1502974979;Return the maximum number of entries for the view cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,the,view,cache;public,int,get,cache,limit,return,this,cache,limit
AbstractCachingViewResolver -> public int getCacheLimit();1529361191;Return the maximum number of entries for the view cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,the,view,cache;public,int,get,cache,limit,return,this,cache,limit
AbstractCachingViewResolver -> public int getCacheLimit();1530174524;Return the maximum number of entries for the view cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,the,view,cache;public,int,get,cache,limit,return,this,cache,limit
AbstractCachingViewResolver -> public int getCacheLimit();1530174524;Return the maximum number of entries for the view cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,the,view,cache;public,int,get,cache,limit,return,this,cache,limit
AbstractCachingViewResolver -> public void clearCache();1328020251;Clear the entire view cache, removing all cached view objects._Subsequent resolve calls will lead to recreation of demanded view objects.;public void clearCache() {_		logger.debug("Clearing entire view cache")__		synchronized (this.viewCache) {_			this.viewCache.clear()__		}_	};clear,the,entire,view,cache,removing,all,cached,view,objects,subsequent,resolve,calls,will,lead,to,recreation,of,demanded,view,objects;public,void,clear,cache,logger,debug,clearing,entire,view,cache,synchronized,this,view,cache,this,view,cache,clear
AbstractCachingViewResolver -> public void clearCache();1355279385;Clear the entire view cache, removing all cached view objects._Subsequent resolve calls will lead to recreation of demanded view objects.;public void clearCache() {_		logger.debug("Clearing entire view cache")__		synchronized (this.viewCache) {_			this.viewCache.clear()__		}_	};clear,the,entire,view,cache,removing,all,cached,view,objects,subsequent,resolve,calls,will,lead,to,recreation,of,demanded,view,objects;public,void,clear,cache,logger,debug,clearing,entire,view,cache,synchronized,this,view,cache,this,view,cache,clear
AbstractCachingViewResolver -> public void clearCache();1356735495;Clear the entire view cache, removing all cached view objects._Subsequent resolve calls will lead to recreation of demanded view objects.;public void clearCache() {_		logger.debug("Clearing entire view cache")__		synchronized (this.viewCache) {_			this.viewCache.clear()__		}_	};clear,the,entire,view,cache,removing,all,cached,view,objects,subsequent,resolve,calls,will,lead,to,recreation,of,demanded,view,objects;public,void,clear,cache,logger,debug,clearing,entire,view,cache,synchronized,this,view,cache,this,view,cache,clear
AbstractCachingViewResolver -> public void clearCache();1357119239;Clear the entire view cache, removing all cached view objects._Subsequent resolve calls will lead to recreation of demanded view objects.;public void clearCache() {_		logger.debug("Clearing entire view cache")__		synchronized (this.viewCache) {_			this.viewCache.clear()__		}_	};clear,the,entire,view,cache,removing,all,cached,view,objects,subsequent,resolve,calls,will,lead,to,recreation,of,demanded,view,objects;public,void,clear,cache,logger,debug,clearing,entire,view,cache,synchronized,this,view,cache,this,view,cache,clear
AbstractCachingViewResolver -> public void clearCache();1362408075;Clear the entire view cache, removing all cached view objects._Subsequent resolve calls will lead to recreation of demanded view objects.;public void clearCache() {_		logger.debug("Clearing entire view cache")__		synchronized (this.viewCreationCache) {_			this.viewAccessCache.clear()__			this.viewCreationCache.clear()__		}_	};clear,the,entire,view,cache,removing,all,cached,view,objects,subsequent,resolve,calls,will,lead,to,recreation,of,demanded,view,objects;public,void,clear,cache,logger,debug,clearing,entire,view,cache,synchronized,this,view,creation,cache,this,view,access,cache,clear,this,view,creation,cache,clear
AbstractCachingViewResolver -> public void clearCache();1368482696;Clear the entire view cache, removing all cached view objects._Subsequent resolve calls will lead to recreation of demanded view objects.;public void clearCache() {_		logger.debug("Clearing entire view cache")__		synchronized (this.viewCreationCache) {_			this.viewAccessCache.clear()__			this.viewCreationCache.clear()__		}_	};clear,the,entire,view,cache,removing,all,cached,view,objects,subsequent,resolve,calls,will,lead,to,recreation,of,demanded,view,objects;public,void,clear,cache,logger,debug,clearing,entire,view,cache,synchronized,this,view,creation,cache,this,view,access,cache,clear,this,view,creation,cache,clear
AbstractCachingViewResolver -> public void clearCache();1467667858;Clear the entire view cache, removing all cached view objects._Subsequent resolve calls will lead to recreation of demanded view objects.;public void clearCache() {_		logger.debug("Clearing entire view cache")__		synchronized (this.viewCreationCache) {_			this.viewAccessCache.clear()__			this.viewCreationCache.clear()__		}_	};clear,the,entire,view,cache,removing,all,cached,view,objects,subsequent,resolve,calls,will,lead,to,recreation,of,demanded,view,objects;public,void,clear,cache,logger,debug,clearing,entire,view,cache,synchronized,this,view,creation,cache,this,view,access,cache,clear,this,view,creation,cache,clear
AbstractCachingViewResolver -> public void clearCache();1467730834;Clear the entire view cache, removing all cached view objects._Subsequent resolve calls will lead to recreation of demanded view objects.;public void clearCache() {_		logger.debug("Clearing entire view cache")__		synchronized (this.viewCreationCache) {_			this.viewAccessCache.clear()__			this.viewCreationCache.clear()__		}_	};clear,the,entire,view,cache,removing,all,cached,view,objects,subsequent,resolve,calls,will,lead,to,recreation,of,demanded,view,objects;public,void,clear,cache,logger,debug,clearing,entire,view,cache,synchronized,this,view,creation,cache,this,view,access,cache,clear,this,view,creation,cache,clear
AbstractCachingViewResolver -> public void clearCache();1477045587;Clear the entire view cache, removing all cached view objects._Subsequent resolve calls will lead to recreation of demanded view objects.;public void clearCache() {_		logger.debug("Clearing entire view cache")__		synchronized (this.viewCreationCache) {_			this.viewAccessCache.clear()__			this.viewCreationCache.clear()__		}_	};clear,the,entire,view,cache,removing,all,cached,view,objects,subsequent,resolve,calls,will,lead,to,recreation,of,demanded,view,objects;public,void,clear,cache,logger,debug,clearing,entire,view,cache,synchronized,this,view,creation,cache,this,view,access,cache,clear,this,view,creation,cache,clear
AbstractCachingViewResolver -> public void clearCache();1495868221;Clear the entire view cache, removing all cached view objects._Subsequent resolve calls will lead to recreation of demanded view objects.;public void clearCache() {_		logger.debug("Clearing entire view cache")__		synchronized (this.viewCreationCache) {_			this.viewAccessCache.clear()__			this.viewCreationCache.clear()__		}_	};clear,the,entire,view,cache,removing,all,cached,view,objects,subsequent,resolve,calls,will,lead,to,recreation,of,demanded,view,objects;public,void,clear,cache,logger,debug,clearing,entire,view,cache,synchronized,this,view,creation,cache,this,view,access,cache,clear,this,view,creation,cache,clear
AbstractCachingViewResolver -> public void clearCache();1496242568;Clear the entire view cache, removing all cached view objects._Subsequent resolve calls will lead to recreation of demanded view objects.;public void clearCache() {_		logger.debug("Clearing entire view cache")__		synchronized (this.viewCreationCache) {_			this.viewAccessCache.clear()__			this.viewCreationCache.clear()__		}_	};clear,the,entire,view,cache,removing,all,cached,view,objects,subsequent,resolve,calls,will,lead,to,recreation,of,demanded,view,objects;public,void,clear,cache,logger,debug,clearing,entire,view,cache,synchronized,this,view,creation,cache,this,view,access,cache,clear,this,view,creation,cache,clear
AbstractCachingViewResolver -> public void clearCache();1502974979;Clear the entire view cache, removing all cached view objects._Subsequent resolve calls will lead to recreation of demanded view objects.;public void clearCache() {_		logger.debug("Clearing entire view cache")__		synchronized (this.viewCreationCache) {_			this.viewAccessCache.clear()__			this.viewCreationCache.clear()__		}_	};clear,the,entire,view,cache,removing,all,cached,view,objects,subsequent,resolve,calls,will,lead,to,recreation,of,demanded,view,objects;public,void,clear,cache,logger,debug,clearing,entire,view,cache,synchronized,this,view,creation,cache,this,view,access,cache,clear,this,view,creation,cache,clear
AbstractCachingViewResolver -> public void clearCache();1529361191;Clear the entire view cache, removing all cached view objects._Subsequent resolve calls will lead to recreation of demanded view objects.;public void clearCache() {_		logger.debug("Clearing all views from the cache")__		synchronized (this.viewCreationCache) {_			this.viewAccessCache.clear()__			this.viewCreationCache.clear()__		}_	};clear,the,entire,view,cache,removing,all,cached,view,objects,subsequent,resolve,calls,will,lead,to,recreation,of,demanded,view,objects;public,void,clear,cache,logger,debug,clearing,all,views,from,the,cache,synchronized,this,view,creation,cache,this,view,access,cache,clear,this,view,creation,cache,clear
AbstractCachingViewResolver -> public void clearCache();1530174524;Clear the entire view cache, removing all cached view objects._Subsequent resolve calls will lead to recreation of demanded view objects.;public void clearCache() {_		logger.debug("Clearing all views from the cache")__		synchronized (this.viewCreationCache) {_			this.viewAccessCache.clear()__			this.viewCreationCache.clear()__		}_	};clear,the,entire,view,cache,removing,all,cached,view,objects,subsequent,resolve,calls,will,lead,to,recreation,of,demanded,view,objects;public,void,clear,cache,logger,debug,clearing,all,views,from,the,cache,synchronized,this,view,creation,cache,this,view,access,cache,clear,this,view,creation,cache,clear
AbstractCachingViewResolver -> public void clearCache();1530174524;Clear the entire view cache, removing all cached view objects._Subsequent resolve calls will lead to recreation of demanded view objects.;public void clearCache() {_		logger.debug("Clearing all views from the cache")__		synchronized (this.viewCreationCache) {_			this.viewAccessCache.clear()__			this.viewCreationCache.clear()__		}_	};clear,the,entire,view,cache,removing,all,cached,view,objects,subsequent,resolve,calls,will,lead,to,recreation,of,demanded,view,objects;public,void,clear,cache,logger,debug,clearing,all,views,from,the,cache,synchronized,this,view,creation,cache,this,view,access,cache,clear,this,view,creation,cache,clear
AbstractCachingViewResolver -> @Nullable 	protected View createView(String viewName, Locale locale) throws Exception;1495868221;Create the actual View object._<p>The default implementation delegates to {@link #loadView}._This can be overridden to resolve certain view names in a special fashion,_before delegating to the actual {@code loadView} implementation_provided by the subclass._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #loadView;@Nullable_	protected View createView(String viewName, Locale locale) throws Exception {_		return loadView(viewName, locale)__	};create,the,actual,view,object,p,the,default,implementation,delegates,to,link,load,view,this,can,be,overridden,to,resolve,certain,view,names,in,a,special,fashion,before,delegating,to,the,actual,code,load,view,implementation,provided,by,the,subclass,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,load,view;nullable,protected,view,create,view,string,view,name,locale,locale,throws,exception,return,load,view,view,name,locale
AbstractCachingViewResolver -> @Nullable 	protected View createView(String viewName, Locale locale) throws Exception;1496242568;Create the actual View object._<p>The default implementation delegates to {@link #loadView}._This can be overridden to resolve certain view names in a special fashion,_before delegating to the actual {@code loadView} implementation_provided by the subclass._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #loadView;@Nullable_	protected View createView(String viewName, Locale locale) throws Exception {_		return loadView(viewName, locale)__	};create,the,actual,view,object,p,the,default,implementation,delegates,to,link,load,view,this,can,be,overridden,to,resolve,certain,view,names,in,a,special,fashion,before,delegating,to,the,actual,code,load,view,implementation,provided,by,the,subclass,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,load,view;nullable,protected,view,create,view,string,view,name,locale,locale,throws,exception,return,load,view,view,name,locale
AbstractCachingViewResolver -> @Nullable 	protected View createView(String viewName, Locale locale) throws Exception;1502974979;Create the actual View object._<p>The default implementation delegates to {@link #loadView}._This can be overridden to resolve certain view names in a special fashion,_before delegating to the actual {@code loadView} implementation_provided by the subclass._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #loadView;@Nullable_	protected View createView(String viewName, Locale locale) throws Exception {_		return loadView(viewName, locale)__	};create,the,actual,view,object,p,the,default,implementation,delegates,to,link,load,view,this,can,be,overridden,to,resolve,certain,view,names,in,a,special,fashion,before,delegating,to,the,actual,code,load,view,implementation,provided,by,the,subclass,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,load,view;nullable,protected,view,create,view,string,view,name,locale,locale,throws,exception,return,load,view,view,name,locale
AbstractCachingViewResolver -> @Nullable 	protected View createView(String viewName, Locale locale) throws Exception;1529361191;Create the actual View object._<p>The default implementation delegates to {@link #loadView}._This can be overridden to resolve certain view names in a special fashion,_before delegating to the actual {@code loadView} implementation_provided by the subclass._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #loadView;@Nullable_	protected View createView(String viewName, Locale locale) throws Exception {_		return loadView(viewName, locale)__	};create,the,actual,view,object,p,the,default,implementation,delegates,to,link,load,view,this,can,be,overridden,to,resolve,certain,view,names,in,a,special,fashion,before,delegating,to,the,actual,code,load,view,implementation,provided,by,the,subclass,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,load,view;nullable,protected,view,create,view,string,view,name,locale,locale,throws,exception,return,load,view,view,name,locale
AbstractCachingViewResolver -> @Nullable 	protected View createView(String viewName, Locale locale) throws Exception;1530174524;Create the actual View object._<p>The default implementation delegates to {@link #loadView}._This can be overridden to resolve certain view names in a special fashion,_before delegating to the actual {@code loadView} implementation_provided by the subclass._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #loadView;@Nullable_	protected View createView(String viewName, Locale locale) throws Exception {_		return loadView(viewName, locale)__	};create,the,actual,view,object,p,the,default,implementation,delegates,to,link,load,view,this,can,be,overridden,to,resolve,certain,view,names,in,a,special,fashion,before,delegating,to,the,actual,code,load,view,implementation,provided,by,the,subclass,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,load,view;nullable,protected,view,create,view,string,view,name,locale,locale,throws,exception,return,load,view,view,name,locale
AbstractCachingViewResolver -> @Nullable 	protected View createView(String viewName, Locale locale) throws Exception;1530174524;Create the actual View object._<p>The default implementation delegates to {@link #loadView}._This can be overridden to resolve certain view names in a special fashion,_before delegating to the actual {@code loadView} implementation_provided by the subclass._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #loadView;@Nullable_	protected View createView(String viewName, Locale locale) throws Exception {_		return loadView(viewName, locale)__	};create,the,actual,view,object,p,the,default,implementation,delegates,to,link,load,view,this,can,be,overridden,to,resolve,certain,view,names,in,a,special,fashion,before,delegating,to,the,actual,code,load,view,implementation,provided,by,the,subclass,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,load,view;nullable,protected,view,create,view,string,view,name,locale,locale,throws,exception,return,load,view,view,name,locale
AbstractCachingViewResolver -> public void removeFromCache(String viewName, Locale locale);1328020251;Provides functionality to clear the cache for a certain view._<p>This can be handy in case developer are able to modify views_(e.g. Velocity templates) at runtime after which you'd need to_clear the cache for the specified view._@param viewName the view name for which the cached view object_(if any) needs to be removed_@param locale the locale for which the view object should be removed;public void removeFromCache(String viewName, Locale locale) {_		if (!this.cache) {_			logger.warn("View caching is SWITCHED OFF -- removal not necessary")_			_		}_		else {_			Object cacheKey = getCacheKey(viewName, locale)__			Object cachedView__			synchronized (this.viewCache) {_				cachedView = this.viewCache.remove(cacheKey)__			}_			if (cachedView == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("No cached instance for view '" + cacheKey + "' was found")__				}_			} _			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Cache for view " + cacheKey + " has been cleared")__				}_			}_		}_	};provides,functionality,to,clear,the,cache,for,a,certain,view,p,this,can,be,handy,in,case,developer,are,able,to,modify,views,e,g,velocity,templates,at,runtime,after,which,you,d,need,to,clear,the,cache,for,the,specified,view,param,view,name,the,view,name,for,which,the,cached,view,object,if,any,needs,to,be,removed,param,locale,the,locale,for,which,the,view,object,should,be,removed;public,void,remove,from,cache,string,view,name,locale,locale,if,this,cache,logger,warn,view,caching,is,switched,off,removal,not,necessary,else,object,cache,key,get,cache,key,view,name,locale,object,cached,view,synchronized,this,view,cache,cached,view,this,view,cache,remove,cache,key,if,cached,view,null,if,logger,is,debug,enabled,logger,debug,no,cached,instance,for,view,cache,key,was,found,else,if,logger,is,debug,enabled,logger,debug,cache,for,view,cache,key,has,been,cleared
AbstractCachingViewResolver -> public void removeFromCache(String viewName, Locale locale);1355279385;Provides functionality to clear the cache for a certain view._<p>This can be handy in case developer are able to modify views_(e.g. Velocity templates) at runtime after which you'd need to_clear the cache for the specified view._@param viewName the view name for which the cached view object_(if any) needs to be removed_@param locale the locale for which the view object should be removed;public void removeFromCache(String viewName, Locale locale) {_		if (!isCache()) {_			logger.warn("View caching is SWITCHED OFF -- removal not necessary")_			_		}_		else {_			Object cacheKey = getCacheKey(viewName, locale)__			Object cachedView__			synchronized (this.viewCache) {_				cachedView = this.viewCache.remove(cacheKey)__			}_			if (cachedView == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("No cached instance for view '" + cacheKey + "' was found")__				}_			} _			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Cache for view " + cacheKey + " has been cleared")__				}_			}_		}_	};provides,functionality,to,clear,the,cache,for,a,certain,view,p,this,can,be,handy,in,case,developer,are,able,to,modify,views,e,g,velocity,templates,at,runtime,after,which,you,d,need,to,clear,the,cache,for,the,specified,view,param,view,name,the,view,name,for,which,the,cached,view,object,if,any,needs,to,be,removed,param,locale,the,locale,for,which,the,view,object,should,be,removed;public,void,remove,from,cache,string,view,name,locale,locale,if,is,cache,logger,warn,view,caching,is,switched,off,removal,not,necessary,else,object,cache,key,get,cache,key,view,name,locale,object,cached,view,synchronized,this,view,cache,cached,view,this,view,cache,remove,cache,key,if,cached,view,null,if,logger,is,debug,enabled,logger,debug,no,cached,instance,for,view,cache,key,was,found,else,if,logger,is,debug,enabled,logger,debug,cache,for,view,cache,key,has,been,cleared
AbstractCachingViewResolver -> public void removeFromCache(String viewName, Locale locale);1356735495;Provides functionality to clear the cache for a certain view._<p>This can be handy in case developer are able to modify views_(e.g. Velocity templates) at runtime after which you'd need to_clear the cache for the specified view._@param viewName the view name for which the cached view object_(if any) needs to be removed_@param locale the locale for which the view object should be removed;public void removeFromCache(String viewName, Locale locale) {_		if (!isCache()) {_			logger.warn("View caching is SWITCHED OFF -- removal not necessary")__		}_		else {_			Object cacheKey = getCacheKey(viewName, locale)__			Object cachedView__			synchronized (this.viewCache) {_				cachedView = this.viewCache.remove(cacheKey)__			}_			if (cachedView == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("No cached instance for view '" + cacheKey + "' was found")__				}_			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Cache for view " + cacheKey + " has been cleared")__				}_			}_		}_	};provides,functionality,to,clear,the,cache,for,a,certain,view,p,this,can,be,handy,in,case,developer,are,able,to,modify,views,e,g,velocity,templates,at,runtime,after,which,you,d,need,to,clear,the,cache,for,the,specified,view,param,view,name,the,view,name,for,which,the,cached,view,object,if,any,needs,to,be,removed,param,locale,the,locale,for,which,the,view,object,should,be,removed;public,void,remove,from,cache,string,view,name,locale,locale,if,is,cache,logger,warn,view,caching,is,switched,off,removal,not,necessary,else,object,cache,key,get,cache,key,view,name,locale,object,cached,view,synchronized,this,view,cache,cached,view,this,view,cache,remove,cache,key,if,cached,view,null,if,logger,is,debug,enabled,logger,debug,no,cached,instance,for,view,cache,key,was,found,else,if,logger,is,debug,enabled,logger,debug,cache,for,view,cache,key,has,been,cleared
AbstractCachingViewResolver -> public void removeFromCache(String viewName, Locale locale);1357119239;Provides functionality to clear the cache for a certain view._<p>This can be handy in case developer are able to modify views_(e.g. Velocity templates) at runtime after which you'd need to_clear the cache for the specified view._@param viewName the view name for which the cached view object_(if any) needs to be removed_@param locale the locale for which the view object should be removed;public void removeFromCache(String viewName, Locale locale) {_		if (!isCache()) {_			logger.warn("View caching is SWITCHED OFF -- removal not necessary")__		}_		else {_			Object cacheKey = getCacheKey(viewName, locale)__			Object cachedView__			synchronized (this.viewCache) {_				cachedView = this.viewCache.remove(cacheKey)__			}_			if (cachedView == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("No cached instance for view '" + cacheKey + "' was found")__				}_			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Cache for view " + cacheKey + " has been cleared")__				}_			}_		}_	};provides,functionality,to,clear,the,cache,for,a,certain,view,p,this,can,be,handy,in,case,developer,are,able,to,modify,views,e,g,velocity,templates,at,runtime,after,which,you,d,need,to,clear,the,cache,for,the,specified,view,param,view,name,the,view,name,for,which,the,cached,view,object,if,any,needs,to,be,removed,param,locale,the,locale,for,which,the,view,object,should,be,removed;public,void,remove,from,cache,string,view,name,locale,locale,if,is,cache,logger,warn,view,caching,is,switched,off,removal,not,necessary,else,object,cache,key,get,cache,key,view,name,locale,object,cached,view,synchronized,this,view,cache,cached,view,this,view,cache,remove,cache,key,if,cached,view,null,if,logger,is,debug,enabled,logger,debug,no,cached,instance,for,view,cache,key,was,found,else,if,logger,is,debug,enabled,logger,debug,cache,for,view,cache,key,has,been,cleared
AbstractCachingViewResolver -> public void removeFromCache(String viewName, Locale locale);1362408075;Provides functionality to clear the cache for a certain view._<p>This can be handy in case developer are able to modify views_(e.g. Velocity templates) at runtime after which you'd need to_clear the cache for the specified view._@param viewName the view name for which the cached view object_(if any) needs to be removed_@param locale the locale for which the view object should be removed;public void removeFromCache(String viewName, Locale locale) {_		if (!isCache()) {_			logger.warn("View caching is SWITCHED OFF -- removal not necessary")__		}_		else {_			Object cacheKey = getCacheKey(viewName, locale)__			Object cachedView__			synchronized (this.viewCreationCache) {_				this.viewAccessCache.remove(cacheKey)__				cachedView = this.viewCreationCache.remove(cacheKey)__			}_			if (logger.isDebugEnabled()) {_				_				if (cachedView == null) {_					logger.debug("No cached instance for view '" + cacheKey + "' was found")__				}_				else {_					logger.debug("Cache for view " + cacheKey + " has been cleared")__				}_			}_		}_	};provides,functionality,to,clear,the,cache,for,a,certain,view,p,this,can,be,handy,in,case,developer,are,able,to,modify,views,e,g,velocity,templates,at,runtime,after,which,you,d,need,to,clear,the,cache,for,the,specified,view,param,view,name,the,view,name,for,which,the,cached,view,object,if,any,needs,to,be,removed,param,locale,the,locale,for,which,the,view,object,should,be,removed;public,void,remove,from,cache,string,view,name,locale,locale,if,is,cache,logger,warn,view,caching,is,switched,off,removal,not,necessary,else,object,cache,key,get,cache,key,view,name,locale,object,cached,view,synchronized,this,view,creation,cache,this,view,access,cache,remove,cache,key,cached,view,this,view,creation,cache,remove,cache,key,if,logger,is,debug,enabled,if,cached,view,null,logger,debug,no,cached,instance,for,view,cache,key,was,found,else,logger,debug,cache,for,view,cache,key,has,been,cleared
AbstractCachingViewResolver -> public void removeFromCache(String viewName, Locale locale);1368482696;Provides functionality to clear the cache for a certain view._<p>This can be handy in case developer are able to modify views_(e.g. Velocity templates) at runtime after which you'd need to_clear the cache for the specified view._@param viewName the view name for which the cached view object_(if any) needs to be removed_@param locale the locale for which the view object should be removed;public void removeFromCache(String viewName, Locale locale) {_		if (!isCache()) {_			logger.warn("View caching is SWITCHED OFF -- removal not necessary")__		}_		else {_			Object cacheKey = getCacheKey(viewName, locale)__			Object cachedView__			synchronized (this.viewCreationCache) {_				this.viewAccessCache.remove(cacheKey)__				cachedView = this.viewCreationCache.remove(cacheKey)__			}_			if (logger.isDebugEnabled()) {_				_				if (cachedView == null) {_					logger.debug("No cached instance for view '" + cacheKey + "' was found")__				}_				else {_					logger.debug("Cache for view " + cacheKey + " has been cleared")__				}_			}_		}_	};provides,functionality,to,clear,the,cache,for,a,certain,view,p,this,can,be,handy,in,case,developer,are,able,to,modify,views,e,g,velocity,templates,at,runtime,after,which,you,d,need,to,clear,the,cache,for,the,specified,view,param,view,name,the,view,name,for,which,the,cached,view,object,if,any,needs,to,be,removed,param,locale,the,locale,for,which,the,view,object,should,be,removed;public,void,remove,from,cache,string,view,name,locale,locale,if,is,cache,logger,warn,view,caching,is,switched,off,removal,not,necessary,else,object,cache,key,get,cache,key,view,name,locale,object,cached,view,synchronized,this,view,creation,cache,this,view,access,cache,remove,cache,key,cached,view,this,view,creation,cache,remove,cache,key,if,logger,is,debug,enabled,if,cached,view,null,logger,debug,no,cached,instance,for,view,cache,key,was,found,else,logger,debug,cache,for,view,cache,key,has,been,cleared
AbstractCachingViewResolver -> public void removeFromCache(String viewName, Locale locale);1467667858;Provides functionality to clear the cache for a certain view._<p>This can be handy in case developer are able to modify views_(e.g. FreeMarker templates) at runtime after which you'd need to_clear the cache for the specified view._@param viewName the view name for which the cached view object_(if any) needs to be removed_@param locale the locale for which the view object should be removed;public void removeFromCache(String viewName, Locale locale) {_		if (!isCache()) {_			logger.warn("View caching is SWITCHED OFF -- removal not necessary")__		}_		else {_			Object cacheKey = getCacheKey(viewName, locale)__			Object cachedView__			synchronized (this.viewCreationCache) {_				this.viewAccessCache.remove(cacheKey)__				cachedView = this.viewCreationCache.remove(cacheKey)__			}_			if (logger.isDebugEnabled()) {_				_				if (cachedView == null) {_					logger.debug("No cached instance for view '" + cacheKey + "' was found")__				}_				else {_					logger.debug("Cache for view " + cacheKey + " has been cleared")__				}_			}_		}_	};provides,functionality,to,clear,the,cache,for,a,certain,view,p,this,can,be,handy,in,case,developer,are,able,to,modify,views,e,g,free,marker,templates,at,runtime,after,which,you,d,need,to,clear,the,cache,for,the,specified,view,param,view,name,the,view,name,for,which,the,cached,view,object,if,any,needs,to,be,removed,param,locale,the,locale,for,which,the,view,object,should,be,removed;public,void,remove,from,cache,string,view,name,locale,locale,if,is,cache,logger,warn,view,caching,is,switched,off,removal,not,necessary,else,object,cache,key,get,cache,key,view,name,locale,object,cached,view,synchronized,this,view,creation,cache,this,view,access,cache,remove,cache,key,cached,view,this,view,creation,cache,remove,cache,key,if,logger,is,debug,enabled,if,cached,view,null,logger,debug,no,cached,instance,for,view,cache,key,was,found,else,logger,debug,cache,for,view,cache,key,has,been,cleared
AbstractCachingViewResolver -> public void removeFromCache(String viewName, Locale locale);1467730834;Provides functionality to clear the cache for a certain view._<p>This can be handy in case developer are able to modify views_(e.g. FreeMarker templates) at runtime after which you'd need to_clear the cache for the specified view._@param viewName the view name for which the cached view object_(if any) needs to be removed_@param locale the locale for which the view object should be removed;public void removeFromCache(String viewName, Locale locale) {_		if (!isCache()) {_			logger.warn("View caching is SWITCHED OFF -- removal not necessary")__		}_		else {_			Object cacheKey = getCacheKey(viewName, locale)__			Object cachedView__			synchronized (this.viewCreationCache) {_				this.viewAccessCache.remove(cacheKey)__				cachedView = this.viewCreationCache.remove(cacheKey)__			}_			if (logger.isDebugEnabled()) {_				_				if (cachedView == null) {_					logger.debug("No cached instance for view '" + cacheKey + "' was found")__				}_				else {_					logger.debug("Cache for view " + cacheKey + " has been cleared")__				}_			}_		}_	};provides,functionality,to,clear,the,cache,for,a,certain,view,p,this,can,be,handy,in,case,developer,are,able,to,modify,views,e,g,free,marker,templates,at,runtime,after,which,you,d,need,to,clear,the,cache,for,the,specified,view,param,view,name,the,view,name,for,which,the,cached,view,object,if,any,needs,to,be,removed,param,locale,the,locale,for,which,the,view,object,should,be,removed;public,void,remove,from,cache,string,view,name,locale,locale,if,is,cache,logger,warn,view,caching,is,switched,off,removal,not,necessary,else,object,cache,key,get,cache,key,view,name,locale,object,cached,view,synchronized,this,view,creation,cache,this,view,access,cache,remove,cache,key,cached,view,this,view,creation,cache,remove,cache,key,if,logger,is,debug,enabled,if,cached,view,null,logger,debug,no,cached,instance,for,view,cache,key,was,found,else,logger,debug,cache,for,view,cache,key,has,been,cleared
AbstractCachingViewResolver -> public void removeFromCache(String viewName, Locale locale);1477045587;Provides functionality to clear the cache for a certain view._<p>This can be handy in case developer are able to modify views_(e.g. FreeMarker templates) at runtime after which you'd need to_clear the cache for the specified view._@param viewName the view name for which the cached view object_(if any) needs to be removed_@param locale the locale for which the view object should be removed;public void removeFromCache(String viewName, Locale locale) {_		if (!isCache()) {_			logger.warn("View caching is SWITCHED OFF -- removal not necessary")__		}_		else {_			Object cacheKey = getCacheKey(viewName, locale)__			Object cachedView__			synchronized (this.viewCreationCache) {_				this.viewAccessCache.remove(cacheKey)__				cachedView = this.viewCreationCache.remove(cacheKey)__			}_			if (logger.isDebugEnabled()) {_				_				if (cachedView == null) {_					logger.debug("No cached instance for view '" + cacheKey + "' was found")__				}_				else {_					logger.debug("Cache for view " + cacheKey + " has been cleared")__				}_			}_		}_	};provides,functionality,to,clear,the,cache,for,a,certain,view,p,this,can,be,handy,in,case,developer,are,able,to,modify,views,e,g,free,marker,templates,at,runtime,after,which,you,d,need,to,clear,the,cache,for,the,specified,view,param,view,name,the,view,name,for,which,the,cached,view,object,if,any,needs,to,be,removed,param,locale,the,locale,for,which,the,view,object,should,be,removed;public,void,remove,from,cache,string,view,name,locale,locale,if,is,cache,logger,warn,view,caching,is,switched,off,removal,not,necessary,else,object,cache,key,get,cache,key,view,name,locale,object,cached,view,synchronized,this,view,creation,cache,this,view,access,cache,remove,cache,key,cached,view,this,view,creation,cache,remove,cache,key,if,logger,is,debug,enabled,if,cached,view,null,logger,debug,no,cached,instance,for,view,cache,key,was,found,else,logger,debug,cache,for,view,cache,key,has,been,cleared
AbstractCachingViewResolver -> public void removeFromCache(String viewName, Locale locale);1495868221;Provides functionality to clear the cache for a certain view._<p>This can be handy in case developer are able to modify views_(e.g. FreeMarker templates) at runtime after which you'd need to_clear the cache for the specified view._@param viewName the view name for which the cached view object_(if any) needs to be removed_@param locale the locale for which the view object should be removed;public void removeFromCache(String viewName, Locale locale) {_		if (!isCache()) {_			logger.warn("View caching is SWITCHED OFF -- removal not necessary")__		}_		else {_			Object cacheKey = getCacheKey(viewName, locale)__			Object cachedView__			synchronized (this.viewCreationCache) {_				this.viewAccessCache.remove(cacheKey)__				cachedView = this.viewCreationCache.remove(cacheKey)__			}_			if (logger.isDebugEnabled()) {_				_				if (cachedView == null) {_					logger.debug("No cached instance for view '" + cacheKey + "' was found")__				}_				else {_					logger.debug("Cache for view " + cacheKey + " has been cleared")__				}_			}_		}_	};provides,functionality,to,clear,the,cache,for,a,certain,view,p,this,can,be,handy,in,case,developer,are,able,to,modify,views,e,g,free,marker,templates,at,runtime,after,which,you,d,need,to,clear,the,cache,for,the,specified,view,param,view,name,the,view,name,for,which,the,cached,view,object,if,any,needs,to,be,removed,param,locale,the,locale,for,which,the,view,object,should,be,removed;public,void,remove,from,cache,string,view,name,locale,locale,if,is,cache,logger,warn,view,caching,is,switched,off,removal,not,necessary,else,object,cache,key,get,cache,key,view,name,locale,object,cached,view,synchronized,this,view,creation,cache,this,view,access,cache,remove,cache,key,cached,view,this,view,creation,cache,remove,cache,key,if,logger,is,debug,enabled,if,cached,view,null,logger,debug,no,cached,instance,for,view,cache,key,was,found,else,logger,debug,cache,for,view,cache,key,has,been,cleared
AbstractCachingViewResolver -> public void removeFromCache(String viewName, Locale locale);1496242568;Provides functionality to clear the cache for a certain view._<p>This can be handy in case developer are able to modify views_(e.g. FreeMarker templates) at runtime after which you'd need to_clear the cache for the specified view._@param viewName the view name for which the cached view object_(if any) needs to be removed_@param locale the locale for which the view object should be removed;public void removeFromCache(String viewName, Locale locale) {_		if (!isCache()) {_			logger.warn("View caching is SWITCHED OFF -- removal not necessary")__		}_		else {_			Object cacheKey = getCacheKey(viewName, locale)__			Object cachedView__			synchronized (this.viewCreationCache) {_				this.viewAccessCache.remove(cacheKey)__				cachedView = this.viewCreationCache.remove(cacheKey)__			}_			if (logger.isDebugEnabled()) {_				_				if (cachedView == null) {_					logger.debug("No cached instance for view '" + cacheKey + "' was found")__				}_				else {_					logger.debug("Cache for view " + cacheKey + " has been cleared")__				}_			}_		}_	};provides,functionality,to,clear,the,cache,for,a,certain,view,p,this,can,be,handy,in,case,developer,are,able,to,modify,views,e,g,free,marker,templates,at,runtime,after,which,you,d,need,to,clear,the,cache,for,the,specified,view,param,view,name,the,view,name,for,which,the,cached,view,object,if,any,needs,to,be,removed,param,locale,the,locale,for,which,the,view,object,should,be,removed;public,void,remove,from,cache,string,view,name,locale,locale,if,is,cache,logger,warn,view,caching,is,switched,off,removal,not,necessary,else,object,cache,key,get,cache,key,view,name,locale,object,cached,view,synchronized,this,view,creation,cache,this,view,access,cache,remove,cache,key,cached,view,this,view,creation,cache,remove,cache,key,if,logger,is,debug,enabled,if,cached,view,null,logger,debug,no,cached,instance,for,view,cache,key,was,found,else,logger,debug,cache,for,view,cache,key,has,been,cleared
AbstractCachingViewResolver -> public void removeFromCache(String viewName, Locale locale);1502974979;Provides functionality to clear the cache for a certain view._<p>This can be handy in case developer are able to modify views_(e.g. FreeMarker templates) at runtime after which you'd need to_clear the cache for the specified view._@param viewName the view name for which the cached view object_(if any) needs to be removed_@param locale the locale for which the view object should be removed;public void removeFromCache(String viewName, Locale locale) {_		if (!isCache()) {_			logger.warn("View caching is SWITCHED OFF -- removal not necessary")__		}_		else {_			Object cacheKey = getCacheKey(viewName, locale)__			Object cachedView__			synchronized (this.viewCreationCache) {_				this.viewAccessCache.remove(cacheKey)__				cachedView = this.viewCreationCache.remove(cacheKey)__			}_			if (logger.isDebugEnabled()) {_				_				if (cachedView == null) {_					logger.debug("No cached instance for view '" + cacheKey + "' was found")__				}_				else {_					logger.debug("Cache for view " + cacheKey + " has been cleared")__				}_			}_		}_	};provides,functionality,to,clear,the,cache,for,a,certain,view,p,this,can,be,handy,in,case,developer,are,able,to,modify,views,e,g,free,marker,templates,at,runtime,after,which,you,d,need,to,clear,the,cache,for,the,specified,view,param,view,name,the,view,name,for,which,the,cached,view,object,if,any,needs,to,be,removed,param,locale,the,locale,for,which,the,view,object,should,be,removed;public,void,remove,from,cache,string,view,name,locale,locale,if,is,cache,logger,warn,view,caching,is,switched,off,removal,not,necessary,else,object,cache,key,get,cache,key,view,name,locale,object,cached,view,synchronized,this,view,creation,cache,this,view,access,cache,remove,cache,key,cached,view,this,view,creation,cache,remove,cache,key,if,logger,is,debug,enabled,if,cached,view,null,logger,debug,no,cached,instance,for,view,cache,key,was,found,else,logger,debug,cache,for,view,cache,key,has,been,cleared
AbstractCachingViewResolver -> public void removeFromCache(String viewName, Locale locale);1529361191;Provides functionality to clear the cache for a certain view._<p>This can be handy in case developer are able to modify views_(e.g. FreeMarker templates) at runtime after which you'd need to_clear the cache for the specified view._@param viewName the view name for which the cached view object_(if any) needs to be removed_@param locale the locale for which the view object should be removed;public void removeFromCache(String viewName, Locale locale) {_		if (!isCache()) {_			logger.warn("Caching is OFF (removal not necessary)")__		}_		else {_			Object cacheKey = getCacheKey(viewName, locale)__			Object cachedView__			synchronized (this.viewCreationCache) {_				this.viewAccessCache.remove(cacheKey)__				cachedView = this.viewCreationCache.remove(cacheKey)__			}_			if (logger.isDebugEnabled()) {_				_				logger.debug(formatKey(cacheKey) +_						(cachedView != null ? "cleared from cache" : "not found in the cache"))__			}_		}_	};provides,functionality,to,clear,the,cache,for,a,certain,view,p,this,can,be,handy,in,case,developer,are,able,to,modify,views,e,g,free,marker,templates,at,runtime,after,which,you,d,need,to,clear,the,cache,for,the,specified,view,param,view,name,the,view,name,for,which,the,cached,view,object,if,any,needs,to,be,removed,param,locale,the,locale,for,which,the,view,object,should,be,removed;public,void,remove,from,cache,string,view,name,locale,locale,if,is,cache,logger,warn,caching,is,off,removal,not,necessary,else,object,cache,key,get,cache,key,view,name,locale,object,cached,view,synchronized,this,view,creation,cache,this,view,access,cache,remove,cache,key,cached,view,this,view,creation,cache,remove,cache,key,if,logger,is,debug,enabled,logger,debug,format,key,cache,key,cached,view,null,cleared,from,cache,not,found,in,the,cache
AbstractCachingViewResolver -> public void removeFromCache(String viewName, Locale locale);1530174524;Provides functionality to clear the cache for a certain view._<p>This can be handy in case developer are able to modify views_(e.g. FreeMarker templates) at runtime after which you'd need to_clear the cache for the specified view._@param viewName the view name for which the cached view object_(if any) needs to be removed_@param locale the locale for which the view object should be removed;public void removeFromCache(String viewName, Locale locale) {_		if (!isCache()) {_			logger.warn("Caching is OFF (removal not necessary)")__		}_		else {_			Object cacheKey = getCacheKey(viewName, locale)__			Object cachedView__			synchronized (this.viewCreationCache) {_				this.viewAccessCache.remove(cacheKey)__				cachedView = this.viewCreationCache.remove(cacheKey)__			}_			if (logger.isDebugEnabled()) {_				_				logger.debug(formatKey(cacheKey) +_						(cachedView != null ? "cleared from cache" : "not found in the cache"))__			}_		}_	};provides,functionality,to,clear,the,cache,for,a,certain,view,p,this,can,be,handy,in,case,developer,are,able,to,modify,views,e,g,free,marker,templates,at,runtime,after,which,you,d,need,to,clear,the,cache,for,the,specified,view,param,view,name,the,view,name,for,which,the,cached,view,object,if,any,needs,to,be,removed,param,locale,the,locale,for,which,the,view,object,should,be,removed;public,void,remove,from,cache,string,view,name,locale,locale,if,is,cache,logger,warn,caching,is,off,removal,not,necessary,else,object,cache,key,get,cache,key,view,name,locale,object,cached,view,synchronized,this,view,creation,cache,this,view,access,cache,remove,cache,key,cached,view,this,view,creation,cache,remove,cache,key,if,logger,is,debug,enabled,logger,debug,format,key,cache,key,cached,view,null,cleared,from,cache,not,found,in,the,cache
AbstractCachingViewResolver -> public void removeFromCache(String viewName, Locale locale);1530174524;Provides functionality to clear the cache for a certain view._<p>This can be handy in case developer are able to modify views_(e.g. FreeMarker templates) at runtime after which you'd need to_clear the cache for the specified view._@param viewName the view name for which the cached view object_(if any) needs to be removed_@param locale the locale for which the view object should be removed;public void removeFromCache(String viewName, Locale locale) {_		if (!isCache()) {_			logger.warn("Caching is OFF (removal not necessary)")__		}_		else {_			Object cacheKey = getCacheKey(viewName, locale)__			Object cachedView__			synchronized (this.viewCreationCache) {_				this.viewAccessCache.remove(cacheKey)__				cachedView = this.viewCreationCache.remove(cacheKey)__			}_			if (logger.isDebugEnabled()) {_				_				logger.debug(formatKey(cacheKey) +_						(cachedView != null ? "cleared from cache" : "not found in the cache"))__			}_		}_	};provides,functionality,to,clear,the,cache,for,a,certain,view,p,this,can,be,handy,in,case,developer,are,able,to,modify,views,e,g,free,marker,templates,at,runtime,after,which,you,d,need,to,clear,the,cache,for,the,specified,view,param,view,name,the,view,name,for,which,the,cached,view,object,if,any,needs,to,be,removed,param,locale,the,locale,for,which,the,view,object,should,be,removed;public,void,remove,from,cache,string,view,name,locale,locale,if,is,cache,logger,warn,caching,is,off,removal,not,necessary,else,object,cache,key,get,cache,key,view,name,locale,object,cached,view,synchronized,this,view,creation,cache,this,view,access,cache,remove,cache,key,cached,view,this,view,creation,cache,remove,cache,key,if,logger,is,debug,enabled,logger,debug,format,key,cache,key,cached,view,null,cleared,from,cache,not,found,in,the,cache
AbstractCachingViewResolver -> protected View createView(String viewName, Locale locale) throws Exception;1328020251;Create the actual View object._<p>The default implementation delegates to {@link #loadView}._This can be overridden to resolve certain view names in a special fashion,_before delegating to the actual <code>loadView</code> implementation_provided by the subclass._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or <code>null</code> if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #loadView;protected View createView(String viewName, Locale locale) throws Exception {_		return loadView(viewName, locale)__	};create,the,actual,view,object,p,the,default,implementation,delegates,to,link,load,view,this,can,be,overridden,to,resolve,certain,view,names,in,a,special,fashion,before,delegating,to,the,actual,code,load,view,code,implementation,provided,by,the,subclass,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,code,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,load,view;protected,view,create,view,string,view,name,locale,locale,throws,exception,return,load,view,view,name,locale
AbstractCachingViewResolver -> protected View createView(String viewName, Locale locale) throws Exception;1355279385;Create the actual View object._<p>The default implementation delegates to {@link #loadView}._This can be overridden to resolve certain view names in a special fashion,_before delegating to the actual <code>loadView</code> implementation_provided by the subclass._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or <code>null</code> if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #loadView;protected View createView(String viewName, Locale locale) throws Exception {_		return loadView(viewName, locale)__	};create,the,actual,view,object,p,the,default,implementation,delegates,to,link,load,view,this,can,be,overridden,to,resolve,certain,view,names,in,a,special,fashion,before,delegating,to,the,actual,code,load,view,code,implementation,provided,by,the,subclass,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,code,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,load,view;protected,view,create,view,string,view,name,locale,locale,throws,exception,return,load,view,view,name,locale
AbstractCachingViewResolver -> protected View createView(String viewName, Locale locale) throws Exception;1356735495;Create the actual View object._<p>The default implementation delegates to {@link #loadView}._This can be overridden to resolve certain view names in a special fashion,_before delegating to the actual {@code loadView} implementation_provided by the subclass._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #loadView;protected View createView(String viewName, Locale locale) throws Exception {_		return loadView(viewName, locale)__	};create,the,actual,view,object,p,the,default,implementation,delegates,to,link,load,view,this,can,be,overridden,to,resolve,certain,view,names,in,a,special,fashion,before,delegating,to,the,actual,code,load,view,implementation,provided,by,the,subclass,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,load,view;protected,view,create,view,string,view,name,locale,locale,throws,exception,return,load,view,view,name,locale
AbstractCachingViewResolver -> protected View createView(String viewName, Locale locale) throws Exception;1357119239;Create the actual View object._<p>The default implementation delegates to {@link #loadView}._This can be overridden to resolve certain view names in a special fashion,_before delegating to the actual {@code loadView} implementation_provided by the subclass._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #loadView;protected View createView(String viewName, Locale locale) throws Exception {_		return loadView(viewName, locale)__	};create,the,actual,view,object,p,the,default,implementation,delegates,to,link,load,view,this,can,be,overridden,to,resolve,certain,view,names,in,a,special,fashion,before,delegating,to,the,actual,code,load,view,implementation,provided,by,the,subclass,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,load,view;protected,view,create,view,string,view,name,locale,locale,throws,exception,return,load,view,view,name,locale
AbstractCachingViewResolver -> protected View createView(String viewName, Locale locale) throws Exception;1362408075;Create the actual View object._<p>The default implementation delegates to {@link #loadView}._This can be overridden to resolve certain view names in a special fashion,_before delegating to the actual {@code loadView} implementation_provided by the subclass._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #loadView;protected View createView(String viewName, Locale locale) throws Exception {_		return loadView(viewName, locale)__	};create,the,actual,view,object,p,the,default,implementation,delegates,to,link,load,view,this,can,be,overridden,to,resolve,certain,view,names,in,a,special,fashion,before,delegating,to,the,actual,code,load,view,implementation,provided,by,the,subclass,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,load,view;protected,view,create,view,string,view,name,locale,locale,throws,exception,return,load,view,view,name,locale
AbstractCachingViewResolver -> protected View createView(String viewName, Locale locale) throws Exception;1368482696;Create the actual View object._<p>The default implementation delegates to {@link #loadView}._This can be overridden to resolve certain view names in a special fashion,_before delegating to the actual {@code loadView} implementation_provided by the subclass._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #loadView;protected View createView(String viewName, Locale locale) throws Exception {_		return loadView(viewName, locale)__	};create,the,actual,view,object,p,the,default,implementation,delegates,to,link,load,view,this,can,be,overridden,to,resolve,certain,view,names,in,a,special,fashion,before,delegating,to,the,actual,code,load,view,implementation,provided,by,the,subclass,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,load,view;protected,view,create,view,string,view,name,locale,locale,throws,exception,return,load,view,view,name,locale
AbstractCachingViewResolver -> protected View createView(String viewName, Locale locale) throws Exception;1467667858;Create the actual View object._<p>The default implementation delegates to {@link #loadView}._This can be overridden to resolve certain view names in a special fashion,_before delegating to the actual {@code loadView} implementation_provided by the subclass._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #loadView;protected View createView(String viewName, Locale locale) throws Exception {_		return loadView(viewName, locale)__	};create,the,actual,view,object,p,the,default,implementation,delegates,to,link,load,view,this,can,be,overridden,to,resolve,certain,view,names,in,a,special,fashion,before,delegating,to,the,actual,code,load,view,implementation,provided,by,the,subclass,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,load,view;protected,view,create,view,string,view,name,locale,locale,throws,exception,return,load,view,view,name,locale
AbstractCachingViewResolver -> protected View createView(String viewName, Locale locale) throws Exception;1467730834;Create the actual View object._<p>The default implementation delegates to {@link #loadView}._This can be overridden to resolve certain view names in a special fashion,_before delegating to the actual {@code loadView} implementation_provided by the subclass._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #loadView;protected View createView(String viewName, Locale locale) throws Exception {_		return loadView(viewName, locale)__	};create,the,actual,view,object,p,the,default,implementation,delegates,to,link,load,view,this,can,be,overridden,to,resolve,certain,view,names,in,a,special,fashion,before,delegating,to,the,actual,code,load,view,implementation,provided,by,the,subclass,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,load,view;protected,view,create,view,string,view,name,locale,locale,throws,exception,return,load,view,view,name,locale
AbstractCachingViewResolver -> protected View createView(String viewName, Locale locale) throws Exception;1477045587;Create the actual View object._<p>The default implementation delegates to {@link #loadView}._This can be overridden to resolve certain view names in a special fashion,_before delegating to the actual {@code loadView} implementation_provided by the subclass._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #loadView;protected View createView(String viewName, Locale locale) throws Exception {_		return loadView(viewName, locale)__	};create,the,actual,view,object,p,the,default,implementation,delegates,to,link,load,view,this,can,be,overridden,to,resolve,certain,view,names,in,a,special,fashion,before,delegating,to,the,actual,code,load,view,implementation,provided,by,the,subclass,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,load,view;protected,view,create,view,string,view,name,locale,locale,throws,exception,return,load,view,view,name,locale
AbstractCachingViewResolver -> @Nullable 	protected abstract View loadView(String viewName, Locale locale) throws Exception_;1495868221;Subclasses must implement this method, building a View object_for the specified view. The returned View objects will be_cached by this ViewResolver base class._<p>Subclasses are not forced to support internationalization:_A subclass that does not may simply ignore the locale parameter._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #resolveViewName;@Nullable_	protected abstract View loadView(String viewName, Locale locale) throws Exception_;subclasses,must,implement,this,method,building,a,view,object,for,the,specified,view,the,returned,view,objects,will,be,cached,by,this,view,resolver,base,class,p,subclasses,are,not,forced,to,support,internationalization,a,subclass,that,does,not,may,simply,ignore,the,locale,parameter,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,resolve,view,name;nullable,protected,abstract,view,load,view,string,view,name,locale,locale,throws,exception
AbstractCachingViewResolver -> @Nullable 	protected abstract View loadView(String viewName, Locale locale) throws Exception_;1496242568;Subclasses must implement this method, building a View object_for the specified view. The returned View objects will be_cached by this ViewResolver base class._<p>Subclasses are not forced to support internationalization:_A subclass that does not may simply ignore the locale parameter._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #resolveViewName;@Nullable_	protected abstract View loadView(String viewName, Locale locale) throws Exception_;subclasses,must,implement,this,method,building,a,view,object,for,the,specified,view,the,returned,view,objects,will,be,cached,by,this,view,resolver,base,class,p,subclasses,are,not,forced,to,support,internationalization,a,subclass,that,does,not,may,simply,ignore,the,locale,parameter,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,resolve,view,name;nullable,protected,abstract,view,load,view,string,view,name,locale,locale,throws,exception
AbstractCachingViewResolver -> @Nullable 	protected abstract View loadView(String viewName, Locale locale) throws Exception_;1502974979;Subclasses must implement this method, building a View object_for the specified view. The returned View objects will be_cached by this ViewResolver base class._<p>Subclasses are not forced to support internationalization:_A subclass that does not may simply ignore the locale parameter._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #resolveViewName;@Nullable_	protected abstract View loadView(String viewName, Locale locale) throws Exception_;subclasses,must,implement,this,method,building,a,view,object,for,the,specified,view,the,returned,view,objects,will,be,cached,by,this,view,resolver,base,class,p,subclasses,are,not,forced,to,support,internationalization,a,subclass,that,does,not,may,simply,ignore,the,locale,parameter,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,resolve,view,name;nullable,protected,abstract,view,load,view,string,view,name,locale,locale,throws,exception
AbstractCachingViewResolver -> @Nullable 	protected abstract View loadView(String viewName, Locale locale) throws Exception_;1529361191;Subclasses must implement this method, building a View object_for the specified view. The returned View objects will be_cached by this ViewResolver base class._<p>Subclasses are not forced to support internationalization:_A subclass that does not may simply ignore the locale parameter._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #resolveViewName;@Nullable_	protected abstract View loadView(String viewName, Locale locale) throws Exception_;subclasses,must,implement,this,method,building,a,view,object,for,the,specified,view,the,returned,view,objects,will,be,cached,by,this,view,resolver,base,class,p,subclasses,are,not,forced,to,support,internationalization,a,subclass,that,does,not,may,simply,ignore,the,locale,parameter,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,resolve,view,name;nullable,protected,abstract,view,load,view,string,view,name,locale,locale,throws,exception
AbstractCachingViewResolver -> @Nullable 	protected abstract View loadView(String viewName, Locale locale) throws Exception_;1530174524;Subclasses must implement this method, building a View object_for the specified view. The returned View objects will be_cached by this ViewResolver base class._<p>Subclasses are not forced to support internationalization:_A subclass that does not may simply ignore the locale parameter._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #resolveViewName;@Nullable_	protected abstract View loadView(String viewName, Locale locale) throws Exception_;subclasses,must,implement,this,method,building,a,view,object,for,the,specified,view,the,returned,view,objects,will,be,cached,by,this,view,resolver,base,class,p,subclasses,are,not,forced,to,support,internationalization,a,subclass,that,does,not,may,simply,ignore,the,locale,parameter,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,resolve,view,name;nullable,protected,abstract,view,load,view,string,view,name,locale,locale,throws,exception
AbstractCachingViewResolver -> @Nullable 	protected abstract View loadView(String viewName, Locale locale) throws Exception_;1530174524;Subclasses must implement this method, building a View object_for the specified view. The returned View objects will be_cached by this ViewResolver base class._<p>Subclasses are not forced to support internationalization:_A subclass that does not may simply ignore the locale parameter._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return the View instance, or {@code null} if not found_(optional, to allow for ViewResolver chaining)_@throws Exception if the view couldn't be resolved_@see #resolveViewName;@Nullable_	protected abstract View loadView(String viewName, Locale locale) throws Exception_;subclasses,must,implement,this,method,building,a,view,object,for,the,specified,view,the,returned,view,objects,will,be,cached,by,this,view,resolver,base,class,p,subclasses,are,not,forced,to,support,internationalization,a,subclass,that,does,not,may,simply,ignore,the,locale,parameter,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,the,view,instance,or,code,null,if,not,found,optional,to,allow,for,view,resolver,chaining,throws,exception,if,the,view,couldn,t,be,resolved,see,resolve,view,name;nullable,protected,abstract,view,load,view,string,view,name,locale,locale,throws,exception
AbstractCachingViewResolver -> public boolean isCacheUnresolved();1328020251;Return if caching of unresolved views is enabled.;public boolean isCacheUnresolved() {_		return this.cacheUnresolved__	};return,if,caching,of,unresolved,views,is,enabled;public,boolean,is,cache,unresolved,return,this,cache,unresolved
AbstractCachingViewResolver -> public boolean isCacheUnresolved();1355279385;Return if caching of unresolved views is enabled.;public boolean isCacheUnresolved() {_		return this.cacheUnresolved__	};return,if,caching,of,unresolved,views,is,enabled;public,boolean,is,cache,unresolved,return,this,cache,unresolved
AbstractCachingViewResolver -> public boolean isCacheUnresolved();1356735495;Return if caching of unresolved views is enabled.;public boolean isCacheUnresolved() {_		return this.cacheUnresolved__	};return,if,caching,of,unresolved,views,is,enabled;public,boolean,is,cache,unresolved,return,this,cache,unresolved
AbstractCachingViewResolver -> public boolean isCacheUnresolved();1357119239;Return if caching of unresolved views is enabled.;public boolean isCacheUnresolved() {_		return this.cacheUnresolved__	};return,if,caching,of,unresolved,views,is,enabled;public,boolean,is,cache,unresolved,return,this,cache,unresolved
AbstractCachingViewResolver -> public boolean isCacheUnresolved();1362408075;Return if caching of unresolved views is enabled.;public boolean isCacheUnresolved() {_		return this.cacheUnresolved__	};return,if,caching,of,unresolved,views,is,enabled;public,boolean,is,cache,unresolved,return,this,cache,unresolved
AbstractCachingViewResolver -> public boolean isCacheUnresolved();1368482696;Return if caching of unresolved views is enabled.;public boolean isCacheUnresolved() {_		return this.cacheUnresolved__	};return,if,caching,of,unresolved,views,is,enabled;public,boolean,is,cache,unresolved,return,this,cache,unresolved
AbstractCachingViewResolver -> public boolean isCacheUnresolved();1467667858;Return if caching of unresolved views is enabled.;public boolean isCacheUnresolved() {_		return this.cacheUnresolved__	};return,if,caching,of,unresolved,views,is,enabled;public,boolean,is,cache,unresolved,return,this,cache,unresolved
AbstractCachingViewResolver -> public boolean isCacheUnresolved();1467730834;Return if caching of unresolved views is enabled.;public boolean isCacheUnresolved() {_		return this.cacheUnresolved__	};return,if,caching,of,unresolved,views,is,enabled;public,boolean,is,cache,unresolved,return,this,cache,unresolved
AbstractCachingViewResolver -> public boolean isCacheUnresolved();1477045587;Return if caching of unresolved views is enabled.;public boolean isCacheUnresolved() {_		return this.cacheUnresolved__	};return,if,caching,of,unresolved,views,is,enabled;public,boolean,is,cache,unresolved,return,this,cache,unresolved
AbstractCachingViewResolver -> public boolean isCacheUnresolved();1495868221;Return if caching of unresolved views is enabled.;public boolean isCacheUnresolved() {_		return this.cacheUnresolved__	};return,if,caching,of,unresolved,views,is,enabled;public,boolean,is,cache,unresolved,return,this,cache,unresolved
AbstractCachingViewResolver -> public boolean isCacheUnresolved();1496242568;Return if caching of unresolved views is enabled.;public boolean isCacheUnresolved() {_		return this.cacheUnresolved__	};return,if,caching,of,unresolved,views,is,enabled;public,boolean,is,cache,unresolved,return,this,cache,unresolved
AbstractCachingViewResolver -> public boolean isCacheUnresolved();1502974979;Return if caching of unresolved views is enabled.;public boolean isCacheUnresolved() {_		return this.cacheUnresolved__	};return,if,caching,of,unresolved,views,is,enabled;public,boolean,is,cache,unresolved,return,this,cache,unresolved
AbstractCachingViewResolver -> public boolean isCacheUnresolved();1529361191;Return if caching of unresolved views is enabled.;public boolean isCacheUnresolved() {_		return this.cacheUnresolved__	};return,if,caching,of,unresolved,views,is,enabled;public,boolean,is,cache,unresolved,return,this,cache,unresolved
AbstractCachingViewResolver -> public boolean isCacheUnresolved();1530174524;Return if caching of unresolved views is enabled.;public boolean isCacheUnresolved() {_		return this.cacheUnresolved__	};return,if,caching,of,unresolved,views,is,enabled;public,boolean,is,cache,unresolved,return,this,cache,unresolved
AbstractCachingViewResolver -> public boolean isCacheUnresolved();1530174524;Return if caching of unresolved views is enabled.;public boolean isCacheUnresolved() {_		return this.cacheUnresolved__	};return,if,caching,of,unresolved,views,is,enabled;public,boolean,is,cache,unresolved,return,this,cache,unresolved
AbstractCachingViewResolver -> public void setCacheLimit(int cacheLimit);1355279385;Specify the maximum number of entries for the view cache._Default is 1024.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,the,view,cache,default,is,1024;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
AbstractCachingViewResolver -> public void setCacheLimit(int cacheLimit);1356735495;Specify the maximum number of entries for the view cache._Default is 1024.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,the,view,cache,default,is,1024;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
AbstractCachingViewResolver -> public void setCacheLimit(int cacheLimit);1357119239;Specify the maximum number of entries for the view cache._Default is 1024.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,the,view,cache,default,is,1024;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
AbstractCachingViewResolver -> public void setCacheLimit(int cacheLimit);1362408075;Specify the maximum number of entries for the view cache._Default is 1024.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,the,view,cache,default,is,1024;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
AbstractCachingViewResolver -> public void setCacheLimit(int cacheLimit);1368482696;Specify the maximum number of entries for the view cache._Default is 1024.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,the,view,cache,default,is,1024;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
AbstractCachingViewResolver -> public void setCacheLimit(int cacheLimit);1467667858;Specify the maximum number of entries for the view cache._Default is 1024.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,the,view,cache,default,is,1024;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
AbstractCachingViewResolver -> public void setCacheLimit(int cacheLimit);1467730834;Specify the maximum number of entries for the view cache._Default is 1024.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,the,view,cache,default,is,1024;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
AbstractCachingViewResolver -> public void setCacheLimit(int cacheLimit);1477045587;Specify the maximum number of entries for the view cache._Default is 1024.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,the,view,cache,default,is,1024;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
AbstractCachingViewResolver -> public void setCacheLimit(int cacheLimit);1495868221;Specify the maximum number of entries for the view cache._Default is 1024.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,the,view,cache,default,is,1024;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
AbstractCachingViewResolver -> public void setCacheLimit(int cacheLimit);1496242568;Specify the maximum number of entries for the view cache._Default is 1024.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,the,view,cache,default,is,1024;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
AbstractCachingViewResolver -> public void setCacheLimit(int cacheLimit);1502974979;Specify the maximum number of entries for the view cache._Default is 1024.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,the,view,cache,default,is,1024;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
AbstractCachingViewResolver -> public void setCacheLimit(int cacheLimit);1529361191;Specify the maximum number of entries for the view cache._Default is 1024.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,the,view,cache,default,is,1024;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
AbstractCachingViewResolver -> public void setCacheLimit(int cacheLimit);1530174524;Specify the maximum number of entries for the view cache._Default is 1024.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,the,view,cache,default,is,1024;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
AbstractCachingViewResolver -> public void setCacheLimit(int cacheLimit);1530174524;Specify the maximum number of entries for the view cache._Default is 1024.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,the,view,cache,default,is,1024;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
AbstractCachingViewResolver -> public void setCacheUnresolved(boolean cacheUnresolved);1328020251;Whether a view name once resolved to {@code null} should be cached and_automatically resolved to {@code null} subsequently._<p>Default is "true": unresolved view names are being cached, as of Spring 3.1._Note that this flag only applies if the general {@link #setCache "cache"}_flag is kept at its default of "true" as well._<p>Of specific interest is the ability for some AbstractUrlBasedView_implementations (FreeMarker, Velocity, Tiles) to check if an underlying_resource exists via {@link AbstractUrlBasedView#checkResource(Locale)}._With this flag set to "false", an underlying resource that re-appears_is noticed and used. With the flag set to "true", one check is made only.;public void setCacheUnresolved(boolean cacheUnresolved) {_		this.cacheUnresolved = cacheUnresolved__	};whether,a,view,name,once,resolved,to,code,null,should,be,cached,and,automatically,resolved,to,code,null,subsequently,p,default,is,true,unresolved,view,names,are,being,cached,as,of,spring,3,1,note,that,this,flag,only,applies,if,the,general,link,set,cache,cache,flag,is,kept,at,its,default,of,true,as,well,p,of,specific,interest,is,the,ability,for,some,abstract,url,based,view,implementations,free,marker,velocity,tiles,to,check,if,an,underlying,resource,exists,via,link,abstract,url,based,view,check,resource,locale,with,this,flag,set,to,false,an,underlying,resource,that,re,appears,is,noticed,and,used,with,the,flag,set,to,true,one,check,is,made,only;public,void,set,cache,unresolved,boolean,cache,unresolved,this,cache,unresolved,cache,unresolved
AbstractCachingViewResolver -> public void setCacheUnresolved(boolean cacheUnresolved);1355279385;Whether a view name once resolved to {@code null} should be cached and_automatically resolved to {@code null} subsequently._<p>Default is "true": unresolved view names are being cached, as of Spring 3.1._Note that this flag only applies if the general {@link #setCache "cache"}_flag is kept at its default of "true" as well._<p>Of specific interest is the ability for some AbstractUrlBasedView_implementations (FreeMarker, Velocity, Tiles) to check if an underlying_resource exists via {@link AbstractUrlBasedView#checkResource(Locale)}._With this flag set to "false", an underlying resource that re-appears_is noticed and used. With the flag set to "true", one check is made only.;public void setCacheUnresolved(boolean cacheUnresolved) {_		this.cacheUnresolved = cacheUnresolved__	};whether,a,view,name,once,resolved,to,code,null,should,be,cached,and,automatically,resolved,to,code,null,subsequently,p,default,is,true,unresolved,view,names,are,being,cached,as,of,spring,3,1,note,that,this,flag,only,applies,if,the,general,link,set,cache,cache,flag,is,kept,at,its,default,of,true,as,well,p,of,specific,interest,is,the,ability,for,some,abstract,url,based,view,implementations,free,marker,velocity,tiles,to,check,if,an,underlying,resource,exists,via,link,abstract,url,based,view,check,resource,locale,with,this,flag,set,to,false,an,underlying,resource,that,re,appears,is,noticed,and,used,with,the,flag,set,to,true,one,check,is,made,only;public,void,set,cache,unresolved,boolean,cache,unresolved,this,cache,unresolved,cache,unresolved
AbstractCachingViewResolver -> public void setCacheUnresolved(boolean cacheUnresolved);1356735495;Whether a view name once resolved to {@code null} should be cached and_automatically resolved to {@code null} subsequently._<p>Default is "true": unresolved view names are being cached, as of Spring 3.1._Note that this flag only applies if the general {@link #setCache "cache"}_flag is kept at its default of "true" as well._<p>Of specific interest is the ability for some AbstractUrlBasedView_implementations (FreeMarker, Velocity, Tiles) to check if an underlying_resource exists via {@link AbstractUrlBasedView#checkResource(Locale)}._With this flag set to "false", an underlying resource that re-appears_is noticed and used. With the flag set to "true", one check is made only.;public void setCacheUnresolved(boolean cacheUnresolved) {_		this.cacheUnresolved = cacheUnresolved__	};whether,a,view,name,once,resolved,to,code,null,should,be,cached,and,automatically,resolved,to,code,null,subsequently,p,default,is,true,unresolved,view,names,are,being,cached,as,of,spring,3,1,note,that,this,flag,only,applies,if,the,general,link,set,cache,cache,flag,is,kept,at,its,default,of,true,as,well,p,of,specific,interest,is,the,ability,for,some,abstract,url,based,view,implementations,free,marker,velocity,tiles,to,check,if,an,underlying,resource,exists,via,link,abstract,url,based,view,check,resource,locale,with,this,flag,set,to,false,an,underlying,resource,that,re,appears,is,noticed,and,used,with,the,flag,set,to,true,one,check,is,made,only;public,void,set,cache,unresolved,boolean,cache,unresolved,this,cache,unresolved,cache,unresolved
AbstractCachingViewResolver -> public void setCacheUnresolved(boolean cacheUnresolved);1357119239;Whether a view name once resolved to {@code null} should be cached and_automatically resolved to {@code null} subsequently._<p>Default is "true": unresolved view names are being cached, as of Spring 3.1._Note that this flag only applies if the general {@link #setCache "cache"}_flag is kept at its default of "true" as well._<p>Of specific interest is the ability for some AbstractUrlBasedView_implementations (FreeMarker, Velocity, Tiles) to check if an underlying_resource exists via {@link AbstractUrlBasedView#checkResource(Locale)}._With this flag set to "false", an underlying resource that re-appears_is noticed and used. With the flag set to "true", one check is made only.;public void setCacheUnresolved(boolean cacheUnresolved) {_		this.cacheUnresolved = cacheUnresolved__	};whether,a,view,name,once,resolved,to,code,null,should,be,cached,and,automatically,resolved,to,code,null,subsequently,p,default,is,true,unresolved,view,names,are,being,cached,as,of,spring,3,1,note,that,this,flag,only,applies,if,the,general,link,set,cache,cache,flag,is,kept,at,its,default,of,true,as,well,p,of,specific,interest,is,the,ability,for,some,abstract,url,based,view,implementations,free,marker,velocity,tiles,to,check,if,an,underlying,resource,exists,via,link,abstract,url,based,view,check,resource,locale,with,this,flag,set,to,false,an,underlying,resource,that,re,appears,is,noticed,and,used,with,the,flag,set,to,true,one,check,is,made,only;public,void,set,cache,unresolved,boolean,cache,unresolved,this,cache,unresolved,cache,unresolved
AbstractCachingViewResolver -> public void setCacheUnresolved(boolean cacheUnresolved);1362408075;Whether a view name once resolved to {@code null} should be cached and_automatically resolved to {@code null} subsequently._<p>Default is "true": unresolved view names are being cached, as of Spring 3.1._Note that this flag only applies if the general {@link #setCache "cache"}_flag is kept at its default of "true" as well._<p>Of specific interest is the ability for some AbstractUrlBasedView_implementations (FreeMarker, Velocity, Tiles) to check if an underlying_resource exists via {@link AbstractUrlBasedView#checkResource(Locale)}._With this flag set to "false", an underlying resource that re-appears_is noticed and used. With the flag set to "true", one check is made only.;public void setCacheUnresolved(boolean cacheUnresolved) {_		this.cacheUnresolved = cacheUnresolved__	};whether,a,view,name,once,resolved,to,code,null,should,be,cached,and,automatically,resolved,to,code,null,subsequently,p,default,is,true,unresolved,view,names,are,being,cached,as,of,spring,3,1,note,that,this,flag,only,applies,if,the,general,link,set,cache,cache,flag,is,kept,at,its,default,of,true,as,well,p,of,specific,interest,is,the,ability,for,some,abstract,url,based,view,implementations,free,marker,velocity,tiles,to,check,if,an,underlying,resource,exists,via,link,abstract,url,based,view,check,resource,locale,with,this,flag,set,to,false,an,underlying,resource,that,re,appears,is,noticed,and,used,with,the,flag,set,to,true,one,check,is,made,only;public,void,set,cache,unresolved,boolean,cache,unresolved,this,cache,unresolved,cache,unresolved
AbstractCachingViewResolver -> public void setCacheUnresolved(boolean cacheUnresolved);1368482696;Whether a view name once resolved to {@code null} should be cached and_automatically resolved to {@code null} subsequently._<p>Default is "true": unresolved view names are being cached, as of Spring 3.1._Note that this flag only applies if the general {@link #setCache "cache"}_flag is kept at its default of "true" as well._<p>Of specific interest is the ability for some AbstractUrlBasedView_implementations (FreeMarker, Velocity, Tiles) to check if an underlying_resource exists via {@link AbstractUrlBasedView#checkResource(Locale)}._With this flag set to "false", an underlying resource that re-appears_is noticed and used. With the flag set to "true", one check is made only.;public void setCacheUnresolved(boolean cacheUnresolved) {_		this.cacheUnresolved = cacheUnresolved__	};whether,a,view,name,once,resolved,to,code,null,should,be,cached,and,automatically,resolved,to,code,null,subsequently,p,default,is,true,unresolved,view,names,are,being,cached,as,of,spring,3,1,note,that,this,flag,only,applies,if,the,general,link,set,cache,cache,flag,is,kept,at,its,default,of,true,as,well,p,of,specific,interest,is,the,ability,for,some,abstract,url,based,view,implementations,free,marker,velocity,tiles,to,check,if,an,underlying,resource,exists,via,link,abstract,url,based,view,check,resource,locale,with,this,flag,set,to,false,an,underlying,resource,that,re,appears,is,noticed,and,used,with,the,flag,set,to,true,one,check,is,made,only;public,void,set,cache,unresolved,boolean,cache,unresolved,this,cache,unresolved,cache,unresolved
AbstractCachingViewResolver -> public void setCacheUnresolved(boolean cacheUnresolved);1467667858;Whether a view name once resolved to {@code null} should be cached and_automatically resolved to {@code null} subsequently._<p>Default is "true": unresolved view names are being cached, as of Spring 3.1._Note that this flag only applies if the general {@link #setCache "cache"}_flag is kept at its default of "true" as well._<p>Of specific interest is the ability for some AbstractUrlBasedView_implementations (FreeMarker, Tiles) to check if an underlying resource_exists via {@link AbstractUrlBasedView#checkResource(Locale)}._With this flag set to "false", an underlying resource that re-appears_is noticed and used. With the flag set to "true", one check is made only.;public void setCacheUnresolved(boolean cacheUnresolved) {_		this.cacheUnresolved = cacheUnresolved__	};whether,a,view,name,once,resolved,to,code,null,should,be,cached,and,automatically,resolved,to,code,null,subsequently,p,default,is,true,unresolved,view,names,are,being,cached,as,of,spring,3,1,note,that,this,flag,only,applies,if,the,general,link,set,cache,cache,flag,is,kept,at,its,default,of,true,as,well,p,of,specific,interest,is,the,ability,for,some,abstract,url,based,view,implementations,free,marker,tiles,to,check,if,an,underlying,resource,exists,via,link,abstract,url,based,view,check,resource,locale,with,this,flag,set,to,false,an,underlying,resource,that,re,appears,is,noticed,and,used,with,the,flag,set,to,true,one,check,is,made,only;public,void,set,cache,unresolved,boolean,cache,unresolved,this,cache,unresolved,cache,unresolved
AbstractCachingViewResolver -> public void setCacheUnresolved(boolean cacheUnresolved);1467730834;Whether a view name once resolved to {@code null} should be cached and_automatically resolved to {@code null} subsequently._<p>Default is "true": unresolved view names are being cached, as of Spring 3.1._Note that this flag only applies if the general {@link #setCache "cache"}_flag is kept at its default of "true" as well._<p>Of specific interest is the ability for some AbstractUrlBasedView_implementations (FreeMarker, Tiles) to check if an underlying resource_exists via {@link AbstractUrlBasedView#checkResource(Locale)}._With this flag set to "false", an underlying resource that re-appears_is noticed and used. With the flag set to "true", one check is made only.;public void setCacheUnresolved(boolean cacheUnresolved) {_		this.cacheUnresolved = cacheUnresolved__	};whether,a,view,name,once,resolved,to,code,null,should,be,cached,and,automatically,resolved,to,code,null,subsequently,p,default,is,true,unresolved,view,names,are,being,cached,as,of,spring,3,1,note,that,this,flag,only,applies,if,the,general,link,set,cache,cache,flag,is,kept,at,its,default,of,true,as,well,p,of,specific,interest,is,the,ability,for,some,abstract,url,based,view,implementations,free,marker,tiles,to,check,if,an,underlying,resource,exists,via,link,abstract,url,based,view,check,resource,locale,with,this,flag,set,to,false,an,underlying,resource,that,re,appears,is,noticed,and,used,with,the,flag,set,to,true,one,check,is,made,only;public,void,set,cache,unresolved,boolean,cache,unresolved,this,cache,unresolved,cache,unresolved
AbstractCachingViewResolver -> public void setCacheUnresolved(boolean cacheUnresolved);1477045587;Whether a view name once resolved to {@code null} should be cached and_automatically resolved to {@code null} subsequently._<p>Default is "true": unresolved view names are being cached, as of Spring 3.1._Note that this flag only applies if the general {@link #setCache "cache"}_flag is kept at its default of "true" as well._<p>Of specific interest is the ability for some AbstractUrlBasedView_implementations (FreeMarker, Tiles) to check if an underlying resource_exists via {@link AbstractUrlBasedView#checkResource(Locale)}._With this flag set to "false", an underlying resource that re-appears_is noticed and used. With the flag set to "true", one check is made only.;public void setCacheUnresolved(boolean cacheUnresolved) {_		this.cacheUnresolved = cacheUnresolved__	};whether,a,view,name,once,resolved,to,code,null,should,be,cached,and,automatically,resolved,to,code,null,subsequently,p,default,is,true,unresolved,view,names,are,being,cached,as,of,spring,3,1,note,that,this,flag,only,applies,if,the,general,link,set,cache,cache,flag,is,kept,at,its,default,of,true,as,well,p,of,specific,interest,is,the,ability,for,some,abstract,url,based,view,implementations,free,marker,tiles,to,check,if,an,underlying,resource,exists,via,link,abstract,url,based,view,check,resource,locale,with,this,flag,set,to,false,an,underlying,resource,that,re,appears,is,noticed,and,used,with,the,flag,set,to,true,one,check,is,made,only;public,void,set,cache,unresolved,boolean,cache,unresolved,this,cache,unresolved,cache,unresolved
AbstractCachingViewResolver -> public void setCacheUnresolved(boolean cacheUnresolved);1495868221;Whether a view name once resolved to {@code null} should be cached and_automatically resolved to {@code null} subsequently._<p>Default is "true": unresolved view names are being cached, as of Spring 3.1._Note that this flag only applies if the general {@link #setCache "cache"}_flag is kept at its default of "true" as well._<p>Of specific interest is the ability for some AbstractUrlBasedView_implementations (FreeMarker, Tiles) to check if an underlying resource_exists via {@link AbstractUrlBasedView#checkResource(Locale)}._With this flag set to "false", an underlying resource that re-appears_is noticed and used. With the flag set to "true", one check is made only.;public void setCacheUnresolved(boolean cacheUnresolved) {_		this.cacheUnresolved = cacheUnresolved__	};whether,a,view,name,once,resolved,to,code,null,should,be,cached,and,automatically,resolved,to,code,null,subsequently,p,default,is,true,unresolved,view,names,are,being,cached,as,of,spring,3,1,note,that,this,flag,only,applies,if,the,general,link,set,cache,cache,flag,is,kept,at,its,default,of,true,as,well,p,of,specific,interest,is,the,ability,for,some,abstract,url,based,view,implementations,free,marker,tiles,to,check,if,an,underlying,resource,exists,via,link,abstract,url,based,view,check,resource,locale,with,this,flag,set,to,false,an,underlying,resource,that,re,appears,is,noticed,and,used,with,the,flag,set,to,true,one,check,is,made,only;public,void,set,cache,unresolved,boolean,cache,unresolved,this,cache,unresolved,cache,unresolved
AbstractCachingViewResolver -> public void setCacheUnresolved(boolean cacheUnresolved);1496242568;Whether a view name once resolved to {@code null} should be cached and_automatically resolved to {@code null} subsequently._<p>Default is "true": unresolved view names are being cached, as of Spring 3.1._Note that this flag only applies if the general {@link #setCache "cache"}_flag is kept at its default of "true" as well._<p>Of specific interest is the ability for some AbstractUrlBasedView_implementations (FreeMarker, Tiles) to check if an underlying resource_exists via {@link AbstractUrlBasedView#checkResource(Locale)}._With this flag set to "false", an underlying resource that re-appears_is noticed and used. With the flag set to "true", one check is made only.;public void setCacheUnresolved(boolean cacheUnresolved) {_		this.cacheUnresolved = cacheUnresolved__	};whether,a,view,name,once,resolved,to,code,null,should,be,cached,and,automatically,resolved,to,code,null,subsequently,p,default,is,true,unresolved,view,names,are,being,cached,as,of,spring,3,1,note,that,this,flag,only,applies,if,the,general,link,set,cache,cache,flag,is,kept,at,its,default,of,true,as,well,p,of,specific,interest,is,the,ability,for,some,abstract,url,based,view,implementations,free,marker,tiles,to,check,if,an,underlying,resource,exists,via,link,abstract,url,based,view,check,resource,locale,with,this,flag,set,to,false,an,underlying,resource,that,re,appears,is,noticed,and,used,with,the,flag,set,to,true,one,check,is,made,only;public,void,set,cache,unresolved,boolean,cache,unresolved,this,cache,unresolved,cache,unresolved
AbstractCachingViewResolver -> public void setCacheUnresolved(boolean cacheUnresolved);1502974979;Whether a view name once resolved to {@code null} should be cached and_automatically resolved to {@code null} subsequently._<p>Default is "true": unresolved view names are being cached, as of Spring 3.1._Note that this flag only applies if the general {@link #setCache "cache"}_flag is kept at its default of "true" as well._<p>Of specific interest is the ability for some AbstractUrlBasedView_implementations (FreeMarker, Tiles) to check if an underlying resource_exists via {@link AbstractUrlBasedView#checkResource(Locale)}._With this flag set to "false", an underlying resource that re-appears_is noticed and used. With the flag set to "true", one check is made only.;public void setCacheUnresolved(boolean cacheUnresolved) {_		this.cacheUnresolved = cacheUnresolved__	};whether,a,view,name,once,resolved,to,code,null,should,be,cached,and,automatically,resolved,to,code,null,subsequently,p,default,is,true,unresolved,view,names,are,being,cached,as,of,spring,3,1,note,that,this,flag,only,applies,if,the,general,link,set,cache,cache,flag,is,kept,at,its,default,of,true,as,well,p,of,specific,interest,is,the,ability,for,some,abstract,url,based,view,implementations,free,marker,tiles,to,check,if,an,underlying,resource,exists,via,link,abstract,url,based,view,check,resource,locale,with,this,flag,set,to,false,an,underlying,resource,that,re,appears,is,noticed,and,used,with,the,flag,set,to,true,one,check,is,made,only;public,void,set,cache,unresolved,boolean,cache,unresolved,this,cache,unresolved,cache,unresolved
AbstractCachingViewResolver -> public void setCacheUnresolved(boolean cacheUnresolved);1529361191;Whether a view name once resolved to {@code null} should be cached and_automatically resolved to {@code null} subsequently._<p>Default is "true": unresolved view names are being cached, as of Spring 3.1._Note that this flag only applies if the general {@link #setCache "cache"}_flag is kept at its default of "true" as well._<p>Of specific interest is the ability for some AbstractUrlBasedView_implementations (FreeMarker, Tiles) to check if an underlying resource_exists via {@link AbstractUrlBasedView#checkResource(Locale)}._With this flag set to "false", an underlying resource that re-appears_is noticed and used. With the flag set to "true", one check is made only.;public void setCacheUnresolved(boolean cacheUnresolved) {_		this.cacheUnresolved = cacheUnresolved__	};whether,a,view,name,once,resolved,to,code,null,should,be,cached,and,automatically,resolved,to,code,null,subsequently,p,default,is,true,unresolved,view,names,are,being,cached,as,of,spring,3,1,note,that,this,flag,only,applies,if,the,general,link,set,cache,cache,flag,is,kept,at,its,default,of,true,as,well,p,of,specific,interest,is,the,ability,for,some,abstract,url,based,view,implementations,free,marker,tiles,to,check,if,an,underlying,resource,exists,via,link,abstract,url,based,view,check,resource,locale,with,this,flag,set,to,false,an,underlying,resource,that,re,appears,is,noticed,and,used,with,the,flag,set,to,true,one,check,is,made,only;public,void,set,cache,unresolved,boolean,cache,unresolved,this,cache,unresolved,cache,unresolved
AbstractCachingViewResolver -> public void setCacheUnresolved(boolean cacheUnresolved);1530174524;Whether a view name once resolved to {@code null} should be cached and_automatically resolved to {@code null} subsequently._<p>Default is "true": unresolved view names are being cached, as of Spring 3.1._Note that this flag only applies if the general {@link #setCache "cache"}_flag is kept at its default of "true" as well._<p>Of specific interest is the ability for some AbstractUrlBasedView_implementations (FreeMarker, Tiles) to check if an underlying resource_exists via {@link AbstractUrlBasedView#checkResource(Locale)}._With this flag set to "false", an underlying resource that re-appears_is noticed and used. With the flag set to "true", one check is made only.;public void setCacheUnresolved(boolean cacheUnresolved) {_		this.cacheUnresolved = cacheUnresolved__	};whether,a,view,name,once,resolved,to,code,null,should,be,cached,and,automatically,resolved,to,code,null,subsequently,p,default,is,true,unresolved,view,names,are,being,cached,as,of,spring,3,1,note,that,this,flag,only,applies,if,the,general,link,set,cache,cache,flag,is,kept,at,its,default,of,true,as,well,p,of,specific,interest,is,the,ability,for,some,abstract,url,based,view,implementations,free,marker,tiles,to,check,if,an,underlying,resource,exists,via,link,abstract,url,based,view,check,resource,locale,with,this,flag,set,to,false,an,underlying,resource,that,re,appears,is,noticed,and,used,with,the,flag,set,to,true,one,check,is,made,only;public,void,set,cache,unresolved,boolean,cache,unresolved,this,cache,unresolved,cache,unresolved
AbstractCachingViewResolver -> public void setCacheUnresolved(boolean cacheUnresolved);1530174524;Whether a view name once resolved to {@code null} should be cached and_automatically resolved to {@code null} subsequently._<p>Default is "true": unresolved view names are being cached, as of Spring 3.1._Note that this flag only applies if the general {@link #setCache "cache"}_flag is kept at its default of "true" as well._<p>Of specific interest is the ability for some AbstractUrlBasedView_implementations (FreeMarker, Tiles) to check if an underlying resource_exists via {@link AbstractUrlBasedView#checkResource(Locale)}._With this flag set to "false", an underlying resource that re-appears_is noticed and used. With the flag set to "true", one check is made only.;public void setCacheUnresolved(boolean cacheUnresolved) {_		this.cacheUnresolved = cacheUnresolved__	};whether,a,view,name,once,resolved,to,code,null,should,be,cached,and,automatically,resolved,to,code,null,subsequently,p,default,is,true,unresolved,view,names,are,being,cached,as,of,spring,3,1,note,that,this,flag,only,applies,if,the,general,link,set,cache,cache,flag,is,kept,at,its,default,of,true,as,well,p,of,specific,interest,is,the,ability,for,some,abstract,url,based,view,implementations,free,marker,tiles,to,check,if,an,underlying,resource,exists,via,link,abstract,url,based,view,check,resource,locale,with,this,flag,set,to,false,an,underlying,resource,that,re,appears,is,noticed,and,used,with,the,flag,set,to,true,one,check,is,made,only;public,void,set,cache,unresolved,boolean,cache,unresolved,this,cache,unresolved,cache,unresolved
AbstractCachingViewResolver -> protected Object getCacheKey(String viewName, Locale locale);1328020251;Return the cache key for the given view name and the given locale._<p>Default is a String consisting of view name and locale suffix._Can be overridden in subclasses._<p>Needs to respect the locale in general, as a different locale can_lead to a different view resource.;protected Object getCacheKey(String viewName, Locale locale) {_		return viewName + "_" + locale__	};return,the,cache,key,for,the,given,view,name,and,the,given,locale,p,default,is,a,string,consisting,of,view,name,and,locale,suffix,can,be,overridden,in,subclasses,p,needs,to,respect,the,locale,in,general,as,a,different,locale,can,lead,to,a,different,view,resource;protected,object,get,cache,key,string,view,name,locale,locale,return,view,name,locale
AbstractCachingViewResolver -> protected Object getCacheKey(String viewName, Locale locale);1355279385;Return the cache key for the given view name and the given locale._<p>Default is a String consisting of view name and locale suffix._Can be overridden in subclasses._<p>Needs to respect the locale in general, as a different locale can_lead to a different view resource.;protected Object getCacheKey(String viewName, Locale locale) {_		return viewName + "_" + locale__	};return,the,cache,key,for,the,given,view,name,and,the,given,locale,p,default,is,a,string,consisting,of,view,name,and,locale,suffix,can,be,overridden,in,subclasses,p,needs,to,respect,the,locale,in,general,as,a,different,locale,can,lead,to,a,different,view,resource;protected,object,get,cache,key,string,view,name,locale,locale,return,view,name,locale
AbstractCachingViewResolver -> protected Object getCacheKey(String viewName, Locale locale);1356735495;Return the cache key for the given view name and the given locale._<p>Default is a String consisting of view name and locale suffix._Can be overridden in subclasses._<p>Needs to respect the locale in general, as a different locale can_lead to a different view resource.;protected Object getCacheKey(String viewName, Locale locale) {_		return viewName + "_" + locale__	};return,the,cache,key,for,the,given,view,name,and,the,given,locale,p,default,is,a,string,consisting,of,view,name,and,locale,suffix,can,be,overridden,in,subclasses,p,needs,to,respect,the,locale,in,general,as,a,different,locale,can,lead,to,a,different,view,resource;protected,object,get,cache,key,string,view,name,locale,locale,return,view,name,locale
AbstractCachingViewResolver -> protected Object getCacheKey(String viewName, Locale locale);1357119239;Return the cache key for the given view name and the given locale._<p>Default is a String consisting of view name and locale suffix._Can be overridden in subclasses._<p>Needs to respect the locale in general, as a different locale can_lead to a different view resource.;protected Object getCacheKey(String viewName, Locale locale) {_		return viewName + "_" + locale__	};return,the,cache,key,for,the,given,view,name,and,the,given,locale,p,default,is,a,string,consisting,of,view,name,and,locale,suffix,can,be,overridden,in,subclasses,p,needs,to,respect,the,locale,in,general,as,a,different,locale,can,lead,to,a,different,view,resource;protected,object,get,cache,key,string,view,name,locale,locale,return,view,name,locale
AbstractCachingViewResolver -> protected Object getCacheKey(String viewName, Locale locale);1362408075;Return the cache key for the given view name and the given locale._<p>Default is a String consisting of view name and locale suffix._Can be overridden in subclasses._<p>Needs to respect the locale in general, as a different locale can_lead to a different view resource.;protected Object getCacheKey(String viewName, Locale locale) {_		return viewName + "_" + locale__	};return,the,cache,key,for,the,given,view,name,and,the,given,locale,p,default,is,a,string,consisting,of,view,name,and,locale,suffix,can,be,overridden,in,subclasses,p,needs,to,respect,the,locale,in,general,as,a,different,locale,can,lead,to,a,different,view,resource;protected,object,get,cache,key,string,view,name,locale,locale,return,view,name,locale
AbstractCachingViewResolver -> protected Object getCacheKey(String viewName, Locale locale);1368482696;Return the cache key for the given view name and the given locale._<p>Default is a String consisting of view name and locale suffix._Can be overridden in subclasses._<p>Needs to respect the locale in general, as a different locale can_lead to a different view resource.;protected Object getCacheKey(String viewName, Locale locale) {_		return viewName + "_" + locale__	};return,the,cache,key,for,the,given,view,name,and,the,given,locale,p,default,is,a,string,consisting,of,view,name,and,locale,suffix,can,be,overridden,in,subclasses,p,needs,to,respect,the,locale,in,general,as,a,different,locale,can,lead,to,a,different,view,resource;protected,object,get,cache,key,string,view,name,locale,locale,return,view,name,locale
AbstractCachingViewResolver -> protected Object getCacheKey(String viewName, Locale locale);1467667858;Return the cache key for the given view name and the given locale._<p>Default is a String consisting of view name and locale suffix._Can be overridden in subclasses._<p>Needs to respect the locale in general, as a different locale can_lead to a different view resource.;protected Object getCacheKey(String viewName, Locale locale) {_		return viewName + "_" + locale__	};return,the,cache,key,for,the,given,view,name,and,the,given,locale,p,default,is,a,string,consisting,of,view,name,and,locale,suffix,can,be,overridden,in,subclasses,p,needs,to,respect,the,locale,in,general,as,a,different,locale,can,lead,to,a,different,view,resource;protected,object,get,cache,key,string,view,name,locale,locale,return,view,name,locale
AbstractCachingViewResolver -> protected Object getCacheKey(String viewName, Locale locale);1467730834;Return the cache key for the given view name and the given locale._<p>Default is a String consisting of view name and locale suffix._Can be overridden in subclasses._<p>Needs to respect the locale in general, as a different locale can_lead to a different view resource.;protected Object getCacheKey(String viewName, Locale locale) {_		return viewName + "_" + locale__	};return,the,cache,key,for,the,given,view,name,and,the,given,locale,p,default,is,a,string,consisting,of,view,name,and,locale,suffix,can,be,overridden,in,subclasses,p,needs,to,respect,the,locale,in,general,as,a,different,locale,can,lead,to,a,different,view,resource;protected,object,get,cache,key,string,view,name,locale,locale,return,view,name,locale
AbstractCachingViewResolver -> protected Object getCacheKey(String viewName, Locale locale);1477045587;Return the cache key for the given view name and the given locale._<p>Default is a String consisting of view name and locale suffix._Can be overridden in subclasses._<p>Needs to respect the locale in general, as a different locale can_lead to a different view resource.;protected Object getCacheKey(String viewName, Locale locale) {_		return viewName + '_' + locale__	};return,the,cache,key,for,the,given,view,name,and,the,given,locale,p,default,is,a,string,consisting,of,view,name,and,locale,suffix,can,be,overridden,in,subclasses,p,needs,to,respect,the,locale,in,general,as,a,different,locale,can,lead,to,a,different,view,resource;protected,object,get,cache,key,string,view,name,locale,locale,return,view,name,locale
AbstractCachingViewResolver -> protected Object getCacheKey(String viewName, Locale locale);1495868221;Return the cache key for the given view name and the given locale._<p>Default is a String consisting of view name and locale suffix._Can be overridden in subclasses._<p>Needs to respect the locale in general, as a different locale can_lead to a different view resource.;protected Object getCacheKey(String viewName, Locale locale) {_		return viewName + '_' + locale__	};return,the,cache,key,for,the,given,view,name,and,the,given,locale,p,default,is,a,string,consisting,of,view,name,and,locale,suffix,can,be,overridden,in,subclasses,p,needs,to,respect,the,locale,in,general,as,a,different,locale,can,lead,to,a,different,view,resource;protected,object,get,cache,key,string,view,name,locale,locale,return,view,name,locale
AbstractCachingViewResolver -> protected Object getCacheKey(String viewName, Locale locale);1496242568;Return the cache key for the given view name and the given locale._<p>Default is a String consisting of view name and locale suffix._Can be overridden in subclasses._<p>Needs to respect the locale in general, as a different locale can_lead to a different view resource.;protected Object getCacheKey(String viewName, Locale locale) {_		return viewName + '_' + locale__	};return,the,cache,key,for,the,given,view,name,and,the,given,locale,p,default,is,a,string,consisting,of,view,name,and,locale,suffix,can,be,overridden,in,subclasses,p,needs,to,respect,the,locale,in,general,as,a,different,locale,can,lead,to,a,different,view,resource;protected,object,get,cache,key,string,view,name,locale,locale,return,view,name,locale
AbstractCachingViewResolver -> protected Object getCacheKey(String viewName, Locale locale);1502974979;Return the cache key for the given view name and the given locale._<p>Default is a String consisting of view name and locale suffix._Can be overridden in subclasses._<p>Needs to respect the locale in general, as a different locale can_lead to a different view resource.;protected Object getCacheKey(String viewName, Locale locale) {_		return viewName + '_' + locale__	};return,the,cache,key,for,the,given,view,name,and,the,given,locale,p,default,is,a,string,consisting,of,view,name,and,locale,suffix,can,be,overridden,in,subclasses,p,needs,to,respect,the,locale,in,general,as,a,different,locale,can,lead,to,a,different,view,resource;protected,object,get,cache,key,string,view,name,locale,locale,return,view,name,locale
AbstractCachingViewResolver -> protected Object getCacheKey(String viewName, Locale locale);1529361191;Return the cache key for the given view name and the given locale._<p>Default is a String consisting of view name and locale suffix._Can be overridden in subclasses._<p>Needs to respect the locale in general, as a different locale can_lead to a different view resource.;protected Object getCacheKey(String viewName, Locale locale) {_		return viewName + '_' + locale__	};return,the,cache,key,for,the,given,view,name,and,the,given,locale,p,default,is,a,string,consisting,of,view,name,and,locale,suffix,can,be,overridden,in,subclasses,p,needs,to,respect,the,locale,in,general,as,a,different,locale,can,lead,to,a,different,view,resource;protected,object,get,cache,key,string,view,name,locale,locale,return,view,name,locale
AbstractCachingViewResolver -> protected Object getCacheKey(String viewName, Locale locale);1530174524;Return the cache key for the given view name and the given locale._<p>Default is a String consisting of view name and locale suffix._Can be overridden in subclasses._<p>Needs to respect the locale in general, as a different locale can_lead to a different view resource.;protected Object getCacheKey(String viewName, Locale locale) {_		return viewName + '_' + locale__	};return,the,cache,key,for,the,given,view,name,and,the,given,locale,p,default,is,a,string,consisting,of,view,name,and,locale,suffix,can,be,overridden,in,subclasses,p,needs,to,respect,the,locale,in,general,as,a,different,locale,can,lead,to,a,different,view,resource;protected,object,get,cache,key,string,view,name,locale,locale,return,view,name,locale
AbstractCachingViewResolver -> protected Object getCacheKey(String viewName, Locale locale);1530174524;Return the cache key for the given view name and the given locale._<p>Default is a String consisting of view name and locale suffix._Can be overridden in subclasses._<p>Needs to respect the locale in general, as a different locale can_lead to a different view resource.;protected Object getCacheKey(String viewName, Locale locale) {_		return viewName + '_' + locale__	};return,the,cache,key,for,the,given,view,name,and,the,given,locale,p,default,is,a,string,consisting,of,view,name,and,locale,suffix,can,be,overridden,in,subclasses,p,needs,to,respect,the,locale,in,general,as,a,different,locale,can,lead,to,a,different,view,resource;protected,object,get,cache,key,string,view,name,locale,locale,return,view,name,locale
AbstractCachingViewResolver -> public void setCache(boolean cache);1328020251;Enable or disable caching._<p>Default is "true": caching is enabled._Disable this only for debugging and development._<p><b>Warning: Disabling caching can severely impact performance.</b>;public void setCache(boolean cache) {_		this.cache = cache__	};enable,or,disable,caching,p,default,is,true,caching,is,enabled,disable,this,only,for,debugging,and,development,p,b,warning,disabling,caching,can,severely,impact,performance,b;public,void,set,cache,boolean,cache,this,cache,cache
AbstractCachingViewResolver -> public void setCache(boolean cache);1355279385;Enable or disable caching._<p>This is equivalent to setting the {@link #setCacheLimit "cacheLimit"}_property to the default limit (1024) or to 0, respectively._<p>Default is "true": caching is enabled._Disable this only for debugging and development.;public void setCache(boolean cache) {_		this.cacheLimit = (cache ? DEFAULT_CACHE_LIMIT : 0)__	};enable,or,disable,caching,p,this,is,equivalent,to,setting,the,link,set,cache,limit,cache,limit,property,to,the,default,limit,1024,or,to,0,respectively,p,default,is,true,caching,is,enabled,disable,this,only,for,debugging,and,development;public,void,set,cache,boolean,cache,this,cache,limit,cache,0
AbstractCachingViewResolver -> public void setCache(boolean cache);1356735495;Enable or disable caching._<p>This is equivalent to setting the {@link #setCacheLimit "cacheLimit"}_property to the default limit (1024) or to 0, respectively._<p>Default is "true": caching is enabled._Disable this only for debugging and development.;public void setCache(boolean cache) {_		this.cacheLimit = (cache ? DEFAULT_CACHE_LIMIT : 0)__	};enable,or,disable,caching,p,this,is,equivalent,to,setting,the,link,set,cache,limit,cache,limit,property,to,the,default,limit,1024,or,to,0,respectively,p,default,is,true,caching,is,enabled,disable,this,only,for,debugging,and,development;public,void,set,cache,boolean,cache,this,cache,limit,cache,0
AbstractCachingViewResolver -> public void setCache(boolean cache);1357119239;Enable or disable caching._<p>This is equivalent to setting the {@link #setCacheLimit "cacheLimit"}_property to the default limit (1024) or to 0, respectively._<p>Default is "true": caching is enabled._Disable this only for debugging and development.;public void setCache(boolean cache) {_		this.cacheLimit = (cache ? DEFAULT_CACHE_LIMIT : 0)__	};enable,or,disable,caching,p,this,is,equivalent,to,setting,the,link,set,cache,limit,cache,limit,property,to,the,default,limit,1024,or,to,0,respectively,p,default,is,true,caching,is,enabled,disable,this,only,for,debugging,and,development;public,void,set,cache,boolean,cache,this,cache,limit,cache,0
AbstractCachingViewResolver -> public void setCache(boolean cache);1362408075;Enable or disable caching._<p>This is equivalent to setting the {@link #setCacheLimit "cacheLimit"}_property to the default limit (1024) or to 0, respectively._<p>Default is "true": caching is enabled._Disable this only for debugging and development.;public void setCache(boolean cache) {_		this.cacheLimit = (cache ? DEFAULT_CACHE_LIMIT : 0)__	};enable,or,disable,caching,p,this,is,equivalent,to,setting,the,link,set,cache,limit,cache,limit,property,to,the,default,limit,1024,or,to,0,respectively,p,default,is,true,caching,is,enabled,disable,this,only,for,debugging,and,development;public,void,set,cache,boolean,cache,this,cache,limit,cache,0
AbstractCachingViewResolver -> public void setCache(boolean cache);1368482696;Enable or disable caching._<p>This is equivalent to setting the {@link #setCacheLimit "cacheLimit"}_property to the default limit (1024) or to 0, respectively._<p>Default is "true": caching is enabled._Disable this only for debugging and development.;public void setCache(boolean cache) {_		this.cacheLimit = (cache ? DEFAULT_CACHE_LIMIT : 0)__	};enable,or,disable,caching,p,this,is,equivalent,to,setting,the,link,set,cache,limit,cache,limit,property,to,the,default,limit,1024,or,to,0,respectively,p,default,is,true,caching,is,enabled,disable,this,only,for,debugging,and,development;public,void,set,cache,boolean,cache,this,cache,limit,cache,0
AbstractCachingViewResolver -> public void setCache(boolean cache);1467667858;Enable or disable caching._<p>This is equivalent to setting the {@link #setCacheLimit "cacheLimit"}_property to the default limit (1024) or to 0, respectively._<p>Default is "true": caching is enabled._Disable this only for debugging and development.;public void setCache(boolean cache) {_		this.cacheLimit = (cache ? DEFAULT_CACHE_LIMIT : 0)__	};enable,or,disable,caching,p,this,is,equivalent,to,setting,the,link,set,cache,limit,cache,limit,property,to,the,default,limit,1024,or,to,0,respectively,p,default,is,true,caching,is,enabled,disable,this,only,for,debugging,and,development;public,void,set,cache,boolean,cache,this,cache,limit,cache,0
AbstractCachingViewResolver -> public void setCache(boolean cache);1467730834;Enable or disable caching._<p>This is equivalent to setting the {@link #setCacheLimit "cacheLimit"}_property to the default limit (1024) or to 0, respectively._<p>Default is "true": caching is enabled._Disable this only for debugging and development.;public void setCache(boolean cache) {_		this.cacheLimit = (cache ? DEFAULT_CACHE_LIMIT : 0)__	};enable,or,disable,caching,p,this,is,equivalent,to,setting,the,link,set,cache,limit,cache,limit,property,to,the,default,limit,1024,or,to,0,respectively,p,default,is,true,caching,is,enabled,disable,this,only,for,debugging,and,development;public,void,set,cache,boolean,cache,this,cache,limit,cache,0
AbstractCachingViewResolver -> public void setCache(boolean cache);1477045587;Enable or disable caching._<p>This is equivalent to setting the {@link #setCacheLimit "cacheLimit"}_property to the default limit (1024) or to 0, respectively._<p>Default is "true": caching is enabled._Disable this only for debugging and development.;public void setCache(boolean cache) {_		this.cacheLimit = (cache ? DEFAULT_CACHE_LIMIT : 0)__	};enable,or,disable,caching,p,this,is,equivalent,to,setting,the,link,set,cache,limit,cache,limit,property,to,the,default,limit,1024,or,to,0,respectively,p,default,is,true,caching,is,enabled,disable,this,only,for,debugging,and,development;public,void,set,cache,boolean,cache,this,cache,limit,cache,0
AbstractCachingViewResolver -> public void setCache(boolean cache);1495868221;Enable or disable caching._<p>This is equivalent to setting the {@link #setCacheLimit "cacheLimit"}_property to the default limit (1024) or to 0, respectively._<p>Default is "true": caching is enabled._Disable this only for debugging and development.;public void setCache(boolean cache) {_		this.cacheLimit = (cache ? DEFAULT_CACHE_LIMIT : 0)__	};enable,or,disable,caching,p,this,is,equivalent,to,setting,the,link,set,cache,limit,cache,limit,property,to,the,default,limit,1024,or,to,0,respectively,p,default,is,true,caching,is,enabled,disable,this,only,for,debugging,and,development;public,void,set,cache,boolean,cache,this,cache,limit,cache,0
AbstractCachingViewResolver -> public void setCache(boolean cache);1496242568;Enable or disable caching._<p>This is equivalent to setting the {@link #setCacheLimit "cacheLimit"}_property to the default limit (1024) or to 0, respectively._<p>Default is "true": caching is enabled._Disable this only for debugging and development.;public void setCache(boolean cache) {_		this.cacheLimit = (cache ? DEFAULT_CACHE_LIMIT : 0)__	};enable,or,disable,caching,p,this,is,equivalent,to,setting,the,link,set,cache,limit,cache,limit,property,to,the,default,limit,1024,or,to,0,respectively,p,default,is,true,caching,is,enabled,disable,this,only,for,debugging,and,development;public,void,set,cache,boolean,cache,this,cache,limit,cache,0
AbstractCachingViewResolver -> public void setCache(boolean cache);1502974979;Enable or disable caching._<p>This is equivalent to setting the {@link #setCacheLimit "cacheLimit"}_property to the default limit (1024) or to 0, respectively._<p>Default is "true": caching is enabled._Disable this only for debugging and development.;public void setCache(boolean cache) {_		this.cacheLimit = (cache ? DEFAULT_CACHE_LIMIT : 0)__	};enable,or,disable,caching,p,this,is,equivalent,to,setting,the,link,set,cache,limit,cache,limit,property,to,the,default,limit,1024,or,to,0,respectively,p,default,is,true,caching,is,enabled,disable,this,only,for,debugging,and,development;public,void,set,cache,boolean,cache,this,cache,limit,cache,0
AbstractCachingViewResolver -> public void setCache(boolean cache);1529361191;Enable or disable caching._<p>This is equivalent to setting the {@link #setCacheLimit "cacheLimit"}_property to the default limit (1024) or to 0, respectively._<p>Default is "true": caching is enabled._Disable this only for debugging and development.;public void setCache(boolean cache) {_		this.cacheLimit = (cache ? DEFAULT_CACHE_LIMIT : 0)__	};enable,or,disable,caching,p,this,is,equivalent,to,setting,the,link,set,cache,limit,cache,limit,property,to,the,default,limit,1024,or,to,0,respectively,p,default,is,true,caching,is,enabled,disable,this,only,for,debugging,and,development;public,void,set,cache,boolean,cache,this,cache,limit,cache,0
AbstractCachingViewResolver -> public void setCache(boolean cache);1530174524;Enable or disable caching._<p>This is equivalent to setting the {@link #setCacheLimit "cacheLimit"}_property to the default limit (1024) or to 0, respectively._<p>Default is "true": caching is enabled._Disable this only for debugging and development.;public void setCache(boolean cache) {_		this.cacheLimit = (cache ? DEFAULT_CACHE_LIMIT : 0)__	};enable,or,disable,caching,p,this,is,equivalent,to,setting,the,link,set,cache,limit,cache,limit,property,to,the,default,limit,1024,or,to,0,respectively,p,default,is,true,caching,is,enabled,disable,this,only,for,debugging,and,development;public,void,set,cache,boolean,cache,this,cache,limit,cache,0
AbstractCachingViewResolver -> public void setCache(boolean cache);1530174524;Enable or disable caching._<p>This is equivalent to setting the {@link #setCacheLimit "cacheLimit"}_property to the default limit (1024) or to 0, respectively._<p>Default is "true": caching is enabled._Disable this only for debugging and development.;public void setCache(boolean cache) {_		this.cacheLimit = (cache ? DEFAULT_CACHE_LIMIT : 0)__	};enable,or,disable,caching,p,this,is,equivalent,to,setting,the,link,set,cache,limit,cache,limit,property,to,the,default,limit,1024,or,to,0,respectively,p,default,is,true,caching,is,enabled,disable,this,only,for,debugging,and,development;public,void,set,cache,boolean,cache,this,cache,limit,cache,0
