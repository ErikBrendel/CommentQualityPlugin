commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the location of the XML file that defines the view beans.  * <p>The default is "/WEB-INF/views.xml".  * @param location the location of the XML file.  */ ;/**  * Set the location of the XML file that defines the view beans.  * <p>The default is "/WEB-INF/views.xml".  * @param location the location of the XML file.  */ public void setLocation(Resource location) {     this.location = location. }
true;public;1;3;/**  * Specify the order value for this ViewResolver bean.  * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered.  * @see org.springframework.core.Ordered#getOrder()  */ ;/**  * Specify the order value for this ViewResolver bean.  * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered.  * @see org.springframework.core.Ordered#getOrder()  */ public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
true;public;0;6;/**  * Pre-initialize the factory from the XML file.  * Only effective if caching is enabled.  */ ;/**  * Pre-initialize the factory from the XML file.  * Only effective if caching is enabled.  */ @Override public void afterPropertiesSet() throws BeansException {     if (isCache()) {         initFactory().     } }
true;protected;2;4;/**  * This implementation returns just the view name,  * as XmlViewResolver doesn't support localized resolution.  */ ;/**  * This implementation returns just the view name,  * as XmlViewResolver doesn't support localized resolution.  */ @Override protected Object getCacheKey(String viewName, Locale locale) {     return viewName. }
false;protected;2;11;;@Override protected View loadView(String viewName, Locale locale) throws BeansException {     BeanFactory factory = initFactory().     try {         return factory.getBean(viewName, View.class).     } catch (NoSuchBeanDefinitionException ex) {         // Allow for ViewResolver chaining...         return null.     } }
true;protected,synchronized;0;30;/**  * Initialize the view bean factory from the XML file.  * Synchronized because of access by parallel threads.  * @throws BeansException in case of initialization errors  */ ;/**  * Initialize the view bean factory from the XML file.  * Synchronized because of access by parallel threads.  * @throws BeansException in case of initialization errors  */ protected synchronized BeanFactory initFactory() throws BeansException {     if (this.cachedFactory != null) {         return this.cachedFactory.     }     ApplicationContext applicationContext = obtainApplicationContext().     Resource actualLocation = this.location.     if (actualLocation == null) {         actualLocation = applicationContext.getResource(DEFAULT_LOCATION).     }     // Create child ApplicationContext for views.     GenericWebApplicationContext factory = new GenericWebApplicationContext().     factory.setParent(applicationContext).     factory.setServletContext(getServletContext()).     // Load XML resource with context-aware entity resolver.     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(factory).     reader.setEnvironment(applicationContext.getEnvironment()).     reader.setEntityResolver(new ResourceEntityResolver(applicationContext)).     reader.loadBeanDefinitions(actualLocation).     factory.refresh().     if (isCache()) {         this.cachedFactory = factory.     }     return factory. }
true;public;0;6;/**  * Close the view bean factory on context shutdown.  */ ;/**  * Close the view bean factory on context shutdown.  */ @Override public void destroy() throws BeansException {     if (this.cachedFactory != null) {         this.cachedFactory.close().     } }
