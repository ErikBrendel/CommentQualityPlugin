commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link ScriptEngine} to use by the view.  * If {@code renderFunction} is specified, the script engine must implement {@code Invocable}.  * You must define {@code engine} or {@code engineName}, not both.  * <p>When the {@code sharedEngine} flag is set to {@code false}, you should not specify  * the script engine with this setter, but with the {@link #setEngineName(String)}  * one (since it implies multiple lazy instantiations of the script engine).  * @see #setEngineName(String)  */ ;/**  * Set the {@link ScriptEngine} to use by the view.  * If {@code renderFunction} is specified, the script engine must implement {@code Invocable}.  * You must define {@code engine} or {@code engineName}, not both.  * <p>When the {@code sharedEngine} flag is set to {@code false}, you should not specify  * the script engine with this setter, but with the {@link #setEngineName(String)}  * one (since it implies multiple lazy instantiations of the script engine).  * @see #setEngineName(String)  */ public void setEngine(@Nullable ScriptEngine engine) {     this.engine = engine. }
false;public;0;5;;@Override @Nullable public ScriptEngine getEngine() {     return this.engine. }
true;public;1;3;/**  * Set the engine name that will be used to instantiate the {@link ScriptEngine}.  * If {@code renderFunction} is specified, the script engine must implement {@code Invocable}.  * You must define {@code engine} or {@code engineName}, not both.  * @see #setEngine(ScriptEngine)  */ ;/**  * Set the engine name that will be used to instantiate the {@link ScriptEngine}.  * If {@code renderFunction} is specified, the script engine must implement {@code Invocable}.  * You must define {@code engine} or {@code engineName}, not both.  * @see #setEngine(ScriptEngine)  */ public void setEngineName(@Nullable String engineName) {     this.engineName = engineName. }
false;public;0;5;;@Override @Nullable public String getEngineName() {     return this.engineName. }
true;public;1;3;/**  * When set to {@code false}, use thread-local {@link ScriptEngine} instances instead  * of one single shared instance. This flag should be set to {@code false} for those  * using non thread-safe script engines with templating libraries not designed for  * concurrency, like Handlebars or React running on Nashorn for example.  * In this case, Java 8u60 or greater is required due to  * <a href="https://bugs.openjdk.java.net/browse/JDK-8076099">this bug</a>.  * <p>When this flag is set to {@code false}, the script engine must be specified using  * {@link #setEngineName(String)}. Using {@link #setEngine(ScriptEngine)} is not  * possible because multiple instances of the script engine need to be created lazily  * (one per thread).  * @see <a href="http://docs.oracle.com/javase/8/docs/api/javax/script/ScriptEngineFactory.html#getParameter-java.lang.String-">THREADING ScriptEngine parameter</a>  */ ;/**  * When set to {@code false}, use thread-local {@link ScriptEngine} instances instead  * of one single shared instance. This flag should be set to {@code false} for those  * using non thread-safe script engines with templating libraries not designed for  * concurrency, like Handlebars or React running on Nashorn for example.  * In this case, Java 8u60 or greater is required due to  * <a href="https://bugs.openjdk.java.net/browse/JDK-8076099">this bug</a>.  * <p>When this flag is set to {@code false}, the script engine must be specified using  * {@link #setEngineName(String)}. Using {@link #setEngine(ScriptEngine)} is not  * possible because multiple instances of the script engine need to be created lazily  * (one per thread).  * @see <a href="http://docs.oracle.com/javase/8/docs/api/javax/script/ScriptEngineFactory.html#getParameter-java.lang.String-">THREADING ScriptEngine parameter</a>  */ public void setSharedEngine(@Nullable Boolean sharedEngine) {     this.sharedEngine = sharedEngine. }
false;public;0;5;;@Override @Nullable public Boolean isSharedEngine() {     return this.sharedEngine. }
true;public;1;3;/**  * Set the scripts to be loaded by the script engine (library or user provided).  * Since {@code resourceLoaderPath} default value is "classpath:", you can load easily  * any script available on the classpath.  * <p>For example, in order to use a JavaScript library available as a WebJars dependency  * and a custom "render.js" file, you should call  * {@code configurer.setScripts("/META-INF/resources/webjars/library/version/library.js",  * "com/myproject/script/render.js").}.  * @see #setResourceLoaderPath  * @see <a href="http://www.webjars.org">WebJars</a>  */ ;/**  * Set the scripts to be loaded by the script engine (library or user provided).  * Since {@code resourceLoaderPath} default value is "classpath:", you can load easily  * any script available on the classpath.  * <p>For example, in order to use a JavaScript library available as a WebJars dependency  * and a custom "render.js" file, you should call  * {@code configurer.setScripts("/META-INF/resources/webjars/library/version/library.js",  * "com/myproject/script/render.js").}.  * @see #setResourceLoaderPath  * @see <a href="http://www.webjars.org">WebJars</a>  */ public void setScripts(@Nullable String... scriptNames) {     this.scripts = scriptNames. }
false;public;0;5;;@Override @Nullable public String[] getScripts() {     return this.scripts. }
true;public;1;3;/**  * Set the object where the render function belongs (optional).  * For example, in order to call {@code Mustache.render()}, {@code renderObject}  * should be set to {@code "Mustache"} and {@code renderFunction} to {@code "render"}.  */ ;/**  * Set the object where the render function belongs (optional).  * For example, in order to call {@code Mustache.render()}, {@code renderObject}  * should be set to {@code "Mustache"} and {@code renderFunction} to {@code "render"}.  */ public void setRenderObject(@Nullable String renderObject) {     this.renderObject = renderObject. }
false;public;0;5;;@Override @Nullable public String getRenderObject() {     return this.renderObject. }
true;public;1;3;/**  * Set the render function name (optional). If not specified, the script templates  * will be evaluated with {@link ScriptEngine#eval(String, Bindings)}.  * <p>This function will be called with the following parameters:  * <ol>  * <li>{@code String template}: the template content</li>  * <li>{@code Map model}: the view model</li>  * <li>{@code RenderingContext context}: the rendering context (since 5.0)</li>  * </ol>  * @see RenderingContext  */ ;/**  * Set the render function name (optional). If not specified, the script templates  * will be evaluated with {@link ScriptEngine#eval(String, Bindings)}.  * <p>This function will be called with the following parameters:  * <ol>  * <li>{@code String template}: the template content</li>  * <li>{@code Map model}: the view model</li>  * <li>{@code RenderingContext context}: the rendering context (since 5.0)</li>  * </ol>  * @see RenderingContext  */ public void setRenderFunction(@Nullable String renderFunction) {     this.renderFunction = renderFunction. }
false;public;0;5;;@Override @Nullable public String getRenderFunction() {     return this.renderFunction. }
true;public;1;3;/**  * Set the content type to use for the response.  * ({@code text/html} by default).  * @since 4.2.1  */ ;/**  * Set the content type to use for the response.  * ({@code text/html} by default).  * @since 4.2.1  */ public void setContentType(@Nullable String contentType) {     this.contentType = contentType. }
true;public;0;5;/**  * Return the content type to use for the response.  * @since 4.2.1  */ ;/**  * Return the content type to use for the response.  * @since 4.2.1  */ @Override @Nullable public String getContentType() {     return this.contentType. }
true;public;1;3;/**  * Set the charset used to read script and template files.  * ({@code UTF-8} by default).  */ ;/**  * Set the charset used to read script and template files.  * ({@code UTF-8} by default).  */ public void setCharset(@Nullable Charset charset) {     this.charset = charset. }
false;public;0;5;;@Override @Nullable public Charset getCharset() {     return this.charset. }
true;public;1;3;/**  * Set the resource loader path(s) via a Spring resource location.  * Accepts multiple locations as a comma-separated list of paths.  * Standard URLs like "file:" and "classpath:" and pseudo URLs are supported  * as understood by Spring's {@link org.springframework.core.io.ResourceLoader}.  * Relative paths are allowed when running in an ApplicationContext.  * <p>Default is "classpath:".  */ ;/**  * Set the resource loader path(s) via a Spring resource location.  * Accepts multiple locations as a comma-separated list of paths.  * Standard URLs like "file:" and "classpath:" and pseudo URLs are supported  * as understood by Spring's {@link org.springframework.core.io.ResourceLoader}.  * Relative paths are allowed when running in an ApplicationContext.  * <p>Default is "classpath:".  */ public void setResourceLoaderPath(@Nullable String resourceLoaderPath) {     this.resourceLoaderPath = resourceLoaderPath. }
false;public;0;5;;@Override @Nullable public String getResourceLoaderPath() {     return this.resourceLoaderPath. }
