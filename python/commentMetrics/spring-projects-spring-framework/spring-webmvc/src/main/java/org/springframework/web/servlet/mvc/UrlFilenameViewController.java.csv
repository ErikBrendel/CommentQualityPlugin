commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the prefix to prepend to the request URL filename  * to build a view name.  */ ;/**  * Set the prefix to prepend to the request URL filename  * to build a view name.  */ public void setPrefix(@Nullable String prefix) {     this.prefix = (prefix != null ? prefix : ""). }
true;protected;0;3;/**  * Return the prefix to prepend to the request URL filename.  */ ;/**  * Return the prefix to prepend to the request URL filename.  */ protected String getPrefix() {     return this.prefix. }
true;public;1;3;/**  * Set the suffix to append to the request URL filename  * to build a view name.  */ ;/**  * Set the suffix to append to the request URL filename  * to build a view name.  */ public void setSuffix(@Nullable String suffix) {     this.suffix = (suffix != null ? suffix : ""). }
true;protected;0;3;/**  * Return the suffix to append to the request URL filename.  */ ;/**  * Return the suffix to append to the request URL filename.  */ protected String getSuffix() {     return this.suffix. }
true;protected;1;5;/**  * Returns view name based on the URL filename,  * with prefix/suffix applied when appropriate.  * @see #extractViewNameFromUrlPath  * @see #setPrefix  * @see #setSuffix  */ ;/**  * Returns view name based on the URL filename,  * with prefix/suffix applied when appropriate.  * @see #extractViewNameFromUrlPath  * @see #setPrefix  * @see #setSuffix  */ @Override protected String getViewNameForRequest(HttpServletRequest request) {     String uri = extractOperableUrl(request).     return getViewNameForUrlPath(uri). }
true;protected;1;7;/**  * Extract a URL path from the given request,  * suitable for view name extraction.  * @param request current HTTP request  * @return the URL to use for view name extraction  */ ;/**  * Extract a URL path from the given request,  * suitable for view name extraction.  * @param request current HTTP request  * @return the URL to use for view name extraction  */ protected String extractOperableUrl(HttpServletRequest request) {     String urlPath = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE).     if (!StringUtils.hasText(urlPath)) {         urlPath = getUrlPathHelper().getLookupPathForRequest(request).     }     return urlPath. }
true;protected;1;9;/**  * Returns view name based on the URL filename,  * with prefix/suffix applied when appropriate.  * @param uri the request URI. for example {@code "/index.html"}  * @return the extracted URI filename. for example {@code "index"}  * @see #extractViewNameFromUrlPath  * @see #postProcessViewName  */ ;/**  * Returns view name based on the URL filename,  * with prefix/suffix applied when appropriate.  * @param uri the request URI. for example {@code "/index.html"}  * @return the extracted URI filename. for example {@code "index"}  * @see #extractViewNameFromUrlPath  * @see #postProcessViewName  */ protected String getViewNameForUrlPath(String uri) {     String viewName = this.viewNameCache.get(uri).     if (viewName == null) {         viewName = extractViewNameFromUrlPath(uri).         viewName = postProcessViewName(viewName).         this.viewNameCache.put(uri, viewName).     }     return viewName. }
true;protected;1;6;/**  * Extract the URL filename from the given request URI.  * @param uri the request URI. for example {@code "/index.html"}  * @return the extracted URI filename. for example {@code "index"}  */ ;/**  * Extract the URL filename from the given request URI.  * @param uri the request URI. for example {@code "/index.html"}  * @return the extracted URI filename. for example {@code "index"}  */ protected String extractViewNameFromUrlPath(String uri) {     int start = (uri.charAt(0) == '/' ? 1 : 0).     int lastIndex = uri.lastIndexOf('.').     int end = (lastIndex < 0 ? uri.length() : lastIndex).     return uri.substring(start, end). }
true;protected;1;3;/**  * Build the full view name based on the given view name  * as indicated by the URL path.  * <p>The default implementation simply applies prefix and suffix.  * This can be overridden, for example, to manipulate upper case  * / lower case, etc.  * @param viewName the original view name, as indicated by the URL path  * @return the full view name to use  * @see #getPrefix()  * @see #getSuffix()  */ ;/**  * Build the full view name based on the given view name  * as indicated by the URL path.  * <p>The default implementation simply applies prefix and suffix.  * This can be overridden, for example, to manipulate upper case  * / lower case, etc.  * @param viewName the original view name, as indicated by the URL path  * @return the full view name to use  * @see #getPrefix()  * @see #getSuffix()  */ protected String postProcessViewName(String viewName) {     return getPrefix() + viewName + getSuffix(). }
