commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Return the attributes candidate for flash storage or an empty Map.  */ ;/**  * Return the attributes candidate for flash storage or an empty Map.  */ @Override public Map<String, ?> getFlashAttributes() {     return this.flashAttributes. }
true;public;2;5;/**  * {@inheritDoc}  * <p>Formats the attribute value as a String before adding it.  */ ;/**  * {@inheritDoc}  * <p>Formats the attribute value as a String before adding it.  */ @Override public RedirectAttributesModelMap addAttribute(String attributeName, @Nullable Object attributeValue) {     super.addAttribute(attributeName, formatValue(attributeValue)).     return this. }
false;private;1;7;;@Nullable private String formatValue(@Nullable Object value) {     if (value == null) {         return null.     }     return (this.dataBinder != null ? this.dataBinder.convertIfNecessary(value, String.class) : value.toString()). }
true;public;1;5;/**  * {@inheritDoc}  * <p>Formats the attribute value as a String before adding it.  */ ;/**  * {@inheritDoc}  * <p>Formats the attribute value as a String before adding it.  */ @Override public RedirectAttributesModelMap addAttribute(Object attributeValue) {     super.addAttribute(attributeValue).     return this. }
true;public;1;5;/**  * {@inheritDoc}  * <p>Each attribute value is formatted as a String before being added.  */ ;/**  * {@inheritDoc}  * <p>Each attribute value is formatted as a String before being added.  */ @Override public RedirectAttributesModelMap addAllAttributes(@Nullable Collection<?> attributeValues) {     super.addAllAttributes(attributeValues).     return this. }
true;public;1;7;/**  * {@inheritDoc}  * <p>Each attribute value is formatted as a String before being added.  */ ;/**  * {@inheritDoc}  * <p>Each attribute value is formatted as a String before being added.  */ @Override public RedirectAttributesModelMap addAllAttributes(@Nullable Map<String, ?> attributes) {     if (attributes != null) {         attributes.forEach(this::addAttribute).     }     return this. }
true;public;1;11;/**  * {@inheritDoc}  * <p>Each attribute value is formatted as a String before being merged.  */ ;/**  * {@inheritDoc}  * <p>Each attribute value is formatted as a String before being merged.  */ @Override public RedirectAttributesModelMap mergeAttributes(@Nullable Map<String, ?> attributes) {     if (attributes != null) {         attributes.forEach((key, attribute) -> {             if (!containsKey(key)) {                 addAttribute(key, attribute).             }         }).     }     return this. }
false;public;0;4;;@Override public Map<String, Object> asMap() {     return this. }
true;public;2;4;/**  * {@inheritDoc}  * <p>The value is formatted as a String before being added.  */ ;/**  * {@inheritDoc}  * <p>The value is formatted as a String before being added.  */ @Override public Object put(String key, @Nullable Object value) {     return super.put(key, formatValue(value)). }
true;public;1;6;/**  * {@inheritDoc}  * <p>Each value is formatted as a String before being added.  */ ;/**  * {@inheritDoc}  * <p>Each value is formatted as a String before being added.  */ @Override public void putAll(@Nullable Map<? extends String, ? extends Object> map) {     if (map != null) {         map.forEach((key, value) -> put(key, formatValue(value))).     } }
false;public;2;5;;@Override public RedirectAttributes addFlashAttribute(String attributeName, @Nullable Object attributeValue) {     this.flashAttributes.addAttribute(attributeName, attributeValue).     return this. }
false;public;1;5;;@Override public RedirectAttributes addFlashAttribute(Object attributeValue) {     this.flashAttributes.addAttribute(attributeValue).     return this. }
