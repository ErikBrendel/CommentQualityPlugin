commented;modifiers;parameterAmount;loc;comment;code
true;public;1;7;/**  * Start a new tag with the supplied name. Leaves the tag open so  * that attributes, inner text or nested tags can be written into it.  * @see #endTag()  */ ;/**  * Start a new tag with the supplied name. Leaves the tag open so  * that attributes, inner text or nested tags can be written into it.  * @see #endTag()  */ public void startTag(String tagName) throws JspException {     if (inTag()) {         closeTagAndMarkAsBlock().     }     push(tagName).     this.writer.append("<").append(tagName). }
true;public;2;7;/**  * Write an HTML attribute with the specified name and value.  * <p>Be sure to write all attributes <strong>before</strong> writing  * any inner text or nested tags.  * @throws IllegalStateException if the opening tag is closed  */ ;/**  * Write an HTML attribute with the specified name and value.  * <p>Be sure to write all attributes <strong>before</strong> writing  * any inner text or nested tags.  * @throws IllegalStateException if the opening tag is closed  */ public void writeAttribute(String attributeName, String attributeValue) throws JspException {     if (currentState().isBlockTag()) {         throw new IllegalStateException("Cannot write attributes after opening tag is closed.").     }     this.writer.append(" ").append(attributeName).append("=\"").append(attributeValue).append("\""). }
true;public;2;5;/**  * Write an HTML attribute if the supplied value is not {@code null}  * or zero length.  * @see #writeAttribute(String, String)  */ ;/**  * Write an HTML attribute if the supplied value is not {@code null}  * or zero length.  * @see #writeAttribute(String, String)  */ public void writeOptionalAttributeValue(String attributeName, @Nullable String attributeValue) throws JspException {     if (StringUtils.hasText(attributeValue)) {         writeAttribute(attributeName, attributeValue).     } }
true;public;1;7;/**  * Close the current opening tag (if necessary) and appends the  * supplied value as inner text.  * @throws IllegalStateException if no tag is open  */ ;/**  * Close the current opening tag (if necessary) and appends the  * supplied value as inner text.  * @throws IllegalStateException if no tag is open  */ public void appendValue(String value) throws JspException {     if (!inTag()) {         throw new IllegalStateException("Cannot write tag value. No open tag available.").     }     closeTagAndMarkAsBlock().     this.writer.append(value). }
true;public;0;6;/**  * Indicate that the currently open tag should be closed and marked  * as a block level element.  * <p>Useful when you plan to write additional content in the body  * outside the context of the current {@link TagWriter}.  */ ;/**  * Indicate that the currently open tag should be closed and marked  * as a block level element.  * <p>Useful when you plan to write additional content in the body  * outside the context of the current {@link TagWriter}.  */ public void forceBlock() throws JspException {     if (currentState().isBlockTag()) {         // just ignore since we are already in the block         return.     }     closeTagAndMarkAsBlock(). }
true;public;0;3;/**  * Close the current tag.  * <p>Correctly writes an empty tag if no inner text or nested tags  * have been written.  */ ;/**  * Close the current tag.  * <p>Correctly writes an empty tag if no inner text or nested tags  * have been written.  */ public void endTag() throws JspException {     endTag(false). }
true;public;1;20;/**  * Close the current tag, allowing to enforce a full closing tag.  * <p>Correctly writes an empty tag if no inner text or nested tags  * have been written.  * @param enforceClosingTag whether a full closing tag should be  * rendered in any case, even in case of a non-block tag  */ ;/**  * Close the current tag, allowing to enforce a full closing tag.  * <p>Correctly writes an empty tag if no inner text or nested tags  * have been written.  * @param enforceClosingTag whether a full closing tag should be  * rendered in any case, even in case of a non-block tag  */ public void endTag(boolean enforceClosingTag) throws JspException {     if (!inTag()) {         throw new IllegalStateException("Cannot write end of tag. No open tag available.").     }     boolean renderClosingTag = true.     if (!currentState().isBlockTag()) {         // Opening tag still needs to be closed...         if (enforceClosingTag) {             this.writer.append(">").         } else {             this.writer.append("/>").             renderClosingTag = false.         }     }     if (renderClosingTag) {         this.writer.append("</").append(currentState().getTagName()).append(">").     }     this.tagState.pop(). }
true;private;1;3;/**  * Adds the supplied tag name to the {@link #tagState tag state}.  */ ;/**  * Adds the supplied tag name to the {@link #tagState tag state}.  */ private void push(String tagName) {     this.tagState.push(new TagStateEntry(tagName)). }
true;private;0;6;/**  * Closes the current opening tag and marks it as a block tag.  */ ;/**  * Closes the current opening tag and marks it as a block tag.  */ private void closeTagAndMarkAsBlock() throws JspException {     if (!currentState().isBlockTag()) {         currentState().markAsBlockTag().         this.writer.append(">").     } }
false;private;0;3;;private boolean inTag() {     return !this.tagState.isEmpty(). }
false;private;0;3;;private TagStateEntry currentState() {     return this.tagState.element(). }
false;public;0;3;;public String getTagName() {     return this.tagName. }
false;public;0;3;;public void markAsBlockTag() {     this.blockTag = true. }
false;public;0;3;;public boolean isBlockTag() {     return this.blockTag. }
false;public;1;9;;public SafeWriter append(String value) throws JspException {     try {         getWriterToUse().write(String.valueOf(value)).         return this.     } catch (IOException ex) {         throw new JspException("Unable to write to JspWriter", ex).     } }
false;private;0;5;;private Writer getWriterToUse() {     Writer writer = (this.pageContext != null ? this.pageContext.getOut() : this.writer).     Assert.state(writer != null, "No Writer available").     return writer. }
