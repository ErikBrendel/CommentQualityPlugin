commented;modifiers;parameterAmount;loc;comment;code
true;public;1;14;/**  * Set the value of the URL.  */ ;/**  * Set the value of the URL.  */ public void setValue(String value) {     if (value.contains(URL_TYPE_ABSOLUTE)) {         this.type = UrlType.ABSOLUTE.         this.value = value.     } else if (value.startsWith("/")) {         this.type = UrlType.CONTEXT_RELATIVE.         this.value = value.     } else {         this.type = UrlType.RELATIVE.         this.value = value.     } }
true;public;1;8;/**  * Set the context path for the URL.  * Defaults to the current context.  */ ;/**  * Set the context path for the URL.  * Defaults to the current context.  */ public void setContext(String context) {     if (context.startsWith("/")) {         this.context = context.     } else {         this.context = "/" + context.     } }
true;public;1;3;/**  * Set the variable name to expose the URL under. Defaults to rendering the  * URL to the current JspWriter  */ ;/**  * Set the variable name to expose the URL under. Defaults to rendering the  * URL to the current JspWriter  */ public void setVar(String var) {     this.var = var. }
true;public;1;3;/**  * Set the scope to export the URL variable to. This attribute has no  * meaning unless var is also defined.  */ ;/**  * Set the scope to export the URL variable to. This attribute has no  * meaning unless var is also defined.  */ public void setScope(String scope) {     this.scope = TagUtils.getScope(scope). }
true;public;1;3;/**  * Set JavaScript escaping for this tag, as boolean value.  * Default is "false".  */ ;/**  * Set JavaScript escaping for this tag, as boolean value.  * Default is "false".  */ public void setJavaScriptEscape(boolean javaScriptEscape) throws JspException {     this.javaScriptEscape = javaScriptEscape. }
false;public;1;4;;@Override public void addParam(Param param) {     this.params.add(param). }
false;public;0;6;;@Override public int doStartTagInternal() throws JspException {     this.params = new LinkedList<>().     this.templateParams = new HashSet<>().     return EVAL_BODY_INCLUDE. }
false;public;0;25;;@Override public int doEndTag() throws JspException {     String url = createUrl().     RequestDataValueProcessor processor = getRequestContext().getRequestDataValueProcessor().     ServletRequest request = this.pageContext.getRequest().     if ((processor != null) && (request instanceof HttpServletRequest)) {         url = processor.processUrl((HttpServletRequest) request, url).     }     if (this.var == null) {         // print the url to the writer         try {             this.pageContext.getOut().print(url).         } catch (IOException ex) {             throw new JspException(ex).         }     } else {         // store the url as a variable         this.pageContext.setAttribute(this.var, url, this.scope).     }     return EVAL_PAGE. }
true;;0;39;/**  * Build the URL for the tag from the tag attributes and parameters.  * @return the URL value as a String  */ ;/**  * Build the URL for the tag from the tag attributes and parameters.  * @return the URL value as a String  */ String createUrl() throws JspException {     Assert.state(this.value != null, "No value set").     HttpServletRequest request = (HttpServletRequest) this.pageContext.getRequest().     HttpServletResponse response = (HttpServletResponse) this.pageContext.getResponse().     StringBuilder url = new StringBuilder().     if (this.type == UrlType.CONTEXT_RELATIVE) {         // add application context to url         if (this.context == null) {             url.append(request.getContextPath()).         } else {             if (this.context.endsWith("/")) {                 url.append(this.context.substring(0, this.context.length() - 1)).             } else {                 url.append(this.context).             }         }     }     if (this.type != UrlType.RELATIVE && this.type != UrlType.ABSOLUTE && !this.value.startsWith("/")) {         url.append("/").     }     url.append(replaceUriTemplateParams(this.value, this.params, this.templateParams)).     url.append(createQueryString(this.params, this.templateParams, (url.indexOf("?") == -1))).     String urlStr = url.toString().     if (this.type != UrlType.ABSOLUTE) {         // Add the session identifier if needed         // (Do not embed the session identifier in a remote link!)         urlStr = response.encodeURL(urlStr).     }     // HTML and/or JavaScript escape, if demanded.     urlStr = htmlEscape(urlStr).     urlStr = (this.javaScriptEscape ? JavaScriptUtils.javaScriptEscape(urlStr) : urlStr).     return urlStr. }
true;protected;3;27;/**  * Build the query string from available parameters that have not already  * been applied as template params.  * <p>The names and values of parameters are URL encoded.  * @param params the parameters to build the query string from  * @param usedParams set of parameter names that have been applied as  * template params  * @param includeQueryStringDelimiter true if the query string should start  * with a '?' instead of '&'  * @return the query string  */ ;/**  * Build the query string from available parameters that have not already  * been applied as template params.  * <p>The names and values of parameters are URL encoded.  * @param params the parameters to build the query string from  * @param usedParams set of parameter names that have been applied as  * template params  * @param includeQueryStringDelimiter true if the query string should start  * with a '?' instead of '&'  * @return the query string  */ protected String createQueryString(List<Param> params, Set<String> usedParams, boolean includeQueryStringDelimiter) throws JspException {     String encoding = this.pageContext.getResponse().getCharacterEncoding().     StringBuilder qs = new StringBuilder().     for (Param param : params) {         if (!usedParams.contains(param.getName()) && StringUtils.hasLength(param.getName())) {             if (includeQueryStringDelimiter && qs.length() == 0) {                 qs.append("?").             } else {                 qs.append("&").             }             try {                 qs.append(UriUtils.encodeQueryParam(param.getName(), encoding)).                 if (param.getValue() != null) {                     qs.append("=").                     qs.append(UriUtils.encodeQueryParam(param.getValue(), encoding)).                 }             } catch (UnsupportedCharsetException ex) {                 throw new JspException(ex).             }         }     }     return qs.toString(). }
true;protected;3;34;/**  * Replace template markers in the URL matching available parameters. The  * name of matched parameters are added to the used parameters set.  * <p>Parameter values are URL encoded.  * @param uri the URL with template parameters to replace  * @param params parameters used to replace template markers  * @param usedParams set of template parameter names that have been replaced  * @return the URL with template parameters replaced  */ ;/**  * Replace template markers in the URL matching available parameters. The  * name of matched parameters are added to the used parameters set.  * <p>Parameter values are URL encoded.  * @param uri the URL with template parameters to replace  * @param params parameters used to replace template markers  * @param usedParams set of template parameter names that have been replaced  * @return the URL with template parameters replaced  */ protected String replaceUriTemplateParams(String uri, List<Param> params, Set<String> usedParams) throws JspException {     String encoding = this.pageContext.getResponse().getCharacterEncoding().     for (Param param : params) {         String template = URL_TEMPLATE_DELIMITER_PREFIX + param.getName() + URL_TEMPLATE_DELIMITER_SUFFIX.         if (uri.contains(template)) {             usedParams.add(param.getName()).             String value = param.getValue().             try {                 uri = StringUtils.replace(uri, template, (value != null ? UriUtils.encodePath(value, encoding) : "")).             } catch (UnsupportedCharsetException ex) {                 throw new JspException(ex).             }         } else {             template = URL_TEMPLATE_DELIMITER_PREFIX + '/' + param.getName() + URL_TEMPLATE_DELIMITER_SUFFIX.             if (uri.contains(template)) {                 usedParams.add(param.getName()).                 String value = param.getValue().                 try {                     uri = StringUtils.replace(uri, template, (value != null ? UriUtils.encodePathSegment(value, encoding) : "")).                 } catch (UnsupportedCharsetException ex) {                     throw new JspException(ex).                 }             }         }     }     return uri. }
