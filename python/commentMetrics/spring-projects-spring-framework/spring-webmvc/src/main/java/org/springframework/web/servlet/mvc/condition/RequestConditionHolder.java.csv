# id;timestamp;commentText;codeText;commentWords;codeWords
RequestConditionHolder -> public RequestConditionHolder(RequestCondition<?> requestCondition);1328020251;Create a new holder to wrap the given request condition._@param requestCondition the condition to hold, may be {@code null};public RequestConditionHolder(RequestCondition<?> requestCondition) {_		this.condition = requestCondition__	};create,a,new,holder,to,wrap,the,given,request,condition,param,request,condition,the,condition,to,hold,may,be,code,null;public,request,condition,holder,request,condition,request,condition,this,condition,request,condition
RequestConditionHolder -> public RequestConditionHolder(RequestCondition<?> requestCondition);1333394378;Create a new holder to wrap the given request condition._@param requestCondition the condition to hold, may be {@code null};public RequestConditionHolder(RequestCondition<?> requestCondition) {_		this.condition = requestCondition__	};create,a,new,holder,to,wrap,the,given,request,condition,param,request,condition,the,condition,to,hold,may,be,code,null;public,request,condition,holder,request,condition,request,condition,this,condition,request,condition
RequestConditionHolder -> private void assertIsCompatible(RequestConditionHolder other);1328020251;Ensure the held request conditions are of the same type.;private void assertIsCompatible(RequestConditionHolder other) {_		Class<?> clazz = condition.getClass()__		Class<?> otherClazz = other.condition.getClass()__		if (!clazz.equals(otherClazz)) {_			throw new ClassCastException("Incompatible request conditions: " + clazz + " and " + otherClazz)__		}_	};ensure,the,held,request,conditions,are,of,the,same,type;private,void,assert,is,compatible,request,condition,holder,other,class,clazz,condition,get,class,class,other,clazz,other,condition,get,class,if,clazz,equals,other,clazz,throw,new,class,cast,exception,incompatible,request,conditions,clazz,and,other,clazz
RequestConditionHolder -> private void assertIsCompatible(RequestConditionHolder other);1333394378;Ensure the held request conditions are of the same type.;private void assertIsCompatible(RequestConditionHolder other) {_		Class<?> clazz = condition.getClass()__		Class<?> otherClazz = other.condition.getClass()__		if (!clazz.equals(otherClazz)) {_			throw new ClassCastException("Incompatible request conditions: " + clazz + " and " + otherClazz)__		}_	};ensure,the,held,request,conditions,are,of,the,same,type;private,void,assert,is,compatible,request,condition,holder,other,class,clazz,condition,get,class,class,other,clazz,other,condition,get,class,if,clazz,equals,other,clazz,throw,new,class,cast,exception,incompatible,request,conditions,clazz,and,other,clazz
RequestConditionHolder -> public int compareTo(RequestConditionHolder other, HttpServletRequest request);1337102166;Compare the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is preferred.;public int compareTo(RequestConditionHolder other, HttpServletRequest request) {_		if (this.condition == null && other.condition == null) {_			return 0__		}_		else if (this.condition == null) {_			return 1__		}_		else if (other.condition == null) {_			return -1__		}_		else {_			assertEqualConditionTypes(other)__			return this.condition.compareTo(other.condition, request)__		}_	};compare,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,preferred;public,int,compare,to,request,condition,holder,other,http,servlet,request,request,if,this,condition,null,other,condition,null,return,0,else,if,this,condition,null,return,1,else,if,other,condition,null,return,1,else,assert,equal,condition,types,other,return,this,condition,compare,to,other,condition,request
RequestConditionHolder -> public int compareTo(RequestConditionHolder other, HttpServletRequest request);1357119239;Compare the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is preferred.;public int compareTo(RequestConditionHolder other, HttpServletRequest request) {_		if (this.condition == null && other.condition == null) {_			return 0__		}_		else if (this.condition == null) {_			return 1__		}_		else if (other.condition == null) {_			return -1__		}_		else {_			assertEqualConditionTypes(other)__			return this.condition.compareTo(other.condition, request)__		}_	};compare,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,preferred;public,int,compare,to,request,condition,holder,other,http,servlet,request,request,if,this,condition,null,other,condition,null,return,0,else,if,this,condition,null,return,1,else,if,other,condition,null,return,1,else,assert,equal,condition,types,other,return,this,condition,compare,to,other,condition,request
RequestConditionHolder -> @SuppressWarnings("unchecked") 	public int compareTo(RequestConditionHolder other, HttpServletRequest request);1328020251;Compare the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is preferred.;@SuppressWarnings("unchecked")_	public int compareTo(RequestConditionHolder other, HttpServletRequest request) {_		if (condition == null && other.condition == null) {_			return 0__		}_		else if (condition == null) {_			return 1__		}_		else if (other.condition == null) {_			return -1__		}_		else {_			assertIsCompatible(other)__			return condition.compareTo(other.condition, request)__		}_	};compare,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,preferred;suppress,warnings,unchecked,public,int,compare,to,request,condition,holder,other,http,servlet,request,request,if,condition,null,other,condition,null,return,0,else,if,condition,null,return,1,else,if,other,condition,null,return,1,else,assert,is,compatible,other,return,condition,compare,to,other,condition,request
RequestConditionHolder -> @SuppressWarnings("unchecked") 	public int compareTo(RequestConditionHolder other, HttpServletRequest request);1333394378;Compare the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is preferred.;@SuppressWarnings("unchecked")_	public int compareTo(RequestConditionHolder other, HttpServletRequest request) {_		if (condition == null && other.condition == null) {_			return 0__		}_		else if (condition == null) {_			return 1__		}_		else if (other.condition == null) {_			return -1__		}_		else {_			assertIsCompatible(other)__			return condition.compareTo(other.condition, request)__		}_	};compare,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,preferred;suppress,warnings,unchecked,public,int,compare,to,request,condition,holder,other,http,servlet,request,request,if,condition,null,other,condition,null,return,0,else,if,condition,null,return,1,else,if,other,condition,null,return,1,else,assert,is,compatible,other,return,condition,compare,to,other,condition,request
RequestConditionHolder -> @SuppressWarnings("unchecked") 	public RequestConditionHolder(RequestCondition<?> requestCondition);1337102166;Create a new holder to wrap the given request condition._@param requestCondition the condition to hold, may be {@code null};@SuppressWarnings("unchecked")_	public RequestConditionHolder(RequestCondition<?> requestCondition) {_		this.condition = (RequestCondition<Object>) requestCondition__	};create,a,new,holder,to,wrap,the,given,request,condition,param,request,condition,the,condition,to,hold,may,be,code,null;suppress,warnings,unchecked,public,request,condition,holder,request,condition,request,condition,this,condition,request,condition,object,request,condition
RequestConditionHolder -> @SuppressWarnings("unchecked") 	public RequestConditionHolder(RequestCondition<?> requestCondition);1356735495;Create a new holder to wrap the given request condition._@param requestCondition the condition to hold, may be {@code null};@SuppressWarnings("unchecked")_	public RequestConditionHolder(RequestCondition<?> requestCondition) {_		this.condition = (RequestCondition<Object>) requestCondition__	};create,a,new,holder,to,wrap,the,given,request,condition,param,request,condition,the,condition,to,hold,may,be,code,null;suppress,warnings,unchecked,public,request,condition,holder,request,condition,request,condition,this,condition,request,condition,object,request,condition
RequestConditionHolder -> @SuppressWarnings("unchecked") 	public RequestConditionHolder(RequestCondition<?> requestCondition);1357119239;Create a new holder to wrap the given request condition._@param requestCondition the condition to hold, may be {@code null};@SuppressWarnings("unchecked")_	public RequestConditionHolder(RequestCondition<?> requestCondition) {_		this.condition = (RequestCondition<Object>) requestCondition__	};create,a,new,holder,to,wrap,the,given,request,condition,param,request,condition,the,condition,to,hold,may,be,code,null;suppress,warnings,unchecked,public,request,condition,holder,request,condition,request,condition,this,condition,request,condition,object,request,condition
RequestConditionHolder -> @SuppressWarnings("unchecked") 	public RequestConditionHolder(RequestCondition<?> requestCondition);1368482696;Create a new holder to wrap the given request condition._@param requestCondition the condition to hold, may be {@code null};@SuppressWarnings("unchecked")_	public RequestConditionHolder(RequestCondition<?> requestCondition) {_		this.condition = (RequestCondition<Object>) requestCondition__	};create,a,new,holder,to,wrap,the,given,request,condition,param,request,condition,the,condition,to,hold,may,be,code,null;suppress,warnings,unchecked,public,request,condition,holder,request,condition,request,condition,this,condition,request,condition,object,request,condition
RequestConditionHolder -> @SuppressWarnings("unchecked") 	public RequestConditionHolder(RequestCondition<?> requestCondition);1385507683;Create a new holder to wrap the given request condition._@param requestCondition the condition to hold, may be {@code null};@SuppressWarnings("unchecked")_	public RequestConditionHolder(RequestCondition<?> requestCondition) {_		this.condition = (RequestCondition<Object>) requestCondition__	};create,a,new,holder,to,wrap,the,given,request,condition,param,request,condition,the,condition,to,hold,may,be,code,null;suppress,warnings,unchecked,public,request,condition,holder,request,condition,request,condition,this,condition,request,condition,object,request,condition
RequestConditionHolder -> @SuppressWarnings("unchecked") 	public RequestConditionHolder(RequestCondition<?> requestCondition);1392410324;Create a new holder to wrap the given request condition._@param requestCondition the condition to hold, may be {@code null};@SuppressWarnings("unchecked")_	public RequestConditionHolder(RequestCondition<?> requestCondition) {_		this.condition = (RequestCondition<Object>) requestCondition__	};create,a,new,holder,to,wrap,the,given,request,condition,param,request,condition,the,condition,to,hold,may,be,code,null;suppress,warnings,unchecked,public,request,condition,holder,request,condition,request,condition,this,condition,request,condition,object,request,condition
RequestConditionHolder -> @SuppressWarnings("unchecked") 	public RequestConditionHolder(@Nullable RequestCondition<?> requestCondition);1495868221;Create a new holder to wrap the given request condition._@param requestCondition the condition to hold, may be {@code null};@SuppressWarnings("unchecked")_	public RequestConditionHolder(@Nullable RequestCondition<?> requestCondition) {_		this.condition = (RequestCondition<Object>) requestCondition__	};create,a,new,holder,to,wrap,the,given,request,condition,param,request,condition,the,condition,to,hold,may,be,code,null;suppress,warnings,unchecked,public,request,condition,holder,nullable,request,condition,request,condition,this,condition,request,condition,object,request,condition
RequestConditionHolder -> @SuppressWarnings("unchecked") 	public RequestConditionHolder(@Nullable RequestCondition<?> requestCondition);1498780456;Create a new holder to wrap the given request condition._@param requestCondition the condition to hold, may be {@code null};@SuppressWarnings("unchecked")_	public RequestConditionHolder(@Nullable RequestCondition<?> requestCondition) {_		this.condition = (RequestCondition<Object>) requestCondition__	};create,a,new,holder,to,wrap,the,given,request,condition,param,request,condition,the,condition,to,hold,may,be,code,null;suppress,warnings,unchecked,public,request,condition,holder,nullable,request,condition,request,condition,this,condition,request,condition,object,request,condition
RequestConditionHolder -> @SuppressWarnings("unchecked") 	public RequestConditionHolder(@Nullable RequestCondition<?> requestCondition);1502974979;Create a new holder to wrap the given request condition._@param requestCondition the condition to hold, may be {@code null};@SuppressWarnings("unchecked")_	public RequestConditionHolder(@Nullable RequestCondition<?> requestCondition) {_		this.condition = (RequestCondition<Object>) requestCondition__	};create,a,new,holder,to,wrap,the,given,request,condition,param,request,condition,the,condition,to,hold,may,be,code,null;suppress,warnings,unchecked,public,request,condition,holder,nullable,request,condition,request,condition,this,condition,request,condition,object,request,condition
RequestConditionHolder -> @Override 	public int compareTo(RequestConditionHolder other, HttpServletRequest request);1356735495;Compare the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is preferred.;@Override_	public int compareTo(RequestConditionHolder other, HttpServletRequest request) {_		if (this.condition == null && other.condition == null) {_			return 0__		}_		else if (this.condition == null) {_			return 1__		}_		else if (other.condition == null) {_			return -1__		}_		else {_			assertEqualConditionTypes(other)__			return this.condition.compareTo(other.condition, request)__		}_	};compare,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,preferred;override,public,int,compare,to,request,condition,holder,other,http,servlet,request,request,if,this,condition,null,other,condition,null,return,0,else,if,this,condition,null,return,1,else,if,other,condition,null,return,1,else,assert,equal,condition,types,other,return,this,condition,compare,to,other,condition,request
RequestConditionHolder -> @Override 	public int compareTo(RequestConditionHolder other, HttpServletRequest request);1368482696;Compare the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is preferred.;@Override_	public int compareTo(RequestConditionHolder other, HttpServletRequest request) {_		if (this.condition == null && other.condition == null) {_			return 0__		}_		else if (this.condition == null) {_			return 1__		}_		else if (other.condition == null) {_			return -1__		}_		else {_			assertEqualConditionTypes(other)__			return this.condition.compareTo(other.condition, request)__		}_	};compare,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,preferred;override,public,int,compare,to,request,condition,holder,other,http,servlet,request,request,if,this,condition,null,other,condition,null,return,0,else,if,this,condition,null,return,1,else,if,other,condition,null,return,1,else,assert,equal,condition,types,other,return,this,condition,compare,to,other,condition,request
RequestConditionHolder -> @Override 	public int compareTo(RequestConditionHolder other, HttpServletRequest request);1385507683;Compare the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is preferred.;@Override_	public int compareTo(RequestConditionHolder other, HttpServletRequest request) {_		if (this.condition == null && other.condition == null) {_			return 0__		}_		else if (this.condition == null) {_			return 1__		}_		else if (other.condition == null) {_			return -1__		}_		else {_			assertEqualConditionTypes(other)__			return this.condition.compareTo(other.condition, request)__		}_	};compare,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,preferred;override,public,int,compare,to,request,condition,holder,other,http,servlet,request,request,if,this,condition,null,other,condition,null,return,0,else,if,this,condition,null,return,1,else,if,other,condition,null,return,1,else,assert,equal,condition,types,other,return,this,condition,compare,to,other,condition,request
RequestConditionHolder -> @Override 	public int compareTo(RequestConditionHolder other, HttpServletRequest request);1392410324;Compare the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is preferred.;@Override_	public int compareTo(RequestConditionHolder other, HttpServletRequest request) {_		if (this.condition == null && other.condition == null) {_			return 0__		}_		else if (this.condition == null) {_			return 1__		}_		else if (other.condition == null) {_			return -1__		}_		else {_			assertEqualConditionTypes(other)__			return this.condition.compareTo(other.condition, request)__		}_	};compare,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,preferred;override,public,int,compare,to,request,condition,holder,other,http,servlet,request,request,if,this,condition,null,other,condition,null,return,0,else,if,this,condition,null,return,1,else,if,other,condition,null,return,1,else,assert,equal,condition,types,other,return,this,condition,compare,to,other,condition,request
RequestConditionHolder -> @Override 	public int compareTo(RequestConditionHolder other, HttpServletRequest request);1495868221;Compare the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is preferred.;@Override_	public int compareTo(RequestConditionHolder other, HttpServletRequest request) {_		if (this.condition == null && other.condition == null) {_			return 0__		}_		else if (this.condition == null) {_			return 1__		}_		else if (other.condition == null) {_			return -1__		}_		else {_			assertEqualConditionTypes(other)__			return this.condition.compareTo(other.condition, request)__		}_	};compare,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,preferred;override,public,int,compare,to,request,condition,holder,other,http,servlet,request,request,if,this,condition,null,other,condition,null,return,0,else,if,this,condition,null,return,1,else,if,other,condition,null,return,1,else,assert,equal,condition,types,other,return,this,condition,compare,to,other,condition,request
RequestConditionHolder -> @Override 	public int compareTo(RequestConditionHolder other, HttpServletRequest request);1498780456;Compare the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is preferred.;@Override_	public int compareTo(RequestConditionHolder other, HttpServletRequest request) {_		if (this.condition == null && other.condition == null) {_			return 0__		}_		else if (this.condition == null) {_			return 1__		}_		else if (other.condition == null) {_			return -1__		}_		else {_			assertEqualConditionTypes(this.condition, other.condition)__			return this.condition.compareTo(other.condition, request)__		}_	};compare,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,preferred;override,public,int,compare,to,request,condition,holder,other,http,servlet,request,request,if,this,condition,null,other,condition,null,return,0,else,if,this,condition,null,return,1,else,if,other,condition,null,return,1,else,assert,equal,condition,types,this,condition,other,condition,return,this,condition,compare,to,other,condition,request
RequestConditionHolder -> @Override 	public int compareTo(RequestConditionHolder other, HttpServletRequest request);1502974979;Compare the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is preferred.;@Override_	public int compareTo(RequestConditionHolder other, HttpServletRequest request) {_		if (this.condition == null && other.condition == null) {_			return 0__		}_		else if (this.condition == null) {_			return 1__		}_		else if (other.condition == null) {_			return -1__		}_		else {_			assertEqualConditionTypes(this.condition, other.condition)__			return this.condition.compareTo(other.condition, request)__		}_	};compare,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,preferred;override,public,int,compare,to,request,condition,holder,other,http,servlet,request,request,if,this,condition,null,other,condition,null,return,0,else,if,this,condition,null,return,1,else,if,other,condition,null,return,1,else,assert,equal,condition,types,this,condition,other,condition,return,this,condition,compare,to,other,condition,request
RequestConditionHolder -> @Nullable 	public RequestCondition<?> getCondition();1495868221;Return the held request condition, or {@code null} if not holding one.;@Nullable_	public RequestCondition<?> getCondition() {_		return this.condition__	};return,the,held,request,condition,or,code,null,if,not,holding,one;nullable,public,request,condition,get,condition,return,this,condition
RequestConditionHolder -> @Nullable 	public RequestCondition<?> getCondition();1498780456;Return the held request condition, or {@code null} if not holding one.;@Nullable_	public RequestCondition<?> getCondition() {_		return this.condition__	};return,the,held,request,condition,or,code,null,if,not,holding,one;nullable,public,request,condition,get,condition,return,this,condition
RequestConditionHolder -> @Nullable 	public RequestCondition<?> getCondition();1502974979;Return the held request condition, or {@code null} if not holding one.;@Nullable_	public RequestCondition<?> getCondition() {_		return this.condition__	};return,the,held,request,condition,or,code,null,if,not,holding,one;nullable,public,request,condition,get,condition,return,this,condition
RequestConditionHolder -> private void assertEqualConditionTypes(RequestConditionHolder other);1337102166;Ensure the held request conditions are of the same type.;private void assertEqualConditionTypes(RequestConditionHolder other) {_		Class<?> clazz = this.condition.getClass()__		Class<?> otherClazz = other.condition.getClass()__		if (!clazz.equals(otherClazz)) {_			throw new ClassCastException("Incompatible request conditions: " + clazz + " and " + otherClazz)__		}_	};ensure,the,held,request,conditions,are,of,the,same,type;private,void,assert,equal,condition,types,request,condition,holder,other,class,clazz,this,condition,get,class,class,other,clazz,other,condition,get,class,if,clazz,equals,other,clazz,throw,new,class,cast,exception,incompatible,request,conditions,clazz,and,other,clazz
RequestConditionHolder -> private void assertEqualConditionTypes(RequestConditionHolder other);1356735495;Ensure the held request conditions are of the same type.;private void assertEqualConditionTypes(RequestConditionHolder other) {_		Class<?> clazz = this.condition.getClass()__		Class<?> otherClazz = other.condition.getClass()__		if (!clazz.equals(otherClazz)) {_			throw new ClassCastException("Incompatible request conditions: " + clazz + " and " + otherClazz)__		}_	};ensure,the,held,request,conditions,are,of,the,same,type;private,void,assert,equal,condition,types,request,condition,holder,other,class,clazz,this,condition,get,class,class,other,clazz,other,condition,get,class,if,clazz,equals,other,clazz,throw,new,class,cast,exception,incompatible,request,conditions,clazz,and,other,clazz
RequestConditionHolder -> private void assertEqualConditionTypes(RequestConditionHolder other);1357119239;Ensure the held request conditions are of the same type.;private void assertEqualConditionTypes(RequestConditionHolder other) {_		Class<?> clazz = this.condition.getClass()__		Class<?> otherClazz = other.condition.getClass()__		if (!clazz.equals(otherClazz)) {_			throw new ClassCastException("Incompatible request conditions: " + clazz + " and " + otherClazz)__		}_	};ensure,the,held,request,conditions,are,of,the,same,type;private,void,assert,equal,condition,types,request,condition,holder,other,class,clazz,this,condition,get,class,class,other,clazz,other,condition,get,class,if,clazz,equals,other,clazz,throw,new,class,cast,exception,incompatible,request,conditions,clazz,and,other,clazz
RequestConditionHolder -> private void assertEqualConditionTypes(RequestConditionHolder other);1368482696;Ensure the held request conditions are of the same type.;private void assertEqualConditionTypes(RequestConditionHolder other) {_		Class<?> clazz = this.condition.getClass()__		Class<?> otherClazz = other.condition.getClass()__		if (!clazz.equals(otherClazz)) {_			throw new ClassCastException("Incompatible request conditions: " + clazz + " and " + otherClazz)__		}_	};ensure,the,held,request,conditions,are,of,the,same,type;private,void,assert,equal,condition,types,request,condition,holder,other,class,clazz,this,condition,get,class,class,other,clazz,other,condition,get,class,if,clazz,equals,other,clazz,throw,new,class,cast,exception,incompatible,request,conditions,clazz,and,other,clazz
RequestConditionHolder -> private void assertEqualConditionTypes(RequestConditionHolder other);1385507683;Ensure the held request conditions are of the same type.;private void assertEqualConditionTypes(RequestConditionHolder other) {_		Class<?> clazz = this.condition.getClass()__		Class<?> otherClazz = other.condition.getClass()__		if (!clazz.equals(otherClazz)) {_			throw new ClassCastException("Incompatible request conditions: " + clazz + " and " + otherClazz)__		}_	};ensure,the,held,request,conditions,are,of,the,same,type;private,void,assert,equal,condition,types,request,condition,holder,other,class,clazz,this,condition,get,class,class,other,clazz,other,condition,get,class,if,clazz,equals,other,clazz,throw,new,class,cast,exception,incompatible,request,conditions,clazz,and,other,clazz
RequestConditionHolder -> private void assertEqualConditionTypes(RequestConditionHolder other);1392410324;Ensure the held request conditions are of the same type.;private void assertEqualConditionTypes(RequestConditionHolder other) {_		Class<?> clazz = this.condition.getClass()__		Class<?> otherClazz = other.condition.getClass()__		if (!clazz.equals(otherClazz)) {_			throw new ClassCastException("Incompatible request conditions: " + clazz + " and " + otherClazz)__		}_	};ensure,the,held,request,conditions,are,of,the,same,type;private,void,assert,equal,condition,types,request,condition,holder,other,class,clazz,this,condition,get,class,class,other,clazz,other,condition,get,class,if,clazz,equals,other,clazz,throw,new,class,cast,exception,incompatible,request,conditions,clazz,and,other,clazz
RequestConditionHolder -> private void assertEqualConditionTypes(RequestConditionHolder other);1495868221;Ensure the held request conditions are of the same type.;private void assertEqualConditionTypes(RequestConditionHolder other) {_		Class<?> clazz = this.condition.getClass()__		Class<?> otherClazz = other.condition.getClass()__		if (!clazz.equals(otherClazz)) {_			throw new ClassCastException("Incompatible request conditions: " + clazz + " and " + otherClazz)__		}_	};ensure,the,held,request,conditions,are,of,the,same,type;private,void,assert,equal,condition,types,request,condition,holder,other,class,clazz,this,condition,get,class,class,other,clazz,other,condition,get,class,if,clazz,equals,other,clazz,throw,new,class,cast,exception,incompatible,request,conditions,clazz,and,other,clazz
RequestConditionHolder -> @Override 	public RequestConditionHolder getMatchingCondition(HttpServletRequest request);1356735495;Get the matching condition for the held request condition wrap it in a_new RequestConditionHolder instance. Or otherwise if this is an empty_holder, return the same holder instance.;@Override_	public RequestConditionHolder getMatchingCondition(HttpServletRequest request) {_		if (this.condition == null) {_			return this__		}_		RequestCondition<?> match = (RequestCondition<?>) this.condition.getMatchingCondition(request)__		return (match != null) ? new RequestConditionHolder(match) : null__	};get,the,matching,condition,for,the,held,request,condition,wrap,it,in,a,new,request,condition,holder,instance,or,otherwise,if,this,is,an,empty,holder,return,the,same,holder,instance;override,public,request,condition,holder,get,matching,condition,http,servlet,request,request,if,this,condition,null,return,this,request,condition,match,request,condition,this,condition,get,matching,condition,request,return,match,null,new,request,condition,holder,match,null
RequestConditionHolder -> @Override 	public RequestConditionHolder getMatchingCondition(HttpServletRequest request);1368482696;Get the matching condition for the held request condition wrap it in a_new RequestConditionHolder instance. Or otherwise if this is an empty_holder, return the same holder instance.;@Override_	public RequestConditionHolder getMatchingCondition(HttpServletRequest request) {_		if (this.condition == null) {_			return this__		}_		RequestCondition<?> match = (RequestCondition<?>) this.condition.getMatchingCondition(request)__		return (match != null) ? new RequestConditionHolder(match) : null__	};get,the,matching,condition,for,the,held,request,condition,wrap,it,in,a,new,request,condition,holder,instance,or,otherwise,if,this,is,an,empty,holder,return,the,same,holder,instance;override,public,request,condition,holder,get,matching,condition,http,servlet,request,request,if,this,condition,null,return,this,request,condition,match,request,condition,this,condition,get,matching,condition,request,return,match,null,new,request,condition,holder,match,null
RequestConditionHolder -> @Override 	public RequestConditionHolder getMatchingCondition(HttpServletRequest request);1385507683;Get the matching condition for the held request condition wrap it in a_new RequestConditionHolder instance. Or otherwise if this is an empty_holder, return the same holder instance.;@Override_	public RequestConditionHolder getMatchingCondition(HttpServletRequest request) {_		if (this.condition == null) {_			return this__		}_		RequestCondition<?> match = (RequestCondition<?>) this.condition.getMatchingCondition(request)__		return (match != null) ? new RequestConditionHolder(match) : null__	};get,the,matching,condition,for,the,held,request,condition,wrap,it,in,a,new,request,condition,holder,instance,or,otherwise,if,this,is,an,empty,holder,return,the,same,holder,instance;override,public,request,condition,holder,get,matching,condition,http,servlet,request,request,if,this,condition,null,return,this,request,condition,match,request,condition,this,condition,get,matching,condition,request,return,match,null,new,request,condition,holder,match,null
RequestConditionHolder -> @Override 	public RequestConditionHolder getMatchingCondition(HttpServletRequest request);1392410324;Get the matching condition for the held request condition wrap it in a_new RequestConditionHolder instance. Or otherwise if this is an empty_holder, return the same holder instance.;@Override_	public RequestConditionHolder getMatchingCondition(HttpServletRequest request) {_		if (this.condition == null) {_			return this__		}_		RequestCondition<?> match = (RequestCondition<?>) this.condition.getMatchingCondition(request)__		return (match != null ? new RequestConditionHolder(match) : null)__	};get,the,matching,condition,for,the,held,request,condition,wrap,it,in,a,new,request,condition,holder,instance,or,otherwise,if,this,is,an,empty,holder,return,the,same,holder,instance;override,public,request,condition,holder,get,matching,condition,http,servlet,request,request,if,this,condition,null,return,this,request,condition,match,request,condition,this,condition,get,matching,condition,request,return,match,null,new,request,condition,holder,match,null
RequestConditionHolder -> @Override 	public RequestConditionHolder getMatchingCondition(HttpServletRequest request);1495868221;Get the matching condition for the held request condition wrap it in a_new RequestConditionHolder instance. Or otherwise if this is an empty_holder, return the same holder instance.;@Override_	public RequestConditionHolder getMatchingCondition(HttpServletRequest request) {_		if (this.condition == null) {_			return this__		}_		RequestCondition<?> match = (RequestCondition<?>) this.condition.getMatchingCondition(request)__		return (match != null ? new RequestConditionHolder(match) : null)__	};get,the,matching,condition,for,the,held,request,condition,wrap,it,in,a,new,request,condition,holder,instance,or,otherwise,if,this,is,an,empty,holder,return,the,same,holder,instance;override,public,request,condition,holder,get,matching,condition,http,servlet,request,request,if,this,condition,null,return,this,request,condition,match,request,condition,this,condition,get,matching,condition,request,return,match,null,new,request,condition,holder,match,null
RequestConditionHolder -> @Override 	public RequestConditionHolder getMatchingCondition(HttpServletRequest request);1498780456;Get the matching condition for the held request condition wrap it in a_new RequestConditionHolder instance. Or otherwise if this is an empty_holder, return the same holder instance.;@Override_	public RequestConditionHolder getMatchingCondition(HttpServletRequest request) {_		if (this.condition == null) {_			return this__		}_		RequestCondition<?> match = (RequestCondition<?>) this.condition.getMatchingCondition(request)__		return (match != null ? new RequestConditionHolder(match) : null)__	};get,the,matching,condition,for,the,held,request,condition,wrap,it,in,a,new,request,condition,holder,instance,or,otherwise,if,this,is,an,empty,holder,return,the,same,holder,instance;override,public,request,condition,holder,get,matching,condition,http,servlet,request,request,if,this,condition,null,return,this,request,condition,match,request,condition,this,condition,get,matching,condition,request,return,match,null,new,request,condition,holder,match,null
RequestConditionHolder -> private void assertEqualConditionTypes(RequestCondition<?> thisCondition, RequestCondition<?> otherCondition);1498780456;Ensure the held request conditions are of the same type.;private void assertEqualConditionTypes(RequestCondition<?> thisCondition, RequestCondition<?> otherCondition) {_		Class<?> clazz = thisCondition.getClass()__		Class<?> otherClazz = otherCondition.getClass()__		if (!clazz.equals(otherClazz)) {_			throw new ClassCastException("Incompatible request conditions: " + clazz + " and " + otherClazz)__		}_	};ensure,the,held,request,conditions,are,of,the,same,type;private,void,assert,equal,condition,types,request,condition,this,condition,request,condition,other,condition,class,clazz,this,condition,get,class,class,other,clazz,other,condition,get,class,if,clazz,equals,other,clazz,throw,new,class,cast,exception,incompatible,request,conditions,clazz,and,other,clazz
RequestConditionHolder -> private void assertEqualConditionTypes(RequestCondition<?> thisCondition, RequestCondition<?> otherCondition);1502974979;Ensure the held request conditions are of the same type.;private void assertEqualConditionTypes(RequestCondition<?> thisCondition, RequestCondition<?> otherCondition) {_		Class<?> clazz = thisCondition.getClass()__		Class<?> otherClazz = otherCondition.getClass()__		if (!clazz.equals(otherClazz)) {_			throw new ClassCastException("Incompatible request conditions: " + clazz + " and " + otherClazz)__		}_	};ensure,the,held,request,conditions,are,of,the,same,type;private,void,assert,equal,condition,types,request,condition,this,condition,request,condition,other,condition,class,clazz,this,condition,get,class,class,other,clazz,other,condition,get,class,if,clazz,equals,other,clazz,throw,new,class,cast,exception,incompatible,request,conditions,clazz,and,other,clazz
RequestConditionHolder -> @SuppressWarnings("unchecked") 	public RequestConditionHolder combine(RequestConditionHolder other);1328020251;Combine the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is returned.;@SuppressWarnings("unchecked")_	public RequestConditionHolder combine(RequestConditionHolder other) {_		if (condition == null && other.condition == null) {_			return this__		}_		else if (condition == null) {_			return other__		}_		else if (other.condition == null) {_			return this__		}_		else {_			assertIsCompatible(other)__			RequestCondition<?> combined = (RequestCondition<?>) condition.combine(other.condition)__			return new RequestConditionHolder(combined)__		}_	};combine,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,returned;suppress,warnings,unchecked,public,request,condition,holder,combine,request,condition,holder,other,if,condition,null,other,condition,null,return,this,else,if,condition,null,return,other,else,if,other,condition,null,return,this,else,assert,is,compatible,other,request,condition,combined,request,condition,condition,combine,other,condition,return,new,request,condition,holder,combined
RequestConditionHolder -> @SuppressWarnings("unchecked") 	public RequestConditionHolder combine(RequestConditionHolder other);1333394378;Combine the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is returned.;@SuppressWarnings("unchecked")_	public RequestConditionHolder combine(RequestConditionHolder other) {_		if (condition == null && other.condition == null) {_			return this__		}_		else if (condition == null) {_			return other__		}_		else if (other.condition == null) {_			return this__		}_		else {_			assertIsCompatible(other)__			RequestCondition<?> combined = (RequestCondition<?>) condition.combine(other.condition)__			return new RequestConditionHolder(combined)__		}_	};combine,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,returned;suppress,warnings,unchecked,public,request,condition,holder,combine,request,condition,holder,other,if,condition,null,other,condition,null,return,this,else,if,condition,null,return,other,else,if,other,condition,null,return,this,else,assert,is,compatible,other,request,condition,combined,request,condition,condition,combine,other,condition,return,new,request,condition,holder,combined
RequestConditionHolder -> public RequestConditionHolder getMatchingCondition(HttpServletRequest request);1328020251;Get the matching condition for the held request condition wrap it in a_new RequestConditionHolder instance. Or otherwise if this is an empty_holder, return the same holder instance.;public RequestConditionHolder getMatchingCondition(HttpServletRequest request) {_		if (condition == null) {_			return this__		}_		RequestCondition<?> match = (RequestCondition<?>) condition.getMatchingCondition(request)__		return new RequestConditionHolder(match)__	};get,the,matching,condition,for,the,held,request,condition,wrap,it,in,a,new,request,condition,holder,instance,or,otherwise,if,this,is,an,empty,holder,return,the,same,holder,instance;public,request,condition,holder,get,matching,condition,http,servlet,request,request,if,condition,null,return,this,request,condition,match,request,condition,condition,get,matching,condition,request,return,new,request,condition,holder,match
RequestConditionHolder -> public RequestConditionHolder getMatchingCondition(HttpServletRequest request);1333394378;Get the matching condition for the held request condition wrap it in a_new RequestConditionHolder instance. Or otherwise if this is an empty_holder, return the same holder instance.;public RequestConditionHolder getMatchingCondition(HttpServletRequest request) {_		if (condition == null) {_			return this__		}_		RequestCondition<?> match = (RequestCondition<?>) condition.getMatchingCondition(request)__		return (match != null) ? new RequestConditionHolder(match) : null__	};get,the,matching,condition,for,the,held,request,condition,wrap,it,in,a,new,request,condition,holder,instance,or,otherwise,if,this,is,an,empty,holder,return,the,same,holder,instance;public,request,condition,holder,get,matching,condition,http,servlet,request,request,if,condition,null,return,this,request,condition,match,request,condition,condition,get,matching,condition,request,return,match,null,new,request,condition,holder,match,null
RequestConditionHolder -> public RequestConditionHolder getMatchingCondition(HttpServletRequest request);1337102166;Get the matching condition for the held request condition wrap it in a_new RequestConditionHolder instance. Or otherwise if this is an empty_holder, return the same holder instance.;public RequestConditionHolder getMatchingCondition(HttpServletRequest request) {_		if (this.condition == null) {_			return this__		}_		RequestCondition<?> match = (RequestCondition<?>) this.condition.getMatchingCondition(request)__		return (match != null) ? new RequestConditionHolder(match) : null__	};get,the,matching,condition,for,the,held,request,condition,wrap,it,in,a,new,request,condition,holder,instance,or,otherwise,if,this,is,an,empty,holder,return,the,same,holder,instance;public,request,condition,holder,get,matching,condition,http,servlet,request,request,if,this,condition,null,return,this,request,condition,match,request,condition,this,condition,get,matching,condition,request,return,match,null,new,request,condition,holder,match,null
RequestConditionHolder -> public RequestConditionHolder getMatchingCondition(HttpServletRequest request);1357119239;Get the matching condition for the held request condition wrap it in a_new RequestConditionHolder instance. Or otherwise if this is an empty_holder, return the same holder instance.;public RequestConditionHolder getMatchingCondition(HttpServletRequest request) {_		if (this.condition == null) {_			return this__		}_		RequestCondition<?> match = (RequestCondition<?>) this.condition.getMatchingCondition(request)__		return (match != null) ? new RequestConditionHolder(match) : null__	};get,the,matching,condition,for,the,held,request,condition,wrap,it,in,a,new,request,condition,holder,instance,or,otherwise,if,this,is,an,empty,holder,return,the,same,holder,instance;public,request,condition,holder,get,matching,condition,http,servlet,request,request,if,this,condition,null,return,this,request,condition,match,request,condition,this,condition,get,matching,condition,request,return,match,null,new,request,condition,holder,match,null
RequestConditionHolder -> public RequestConditionHolder combine(RequestConditionHolder other);1337102166;Combine the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is returned.;public RequestConditionHolder combine(RequestConditionHolder other) {_		if (this.condition == null && other.condition == null) {_			return this__		}_		else if (this.condition == null) {_			return other__		}_		else if (other.condition == null) {_			return this__		}_		else {_			assertEqualConditionTypes(other)__			RequestCondition<?> combined = (RequestCondition<?>) this.condition.combine(other.condition)__			return new RequestConditionHolder(combined)__		}_	};combine,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,returned;public,request,condition,holder,combine,request,condition,holder,other,if,this,condition,null,other,condition,null,return,this,else,if,this,condition,null,return,other,else,if,other,condition,null,return,this,else,assert,equal,condition,types,other,request,condition,combined,request,condition,this,condition,combine,other,condition,return,new,request,condition,holder,combined
RequestConditionHolder -> public RequestConditionHolder combine(RequestConditionHolder other);1357119239;Combine the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is returned.;public RequestConditionHolder combine(RequestConditionHolder other) {_		if (this.condition == null && other.condition == null) {_			return this__		}_		else if (this.condition == null) {_			return other__		}_		else if (other.condition == null) {_			return this__		}_		else {_			assertEqualConditionTypes(other)__			RequestCondition<?> combined = (RequestCondition<?>) this.condition.combine(other.condition)__			return new RequestConditionHolder(combined)__		}_	};combine,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,returned;public,request,condition,holder,combine,request,condition,holder,other,if,this,condition,null,other,condition,null,return,this,else,if,this,condition,null,return,other,else,if,other,condition,null,return,this,else,assert,equal,condition,types,other,request,condition,combined,request,condition,this,condition,combine,other,condition,return,new,request,condition,holder,combined
RequestConditionHolder -> @Override 	public RequestConditionHolder combine(RequestConditionHolder other);1356735495;Combine the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is returned.;@Override_	public RequestConditionHolder combine(RequestConditionHolder other) {_		if (this.condition == null && other.condition == null) {_			return this__		}_		else if (this.condition == null) {_			return other__		}_		else if (other.condition == null) {_			return this__		}_		else {_			assertEqualConditionTypes(other)__			RequestCondition<?> combined = (RequestCondition<?>) this.condition.combine(other.condition)__			return new RequestConditionHolder(combined)__		}_	};combine,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,returned;override,public,request,condition,holder,combine,request,condition,holder,other,if,this,condition,null,other,condition,null,return,this,else,if,this,condition,null,return,other,else,if,other,condition,null,return,this,else,assert,equal,condition,types,other,request,condition,combined,request,condition,this,condition,combine,other,condition,return,new,request,condition,holder,combined
RequestConditionHolder -> @Override 	public RequestConditionHolder combine(RequestConditionHolder other);1368482696;Combine the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is returned.;@Override_	public RequestConditionHolder combine(RequestConditionHolder other) {_		if (this.condition == null && other.condition == null) {_			return this__		}_		else if (this.condition == null) {_			return other__		}_		else if (other.condition == null) {_			return this__		}_		else {_			assertEqualConditionTypes(other)__			RequestCondition<?> combined = (RequestCondition<?>) this.condition.combine(other.condition)__			return new RequestConditionHolder(combined)__		}_	};combine,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,returned;override,public,request,condition,holder,combine,request,condition,holder,other,if,this,condition,null,other,condition,null,return,this,else,if,this,condition,null,return,other,else,if,other,condition,null,return,this,else,assert,equal,condition,types,other,request,condition,combined,request,condition,this,condition,combine,other,condition,return,new,request,condition,holder,combined
RequestConditionHolder -> @Override 	public RequestConditionHolder combine(RequestConditionHolder other);1385507683;Combine the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is returned.;@Override_	public RequestConditionHolder combine(RequestConditionHolder other) {_		if (this.condition == null && other.condition == null) {_			return this__		}_		else if (this.condition == null) {_			return other__		}_		else if (other.condition == null) {_			return this__		}_		else {_			assertEqualConditionTypes(other)__			RequestCondition<?> combined = (RequestCondition<?>) this.condition.combine(other.condition)__			return new RequestConditionHolder(combined)__		}_	};combine,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,returned;override,public,request,condition,holder,combine,request,condition,holder,other,if,this,condition,null,other,condition,null,return,this,else,if,this,condition,null,return,other,else,if,other,condition,null,return,this,else,assert,equal,condition,types,other,request,condition,combined,request,condition,this,condition,combine,other,condition,return,new,request,condition,holder,combined
RequestConditionHolder -> @Override 	public RequestConditionHolder combine(RequestConditionHolder other);1392410324;Combine the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is returned.;@Override_	public RequestConditionHolder combine(RequestConditionHolder other) {_		if (this.condition == null && other.condition == null) {_			return this__		}_		else if (this.condition == null) {_			return other__		}_		else if (other.condition == null) {_			return this__		}_		else {_			assertEqualConditionTypes(other)__			RequestCondition<?> combined = (RequestCondition<?>) this.condition.combine(other.condition)__			return new RequestConditionHolder(combined)__		}_	};combine,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,returned;override,public,request,condition,holder,combine,request,condition,holder,other,if,this,condition,null,other,condition,null,return,this,else,if,this,condition,null,return,other,else,if,other,condition,null,return,this,else,assert,equal,condition,types,other,request,condition,combined,request,condition,this,condition,combine,other,condition,return,new,request,condition,holder,combined
RequestConditionHolder -> @Override 	public RequestConditionHolder combine(RequestConditionHolder other);1495868221;Combine the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is returned.;@Override_	public RequestConditionHolder combine(RequestConditionHolder other) {_		if (this.condition == null && other.condition == null) {_			return this__		}_		else if (this.condition == null) {_			return other__		}_		else if (other.condition == null) {_			return this__		}_		else {_			assertEqualConditionTypes(other)__			RequestCondition<?> combined = (RequestCondition<?>) this.condition.combine(other.condition)__			return new RequestConditionHolder(combined)__		}_	};combine,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,returned;override,public,request,condition,holder,combine,request,condition,holder,other,if,this,condition,null,other,condition,null,return,this,else,if,this,condition,null,return,other,else,if,other,condition,null,return,this,else,assert,equal,condition,types,other,request,condition,combined,request,condition,this,condition,combine,other,condition,return,new,request,condition,holder,combined
RequestConditionHolder -> @Override 	public RequestConditionHolder combine(RequestConditionHolder other);1498780456;Combine the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is returned.;@Override_	public RequestConditionHolder combine(RequestConditionHolder other) {_		if (this.condition == null && other.condition == null) {_			return this__		}_		else if (this.condition == null) {_			return other__		}_		else if (other.condition == null) {_			return this__		}_		else {_			assertEqualConditionTypes(this.condition, other.condition)__			RequestCondition<?> combined = (RequestCondition<?>) this.condition.combine(other.condition)__			return new RequestConditionHolder(combined)__		}_	};combine,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,returned;override,public,request,condition,holder,combine,request,condition,holder,other,if,this,condition,null,other,condition,null,return,this,else,if,this,condition,null,return,other,else,if,other,condition,null,return,this,else,assert,equal,condition,types,this,condition,other,condition,request,condition,combined,request,condition,this,condition,combine,other,condition,return,new,request,condition,holder,combined
RequestConditionHolder -> @Override 	public RequestConditionHolder combine(RequestConditionHolder other);1502974979;Combine the request conditions held by the two RequestConditionHolder_instances after making sure the conditions are of the same type._Or if one holder is empty, the other holder is returned.;@Override_	public RequestConditionHolder combine(RequestConditionHolder other) {_		if (this.condition == null && other.condition == null) {_			return this__		}_		else if (this.condition == null) {_			return other__		}_		else if (other.condition == null) {_			return this__		}_		else {_			assertEqualConditionTypes(this.condition, other.condition)__			RequestCondition<?> combined = (RequestCondition<?>) this.condition.combine(other.condition)__			return new RequestConditionHolder(combined)__		}_	};combine,the,request,conditions,held,by,the,two,request,condition,holder,instances,after,making,sure,the,conditions,are,of,the,same,type,or,if,one,holder,is,empty,the,other,holder,is,returned;override,public,request,condition,holder,combine,request,condition,holder,other,if,this,condition,null,other,condition,null,return,this,else,if,this,condition,null,return,other,else,if,other,condition,null,return,this,else,assert,equal,condition,types,this,condition,other,condition,request,condition,combined,request,condition,this,condition,combine,other,condition,return,new,request,condition,holder,combined
RequestConditionHolder -> public RequestCondition<?> getCondition();1328020251;Return the held request condition, or {@code null} if not holding one.;public RequestCondition<?> getCondition() {_		return condition__	};return,the,held,request,condition,or,code,null,if,not,holding,one;public,request,condition,get,condition,return,condition
RequestConditionHolder -> public RequestCondition<?> getCondition();1333394378;Return the held request condition, or {@code null} if not holding one.;public RequestCondition<?> getCondition() {_		return condition__	};return,the,held,request,condition,or,code,null,if,not,holding,one;public,request,condition,get,condition,return,condition
RequestConditionHolder -> public RequestCondition<?> getCondition();1337102166;Return the held request condition, or {@code null} if not holding one.;public RequestCondition<?> getCondition() {_		return this.condition__	};return,the,held,request,condition,or,code,null,if,not,holding,one;public,request,condition,get,condition,return,this,condition
RequestConditionHolder -> public RequestCondition<?> getCondition();1356735495;Return the held request condition, or {@code null} if not holding one.;public RequestCondition<?> getCondition() {_		return this.condition__	};return,the,held,request,condition,or,code,null,if,not,holding,one;public,request,condition,get,condition,return,this,condition
RequestConditionHolder -> public RequestCondition<?> getCondition();1357119239;Return the held request condition, or {@code null} if not holding one.;public RequestCondition<?> getCondition() {_		return this.condition__	};return,the,held,request,condition,or,code,null,if,not,holding,one;public,request,condition,get,condition,return,this,condition
RequestConditionHolder -> public RequestCondition<?> getCondition();1368482696;Return the held request condition, or {@code null} if not holding one.;public RequestCondition<?> getCondition() {_		return this.condition__	};return,the,held,request,condition,or,code,null,if,not,holding,one;public,request,condition,get,condition,return,this,condition
RequestConditionHolder -> public RequestCondition<?> getCondition();1385507683;Return the held request condition, or {@code null} if not holding one.;public RequestCondition<?> getCondition() {_		return this.condition__	};return,the,held,request,condition,or,code,null,if,not,holding,one;public,request,condition,get,condition,return,this,condition
RequestConditionHolder -> public RequestCondition<?> getCondition();1392410324;Return the held request condition, or {@code null} if not holding one.;public RequestCondition<?> getCondition() {_		return this.condition__	};return,the,held,request,condition,or,code,null,if,not,holding,one;public,request,condition,get,condition,return,this,condition
