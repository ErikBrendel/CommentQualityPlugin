# id;timestamp;commentText;codeText;commentWords;codeWords
WebContentGenerator -> protected final void applyCacheSeconds(HttpServletResponse response, int seconds);1328020251;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching_@see #cacheForSeconds(javax.servlet.http.HttpServletResponse, int, boolean);protected final void applyCacheSeconds(HttpServletResponse response, int seconds) {_		applyCacheSeconds(response, seconds, false)__	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,see,cache,for,seconds,javax,servlet,http,http,servlet,response,int,boolean;protected,final,void,apply,cache,seconds,http,servlet,response,response,int,seconds,apply,cache,seconds,response,seconds,false
WebContentGenerator -> protected final void applyCacheSeconds(HttpServletResponse response, int seconds);1356735495;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching_@see #cacheForSeconds(javax.servlet.http.HttpServletResponse, int, boolean);protected final void applyCacheSeconds(HttpServletResponse response, int seconds) {_		applyCacheSeconds(response, seconds, false)__	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,see,cache,for,seconds,javax,servlet,http,http,servlet,response,int,boolean;protected,final,void,apply,cache,seconds,http,servlet,response,response,int,seconds,apply,cache,seconds,response,seconds,false
WebContentGenerator -> protected final void applyCacheSeconds(HttpServletResponse response, int seconds);1362408075;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching_@see #cacheForSeconds(javax.servlet.http.HttpServletResponse, int, boolean);protected final void applyCacheSeconds(HttpServletResponse response, int seconds) {_		applyCacheSeconds(response, seconds, false)__	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,see,cache,for,seconds,javax,servlet,http,http,servlet,response,int,boolean;protected,final,void,apply,cache,seconds,http,servlet,response,response,int,seconds,apply,cache,seconds,response,seconds,false
WebContentGenerator -> protected final void applyCacheSeconds(HttpServletResponse response, int seconds);1385423968;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching_@see #cacheForSeconds(javax.servlet.http.HttpServletResponse, int, boolean);protected final void applyCacheSeconds(HttpServletResponse response, int seconds) {_		applyCacheSeconds(response, seconds, false)__	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,see,cache,for,seconds,javax,servlet,http,http,servlet,response,int,boolean;protected,final,void,apply,cache,seconds,http,servlet,response,response,int,seconds,apply,cache,seconds,response,seconds,false
WebContentGenerator -> protected final void applyCacheSeconds(HttpServletResponse response, int seconds);1386025020;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching_@see #cacheForSeconds(javax.servlet.http.HttpServletResponse, int, boolean);protected final void applyCacheSeconds(HttpServletResponse response, int seconds) {_		applyCacheSeconds(response, seconds, false)__	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,see,cache,for,seconds,javax,servlet,http,http,servlet,response,int,boolean;protected,final,void,apply,cache,seconds,http,servlet,response,response,int,seconds,apply,cache,seconds,response,seconds,false
WebContentGenerator -> protected final void applyCacheSeconds(HttpServletResponse response, int seconds);1407511029;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching_@see #cacheForSeconds(javax.servlet.http.HttpServletResponse, int, boolean);protected final void applyCacheSeconds(HttpServletResponse response, int seconds) {_		applyCacheSeconds(response, seconds, false)__	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,see,cache,for,seconds,javax,servlet,http,http,servlet,response,int,boolean;protected,final,void,apply,cache,seconds,http,servlet,response,response,int,seconds,apply,cache,seconds,response,seconds,false
WebContentGenerator -> public void setCacheControl(CacheControl cacheControl);1427130064;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.__@since 4.2;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public void setCacheControl(CacheControl cacheControl);1432326716;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.__@since 4.2;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public void setCacheControl(CacheControl cacheControl);1434026774;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.__@since 4.2;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public void setCacheControl(CacheControl cacheControl);1436310496;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.__@since 4.2;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public void setCacheControl(CacheControl cacheControl);1437425300;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.__@since 4.2;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public void setCacheControl(CacheControl cacheControl);1437466084;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.__@since 4.2;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public void setCacheControl(CacheControl cacheControl);1437472622;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.__@since 4.2;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> protected String getAllowHeader();1453757715;Return the "Allow" header value to use in response to an HTTP OPTIONS_request based on the configured {@link #setSupportedMethods supported_methods} also automatically adding "OPTIONS" to the list even if not_present as a supported method. This means sub-classes don't have to_explicitly list "OPTIONS" as a supported method as long as HTTP OPTIONS_requests are handled before making a call to_{@link #checkRequest(HttpServletRequest)}.;protected String getAllowHeader() {_		return this.allowHeader__	};return,the,allow,header,value,to,use,in,response,to,an,http,options,request,based,on,the,configured,link,set,supported,methods,supported,methods,also,automatically,adding,options,to,the,list,even,if,not,present,as,a,supported,method,this,means,sub,classes,don,t,have,to,explicitly,list,options,as,a,supported,method,as,long,as,http,options,requests,are,handled,before,making,a,call,to,link,check,request,http,servlet,request;protected,string,get,allow,header,return,this,allow,header
WebContentGenerator -> protected String getAllowHeader();1456936964;Return the "Allow" header value to use in response to an HTTP OPTIONS_request based on the configured {@link #setSupportedMethods supported_methods} also automatically adding "OPTIONS" to the list even if not_present as a supported method. This means sub-classes don't have to_explicitly list "OPTIONS" as a supported method as long as HTTP OPTIONS_requests are handled before making a call to_{@link #checkRequest(HttpServletRequest)}.;protected String getAllowHeader() {_		return this.allowHeader__	};return,the,allow,header,value,to,use,in,response,to,an,http,options,request,based,on,the,configured,link,set,supported,methods,supported,methods,also,automatically,adding,options,to,the,list,even,if,not,present,as,a,supported,method,this,means,sub,classes,don,t,have,to,explicitly,list,options,as,a,supported,method,as,long,as,http,options,requests,are,handled,before,making,a,call,to,link,check,request,http,servlet,request;protected,string,get,allow,header,return,this,allow,header
WebContentGenerator -> protected String getAllowHeader();1458697675;Return the "Allow" header value to use in response to an HTTP OPTIONS_request based on the configured {@link #setSupportedMethods supported_methods} also automatically adding "OPTIONS" to the list even if not_present as a supported method. This means sub-classes don't have to_explicitly list "OPTIONS" as a supported method as long as HTTP OPTIONS_requests are handled before making a call to_{@link #checkRequest(HttpServletRequest)}.;protected String getAllowHeader() {_		return this.allowHeader__	};return,the,allow,header,value,to,use,in,response,to,an,http,options,request,based,on,the,configured,link,set,supported,methods,supported,methods,also,automatically,adding,options,to,the,list,even,if,not,present,as,a,supported,method,this,means,sub,classes,don,t,have,to,explicitly,list,options,as,a,supported,method,as,long,as,http,options,requests,are,handled,before,making,a,call,to,link,check,request,http,servlet,request;protected,string,get,allow,header,return,this,allow,header
WebContentGenerator -> protected String getAllowHeader();1458747313;Return the "Allow" header value to use in response to an HTTP OPTIONS_request based on the configured {@link #setSupportedMethods supported_methods} also automatically adding "OPTIONS" to the list even if not_present as a supported method. This means sub-classes don't have to_explicitly list "OPTIONS" as a supported method as long as HTTP OPTIONS_requests are handled before making a call to_{@link #checkRequest(HttpServletRequest)}.;protected String getAllowHeader() {_		return this.allowHeader__	};return,the,allow,header,value,to,use,in,response,to,an,http,options,request,based,on,the,configured,link,set,supported,methods,supported,methods,also,automatically,adding,options,to,the,list,even,if,not,present,as,a,supported,method,this,means,sub,classes,don,t,have,to,explicitly,list,options,as,a,supported,method,as,long,as,http,options,requests,are,handled,before,making,a,call,to,link,check,request,http,servlet,request;protected,string,get,allow,header,return,this,allow,header
WebContentGenerator -> protected String getAllowHeader();1458830057;Return the "Allow" header value to use in response to an HTTP OPTIONS_request based on the configured {@link #setSupportedMethods supported_methods} also automatically adding "OPTIONS" to the list even if not_present as a supported method. This means sub-classes don't have to_explicitly list "OPTIONS" as a supported method as long as HTTP OPTIONS_requests are handled before making a call to_{@link #checkRequest(HttpServletRequest)}.;protected String getAllowHeader() {_		return this.allowHeader__	};return,the,allow,header,value,to,use,in,response,to,an,http,options,request,based,on,the,configured,link,set,supported,methods,supported,methods,also,automatically,adding,options,to,the,list,even,if,not,present,as,a,supported,method,this,means,sub,classes,don,t,have,to,explicitly,list,options,as,a,supported,method,as,long,as,http,options,requests,are,handled,before,making,a,call,to,link,check,request,http,servlet,request;protected,string,get,allow,header,return,this,allow,header
WebContentGenerator -> protected String getAllowHeader();1465306936;Return the "Allow" header value to use in response to an HTTP OPTIONS_request based on the configured {@link #setSupportedMethods supported_methods} also automatically adding "OPTIONS" to the list even if not_present as a supported method. This means sub-classes don't have to_explicitly list "OPTIONS" as a supported method as long as HTTP OPTIONS_requests are handled before making a call to_{@link #checkRequest(HttpServletRequest)}.;protected String getAllowHeader() {_		return this.allowHeader__	};return,the,allow,header,value,to,use,in,response,to,an,http,options,request,based,on,the,configured,link,set,supported,methods,supported,methods,also,automatically,adding,options,to,the,list,even,if,not,present,as,a,supported,method,this,means,sub,classes,don,t,have,to,explicitly,list,options,as,a,supported,method,as,long,as,http,options,requests,are,handled,before,making,a,call,to,link,check,request,http,servlet,request;protected,string,get,allow,header,return,this,allow,header
WebContentGenerator -> protected String getAllowHeader();1467667881;Return the "Allow" header value to use in response to an HTTP OPTIONS_request based on the configured {@link #setSupportedMethods supported_methods} also automatically adding "OPTIONS" to the list even if not_present as a supported method. This means sub-classes don't have to_explicitly list "OPTIONS" as a supported method as long as HTTP OPTIONS_requests are handled before making a call to_{@link #checkRequest(HttpServletRequest)}.;protected String getAllowHeader() {_		return this.allowHeader__	};return,the,allow,header,value,to,use,in,response,to,an,http,options,request,based,on,the,configured,link,set,supported,methods,supported,methods,also,automatically,adding,options,to,the,list,even,if,not,present,as,a,supported,method,this,means,sub,classes,don,t,have,to,explicitly,list,options,as,a,supported,method,as,long,as,http,options,requests,are,handled,before,making,a,call,to,link,check,request,http,servlet,request;protected,string,get,allow,header,return,this,allow,header
WebContentGenerator -> protected String getAllowHeader();1467730834;Return the "Allow" header value to use in response to an HTTP OPTIONS_request based on the configured {@link #setSupportedMethods supported_methods} also automatically adding "OPTIONS" to the list even if not_present as a supported method. This means sub-classes don't have to_explicitly list "OPTIONS" as a supported method as long as HTTP OPTIONS_requests are handled before making a call to_{@link #checkRequest(HttpServletRequest)}.;protected String getAllowHeader() {_		return this.allowHeader__	};return,the,allow,header,value,to,use,in,response,to,an,http,options,request,based,on,the,configured,link,set,supported,methods,supported,methods,also,automatically,adding,options,to,the,list,even,if,not,present,as,a,supported,method,this,means,sub,classes,don,t,have,to,explicitly,list,options,as,a,supported,method,as,long,as,http,options,requests,are,handled,before,making,a,call,to,link,check,request,http,servlet,request;protected,string,get,allow,header,return,this,allow,header
WebContentGenerator -> protected String getAllowHeader();1483750478;Return the "Allow" header value to use in response to an HTTP OPTIONS_request based on the configured {@link #setSupportedMethods supported_methods} also automatically adding "OPTIONS" to the list even if not_present as a supported method. This means sub-classes don't have to_explicitly list "OPTIONS" as a supported method as long as HTTP OPTIONS_requests are handled before making a call to_{@link #checkRequest(HttpServletRequest)}.;protected String getAllowHeader() {_		return this.allowHeader__	};return,the,allow,header,value,to,use,in,response,to,an,http,options,request,based,on,the,configured,link,set,supported,methods,supported,methods,also,automatically,adding,options,to,the,list,even,if,not,present,as,a,supported,method,this,means,sub,classes,don,t,have,to,explicitly,list,options,as,a,supported,method,as,long,as,http,options,requests,are,handled,before,making,a,call,to,link,check,request,http,servlet,request;protected,string,get,allow,header,return,this,allow,header
WebContentGenerator -> protected String getAllowHeader();1490350007;Return the "Allow" header value to use in response to an HTTP OPTIONS_request based on the configured {@link #setSupportedMethods supported_methods} also automatically adding "OPTIONS" to the list even if not_present as a supported method. This means sub-classes don't have to_explicitly list "OPTIONS" as a supported method as long as HTTP OPTIONS_requests are handled before making a call to_{@link #checkRequest(HttpServletRequest)}.;protected String getAllowHeader() {_		return this.allowHeader__	};return,the,allow,header,value,to,use,in,response,to,an,http,options,request,based,on,the,configured,link,set,supported,methods,supported,methods,also,automatically,adding,options,to,the,list,even,if,not,present,as,a,supported,method,this,means,sub,classes,don,t,have,to,explicitly,list,options,as,a,supported,method,as,long,as,http,options,requests,are,handled,before,making,a,call,to,link,check,request,http,servlet,request;protected,string,get,allow,header,return,this,allow,header
WebContentGenerator -> public WebContentGenerator();1328020251;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1356735495;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1362408075;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1385423968;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1386025020;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1407511029;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1427130064;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1432326716;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1434026774;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1436310496;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1437425300;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1437466084;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1437472622;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1437503583;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1446044819;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1453475043;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1453729744;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1453757715;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1456936964;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1458697675;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1458747313;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1458830057;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1465306936;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1467667881;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1467730834;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1483750478;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1490350007;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1498780456;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1500448076;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1518987682;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public WebContentGenerator();1530174524;Create a new WebContentGenerator which supports_HTTP methods GET, HEAD and POST by default.;public WebContentGenerator() {_		this(true)__	};create,a,new,web,content,generator,which,supports,http,methods,get,head,and,post,by,default;public,web,content,generator,this,true
WebContentGenerator -> public final void setUseCacheControlHeader(boolean useCacheControlHeader);1328020251;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.;public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request;public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> public final void setUseCacheControlHeader(boolean useCacheControlHeader);1356735495;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.;public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request;public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> public final void setUseCacheControlHeader(boolean useCacheControlHeader);1362408075;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.;public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request;public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> public final void setUseCacheControlHeader(boolean useCacheControlHeader);1385423968;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.;public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request;public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> public final void setUseCacheControlHeader(boolean useCacheControlHeader);1386025020;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.;public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request;public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> public final void setUseCacheControlHeader(boolean useCacheControlHeader);1407511029;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.;public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request;public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> protected final void applyCacheSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1328020251;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param seconds the (positive) number of seconds into the future that_the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void applyCacheSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (seconds > 0) {_			cacheForSeconds(response, seconds, mustRevalidate)__		}_		else if (seconds == 0) {_			preventCaching(response)__		}_		_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,apply,cache,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,seconds,0,cache,for,seconds,response,seconds,must,revalidate,else,if,seconds,0,prevent,caching,response
WebContentGenerator -> protected final void applyCacheSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1356735495;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param seconds the (positive) number of seconds into the future that_the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void applyCacheSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (seconds > 0) {_			cacheForSeconds(response, seconds, mustRevalidate)__		}_		else if (seconds == 0) {_			preventCaching(response)__		}_		_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,apply,cache,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,seconds,0,cache,for,seconds,response,seconds,must,revalidate,else,if,seconds,0,prevent,caching,response
WebContentGenerator -> protected final void applyCacheSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1362408075;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param seconds the (positive) number of seconds into the future that_the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void applyCacheSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (seconds > 0) {_			cacheForSeconds(response, seconds, mustRevalidate)__		}_		else if (seconds == 0) {_			preventCaching(response)__		}_		_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,apply,cache,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,seconds,0,cache,for,seconds,response,seconds,must,revalidate,else,if,seconds,0,prevent,caching,response
WebContentGenerator -> protected final void applyCacheSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1385423968;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param seconds the (positive) number of seconds into the future that_the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void applyCacheSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (seconds > 0) {_			cacheForSeconds(response, seconds, mustRevalidate)__		}_		else if (seconds == 0) {_			preventCaching(response)__		}_		_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,apply,cache,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,seconds,0,cache,for,seconds,response,seconds,must,revalidate,else,if,seconds,0,prevent,caching,response
WebContentGenerator -> protected final void applyCacheSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1386025020;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param seconds the (positive) number of seconds into the future that_the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void applyCacheSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (seconds > 0) {_			cacheForSeconds(response, seconds, mustRevalidate)__		}_		else if (seconds == 0) {_			preventCaching(response)__		}_		_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,apply,cache,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,seconds,0,cache,for,seconds,response,seconds,must,revalidate,else,if,seconds,0,prevent,caching,response
WebContentGenerator -> protected final void applyCacheSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1407511029;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param seconds the (positive) number of seconds into the future that_the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void applyCacheSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (seconds > 0) {_			cacheForSeconds(response, seconds, mustRevalidate)__		}_		else if (seconds == 0) {_			preventCaching(response)__		}_		_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,apply,cache,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,seconds,0,cache,for,seconds,response,seconds,must,revalidate,else,if,seconds,0,prevent,caching,response
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1437503583;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (this.useExpiresHeader || !this.useCacheControlHeader) {_			_			if (cacheSeconds > 0) {_				cacheForSeconds(response, cacheSeconds)__			}_			else if (cacheSeconds == 0) {_				preventCaching(response)__			}_		}_		else {_			CacheControl cControl__			if (cacheSeconds > 0) {_				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__				if (this.alwaysMustRevalidate) {_					cControl = cControl.mustRevalidate()__				}_			}_			else if (cacheSeconds == 0) {_				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__			}_			else {_				cControl = CacheControl.empty()__			}_			applyCacheControl(response, cControl)__		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1446044819;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (this.useExpiresHeader || !this.useCacheControlHeader) {_			_			if (cacheSeconds > 0) {_				cacheForSeconds(response, cacheSeconds)__			}_			else if (cacheSeconds == 0) {_				preventCaching(response)__			}_		}_		else {_			CacheControl cControl__			if (cacheSeconds > 0) {_				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__				if (this.alwaysMustRevalidate) {_					cControl = cControl.mustRevalidate()__				}_			}_			else if (cacheSeconds == 0) {_				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__			}_			else {_				cControl = CacheControl.empty()__			}_			applyCacheControl(response, cControl)__		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1453475043;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (!response.containsHeader(HEADER_CACHE_CONTROL)) {_			if (this.useExpiresHeader || !this.useCacheControlHeader) {_				_				if (cacheSeconds > 0) {_					cacheForSeconds(response, cacheSeconds)__				}_				else if (cacheSeconds == 0) {_					preventCaching(response)__				}_			}_			else {_				CacheControl cControl__				if (cacheSeconds > 0) {_					cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__					if (this.alwaysMustRevalidate) {_						cControl = cControl.mustRevalidate()__					}_				}_				else if (cacheSeconds == 0) {_					cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__				}_				else {_					cControl = CacheControl.empty()__				}_				applyCacheControl(response, cControl)__			}_		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,response,contains,header,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1453729744;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (!response.containsHeader(HEADER_CACHE_CONTROL)) {_			if (this.useExpiresHeader || !this.useCacheControlHeader) {_				_				if (cacheSeconds > 0) {_					cacheForSeconds(response, cacheSeconds)__				}_				else if (cacheSeconds == 0) {_					preventCaching(response)__				}_			}_			else {_				CacheControl cControl__				if (cacheSeconds > 0) {_					cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__					if (this.alwaysMustRevalidate) {_						cControl = cControl.mustRevalidate()__					}_				}_				else if (cacheSeconds == 0) {_					cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__				}_				else {_					cControl = CacheControl.empty()__				}_				applyCacheControl(response, cControl)__			}_		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,response,contains,header,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1453757715;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (!response.containsHeader(HEADER_CACHE_CONTROL)) {_			if (this.useExpiresHeader || !this.useCacheControlHeader) {_				_				if (cacheSeconds > 0) {_					cacheForSeconds(response, cacheSeconds)__				}_				else if (cacheSeconds == 0) {_					preventCaching(response)__				}_			}_			else {_				CacheControl cControl__				if (cacheSeconds > 0) {_					cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__					if (this.alwaysMustRevalidate) {_						cControl = cControl.mustRevalidate()__					}_				}_				else if (cacheSeconds == 0) {_					cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__				}_				else {_					cControl = CacheControl.empty()__				}_				applyCacheControl(response, cControl)__			}_		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,response,contains,header,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1456936964;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (this.useExpiresHeader || !this.useCacheControlHeader) {_			_			if (cacheSeconds > 0) {_				cacheForSeconds(response, cacheSeconds)__			}_			else if (cacheSeconds == 0) {_				preventCaching(response)__			}_		}_		else {_			CacheControl cControl__			if (cacheSeconds > 0) {_				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__				if (this.alwaysMustRevalidate) {_					cControl = cControl.mustRevalidate()__				}_			}_			else if (cacheSeconds == 0) {_				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__			}_			else {_				cControl = CacheControl.empty()__			}_			applyCacheControl(response, cControl)__		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1458697675;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (this.useExpiresHeader || !this.useCacheControlHeader) {_			_			if (cacheSeconds > 0) {_				cacheForSeconds(response, cacheSeconds)__			}_			else if (cacheSeconds == 0) {_				preventCaching(response)__			}_		}_		else {_			CacheControl cControl__			if (cacheSeconds > 0) {_				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__				if (this.alwaysMustRevalidate) {_					cControl = cControl.mustRevalidate()__				}_			}_			else if (cacheSeconds == 0) {_				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__			}_			else {_				cControl = CacheControl.empty()__			}_			applyCacheControl(response, cControl)__		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1458747313;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (this.useExpiresHeader || !this.useCacheControlHeader) {_			_			if (cacheSeconds > 0) {_				cacheForSeconds(response, cacheSeconds)__			}_			else if (cacheSeconds == 0) {_				preventCaching(response)__			}_		}_		else {_			CacheControl cControl__			if (cacheSeconds > 0) {_				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__				if (this.alwaysMustRevalidate) {_					cControl = cControl.mustRevalidate()__				}_			}_			else if (cacheSeconds == 0) {_				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__			}_			else {_				cControl = CacheControl.empty()__			}_			applyCacheControl(response, cControl)__		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1458830057;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (this.useExpiresHeader || !this.useCacheControlHeader) {_			_			if (cacheSeconds > 0) {_				cacheForSeconds(response, cacheSeconds)__			}_			else if (cacheSeconds == 0) {_				preventCaching(response)__			}_		}_		else {_			CacheControl cControl__			if (cacheSeconds > 0) {_				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__				if (this.alwaysMustRevalidate) {_					cControl = cControl.mustRevalidate()__				}_			}_			else if (cacheSeconds == 0) {_				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__			}_			else {_				cControl = CacheControl.empty()__			}_			applyCacheControl(response, cControl)__		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1465306936;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (this.useExpiresHeader || !this.useCacheControlHeader) {_			_			if (cacheSeconds > 0) {_				cacheForSeconds(response, cacheSeconds)__			}_			else if (cacheSeconds == 0) {_				preventCaching(response)__			}_		}_		else {_			CacheControl cControl__			if (cacheSeconds > 0) {_				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__				if (this.alwaysMustRevalidate) {_					cControl = cControl.mustRevalidate()__				}_			}_			else if (cacheSeconds == 0) {_				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__			}_			else {_				cControl = CacheControl.empty()__			}_			applyCacheControl(response, cControl)__		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1467667881;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (this.useExpiresHeader || !this.useCacheControlHeader) {_			_			if (cacheSeconds > 0) {_				cacheForSeconds(response, cacheSeconds)__			}_			else if (cacheSeconds == 0) {_				preventCaching(response)__			}_		}_		else {_			CacheControl cControl__			if (cacheSeconds > 0) {_				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__				if (this.alwaysMustRevalidate) {_					cControl = cControl.mustRevalidate()__				}_			}_			else if (cacheSeconds == 0) {_				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__			}_			else {_				cControl = CacheControl.empty()__			}_			applyCacheControl(response, cControl)__		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1467730834;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (this.useExpiresHeader || !this.useCacheControlHeader) {_			_			if (cacheSeconds > 0) {_				cacheForSeconds(response, cacheSeconds)__			}_			else if (cacheSeconds == 0) {_				preventCaching(response)__			}_		}_		else {_			CacheControl cControl__			if (cacheSeconds > 0) {_				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__				if (this.alwaysMustRevalidate) {_					cControl = cControl.mustRevalidate()__				}_			}_			else if (cacheSeconds == 0) {_				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__			}_			else {_				cControl = CacheControl.empty()__			}_			applyCacheControl(response, cControl)__		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1483750478;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (this.useExpiresHeader || !this.useCacheControlHeader) {_			_			if (cacheSeconds > 0) {_				cacheForSeconds(response, cacheSeconds)__			}_			else if (cacheSeconds == 0) {_				preventCaching(response)__			}_		}_		else {_			CacheControl cControl__			if (cacheSeconds > 0) {_				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__				if (this.alwaysMustRevalidate) {_					cControl = cControl.mustRevalidate()__				}_			}_			else if (cacheSeconds == 0) {_				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__			}_			else {_				cControl = CacheControl.empty()__			}_			applyCacheControl(response, cControl)__		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1490350007;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (this.useExpiresHeader || !this.useCacheControlHeader) {_			_			if (cacheSeconds > 0) {_				cacheForSeconds(response, cacheSeconds)__			}_			else if (cacheSeconds == 0) {_				preventCaching(response)__			}_		}_		else {_			CacheControl cControl__			if (cacheSeconds > 0) {_				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__				if (this.alwaysMustRevalidate) {_					cControl = cControl.mustRevalidate()__				}_			}_			else if (cacheSeconds == 0) {_				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__			}_			else {_				cControl = CacheControl.empty()__			}_			applyCacheControl(response, cControl)__		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1498780456;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (this.useExpiresHeader || !this.useCacheControlHeader) {_			_			if (cacheSeconds > 0) {_				cacheForSeconds(response, cacheSeconds)__			}_			else if (cacheSeconds == 0) {_				preventCaching(response)__			}_		}_		else {_			CacheControl cControl__			if (cacheSeconds > 0) {_				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__				if (this.alwaysMustRevalidate) {_					cControl = cControl.mustRevalidate()__				}_			}_			else if (cacheSeconds == 0) {_				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__			}_			else {_				cControl = CacheControl.empty()__			}_			applyCacheControl(response, cControl)__		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1500448076;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (this.useExpiresHeader || !this.useCacheControlHeader) {_			_			if (cacheSeconds > 0) {_				cacheForSeconds(response, cacheSeconds)__			}_			else if (cacheSeconds == 0) {_				preventCaching(response)__			}_		}_		else {_			CacheControl cControl__			if (cacheSeconds > 0) {_				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__				if (this.alwaysMustRevalidate) {_					cControl = cControl.mustRevalidate()__				}_			}_			else if (cacheSeconds == 0) {_				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__			}_			else {_				cControl = CacheControl.empty()__			}_			applyCacheControl(response, cControl)__		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1518987682;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (this.useExpiresHeader || !this.useCacheControlHeader) {_			_			if (cacheSeconds > 0) {_				cacheForSeconds(response, cacheSeconds)__			}_			else if (cacheSeconds == 0) {_				preventCaching(response)__			}_		}_		else {_			CacheControl cControl__			if (cacheSeconds > 0) {_				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__				if (this.alwaysMustRevalidate) {_					cControl = cControl.mustRevalidate()__				}_			}_			else if (cacheSeconds == 0) {_				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__			}_			else {_				cControl = CacheControl.empty()__			}_			applyCacheControl(response, cControl)__		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @SuppressWarnings("deprecation") 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);1530174524;Apply the given cache seconds and generate corresponding HTTP headers,_i.e. allow caching for the given number of seconds in case of a positive_value, prevent caching if given a 0 value, do nothing else._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching;@SuppressWarnings("deprecation")_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {_		if (this.useExpiresHeader || !this.useCacheControlHeader) {_			_			if (cacheSeconds > 0) {_				cacheForSeconds(response, cacheSeconds)__			}_			else if (cacheSeconds == 0) {_				preventCaching(response)__			}_		}_		else {_			CacheControl cControl__			if (cacheSeconds > 0) {_				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS)__				if (this.alwaysMustRevalidate) {_					cControl = cControl.mustRevalidate()__				}_			}_			else if (cacheSeconds == 0) {_				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache())__			}_			else {_				cControl = CacheControl.empty()__			}_			applyCacheControl(response, cControl)__		}_	};apply,the,given,cache,seconds,and,generate,corresponding,http,headers,i,e,allow,caching,for,the,given,number,of,seconds,in,case,of,a,positive,value,prevent,caching,if,given,a,0,value,do,nothing,else,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching;suppress,warnings,deprecation,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,if,this,use,expires,header,this,use,cache,control,header,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,else,if,cache,seconds,0,prevent,caching,response,else,cache,control,c,control,if,cache,seconds,0,c,control,cache,control,max,age,cache,seconds,time,unit,seconds,if,this,always,must,revalidate,c,control,c,control,must,revalidate,else,if,cache,seconds,0,c,control,this,use,cache,control,no,store,cache,control,no,store,cache,control,no,cache,else,c,control,cache,control,empty,apply,cache,control,response,c,control
WebContentGenerator -> @Deprecated 	public boolean isAlwaysMustRevalidate();1427130064;Return whether 'must-revalidate' is added to every Cache-Control header.;@Deprecated_	public boolean isAlwaysMustRevalidate() {_		return alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header;deprecated,public,boolean,is,always,must,revalidate,return,always,must,revalidate
WebContentGenerator -> @Deprecated 	public boolean isAlwaysMustRevalidate();1432326716;Return whether 'must-revalidate' is added to every Cache-Control header.;@Deprecated_	public boolean isAlwaysMustRevalidate() {_		return alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header;deprecated,public,boolean,is,always,must,revalidate,return,always,must,revalidate
WebContentGenerator -> @Deprecated 	public boolean isAlwaysMustRevalidate();1434026774;Return whether 'must-revalidate' is added to every Cache-Control header.;@Deprecated_	public boolean isAlwaysMustRevalidate() {_		return alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header;deprecated,public,boolean,is,always,must,revalidate,return,always,must,revalidate
WebContentGenerator -> @Deprecated 	public boolean isAlwaysMustRevalidate();1436310496;Return whether 'must-revalidate' is added to every Cache-Control header.;@Deprecated_	public boolean isAlwaysMustRevalidate() {_		return alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header;deprecated,public,boolean,is,always,must,revalidate,return,always,must,revalidate
WebContentGenerator -> @Deprecated 	public boolean isAlwaysMustRevalidate();1437425300;Return whether 'must-revalidate' is added to every Cache-Control header.;@Deprecated_	public boolean isAlwaysMustRevalidate() {_		return alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header;deprecated,public,boolean,is,always,must,revalidate,return,always,must,revalidate
WebContentGenerator -> @Deprecated 	public boolean isAlwaysMustRevalidate();1437466084;Return whether 'must-revalidate' is added to every Cache-Control header.;@Deprecated_	public boolean isAlwaysMustRevalidate() {_		return alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header;deprecated,public,boolean,is,always,must,revalidate,return,always,must,revalidate
WebContentGenerator -> @Deprecated 	public boolean isAlwaysMustRevalidate();1437472622;Return whether 'must-revalidate' is added to every Cache-Control header.__@deprecated in favor of {@link #getCacheControl}.;@Deprecated_	public boolean isAlwaysMustRevalidate() {_		return alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,in,favor,of,link,get,cache,control;deprecated,public,boolean,is,always,must,revalidate,return,always,must,revalidate
WebContentGenerator -> public final boolean isUseCacheControlNoStore();1328020251;Return whether the HTTP 1.1 cache-control header value "no-store" is used.;public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used;public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> public final boolean isUseCacheControlNoStore();1356735495;Return whether the HTTP 1.1 cache-control header value "no-store" is used.;public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used;public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> public final boolean isUseCacheControlNoStore();1362408075;Return whether the HTTP 1.1 cache-control header value "no-store" is used.;public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used;public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> public final boolean isUseCacheControlNoStore();1385423968;Return whether the HTTP 1.1 cache-control header value "no-store" is used.;public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used;public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> public final boolean isUseCacheControlNoStore();1386025020;Return whether the HTTP 1.1 cache-control header value "no-store" is used.;public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used;public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> public final boolean isUseCacheControlNoStore();1407511029;Return whether the HTTP 1.1 cache-control header value "no-store" is used.;public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used;public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> public boolean isAlwaysMustRevalidate();1362408075;Return whether 'must-revaliate' is added to every Cache-Control header.;public boolean isAlwaysMustRevalidate() {_		return alwaysMustRevalidate__	};return,whether,must,revaliate,is,added,to,every,cache,control,header;public,boolean,is,always,must,revalidate,return,always,must,revalidate
WebContentGenerator -> public boolean isAlwaysMustRevalidate();1385423968;Return whether 'must-revalidate' is added to every Cache-Control header.;public boolean isAlwaysMustRevalidate() {_		return alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header;public,boolean,is,always,must,revalidate,return,always,must,revalidate
WebContentGenerator -> public boolean isAlwaysMustRevalidate();1386025020;Return whether 'must-revalidate' is added to every Cache-Control header.;public boolean isAlwaysMustRevalidate() {_		return alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header;public,boolean,is,always,must,revalidate,return,always,must,revalidate
WebContentGenerator -> public boolean isAlwaysMustRevalidate();1407511029;Return whether 'must-revalidate' is added to every Cache-Control header.;public boolean isAlwaysMustRevalidate() {_		return alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header;public,boolean,is,always,must,revalidate,return,always,must,revalidate
WebContentGenerator -> public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1328020251;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true".;public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true;public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1356735495;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true".;public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true;public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1362408075;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true".;public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true;public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1385423968;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true".;public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true;public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1386025020;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true".;public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true;public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1407511029;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true".;public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true;public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> public void setAlwaysMustRevalidate(boolean mustRevalidate);1362408075;An option to add 'must-revalidate' to every Cache-Control header. This_may be useful with annotated controller methods, which can_programmatically do a lastModified calculation as described in_{@link WebRequest#checkNotModified(long)}. Default is "false",_effectively relying on whether the handler implements_{@link LastModified} or not.;public void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,web,request,check,not,modified,long,default,is,false,effectively,relying,on,whether,the,handler,implements,link,last,modified,or,not;public,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> public void setAlwaysMustRevalidate(boolean mustRevalidate);1385423968;An option to add 'must-revalidate' to every Cache-Control header. This_may be useful with annotated controller methods, which can_programmatically do a lastModified calculation as described in_{@link WebRequest#checkNotModified(long)}. Default is "false",_effectively relying on whether the handler implements_{@link LastModified} or not.;public void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,web,request,check,not,modified,long,default,is,false,effectively,relying,on,whether,the,handler,implements,link,last,modified,or,not;public,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> public void setAlwaysMustRevalidate(boolean mustRevalidate);1386025020;An option to add 'must-revalidate' to every Cache-Control header. This_may be useful with annotated controller methods, which can_programmatically do a lastModified calculation as described in_{@link WebRequest#checkNotModified(long)}. Default is "false",_effectively relying on whether the handler implements_{@link org.springframework.web.servlet.mvc.LastModified} or not.;public void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,web,request,check,not,modified,long,default,is,false,effectively,relying,on,whether,the,handler,implements,link,org,springframework,web,servlet,mvc,last,modified,or,not;public,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> public void setAlwaysMustRevalidate(boolean mustRevalidate);1407511029;An option to add 'must-revalidate' to every Cache-Control header. This_may be useful with annotated controller methods, which can_programmatically do a lastModified calculation as described in_{@link WebRequest#checkNotModified(long)}. Default is "false",_effectively relying on whether the handler implements_{@link org.springframework.web.servlet.mvc.LastModified} or not.;public void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,web,request,check,not,modified,long,default,is,false,effectively,relying,on,whether,the,handler,implements,link,org,springframework,web,servlet,mvc,last,modified,or,not;public,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Nullable 	public final String[] getSupportedMethods();1498780456;Return the HTTP methods that this content generator supports.;@Nullable_	public final String[] getSupportedMethods() {_		return (this.supportedMethods != null ? StringUtils.toStringArray(this.supportedMethods) : null)__	};return,the,http,methods,that,this,content,generator,supports;nullable,public,final,string,get,supported,methods,return,this,supported,methods,null,string,utils,to,string,array,this,supported,methods,null
WebContentGenerator -> @Nullable 	public final String[] getSupportedMethods();1500448076;Return the HTTP methods that this content generator supports.;@Nullable_	public final String[] getSupportedMethods() {_		return (this.supportedMethods != null ? StringUtils.toStringArray(this.supportedMethods) : null)__	};return,the,http,methods,that,this,content,generator,supports;nullable,public,final,string,get,supported,methods,return,this,supported,methods,null,string,utils,to,string,array,this,supported,methods,null
WebContentGenerator -> @Nullable 	public final String[] getSupportedMethods();1518987682;Return the HTTP methods that this content generator supports.;@Nullable_	public final String[] getSupportedMethods() {_		return (this.supportedMethods != null ? StringUtils.toStringArray(this.supportedMethods) : null)__	};return,the,http,methods,that,this,content,generator,supports;nullable,public,final,string,get,supported,methods,return,this,supported,methods,null,string,utils,to,string,array,this,supported,methods,null
WebContentGenerator -> @Nullable 	public final String[] getSupportedMethods();1530174524;Return the HTTP methods that this content generator supports.;@Nullable_	public final String[] getSupportedMethods() {_		return (this.supportedMethods != null ? StringUtils.toStringArray(this.supportedMethods) : null)__	};return,the,http,methods,that,this,content,generator,supports;nullable,public,final,string,get,supported,methods,return,this,supported,methods,null,string,utils,to,string,array,this,supported,methods,null
WebContentGenerator -> public final boolean isUseExpiresHeader();1328020251;Return whether the HTTP 1.0 expires header is used.;public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used;public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> public final boolean isUseExpiresHeader();1356735495;Return whether the HTTP 1.0 expires header is used.;public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used;public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> public final boolean isUseExpiresHeader();1362408075;Return whether the HTTP 1.0 expires header is used.;public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used;public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> public final boolean isUseExpiresHeader();1385423968;Return whether the HTTP 1.0 expires header is used.;public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used;public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> public final boolean isUseExpiresHeader();1386025020;Return whether the HTTP 1.0 expires header is used.;public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used;public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> public final boolean isUseExpiresHeader();1407511029;Return whether the HTTP 1.0 expires header is used.;public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used;public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1427130064;Set whether to use the HTTP 1.0 expires header. Default is "false"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1432326716;Set whether to use the HTTP 1.0 expires header. Default is "false"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1434026774;Set whether to use the HTTP 1.0 expires header. Default is "false"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1436310496;Set whether to use the HTTP 1.0 expires header. Default is "false"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1437425300;Set whether to use the HTTP 1.0 expires header. Default is "false"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1437466084;Set whether to use the HTTP 1.0 expires header. Default is "false"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1437472622;Set whether to use the HTTP 1.0 expires header. Default is "false"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1437503583;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1446044819;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1453475043;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1453729744;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1453757715;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1456936964;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1458697675;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1458747313;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1458830057;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1465306936;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1467667881;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1467730834;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1483750478;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1490350007;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1498780456;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1500448076;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1518987682;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> @Deprecated 	public final void setUseExpiresHeader(boolean useExpiresHeader);1530174524;Set whether to use the HTTP 1.0 expires header. Default is "false",_as of 4.2._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,false,as,of,4,2,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> public final String[] getVaryByRequestHeaders();1465306936;Return the configured request header names for the "Vary" response header._@since 4.3;public final String[] getVaryByRequestHeaders() {_		return this.varyByRequestHeaders__	};return,the,configured,request,header,names,for,the,vary,response,header,since,4,3;public,final,string,get,vary,by,request,headers,return,this,vary,by,request,headers
WebContentGenerator -> public final String[] getVaryByRequestHeaders();1467667881;Return the configured request header names for the "Vary" response header._@since 4.3;public final String[] getVaryByRequestHeaders() {_		return this.varyByRequestHeaders__	};return,the,configured,request,header,names,for,the,vary,response,header,since,4,3;public,final,string,get,vary,by,request,headers,return,this,vary,by,request,headers
WebContentGenerator -> public final String[] getVaryByRequestHeaders();1467730834;Return the configured request header names for the "Vary" response header._@since 4.3;public final String[] getVaryByRequestHeaders() {_		return this.varyByRequestHeaders__	};return,the,configured,request,header,names,for,the,vary,response,header,since,4,3;public,final,string,get,vary,by,request,headers,return,this,vary,by,request,headers
WebContentGenerator -> public final String[] getVaryByRequestHeaders();1483750478;Return the configured request header names for the "Vary" response header._@since 4.3;public final String[] getVaryByRequestHeaders() {_		return this.varyByRequestHeaders__	};return,the,configured,request,header,names,for,the,vary,response,header,since,4,3;public,final,string,get,vary,by,request,headers,return,this,vary,by,request,headers
WebContentGenerator -> public final String[] getVaryByRequestHeaders();1490350007;Return the configured request header names for the "Vary" response header._@since 4.3;public final String[] getVaryByRequestHeaders() {_		return this.varyByRequestHeaders__	};return,the,configured,request,header,names,for,the,vary,response,header,since,4,3;public,final,string,get,vary,by,request,headers,return,this,vary,by,request,headers
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1328020251;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods <code>true</code> if this_generator should support HTTP methods GET, HEAD and POST by default,_or <code>false</code> if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,code,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,code,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1356735495;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1362408075;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1385423968;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1386025020;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1407511029;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1427130064;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1432326716;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1434026774;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		dateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US)__		dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"))__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,date,format,new,simple,date,format,eee,dd,mmm,yyyy,hh,mm,ss,z,locale,us,date,format,set,time,zone,time,zone,get,time,zone,gmt
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1436310496;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		dateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US)__		dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"))__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,date,format,new,simple,date,format,eee,dd,mmm,yyyy,hh,mm,ss,z,locale,us,date,format,set,time,zone,time,zone,get,time,zone,gmt
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1437425300;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1437466084;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1437472622;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1437503583;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1446044819;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1453475043;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new HashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1453729744;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new LinkedHashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,linked,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1453757715;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new LinkedHashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		initAllowHeader()__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,linked,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,init,allow,header
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1456936964;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new LinkedHashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		initAllowHeader()__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,linked,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,init,allow,header
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1458697675;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new LinkedHashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		initAllowHeader()__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,linked,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,init,allow,header
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1458747313;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new LinkedHashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		initAllowHeader()__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,linked,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,init,allow,header
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1458830057;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new LinkedHashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		initAllowHeader()__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,linked,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,init,allow,header
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1465306936;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new LinkedHashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		initAllowHeader()__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,linked,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,init,allow,header
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1467667881;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new LinkedHashSet<String>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		initAllowHeader()__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,linked,hash,set,string,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,init,allow,header
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1467730834;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new LinkedHashSet<>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		initAllowHeader()__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,linked,hash,set,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,init,allow,header
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1483750478;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new LinkedHashSet<>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		initAllowHeader()__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,linked,hash,set,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,init,allow,header
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1490350007;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new LinkedHashSet<>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		initAllowHeader()__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,linked,hash,set,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,init,allow,header
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1498780456;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new LinkedHashSet<>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		initAllowHeader()__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,linked,hash,set,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,init,allow,header
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1500448076;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new LinkedHashSet<>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		initAllowHeader()__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,linked,hash,set,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,init,allow,header
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1518987682;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new LinkedHashSet<>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		initAllowHeader()__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,linked,hash,set,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,init,allow,header
WebContentGenerator -> public WebContentGenerator(boolean restrictDefaultSupportedMethods);1530174524;Create a new WebContentGenerator._@param restrictDefaultSupportedMethods {@code true} if this_generator should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted;public WebContentGenerator(boolean restrictDefaultSupportedMethods) {_		if (restrictDefaultSupportedMethods) {_			this.supportedMethods = new LinkedHashSet<>(4)__			this.supportedMethods.add(METHOD_GET)__			this.supportedMethods.add(METHOD_HEAD)__			this.supportedMethods.add(METHOD_POST)__		}_		initAllowHeader()__	};create,a,new,web,content,generator,param,restrict,default,supported,methods,code,true,if,this,generator,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted;public,web,content,generator,boolean,restrict,default,supported,methods,if,restrict,default,supported,methods,this,supported,methods,new,linked,hash,set,4,this,supported,methods,add,this,supported,methods,add,this,supported,methods,add,init,allow,header
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response) 			throws ServletException;1427130064;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the number of cache seconds specified for this generator._@param request current HTTP request_@param response current HTTP response_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response)_			throws ServletException {__		checkAndPrepare(request, response, this.cacheControl)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,number,of,cache,seconds,specified,for,this,generator,param,request,current,http,request,param,response,current,http,response,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,check,and,prepare,request,response,this,cache,control
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response) 			throws ServletException;1432326716;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the number of cache seconds specified for this generator._@param request current HTTP request_@param response current HTTP response_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response)_			throws ServletException {__		checkAndPrepare(request, response, this.cacheControl)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,number,of,cache,seconds,specified,for,this,generator,param,request,current,http,request,param,response,current,http,response,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,check,and,prepare,request,response,this,cache,control
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response) 			throws ServletException;1434026774;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the number of cache seconds specified for this generator._@param request current HTTP request_@param response current HTTP response_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response)_			throws ServletException {__		checkAndPrepare(request, response, this.cacheControl)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,number,of,cache,seconds,specified,for,this,generator,param,request,current,http,request,param,response,current,http,response,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,check,and,prepare,request,response,this,cache,control
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response) 			throws ServletException;1436310496;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the number of cache seconds specified for this generator._@param request current HTTP request_@param response current HTTP response_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response)_			throws ServletException {__		checkAndPrepare(request, response, this.cacheControl)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,number,of,cache,seconds,specified,for,this,generator,param,request,current,http,request,param,response,current,http,response,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,check,and,prepare,request,response,this,cache,control
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response) 			throws ServletException;1437425300;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the number of cache seconds specified for this generator._@param request current HTTP request_@param response current HTTP response_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response)_			throws ServletException {__		checkAndPrepare(request, response, this.cacheControl)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,number,of,cache,seconds,specified,for,this,generator,param,request,current,http,request,param,response,current,http,response,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,check,and,prepare,request,response,this,cache,control
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response) 			throws ServletException;1437466084;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the number of cache seconds specified for this generator._@param request current HTTP request_@param response current HTTP response_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response)_			throws ServletException {__		checkAndPrepare(request, response, this.cacheControl)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,number,of,cache,seconds,specified,for,this,generator,param,request,current,http,request,param,response,current,http,response,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,check,and,prepare,request,response,this,cache,control
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response) 			throws ServletException;1437472622;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the number of cache seconds specified for this generator._@param request current HTTP request_@param response current HTTP response_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response)_			throws ServletException {__		checkAndPrepare(request, response, this.cacheControl)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,number,of,cache,seconds,specified,for,this,generator,param,request,current,http,request,param,response,current,http,response,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,throws,servlet,exception,check,and,prepare,request,response,this,cache,control
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1427130064;Return whether the HTTP 1.1 cache-control header is used.;@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1432326716;Return whether the HTTP 1.1 cache-control header is used.;@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1434026774;Return whether the HTTP 1.1 cache-control header is used.;@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1436310496;Return whether the HTTP 1.1 cache-control header is used.;@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1437425300;Return whether the HTTP 1.1 cache-control header is used.;@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1437466084;Return whether the HTTP 1.1 cache-control header is used.;@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1437472622;Return whether the HTTP 1.1 cache-control header is used.__@deprecated in favor of {@link #getCacheControl}.;@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1437503583;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1446044819;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1453475043;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1453729744;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1453757715;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1456936964;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1458697675;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1458747313;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1458830057;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1465306936;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1467667881;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1467730834;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1483750478;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1490350007;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1498780456;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1500448076;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1518987682;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlHeader();1530174524;Return whether the HTTP 1.1 cache-control header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> public CacheControl getCacheControl();1427130064;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header.__@since 4.2;public CacheControl getCacheControl() {_		return cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,cache,control,get,cache,control,return,cache,control
WebContentGenerator -> public CacheControl getCacheControl();1432326716;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header.__@since 4.2;public CacheControl getCacheControl() {_		return cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,cache,control,get,cache,control,return,cache,control
WebContentGenerator -> public CacheControl getCacheControl();1434026774;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header.__@since 4.2;public CacheControl getCacheControl() {_		return cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,cache,control,get,cache,control,return,cache,control
WebContentGenerator -> public CacheControl getCacheControl();1436310496;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header.__@since 4.2;public CacheControl getCacheControl() {_		return cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,cache,control,get,cache,control,return,cache,control
WebContentGenerator -> public CacheControl getCacheControl();1437425300;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header.__@since 4.2;public CacheControl getCacheControl() {_		return cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,cache,control,get,cache,control,return,cache,control
WebContentGenerator -> public CacheControl getCacheControl();1437466084;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header.__@since 4.2;public CacheControl getCacheControl() {_		return cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,cache,control,get,cache,control,return,cache,control
WebContentGenerator -> public CacheControl getCacheControl();1437472622;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header.__@since 4.2;public CacheControl getCacheControl() {_		return cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,cache,control,get,cache,control,return,cache,control
WebContentGenerator -> @Nullable 	public final CacheControl getCacheControl();1498780456;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;@Nullable_	public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;nullable,public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> @Nullable 	public final CacheControl getCacheControl();1500448076;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;@Nullable_	public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;nullable,public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> @Nullable 	public final CacheControl getCacheControl();1518987682;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;@Nullable_	public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;nullable,public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> @Nullable 	public final CacheControl getCacheControl();1530174524;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;@Nullable_	public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;nullable,public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> public final void setVaryByRequestHeaders(@Nullable String... varyByRequestHeaders);1500448076;Configure one or more request header names (e.g. "Accept-Language") to_add to the "Vary" response header to inform clients that the response is_subject to content negotiation and variances based on the value of the_given request headers. The configured request header names are added only_if not already present in the response "Vary" header._@param varyByRequestHeaders one or more request header names_@since 4.3;public final void setVaryByRequestHeaders(@Nullable String... varyByRequestHeaders) {_		this.varyByRequestHeaders = varyByRequestHeaders__	};configure,one,or,more,request,header,names,e,g,accept,language,to,add,to,the,vary,response,header,to,inform,clients,that,the,response,is,subject,to,content,negotiation,and,variances,based,on,the,value,of,the,given,request,headers,the,configured,request,header,names,are,added,only,if,not,already,present,in,the,response,vary,header,param,vary,by,request,headers,one,or,more,request,header,names,since,4,3;public,final,void,set,vary,by,request,headers,nullable,string,vary,by,request,headers,this,vary,by,request,headers,vary,by,request,headers
WebContentGenerator -> public final void setVaryByRequestHeaders(@Nullable String... varyByRequestHeaders);1518987682;Configure one or more request header names (e.g. "Accept-Language") to_add to the "Vary" response header to inform clients that the response is_subject to content negotiation and variances based on the value of the_given request headers. The configured request header names are added only_if not already present in the response "Vary" header._@param varyByRequestHeaders one or more request header names_@since 4.3;public final void setVaryByRequestHeaders(@Nullable String... varyByRequestHeaders) {_		this.varyByRequestHeaders = varyByRequestHeaders__	};configure,one,or,more,request,header,names,e,g,accept,language,to,add,to,the,vary,response,header,to,inform,clients,that,the,response,is,subject,to,content,negotiation,and,variances,based,on,the,value,of,the,given,request,headers,the,configured,request,header,names,are,added,only,if,not,already,present,in,the,response,vary,header,param,vary,by,request,headers,one,or,more,request,header,names,since,4,3;public,final,void,set,vary,by,request,headers,nullable,string,vary,by,request,headers,this,vary,by,request,headers,vary,by,request,headers
WebContentGenerator -> public final void setVaryByRequestHeaders(@Nullable String... varyByRequestHeaders);1530174524;Configure one or more request header names (e.g. "Accept-Language") to_add to the "Vary" response header to inform clients that the response is_subject to content negotiation and variances based on the value of the_given request headers. The configured request header names are added only_if not already present in the response "Vary" header._@param varyByRequestHeaders one or more request header names_@since 4.3;public final void setVaryByRequestHeaders(@Nullable String... varyByRequestHeaders) {_		this.varyByRequestHeaders = varyByRequestHeaders__	};configure,one,or,more,request,header,names,e,g,accept,language,to,add,to,the,vary,response,header,to,inform,clients,that,the,response,is,subject,to,content,negotiation,and,variances,based,on,the,value,of,the,given,request,headers,the,configured,request,header,names,are,added,only,if,not,already,present,in,the,response,vary,header,param,vary,by,request,headers,one,or,more,request,header,names,since,4,3;public,final,void,set,vary,by,request,headers,nullable,string,vary,by,request,headers,this,vary,by,request,headers,vary,by,request,headers
WebContentGenerator -> @Nullable 	public final String[] getVaryByRequestHeaders();1498780456;Return the configured request header names for the "Vary" response header._@since 4.3;@Nullable_	public final String[] getVaryByRequestHeaders() {_		return this.varyByRequestHeaders__	};return,the,configured,request,header,names,for,the,vary,response,header,since,4,3;nullable,public,final,string,get,vary,by,request,headers,return,this,vary,by,request,headers
WebContentGenerator -> @Nullable 	public final String[] getVaryByRequestHeaders();1500448076;Return the configured request header names for the "Vary" response header._@since 4.3;@Nullable_	public final String[] getVaryByRequestHeaders() {_		return this.varyByRequestHeaders__	};return,the,configured,request,header,names,for,the,vary,response,header,since,4,3;nullable,public,final,string,get,vary,by,request,headers,return,this,vary,by,request,headers
WebContentGenerator -> @Nullable 	public final String[] getVaryByRequestHeaders();1518987682;Return the configured request header names for the "Vary" response header._@since 4.3;@Nullable_	public final String[] getVaryByRequestHeaders() {_		return this.varyByRequestHeaders__	};return,the,configured,request,header,names,for,the,vary,response,header,since,4,3;nullable,public,final,string,get,vary,by,request,headers,return,this,vary,by,request,headers
WebContentGenerator -> @Nullable 	public final String[] getVaryByRequestHeaders();1530174524;Return the configured request header names for the "Vary" response header._@since 4.3;@Nullable_	public final String[] getVaryByRequestHeaders() {_		return this.varyByRequestHeaders__	};return,the,configured,request,header,names,for,the,vary,response,header,since,4,3;nullable,public,final,string,get,vary,by,request,headers,return,this,vary,by,request,headers
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) 			throws ServletException;1328020251;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the number of cache seconds specified for this generator._@param request current HTTP request_@param response current HTTP response_@param lastModified if the mapped handler provides Last-Modified support_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified)_			throws ServletException {__		checkAndPrepare(request, response, this.cacheSeconds, lastModified)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,number,of,cache,seconds,specified,for,this,generator,param,request,current,http,request,param,response,current,http,response,param,last,modified,if,the,mapped,handler,provides,last,modified,support,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,and,prepare,request,response,this,cache,seconds,last,modified
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) 			throws ServletException;1356735495;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the number of cache seconds specified for this generator._@param request current HTTP request_@param response current HTTP response_@param lastModified if the mapped handler provides Last-Modified support_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified)_			throws ServletException {__		checkAndPrepare(request, response, this.cacheSeconds, lastModified)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,number,of,cache,seconds,specified,for,this,generator,param,request,current,http,request,param,response,current,http,response,param,last,modified,if,the,mapped,handler,provides,last,modified,support,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,and,prepare,request,response,this,cache,seconds,last,modified
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) 			throws ServletException;1362408075;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the number of cache seconds specified for this generator._@param request current HTTP request_@param response current HTTP response_@param lastModified if the mapped handler provides Last-Modified support_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified)_			throws ServletException {__		checkAndPrepare(request, response, this.cacheSeconds, lastModified)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,number,of,cache,seconds,specified,for,this,generator,param,request,current,http,request,param,response,current,http,response,param,last,modified,if,the,mapped,handler,provides,last,modified,support,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,and,prepare,request,response,this,cache,seconds,last,modified
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) 			throws ServletException;1385423968;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the number of cache seconds specified for this generator._@param request current HTTP request_@param response current HTTP response_@param lastModified if the mapped handler provides Last-Modified support_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified)_			throws ServletException {__		checkAndPrepare(request, response, this.cacheSeconds, lastModified)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,number,of,cache,seconds,specified,for,this,generator,param,request,current,http,request,param,response,current,http,response,param,last,modified,if,the,mapped,handler,provides,last,modified,support,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,and,prepare,request,response,this,cache,seconds,last,modified
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) 			throws ServletException;1386025020;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the number of cache seconds specified for this generator._@param request current HTTP request_@param response current HTTP response_@param lastModified if the mapped handler provides Last-Modified support_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified)_			throws ServletException {__		checkAndPrepare(request, response, this.cacheSeconds, lastModified)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,number,of,cache,seconds,specified,for,this,generator,param,request,current,http,request,param,response,current,http,response,param,last,modified,if,the,mapped,handler,provides,last,modified,support,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,and,prepare,request,response,this,cache,seconds,last,modified
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) 			throws ServletException;1407511029;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the number of cache seconds specified for this generator._@param request current HTTP request_@param response current HTTP response_@param lastModified if the mapped handler provides Last-Modified support_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified)_			throws ServletException {__		checkAndPrepare(request, response, this.cacheSeconds, lastModified)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,number,of,cache,seconds,specified,for,this,generator,param,request,current,http,request,param,response,current,http,response,param,last,modified,if,the,mapped,handler,provides,last,modified,support,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,and,prepare,request,response,this,cache,seconds,last,modified
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1328020251;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the given number of cache seconds._@param request current HTTP request_@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching_@param lastModified if the mapped handler provides Last-Modified support_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession) {_			if (request.getSession(false) == null) {_				throw new HttpSessionRequiredException("Pre-existing session required but none found")__			}_		}__		_		_		applyCacheSeconds(response, cacheSeconds, lastModified)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,given,number,of,cache,seconds,param,request,current,http,request,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,param,last,modified,if,the,mapped,handler,provides,last,modified,support,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,if,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found,apply,cache,seconds,response,cache,seconds,last,modified
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1356735495;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the given number of cache seconds._@param request current HTTP request_@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching_@param lastModified if the mapped handler provides Last-Modified support_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession) {_			if (request.getSession(false) == null) {_				throw new HttpSessionRequiredException("Pre-existing session required but none found")__			}_		}__		_		_		applyCacheSeconds(response, cacheSeconds, lastModified)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,given,number,of,cache,seconds,param,request,current,http,request,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,param,last,modified,if,the,mapped,handler,provides,last,modified,support,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,if,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found,apply,cache,seconds,response,cache,seconds,last,modified
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1362408075;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the given number of cache seconds._@param request current HTTP request_@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching_@param lastModified if the mapped handler provides Last-Modified support_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession) {_			if (request.getSession(false) == null) {_				throw new HttpSessionRequiredException("Pre-existing session required but none found")__			}_		}__		_		_		applyCacheSeconds(response, cacheSeconds, lastModified)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,given,number,of,cache,seconds,param,request,current,http,request,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,param,last,modified,if,the,mapped,handler,provides,last,modified,support,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,if,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found,apply,cache,seconds,response,cache,seconds,last,modified
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1385423968;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the given number of cache seconds._@param request current HTTP request_@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching_@param lastModified if the mapped handler provides Last-Modified support_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession) {_			if (request.getSession(false) == null) {_				throw new HttpSessionRequiredException("Pre-existing session required but none found")__			}_		}__		_		_		applyCacheSeconds(response, cacheSeconds, lastModified)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,given,number,of,cache,seconds,param,request,current,http,request,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,param,last,modified,if,the,mapped,handler,provides,last,modified,support,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,if,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found,apply,cache,seconds,response,cache,seconds,last,modified
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1386025020;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the given number of cache seconds._@param request current HTTP request_@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching_@param lastModified if the mapped handler provides Last-Modified support_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession) {_			if (request.getSession(false) == null) {_				throw new HttpSessionRequiredException("Pre-existing session required but none found")__			}_		}__		_		_		applyCacheSeconds(response, cacheSeconds, lastModified)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,given,number,of,cache,seconds,param,request,current,http,request,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,param,last,modified,if,the,mapped,handler,provides,last,modified,support,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,if,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found,apply,cache,seconds,response,cache,seconds,last,modified
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1407511029;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session,_and applies the given number of cache seconds._@param request current HTTP request_@param response current HTTP response_@param cacheSeconds positive number of seconds into the future that the_response should be cacheable for, 0 to prevent caching_@param lastModified if the mapped handler provides Last-Modified support_@throws ServletException if the request cannot be handled because a check failed;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession) {_			if (request.getSession(false) == null) {_				throw new HttpSessionRequiredException("Pre-existing session required but none found")__			}_		}__		_		_		applyCacheSeconds(response, cacheSeconds, lastModified)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,and,applies,the,given,number,of,cache,seconds,param,request,current,http,request,param,response,current,http,response,param,cache,seconds,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,param,last,modified,if,the,mapped,handler,provides,last,modified,support,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,if,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found,apply,cache,seconds,response,cache,seconds,last,modified
WebContentGenerator -> public final void setSupportedMethods(String... methods);1407511029;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String... methods);1427130064;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String... methods);1432326716;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String... methods);1434026774;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String... methods);1436310496;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String... methods);1437425300;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String... methods);1437466084;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String... methods);1437472622;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String... methods);1437503583;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String... methods);1446044819;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String... methods);1453475043;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String... methods);1453729744;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (methods != null) {_			this.supportedMethods = new LinkedHashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,linked,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String... methods);1453757715;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (!ObjectUtils.isEmpty(methods)) {_			this.supportedMethods = new LinkedHashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_		initAllowHeader()__	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,object,utils,is,empty,methods,this,supported,methods,new,linked,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null,init,allow,header
WebContentGenerator -> public final void setSupportedMethods(String... methods);1456936964;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (!ObjectUtils.isEmpty(methods)) {_			this.supportedMethods = new LinkedHashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_		initAllowHeader()__	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,object,utils,is,empty,methods,this,supported,methods,new,linked,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null,init,allow,header
WebContentGenerator -> public final void setSupportedMethods(String... methods);1458697675;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (!ObjectUtils.isEmpty(methods)) {_			this.supportedMethods = new LinkedHashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_		initAllowHeader()__	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,object,utils,is,empty,methods,this,supported,methods,new,linked,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null,init,allow,header
WebContentGenerator -> public final void setSupportedMethods(String... methods);1458747313;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (!ObjectUtils.isEmpty(methods)) {_			this.supportedMethods = new LinkedHashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_		initAllowHeader()__	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,object,utils,is,empty,methods,this,supported,methods,new,linked,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null,init,allow,header
WebContentGenerator -> public final void setSupportedMethods(String... methods);1458830057;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (!ObjectUtils.isEmpty(methods)) {_			this.supportedMethods = new LinkedHashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_		initAllowHeader()__	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,object,utils,is,empty,methods,this,supported,methods,new,linked,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null,init,allow,header
WebContentGenerator -> public final void setSupportedMethods(String... methods);1465306936;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (!ObjectUtils.isEmpty(methods)) {_			this.supportedMethods = new LinkedHashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_		initAllowHeader()__	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,object,utils,is,empty,methods,this,supported,methods,new,linked,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null,init,allow,header
WebContentGenerator -> public final void setSupportedMethods(String... methods);1467667881;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (!ObjectUtils.isEmpty(methods)) {_			this.supportedMethods = new LinkedHashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_		initAllowHeader()__	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,object,utils,is,empty,methods,this,supported,methods,new,linked,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null,init,allow,header
WebContentGenerator -> public final void setSupportedMethods(String... methods);1467730834;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (!ObjectUtils.isEmpty(methods)) {_			this.supportedMethods = new LinkedHashSet<>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_		initAllowHeader()__	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,object,utils,is,empty,methods,this,supported,methods,new,linked,hash,set,arrays,as,list,methods,else,this,supported,methods,null,init,allow,header
WebContentGenerator -> public final void setSupportedMethods(String... methods);1483750478;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (!ObjectUtils.isEmpty(methods)) {_			this.supportedMethods = new LinkedHashSet<>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_		initAllowHeader()__	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,object,utils,is,empty,methods,this,supported,methods,new,linked,hash,set,arrays,as,list,methods,else,this,supported,methods,null,init,allow,header
WebContentGenerator -> public final void setSupportedMethods(String... methods);1490350007;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (!ObjectUtils.isEmpty(methods)) {_			this.supportedMethods = new LinkedHashSet<>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_		initAllowHeader()__	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,object,utils,is,empty,methods,this,supported,methods,new,linked,hash,set,arrays,as,list,methods,else,this,supported,methods,null,init,allow,header
WebContentGenerator -> public final void setSupportedMethods(String... methods);1498780456;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String... methods) {_		if (!ObjectUtils.isEmpty(methods)) {_			this.supportedMethods = new LinkedHashSet<>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_		initAllowHeader()__	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,object,utils,is,empty,methods,this,supported,methods,new,linked,hash,set,arrays,as,list,methods,else,this,supported,methods,null,init,allow,header
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1328020251;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1356735495;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1362408075;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1385423968;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1386025020;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1407511029;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1427130064;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1432326716;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1434026774;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1436310496;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1437425300;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1437466084;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1437472622;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1437503583;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1446044819;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1453475043;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1453729744;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1453757715;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1456936964;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1458697675;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1458747313;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1458830057;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1465306936;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1467667881;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1467730834;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1483750478;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1490350007;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1498780456;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1500448076;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1518987682;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public final void setRequireSession(boolean requireSession);1530174524;Set whether a session should be required to handle requests.;public final void setRequireSession(boolean requireSession) {_		this.requireSession = requireSession__	};set,whether,a,session,should,be,required,to,handle,requests;public,final,void,set,require,session,boolean,require,session,this,require,session,require,session
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1328020251;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1356735495;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1362408075;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1385423968;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1386025020;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1407511029;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1427130064;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1432326716;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1434026774;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__		dateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US)__		dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods,date,format,new,simple,date,format,eee,dd,mmm,yyyy,hh,mm,ss,z,locale,us,date,format,set,time,zone,time,zone,get,time,zone,gmt
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1436310496;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__		dateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US)__		dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods,date,format,new,simple,date,format,eee,dd,mmm,yyyy,hh,mm,ss,z,locale,us,date,format,set,time,zone,time,zone,get,time,zone,gmt
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1437425300;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1437466084;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1437472622;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1437503583;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1446044819;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1453475043;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new HashSet<String>(Arrays.asList(supportedMethods))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,hash,set,string,arrays,as,list,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1453729744;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		this.supportedMethods = new LinkedHashSet<String>(Arrays.asList(supportedMethods))__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,this,supported,methods,new,linked,hash,set,string,arrays,as,list,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1453757715;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		setSupportedMethods(supportedMethods)__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,set,supported,methods,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1456936964;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		setSupportedMethods(supportedMethods)__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,set,supported,methods,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1458697675;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		setSupportedMethods(supportedMethods)__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,set,supported,methods,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1458747313;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		setSupportedMethods(supportedMethods)__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,set,supported,methods,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1458830057;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		setSupportedMethods(supportedMethods)__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,set,supported,methods,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1465306936;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		setSupportedMethods(supportedMethods)__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,set,supported,methods,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1467667881;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		setSupportedMethods(supportedMethods)__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,set,supported,methods,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1467730834;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		setSupportedMethods(supportedMethods)__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,set,supported,methods,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1483750478;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		setSupportedMethods(supportedMethods)__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,set,supported,methods,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1490350007;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		setSupportedMethods(supportedMethods)__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,set,supported,methods,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1498780456;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		setSupportedMethods(supportedMethods)__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,set,supported,methods,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1500448076;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		setSupportedMethods(supportedMethods)__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,set,supported,methods,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1518987682;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		setSupportedMethods(supportedMethods)__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,set,supported,methods,supported,methods
WebContentGenerator -> public WebContentGenerator(String... supportedMethods);1530174524;Create a new WebContentGenerator._@param supportedMethods the supported HTTP methods for this content generator;public WebContentGenerator(String... supportedMethods) {_		setSupportedMethods(supportedMethods)__	};create,a,new,web,content,generator,param,supported,methods,the,supported,http,methods,for,this,content,generator;public,web,content,generator,string,supported,methods,set,supported,methods,supported,methods
WebContentGenerator -> public final boolean isRequireSession();1328020251;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1356735495;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1362408075;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1385423968;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1386025020;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1407511029;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1427130064;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1432326716;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1434026774;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1436310496;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1437425300;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1437466084;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1437472622;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1437503583;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1446044819;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1453475043;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1453729744;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1453757715;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1456936964;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1458697675;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1458747313;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1458830057;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1465306936;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1467667881;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1467730834;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1483750478;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1490350007;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1498780456;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1500448076;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1518987682;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public final boolean isRequireSession();1530174524;Return whether a session is required to handle requests.;public final boolean isRequireSession() {_		return this.requireSession__	};return,whether,a,session,is,required,to,handle,requests;public,final,boolean,is,require,session,return,this,require,session
WebContentGenerator -> public void setVaryByRequestHeaders(String... varyByRequestHeaders);1458697675;Configure one or more request header names (e.g. "Accept-Language") to_add to the "Vary" response header to inform clients that the response is_subject to content negotiation and variances based on the value of the_given request headers. The configured request header names are added only_if not already present in the response "Vary" header.__<p><strong>Note:</strong> this property is only supported on Servlet 3.0+_which allows checking existing response header values._@param varyByRequestHeaders one or more request header names_@since 4.3;public void setVaryByRequestHeaders(String... varyByRequestHeaders) {_		this.varyByRequestHeaders = varyByRequestHeaders__	};configure,one,or,more,request,header,names,e,g,accept,language,to,add,to,the,vary,response,header,to,inform,clients,that,the,response,is,subject,to,content,negotiation,and,variances,based,on,the,value,of,the,given,request,headers,the,configured,request,header,names,are,added,only,if,not,already,present,in,the,response,vary,header,p,strong,note,strong,this,property,is,only,supported,on,servlet,3,0,which,allows,checking,existing,response,header,values,param,vary,by,request,headers,one,or,more,request,header,names,since,4,3;public,void,set,vary,by,request,headers,string,vary,by,request,headers,this,vary,by,request,headers,vary,by,request,headers
WebContentGenerator -> public void setVaryByRequestHeaders(String... varyByRequestHeaders);1458747313;Configure one or more request header names (e.g. "Accept-Language") to_add to the "Vary" response header to inform clients that the response is_subject to content negotiation and variances based on the value of the_given request headers. The configured request header names are added only_if not already present in the response "Vary" header.__<p><strong>Note:</strong> this property is only supported on Servlet 3.0+_which allows checking existing response header values._@param varyByRequestHeaders one or more request header names_@since 4.3;public void setVaryByRequestHeaders(String... varyByRequestHeaders) {_		this.varyByRequestHeaders = varyByRequestHeaders__	};configure,one,or,more,request,header,names,e,g,accept,language,to,add,to,the,vary,response,header,to,inform,clients,that,the,response,is,subject,to,content,negotiation,and,variances,based,on,the,value,of,the,given,request,headers,the,configured,request,header,names,are,added,only,if,not,already,present,in,the,response,vary,header,p,strong,note,strong,this,property,is,only,supported,on,servlet,3,0,which,allows,checking,existing,response,header,values,param,vary,by,request,headers,one,or,more,request,header,names,since,4,3;public,void,set,vary,by,request,headers,string,vary,by,request,headers,this,vary,by,request,headers,vary,by,request,headers
WebContentGenerator -> public void setVaryByRequestHeaders(String... varyByRequestHeaders);1458830057;Configure one or more request header names (e.g. "Accept-Language") to_add to the "Vary" response header to inform clients that the response is_subject to content negotiation and variances based on the value of the_given request headers. The configured request header names are added only_if not already present in the response "Vary" header._<p><strong>Note:</strong> This property is only supported on Servlet 3.0+_which allows checking existing response header values._@param varyByRequestHeaders one or more request header names_@since 4.3;public void setVaryByRequestHeaders(String... varyByRequestHeaders) {_		this.varyByRequestHeaders = varyByRequestHeaders__	};configure,one,or,more,request,header,names,e,g,accept,language,to,add,to,the,vary,response,header,to,inform,clients,that,the,response,is,subject,to,content,negotiation,and,variances,based,on,the,value,of,the,given,request,headers,the,configured,request,header,names,are,added,only,if,not,already,present,in,the,response,vary,header,p,strong,note,strong,this,property,is,only,supported,on,servlet,3,0,which,allows,checking,existing,response,header,values,param,vary,by,request,headers,one,or,more,request,header,names,since,4,3;public,void,set,vary,by,request,headers,string,vary,by,request,headers,this,vary,by,request,headers,vary,by,request,headers
WebContentGenerator -> public final void setSupportedMethods(@Nullable String... methods);1500448076;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(@Nullable String... methods) {_		if (!ObjectUtils.isEmpty(methods)) {_			this.supportedMethods = new LinkedHashSet<>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_		initAllowHeader()__	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,nullable,string,methods,if,object,utils,is,empty,methods,this,supported,methods,new,linked,hash,set,arrays,as,list,methods,else,this,supported,methods,null,init,allow,header
WebContentGenerator -> public final void setSupportedMethods(@Nullable String... methods);1518987682;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(@Nullable String... methods) {_		if (!ObjectUtils.isEmpty(methods)) {_			this.supportedMethods = new LinkedHashSet<>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_		initAllowHeader()__	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,nullable,string,methods,if,object,utils,is,empty,methods,this,supported,methods,new,linked,hash,set,arrays,as,list,methods,else,this,supported,methods,null,init,allow,header
WebContentGenerator -> public final void setSupportedMethods(@Nullable String... methods);1530174524;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(@Nullable String... methods) {_		if (!ObjectUtils.isEmpty(methods)) {_			this.supportedMethods = new LinkedHashSet<>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_		initAllowHeader()__	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,nullable,string,methods,if,object,utils,is,empty,methods,this,supported,methods,new,linked,hash,set,arrays,as,list,methods,else,this,supported,methods,null,init,allow,header
WebContentGenerator -> public final void setSupportedMethods(String[] methods);1328020251;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String[] methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String[] methods);1356735495;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String[] methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String[] methods);1362408075;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String[] methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String[] methods);1385423968;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String[] methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> public final void setSupportedMethods(String[] methods);1386025020;Set the HTTP methods that this content generator should support._<p>Default is GET, HEAD and POST for simple form controller types__unrestricted for general controllers and interceptors.;public final void setSupportedMethods(String[] methods) {_		if (methods != null) {_			this.supportedMethods = new HashSet<String>(Arrays.asList(methods))__		}_		else {_			this.supportedMethods = null__		}_	};set,the,http,methods,that,this,content,generator,should,support,p,default,is,get,head,and,post,for,simple,form,controller,types,unrestricted,for,general,controllers,and,interceptors;public,final,void,set,supported,methods,string,methods,if,methods,null,this,supported,methods,new,hash,set,string,arrays,as,list,methods,else,this,supported,methods,null
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1427130064;Return whether the HTTP 1.0 expires header is used.;@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1432326716;Return whether the HTTP 1.0 expires header is used.;@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1434026774;Return whether the HTTP 1.0 expires header is used.;@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1436310496;Return whether the HTTP 1.0 expires header is used.;@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1437425300;Return whether the HTTP 1.0 expires header is used.;@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1437466084;Return whether the HTTP 1.0 expires header is used.;@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1437472622;Return whether the HTTP 1.0 expires header is used.__@deprecated in favor of {@link #getCacheControl}.;@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1437503583;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1446044819;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1453475043;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1453729744;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1453757715;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1456936964;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1458697675;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1458747313;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1458830057;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1465306936;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1467667881;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1467730834;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1483750478;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1490350007;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1498780456;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1500448076;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1518987682;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> @Deprecated 	public final boolean isUseExpiresHeader();1530174524;Return whether the HTTP 1.0 expires header is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseExpiresHeader() {_		return this.useExpiresHeader__	};return,whether,the,http,1,0,expires,header,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,expires,header,return,this,use,expires,header
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds);1328020251;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@see #cacheForSeconds(javax.servlet.http.HttpServletResponse, int, boolean);protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,see,cache,for,seconds,javax,servlet,http,http,servlet,response,int,boolean;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds);1356735495;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@see #cacheForSeconds(javax.servlet.http.HttpServletResponse, int, boolean);protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,see,cache,for,seconds,javax,servlet,http,http,servlet,response,int,boolean;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds);1362408075;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@see #cacheForSeconds(javax.servlet.http.HttpServletResponse, int, boolean);protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,see,cache,for,seconds,javax,servlet,http,http,servlet,response,int,boolean;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds);1385423968;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@see #cacheForSeconds(javax.servlet.http.HttpServletResponse, int, boolean);protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,see,cache,for,seconds,javax,servlet,http,http,servlet,response,int,boolean;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds);1386025020;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@see #cacheForSeconds(javax.servlet.http.HttpServletResponse, int, boolean);protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,see,cache,for,seconds,javax,servlet,http,http,servlet,response,int,boolean;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds);1407511029;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@see #cacheForSeconds(javax.servlet.http.HttpServletResponse, int, boolean);protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,see,cache,for,seconds,javax,servlet,http,http,servlet,response,int,boolean;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1437503583;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		String ccValue = cacheControl.getHeaderValue()__		if (ccValue != null) {_			_			response.setHeader(HEADER_CACHE_CONTROL, ccValue)___			if (response.containsHeader(HEADER_PRAGMA)) {_				_				response.setHeader(HEADER_PRAGMA, "")__			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1446044819;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		String ccValue = cacheControl.getHeaderValue()__		if (ccValue != null) {_			_			response.setHeader(HEADER_CACHE_CONTROL, ccValue)___			if (response.containsHeader(HEADER_PRAGMA)) {_				_				response.setHeader(HEADER_PRAGMA, "")__			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1453475043;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		if (!response.containsHeader(HEADER_CACHE_CONTROL)) {_			String ccValue = cacheControl.getHeaderValue()__			if (ccValue != null) {_				_				response.setHeader(HEADER_CACHE_CONTROL, ccValue)___				if (response.containsHeader(HEADER_PRAGMA)) {_					_					response.setHeader(HEADER_PRAGMA, "")__				}_			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,if,response,contains,header,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1453729744;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		if (!response.containsHeader(HEADER_CACHE_CONTROL)) {_			String ccValue = cacheControl.getHeaderValue()__			if (ccValue != null) {_				_				response.setHeader(HEADER_CACHE_CONTROL, ccValue)___				if (response.containsHeader(HEADER_PRAGMA)) {_					_					response.setHeader(HEADER_PRAGMA, "")__				}_			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,if,response,contains,header,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1453757715;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		if (!response.containsHeader(HEADER_CACHE_CONTROL)) {_			String ccValue = cacheControl.getHeaderValue()__			if (ccValue != null) {_				_				response.setHeader(HEADER_CACHE_CONTROL, ccValue)___				if (response.containsHeader(HEADER_PRAGMA)) {_					_					response.setHeader(HEADER_PRAGMA, "")__				}_			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,if,response,contains,header,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1456936964;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		String ccValue = cacheControl.getHeaderValue()__		if (ccValue != null) {_			_			response.setHeader(HEADER_CACHE_CONTROL, ccValue)___			if (response.containsHeader(HEADER_PRAGMA)) {_				_				response.setHeader(HEADER_PRAGMA, "")__			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1458697675;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		String ccValue = cacheControl.getHeaderValue()__		if (ccValue != null) {_			_			response.setHeader(HEADER_CACHE_CONTROL, ccValue)___			if (response.containsHeader(HEADER_PRAGMA)) {_				_				response.setHeader(HEADER_PRAGMA, "")__			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1458747313;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		String ccValue = cacheControl.getHeaderValue()__		if (ccValue != null) {_			_			response.setHeader(HEADER_CACHE_CONTROL, ccValue)___			if (response.containsHeader(HEADER_PRAGMA)) {_				_				response.setHeader(HEADER_PRAGMA, "")__			}_			if (response.containsHeader(HEADER_EXPIRES)) {_				_				response.setHeader(HEADER_EXPIRES, "")__			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1458830057;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		String ccValue = cacheControl.getHeaderValue()__		if (ccValue != null) {_			_			response.setHeader(HEADER_CACHE_CONTROL, ccValue)___			if (response.containsHeader(HEADER_PRAGMA)) {_				_				response.setHeader(HEADER_PRAGMA, "")__			}_			if (response.containsHeader(HEADER_EXPIRES)) {_				_				response.setHeader(HEADER_EXPIRES, "")__			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1465306936;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		String ccValue = cacheControl.getHeaderValue()__		if (ccValue != null) {_			_			response.setHeader(HEADER_CACHE_CONTROL, ccValue)___			if (response.containsHeader(HEADER_PRAGMA)) {_				_				response.setHeader(HEADER_PRAGMA, "")__			}_			if (response.containsHeader(HEADER_EXPIRES)) {_				_				response.setHeader(HEADER_EXPIRES, "")__			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1467667881;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		String ccValue = cacheControl.getHeaderValue()__		if (ccValue != null) {_			_			response.setHeader(HEADER_CACHE_CONTROL, ccValue)___			if (response.containsHeader(HEADER_PRAGMA)) {_				_				response.setHeader(HEADER_PRAGMA, "")__			}_			if (response.containsHeader(HEADER_EXPIRES)) {_				_				response.setHeader(HEADER_EXPIRES, "")__			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1467730834;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		String ccValue = cacheControl.getHeaderValue()__		if (ccValue != null) {_			_			response.setHeader(HEADER_CACHE_CONTROL, ccValue)___			if (response.containsHeader(HEADER_PRAGMA)) {_				_				response.setHeader(HEADER_PRAGMA, "")__			}_			if (response.containsHeader(HEADER_EXPIRES)) {_				_				response.setHeader(HEADER_EXPIRES, "")__			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1483750478;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		String ccValue = cacheControl.getHeaderValue()__		if (ccValue != null) {_			_			response.setHeader(HEADER_CACHE_CONTROL, ccValue)___			if (response.containsHeader(HEADER_PRAGMA)) {_				_				response.setHeader(HEADER_PRAGMA, "")__			}_			if (response.containsHeader(HEADER_EXPIRES)) {_				_				response.setHeader(HEADER_EXPIRES, "")__			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1490350007;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		String ccValue = cacheControl.getHeaderValue()__		if (ccValue != null) {_			_			response.setHeader(HEADER_CACHE_CONTROL, ccValue)___			if (response.containsHeader(HEADER_PRAGMA)) {_				_				response.setHeader(HEADER_PRAGMA, "")__			}_			if (response.containsHeader(HEADER_EXPIRES)) {_				_				response.setHeader(HEADER_EXPIRES, "")__			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1498780456;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		String ccValue = cacheControl.getHeaderValue()__		if (ccValue != null) {_			_			response.setHeader(HEADER_CACHE_CONTROL, ccValue)___			if (response.containsHeader(HEADER_PRAGMA)) {_				_				response.setHeader(HEADER_PRAGMA, "")__			}_			if (response.containsHeader(HEADER_EXPIRES)) {_				_				response.setHeader(HEADER_EXPIRES, "")__			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1500448076;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		String ccValue = cacheControl.getHeaderValue()__		if (ccValue != null) {_			_			response.setHeader(HEADER_CACHE_CONTROL, ccValue)___			if (response.containsHeader(HEADER_PRAGMA)) {_				_				response.setHeader(HEADER_PRAGMA, "")__			}_			if (response.containsHeader(HEADER_EXPIRES)) {_				_				response.setHeader(HEADER_EXPIRES, "")__			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1518987682;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		String ccValue = cacheControl.getHeaderValue()__		if (ccValue != null) {_			_			response.setHeader(HEADER_CACHE_CONTROL, ccValue)___			if (response.containsHeader(HEADER_PRAGMA)) {_				_				response.setHeader(HEADER_PRAGMA, "")__			}_			if (response.containsHeader(HEADER_EXPIRES)) {_				_				response.setHeader(HEADER_EXPIRES, "")__			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl);1530174524;Set the HTTP Cache-Control header according to the given settings._@param response current HTTP response_@param cacheControl the pre-configured cache control settings_@since 4.2;protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {_		String ccValue = cacheControl.getHeaderValue()__		if (ccValue != null) {_			_			response.setHeader(HEADER_CACHE_CONTROL, ccValue)___			if (response.containsHeader(HEADER_PRAGMA)) {_				_				response.setHeader(HEADER_PRAGMA, "")__			}_			if (response.containsHeader(HEADER_EXPIRES)) {_				_				response.setHeader(HEADER_EXPIRES, "")__			}_		}_	};set,the,http,cache,control,header,according,to,the,given,settings,param,response,current,http,response,param,cache,control,the,pre,configured,cache,control,settings,since,4,2;protected,final,void,apply,cache,control,http,servlet,response,response,cache,control,cache,control,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1437503583;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1446044819;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1453475043;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1453729744;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1453757715;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1456936964;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1458697675;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1458747313;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1458830057;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1465306936;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1467667881;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1467730834;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1483750478;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1490350007;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1498780456;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1500448076;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1518987682;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> @Deprecated 	public final boolean isAlwaysMustRevalidate();1530174524;Return whether 'must-revalidate' is added to every Cache-Control header._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isAlwaysMustRevalidate() {_		return this.alwaysMustRevalidate__	};return,whether,must,revalidate,is,added,to,every,cache,control,header,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,always,must,revalidate,return,this,always,must,revalidate
WebContentGenerator -> public final void setUseExpiresHeader(boolean useExpiresHeader);1328020251;Set whether to use the HTTP 1.0 expires header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.;public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request;public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> public final void setUseExpiresHeader(boolean useExpiresHeader);1356735495;Set whether to use the HTTP 1.0 expires header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.;public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request;public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> public final void setUseExpiresHeader(boolean useExpiresHeader);1362408075;Set whether to use the HTTP 1.0 expires header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.;public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request;public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> public final void setUseExpiresHeader(boolean useExpiresHeader);1385423968;Set whether to use the HTTP 1.0 expires header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.;public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request;public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> public final void setUseExpiresHeader(boolean useExpiresHeader);1386025020;Set whether to use the HTTP 1.0 expires header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.;public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request;public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> public final void setUseExpiresHeader(boolean useExpiresHeader);1407511029;Set whether to use the HTTP 1.0 expires header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.;public final void setUseExpiresHeader(boolean useExpiresHeader) {_		this.useExpiresHeader = useExpiresHeader__	};set,whether,to,use,the,http,1,0,expires,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request;public,final,void,set,use,expires,header,boolean,use,expires,header,this,use,expires,header,use,expires,header
WebContentGenerator -> protected final void preventCaching(HttpServletResponse response);1328020251;Prevent the response from being cached._See <code>http://www.mnot.net/cache_docs</code>.;protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}_		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,see,code,http,www,mnot,net,code;protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> protected final void preventCaching(HttpServletResponse response);1356735495;Prevent the response from being cached._See {@code http://www.mnot.net/cache_docs}.;protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}_		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,see,code,http,www,mnot,net;protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> protected final void preventCaching(HttpServletResponse response);1362408075;Prevent the response from being cached._See {@code http://www.mnot.net/cache_docs}.;protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}_		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,see,code,http,www,mnot,net;protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> protected final void preventCaching(HttpServletResponse response);1385423968;Prevent the response from being cached._See {@code http://www.mnot.net/cache_docs}.;protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}_		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,see,code,http,www,mnot,net;protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> protected final void preventCaching(HttpServletResponse response);1386025020;Prevent the response from being cached._See {@code http://www.mnot.net/cache_docs}.;protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}_		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,see,code,http,www,mnot,net;protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> protected final void preventCaching(HttpServletResponse response);1407511029;Prevent the response from being cached._See {@code http://www.mnot.net/cache_docs}.;protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}_		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,see,code,http,www,mnot,net;protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> protected final void preventCaching(HttpServletResponse response);1427130064;Prevent the response from being cached._See {@code http://www.mnot.net/cache_docs}.;protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}_		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,see,code,http,www,mnot,net;protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> protected final void preventCaching(HttpServletResponse response);1432326716;Prevent the response from being cached._See {@code http://www.mnot.net/cache_docs}.;protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}_		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,see,code,http,www,mnot,net;protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> protected final void preventCaching(HttpServletResponse response);1434026774;Prevent the response from being cached._See {@code http://www.mnot.net/cache_docs}.;protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		if (this.useExpiresHeader) {_			_			response.setHeader(HEADER_EXPIRES, dateFormat.format(System.currentTimeMillis()))__		}_		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,see,code,http,www,mnot,net;protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,header,date,format,format,system,current,time,millis,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> protected final void preventCaching(HttpServletResponse response);1436310496;Prevent the response from being cached._See {@code http://www.mnot.net/cache_docs}.;protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		if (this.useExpiresHeader) {_			_			response.setHeader(HEADER_EXPIRES, dateFormat.format(System.currentTimeMillis()))__		}_		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,see,code,http,www,mnot,net;protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,header,date,format,format,system,current,time,millis,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> protected final void preventCaching(HttpServletResponse response);1437425300;Prevent the response from being cached._See {@code http://www.mnot.net/cache_docs}.;protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis())__		}_		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,see,code,http,www,mnot,net;protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,system,current,time,millis,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> protected final void preventCaching(HttpServletResponse response);1437466084;Prevent the response from being cached._See {@code http://www.mnot.net/cache_docs}.;protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis())__		}_		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,see,code,http,www,mnot,net;protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,system,current,time,millis,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> protected final void preventCaching(HttpServletResponse response);1437472622;Prevent the response from being cached._See {@code http://www.mnot.net/cache_docs}.;protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")__		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis())__		}_		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,see,code,http,www,mnot,net;protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,system,current,time,millis,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1437503583;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1446044819;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1453475043;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1453729744;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1453757715;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1456936964;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1458697675;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1458747313;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1458830057;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1465306936;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1467667881;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1467730834;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1483750478;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1490350007;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1498780456;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1500448076;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1518987682;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate);1530174524;Apply the given cache seconds and generate respective HTTP headers._<p>That is, allow caching for the given number of seconds in the_case of a positive value, prevent caching if given a 0 value, else_do nothing (i.e. leave caching to the client)._@param response the current HTTP response_@param cacheSeconds the (positive) number of seconds into the future_that the response should be cacheable for_ 0 to prevent caching_ and_a negative value to leave caching to the client._@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {_		if (cacheSeconds > 0) {_			cacheForSeconds(response, cacheSeconds, mustRevalidate)__		}_		else if (cacheSeconds == 0) {_			preventCaching(response)__		}_	};apply,the,given,cache,seconds,and,generate,respective,http,headers,p,that,is,allow,caching,for,the,given,number,of,seconds,in,the,case,of,a,positive,value,prevent,caching,if,given,a,0,value,else,do,nothing,i,e,leave,caching,to,the,client,param,response,the,current,http,response,param,cache,seconds,the,positive,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,0,to,prevent,caching,and,a,negative,value,to,leave,caching,to,the,client,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,apply,cache,seconds,http,servlet,response,response,int,cache,seconds,boolean,must,revalidate,if,cache,seconds,0,cache,for,seconds,response,cache,seconds,must,revalidate,else,if,cache,seconds,0,prevent,caching,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1437503583;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1446044819;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1453475043;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1453729744;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1453757715;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1456936964;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1458697675;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1458747313;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1458830057;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1465306936;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1467667881;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1467730834;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1483750478;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1490350007;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1498780456;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1500448076;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1518987682;@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified) 			throws ServletException;1530174524;Check and prepare the given request and response according to the settings_of this generator._@see #checkRequest(HttpServletRequest)_@see #applyCacheSeconds(HttpServletResponse, int)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)_			throws ServletException {__		checkRequest(request)__		applyCacheSeconds(response, cacheSeconds)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,see,check,request,http,servlet,request,see,apply,cache,seconds,http,servlet,response,int,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,int,cache,seconds,boolean,last,modified,throws,servlet,exception,check,request,request,apply,cache,seconds,response,cache,seconds
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1427130064;Return whether the HTTP 1.1 cache-control header value "no-store" is used.;@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1432326716;Return whether the HTTP 1.1 cache-control header value "no-store" is used.;@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1434026774;Return whether the HTTP 1.1 cache-control header value "no-store" is used.;@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1436310496;Return whether the HTTP 1.1 cache-control header value "no-store" is used.;@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1437425300;Return whether the HTTP 1.1 cache-control header value "no-store" is used.;@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1437466084;Return whether the HTTP 1.1 cache-control header value "no-store" is used.;@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1437472622;Return whether the HTTP 1.1 cache-control header value "no-store" is used.__@deprecated in favor of {@link #getCacheControl}.;@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1437503583;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1446044819;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1453475043;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1453729744;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1453757715;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1456936964;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1458697675;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1458747313;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1458830057;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1465306936;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1467667881;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1467730834;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1483750478;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1490350007;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1498780456;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1500448076;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1518987682;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final boolean isUseCacheControlNoStore();1530174524;Return whether the HTTP 1.1 cache-control header value "no-store" is used._@deprecated as of 4.2, in favor of {@link #getCacheControl()};@Deprecated_	public final boolean isUseCacheControlNoStore() {_		return this.useCacheControlNoStore__	};return,whether,the,http,1,1,cache,control,header,value,no,store,is,used,deprecated,as,of,4,2,in,favor,of,link,get,cache,control;deprecated,public,final,boolean,is,use,cache,control,no,store,return,this,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1437503583;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1446044819;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1453475043;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1453729744;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1453757715;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1456936964;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1458697675;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1458747313;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1458830057;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1465306936;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1467667881;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1467730834;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1483750478;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1490350007;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1498780456;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1500448076;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1518987682;@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Deprecated 	protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException;1530174524;Check and prepare the given request and response according to the settings_of this generator._@see #checkRequest(HttpServletRequest)_@see #prepareResponse(HttpServletResponse)_@deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,_with a must-revalidate header only generated if explicitly configured;@Deprecated_	protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {__		checkRequest(request)__		prepareResponse(response)__	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,see,check,request,http,servlet,request,see,prepare,response,http,servlet,response,deprecated,as,of,4,2,since,the,code,last,modified,flag,is,effectively,ignored,with,a,must,revalidate,header,only,generated,if,explicitly,configured;deprecated,protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,boolean,last,modified,throws,servlet,exception,check,request,request,prepare,response,response
WebContentGenerator -> @Nullable 	protected String getAllowHeader();1498780456;Return the "Allow" header value to use in response to an HTTP OPTIONS_request based on the configured {@link #setSupportedMethods supported_methods} also automatically adding "OPTIONS" to the list even if not_present as a supported method. This means sub-classes don't have to_explicitly list "OPTIONS" as a supported method as long as HTTP OPTIONS_requests are handled before making a call to_{@link #checkRequest(HttpServletRequest)}.;@Nullable_	protected String getAllowHeader() {_		return this.allowHeader__	};return,the,allow,header,value,to,use,in,response,to,an,http,options,request,based,on,the,configured,link,set,supported,methods,supported,methods,also,automatically,adding,options,to,the,list,even,if,not,present,as,a,supported,method,this,means,sub,classes,don,t,have,to,explicitly,list,options,as,a,supported,method,as,long,as,http,options,requests,are,handled,before,making,a,call,to,link,check,request,http,servlet,request;nullable,protected,string,get,allow,header,return,this,allow,header
WebContentGenerator -> @Nullable 	protected String getAllowHeader();1500448076;Return the "Allow" header value to use in response to an HTTP OPTIONS_request based on the configured {@link #setSupportedMethods supported_methods} also automatically adding "OPTIONS" to the list even if not_present as a supported method. This means sub-classes don't have to_explicitly list "OPTIONS" as a supported method as long as HTTP OPTIONS_requests are handled before making a call to_{@link #checkRequest(HttpServletRequest)}.;@Nullable_	protected String getAllowHeader() {_		return this.allowHeader__	};return,the,allow,header,value,to,use,in,response,to,an,http,options,request,based,on,the,configured,link,set,supported,methods,supported,methods,also,automatically,adding,options,to,the,list,even,if,not,present,as,a,supported,method,this,means,sub,classes,don,t,have,to,explicitly,list,options,as,a,supported,method,as,long,as,http,options,requests,are,handled,before,making,a,call,to,link,check,request,http,servlet,request;nullable,protected,string,get,allow,header,return,this,allow,header
WebContentGenerator -> @Nullable 	protected String getAllowHeader();1518987682;Return the "Allow" header value to use in response to an HTTP OPTIONS request_based on the configured {@link #setSupportedMethods supported methods} also_automatically adding "OPTIONS" to the list even if not present as a supported_method. This means subclasses don't have to explicitly list "OPTIONS" as a_supported method as long as HTTP OPTIONS requests are handled before making a_call to {@link #checkRequest(HttpServletRequest)}._@since 4.3;@Nullable_	protected String getAllowHeader() {_		return this.allowHeader__	};return,the,allow,header,value,to,use,in,response,to,an,http,options,request,based,on,the,configured,link,set,supported,methods,supported,methods,also,automatically,adding,options,to,the,list,even,if,not,present,as,a,supported,method,this,means,subclasses,don,t,have,to,explicitly,list,options,as,a,supported,method,as,long,as,http,options,requests,are,handled,before,making,a,call,to,link,check,request,http,servlet,request,since,4,3;nullable,protected,string,get,allow,header,return,this,allow,header
WebContentGenerator -> @Nullable 	protected String getAllowHeader();1530174524;Return the "Allow" header value to use in response to an HTTP OPTIONS request_based on the configured {@link #setSupportedMethods supported methods} also_automatically adding "OPTIONS" to the list even if not present as a supported_method. This means subclasses don't have to explicitly list "OPTIONS" as a_supported method as long as HTTP OPTIONS requests are handled before making a_call to {@link #checkRequest(HttpServletRequest)}._@since 4.3;@Nullable_	protected String getAllowHeader() {_		return this.allowHeader__	};return,the,allow,header,value,to,use,in,response,to,an,http,options,request,based,on,the,configured,link,set,supported,methods,supported,methods,also,automatically,adding,options,to,the,list,even,if,not,present,as,a,supported,method,this,means,subclasses,don,t,have,to,explicitly,list,options,as,a,supported,method,as,long,as,http,options,requests,are,handled,before,making,a,call,to,link,check,request,http,servlet,request,since,4,3;nullable,protected,string,get,allow,header,return,this,allow,header
WebContentGenerator -> public final boolean isUseCacheControlHeader();1328020251;Return whether the HTTP 1.1 cache-control header is used.;public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used;public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> public final boolean isUseCacheControlHeader();1356735495;Return whether the HTTP 1.1 cache-control header is used.;public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used;public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> public final boolean isUseCacheControlHeader();1362408075;Return whether the HTTP 1.1 cache-control header is used.;public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used;public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> public final boolean isUseCacheControlHeader();1385423968;Return whether the HTTP 1.1 cache-control header is used.;public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used;public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> public final boolean isUseCacheControlHeader();1386025020;Return whether the HTTP 1.1 cache-control header is used.;public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used;public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> public final boolean isUseCacheControlHeader();1407511029;Return whether the HTTP 1.1 cache-control header is used.;public final boolean isUseCacheControlHeader() {_		return this.useCacheControlHeader__	};return,whether,the,http,1,1,cache,control,header,is,used;public,final,boolean,is,use,cache,control,header,return,this,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1427130064;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true".__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1432326716;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true".__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1434026774;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true".__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1436310496;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true".__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1437425300;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true".__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1437466084;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true".__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1437472622;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true".__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1437503583;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1446044819;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1453475043;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1453729744;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1453757715;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1456936964;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1458697675;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1458747313;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1458830057;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1465306936;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1467667881;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1467730834;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1483750478;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1490350007;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1498780456;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1500448076;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1518987682;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore);1530174524;Set whether to use the HTTP 1.1 cache-control header value "no-store"_when preventing caching. Default is "true"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {_		this.useCacheControlNoStore = useCacheControlNoStore__	};set,whether,to,use,the,http,1,1,cache,control,header,value,no,store,when,preventing,caching,default,is,true,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,no,store,boolean,use,cache,control,no,store,this,use,cache,control,no,store,use,cache,control,no,store
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1437503583;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1446044819;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1453475043;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1453729744;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1453757715;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1456936964;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1458697675;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1458747313;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1458830057;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1465306936;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1467667881;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1467730834;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1483750478;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1490350007;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(method, this.supportedMethods)__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1498780456;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(method, this.supportedMethods)__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1500448076;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(method, this.supportedMethods)__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1518987682;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(method, this.supportedMethods)__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> protected final void checkRequest(HttpServletRequest request) throws ServletException;1530174524;Check the given request for supported methods and a required session, if any._@param request current HTTP request_@throws ServletException if the request cannot be handled because a check failed_@since 4.2;protected final void checkRequest(HttpServletRequest request) throws ServletException {_		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(method, this.supportedMethods)__		}__		_		if (this.requireSession && request.getSession(false) == null) {_			throw new HttpSessionRequiredException("Pre-existing session required but none found")__		}_	};check,the,given,request,for,supported,methods,and,a,required,session,if,any,param,request,current,http,request,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,request,http,servlet,request,request,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,this,supported,methods,if,this,require,session,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found
WebContentGenerator -> public final void setCacheControl(@Nullable CacheControl cacheControl);1500448076;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(@Nullable CacheControl cacheControl);1518987682;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(@Nullable CacheControl cacheControl);1530174524;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheSeconds(int seconds);1328020251;Cache content for the given number of seconds. Default is -1,_indicating no generation of cache-related headers._<p>Only if this is set to 0 (no cache) or a positive value (cache for_this many seconds) will this class generate cache headers._<p>The headers can be overwritten by subclasses, before content is generated.;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,default,is,1,indicating,no,generation,of,cache,related,headers,p,only,if,this,is,set,to,0,no,cache,or,a,positive,value,cache,for,this,many,seconds,will,this,class,generate,cache,headers,p,the,headers,can,be,overwritten,by,subclasses,before,content,is,generated;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1356735495;Cache content for the given number of seconds. Default is -1,_indicating no generation of cache-related headers._<p>Only if this is set to 0 (no cache) or a positive value (cache for_this many seconds) will this class generate cache headers._<p>The headers can be overwritten by subclasses, before content is generated.;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,default,is,1,indicating,no,generation,of,cache,related,headers,p,only,if,this,is,set,to,0,no,cache,or,a,positive,value,cache,for,this,many,seconds,will,this,class,generate,cache,headers,p,the,headers,can,be,overwritten,by,subclasses,before,content,is,generated;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1362408075;Cache content for the given number of seconds. Default is -1,_indicating no generation of cache-related headers._<p>Only if this is set to 0 (no cache) or a positive value (cache for_this many seconds) will this class generate cache headers._<p>The headers can be overwritten by subclasses, before content is generated.;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,default,is,1,indicating,no,generation,of,cache,related,headers,p,only,if,this,is,set,to,0,no,cache,or,a,positive,value,cache,for,this,many,seconds,will,this,class,generate,cache,headers,p,the,headers,can,be,overwritten,by,subclasses,before,content,is,generated;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1385423968;Cache content for the given number of seconds. Default is -1,_indicating no generation of cache-related headers._<p>Only if this is set to 0 (no cache) or a positive value (cache for_this many seconds) will this class generate cache headers._<p>The headers can be overwritten by subclasses, before content is generated.;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,default,is,1,indicating,no,generation,of,cache,related,headers,p,only,if,this,is,set,to,0,no,cache,or,a,positive,value,cache,for,this,many,seconds,will,this,class,generate,cache,headers,p,the,headers,can,be,overwritten,by,subclasses,before,content,is,generated;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1386025020;Cache content for the given number of seconds. Default is -1,_indicating no generation of cache-related headers._<p>Only if this is set to 0 (no cache) or a positive value (cache for_this many seconds) will this class generate cache headers._<p>The headers can be overwritten by subclasses, before content is generated.;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,default,is,1,indicating,no,generation,of,cache,related,headers,p,only,if,this,is,set,to,0,no,cache,or,a,positive,value,cache,for,this,many,seconds,will,this,class,generate,cache,headers,p,the,headers,can,be,overwritten,by,subclasses,before,content,is,generated;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1407511029;Cache content for the given number of seconds. Default is -1,_indicating no generation of cache-related headers._<p>Only if this is set to 0 (no cache) or a positive value (cache for_this many seconds) will this class generate cache headers._<p>The headers can be overwritten by subclasses, before content is generated.;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,default,is,1,indicating,no,generation,of,cache,related,headers,p,only,if,this,is,set,to,0,no,cache,or,a,positive,value,cache,for,this,many,seconds,will,this,class,generate,cache,headers,p,the,headers,can,be,overwritten,by,subclasses,before,content,is,generated;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1427130064;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl} should be used.__@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__		if (!this.usePreviousHttpCachingBehavior) {_			if (cacheSeconds > 0) {_				this.cacheControl = CacheControl.maxAge(seconds, TimeUnit.SECONDS)__			}_			else if (cacheSeconds == 0) {_				this.cacheControl = CacheControl.noStore()__			}_		}_	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds,if,this,use,previous,http,caching,behavior,if,cache,seconds,0,this,cache,control,cache,control,max,age,seconds,time,unit,seconds,else,if,cache,seconds,0,this,cache,control,cache,control,no,store
WebContentGenerator -> public final void setCacheSeconds(int seconds);1432326716;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl} should be used.__@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__		if (!this.usePreviousHttpCachingBehavior) {_			if (cacheSeconds > 0) {_				this.cacheControl = CacheControl.maxAge(seconds, TimeUnit.SECONDS)__			}_			else if (cacheSeconds == 0) {_				this.cacheControl = CacheControl.noStore()__			}_		}_	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds,if,this,use,previous,http,caching,behavior,if,cache,seconds,0,this,cache,control,cache,control,max,age,seconds,time,unit,seconds,else,if,cache,seconds,0,this,cache,control,cache,control,no,store
WebContentGenerator -> public final void setCacheSeconds(int seconds);1434026774;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl} should be used.__@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__		if (!this.usePreviousHttpCachingBehavior) {_			if (cacheSeconds > 0) {_				this.cacheControl = CacheControl.maxAge(seconds, TimeUnit.SECONDS)__			}_			else if (cacheSeconds == 0) {_				this.cacheControl = CacheControl.noStore()__			}_		}_	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds,if,this,use,previous,http,caching,behavior,if,cache,seconds,0,this,cache,control,cache,control,max,age,seconds,time,unit,seconds,else,if,cache,seconds,0,this,cache,control,cache,control,no,store
WebContentGenerator -> public final void setCacheSeconds(int seconds);1436310496;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl} should be used.__@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__		if (!this.usePreviousHttpCachingBehavior) {_			if (cacheSeconds > 0) {_				this.cacheControl = CacheControl.maxAge(seconds, TimeUnit.SECONDS)__			}_			else if (cacheSeconds == 0) {_				this.cacheControl = CacheControl.noStore()__			}_		}_	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds,if,this,use,previous,http,caching,behavior,if,cache,seconds,0,this,cache,control,cache,control,max,age,seconds,time,unit,seconds,else,if,cache,seconds,0,this,cache,control,cache,control,no,store
WebContentGenerator -> public final void setCacheSeconds(int seconds);1437425300;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl} should be used.__@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__		if (!this.usePreviousHttpCachingBehavior) {_			if (cacheSeconds > 0) {_				this.cacheControl = CacheControl.maxAge(seconds, TimeUnit.SECONDS)__			}_			else if (cacheSeconds == 0) {_				this.cacheControl = CacheControl.noStore()__			}_		}_	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds,if,this,use,previous,http,caching,behavior,if,cache,seconds,0,this,cache,control,cache,control,max,age,seconds,time,unit,seconds,else,if,cache,seconds,0,this,cache,control,cache,control,no,store
WebContentGenerator -> public final void setCacheSeconds(int seconds);1437466084;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl} should be used.__@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__		if (!this.usePreviousHttpCachingBehavior) {_			if (cacheSeconds > 0) {_				this.cacheControl = CacheControl.maxAge(seconds, TimeUnit.SECONDS)__			}_			else if (cacheSeconds == 0) {_				this.cacheControl = CacheControl.noStore()__			}_		}_	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds,if,this,use,previous,http,caching,behavior,if,cache,seconds,0,this,cache,control,cache,control,max,age,seconds,time,unit,seconds,else,if,cache,seconds,0,this,cache,control,cache,control,no,store
WebContentGenerator -> public final void setCacheSeconds(int seconds);1437472622;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl} should be used.__@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__		if (!this.usePreviousHttpCachingBehavior) {_			if (cacheSeconds > 0) {_				this.cacheControl = CacheControl.maxAge(seconds, TimeUnit.SECONDS)__			}_			else if (cacheSeconds == 0) {_				this.cacheControl = CacheControl.noStore()__			}_		}_	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds,if,this,use,previous,http,caching,behavior,if,cache,seconds,0,this,cache,control,cache,control,max,age,seconds,time,unit,seconds,else,if,cache,seconds,0,this,cache,control,cache,control,no,store
WebContentGenerator -> public final void setCacheSeconds(int seconds);1437503583;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1446044819;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1453475043;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1453729744;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1453757715;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1456936964;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1458697675;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1458747313;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1458830057;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1465306936;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1467667881;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1467730834;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1483750478;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1490350007;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1498780456;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1500448076;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1518987682;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> public final void setCacheSeconds(int seconds);1530174524;Cache content for the given number of seconds, by writing_cache-related HTTP headers to the response:_<ul>_<li>seconds == -1 (default value): no generation cache-related headers</li>_<li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>_<li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>_</ul>_<p>For more specific needs, a custom {@link org.springframework.http.CacheControl}_should be used._@see #setCacheControl;public final void setCacheSeconds(int seconds) {_		this.cacheSeconds = seconds__	};cache,content,for,the,given,number,of,seconds,by,writing,cache,related,http,headers,to,the,response,ul,li,seconds,1,default,value,no,generation,cache,related,headers,li,li,seconds,0,cache,control,no,store,will,prevent,caching,li,li,seconds,0,cache,control,max,age,seconds,will,ask,to,cache,content,li,ul,p,for,more,specific,needs,a,custom,link,org,springframework,http,cache,control,should,be,used,see,set,cache,control;public,final,void,set,cache,seconds,int,seconds,this,cache,seconds,seconds
WebContentGenerator -> @Deprecated 	public void setAlwaysMustRevalidate(boolean mustRevalidate);1427130064;An option to add 'must-revalidate' to every Cache-Control header. This_may be useful with annotated controller methods, which can_programmatically do a lastModified calculation as described in_{@link WebRequest#checkNotModified(long)}. Default is "false".__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__		this.usePreviousHttpCachingBehavior = true__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,web,request,check,not,modified,long,default,is,false,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public void setAlwaysMustRevalidate(boolean mustRevalidate);1432326716;An option to add 'must-revalidate' to every Cache-Control header. This_may be useful with annotated controller methods, which can_programmatically do a lastModified calculation as described in_{@link WebRequest#checkNotModified(long)}. Default is "false".__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__		this.usePreviousHttpCachingBehavior = true__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,web,request,check,not,modified,long,default,is,false,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public void setAlwaysMustRevalidate(boolean mustRevalidate);1434026774;An option to add 'must-revalidate' to every Cache-Control header. This_may be useful with annotated controller methods, which can_programmatically do a lastModified calculation as described in_{@link WebRequest#checkNotModified(long)}. Default is "false".__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__		this.usePreviousHttpCachingBehavior = true__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,web,request,check,not,modified,long,default,is,false,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public void setAlwaysMustRevalidate(boolean mustRevalidate);1436310496;An option to add 'must-revalidate' to every Cache-Control header. This_may be useful with annotated controller methods, which can_programmatically do a lastModified calculation as described in_{@link WebRequest#checkNotModified(long)}. Default is "false".__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__		this.usePreviousHttpCachingBehavior = true__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,web,request,check,not,modified,long,default,is,false,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public void setAlwaysMustRevalidate(boolean mustRevalidate);1437425300;An option to add 'must-revalidate' to every Cache-Control header. This_may be useful with annotated controller methods, which can_programmatically do a lastModified calculation as described in_{@link WebRequest#checkNotModified(long)}. Default is "false".__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__		this.usePreviousHttpCachingBehavior = true__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,web,request,check,not,modified,long,default,is,false,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public void setAlwaysMustRevalidate(boolean mustRevalidate);1437466084;An option to add 'must-revalidate' to every Cache-Control header. This_may be useful with annotated controller methods, which can_programmatically do a lastModified calculation as described in_{@link WebRequest#checkNotModified(long)}. Default is "false".__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__		this.usePreviousHttpCachingBehavior = true__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,web,request,check,not,modified,long,default,is,false,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public void setAlwaysMustRevalidate(boolean mustRevalidate);1437472622;An option to add 'must-revalidate' to every Cache-Control header. This_may be useful with annotated controller methods, which can_programmatically do a lastModified calculation as described in_{@link WebRequest#checkNotModified(long)}. Default is "false".__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__		this.usePreviousHttpCachingBehavior = true__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,web,request,check,not,modified,long,default,is,false,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1437503583;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1446044819;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1453475043;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1453729744;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1453757715;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1456936964;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1458697675;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1458747313;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1458830057;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1465306936;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1467667881;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1467730834;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1483750478;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1490350007;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1498780456;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1500448076;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1518987682;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds);1530174524;Set HTTP headers to allow caching for the given number of seconds._Does not tell the browser to revalidate the resource._@param response current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {_		cacheForSeconds(response, seconds, false)__	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,does,not,tell,the,browser,to,revalidate,the,resource,param,response,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,cache,for,seconds,response,seconds,false
WebContentGenerator -> public final int getCacheSeconds();1328020251;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1356735495;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1362408075;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1385423968;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1386025020;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1407511029;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1427130064;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1432326716;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1434026774;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1436310496;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1437425300;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1437466084;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1437472622;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1437503583;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1446044819;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1453475043;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1453729744;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1453757715;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1456936964;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1458697675;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1458747313;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1458830057;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1465306936;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1467667881;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1467730834;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1483750478;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1490350007;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1498780456;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1500448076;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1518987682;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final int getCacheSeconds();1530174524;Return the number of seconds that content is cached.;public final int getCacheSeconds() {_		return this.cacheSeconds__	};return,the,number,of,seconds,that,content,is,cached;public,final,int,get,cache,seconds,return,this,cache,seconds
WebContentGenerator -> public final CacheControl getCacheControl();1437503583;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> public final CacheControl getCacheControl();1446044819;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> public final CacheControl getCacheControl();1453475043;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> public final CacheControl getCacheControl();1453729744;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> public final CacheControl getCacheControl();1453757715;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> public final CacheControl getCacheControl();1456936964;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> public final CacheControl getCacheControl();1458697675;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> public final CacheControl getCacheControl();1458747313;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> public final CacheControl getCacheControl();1458830057;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> public final CacheControl getCacheControl();1465306936;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> public final CacheControl getCacheControl();1467667881;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> public final CacheControl getCacheControl();1467730834;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> public final CacheControl getCacheControl();1483750478;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> public final CacheControl getCacheControl();1490350007;Get the {@link org.springframework.http.CacheControl} instance_that builds the Cache-Control HTTP response header._@since 4.2;public final CacheControl getCacheControl() {_		return this.cacheControl__	};get,the,link,org,springframework,http,cache,control,instance,that,builds,the,cache,control,http,response,header,since,4,2;public,final,cache,control,get,cache,control,return,this,cache,control
WebContentGenerator -> public final void setVaryByRequestHeaders(String... varyByRequestHeaders);1465306936;Configure one or more request header names (e.g. "Accept-Language") to_add to the "Vary" response header to inform clients that the response is_subject to content negotiation and variances based on the value of the_given request headers. The configured request header names are added only_if not already present in the response "Vary" header._<p><strong>Note:</strong> This property is only supported on Servlet 3.0+_which allows checking existing response header values._@param varyByRequestHeaders one or more request header names_@since 4.3;public final void setVaryByRequestHeaders(String... varyByRequestHeaders) {_		this.varyByRequestHeaders = varyByRequestHeaders__	};configure,one,or,more,request,header,names,e,g,accept,language,to,add,to,the,vary,response,header,to,inform,clients,that,the,response,is,subject,to,content,negotiation,and,variances,based,on,the,value,of,the,given,request,headers,the,configured,request,header,names,are,added,only,if,not,already,present,in,the,response,vary,header,p,strong,note,strong,this,property,is,only,supported,on,servlet,3,0,which,allows,checking,existing,response,header,values,param,vary,by,request,headers,one,or,more,request,header,names,since,4,3;public,final,void,set,vary,by,request,headers,string,vary,by,request,headers,this,vary,by,request,headers,vary,by,request,headers
WebContentGenerator -> public final void setVaryByRequestHeaders(String... varyByRequestHeaders);1467667881;Configure one or more request header names (e.g. "Accept-Language") to_add to the "Vary" response header to inform clients that the response is_subject to content negotiation and variances based on the value of the_given request headers. The configured request header names are added only_if not already present in the response "Vary" header._@param varyByRequestHeaders one or more request header names_@since 4.3;public final void setVaryByRequestHeaders(String... varyByRequestHeaders) {_		this.varyByRequestHeaders = varyByRequestHeaders__	};configure,one,or,more,request,header,names,e,g,accept,language,to,add,to,the,vary,response,header,to,inform,clients,that,the,response,is,subject,to,content,negotiation,and,variances,based,on,the,value,of,the,given,request,headers,the,configured,request,header,names,are,added,only,if,not,already,present,in,the,response,vary,header,param,vary,by,request,headers,one,or,more,request,header,names,since,4,3;public,final,void,set,vary,by,request,headers,string,vary,by,request,headers,this,vary,by,request,headers,vary,by,request,headers
WebContentGenerator -> public final void setVaryByRequestHeaders(String... varyByRequestHeaders);1467730834;Configure one or more request header names (e.g. "Accept-Language") to_add to the "Vary" response header to inform clients that the response is_subject to content negotiation and variances based on the value of the_given request headers. The configured request header names are added only_if not already present in the response "Vary" header._@param varyByRequestHeaders one or more request header names_@since 4.3;public final void setVaryByRequestHeaders(String... varyByRequestHeaders) {_		this.varyByRequestHeaders = varyByRequestHeaders__	};configure,one,or,more,request,header,names,e,g,accept,language,to,add,to,the,vary,response,header,to,inform,clients,that,the,response,is,subject,to,content,negotiation,and,variances,based,on,the,value,of,the,given,request,headers,the,configured,request,header,names,are,added,only,if,not,already,present,in,the,response,vary,header,param,vary,by,request,headers,one,or,more,request,header,names,since,4,3;public,final,void,set,vary,by,request,headers,string,vary,by,request,headers,this,vary,by,request,headers,vary,by,request,headers
WebContentGenerator -> public final void setVaryByRequestHeaders(String... varyByRequestHeaders);1483750478;Configure one or more request header names (e.g. "Accept-Language") to_add to the "Vary" response header to inform clients that the response is_subject to content negotiation and variances based on the value of the_given request headers. The configured request header names are added only_if not already present in the response "Vary" header._@param varyByRequestHeaders one or more request header names_@since 4.3;public final void setVaryByRequestHeaders(String... varyByRequestHeaders) {_		this.varyByRequestHeaders = varyByRequestHeaders__	};configure,one,or,more,request,header,names,e,g,accept,language,to,add,to,the,vary,response,header,to,inform,clients,that,the,response,is,subject,to,content,negotiation,and,variances,based,on,the,value,of,the,given,request,headers,the,configured,request,header,names,are,added,only,if,not,already,present,in,the,response,vary,header,param,vary,by,request,headers,one,or,more,request,header,names,since,4,3;public,final,void,set,vary,by,request,headers,string,vary,by,request,headers,this,vary,by,request,headers,vary,by,request,headers
WebContentGenerator -> public final void setVaryByRequestHeaders(String... varyByRequestHeaders);1490350007;Configure one or more request header names (e.g. "Accept-Language") to_add to the "Vary" response header to inform clients that the response is_subject to content negotiation and variances based on the value of the_given request headers. The configured request header names are added only_if not already present in the response "Vary" header._@param varyByRequestHeaders one or more request header names_@since 4.3;public final void setVaryByRequestHeaders(String... varyByRequestHeaders) {_		this.varyByRequestHeaders = varyByRequestHeaders__	};configure,one,or,more,request,header,names,e,g,accept,language,to,add,to,the,vary,response,header,to,inform,clients,that,the,response,is,subject,to,content,negotiation,and,variances,based,on,the,value,of,the,given,request,headers,the,configured,request,header,names,are,added,only,if,not,already,present,in,the,response,vary,header,param,vary,by,request,headers,one,or,more,request,header,names,since,4,3;public,final,void,set,vary,by,request,headers,string,vary,by,request,headers,this,vary,by,request,headers,vary,by,request,headers
WebContentGenerator -> public final void setVaryByRequestHeaders(String... varyByRequestHeaders);1498780456;Configure one or more request header names (e.g. "Accept-Language") to_add to the "Vary" response header to inform clients that the response is_subject to content negotiation and variances based on the value of the_given request headers. The configured request header names are added only_if not already present in the response "Vary" header._@param varyByRequestHeaders one or more request header names_@since 4.3;public final void setVaryByRequestHeaders(String... varyByRequestHeaders) {_		this.varyByRequestHeaders = varyByRequestHeaders__	};configure,one,or,more,request,header,names,e,g,accept,language,to,add,to,the,vary,response,header,to,inform,clients,that,the,response,is,subject,to,content,negotiation,and,variances,based,on,the,value,of,the,given,request,headers,the,configured,request,header,names,are,added,only,if,not,already,present,in,the,response,vary,header,param,vary,by,request,headers,one,or,more,request,header,names,since,4,3;public,final,void,set,vary,by,request,headers,string,vary,by,request,headers,this,vary,by,request,headers,vary,by,request,headers
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1437503583;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1446044819;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1453475043;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1453729744;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1453757715;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1456936964;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1458697675;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1458747313;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1458830057;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1465306936;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1467667881;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1467730834;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1483750478;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1490350007;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1498780456;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1500448076;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1518987682;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> @Deprecated 	protected final void preventCaching(HttpServletResponse response);1530174524;Prevent the response from being cached._Only called in HTTP 1.0 compatibility mode._<p>See {@code http://www.mnot.net/cache_docs}._@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void preventCaching(HttpServletResponse response) {_		response.setHeader(HEADER_PRAGMA, "no-cache")___		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, 1L)__		}__		if (this.useCacheControlHeader) {_			_			_			response.setHeader(HEADER_CACHE_CONTROL, "no-cache")__			if (this.useCacheControlNoStore) {_				response.addHeader(HEADER_CACHE_CONTROL, "no-store")__			}_		}_	};prevent,the,response,from,being,cached,only,called,in,http,1,0,compatibility,mode,p,see,code,http,www,mnot,net,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,prevent,caching,http,servlet,response,response,response,set,header,no,cache,if,this,use,expires,header,response,set,date,header,1l,if,this,use,cache,control,header,response,set,header,no,cache,if,this,use,cache,control,no,store,response,add,header,no,store
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1328020251;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_<code>true</code>._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,code,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,header,value,must,revalidate,response,set,header,header,value
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1356735495;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,header,value,must,revalidate,response,set,header,header,value
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1362408075;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1385423968;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1386025020;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1407511029;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1427130064;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,header,value,must,revalidate,response,set,header,header,value
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1432326716;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,header,value,must,revalidate,response,set,header,header,value
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1434026774;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setHeader(HEADER_EXPIRES, dateFormat.format(System.currentTimeMillis() + seconds * 1000L))__		}_		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,header,date,format,format,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,header,value,must,revalidate,response,set,header,header,value
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1436310496;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setHeader(HEADER_EXPIRES, dateFormat.format(System.currentTimeMillis() + seconds * 1000L))__		}_		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,header,date,format,format,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,header,value,must,revalidate,response,set,header,header,value
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1437425300;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,header,value,must,revalidate,response,set,header,header,value
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1437466084;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}_		if (response.containsHeader(HEADER_PRAGMA)) {_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1437472622;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support);protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}_		if (response.containsHeader(HEADER_PRAGMA)) {_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support;protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1437503583;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1446044819;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1453475043;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1453729744;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1453757715;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1456936964;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1458697675;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1458747313;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1458830057;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1465306936;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1467667881;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1467730834;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1483750478;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1490350007;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1498780456;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1500448076;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1518987682;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> @Deprecated 	public final void setAlwaysMustRevalidate(boolean mustRevalidate);1530174524;An option to add 'must-revalidate' to every Cache-Control header._This may be useful with annotated controller methods, which can_programmatically do a last-modified calculation as described in_{@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}._<p>Default is "false"._@deprecated as of 4.2, in favor of {@link #setCacheControl};@Deprecated_	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {_		this.alwaysMustRevalidate = mustRevalidate__	};an,option,to,add,must,revalidate,to,every,cache,control,header,this,may,be,useful,with,annotated,controller,methods,which,can,programmatically,do,a,last,modified,calculation,as,described,in,link,org,springframework,web,context,request,web,request,check,not,modified,long,p,default,is,false,deprecated,as,of,4,2,in,favor,of,link,set,cache,control;deprecated,public,final,void,set,always,must,revalidate,boolean,must,revalidate,this,always,must,revalidate,must,revalidate
WebContentGenerator -> public String[] getVaryByRequestHeaders();1458697675;Return the configured request header names for the "Vary" response header.;public String[] getVaryByRequestHeaders() {_		return this.varyByRequestHeaders__	};return,the,configured,request,header,names,for,the,vary,response,header;public,string,get,vary,by,request,headers,return,this,vary,by,request,headers
WebContentGenerator -> public String[] getVaryByRequestHeaders();1458747313;Return the configured request header names for the "Vary" response header.;public String[] getVaryByRequestHeaders() {_		return this.varyByRequestHeaders__	};return,the,configured,request,header,names,for,the,vary,response,header;public,string,get,vary,by,request,headers,return,this,vary,by,request,headers
WebContentGenerator -> public String[] getVaryByRequestHeaders();1458830057;Return the configured request header names for the "Vary" response header.;public String[] getVaryByRequestHeaders() {_		return this.varyByRequestHeaders__	};return,the,configured,request,header,names,for,the,vary,response,header;public,string,get,vary,by,request,headers,return,this,vary,by,request,headers
WebContentGenerator -> public final String[] getSupportedMethods();1328020251;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1356735495;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1362408075;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1385423968;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1386025020;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1407511029;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1427130064;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1432326716;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1434026774;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1436310496;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1437425300;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1437466084;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1437472622;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1437503583;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1446044819;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1453475043;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1453729744;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1453757715;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1456936964;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1458697675;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1458747313;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1458830057;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1465306936;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1467667881;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1467730834;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1483750478;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final String[] getSupportedMethods();1490350007;Return the HTTP methods that this content generator supports.;public final String[] getSupportedMethods() {_		return StringUtils.toStringArray(this.supportedMethods)__	};return,the,http,methods,that,this,content,generator,supports;public,final,string,get,supported,methods,return,string,utils,to,string,array,this,supported,methods
WebContentGenerator -> public final void setCacheControl(CacheControl cacheControl);1437503583;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(CacheControl cacheControl);1446044819;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(CacheControl cacheControl);1453475043;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(CacheControl cacheControl);1453729744;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(CacheControl cacheControl);1453757715;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(CacheControl cacheControl);1456936964;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(CacheControl cacheControl);1458697675;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(CacheControl cacheControl);1458747313;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(CacheControl cacheControl);1458830057;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(CacheControl cacheControl);1465306936;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(CacheControl cacheControl);1467667881;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(CacheControl cacheControl);1467730834;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(CacheControl cacheControl);1483750478;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(CacheControl cacheControl);1490350007;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> public final void setCacheControl(CacheControl cacheControl);1498780456;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header._@since 4.2;public final void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header,since,4,2;public,final,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1437503583;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1446044819;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1453475043;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1453729744;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1453757715;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1456936964;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1458697675;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_		if (servlet3Present && this.varyByRequestHeaders != null) {_			for (String value : getVaryRequestHeadersToAdd(response)) {_				response.addHeader("Vary", value)__			}_		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds,if,servlet3present,this,vary,by,request,headers,null,for,string,value,get,vary,request,headers,to,add,response,response,add,header,vary,value
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1458747313;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_		if (servlet3Present && this.varyByRequestHeaders != null) {_			for (String value : getVaryRequestHeadersToAdd(response)) {_				response.addHeader("Vary", value)__			}_		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds,if,servlet3present,this,vary,by,request,headers,null,for,string,value,get,vary,request,headers,to,add,response,response,add,header,vary,value
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1458830057;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_		if (servlet3Present && this.varyByRequestHeaders != null) {_			for (String value : getVaryRequestHeadersToAdd(response)) {_				response.addHeader("Vary", value)__			}_		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds,if,servlet3present,this,vary,by,request,headers,null,for,string,value,get,vary,request,headers,to,add,response,response,add,header,vary,value
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1465306936;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_		if (servlet3Present && this.varyByRequestHeaders != null) {_			for (String value : getVaryRequestHeadersToAdd(response)) {_				response.addHeader("Vary", value)__			}_		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds,if,servlet3present,this,vary,by,request,headers,null,for,string,value,get,vary,request,headers,to,add,response,response,add,header,vary,value
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1467667881;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_		if (this.varyByRequestHeaders != null) {_			for (String value : getVaryRequestHeadersToAdd(response)) {_				response.addHeader("Vary", value)__			}_		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds,if,this,vary,by,request,headers,null,for,string,value,get,vary,request,headers,to,add,response,response,add,header,vary,value
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1467730834;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_		if (this.varyByRequestHeaders != null) {_			for (String value : getVaryRequestHeadersToAdd(response)) {_				response.addHeader("Vary", value)__			}_		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds,if,this,vary,by,request,headers,null,for,string,value,get,vary,request,headers,to,add,response,response,add,header,vary,value
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1483750478;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_		if (this.varyByRequestHeaders != null) {_			for (String value : getVaryRequestHeadersToAdd(response)) {_				response.addHeader("Vary", value)__			}_		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds,if,this,vary,by,request,headers,null,for,string,value,get,vary,request,headers,to,add,response,response,add,header,vary,value
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1490350007;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_		if (this.varyByRequestHeaders != null) {_			for (String value : getVaryRequestHeadersToAdd(response)) {_				response.addHeader("Vary", value)__			}_		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds,if,this,vary,by,request,headers,null,for,string,value,get,vary,request,headers,to,add,response,response,add,header,vary,value
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1498780456;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_		if (this.varyByRequestHeaders != null) {_			for (String value : getVaryRequestHeadersToAdd(response, this.varyByRequestHeaders)) {_				response.addHeader("Vary", value)__			}_		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds,if,this,vary,by,request,headers,null,for,string,value,get,vary,request,headers,to,add,response,this,vary,by,request,headers,response,add,header,vary,value
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1500448076;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_		if (this.varyByRequestHeaders != null) {_			for (String value : getVaryRequestHeadersToAdd(response, this.varyByRequestHeaders)) {_				response.addHeader("Vary", value)__			}_		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds,if,this,vary,by,request,headers,null,for,string,value,get,vary,request,headers,to,add,response,this,vary,by,request,headers,response,add,header,vary,value
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1518987682;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_		if (this.varyByRequestHeaders != null) {_			for (String value : getVaryRequestHeadersToAdd(response, this.varyByRequestHeaders)) {_				response.addHeader("Vary", value)__			}_		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds,if,this,vary,by,request,headers,null,for,string,value,get,vary,request,headers,to,add,response,this,vary,by,request,headers,response,add,header,vary,value
WebContentGenerator -> protected final void prepareResponse(HttpServletResponse response);1530174524;Prepare the given response according to the settings of this generator._Applies the number of cache seconds specified for this generator._@param response current HTTP response_@since 4.2;protected final void prepareResponse(HttpServletResponse response) {_		if (this.cacheControl != null) {_			applyCacheControl(response, this.cacheControl)__		}_		else {_			applyCacheSeconds(response, this.cacheSeconds)__		}_		if (this.varyByRequestHeaders != null) {_			for (String value : getVaryRequestHeadersToAdd(response, this.varyByRequestHeaders)) {_				response.addHeader("Vary", value)__			}_		}_	};prepare,the,given,response,according,to,the,settings,of,this,generator,applies,the,number,of,cache,seconds,specified,for,this,generator,param,response,current,http,response,since,4,2;protected,final,void,prepare,response,http,servlet,response,response,if,this,cache,control,null,apply,cache,control,response,this,cache,control,else,apply,cache,seconds,response,this,cache,seconds,if,this,vary,by,request,headers,null,for,string,value,get,vary,request,headers,to,add,response,this,vary,by,request,headers,response,add,header,vary,value
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1427130064;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1432326716;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1434026774;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1436310496;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1437425300;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1437466084;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1437472622;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request.__@deprecated in favor of {@link #setCacheSeconds} or {@link #setCacheControl}.;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__		this.usePreviousHttpCachingBehavior = true__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,in,favor,of,link,set,cache,seconds,or,link,set,cache,control;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header,this,use,previous,http,caching,behavior,true
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1437503583;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1446044819;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1453475043;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1453729744;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1453757715;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1456936964;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1458697675;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1458747313;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1458830057;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1465306936;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1467667881;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1467730834;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1483750478;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1490350007;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1498780456;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1500448076;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1518987682;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> @Deprecated 	public final void setUseCacheControlHeader(boolean useCacheControlHeader);1530174524;Set whether to use the HTTP 1.1 cache-control header. Default is "true"._<p>Note: Cache headers will only get applied if caching is enabled_(or explicitly prevented) for the current request._@deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control_header will be required, with the HTTP 1.0 headers disappearing;@Deprecated_	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {_		this.useCacheControlHeader = useCacheControlHeader__	};set,whether,to,use,the,http,1,1,cache,control,header,default,is,true,p,note,cache,headers,will,only,get,applied,if,caching,is,enabled,or,explicitly,prevented,for,the,current,request,deprecated,as,of,4,2,since,going,forward,the,http,1,1,cache,control,header,will,be,required,with,the,http,1,0,headers,disappearing;deprecated,public,final,void,set,use,cache,control,header,boolean,use,cache,control,header,this,use,cache,control,header,use,cache,control,header
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, CacheControl cacheControl) 			throws ServletException;1427130064;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session_specified for this generator. Also applies the {@link org.springframework.http.CacheControl}_given as a parameter._@param request current HTTP request_@param response current HTTP response_@param cacheControl the {@link org.springframework.http.CacheControl} to use_@throws ServletException if the request cannot be handled because a check failed__@since 4.2;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, CacheControl cacheControl)_			throws ServletException {__		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession) {_			if (request.getSession(false) == null) {_				throw new HttpSessionRequiredException("Pre-existing session required but none found")__			}_		}__		if (this.usePreviousHttpCachingBehavior) {_			addHttp10CacheHeaders(response)__		}_		else if (cacheControl != null) {_			String ccValue = cacheControl.getHeaderValue()__			if (ccValue != null) {_				response.setHeader(HEADER_CACHE_CONTROL, ccValue)__			}_		}_	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,specified,for,this,generator,also,applies,the,link,org,springframework,http,cache,control,given,as,a,parameter,param,request,current,http,request,param,response,current,http,response,param,cache,control,the,link,org,springframework,http,cache,control,to,use,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,cache,control,cache,control,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,if,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found,if,this,use,previous,http,caching,behavior,add,http10cache,headers,response,else,if,cache,control,null,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, CacheControl cacheControl) 			throws ServletException;1432326716;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session_specified for this generator. Also applies the {@link org.springframework.http.CacheControl}_given as a parameter._@param request current HTTP request_@param response current HTTP response_@param cacheControl the {@link org.springframework.http.CacheControl} to use_@throws ServletException if the request cannot be handled because a check failed__@since 4.2;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, CacheControl cacheControl)_			throws ServletException {__		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession) {_			if (request.getSession(false) == null) {_				throw new HttpSessionRequiredException("Pre-existing session required but none found")__			}_		}__		if (this.usePreviousHttpCachingBehavior) {_			addHttp10CacheHeaders(response)__		}_		else if (cacheControl != null) {_			String ccValue = cacheControl.getHeaderValue()__			if (ccValue != null) {_				response.setHeader(HEADER_CACHE_CONTROL, ccValue)__			}_		}_	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,specified,for,this,generator,also,applies,the,link,org,springframework,http,cache,control,given,as,a,parameter,param,request,current,http,request,param,response,current,http,response,param,cache,control,the,link,org,springframework,http,cache,control,to,use,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,cache,control,cache,control,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,if,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found,if,this,use,previous,http,caching,behavior,add,http10cache,headers,response,else,if,cache,control,null,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, CacheControl cacheControl) 			throws ServletException;1434026774;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session_specified for this generator. Also applies the {@link org.springframework.http.CacheControl}_given as a parameter._@param request current HTTP request_@param response current HTTP response_@param cacheControl the {@link org.springframework.http.CacheControl} to use_@throws ServletException if the request cannot be handled because a check failed__@since 4.2;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, CacheControl cacheControl)_			throws ServletException {__		_		String method = request.getMethod()__		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {_			throw new HttpRequestMethodNotSupportedException(_					method, StringUtils.toStringArray(this.supportedMethods))__		}__		_		if (this.requireSession) {_			if (request.getSession(false) == null) {_				throw new HttpSessionRequiredException("Pre-existing session required but none found")__			}_		}__		if (this.usePreviousHttpCachingBehavior) {_			addHttp10CacheHeaders(response)__		}_		else if (cacheControl != null) {_			String ccValue = cacheControl.getHeaderValue()__			if (ccValue != null) {_				response.setHeader(HEADER_CACHE_CONTROL, ccValue)__			}_		}_	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,specified,for,this,generator,also,applies,the,link,org,springframework,http,cache,control,given,as,a,parameter,param,request,current,http,request,param,response,current,http,response,param,cache,control,the,link,org,springframework,http,cache,control,to,use,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,cache,control,cache,control,throws,servlet,exception,string,method,request,get,method,if,this,supported,methods,null,this,supported,methods,contains,method,throw,new,http,request,method,not,supported,exception,method,string,utils,to,string,array,this,supported,methods,if,this,require,session,if,request,get,session,false,null,throw,new,http,session,required,exception,pre,existing,session,required,but,none,found,if,this,use,previous,http,caching,behavior,add,http10cache,headers,response,else,if,cache,control,null,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, CacheControl cacheControl) 			throws ServletException;1436310496;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session_specified for this generator. Also applies the {@link org.springframework.http.CacheControl}_given as a parameter._@param request current HTTP request_@param response current HTTP response_@param cacheControl the {@link org.springframework.http.CacheControl} to use_@throws ServletException if the request cannot be handled because a check failed__@since 4.2;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, CacheControl cacheControl)_			throws ServletException {__		checkRequest(request)___		if (this.usePreviousHttpCachingBehavior) {_			addHttp10CacheHeaders(this.cacheSeconds, response)__		}_		else if (cacheControl != null) {_			String ccValue = cacheControl.getHeaderValue()__			if (ccValue != null) {_				response.setHeader(HEADER_CACHE_CONTROL, ccValue)__			}_		}_	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,specified,for,this,generator,also,applies,the,link,org,springframework,http,cache,control,given,as,a,parameter,param,request,current,http,request,param,response,current,http,response,param,cache,control,the,link,org,springframework,http,cache,control,to,use,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,cache,control,cache,control,throws,servlet,exception,check,request,request,if,this,use,previous,http,caching,behavior,add,http10cache,headers,this,cache,seconds,response,else,if,cache,control,null,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, CacheControl cacheControl) 			throws ServletException;1437425300;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session_specified for this generator. Also applies the {@link org.springframework.http.CacheControl}_given as a parameter._@param request current HTTP request_@param response current HTTP response_@param cacheControl the {@link org.springframework.http.CacheControl} to use_@throws ServletException if the request cannot be handled because a check failed__@since 4.2;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, CacheControl cacheControl)_			throws ServletException {__		checkRequest(request)___		if (this.usePreviousHttpCachingBehavior) {_			addHttp10CacheHeaders(this.cacheSeconds, response)__		}_		else if (cacheControl != null) {_			String ccValue = cacheControl.getHeaderValue()__			if (ccValue != null) {_				response.setHeader(HEADER_CACHE_CONTROL, ccValue)__			}_		}_	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,specified,for,this,generator,also,applies,the,link,org,springframework,http,cache,control,given,as,a,parameter,param,request,current,http,request,param,response,current,http,response,param,cache,control,the,link,org,springframework,http,cache,control,to,use,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,cache,control,cache,control,throws,servlet,exception,check,request,request,if,this,use,previous,http,caching,behavior,add,http10cache,headers,this,cache,seconds,response,else,if,cache,control,null,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, CacheControl cacheControl) 			throws ServletException;1437466084;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session_specified for this generator. Also applies the {@link org.springframework.http.CacheControl}_given as a parameter._@param request current HTTP request_@param response current HTTP response_@param cacheControl the {@link org.springframework.http.CacheControl} to use_@throws ServletException if the request cannot be handled because a check failed__@since 4.2;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, CacheControl cacheControl)_			throws ServletException {__		checkRequest(request)___		if (this.usePreviousHttpCachingBehavior) {_			addHttp10CacheHeaders(this.cacheSeconds, response)__		}_		else if (cacheControl != null) {_			String ccValue = cacheControl.getHeaderValue()__			if (ccValue != null) {_				response.setHeader(HEADER_CACHE_CONTROL, ccValue)__				if (response.containsHeader(HEADER_PRAGMA)) {_					response.setHeader(HEADER_PRAGMA, "")__				}_			}_		}_	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,specified,for,this,generator,also,applies,the,link,org,springframework,http,cache,control,given,as,a,parameter,param,request,current,http,request,param,response,current,http,response,param,cache,control,the,link,org,springframework,http,cache,control,to,use,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,cache,control,cache,control,throws,servlet,exception,check,request,request,if,this,use,previous,http,caching,behavior,add,http10cache,headers,this,cache,seconds,response,else,if,cache,control,null,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header
WebContentGenerator -> protected final void checkAndPrepare( 			HttpServletRequest request, HttpServletResponse response, CacheControl cacheControl) 			throws ServletException;1437472622;Check and prepare the given request and response according to the settings_of this generator. Checks for supported methods and a required session_specified for this generator. Also applies the {@link org.springframework.http.CacheControl}_given as a parameter._@param request current HTTP request_@param response current HTTP response_@param cacheControl the {@link org.springframework.http.CacheControl} to use_@throws ServletException if the request cannot be handled because a check failed__@since 4.2;protected final void checkAndPrepare(_			HttpServletRequest request, HttpServletResponse response, CacheControl cacheControl)_			throws ServletException {__		checkRequest(request)___		if (this.usePreviousHttpCachingBehavior) {_			addHttp10CacheHeaders(this.cacheSeconds, response)__		}_		else if (cacheControl != null) {_			String ccValue = cacheControl.getHeaderValue()__			if (ccValue != null) {_				response.setHeader(HEADER_CACHE_CONTROL, ccValue)__				if (response.containsHeader(HEADER_PRAGMA)) {_					response.setHeader(HEADER_PRAGMA, "")__				}_			}_		}_	};check,and,prepare,the,given,request,and,response,according,to,the,settings,of,this,generator,checks,for,supported,methods,and,a,required,session,specified,for,this,generator,also,applies,the,link,org,springframework,http,cache,control,given,as,a,parameter,param,request,current,http,request,param,response,current,http,response,param,cache,control,the,link,org,springframework,http,cache,control,to,use,throws,servlet,exception,if,the,request,cannot,be,handled,because,a,check,failed,since,4,2;protected,final,void,check,and,prepare,http,servlet,request,request,http,servlet,response,response,cache,control,cache,control,throws,servlet,exception,check,request,request,if,this,use,previous,http,caching,behavior,add,http10cache,headers,this,cache,seconds,response,else,if,cache,control,null,string,cc,value,cache,control,get,header,value,if,cc,value,null,response,set,header,cc,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1437503583;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1446044819;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1453475043;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1453729744;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1453757715;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1456936964;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1458697675;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1458747313;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		else if (response.containsHeader(HEADER_EXPIRES)) {_			_			response.setHeader(HEADER_EXPIRES, "")__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,else,if,response,contains,header,response,set,header,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1458830057;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		else if (response.containsHeader(HEADER_EXPIRES)) {_			_			response.setHeader(HEADER_EXPIRES, "")__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,else,if,response,contains,header,response,set,header,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1465306936;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		else if (response.containsHeader(HEADER_EXPIRES)) {_			_			response.setHeader(HEADER_EXPIRES, "")__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,else,if,response,contains,header,response,set,header,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1467667881;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		else if (response.containsHeader(HEADER_EXPIRES)) {_			_			response.setHeader(HEADER_EXPIRES, "")__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,else,if,response,contains,header,response,set,header,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1467730834;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		else if (response.containsHeader(HEADER_EXPIRES)) {_			_			response.setHeader(HEADER_EXPIRES, "")__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,else,if,response,contains,header,response,set,header,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1483750478;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		else if (response.containsHeader(HEADER_EXPIRES)) {_			_			response.setHeader(HEADER_EXPIRES, "")__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,else,if,response,contains,header,response,set,header,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1490350007;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		else if (response.containsHeader(HEADER_EXPIRES)) {_			_			response.setHeader(HEADER_EXPIRES, "")__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,else,if,response,contains,header,response,set,header,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1498780456;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		else if (response.containsHeader(HEADER_EXPIRES)) {_			_			response.setHeader(HEADER_EXPIRES, "")__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,else,if,response,contains,header,response,set,header,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1500448076;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		else if (response.containsHeader(HEADER_EXPIRES)) {_			_			response.setHeader(HEADER_EXPIRES, "")__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,else,if,response,contains,header,response,set,header,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1518987682;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		else if (response.containsHeader(HEADER_EXPIRES)) {_			_			response.setHeader(HEADER_EXPIRES, "")__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,else,if,response,contains,header,response,set,header,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
WebContentGenerator -> @Deprecated 	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate);1530174524;Set HTTP headers to allow caching for the given number of seconds._Tells the browser to revalidate the resource if mustRevalidate is_{@code true}._@param response the current HTTP response_@param seconds number of seconds into the future that the response_should be cacheable for_@param mustRevalidate whether the client should revalidate the resource_(typically only necessary for controllers with last-modified support)_@deprecated as of 4.2, in favor of {@link #applyCacheControl};@Deprecated_	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {_		if (this.useExpiresHeader) {_			_			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L)__		}_		else if (response.containsHeader(HEADER_EXPIRES)) {_			_			response.setHeader(HEADER_EXPIRES, "")__		}__		if (this.useCacheControlHeader) {_			_			String headerValue = "max-age=" + seconds__			if (mustRevalidate || this.alwaysMustRevalidate) {_				headerValue += ", must-revalidate"__			}_			response.setHeader(HEADER_CACHE_CONTROL, headerValue)__		}__		if (response.containsHeader(HEADER_PRAGMA)) {_			_			response.setHeader(HEADER_PRAGMA, "")__		}_	};set,http,headers,to,allow,caching,for,the,given,number,of,seconds,tells,the,browser,to,revalidate,the,resource,if,must,revalidate,is,code,true,param,response,the,current,http,response,param,seconds,number,of,seconds,into,the,future,that,the,response,should,be,cacheable,for,param,must,revalidate,whether,the,client,should,revalidate,the,resource,typically,only,necessary,for,controllers,with,last,modified,support,deprecated,as,of,4,2,in,favor,of,link,apply,cache,control;deprecated,protected,final,void,cache,for,seconds,http,servlet,response,response,int,seconds,boolean,must,revalidate,if,this,use,expires,header,response,set,date,header,system,current,time,millis,seconds,1000l,else,if,response,contains,header,response,set,header,if,this,use,cache,control,header,string,header,value,max,age,seconds,if,must,revalidate,this,always,must,revalidate,header,value,must,revalidate,response,set,header,header,value,if,response,contains,header,response,set,header
