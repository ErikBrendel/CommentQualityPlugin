commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the prefix to prepend to generated view names.  * @param prefix the prefix to prepend to generated view names  */ ;/**  * Set the prefix to prepend to generated view names.  * @param prefix the prefix to prepend to generated view names  */ public void setPrefix(@Nullable String prefix) {     this.prefix = (prefix != null ? prefix : ""). }
true;public;1;3;/**  * Set the suffix to append to generated view names.  * @param suffix the suffix to append to generated view names  */ ;/**  * Set the suffix to append to generated view names.  * @param suffix the suffix to append to generated view names  */ public void setSuffix(@Nullable String suffix) {     this.suffix = (suffix != null ? suffix : ""). }
true;public;1;3;/**  * Set the value that will replace '{@code /}' as the separator  * in the view name. The default behavior simply leaves '{@code /}'  * as the separator.  */ ;/**  * Set the value that will replace '{@code /}' as the separator  * in the view name. The default behavior simply leaves '{@code /}'  * as the separator.  */ public void setSeparator(String separator) {     this.separator = separator. }
true;public;1;3;/**  * Set whether or not leading slashes should be stripped from the URI when  * generating the view name. Default is "true".  */ ;/**  * Set whether or not leading slashes should be stripped from the URI when  * generating the view name. Default is "true".  */ public void setStripLeadingSlash(boolean stripLeadingSlash) {     this.stripLeadingSlash = stripLeadingSlash. }
true;public;1;3;/**  * Set whether or not trailing slashes should be stripped from the URI when  * generating the view name. Default is "true".  */ ;/**  * Set whether or not trailing slashes should be stripped from the URI when  * generating the view name. Default is "true".  */ public void setStripTrailingSlash(boolean stripTrailingSlash) {     this.stripTrailingSlash = stripTrailingSlash. }
true;public;1;3;/**  * Set whether or not file extensions should be stripped from the URI when  * generating the view name. Default is "true".  */ ;/**  * Set whether or not file extensions should be stripped from the URI when  * generating the view name. Default is "true".  */ public void setStripExtension(boolean stripExtension) {     this.stripExtension = stripExtension. }
true;public;1;3;/**  * Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}.  * @see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath  */ ;/**  * Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}.  * @see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath  */ public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {     this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath). }
true;public;1;3;/**  * Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}.  * @see org.springframework.web.util.UrlPathHelper#setUrlDecode  */ ;/**  * Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}.  * @see org.springframework.web.util.UrlPathHelper#setUrlDecode  */ public void setUrlDecode(boolean urlDecode) {     this.urlPathHelper.setUrlDecode(urlDecode). }
true;public;1;3;/**  * Set if "." (semicolon) content should be stripped from the request URI.  * @see org.springframework.web.util.UrlPathHelper#setRemoveSemicolonContent(boolean)  */ ;/**  * Set if "." (semicolon) content should be stripped from the request URI.  * @see org.springframework.web.util.UrlPathHelper#setRemoveSemicolonContent(boolean)  */ public void setRemoveSemicolonContent(boolean removeSemicolonContent) {     this.urlPathHelper.setRemoveSemicolonContent(removeSemicolonContent). }
true;public;1;4;/**  * Set the {@link org.springframework.web.util.UrlPathHelper} to use for  * the resolution of lookup paths.  * <p>Use this to override the default UrlPathHelper with a custom subclass,  * or to share common UrlPathHelper settings across multiple web components.  */ ;/**  * Set the {@link org.springframework.web.util.UrlPathHelper} to use for  * the resolution of lookup paths.  * <p>Use this to override the default UrlPathHelper with a custom subclass,  * or to share common UrlPathHelper settings across multiple web components.  */ public void setUrlPathHelper(UrlPathHelper urlPathHelper) {     Assert.notNull(urlPathHelper, "UrlPathHelper must not be null").     this.urlPathHelper = urlPathHelper. }
true;public;1;5;/**  * Translates the request URI of the incoming {@link HttpServletRequest}  * into the view name based on the configured parameters.  * @see org.springframework.web.util.UrlPathHelper#getLookupPathForRequest  * @see #transformPath  */ ;/**  * Translates the request URI of the incoming {@link HttpServletRequest}  * into the view name based on the configured parameters.  * @see org.springframework.web.util.UrlPathHelper#getLookupPathForRequest  * @see #transformPath  */ @Override public String getViewName(HttpServletRequest request) {     String lookupPath = this.urlPathHelper.getLookupPathForRequest(request).     return (this.prefix + transformPath(lookupPath) + this.suffix). }
true;protected;1;17;/**  * Transform the request URI (in the context of the webapp) stripping  * slashes and extensions, and replacing the separator as required.  * @param lookupPath the lookup path for the current request,  * as determined by the UrlPathHelper  * @return the transformed path, with slashes and extensions stripped  * if desired  */ ;/**  * Transform the request URI (in the context of the webapp) stripping  * slashes and extensions, and replacing the separator as required.  * @param lookupPath the lookup path for the current request,  * as determined by the UrlPathHelper  * @return the transformed path, with slashes and extensions stripped  * if desired  */ @Nullable protected String transformPath(String lookupPath) {     String path = lookupPath.     if (this.stripLeadingSlash && path.startsWith(SLASH)) {         path = path.substring(1).     }     if (this.stripTrailingSlash && path.endsWith(SLASH)) {         path = path.substring(0, path.length() - 1).     }     if (this.stripExtension) {         path = StringUtils.stripFilenameExtension(path).     }     if (!SLASH.equals(this.separator)) {         path = StringUtils.replace(path, SLASH, this.separator).     }     return path. }
