# id;timestamp;commentText;codeText;commentWords;codeWords
RequestContextUtils -> public static WebApplicationContext getWebApplicationContext( 			ServletRequest request, ServletContext servletContext) throws IllegalStateException;1328020251;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. This method is useful to_allow components outside the framework, such as JSP tag handlers,_to access the most specific application context available._@param request current HTTP request_@param servletContext current servlet context_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found_@throws IllegalStateException if neither a servlet-specific nor a_global context has been found;public static WebApplicationContext getWebApplicationContext(_			ServletRequest request, ServletContext servletContext) throws IllegalStateException {__		WebApplicationContext webApplicationContext = (WebApplicationContext) request.getAttribute(_				DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (webApplicationContext == null) {_			if (servletContext == null) {_				throw new IllegalStateException("No WebApplicationContext found: not in a DispatcherServlet request?")__			}_			webApplicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext)__		}_		return webApplicationContext__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,this,method,is,useful,to,allow,components,outside,the,framework,such,as,jsp,tag,handlers,to,access,the,most,specific,application,context,available,param,request,current,http,request,param,servlet,context,current,servlet,context,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,throws,illegal,state,exception,if,neither,a,servlet,specific,nor,a,global,context,has,been,found;public,static,web,application,context,get,web,application,context,servlet,request,request,servlet,context,servlet,context,throws,illegal,state,exception,web,application,context,web,application,context,web,application,context,request,get,attribute,dispatcher,servlet,if,web,application,context,null,if,servlet,context,null,throw,new,illegal,state,exception,no,web,application,context,found,not,in,a,dispatcher,servlet,request,web,application,context,web,application,context,utils,get,required,web,application,context,servlet,context,return,web,application,context
RequestContextUtils -> public static WebApplicationContext getWebApplicationContext( 			ServletRequest request, ServletContext servletContext) throws IllegalStateException;1328092788;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. This method is useful to_allow components outside the framework, such as JSP tag handlers,_to access the most specific application context available._@param request current HTTP request_@param servletContext current servlet context_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found_@throws IllegalStateException if neither a servlet-specific nor a_global context has been found;public static WebApplicationContext getWebApplicationContext(_			ServletRequest request, ServletContext servletContext) throws IllegalStateException {__		WebApplicationContext webApplicationContext = (WebApplicationContext) request.getAttribute(_				DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (webApplicationContext == null) {_			if (servletContext == null) {_				throw new IllegalStateException("No WebApplicationContext found: not in a DispatcherServlet request?")__			}_			webApplicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext)__		}_		return webApplicationContext__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,this,method,is,useful,to,allow,components,outside,the,framework,such,as,jsp,tag,handlers,to,access,the,most,specific,application,context,available,param,request,current,http,request,param,servlet,context,current,servlet,context,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,throws,illegal,state,exception,if,neither,a,servlet,specific,nor,a,global,context,has,been,found;public,static,web,application,context,get,web,application,context,servlet,request,request,servlet,context,servlet,context,throws,illegal,state,exception,web,application,context,web,application,context,web,application,context,request,get,attribute,dispatcher,servlet,if,web,application,context,null,if,servlet,context,null,throw,new,illegal,state,exception,no,web,application,context,found,not,in,a,dispatcher,servlet,request,web,application,context,web,application,context,utils,get,required,web,application,context,servlet,context,return,web,application,context
RequestContextUtils -> public static WebApplicationContext getWebApplicationContext( 			ServletRequest request, ServletContext servletContext) throws IllegalStateException;1356735495;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. This method is useful to_allow components outside the framework, such as JSP tag handlers,_to access the most specific application context available._@param request current HTTP request_@param servletContext current servlet context_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found_@throws IllegalStateException if neither a servlet-specific nor a_global context has been found;public static WebApplicationContext getWebApplicationContext(_			ServletRequest request, ServletContext servletContext) throws IllegalStateException {__		WebApplicationContext webApplicationContext = (WebApplicationContext) request.getAttribute(_				DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (webApplicationContext == null) {_			if (servletContext == null) {_				throw new IllegalStateException("No WebApplicationContext found: not in a DispatcherServlet request?")__			}_			webApplicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext)__		}_		return webApplicationContext__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,this,method,is,useful,to,allow,components,outside,the,framework,such,as,jsp,tag,handlers,to,access,the,most,specific,application,context,available,param,request,current,http,request,param,servlet,context,current,servlet,context,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,throws,illegal,state,exception,if,neither,a,servlet,specific,nor,a,global,context,has,been,found;public,static,web,application,context,get,web,application,context,servlet,request,request,servlet,context,servlet,context,throws,illegal,state,exception,web,application,context,web,application,context,web,application,context,request,get,attribute,dispatcher,servlet,if,web,application,context,null,if,servlet,context,null,throw,new,illegal,state,exception,no,web,application,context,found,not,in,a,dispatcher,servlet,request,web,application,context,web,application,context,utils,get,required,web,application,context,servlet,context,return,web,application,context
RequestContextUtils -> public static WebApplicationContext getWebApplicationContext( 			ServletRequest request, ServletContext servletContext) throws IllegalStateException;1380921248;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. This method is useful to_allow components outside the framework, such as JSP tag handlers,_to access the most specific application context available._@param request current HTTP request_@param servletContext current servlet context_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found_@throws IllegalStateException if neither a servlet-specific nor a_global context has been found;public static WebApplicationContext getWebApplicationContext(_			ServletRequest request, ServletContext servletContext) throws IllegalStateException {__		WebApplicationContext webApplicationContext = (WebApplicationContext) request.getAttribute(_				DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (webApplicationContext == null) {_			if (servletContext == null) {_				throw new IllegalStateException("No WebApplicationContext found: not in a DispatcherServlet request?")__			}_			webApplicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext)__		}_		return webApplicationContext__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,this,method,is,useful,to,allow,components,outside,the,framework,such,as,jsp,tag,handlers,to,access,the,most,specific,application,context,available,param,request,current,http,request,param,servlet,context,current,servlet,context,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,throws,illegal,state,exception,if,neither,a,servlet,specific,nor,a,global,context,has,been,found;public,static,web,application,context,get,web,application,context,servlet,request,request,servlet,context,servlet,context,throws,illegal,state,exception,web,application,context,web,application,context,web,application,context,request,get,attribute,dispatcher,servlet,if,web,application,context,null,if,servlet,context,null,throw,new,illegal,state,exception,no,web,application,context,found,not,in,a,dispatcher,servlet,request,web,application,context,web,application,context,utils,get,required,web,application,context,servlet,context,return,web,application,context
RequestContextUtils -> public static WebApplicationContext getWebApplicationContext( 			ServletRequest request, ServletContext servletContext) throws IllegalStateException;1383655090;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. This method is useful to_allow components outside the framework, such as JSP tag handlers,_to access the most specific application context available._@param request current HTTP request_@param servletContext current servlet context_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found_@throws IllegalStateException if neither a servlet-specific nor a_global context has been found;public static WebApplicationContext getWebApplicationContext(_			ServletRequest request, ServletContext servletContext) throws IllegalStateException {__		WebApplicationContext webApplicationContext = (WebApplicationContext) request.getAttribute(_				DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (webApplicationContext == null) {_			if (servletContext == null) {_				throw new IllegalStateException("No WebApplicationContext found: not in a DispatcherServlet request?")__			}_			webApplicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext)__		}_		return webApplicationContext__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,this,method,is,useful,to,allow,components,outside,the,framework,such,as,jsp,tag,handlers,to,access,the,most,specific,application,context,available,param,request,current,http,request,param,servlet,context,current,servlet,context,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,throws,illegal,state,exception,if,neither,a,servlet,specific,nor,a,global,context,has,been,found;public,static,web,application,context,get,web,application,context,servlet,request,request,servlet,context,servlet,context,throws,illegal,state,exception,web,application,context,web,application,context,web,application,context,request,get,attribute,dispatcher,servlet,if,web,application,context,null,if,servlet,context,null,throw,new,illegal,state,exception,no,web,application,context,found,not,in,a,dispatcher,servlet,request,web,application,context,web,application,context,utils,get,required,web,application,context,servlet,context,return,web,application,context
RequestContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletRequest request) 	    throws IllegalStateException;1328020251;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing._@param request current HTTP request_@return the request-specific web application context_@throws IllegalStateException if no servlet-specific context has been found;public static WebApplicationContext getWebApplicationContext(ServletRequest request)_	    throws IllegalStateException {__		return getWebApplicationContext(request, null)__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,param,request,current,http,request,return,the,request,specific,web,application,context,throws,illegal,state,exception,if,no,servlet,specific,context,has,been,found;public,static,web,application,context,get,web,application,context,servlet,request,request,throws,illegal,state,exception,return,get,web,application,context,request,null
RequestContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletRequest request) 	    throws IllegalStateException;1328092788;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing._@param request current HTTP request_@return the request-specific web application context_@throws IllegalStateException if no servlet-specific context has been found;public static WebApplicationContext getWebApplicationContext(ServletRequest request)_	    throws IllegalStateException {__		return getWebApplicationContext(request, null)__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,param,request,current,http,request,return,the,request,specific,web,application,context,throws,illegal,state,exception,if,no,servlet,specific,context,has,been,found;public,static,web,application,context,get,web,application,context,servlet,request,request,throws,illegal,state,exception,return,get,web,application,context,request,null
RequestContextUtils -> @Nullable 	public static Theme getTheme(HttpServletRequest request);1495868221;Retrieves the current theme from the given request, using the ThemeResolver_and ThemeSource bound to the request by the DispatcherServlet._@param request current HTTP request_@return the current theme, or {@code null} if not found_@see #getThemeResolver;@Nullable_	public static Theme getTheme(HttpServletRequest request) {_		ThemeResolver themeResolver = getThemeResolver(request)__		ThemeSource themeSource = getThemeSource(request)__		if (themeResolver != null && themeSource != null) {_			String themeName = themeResolver.resolveThemeName(request)__			return themeSource.getTheme(themeName)__		}_		else {_			return null__		}_	};retrieves,the,current,theme,from,the,given,request,using,the,theme,resolver,and,theme,source,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,or,code,null,if,not,found,see,get,theme,resolver;nullable,public,static,theme,get,theme,http,servlet,request,request,theme,resolver,theme,resolver,get,theme,resolver,request,theme,source,theme,source,get,theme,source,request,if,theme,resolver,null,theme,source,null,string,theme,name,theme,resolver,resolve,theme,name,request,return,theme,source,get,theme,theme,name,else,return,null
RequestContextUtils -> @Nullable 	public static Theme getTheme(HttpServletRequest request);1496837955;Retrieves the current theme from the given request, using the ThemeResolver_and ThemeSource bound to the request by the DispatcherServlet._@param request current HTTP request_@return the current theme, or {@code null} if not found_@see #getThemeResolver;@Nullable_	public static Theme getTheme(HttpServletRequest request) {_		ThemeResolver themeResolver = getThemeResolver(request)__		ThemeSource themeSource = getThemeSource(request)__		if (themeResolver != null && themeSource != null) {_			String themeName = themeResolver.resolveThemeName(request)__			return themeSource.getTheme(themeName)__		}_		else {_			return null__		}_	};retrieves,the,current,theme,from,the,given,request,using,the,theme,resolver,and,theme,source,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,or,code,null,if,not,found,see,get,theme,resolver;nullable,public,static,theme,get,theme,http,servlet,request,request,theme,resolver,theme,resolver,get,theme,resolver,request,theme,source,theme,source,get,theme,source,request,if,theme,resolver,null,theme,source,null,string,theme,name,theme,resolver,resolve,theme,name,request,return,theme,source,get,theme,theme,name,else,return,null
RequestContextUtils -> @Nullable 	public static Theme getTheme(HttpServletRequest request);1530174524;Retrieves the current theme from the given request, using the ThemeResolver_and ThemeSource bound to the request by the DispatcherServlet._@param request current HTTP request_@return the current theme, or {@code null} if not found_@see #getThemeResolver;@Nullable_	public static Theme getTheme(HttpServletRequest request) {_		ThemeResolver themeResolver = getThemeResolver(request)__		ThemeSource themeSource = getThemeSource(request)__		if (themeResolver != null && themeSource != null) {_			String themeName = themeResolver.resolveThemeName(request)__			return themeSource.getTheme(themeName)__		}_		else {_			return null__		}_	};retrieves,the,current,theme,from,the,given,request,using,the,theme,resolver,and,theme,source,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,or,code,null,if,not,found,see,get,theme,resolver;nullable,public,static,theme,get,theme,http,servlet,request,request,theme,resolver,theme,resolver,get,theme,resolver,request,theme,source,theme,source,get,theme,source,request,if,theme,resolver,null,theme,source,null,string,theme,name,theme,resolver,resolve,theme,name,request,return,theme,source,get,theme,theme,name,else,return,null
RequestContextUtils -> public static ThemeSource getThemeSource(HttpServletRequest request);1328020251;Return the ThemeSource that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeSource;public static ThemeSource getThemeSource(HttpServletRequest request) {_		return (ThemeSource) request.getAttribute(DispatcherServlet.THEME_SOURCE_ATTRIBUTE)__	};return,the,theme,source,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,source;public,static,theme,source,get,theme,source,http,servlet,request,request,return,theme,source,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeSource getThemeSource(HttpServletRequest request);1328092788;Return the ThemeSource that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeSource;public static ThemeSource getThemeSource(HttpServletRequest request) {_		return (ThemeSource) request.getAttribute(DispatcherServlet.THEME_SOURCE_ATTRIBUTE)__	};return,the,theme,source,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,source;public,static,theme,source,get,theme,source,http,servlet,request,request,return,theme,source,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeSource getThemeSource(HttpServletRequest request);1356735495;Return the ThemeSource that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeSource;public static ThemeSource getThemeSource(HttpServletRequest request) {_		return (ThemeSource) request.getAttribute(DispatcherServlet.THEME_SOURCE_ATTRIBUTE)__	};return,the,theme,source,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,source;public,static,theme,source,get,theme,source,http,servlet,request,request,return,theme,source,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeSource getThemeSource(HttpServletRequest request);1380921248;Return the ThemeSource that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeSource;public static ThemeSource getThemeSource(HttpServletRequest request) {_		return (ThemeSource) request.getAttribute(DispatcherServlet.THEME_SOURCE_ATTRIBUTE)__	};return,the,theme,source,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,source;public,static,theme,source,get,theme,source,http,servlet,request,request,return,theme,source,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeSource getThemeSource(HttpServletRequest request);1383655090;Return the ThemeSource that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeSource;public static ThemeSource getThemeSource(HttpServletRequest request) {_		return (ThemeSource) request.getAttribute(DispatcherServlet.THEME_SOURCE_ATTRIBUTE)__	};return,the,theme,source,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,source;public,static,theme,source,get,theme,source,http,servlet,request,request,return,theme,source,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeSource getThemeSource(HttpServletRequest request);1440533787;Return the ThemeSource that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeSource;public static ThemeSource getThemeSource(HttpServletRequest request) {_		return (ThemeSource) request.getAttribute(DispatcherServlet.THEME_SOURCE_ATTRIBUTE)__	};return,the,theme,source,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,source;public,static,theme,source,get,theme,source,http,servlet,request,request,return,theme,source,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeSource getThemeSource(HttpServletRequest request);1461047077;Return the ThemeSource that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeSource;public static ThemeSource getThemeSource(HttpServletRequest request) {_		return (ThemeSource) request.getAttribute(DispatcherServlet.THEME_SOURCE_ATTRIBUTE)__	};return,the,theme,source,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,source;public,static,theme,source,get,theme,source,http,servlet,request,request,return,theme,source,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeSource getThemeSource(HttpServletRequest request);1467726769;Return the ThemeSource that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeSource;public static ThemeSource getThemeSource(HttpServletRequest request) {_		return (ThemeSource) request.getAttribute(DispatcherServlet.THEME_SOURCE_ATTRIBUTE)__	};return,the,theme,source,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,source;public,static,theme,source,get,theme,source,http,servlet,request,request,return,theme,source,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeSource getThemeSource(HttpServletRequest request);1487706257;Return the ThemeSource that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeSource;public static ThemeSource getThemeSource(HttpServletRequest request) {_		return (ThemeSource) request.getAttribute(DispatcherServlet.THEME_SOURCE_ATTRIBUTE)__	};return,the,theme,source,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,source;public,static,theme,source,get,theme,source,http,servlet,request,request,return,theme,source,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeSource getThemeSource(HttpServletRequest request);1495868221;Return the ThemeSource that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeSource;public static ThemeSource getThemeSource(HttpServletRequest request) {_		return (ThemeSource) request.getAttribute(DispatcherServlet.THEME_SOURCE_ATTRIBUTE)__	};return,the,theme,source,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,source;public,static,theme,source,get,theme,source,http,servlet,request,request,return,theme,source,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static void saveOutputFlashMap(String location, HttpServletRequest request, HttpServletResponse response);1496837955;Convenience method that retrieves the {@link #getOutputFlashMap "output"_FlashMap}, updates it with the path and query params of the target URL,_and then saves it using the {@link #getFlashMapManager FlashMapManager}._@param location the target URL for the redirect_@param request the current request_@param response the current response_@since 5.0;public static void saveOutputFlashMap(String location, HttpServletRequest request, HttpServletResponse response) {_		FlashMap flashMap = getOutputFlashMap(request)__		if (CollectionUtils.isEmpty(flashMap)) {_			return__		}__		UriComponents uriComponents = UriComponentsBuilder.fromUriString(location).build()__		flashMap.setTargetRequestPath(uriComponents.getPath())__		flashMap.addTargetRequestParams(uriComponents.getQueryParams())___		FlashMapManager manager = getFlashMapManager(request)__		Assert.state(manager != null, "No FlashMapManager. Is this a DispatcherServlet handled request?")__		manager.saveOutputFlashMap(flashMap, request, response)__	};convenience,method,that,retrieves,the,link,get,output,flash,map,output,flash,map,updates,it,with,the,path,and,query,params,of,the,target,url,and,then,saves,it,using,the,link,get,flash,map,manager,flash,map,manager,param,location,the,target,url,for,the,redirect,param,request,the,current,request,param,response,the,current,response,since,5,0;public,static,void,save,output,flash,map,string,location,http,servlet,request,request,http,servlet,response,response,flash,map,flash,map,get,output,flash,map,request,if,collection,utils,is,empty,flash,map,return,uri,components,uri,components,uri,components,builder,from,uri,string,location,build,flash,map,set,target,request,path,uri,components,get,path,flash,map,add,target,request,params,uri,components,get,query,params,flash,map,manager,manager,get,flash,map,manager,request,assert,state,manager,null,no,flash,map,manager,is,this,a,dispatcher,servlet,handled,request,manager,save,output,flash,map,flash,map,request,response
RequestContextUtils -> public static void saveOutputFlashMap(String location, HttpServletRequest request, HttpServletResponse response);1530174524;Convenience method that retrieves the {@link #getOutputFlashMap "output"_FlashMap}, updates it with the path and query params of the target URL,_and then saves it using the {@link #getFlashMapManager FlashMapManager}._@param location the target URL for the redirect_@param request the current request_@param response the current response_@since 5.0;public static void saveOutputFlashMap(String location, HttpServletRequest request, HttpServletResponse response) {_		FlashMap flashMap = getOutputFlashMap(request)__		if (CollectionUtils.isEmpty(flashMap)) {_			return__		}__		UriComponents uriComponents = UriComponentsBuilder.fromUriString(location).build()__		flashMap.setTargetRequestPath(uriComponents.getPath())__		flashMap.addTargetRequestParams(uriComponents.getQueryParams())___		FlashMapManager manager = getFlashMapManager(request)__		Assert.state(manager != null, "No FlashMapManager. Is this a DispatcherServlet handled request?")__		manager.saveOutputFlashMap(flashMap, request, response)__	};convenience,method,that,retrieves,the,link,get,output,flash,map,output,flash,map,updates,it,with,the,path,and,query,params,of,the,target,url,and,then,saves,it,using,the,link,get,flash,map,manager,flash,map,manager,param,location,the,target,url,for,the,redirect,param,request,the,current,request,param,response,the,current,response,since,5,0;public,static,void,save,output,flash,map,string,location,http,servlet,request,request,http,servlet,response,response,flash,map,flash,map,get,output,flash,map,request,if,collection,utils,is,empty,flash,map,return,uri,components,uri,components,uri,components,builder,from,uri,string,location,build,flash,map,set,target,request,path,uri,components,get,path,flash,map,add,target,request,params,uri,components,get,query,params,flash,map,manager,manager,get,flash,map,manager,request,assert,state,manager,null,no,flash,map,manager,is,this,a,dispatcher,servlet,handled,request,manager,save,output,flash,map,flash,map,request,response
RequestContextUtils -> public static Locale getLocale(HttpServletRequest request);1328020251;Retrieves the current locale from the given request,_using the LocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the request's accept-header Locale._@param request current HTTP request_@return the current locale, either from the LocaleResolver or from_the plain request_@see #getLocaleResolver_@see javax.servlet.http.HttpServletRequest#getLocale();public static Locale getLocale(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		if (localeResolver != null) {_			return localeResolver.resolveLocale(request)__		}_		else {_			return request.getLocale()__		}_	};retrieves,the,current,locale,from,the,given,request,using,the,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,request,s,accept,header,locale,param,request,current,http,request,return,the,current,locale,either,from,the,locale,resolver,or,from,the,plain,request,see,get,locale,resolver,see,javax,servlet,http,http,servlet,request,get,locale;public,static,locale,get,locale,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,if,locale,resolver,null,return,locale,resolver,resolve,locale,request,else,return,request,get,locale
RequestContextUtils -> public static Locale getLocale(HttpServletRequest request);1328092788;Retrieves the current locale from the given request,_using the LocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the request's accept-header Locale._@param request current HTTP request_@return the current locale, either from the LocaleResolver or from_the plain request_@see #getLocaleResolver_@see javax.servlet.http.HttpServletRequest#getLocale();public static Locale getLocale(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		if (localeResolver != null) {_			return localeResolver.resolveLocale(request)__		}_		else {_			return request.getLocale()__		}_	};retrieves,the,current,locale,from,the,given,request,using,the,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,request,s,accept,header,locale,param,request,current,http,request,return,the,current,locale,either,from,the,locale,resolver,or,from,the,plain,request,see,get,locale,resolver,see,javax,servlet,http,http,servlet,request,get,locale;public,static,locale,get,locale,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,if,locale,resolver,null,return,locale,resolver,resolve,locale,request,else,return,request,get,locale
RequestContextUtils -> public static Locale getLocale(HttpServletRequest request);1356735495;Retrieves the current locale from the given request,_using the LocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the request's accept-header Locale._@param request current HTTP request_@return the current locale, either from the LocaleResolver or from_the plain request_@see #getLocaleResolver_@see javax.servlet.http.HttpServletRequest#getLocale();public static Locale getLocale(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		if (localeResolver != null) {_			return localeResolver.resolveLocale(request)__		}_		else {_			return request.getLocale()__		}_	};retrieves,the,current,locale,from,the,given,request,using,the,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,request,s,accept,header,locale,param,request,current,http,request,return,the,current,locale,either,from,the,locale,resolver,or,from,the,plain,request,see,get,locale,resolver,see,javax,servlet,http,http,servlet,request,get,locale;public,static,locale,get,locale,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,if,locale,resolver,null,return,locale,resolver,resolve,locale,request,else,return,request,get,locale
RequestContextUtils -> public static Locale getLocale(HttpServletRequest request);1380921248;Retrieve the current locale from the given request, using the_LocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the request's accept-header Locale._<p>This method serves as a straightforward alternative to the standard_Servlet {@link javax.servlet.http.HttpServletRequest#getLocale()} method,_falling back to the latter if no more specific locale has been found._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getLocale()}_which will normally be populated with the same Locale._@param request current HTTP request_@return the current locale for the given request, either from the_LocaleResolver or from the plain request itself_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getLocale();public static Locale getLocale(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		return (localeResolver != null ? localeResolver.resolveLocale(request) : request.getLocale())__	};retrieve,the,current,locale,from,the,given,request,using,the,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,request,s,accept,header,locale,p,this,method,serves,as,a,straightforward,alternative,to,the,standard,servlet,link,javax,servlet,http,http,servlet,request,get,locale,method,falling,back,to,the,latter,if,no,more,specific,locale,has,been,found,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,locale,which,will,normally,be,populated,with,the,same,locale,param,request,current,http,request,return,the,current,locale,for,the,given,request,either,from,the,locale,resolver,or,from,the,plain,request,itself,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,locale;public,static,locale,get,locale,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,return,locale,resolver,null,locale,resolver,resolve,locale,request,request,get,locale
RequestContextUtils -> public static Locale getLocale(HttpServletRequest request);1383655090;Retrieve the current locale from the given request, using the_LocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the request's accept-header Locale._<p>This method serves as a straightforward alternative to the standard_Servlet {@link javax.servlet.http.HttpServletRequest#getLocale()} method,_falling back to the latter if no more specific locale has been found._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getLocale()}_which will normally be populated with the same Locale._@param request current HTTP request_@return the current locale for the given request, either from the_LocaleResolver or from the plain request itself_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getLocale();public static Locale getLocale(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		return (localeResolver != null ? localeResolver.resolveLocale(request) : request.getLocale())__	};retrieve,the,current,locale,from,the,given,request,using,the,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,request,s,accept,header,locale,p,this,method,serves,as,a,straightforward,alternative,to,the,standard,servlet,link,javax,servlet,http,http,servlet,request,get,locale,method,falling,back,to,the,latter,if,no,more,specific,locale,has,been,found,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,locale,which,will,normally,be,populated,with,the,same,locale,param,request,current,http,request,return,the,current,locale,for,the,given,request,either,from,the,locale,resolver,or,from,the,plain,request,itself,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,locale;public,static,locale,get,locale,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,return,locale,resolver,null,locale,resolver,resolve,locale,request,request,get,locale
RequestContextUtils -> public static Locale getLocale(HttpServletRequest request);1440533787;Retrieve the current locale from the given request, using the_LocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the request's accept-header Locale._<p>This method serves as a straightforward alternative to the standard_Servlet {@link javax.servlet.http.HttpServletRequest#getLocale()} method,_falling back to the latter if no more specific locale has been found._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getLocale()}_which will normally be populated with the same Locale._@param request current HTTP request_@return the current locale for the given request, either from the_LocaleResolver or from the plain request itself_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getLocale();public static Locale getLocale(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		return (localeResolver != null ? localeResolver.resolveLocale(request) : request.getLocale())__	};retrieve,the,current,locale,from,the,given,request,using,the,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,request,s,accept,header,locale,p,this,method,serves,as,a,straightforward,alternative,to,the,standard,servlet,link,javax,servlet,http,http,servlet,request,get,locale,method,falling,back,to,the,latter,if,no,more,specific,locale,has,been,found,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,locale,which,will,normally,be,populated,with,the,same,locale,param,request,current,http,request,return,the,current,locale,for,the,given,request,either,from,the,locale,resolver,or,from,the,plain,request,itself,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,locale;public,static,locale,get,locale,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,return,locale,resolver,null,locale,resolver,resolve,locale,request,request,get,locale
RequestContextUtils -> public static Locale getLocale(HttpServletRequest request);1461047077;Retrieve the current locale from the given request, using the_LocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the request's accept-header Locale._<p>This method serves as a straightforward alternative to the standard_Servlet {@link javax.servlet.http.HttpServletRequest#getLocale()} method,_falling back to the latter if no more specific locale has been found._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getLocale()}_which will normally be populated with the same Locale._@param request current HTTP request_@return the current locale for the given request, either from the_LocaleResolver or from the plain request itself_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getLocale();public static Locale getLocale(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		return (localeResolver != null ? localeResolver.resolveLocale(request) : request.getLocale())__	};retrieve,the,current,locale,from,the,given,request,using,the,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,request,s,accept,header,locale,p,this,method,serves,as,a,straightforward,alternative,to,the,standard,servlet,link,javax,servlet,http,http,servlet,request,get,locale,method,falling,back,to,the,latter,if,no,more,specific,locale,has,been,found,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,locale,which,will,normally,be,populated,with,the,same,locale,param,request,current,http,request,return,the,current,locale,for,the,given,request,either,from,the,locale,resolver,or,from,the,plain,request,itself,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,locale;public,static,locale,get,locale,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,return,locale,resolver,null,locale,resolver,resolve,locale,request,request,get,locale
RequestContextUtils -> public static Locale getLocale(HttpServletRequest request);1467726769;Retrieve the current locale from the given request, using the_LocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the request's accept-header Locale._<p>This method serves as a straightforward alternative to the standard_Servlet {@link javax.servlet.http.HttpServletRequest#getLocale()} method,_falling back to the latter if no more specific locale has been found._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getLocale()}_which will normally be populated with the same Locale._@param request current HTTP request_@return the current locale for the given request, either from the_LocaleResolver or from the plain request itself_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getLocale();public static Locale getLocale(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		return (localeResolver != null ? localeResolver.resolveLocale(request) : request.getLocale())__	};retrieve,the,current,locale,from,the,given,request,using,the,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,request,s,accept,header,locale,p,this,method,serves,as,a,straightforward,alternative,to,the,standard,servlet,link,javax,servlet,http,http,servlet,request,get,locale,method,falling,back,to,the,latter,if,no,more,specific,locale,has,been,found,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,locale,which,will,normally,be,populated,with,the,same,locale,param,request,current,http,request,return,the,current,locale,for,the,given,request,either,from,the,locale,resolver,or,from,the,plain,request,itself,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,locale;public,static,locale,get,locale,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,return,locale,resolver,null,locale,resolver,resolve,locale,request,request,get,locale
RequestContextUtils -> public static Locale getLocale(HttpServletRequest request);1487706257;Retrieve the current locale from the given request, using the_LocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the request's accept-header Locale._<p>This method serves as a straightforward alternative to the standard_Servlet {@link javax.servlet.http.HttpServletRequest#getLocale()} method,_falling back to the latter if no more specific locale has been found._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getLocale()}_which will normally be populated with the same Locale._@param request current HTTP request_@return the current locale for the given request, either from the_LocaleResolver or from the plain request itself_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getLocale();public static Locale getLocale(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		return (localeResolver != null ? localeResolver.resolveLocale(request) : request.getLocale())__	};retrieve,the,current,locale,from,the,given,request,using,the,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,request,s,accept,header,locale,p,this,method,serves,as,a,straightforward,alternative,to,the,standard,servlet,link,javax,servlet,http,http,servlet,request,get,locale,method,falling,back,to,the,latter,if,no,more,specific,locale,has,been,found,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,locale,which,will,normally,be,populated,with,the,same,locale,param,request,current,http,request,return,the,current,locale,for,the,given,request,either,from,the,locale,resolver,or,from,the,plain,request,itself,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,locale;public,static,locale,get,locale,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,return,locale,resolver,null,locale,resolver,resolve,locale,request,request,get,locale
RequestContextUtils -> public static Locale getLocale(HttpServletRequest request);1495868221;Retrieve the current locale from the given request, using the_LocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the request's accept-header Locale._<p>This method serves as a straightforward alternative to the standard_Servlet {@link javax.servlet.http.HttpServletRequest#getLocale()} method,_falling back to the latter if no more specific locale has been found._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getLocale()}_which will normally be populated with the same Locale._@param request current HTTP request_@return the current locale for the given request, either from the_LocaleResolver or from the plain request itself_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getLocale();public static Locale getLocale(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		return (localeResolver != null ? localeResolver.resolveLocale(request) : request.getLocale())__	};retrieve,the,current,locale,from,the,given,request,using,the,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,request,s,accept,header,locale,p,this,method,serves,as,a,straightforward,alternative,to,the,standard,servlet,link,javax,servlet,http,http,servlet,request,get,locale,method,falling,back,to,the,latter,if,no,more,specific,locale,has,been,found,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,locale,which,will,normally,be,populated,with,the,same,locale,param,request,current,http,request,return,the,current,locale,for,the,given,request,either,from,the,locale,resolver,or,from,the,plain,request,itself,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,locale;public,static,locale,get,locale,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,return,locale,resolver,null,locale,resolver,resolve,locale,request,request,get,locale
RequestContextUtils -> public static Locale getLocale(HttpServletRequest request);1496837955;Retrieve the current locale from the given request, using the_LocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the request's accept-header Locale._<p>This method serves as a straightforward alternative to the standard_Servlet {@link javax.servlet.http.HttpServletRequest#getLocale()} method,_falling back to the latter if no more specific locale has been found._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getLocale()}_which will normally be populated with the same Locale._@param request current HTTP request_@return the current locale for the given request, either from the_LocaleResolver or from the plain request itself_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getLocale();public static Locale getLocale(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		return (localeResolver != null ? localeResolver.resolveLocale(request) : request.getLocale())__	};retrieve,the,current,locale,from,the,given,request,using,the,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,request,s,accept,header,locale,p,this,method,serves,as,a,straightforward,alternative,to,the,standard,servlet,link,javax,servlet,http,http,servlet,request,get,locale,method,falling,back,to,the,latter,if,no,more,specific,locale,has,been,found,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,locale,which,will,normally,be,populated,with,the,same,locale,param,request,current,http,request,return,the,current,locale,for,the,given,request,either,from,the,locale,resolver,or,from,the,plain,request,itself,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,locale;public,static,locale,get,locale,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,return,locale,resolver,null,locale,resolver,resolve,locale,request,request,get,locale
RequestContextUtils -> public static Locale getLocale(HttpServletRequest request);1530174524;Retrieve the current locale from the given request, using the_LocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the request's accept-header Locale._<p>This method serves as a straightforward alternative to the standard_Servlet {@link javax.servlet.http.HttpServletRequest#getLocale()} method,_falling back to the latter if no more specific locale has been found._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getLocale()}_which will normally be populated with the same Locale._@param request current HTTP request_@return the current locale for the given request, either from the_LocaleResolver or from the plain request itself_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getLocale();public static Locale getLocale(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		return (localeResolver != null ? localeResolver.resolveLocale(request) : request.getLocale())__	};retrieve,the,current,locale,from,the,given,request,using,the,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,request,s,accept,header,locale,p,this,method,serves,as,a,straightforward,alternative,to,the,standard,servlet,link,javax,servlet,http,http,servlet,request,get,locale,method,falling,back,to,the,latter,if,no,more,specific,locale,has,been,found,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,locale,which,will,normally,be,populated,with,the,same,locale,param,request,current,http,request,return,the,current,locale,for,the,given,request,either,from,the,locale,resolver,or,from,the,plain,request,itself,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,locale;public,static,locale,get,locale,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,return,locale,resolver,null,locale,resolver,resolve,locale,request,request,get,locale
RequestContextUtils -> public static TimeZone getTimeZone(HttpServletRequest request);1380921248;Retrieve the current time zone from the given request, using the_TimeZoneAwareLocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the system's default time zone._<p>Note: This method returns {@code null} if no specific time zone can be_resolved for the given request. This is in contrast to {@link #getLocale}_where there is always the request's accept-header locale to fall back to._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getTimeZone()}_which will normally be populated with the same TimeZone: That method only_differs in terms of its fallback to the system time zone if the LocaleResolver_hasn't provided provided a specific time zone (instead of this method's {@code null})._@param request current HTTP request_@return the current time zone for the given request, either from the_TimeZoneAwareLocaleResolver or {@code null} if none associated_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getTimeZone();public static TimeZone getTimeZone(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		if (localeResolver instanceof LocaleContextResolver) {_			LocaleContext localeContext = ((LocaleContextResolver) localeResolver).resolveLocaleContext(request)__			if (localeContext instanceof TimeZoneAwareLocaleContext) {_				return ((TimeZoneAwareLocaleContext) localeContext).getTimeZone()__			}_		}_		return null__	};retrieve,the,current,time,zone,from,the,given,request,using,the,time,zone,aware,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,system,s,default,time,zone,p,note,this,method,returns,code,null,if,no,specific,time,zone,can,be,resolved,for,the,given,request,this,is,in,contrast,to,link,get,locale,where,there,is,always,the,request,s,accept,header,locale,to,fall,back,to,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,time,zone,which,will,normally,be,populated,with,the,same,time,zone,that,method,only,differs,in,terms,of,its,fallback,to,the,system,time,zone,if,the,locale,resolver,hasn,t,provided,provided,a,specific,time,zone,instead,of,this,method,s,code,null,param,request,current,http,request,return,the,current,time,zone,for,the,given,request,either,from,the,time,zone,aware,locale,resolver,or,code,null,if,none,associated,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,time,zone;public,static,time,zone,get,time,zone,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,if,locale,resolver,instanceof,locale,context,resolver,locale,context,locale,context,locale,context,resolver,locale,resolver,resolve,locale,context,request,if,locale,context,instanceof,time,zone,aware,locale,context,return,time,zone,aware,locale,context,locale,context,get,time,zone,return,null
RequestContextUtils -> public static TimeZone getTimeZone(HttpServletRequest request);1383655090;Retrieve the current time zone from the given request, using the_TimeZoneAwareLocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the system's default time zone._<p>Note: This method returns {@code null} if no specific time zone can be_resolved for the given request. This is in contrast to {@link #getLocale}_where there is always the request's accept-header locale to fall back to._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getTimeZone()}_which will normally be populated with the same TimeZone: That method only_differs in terms of its fallback to the system time zone if the LocaleResolver_hasn't provided provided a specific time zone (instead of this method's {@code null})._@param request current HTTP request_@return the current time zone for the given request, either from the_TimeZoneAwareLocaleResolver or {@code null} if none associated_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getTimeZone();public static TimeZone getTimeZone(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		if (localeResolver instanceof LocaleContextResolver) {_			LocaleContext localeContext = ((LocaleContextResolver) localeResolver).resolveLocaleContext(request)__			if (localeContext instanceof TimeZoneAwareLocaleContext) {_				return ((TimeZoneAwareLocaleContext) localeContext).getTimeZone()__			}_		}_		return null__	};retrieve,the,current,time,zone,from,the,given,request,using,the,time,zone,aware,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,system,s,default,time,zone,p,note,this,method,returns,code,null,if,no,specific,time,zone,can,be,resolved,for,the,given,request,this,is,in,contrast,to,link,get,locale,where,there,is,always,the,request,s,accept,header,locale,to,fall,back,to,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,time,zone,which,will,normally,be,populated,with,the,same,time,zone,that,method,only,differs,in,terms,of,its,fallback,to,the,system,time,zone,if,the,locale,resolver,hasn,t,provided,provided,a,specific,time,zone,instead,of,this,method,s,code,null,param,request,current,http,request,return,the,current,time,zone,for,the,given,request,either,from,the,time,zone,aware,locale,resolver,or,code,null,if,none,associated,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,time,zone;public,static,time,zone,get,time,zone,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,if,locale,resolver,instanceof,locale,context,resolver,locale,context,locale,context,locale,context,resolver,locale,resolver,resolve,locale,context,request,if,locale,context,instanceof,time,zone,aware,locale,context,return,time,zone,aware,locale,context,locale,context,get,time,zone,return,null
RequestContextUtils -> public static TimeZone getTimeZone(HttpServletRequest request);1440533787;Retrieve the current time zone from the given request, using the_TimeZoneAwareLocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the system's default time zone._<p>Note: This method returns {@code null} if no specific time zone can be_resolved for the given request. This is in contrast to {@link #getLocale}_where there is always the request's accept-header locale to fall back to._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getTimeZone()}_which will normally be populated with the same TimeZone: That method only_differs in terms of its fallback to the system time zone if the LocaleResolver_hasn't provided provided a specific time zone (instead of this method's {@code null})._@param request current HTTP request_@return the current time zone for the given request, either from the_TimeZoneAwareLocaleResolver or {@code null} if none associated_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getTimeZone();public static TimeZone getTimeZone(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		if (localeResolver instanceof LocaleContextResolver) {_			LocaleContext localeContext = ((LocaleContextResolver) localeResolver).resolveLocaleContext(request)__			if (localeContext instanceof TimeZoneAwareLocaleContext) {_				return ((TimeZoneAwareLocaleContext) localeContext).getTimeZone()__			}_		}_		return null__	};retrieve,the,current,time,zone,from,the,given,request,using,the,time,zone,aware,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,system,s,default,time,zone,p,note,this,method,returns,code,null,if,no,specific,time,zone,can,be,resolved,for,the,given,request,this,is,in,contrast,to,link,get,locale,where,there,is,always,the,request,s,accept,header,locale,to,fall,back,to,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,time,zone,which,will,normally,be,populated,with,the,same,time,zone,that,method,only,differs,in,terms,of,its,fallback,to,the,system,time,zone,if,the,locale,resolver,hasn,t,provided,provided,a,specific,time,zone,instead,of,this,method,s,code,null,param,request,current,http,request,return,the,current,time,zone,for,the,given,request,either,from,the,time,zone,aware,locale,resolver,or,code,null,if,none,associated,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,time,zone;public,static,time,zone,get,time,zone,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,if,locale,resolver,instanceof,locale,context,resolver,locale,context,locale,context,locale,context,resolver,locale,resolver,resolve,locale,context,request,if,locale,context,instanceof,time,zone,aware,locale,context,return,time,zone,aware,locale,context,locale,context,get,time,zone,return,null
RequestContextUtils -> public static TimeZone getTimeZone(HttpServletRequest request);1461047077;Retrieve the current time zone from the given request, using the_TimeZoneAwareLocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the system's default time zone._<p>Note: This method returns {@code null} if no specific time zone can be_resolved for the given request. This is in contrast to {@link #getLocale}_where there is always the request's accept-header locale to fall back to._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getTimeZone()}_which will normally be populated with the same TimeZone: That method only_differs in terms of its fallback to the system time zone if the LocaleResolver_hasn't provided a specific time zone (instead of this method's {@code null})._@param request current HTTP request_@return the current time zone for the given request, either from the_TimeZoneAwareLocaleResolver or {@code null} if none associated_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getTimeZone();public static TimeZone getTimeZone(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		if (localeResolver instanceof LocaleContextResolver) {_			LocaleContext localeContext = ((LocaleContextResolver) localeResolver).resolveLocaleContext(request)__			if (localeContext instanceof TimeZoneAwareLocaleContext) {_				return ((TimeZoneAwareLocaleContext) localeContext).getTimeZone()__			}_		}_		return null__	};retrieve,the,current,time,zone,from,the,given,request,using,the,time,zone,aware,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,system,s,default,time,zone,p,note,this,method,returns,code,null,if,no,specific,time,zone,can,be,resolved,for,the,given,request,this,is,in,contrast,to,link,get,locale,where,there,is,always,the,request,s,accept,header,locale,to,fall,back,to,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,time,zone,which,will,normally,be,populated,with,the,same,time,zone,that,method,only,differs,in,terms,of,its,fallback,to,the,system,time,zone,if,the,locale,resolver,hasn,t,provided,a,specific,time,zone,instead,of,this,method,s,code,null,param,request,current,http,request,return,the,current,time,zone,for,the,given,request,either,from,the,time,zone,aware,locale,resolver,or,code,null,if,none,associated,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,time,zone;public,static,time,zone,get,time,zone,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,if,locale,resolver,instanceof,locale,context,resolver,locale,context,locale,context,locale,context,resolver,locale,resolver,resolve,locale,context,request,if,locale,context,instanceof,time,zone,aware,locale,context,return,time,zone,aware,locale,context,locale,context,get,time,zone,return,null
RequestContextUtils -> public static TimeZone getTimeZone(HttpServletRequest request);1467726769;Retrieve the current time zone from the given request, using the_TimeZoneAwareLocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the system's default time zone._<p>Note: This method returns {@code null} if no specific time zone can be_resolved for the given request. This is in contrast to {@link #getLocale}_where there is always the request's accept-header locale to fall back to._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getTimeZone()}_which will normally be populated with the same TimeZone: That method only_differs in terms of its fallback to the system time zone if the LocaleResolver_hasn't provided a specific time zone (instead of this method's {@code null})._@param request current HTTP request_@return the current time zone for the given request, either from the_TimeZoneAwareLocaleResolver or {@code null} if none associated_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getTimeZone();public static TimeZone getTimeZone(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		if (localeResolver instanceof LocaleContextResolver) {_			LocaleContext localeContext = ((LocaleContextResolver) localeResolver).resolveLocaleContext(request)__			if (localeContext instanceof TimeZoneAwareLocaleContext) {_				return ((TimeZoneAwareLocaleContext) localeContext).getTimeZone()__			}_		}_		return null__	};retrieve,the,current,time,zone,from,the,given,request,using,the,time,zone,aware,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,system,s,default,time,zone,p,note,this,method,returns,code,null,if,no,specific,time,zone,can,be,resolved,for,the,given,request,this,is,in,contrast,to,link,get,locale,where,there,is,always,the,request,s,accept,header,locale,to,fall,back,to,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,time,zone,which,will,normally,be,populated,with,the,same,time,zone,that,method,only,differs,in,terms,of,its,fallback,to,the,system,time,zone,if,the,locale,resolver,hasn,t,provided,a,specific,time,zone,instead,of,this,method,s,code,null,param,request,current,http,request,return,the,current,time,zone,for,the,given,request,either,from,the,time,zone,aware,locale,resolver,or,code,null,if,none,associated,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,time,zone;public,static,time,zone,get,time,zone,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,if,locale,resolver,instanceof,locale,context,resolver,locale,context,locale,context,locale,context,resolver,locale,resolver,resolve,locale,context,request,if,locale,context,instanceof,time,zone,aware,locale,context,return,time,zone,aware,locale,context,locale,context,get,time,zone,return,null
RequestContextUtils -> public static TimeZone getTimeZone(HttpServletRequest request);1487706257;Retrieve the current time zone from the given request, using the_TimeZoneAwareLocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the system's default time zone._<p>Note: This method returns {@code null} if no specific time zone can be_resolved for the given request. This is in contrast to {@link #getLocale}_where there is always the request's accept-header locale to fall back to._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getTimeZone()}_which will normally be populated with the same TimeZone: That method only_differs in terms of its fallback to the system time zone if the LocaleResolver_hasn't provided a specific time zone (instead of this method's {@code null})._@param request current HTTP request_@return the current time zone for the given request, either from the_TimeZoneAwareLocaleResolver or {@code null} if none associated_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getTimeZone();public static TimeZone getTimeZone(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		if (localeResolver instanceof LocaleContextResolver) {_			LocaleContext localeContext = ((LocaleContextResolver) localeResolver).resolveLocaleContext(request)__			if (localeContext instanceof TimeZoneAwareLocaleContext) {_				return ((TimeZoneAwareLocaleContext) localeContext).getTimeZone()__			}_		}_		return null__	};retrieve,the,current,time,zone,from,the,given,request,using,the,time,zone,aware,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,system,s,default,time,zone,p,note,this,method,returns,code,null,if,no,specific,time,zone,can,be,resolved,for,the,given,request,this,is,in,contrast,to,link,get,locale,where,there,is,always,the,request,s,accept,header,locale,to,fall,back,to,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,time,zone,which,will,normally,be,populated,with,the,same,time,zone,that,method,only,differs,in,terms,of,its,fallback,to,the,system,time,zone,if,the,locale,resolver,hasn,t,provided,a,specific,time,zone,instead,of,this,method,s,code,null,param,request,current,http,request,return,the,current,time,zone,for,the,given,request,either,from,the,time,zone,aware,locale,resolver,or,code,null,if,none,associated,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,time,zone;public,static,time,zone,get,time,zone,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,if,locale,resolver,instanceof,locale,context,resolver,locale,context,locale,context,locale,context,resolver,locale,resolver,resolve,locale,context,request,if,locale,context,instanceof,time,zone,aware,locale,context,return,time,zone,aware,locale,context,locale,context,get,time,zone,return,null
RequestContextUtils -> @Nullable 	public static WebApplicationContext findWebApplicationContext(HttpServletRequest request);1495868221;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. The global context will_be found via the ServletContext or via ContextLoader's current context._<p>NOTE: This variant requires Servlet 3.0+ and is generally recommended_for forward-looking custom user code._@param request current HTTP request_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found, or {@code null} if none_@since 4.2.1_@see #findWebApplicationContext(HttpServletRequest, ServletContext)_@see ServletRequest#getServletContext()_@see ContextLoader#getCurrentWebApplicationContext();@Nullable_	public static WebApplicationContext findWebApplicationContext(HttpServletRequest request) {_		return findWebApplicationContext(request, request.getServletContext())__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,the,global,context,will,be,found,via,the,servlet,context,or,via,context,loader,s,current,context,p,note,this,variant,requires,servlet,3,0,and,is,generally,recommended,for,forward,looking,custom,user,code,param,request,current,http,request,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,or,code,null,if,none,since,4,2,1,see,find,web,application,context,http,servlet,request,servlet,context,see,servlet,request,get,servlet,context,see,context,loader,get,current,web,application,context;nullable,public,static,web,application,context,find,web,application,context,http,servlet,request,request,return,find,web,application,context,request,request,get,servlet,context
RequestContextUtils -> @Nullable 	public static WebApplicationContext findWebApplicationContext(HttpServletRequest request);1496837955;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. The global context will_be found via the ServletContext or via ContextLoader's current context._<p>NOTE: This variant requires Servlet 3.0+ and is generally recommended_for forward-looking custom user code._@param request current HTTP request_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found, or {@code null} if none_@since 4.2.1_@see #findWebApplicationContext(HttpServletRequest, ServletContext)_@see ServletRequest#getServletContext()_@see ContextLoader#getCurrentWebApplicationContext();@Nullable_	public static WebApplicationContext findWebApplicationContext(HttpServletRequest request) {_		return findWebApplicationContext(request, request.getServletContext())__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,the,global,context,will,be,found,via,the,servlet,context,or,via,context,loader,s,current,context,p,note,this,variant,requires,servlet,3,0,and,is,generally,recommended,for,forward,looking,custom,user,code,param,request,current,http,request,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,or,code,null,if,none,since,4,2,1,see,find,web,application,context,http,servlet,request,servlet,context,see,servlet,request,get,servlet,context,see,context,loader,get,current,web,application,context;nullable,public,static,web,application,context,find,web,application,context,http,servlet,request,request,return,find,web,application,context,request,request,get,servlet,context
RequestContextUtils -> @Nullable 	public static WebApplicationContext findWebApplicationContext(HttpServletRequest request);1530174524;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. The global context will_be found via the ServletContext or via ContextLoader's current context._<p>NOTE: This variant requires Servlet 3.0+ and is generally recommended_for forward-looking custom user code._@param request current HTTP request_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found, or {@code null} if none_@since 4.2.1_@see #findWebApplicationContext(HttpServletRequest, ServletContext)_@see ServletRequest#getServletContext()_@see ContextLoader#getCurrentWebApplicationContext();@Nullable_	public static WebApplicationContext findWebApplicationContext(HttpServletRequest request) {_		return findWebApplicationContext(request, request.getServletContext())__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,the,global,context,will,be,found,via,the,servlet,context,or,via,context,loader,s,current,context,p,note,this,variant,requires,servlet,3,0,and,is,generally,recommended,for,forward,looking,custom,user,code,param,request,current,http,request,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,or,code,null,if,none,since,4,2,1,see,find,web,application,context,http,servlet,request,servlet,context,see,servlet,request,get,servlet,context,see,context,loader,get,current,web,application,context;nullable,public,static,web,application,context,find,web,application,context,http,servlet,request,request,return,find,web,application,context,request,request,get,servlet,context
RequestContextUtils -> @SuppressWarnings("unchecked") 	public static Map<String, ?> getInputFlashMap(HttpServletRequest request);1328020251;Return a read-only {@link Map} with "input" flash attributes saved on a_previous request._@param request the current request_@return a read-only Map, or {@code null}_@see FlashMap;@SuppressWarnings("unchecked")_	public static Map<String, ?> getInputFlashMap(HttpServletRequest request) {_		return (Map<String, ?>) request.getAttribute(FlashMapManager.INPUT_FLASH_MAP_ATTRIBUTE)__	};return,a,read,only,link,map,with,input,flash,attributes,saved,on,a,previous,request,param,request,the,current,request,return,a,read,only,map,or,code,null,see,flash,map;suppress,warnings,unchecked,public,static,map,string,get,input,flash,map,http,servlet,request,request,return,map,string,request,get,attribute,flash,map,manager
RequestContextUtils -> @SuppressWarnings("unchecked") 	public static Map<String, ?> getInputFlashMap(HttpServletRequest request);1328092788;Return a read-only {@link Map} with "input" flash attributes saved on a_previous request._@param request the current request_@return a read-only Map, or {@code null}_@see FlashMap;@SuppressWarnings("unchecked")_	public static Map<String, ?> getInputFlashMap(HttpServletRequest request) {_		return (Map<String, ?>) request.getAttribute(DispatcherServlet.INPUT_FLASH_MAP_ATTRIBUTE)__	};return,a,read,only,link,map,with,input,flash,attributes,saved,on,a,previous,request,param,request,the,current,request,return,a,read,only,map,or,code,null,see,flash,map;suppress,warnings,unchecked,public,static,map,string,get,input,flash,map,http,servlet,request,request,return,map,string,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @SuppressWarnings("unchecked") 	public static Map<String, ?> getInputFlashMap(HttpServletRequest request);1356735495;Return a read-only {@link Map} with "input" flash attributes saved on a_previous request._@param request the current request_@return a read-only Map, or {@code null}_@see FlashMap;@SuppressWarnings("unchecked")_	public static Map<String, ?> getInputFlashMap(HttpServletRequest request) {_		return (Map<String, ?>) request.getAttribute(DispatcherServlet.INPUT_FLASH_MAP_ATTRIBUTE)__	};return,a,read,only,link,map,with,input,flash,attributes,saved,on,a,previous,request,param,request,the,current,request,return,a,read,only,map,or,code,null,see,flash,map;suppress,warnings,unchecked,public,static,map,string,get,input,flash,map,http,servlet,request,request,return,map,string,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @SuppressWarnings("unchecked") 	public static Map<String, ?> getInputFlashMap(HttpServletRequest request);1380921248;Return a read-only {@link Map} with "input" flash attributes saved on a_previous request._@param request the current request_@return a read-only Map, or {@code null}_@see FlashMap;@SuppressWarnings("unchecked")_	public static Map<String, ?> getInputFlashMap(HttpServletRequest request) {_		return (Map<String, ?>) request.getAttribute(DispatcherServlet.INPUT_FLASH_MAP_ATTRIBUTE)__	};return,a,read,only,link,map,with,input,flash,attributes,saved,on,a,previous,request,param,request,the,current,request,return,a,read,only,map,or,code,null,see,flash,map;suppress,warnings,unchecked,public,static,map,string,get,input,flash,map,http,servlet,request,request,return,map,string,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @SuppressWarnings("unchecked") 	public static Map<String, ?> getInputFlashMap(HttpServletRequest request);1383655090;Return a read-only {@link Map} with "input" flash attributes saved on a_previous request._@param request the current request_@return a read-only Map, or {@code null} if not found_@see FlashMap;@SuppressWarnings("unchecked")_	public static Map<String, ?> getInputFlashMap(HttpServletRequest request) {_		return (Map<String, ?>) request.getAttribute(DispatcherServlet.INPUT_FLASH_MAP_ATTRIBUTE)__	};return,a,read,only,link,map,with,input,flash,attributes,saved,on,a,previous,request,param,request,the,current,request,return,a,read,only,map,or,code,null,if,not,found,see,flash,map;suppress,warnings,unchecked,public,static,map,string,get,input,flash,map,http,servlet,request,request,return,map,string,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @SuppressWarnings("unchecked") 	public static Map<String, ?> getInputFlashMap(HttpServletRequest request);1440533787;Return a read-only {@link Map} with "input" flash attributes saved on a_previous request._@param request the current request_@return a read-only Map, or {@code null} if not found_@see FlashMap;@SuppressWarnings("unchecked")_	public static Map<String, ?> getInputFlashMap(HttpServletRequest request) {_		return (Map<String, ?>) request.getAttribute(DispatcherServlet.INPUT_FLASH_MAP_ATTRIBUTE)__	};return,a,read,only,link,map,with,input,flash,attributes,saved,on,a,previous,request,param,request,the,current,request,return,a,read,only,map,or,code,null,if,not,found,see,flash,map;suppress,warnings,unchecked,public,static,map,string,get,input,flash,map,http,servlet,request,request,return,map,string,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @SuppressWarnings("unchecked") 	public static Map<String, ?> getInputFlashMap(HttpServletRequest request);1461047077;Return a read-only {@link Map} with "input" flash attributes saved on a_previous request._@param request the current request_@return a read-only Map, or {@code null} if not found_@see FlashMap;@SuppressWarnings("unchecked")_	public static Map<String, ?> getInputFlashMap(HttpServletRequest request) {_		return (Map<String, ?>) request.getAttribute(DispatcherServlet.INPUT_FLASH_MAP_ATTRIBUTE)__	};return,a,read,only,link,map,with,input,flash,attributes,saved,on,a,previous,request,param,request,the,current,request,return,a,read,only,map,or,code,null,if,not,found,see,flash,map;suppress,warnings,unchecked,public,static,map,string,get,input,flash,map,http,servlet,request,request,return,map,string,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @SuppressWarnings("unchecked") 	public static Map<String, ?> getInputFlashMap(HttpServletRequest request);1467726769;Return a read-only {@link Map} with "input" flash attributes saved on a_previous request._@param request the current request_@return a read-only Map, or {@code null} if not found_@see FlashMap;@SuppressWarnings("unchecked")_	public static Map<String, ?> getInputFlashMap(HttpServletRequest request) {_		return (Map<String, ?>) request.getAttribute(DispatcherServlet.INPUT_FLASH_MAP_ATTRIBUTE)__	};return,a,read,only,link,map,with,input,flash,attributes,saved,on,a,previous,request,param,request,the,current,request,return,a,read,only,map,or,code,null,if,not,found,see,flash,map;suppress,warnings,unchecked,public,static,map,string,get,input,flash,map,http,servlet,request,request,return,map,string,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @SuppressWarnings("unchecked") 	public static Map<String, ?> getInputFlashMap(HttpServletRequest request);1487706257;Return read-only "input" flash attributes from request before redirect._@param request current request_@return a read-only Map, or {@code null} if not found_@see FlashMap;@SuppressWarnings("unchecked")_	public static Map<String, ?> getInputFlashMap(HttpServletRequest request) {_		return (Map<String, ?>) request.getAttribute(DispatcherServlet.INPUT_FLASH_MAP_ATTRIBUTE)__	};return,read,only,input,flash,attributes,from,request,before,redirect,param,request,current,request,return,a,read,only,map,or,code,null,if,not,found,see,flash,map;suppress,warnings,unchecked,public,static,map,string,get,input,flash,map,http,servlet,request,request,return,map,string,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletRequest request) 		throws IllegalStateException;1356735495;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing._@param request current HTTP request_@return the request-specific web application context_@throws IllegalStateException if no servlet-specific context has been found;public static WebApplicationContext getWebApplicationContext(ServletRequest request)_		throws IllegalStateException {__		return getWebApplicationContext(request, null)__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,param,request,current,http,request,return,the,request,specific,web,application,context,throws,illegal,state,exception,if,no,servlet,specific,context,has,been,found;public,static,web,application,context,get,web,application,context,servlet,request,request,throws,illegal,state,exception,return,get,web,application,context,request,null
RequestContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletRequest request) 		throws IllegalStateException;1380921248;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing._@param request current HTTP request_@return the request-specific web application context_@throws IllegalStateException if no servlet-specific context has been found;public static WebApplicationContext getWebApplicationContext(ServletRequest request)_		throws IllegalStateException {__		return getWebApplicationContext(request, null)__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,param,request,current,http,request,return,the,request,specific,web,application,context,throws,illegal,state,exception,if,no,servlet,specific,context,has,been,found;public,static,web,application,context,get,web,application,context,servlet,request,request,throws,illegal,state,exception,return,get,web,application,context,request,null
RequestContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletRequest request) 		throws IllegalStateException;1383655090;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing._@param request current HTTP request_@return the request-specific web application context_@throws IllegalStateException if no servlet-specific context has been found;public static WebApplicationContext getWebApplicationContext(ServletRequest request)_		throws IllegalStateException {__		return getWebApplicationContext(request, null)__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,param,request,current,http,request,return,the,request,specific,web,application,context,throws,illegal,state,exception,if,no,servlet,specific,context,has,been,found;public,static,web,application,context,get,web,application,context,servlet,request,request,throws,illegal,state,exception,return,get,web,application,context,request,null
RequestContextUtils -> @Nullable 	public static FlashMapManager getFlashMapManager(HttpServletRequest request);1496837955;Return the {@code FlashMapManager} instance to save flash attributes._<p>As of 5.0 the convenience method {@link #saveOutputFlashMap} may be_used to save the "output" FlashMap._@param request the current request_@return a {@link FlashMapManager} instance, never {@code null} within a_{@code DispatcherServlet}-handled request;@Nullable_	public static FlashMapManager getFlashMapManager(HttpServletRequest request) {_		return (FlashMapManager) request.getAttribute(DispatcherServlet.FLASH_MAP_MANAGER_ATTRIBUTE)__	};return,the,code,flash,map,manager,instance,to,save,flash,attributes,p,as,of,5,0,the,convenience,method,link,save,output,flash,map,may,be,used,to,save,the,output,flash,map,param,request,the,current,request,return,a,link,flash,map,manager,instance,never,code,null,within,a,code,dispatcher,servlet,handled,request;nullable,public,static,flash,map,manager,get,flash,map,manager,http,servlet,request,request,return,flash,map,manager,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @Nullable 	public static FlashMapManager getFlashMapManager(HttpServletRequest request);1530174524;Return the {@code FlashMapManager} instance to save flash attributes._<p>As of 5.0 the convenience method {@link #saveOutputFlashMap} may be_used to save the "output" FlashMap._@param request the current request_@return a {@link FlashMapManager} instance, never {@code null} within a_{@code DispatcherServlet}-handled request;@Nullable_	public static FlashMapManager getFlashMapManager(HttpServletRequest request) {_		return (FlashMapManager) request.getAttribute(DispatcherServlet.FLASH_MAP_MANAGER_ATTRIBUTE)__	};return,the,code,flash,map,manager,instance,to,save,flash,attributes,p,as,of,5,0,the,convenience,method,link,save,output,flash,map,may,be,used,to,save,the,output,flash,map,param,request,the,current,request,return,a,link,flash,map,manager,instance,never,code,null,within,a,code,dispatcher,servlet,handled,request;nullable,public,static,flash,map,manager,get,flash,map,manager,http,servlet,request,request,return,flash,map,manager,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @Deprecated 	public static WebApplicationContext getWebApplicationContext( 			ServletRequest request, ServletContext servletContext) throws IllegalStateException;1440533787;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. This method is useful to_allow components outside the framework, such as JSP tag handlers,_to access the most specific application context available._@param request current HTTP request_@param servletContext current servlet context_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found_@throws IllegalStateException if neither a servlet-specific nor a_global context has been found_@see DispatcherServlet#WEB_APPLICATION_CONTEXT_ATTRIBUTE_@see WebApplicationContextUtils#getRequiredWebApplicationContext(ServletContext)_@deprecated as of Spring 4.2.1, in favor of_{@link #findWebApplicationContext(HttpServletRequest, ServletContext)};@Deprecated_	public static WebApplicationContext getWebApplicationContext(_			ServletRequest request, ServletContext servletContext) throws IllegalStateException {__		WebApplicationContext webApplicationContext = (WebApplicationContext) request.getAttribute(_				DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (webApplicationContext == null) {_			if (servletContext == null) {_				throw new IllegalStateException("No WebApplicationContext found: not in a DispatcherServlet request?")__			}_			webApplicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext)__		}_		return webApplicationContext__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,this,method,is,useful,to,allow,components,outside,the,framework,such,as,jsp,tag,handlers,to,access,the,most,specific,application,context,available,param,request,current,http,request,param,servlet,context,current,servlet,context,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,throws,illegal,state,exception,if,neither,a,servlet,specific,nor,a,global,context,has,been,found,see,dispatcher,servlet,see,web,application,context,utils,get,required,web,application,context,servlet,context,deprecated,as,of,spring,4,2,1,in,favor,of,link,find,web,application,context,http,servlet,request,servlet,context;deprecated,public,static,web,application,context,get,web,application,context,servlet,request,request,servlet,context,servlet,context,throws,illegal,state,exception,web,application,context,web,application,context,web,application,context,request,get,attribute,dispatcher,servlet,if,web,application,context,null,if,servlet,context,null,throw,new,illegal,state,exception,no,web,application,context,found,not,in,a,dispatcher,servlet,request,web,application,context,web,application,context,utils,get,required,web,application,context,servlet,context,return,web,application,context
RequestContextUtils -> @Deprecated 	public static WebApplicationContext getWebApplicationContext( 			ServletRequest request, ServletContext servletContext) throws IllegalStateException;1461047077;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. This method is useful to_allow components outside the framework, such as JSP tag handlers,_to access the most specific application context available._@param request current HTTP request_@param servletContext current servlet context_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found_@throws IllegalStateException if neither a servlet-specific nor a_global context has been found_@see DispatcherServlet#WEB_APPLICATION_CONTEXT_ATTRIBUTE_@see WebApplicationContextUtils#getRequiredWebApplicationContext(ServletContext)_@deprecated as of Spring 4.2.1, in favor of_{@link #findWebApplicationContext(HttpServletRequest, ServletContext)};@Deprecated_	public static WebApplicationContext getWebApplicationContext(_			ServletRequest request, ServletContext servletContext) throws IllegalStateException {__		WebApplicationContext webApplicationContext = (WebApplicationContext) request.getAttribute(_				DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (webApplicationContext == null) {_			if (servletContext == null) {_				throw new IllegalStateException("No WebApplicationContext found: not in a DispatcherServlet request?")__			}_			webApplicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext)__		}_		return webApplicationContext__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,this,method,is,useful,to,allow,components,outside,the,framework,such,as,jsp,tag,handlers,to,access,the,most,specific,application,context,available,param,request,current,http,request,param,servlet,context,current,servlet,context,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,throws,illegal,state,exception,if,neither,a,servlet,specific,nor,a,global,context,has,been,found,see,dispatcher,servlet,see,web,application,context,utils,get,required,web,application,context,servlet,context,deprecated,as,of,spring,4,2,1,in,favor,of,link,find,web,application,context,http,servlet,request,servlet,context;deprecated,public,static,web,application,context,get,web,application,context,servlet,request,request,servlet,context,servlet,context,throws,illegal,state,exception,web,application,context,web,application,context,web,application,context,request,get,attribute,dispatcher,servlet,if,web,application,context,null,if,servlet,context,null,throw,new,illegal,state,exception,no,web,application,context,found,not,in,a,dispatcher,servlet,request,web,application,context,web,application,context,utils,get,required,web,application,context,servlet,context,return,web,application,context
RequestContextUtils -> public static void saveOutputFlashMap(String location, HttpServletRequest request, 			HttpServletResponse response);1487706257;Convenience method that retrieves the {@link #getOutputFlashMap "output"_FlashMap}, updates it with the path and query params of the target URL,_and then saves it using the {@link #getFlashMapManager FlashMapManager}.__@param location the target URL for the redirect_@param request the current request_@param response the current response_@since 5.0;public static void saveOutputFlashMap(String location, HttpServletRequest request,_			HttpServletResponse response) {__		FlashMap flashMap = getOutputFlashMap(request)__		if (CollectionUtils.isEmpty(flashMap)) {_			return__		}__		UriComponents uriComponents = UriComponentsBuilder.fromUriString(location).build()__		flashMap.setTargetRequestPath(uriComponents.getPath())__		flashMap.addTargetRequestParams(uriComponents.getQueryParams())___		FlashMapManager manager = getFlashMapManager(request)__		Assert.state(manager != null, "No FlashMapManager. Is this a DispatcherServlet handled request?")__		manager.saveOutputFlashMap(flashMap, request, response)__	};convenience,method,that,retrieves,the,link,get,output,flash,map,output,flash,map,updates,it,with,the,path,and,query,params,of,the,target,url,and,then,saves,it,using,the,link,get,flash,map,manager,flash,map,manager,param,location,the,target,url,for,the,redirect,param,request,the,current,request,param,response,the,current,response,since,5,0;public,static,void,save,output,flash,map,string,location,http,servlet,request,request,http,servlet,response,response,flash,map,flash,map,get,output,flash,map,request,if,collection,utils,is,empty,flash,map,return,uri,components,uri,components,uri,components,builder,from,uri,string,location,build,flash,map,set,target,request,path,uri,components,get,path,flash,map,add,target,request,params,uri,components,get,query,params,flash,map,manager,manager,get,flash,map,manager,request,assert,state,manager,null,no,flash,map,manager,is,this,a,dispatcher,servlet,handled,request,manager,save,output,flash,map,flash,map,request,response
RequestContextUtils -> public static void saveOutputFlashMap(String location, HttpServletRequest request, 			HttpServletResponse response);1495868221;Convenience method that retrieves the {@link #getOutputFlashMap "output"_FlashMap}, updates it with the path and query params of the target URL,_and then saves it using the {@link #getFlashMapManager FlashMapManager}.__@param location the target URL for the redirect_@param request the current request_@param response the current response_@since 5.0;public static void saveOutputFlashMap(String location, HttpServletRequest request,_			HttpServletResponse response) {__		FlashMap flashMap = getOutputFlashMap(request)__		if (CollectionUtils.isEmpty(flashMap)) {_			return__		}__		UriComponents uriComponents = UriComponentsBuilder.fromUriString(location).build()__		flashMap.setTargetRequestPath(uriComponents.getPath())__		flashMap.addTargetRequestParams(uriComponents.getQueryParams())___		FlashMapManager manager = getFlashMapManager(request)__		Assert.state(manager != null, "No FlashMapManager. Is this a DispatcherServlet handled request?")__		manager.saveOutputFlashMap(flashMap, request, response)__	};convenience,method,that,retrieves,the,link,get,output,flash,map,output,flash,map,updates,it,with,the,path,and,query,params,of,the,target,url,and,then,saves,it,using,the,link,get,flash,map,manager,flash,map,manager,param,location,the,target,url,for,the,redirect,param,request,the,current,request,param,response,the,current,response,since,5,0;public,static,void,save,output,flash,map,string,location,http,servlet,request,request,http,servlet,response,response,flash,map,flash,map,get,output,flash,map,request,if,collection,utils,is,empty,flash,map,return,uri,components,uri,components,uri,components,builder,from,uri,string,location,build,flash,map,set,target,request,path,uri,components,get,path,flash,map,add,target,request,params,uri,components,get,query,params,flash,map,manager,manager,get,flash,map,manager,request,assert,state,manager,null,no,flash,map,manager,is,this,a,dispatcher,servlet,handled,request,manager,save,output,flash,map,flash,map,request,response
RequestContextUtils -> @Nullable 	public static WebApplicationContext findWebApplicationContext( 			HttpServletRequest request, @Nullable ServletContext servletContext);1496837955;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. The global context will_be found via the ServletContext or via ContextLoader's current context._<p>NOTE: This variant remains compatible with Servlet 2.5, explicitly_checking a given ServletContext instead of deriving it from the request._@param request current HTTP request_@param servletContext current servlet context_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found, or {@code null} if none_@since 4.2.1_@see DispatcherServlet#WEB_APPLICATION_CONTEXT_ATTRIBUTE_@see WebApplicationContextUtils#getWebApplicationContext(ServletContext)_@see ContextLoader#getCurrentWebApplicationContext();@Nullable_	public static WebApplicationContext findWebApplicationContext(_			HttpServletRequest request, @Nullable ServletContext servletContext) {__		WebApplicationContext webApplicationContext = (WebApplicationContext) request.getAttribute(_				DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (webApplicationContext == null) {_			if (servletContext != null) {_				webApplicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext)__			}_			if (webApplicationContext == null) {_				webApplicationContext = ContextLoader.getCurrentWebApplicationContext()__			}_		}_		return webApplicationContext__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,the,global,context,will,be,found,via,the,servlet,context,or,via,context,loader,s,current,context,p,note,this,variant,remains,compatible,with,servlet,2,5,explicitly,checking,a,given,servlet,context,instead,of,deriving,it,from,the,request,param,request,current,http,request,param,servlet,context,current,servlet,context,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,or,code,null,if,none,since,4,2,1,see,dispatcher,servlet,see,web,application,context,utils,get,web,application,context,servlet,context,see,context,loader,get,current,web,application,context;nullable,public,static,web,application,context,find,web,application,context,http,servlet,request,request,nullable,servlet,context,servlet,context,web,application,context,web,application,context,web,application,context,request,get,attribute,dispatcher,servlet,if,web,application,context,null,if,servlet,context,null,web,application,context,web,application,context,utils,get,web,application,context,servlet,context,if,web,application,context,null,web,application,context,context,loader,get,current,web,application,context,return,web,application,context
RequestContextUtils -> @Nullable 	public static WebApplicationContext findWebApplicationContext( 			HttpServletRequest request, @Nullable ServletContext servletContext);1530174524;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. The global context will_be found via the ServletContext or via ContextLoader's current context._<p>NOTE: This variant remains compatible with Servlet 2.5, explicitly_checking a given ServletContext instead of deriving it from the request._@param request current HTTP request_@param servletContext current servlet context_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found, or {@code null} if none_@since 4.2.1_@see DispatcherServlet#WEB_APPLICATION_CONTEXT_ATTRIBUTE_@see WebApplicationContextUtils#getWebApplicationContext(ServletContext)_@see ContextLoader#getCurrentWebApplicationContext();@Nullable_	public static WebApplicationContext findWebApplicationContext(_			HttpServletRequest request, @Nullable ServletContext servletContext) {__		WebApplicationContext webApplicationContext = (WebApplicationContext) request.getAttribute(_				DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (webApplicationContext == null) {_			if (servletContext != null) {_				webApplicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext)__			}_			if (webApplicationContext == null) {_				webApplicationContext = ContextLoader.getCurrentWebApplicationContext()__			}_		}_		return webApplicationContext__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,the,global,context,will,be,found,via,the,servlet,context,or,via,context,loader,s,current,context,p,note,this,variant,remains,compatible,with,servlet,2,5,explicitly,checking,a,given,servlet,context,instead,of,deriving,it,from,the,request,param,request,current,http,request,param,servlet,context,current,servlet,context,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,or,code,null,if,none,since,4,2,1,see,dispatcher,servlet,see,web,application,context,utils,get,web,application,context,servlet,context,see,context,loader,get,current,web,application,context;nullable,public,static,web,application,context,find,web,application,context,http,servlet,request,request,nullable,servlet,context,servlet,context,web,application,context,web,application,context,web,application,context,request,get,attribute,dispatcher,servlet,if,web,application,context,null,if,servlet,context,null,web,application,context,web,application,context,utils,get,web,application,context,servlet,context,if,web,application,context,null,web,application,context,context,loader,get,current,web,application,context,return,web,application,context
RequestContextUtils -> public static Theme getTheme(HttpServletRequest request);1328020251;Retrieves the current theme from the given request, using the ThemeResolver_and ThemeSource bound to the request by the DispatcherServlet._@param request current HTTP request_@return the current theme, or <code>null</code> if not found_@see #getThemeResolver;public static Theme getTheme(HttpServletRequest request) {_		ThemeResolver themeResolver = getThemeResolver(request)__		ThemeSource themeSource = getThemeSource(request)__		if (themeResolver != null && themeSource != null) {_			String themeName = themeResolver.resolveThemeName(request)__			return themeSource.getTheme(themeName)__		}_		else {_			return null__		}_	};retrieves,the,current,theme,from,the,given,request,using,the,theme,resolver,and,theme,source,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,or,code,null,code,if,not,found,see,get,theme,resolver;public,static,theme,get,theme,http,servlet,request,request,theme,resolver,theme,resolver,get,theme,resolver,request,theme,source,theme,source,get,theme,source,request,if,theme,resolver,null,theme,source,null,string,theme,name,theme,resolver,resolve,theme,name,request,return,theme,source,get,theme,theme,name,else,return,null
RequestContextUtils -> public static Theme getTheme(HttpServletRequest request);1328092788;Retrieves the current theme from the given request, using the ThemeResolver_and ThemeSource bound to the request by the DispatcherServlet._@param request current HTTP request_@return the current theme, or <code>null</code> if not found_@see #getThemeResolver;public static Theme getTheme(HttpServletRequest request) {_		ThemeResolver themeResolver = getThemeResolver(request)__		ThemeSource themeSource = getThemeSource(request)__		if (themeResolver != null && themeSource != null) {_			String themeName = themeResolver.resolveThemeName(request)__			return themeSource.getTheme(themeName)__		}_		else {_			return null__		}_	};retrieves,the,current,theme,from,the,given,request,using,the,theme,resolver,and,theme,source,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,or,code,null,code,if,not,found,see,get,theme,resolver;public,static,theme,get,theme,http,servlet,request,request,theme,resolver,theme,resolver,get,theme,resolver,request,theme,source,theme,source,get,theme,source,request,if,theme,resolver,null,theme,source,null,string,theme,name,theme,resolver,resolve,theme,name,request,return,theme,source,get,theme,theme,name,else,return,null
RequestContextUtils -> public static Theme getTheme(HttpServletRequest request);1356735495;Retrieves the current theme from the given request, using the ThemeResolver_and ThemeSource bound to the request by the DispatcherServlet._@param request current HTTP request_@return the current theme, or {@code null} if not found_@see #getThemeResolver;public static Theme getTheme(HttpServletRequest request) {_		ThemeResolver themeResolver = getThemeResolver(request)__		ThemeSource themeSource = getThemeSource(request)__		if (themeResolver != null && themeSource != null) {_			String themeName = themeResolver.resolveThemeName(request)__			return themeSource.getTheme(themeName)__		}_		else {_			return null__		}_	};retrieves,the,current,theme,from,the,given,request,using,the,theme,resolver,and,theme,source,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,or,code,null,if,not,found,see,get,theme,resolver;public,static,theme,get,theme,http,servlet,request,request,theme,resolver,theme,resolver,get,theme,resolver,request,theme,source,theme,source,get,theme,source,request,if,theme,resolver,null,theme,source,null,string,theme,name,theme,resolver,resolve,theme,name,request,return,theme,source,get,theme,theme,name,else,return,null
RequestContextUtils -> public static Theme getTheme(HttpServletRequest request);1380921248;Retrieves the current theme from the given request, using the ThemeResolver_and ThemeSource bound to the request by the DispatcherServlet._@param request current HTTP request_@return the current theme, or {@code null} if not found_@see #getThemeResolver;public static Theme getTheme(HttpServletRequest request) {_		ThemeResolver themeResolver = getThemeResolver(request)__		ThemeSource themeSource = getThemeSource(request)__		if (themeResolver != null && themeSource != null) {_			String themeName = themeResolver.resolveThemeName(request)__			return themeSource.getTheme(themeName)__		}_		else {_			return null__		}_	};retrieves,the,current,theme,from,the,given,request,using,the,theme,resolver,and,theme,source,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,or,code,null,if,not,found,see,get,theme,resolver;public,static,theme,get,theme,http,servlet,request,request,theme,resolver,theme,resolver,get,theme,resolver,request,theme,source,theme,source,get,theme,source,request,if,theme,resolver,null,theme,source,null,string,theme,name,theme,resolver,resolve,theme,name,request,return,theme,source,get,theme,theme,name,else,return,null
RequestContextUtils -> public static Theme getTheme(HttpServletRequest request);1383655090;Retrieves the current theme from the given request, using the ThemeResolver_and ThemeSource bound to the request by the DispatcherServlet._@param request current HTTP request_@return the current theme, or {@code null} if not found_@see #getThemeResolver;public static Theme getTheme(HttpServletRequest request) {_		ThemeResolver themeResolver = getThemeResolver(request)__		ThemeSource themeSource = getThemeSource(request)__		if (themeResolver != null && themeSource != null) {_			String themeName = themeResolver.resolveThemeName(request)__			return themeSource.getTheme(themeName)__		}_		else {_			return null__		}_	};retrieves,the,current,theme,from,the,given,request,using,the,theme,resolver,and,theme,source,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,or,code,null,if,not,found,see,get,theme,resolver;public,static,theme,get,theme,http,servlet,request,request,theme,resolver,theme,resolver,get,theme,resolver,request,theme,source,theme,source,get,theme,source,request,if,theme,resolver,null,theme,source,null,string,theme,name,theme,resolver,resolve,theme,name,request,return,theme,source,get,theme,theme,name,else,return,null
RequestContextUtils -> public static Theme getTheme(HttpServletRequest request);1440533787;Retrieves the current theme from the given request, using the ThemeResolver_and ThemeSource bound to the request by the DispatcherServlet._@param request current HTTP request_@return the current theme, or {@code null} if not found_@see #getThemeResolver;public static Theme getTheme(HttpServletRequest request) {_		ThemeResolver themeResolver = getThemeResolver(request)__		ThemeSource themeSource = getThemeSource(request)__		if (themeResolver != null && themeSource != null) {_			String themeName = themeResolver.resolveThemeName(request)__			return themeSource.getTheme(themeName)__		}_		else {_			return null__		}_	};retrieves,the,current,theme,from,the,given,request,using,the,theme,resolver,and,theme,source,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,or,code,null,if,not,found,see,get,theme,resolver;public,static,theme,get,theme,http,servlet,request,request,theme,resolver,theme,resolver,get,theme,resolver,request,theme,source,theme,source,get,theme,source,request,if,theme,resolver,null,theme,source,null,string,theme,name,theme,resolver,resolve,theme,name,request,return,theme,source,get,theme,theme,name,else,return,null
RequestContextUtils -> public static Theme getTheme(HttpServletRequest request);1461047077;Retrieves the current theme from the given request, using the ThemeResolver_and ThemeSource bound to the request by the DispatcherServlet._@param request current HTTP request_@return the current theme, or {@code null} if not found_@see #getThemeResolver;public static Theme getTheme(HttpServletRequest request) {_		ThemeResolver themeResolver = getThemeResolver(request)__		ThemeSource themeSource = getThemeSource(request)__		if (themeResolver != null && themeSource != null) {_			String themeName = themeResolver.resolveThemeName(request)__			return themeSource.getTheme(themeName)__		}_		else {_			return null__		}_	};retrieves,the,current,theme,from,the,given,request,using,the,theme,resolver,and,theme,source,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,or,code,null,if,not,found,see,get,theme,resolver;public,static,theme,get,theme,http,servlet,request,request,theme,resolver,theme,resolver,get,theme,resolver,request,theme,source,theme,source,get,theme,source,request,if,theme,resolver,null,theme,source,null,string,theme,name,theme,resolver,resolve,theme,name,request,return,theme,source,get,theme,theme,name,else,return,null
RequestContextUtils -> public static Theme getTheme(HttpServletRequest request);1467726769;Retrieves the current theme from the given request, using the ThemeResolver_and ThemeSource bound to the request by the DispatcherServlet._@param request current HTTP request_@return the current theme, or {@code null} if not found_@see #getThemeResolver;public static Theme getTheme(HttpServletRequest request) {_		ThemeResolver themeResolver = getThemeResolver(request)__		ThemeSource themeSource = getThemeSource(request)__		if (themeResolver != null && themeSource != null) {_			String themeName = themeResolver.resolveThemeName(request)__			return themeSource.getTheme(themeName)__		}_		else {_			return null__		}_	};retrieves,the,current,theme,from,the,given,request,using,the,theme,resolver,and,theme,source,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,or,code,null,if,not,found,see,get,theme,resolver;public,static,theme,get,theme,http,servlet,request,request,theme,resolver,theme,resolver,get,theme,resolver,request,theme,source,theme,source,get,theme,source,request,if,theme,resolver,null,theme,source,null,string,theme,name,theme,resolver,resolve,theme,name,request,return,theme,source,get,theme,theme,name,else,return,null
RequestContextUtils -> public static Theme getTheme(HttpServletRequest request);1487706257;Retrieves the current theme from the given request, using the ThemeResolver_and ThemeSource bound to the request by the DispatcherServlet._@param request current HTTP request_@return the current theme, or {@code null} if not found_@see #getThemeResolver;public static Theme getTheme(HttpServletRequest request) {_		ThemeResolver themeResolver = getThemeResolver(request)__		ThemeSource themeSource = getThemeSource(request)__		if (themeResolver != null && themeSource != null) {_			String themeName = themeResolver.resolveThemeName(request)__			return themeSource.getTheme(themeName)__		}_		else {_			return null__		}_	};retrieves,the,current,theme,from,the,given,request,using,the,theme,resolver,and,theme,source,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,or,code,null,if,not,found,see,get,theme,resolver;public,static,theme,get,theme,http,servlet,request,request,theme,resolver,theme,resolver,get,theme,resolver,request,theme,source,theme,source,get,theme,source,request,if,theme,resolver,null,theme,source,null,string,theme,name,theme,resolver,resolve,theme,name,request,return,theme,source,get,theme,theme,name,else,return,null
RequestContextUtils -> @Deprecated 	public static WebApplicationContext getWebApplicationContext(ServletRequest request) throws IllegalStateException;1440533787;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing._@param request current HTTP request_@return the request-specific web application context_@throws IllegalStateException if no servlet-specific context has been found_@see #getWebApplicationContext(ServletRequest, ServletContext)_@deprecated as of Spring 4.2.1, in favor of_{@link #findWebApplicationContext(HttpServletRequest)};@Deprecated_	public static WebApplicationContext getWebApplicationContext(ServletRequest request) throws IllegalStateException {_		return getWebApplicationContext(request, null)__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,param,request,current,http,request,return,the,request,specific,web,application,context,throws,illegal,state,exception,if,no,servlet,specific,context,has,been,found,see,get,web,application,context,servlet,request,servlet,context,deprecated,as,of,spring,4,2,1,in,favor,of,link,find,web,application,context,http,servlet,request;deprecated,public,static,web,application,context,get,web,application,context,servlet,request,request,throws,illegal,state,exception,return,get,web,application,context,request,null
RequestContextUtils -> @Deprecated 	public static WebApplicationContext getWebApplicationContext(ServletRequest request) throws IllegalStateException;1461047077;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing._@param request current HTTP request_@return the request-specific web application context_@throws IllegalStateException if no servlet-specific context has been found_@see #getWebApplicationContext(ServletRequest, ServletContext)_@deprecated as of Spring 4.2.1, in favor of_{@link #findWebApplicationContext(HttpServletRequest)};@Deprecated_	public static WebApplicationContext getWebApplicationContext(ServletRequest request) throws IllegalStateException {_		return getWebApplicationContext(request, null)__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,param,request,current,http,request,return,the,request,specific,web,application,context,throws,illegal,state,exception,if,no,servlet,specific,context,has,been,found,see,get,web,application,context,servlet,request,servlet,context,deprecated,as,of,spring,4,2,1,in,favor,of,link,find,web,application,context,http,servlet,request;deprecated,public,static,web,application,context,get,web,application,context,servlet,request,request,throws,illegal,state,exception,return,get,web,application,context,request,null
RequestContextUtils -> @Nullable 	public static ThemeResolver getThemeResolver(HttpServletRequest request);1495868221;Return the ThemeResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeResolver, or {@code null} if not found;@Nullable_	public static ThemeResolver getThemeResolver(HttpServletRequest request) {_		return (ThemeResolver) request.getAttribute(DispatcherServlet.THEME_RESOLVER_ATTRIBUTE)__	};return,the,theme,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,resolver,or,code,null,if,not,found;nullable,public,static,theme,resolver,get,theme,resolver,http,servlet,request,request,return,theme,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @Nullable 	public static ThemeResolver getThemeResolver(HttpServletRequest request);1496837955;Return the ThemeResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeResolver, or {@code null} if not found;@Nullable_	public static ThemeResolver getThemeResolver(HttpServletRequest request) {_		return (ThemeResolver) request.getAttribute(DispatcherServlet.THEME_RESOLVER_ATTRIBUTE)__	};return,the,theme,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,resolver,or,code,null,if,not,found;nullable,public,static,theme,resolver,get,theme,resolver,http,servlet,request,request,return,theme,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @Nullable 	public static ThemeResolver getThemeResolver(HttpServletRequest request);1530174524;Return the ThemeResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeResolver, or {@code null} if not found;@Nullable_	public static ThemeResolver getThemeResolver(HttpServletRequest request) {_		return (ThemeResolver) request.getAttribute(DispatcherServlet.THEME_RESOLVER_ATTRIBUTE)__	};return,the,theme,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,resolver,or,code,null,if,not,found;nullable,public,static,theme,resolver,get,theme,resolver,http,servlet,request,request,return,theme,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeResolver getThemeResolver(HttpServletRequest request);1328020251;Return the ThemeResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeResolver, or <code>null</code> if not found;public static ThemeResolver getThemeResolver(HttpServletRequest request) {_		return (ThemeResolver) request.getAttribute(DispatcherServlet.THEME_RESOLVER_ATTRIBUTE)__	};return,the,theme,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,resolver,or,code,null,code,if,not,found;public,static,theme,resolver,get,theme,resolver,http,servlet,request,request,return,theme,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeResolver getThemeResolver(HttpServletRequest request);1328092788;Return the ThemeResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeResolver, or <code>null</code> if not found;public static ThemeResolver getThemeResolver(HttpServletRequest request) {_		return (ThemeResolver) request.getAttribute(DispatcherServlet.THEME_RESOLVER_ATTRIBUTE)__	};return,the,theme,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,resolver,or,code,null,code,if,not,found;public,static,theme,resolver,get,theme,resolver,http,servlet,request,request,return,theme,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeResolver getThemeResolver(HttpServletRequest request);1356735495;Return the ThemeResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeResolver, or {@code null} if not found;public static ThemeResolver getThemeResolver(HttpServletRequest request) {_		return (ThemeResolver) request.getAttribute(DispatcherServlet.THEME_RESOLVER_ATTRIBUTE)__	};return,the,theme,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,resolver,or,code,null,if,not,found;public,static,theme,resolver,get,theme,resolver,http,servlet,request,request,return,theme,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeResolver getThemeResolver(HttpServletRequest request);1380921248;Return the ThemeResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeResolver, or {@code null} if not found;public static ThemeResolver getThemeResolver(HttpServletRequest request) {_		return (ThemeResolver) request.getAttribute(DispatcherServlet.THEME_RESOLVER_ATTRIBUTE)__	};return,the,theme,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,resolver,or,code,null,if,not,found;public,static,theme,resolver,get,theme,resolver,http,servlet,request,request,return,theme,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeResolver getThemeResolver(HttpServletRequest request);1383655090;Return the ThemeResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeResolver, or {@code null} if not found;public static ThemeResolver getThemeResolver(HttpServletRequest request) {_		return (ThemeResolver) request.getAttribute(DispatcherServlet.THEME_RESOLVER_ATTRIBUTE)__	};return,the,theme,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,resolver,or,code,null,if,not,found;public,static,theme,resolver,get,theme,resolver,http,servlet,request,request,return,theme,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeResolver getThemeResolver(HttpServletRequest request);1440533787;Return the ThemeResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeResolver, or {@code null} if not found;public static ThemeResolver getThemeResolver(HttpServletRequest request) {_		return (ThemeResolver) request.getAttribute(DispatcherServlet.THEME_RESOLVER_ATTRIBUTE)__	};return,the,theme,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,resolver,or,code,null,if,not,found;public,static,theme,resolver,get,theme,resolver,http,servlet,request,request,return,theme,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeResolver getThemeResolver(HttpServletRequest request);1461047077;Return the ThemeResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeResolver, or {@code null} if not found;public static ThemeResolver getThemeResolver(HttpServletRequest request) {_		return (ThemeResolver) request.getAttribute(DispatcherServlet.THEME_RESOLVER_ATTRIBUTE)__	};return,the,theme,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,resolver,or,code,null,if,not,found;public,static,theme,resolver,get,theme,resolver,http,servlet,request,request,return,theme,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeResolver getThemeResolver(HttpServletRequest request);1467726769;Return the ThemeResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeResolver, or {@code null} if not found;public static ThemeResolver getThemeResolver(HttpServletRequest request) {_		return (ThemeResolver) request.getAttribute(DispatcherServlet.THEME_RESOLVER_ATTRIBUTE)__	};return,the,theme,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,resolver,or,code,null,if,not,found;public,static,theme,resolver,get,theme,resolver,http,servlet,request,request,return,theme,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static ThemeResolver getThemeResolver(HttpServletRequest request);1487706257;Return the ThemeResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeResolver, or {@code null} if not found;public static ThemeResolver getThemeResolver(HttpServletRequest request) {_		return (ThemeResolver) request.getAttribute(DispatcherServlet.THEME_RESOLVER_ATTRIBUTE)__	};return,the,theme,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,resolver,or,code,null,if,not,found;public,static,theme,resolver,get,theme,resolver,http,servlet,request,request,return,theme,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static WebApplicationContext findWebApplicationContext(HttpServletRequest request);1440533787;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. The global context will_be found via the ServletContext or via ContextLoader's current context._<p>NOTE: This variant requires Servlet 3.0+ and is generally recommended_for forward-looking custom user code._@param request current HTTP request_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found, or {@code null} if none_@since 4.2.1_@see #findWebApplicationContext(HttpServletRequest, ServletContext)_@see ServletRequest#getServletContext()_@see ContextLoader#getCurrentWebApplicationContext();public static WebApplicationContext findWebApplicationContext(HttpServletRequest request) {_		return findWebApplicationContext(request, request.getServletContext())__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,the,global,context,will,be,found,via,the,servlet,context,or,via,context,loader,s,current,context,p,note,this,variant,requires,servlet,3,0,and,is,generally,recommended,for,forward,looking,custom,user,code,param,request,current,http,request,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,or,code,null,if,none,since,4,2,1,see,find,web,application,context,http,servlet,request,servlet,context,see,servlet,request,get,servlet,context,see,context,loader,get,current,web,application,context;public,static,web,application,context,find,web,application,context,http,servlet,request,request,return,find,web,application,context,request,request,get,servlet,context
RequestContextUtils -> public static WebApplicationContext findWebApplicationContext(HttpServletRequest request);1461047077;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. The global context will_be found via the ServletContext or via ContextLoader's current context._<p>NOTE: This variant requires Servlet 3.0+ and is generally recommended_for forward-looking custom user code._@param request current HTTP request_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found, or {@code null} if none_@since 4.2.1_@see #findWebApplicationContext(HttpServletRequest, ServletContext)_@see ServletRequest#getServletContext()_@see ContextLoader#getCurrentWebApplicationContext();public static WebApplicationContext findWebApplicationContext(HttpServletRequest request) {_		return findWebApplicationContext(request, request.getServletContext())__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,the,global,context,will,be,found,via,the,servlet,context,or,via,context,loader,s,current,context,p,note,this,variant,requires,servlet,3,0,and,is,generally,recommended,for,forward,looking,custom,user,code,param,request,current,http,request,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,or,code,null,if,none,since,4,2,1,see,find,web,application,context,http,servlet,request,servlet,context,see,servlet,request,get,servlet,context,see,context,loader,get,current,web,application,context;public,static,web,application,context,find,web,application,context,http,servlet,request,request,return,find,web,application,context,request,request,get,servlet,context
RequestContextUtils -> public static WebApplicationContext findWebApplicationContext(HttpServletRequest request);1467726769;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. The global context will_be found via the ServletContext or via ContextLoader's current context._<p>NOTE: This variant requires Servlet 3.0+ and is generally recommended_for forward-looking custom user code._@param request current HTTP request_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found, or {@code null} if none_@since 4.2.1_@see #findWebApplicationContext(HttpServletRequest, ServletContext)_@see ServletRequest#getServletContext()_@see ContextLoader#getCurrentWebApplicationContext();public static WebApplicationContext findWebApplicationContext(HttpServletRequest request) {_		return findWebApplicationContext(request, request.getServletContext())__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,the,global,context,will,be,found,via,the,servlet,context,or,via,context,loader,s,current,context,p,note,this,variant,requires,servlet,3,0,and,is,generally,recommended,for,forward,looking,custom,user,code,param,request,current,http,request,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,or,code,null,if,none,since,4,2,1,see,find,web,application,context,http,servlet,request,servlet,context,see,servlet,request,get,servlet,context,see,context,loader,get,current,web,application,context;public,static,web,application,context,find,web,application,context,http,servlet,request,request,return,find,web,application,context,request,request,get,servlet,context
RequestContextUtils -> public static WebApplicationContext findWebApplicationContext(HttpServletRequest request);1487706257;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. The global context will_be found via the ServletContext or via ContextLoader's current context._<p>NOTE: This variant requires Servlet 3.0+ and is generally recommended_for forward-looking custom user code._@param request current HTTP request_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found, or {@code null} if none_@since 4.2.1_@see #findWebApplicationContext(HttpServletRequest, ServletContext)_@see ServletRequest#getServletContext()_@see ContextLoader#getCurrentWebApplicationContext();public static WebApplicationContext findWebApplicationContext(HttpServletRequest request) {_		return findWebApplicationContext(request, request.getServletContext())__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,the,global,context,will,be,found,via,the,servlet,context,or,via,context,loader,s,current,context,p,note,this,variant,requires,servlet,3,0,and,is,generally,recommended,for,forward,looking,custom,user,code,param,request,current,http,request,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,or,code,null,if,none,since,4,2,1,see,find,web,application,context,http,servlet,request,servlet,context,see,servlet,request,get,servlet,context,see,context,loader,get,current,web,application,context;public,static,web,application,context,find,web,application,context,http,servlet,request,request,return,find,web,application,context,request,request,get,servlet,context
RequestContextUtils -> @Nullable 	public static TimeZone getTimeZone(HttpServletRequest request);1495868221;Retrieve the current time zone from the given request, using the_TimeZoneAwareLocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the system's default time zone._<p>Note: This method returns {@code null} if no specific time zone can be_resolved for the given request. This is in contrast to {@link #getLocale}_where there is always the request's accept-header locale to fall back to._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getTimeZone()}_which will normally be populated with the same TimeZone: That method only_differs in terms of its fallback to the system time zone if the LocaleResolver_hasn't provided a specific time zone (instead of this method's {@code null})._@param request current HTTP request_@return the current time zone for the given request, either from the_TimeZoneAwareLocaleResolver or {@code null} if none associated_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getTimeZone();@Nullable_	public static TimeZone getTimeZone(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		if (localeResolver instanceof LocaleContextResolver) {_			LocaleContext localeContext = ((LocaleContextResolver) localeResolver).resolveLocaleContext(request)__			if (localeContext instanceof TimeZoneAwareLocaleContext) {_				return ((TimeZoneAwareLocaleContext) localeContext).getTimeZone()__			}_		}_		return null__	};retrieve,the,current,time,zone,from,the,given,request,using,the,time,zone,aware,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,system,s,default,time,zone,p,note,this,method,returns,code,null,if,no,specific,time,zone,can,be,resolved,for,the,given,request,this,is,in,contrast,to,link,get,locale,where,there,is,always,the,request,s,accept,header,locale,to,fall,back,to,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,time,zone,which,will,normally,be,populated,with,the,same,time,zone,that,method,only,differs,in,terms,of,its,fallback,to,the,system,time,zone,if,the,locale,resolver,hasn,t,provided,a,specific,time,zone,instead,of,this,method,s,code,null,param,request,current,http,request,return,the,current,time,zone,for,the,given,request,either,from,the,time,zone,aware,locale,resolver,or,code,null,if,none,associated,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,time,zone;nullable,public,static,time,zone,get,time,zone,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,if,locale,resolver,instanceof,locale,context,resolver,locale,context,locale,context,locale,context,resolver,locale,resolver,resolve,locale,context,request,if,locale,context,instanceof,time,zone,aware,locale,context,return,time,zone,aware,locale,context,locale,context,get,time,zone,return,null
RequestContextUtils -> @Nullable 	public static TimeZone getTimeZone(HttpServletRequest request);1496837955;Retrieve the current time zone from the given request, using the_TimeZoneAwareLocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the system's default time zone._<p>Note: This method returns {@code null} if no specific time zone can be_resolved for the given request. This is in contrast to {@link #getLocale}_where there is always the request's accept-header locale to fall back to._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getTimeZone()}_which will normally be populated with the same TimeZone: That method only_differs in terms of its fallback to the system time zone if the LocaleResolver_hasn't provided a specific time zone (instead of this method's {@code null})._@param request current HTTP request_@return the current time zone for the given request, either from the_TimeZoneAwareLocaleResolver or {@code null} if none associated_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getTimeZone();@Nullable_	public static TimeZone getTimeZone(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		if (localeResolver instanceof LocaleContextResolver) {_			LocaleContext localeContext = ((LocaleContextResolver) localeResolver).resolveLocaleContext(request)__			if (localeContext instanceof TimeZoneAwareLocaleContext) {_				return ((TimeZoneAwareLocaleContext) localeContext).getTimeZone()__			}_		}_		return null__	};retrieve,the,current,time,zone,from,the,given,request,using,the,time,zone,aware,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,system,s,default,time,zone,p,note,this,method,returns,code,null,if,no,specific,time,zone,can,be,resolved,for,the,given,request,this,is,in,contrast,to,link,get,locale,where,there,is,always,the,request,s,accept,header,locale,to,fall,back,to,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,time,zone,which,will,normally,be,populated,with,the,same,time,zone,that,method,only,differs,in,terms,of,its,fallback,to,the,system,time,zone,if,the,locale,resolver,hasn,t,provided,a,specific,time,zone,instead,of,this,method,s,code,null,param,request,current,http,request,return,the,current,time,zone,for,the,given,request,either,from,the,time,zone,aware,locale,resolver,or,code,null,if,none,associated,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,time,zone;nullable,public,static,time,zone,get,time,zone,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,if,locale,resolver,instanceof,locale,context,resolver,locale,context,locale,context,locale,context,resolver,locale,resolver,resolve,locale,context,request,if,locale,context,instanceof,time,zone,aware,locale,context,return,time,zone,aware,locale,context,locale,context,get,time,zone,return,null
RequestContextUtils -> @Nullable 	public static TimeZone getTimeZone(HttpServletRequest request);1530174524;Retrieve the current time zone from the given request, using the_TimeZoneAwareLocaleResolver bound to the request by the DispatcherServlet_(if available), falling back to the system's default time zone._<p>Note: This method returns {@code null} if no specific time zone can be_resolved for the given request. This is in contrast to {@link #getLocale}_where there is always the request's accept-header locale to fall back to._<p>Consider using {@link org.springframework.context.i18n.LocaleContextHolder#getTimeZone()}_which will normally be populated with the same TimeZone: That method only_differs in terms of its fallback to the system time zone if the LocaleResolver_hasn't provided a specific time zone (instead of this method's {@code null})._@param request current HTTP request_@return the current time zone for the given request, either from the_TimeZoneAwareLocaleResolver or {@code null} if none associated_@see #getLocaleResolver_@see org.springframework.context.i18n.LocaleContextHolder#getTimeZone();@Nullable_	public static TimeZone getTimeZone(HttpServletRequest request) {_		LocaleResolver localeResolver = getLocaleResolver(request)__		if (localeResolver instanceof LocaleContextResolver) {_			LocaleContext localeContext = ((LocaleContextResolver) localeResolver).resolveLocaleContext(request)__			if (localeContext instanceof TimeZoneAwareLocaleContext) {_				return ((TimeZoneAwareLocaleContext) localeContext).getTimeZone()__			}_		}_		return null__	};retrieve,the,current,time,zone,from,the,given,request,using,the,time,zone,aware,locale,resolver,bound,to,the,request,by,the,dispatcher,servlet,if,available,falling,back,to,the,system,s,default,time,zone,p,note,this,method,returns,code,null,if,no,specific,time,zone,can,be,resolved,for,the,given,request,this,is,in,contrast,to,link,get,locale,where,there,is,always,the,request,s,accept,header,locale,to,fall,back,to,p,consider,using,link,org,springframework,context,i18n,locale,context,holder,get,time,zone,which,will,normally,be,populated,with,the,same,time,zone,that,method,only,differs,in,terms,of,its,fallback,to,the,system,time,zone,if,the,locale,resolver,hasn,t,provided,a,specific,time,zone,instead,of,this,method,s,code,null,param,request,current,http,request,return,the,current,time,zone,for,the,given,request,either,from,the,time,zone,aware,locale,resolver,or,code,null,if,none,associated,see,get,locale,resolver,see,org,springframework,context,i18n,locale,context,holder,get,time,zone;nullable,public,static,time,zone,get,time,zone,http,servlet,request,request,locale,resolver,locale,resolver,get,locale,resolver,request,if,locale,resolver,instanceof,locale,context,resolver,locale,context,locale,context,locale,context,resolver,locale,resolver,resolve,locale,context,request,if,locale,context,instanceof,time,zone,aware,locale,context,return,time,zone,aware,locale,context,locale,context,get,time,zone,return,null
RequestContextUtils -> public static LocaleResolver getLocaleResolver(HttpServletRequest request);1328020251;Return the LocaleResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current LocaleResolver, or <code>null</code> if not found;public static LocaleResolver getLocaleResolver(HttpServletRequest request) {_		return (LocaleResolver) request.getAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE)__	};return,the,locale,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,locale,resolver,or,code,null,code,if,not,found;public,static,locale,resolver,get,locale,resolver,http,servlet,request,request,return,locale,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static LocaleResolver getLocaleResolver(HttpServletRequest request);1328092788;Return the LocaleResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current LocaleResolver, or <code>null</code> if not found;public static LocaleResolver getLocaleResolver(HttpServletRequest request) {_		return (LocaleResolver) request.getAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE)__	};return,the,locale,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,locale,resolver,or,code,null,code,if,not,found;public,static,locale,resolver,get,locale,resolver,http,servlet,request,request,return,locale,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static LocaleResolver getLocaleResolver(HttpServletRequest request);1356735495;Return the LocaleResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current LocaleResolver, or {@code null} if not found;public static LocaleResolver getLocaleResolver(HttpServletRequest request) {_		return (LocaleResolver) request.getAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE)__	};return,the,locale,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,locale,resolver,or,code,null,if,not,found;public,static,locale,resolver,get,locale,resolver,http,servlet,request,request,return,locale,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static LocaleResolver getLocaleResolver(HttpServletRequest request);1380921248;Return the LocaleResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current LocaleResolver, or {@code null} if not found;public static LocaleResolver getLocaleResolver(HttpServletRequest request) {_		return (LocaleResolver) request.getAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE)__	};return,the,locale,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,locale,resolver,or,code,null,if,not,found;public,static,locale,resolver,get,locale,resolver,http,servlet,request,request,return,locale,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static LocaleResolver getLocaleResolver(HttpServletRequest request);1383655090;Return the LocaleResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current LocaleResolver, or {@code null} if not found;public static LocaleResolver getLocaleResolver(HttpServletRequest request) {_		return (LocaleResolver) request.getAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE)__	};return,the,locale,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,locale,resolver,or,code,null,if,not,found;public,static,locale,resolver,get,locale,resolver,http,servlet,request,request,return,locale,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static LocaleResolver getLocaleResolver(HttpServletRequest request);1440533787;Return the LocaleResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current LocaleResolver, or {@code null} if not found;public static LocaleResolver getLocaleResolver(HttpServletRequest request) {_		return (LocaleResolver) request.getAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE)__	};return,the,locale,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,locale,resolver,or,code,null,if,not,found;public,static,locale,resolver,get,locale,resolver,http,servlet,request,request,return,locale,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static LocaleResolver getLocaleResolver(HttpServletRequest request);1461047077;Return the LocaleResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current LocaleResolver, or {@code null} if not found;public static LocaleResolver getLocaleResolver(HttpServletRequest request) {_		return (LocaleResolver) request.getAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE)__	};return,the,locale,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,locale,resolver,or,code,null,if,not,found;public,static,locale,resolver,get,locale,resolver,http,servlet,request,request,return,locale,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static LocaleResolver getLocaleResolver(HttpServletRequest request);1467726769;Return the LocaleResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current LocaleResolver, or {@code null} if not found;public static LocaleResolver getLocaleResolver(HttpServletRequest request) {_		return (LocaleResolver) request.getAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE)__	};return,the,locale,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,locale,resolver,or,code,null,if,not,found;public,static,locale,resolver,get,locale,resolver,http,servlet,request,request,return,locale,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static LocaleResolver getLocaleResolver(HttpServletRequest request);1487706257;Return the LocaleResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current LocaleResolver, or {@code null} if not found;public static LocaleResolver getLocaleResolver(HttpServletRequest request) {_		return (LocaleResolver) request.getAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE)__	};return,the,locale,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,locale,resolver,or,code,null,if,not,found;public,static,locale,resolver,get,locale,resolver,http,servlet,request,request,return,locale,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static WebApplicationContext findWebApplicationContext( 			HttpServletRequest request, ServletContext servletContext);1440533787;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. The global context will_be found via the ServletContext or via ContextLoader's current context._<p>NOTE: This variant remains compatible with Servlet 2.5, explicitly_checking a given ServletContext instead of deriving it from the request._@param request current HTTP request_@param servletContext current servlet context_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found, or {@code null} if none_@since 4.2.1_@see DispatcherServlet#WEB_APPLICATION_CONTEXT_ATTRIBUTE_@see WebApplicationContextUtils#getWebApplicationContext(ServletContext)_@see ContextLoader#getCurrentWebApplicationContext();public static WebApplicationContext findWebApplicationContext(_			HttpServletRequest request, ServletContext servletContext) {__		WebApplicationContext webApplicationContext = (WebApplicationContext) request.getAttribute(_				DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (webApplicationContext == null) {_			if (servletContext != null) {_				webApplicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext)__			}_			if (webApplicationContext == null) {_				webApplicationContext = ContextLoader.getCurrentWebApplicationContext()__			}_		}_		return webApplicationContext__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,the,global,context,will,be,found,via,the,servlet,context,or,via,context,loader,s,current,context,p,note,this,variant,remains,compatible,with,servlet,2,5,explicitly,checking,a,given,servlet,context,instead,of,deriving,it,from,the,request,param,request,current,http,request,param,servlet,context,current,servlet,context,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,or,code,null,if,none,since,4,2,1,see,dispatcher,servlet,see,web,application,context,utils,get,web,application,context,servlet,context,see,context,loader,get,current,web,application,context;public,static,web,application,context,find,web,application,context,http,servlet,request,request,servlet,context,servlet,context,web,application,context,web,application,context,web,application,context,request,get,attribute,dispatcher,servlet,if,web,application,context,null,if,servlet,context,null,web,application,context,web,application,context,utils,get,web,application,context,servlet,context,if,web,application,context,null,web,application,context,context,loader,get,current,web,application,context,return,web,application,context
RequestContextUtils -> public static WebApplicationContext findWebApplicationContext( 			HttpServletRequest request, ServletContext servletContext);1461047077;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. The global context will_be found via the ServletContext or via ContextLoader's current context._<p>NOTE: This variant remains compatible with Servlet 2.5, explicitly_checking a given ServletContext instead of deriving it from the request._@param request current HTTP request_@param servletContext current servlet context_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found, or {@code null} if none_@since 4.2.1_@see DispatcherServlet#WEB_APPLICATION_CONTEXT_ATTRIBUTE_@see WebApplicationContextUtils#getWebApplicationContext(ServletContext)_@see ContextLoader#getCurrentWebApplicationContext();public static WebApplicationContext findWebApplicationContext(_			HttpServletRequest request, ServletContext servletContext) {__		WebApplicationContext webApplicationContext = (WebApplicationContext) request.getAttribute(_				DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (webApplicationContext == null) {_			if (servletContext != null) {_				webApplicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext)__			}_			if (webApplicationContext == null) {_				webApplicationContext = ContextLoader.getCurrentWebApplicationContext()__			}_		}_		return webApplicationContext__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,the,global,context,will,be,found,via,the,servlet,context,or,via,context,loader,s,current,context,p,note,this,variant,remains,compatible,with,servlet,2,5,explicitly,checking,a,given,servlet,context,instead,of,deriving,it,from,the,request,param,request,current,http,request,param,servlet,context,current,servlet,context,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,or,code,null,if,none,since,4,2,1,see,dispatcher,servlet,see,web,application,context,utils,get,web,application,context,servlet,context,see,context,loader,get,current,web,application,context;public,static,web,application,context,find,web,application,context,http,servlet,request,request,servlet,context,servlet,context,web,application,context,web,application,context,web,application,context,request,get,attribute,dispatcher,servlet,if,web,application,context,null,if,servlet,context,null,web,application,context,web,application,context,utils,get,web,application,context,servlet,context,if,web,application,context,null,web,application,context,context,loader,get,current,web,application,context,return,web,application,context
RequestContextUtils -> public static WebApplicationContext findWebApplicationContext( 			HttpServletRequest request, ServletContext servletContext);1467726769;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. The global context will_be found via the ServletContext or via ContextLoader's current context._<p>NOTE: This variant remains compatible with Servlet 2.5, explicitly_checking a given ServletContext instead of deriving it from the request._@param request current HTTP request_@param servletContext current servlet context_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found, or {@code null} if none_@since 4.2.1_@see DispatcherServlet#WEB_APPLICATION_CONTEXT_ATTRIBUTE_@see WebApplicationContextUtils#getWebApplicationContext(ServletContext)_@see ContextLoader#getCurrentWebApplicationContext();public static WebApplicationContext findWebApplicationContext(_			HttpServletRequest request, ServletContext servletContext) {__		WebApplicationContext webApplicationContext = (WebApplicationContext) request.getAttribute(_				DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (webApplicationContext == null) {_			if (servletContext != null) {_				webApplicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext)__			}_			if (webApplicationContext == null) {_				webApplicationContext = ContextLoader.getCurrentWebApplicationContext()__			}_		}_		return webApplicationContext__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,the,global,context,will,be,found,via,the,servlet,context,or,via,context,loader,s,current,context,p,note,this,variant,remains,compatible,with,servlet,2,5,explicitly,checking,a,given,servlet,context,instead,of,deriving,it,from,the,request,param,request,current,http,request,param,servlet,context,current,servlet,context,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,or,code,null,if,none,since,4,2,1,see,dispatcher,servlet,see,web,application,context,utils,get,web,application,context,servlet,context,see,context,loader,get,current,web,application,context;public,static,web,application,context,find,web,application,context,http,servlet,request,request,servlet,context,servlet,context,web,application,context,web,application,context,web,application,context,request,get,attribute,dispatcher,servlet,if,web,application,context,null,if,servlet,context,null,web,application,context,web,application,context,utils,get,web,application,context,servlet,context,if,web,application,context,null,web,application,context,context,loader,get,current,web,application,context,return,web,application,context
RequestContextUtils -> public static WebApplicationContext findWebApplicationContext( 			HttpServletRequest request, ServletContext servletContext);1487706257;Look for the WebApplicationContext associated with the DispatcherServlet_that has initiated request processing, and for the global context if none_was found associated with the current request. The global context will_be found via the ServletContext or via ContextLoader's current context._<p>NOTE: This variant remains compatible with Servlet 2.5, explicitly_checking a given ServletContext instead of deriving it from the request._@param request current HTTP request_@param servletContext current servlet context_@return the request-specific WebApplicationContext, or the global one_if no request-specific context has been found, or {@code null} if none_@since 4.2.1_@see DispatcherServlet#WEB_APPLICATION_CONTEXT_ATTRIBUTE_@see WebApplicationContextUtils#getWebApplicationContext(ServletContext)_@see ContextLoader#getCurrentWebApplicationContext();public static WebApplicationContext findWebApplicationContext(_			HttpServletRequest request, ServletContext servletContext) {__		WebApplicationContext webApplicationContext = (WebApplicationContext) request.getAttribute(_				DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (webApplicationContext == null) {_			if (servletContext != null) {_				webApplicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext)__			}_			if (webApplicationContext == null) {_				webApplicationContext = ContextLoader.getCurrentWebApplicationContext()__			}_		}_		return webApplicationContext__	};look,for,the,web,application,context,associated,with,the,dispatcher,servlet,that,has,initiated,request,processing,and,for,the,global,context,if,none,was,found,associated,with,the,current,request,the,global,context,will,be,found,via,the,servlet,context,or,via,context,loader,s,current,context,p,note,this,variant,remains,compatible,with,servlet,2,5,explicitly,checking,a,given,servlet,context,instead,of,deriving,it,from,the,request,param,request,current,http,request,param,servlet,context,current,servlet,context,return,the,request,specific,web,application,context,or,the,global,one,if,no,request,specific,context,has,been,found,or,code,null,if,none,since,4,2,1,see,dispatcher,servlet,see,web,application,context,utils,get,web,application,context,servlet,context,see,context,loader,get,current,web,application,context;public,static,web,application,context,find,web,application,context,http,servlet,request,request,servlet,context,servlet,context,web,application,context,web,application,context,web,application,context,request,get,attribute,dispatcher,servlet,if,web,application,context,null,if,servlet,context,null,web,application,context,web,application,context,utils,get,web,application,context,servlet,context,if,web,application,context,null,web,application,context,context,loader,get,current,web,application,context,return,web,application,context
RequestContextUtils -> public static FlashMap getOutputFlashMap(HttpServletRequest request);1328020251;Return the "output" FlashMap with attributes to save for a subsequent request._@param request current request_@return a {@link FlashMap} instance, never {@code null}_@see FlashMap;public static FlashMap getOutputFlashMap(HttpServletRequest request) {_		return (FlashMap) request.getAttribute(FlashMapManager.OUTPUT_FLASH_MAP_ATTRIBUTE)__	};return,the,output,flash,map,with,attributes,to,save,for,a,subsequent,request,param,request,current,request,return,a,link,flash,map,instance,never,code,null,see,flash,map;public,static,flash,map,get,output,flash,map,http,servlet,request,request,return,flash,map,request,get,attribute,flash,map,manager
RequestContextUtils -> public static FlashMap getOutputFlashMap(HttpServletRequest request);1328092788;Return the "output" FlashMap with attributes to save for a subsequent request._@param request current request_@return a {@link FlashMap} instance, never {@code null}_@see FlashMap;public static FlashMap getOutputFlashMap(HttpServletRequest request) {_		return (FlashMap) request.getAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE)__	};return,the,output,flash,map,with,attributes,to,save,for,a,subsequent,request,param,request,current,request,return,a,link,flash,map,instance,never,code,null,see,flash,map;public,static,flash,map,get,output,flash,map,http,servlet,request,request,return,flash,map,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMap getOutputFlashMap(HttpServletRequest request);1356735495;Return the "output" FlashMap with attributes to save for a subsequent request._@param request current request_@return a {@link FlashMap} instance, never {@code null}_@see FlashMap;public static FlashMap getOutputFlashMap(HttpServletRequest request) {_		return (FlashMap) request.getAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE)__	};return,the,output,flash,map,with,attributes,to,save,for,a,subsequent,request,param,request,current,request,return,a,link,flash,map,instance,never,code,null,see,flash,map;public,static,flash,map,get,output,flash,map,http,servlet,request,request,return,flash,map,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMap getOutputFlashMap(HttpServletRequest request);1380921248;Return the "output" FlashMap with attributes to save for a subsequent request._@param request current request_@return a {@link FlashMap} instance, never {@code null}_@see FlashMap;public static FlashMap getOutputFlashMap(HttpServletRequest request) {_		return (FlashMap) request.getAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE)__	};return,the,output,flash,map,with,attributes,to,save,for,a,subsequent,request,param,request,current,request,return,a,link,flash,map,instance,never,code,null,see,flash,map;public,static,flash,map,get,output,flash,map,http,servlet,request,request,return,flash,map,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMap getOutputFlashMap(HttpServletRequest request);1383655090;Return the "output" FlashMap with attributes to save for a subsequent request._@param request the current request_@return a {@link FlashMap} instance (never {@code null} within a DispatcherServlet request)_@see FlashMap;public static FlashMap getOutputFlashMap(HttpServletRequest request) {_		return (FlashMap) request.getAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE)__	};return,the,output,flash,map,with,attributes,to,save,for,a,subsequent,request,param,request,the,current,request,return,a,link,flash,map,instance,never,code,null,within,a,dispatcher,servlet,request,see,flash,map;public,static,flash,map,get,output,flash,map,http,servlet,request,request,return,flash,map,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMap getOutputFlashMap(HttpServletRequest request);1440533787;Return the "output" FlashMap with attributes to save for a subsequent request._@param request the current request_@return a {@link FlashMap} instance (never {@code null} within a DispatcherServlet request)_@see FlashMap;public static FlashMap getOutputFlashMap(HttpServletRequest request) {_		return (FlashMap) request.getAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE)__	};return,the,output,flash,map,with,attributes,to,save,for,a,subsequent,request,param,request,the,current,request,return,a,link,flash,map,instance,never,code,null,within,a,dispatcher,servlet,request,see,flash,map;public,static,flash,map,get,output,flash,map,http,servlet,request,request,return,flash,map,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMap getOutputFlashMap(HttpServletRequest request);1461047077;Return the "output" FlashMap with attributes to save for a subsequent request._@param request the current request_@return a {@link FlashMap} instance (never {@code null} within a DispatcherServlet request)_@see FlashMap;public static FlashMap getOutputFlashMap(HttpServletRequest request) {_		return (FlashMap) request.getAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE)__	};return,the,output,flash,map,with,attributes,to,save,for,a,subsequent,request,param,request,the,current,request,return,a,link,flash,map,instance,never,code,null,within,a,dispatcher,servlet,request,see,flash,map;public,static,flash,map,get,output,flash,map,http,servlet,request,request,return,flash,map,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMap getOutputFlashMap(HttpServletRequest request);1467726769;Return the "output" FlashMap with attributes to save for a subsequent request._@param request the current request_@return a {@link FlashMap} instance (never {@code null} within a DispatcherServlet request)_@see FlashMap;public static FlashMap getOutputFlashMap(HttpServletRequest request) {_		return (FlashMap) request.getAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE)__	};return,the,output,flash,map,with,attributes,to,save,for,a,subsequent,request,param,request,the,current,request,return,a,link,flash,map,instance,never,code,null,within,a,dispatcher,servlet,request,see,flash,map;public,static,flash,map,get,output,flash,map,http,servlet,request,request,return,flash,map,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMap getOutputFlashMap(HttpServletRequest request);1487706257;Return "output" FlashMap to save attributes for request after redirect._@param request current request_@return a {@link FlashMap} instance, never {@code null} within a_{@code DispatcherServlet}-handled request;public static FlashMap getOutputFlashMap(HttpServletRequest request) {_		return (FlashMap) request.getAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE)__	};return,output,flash,map,to,save,attributes,for,request,after,redirect,param,request,current,request,return,a,link,flash,map,instance,never,code,null,within,a,code,dispatcher,servlet,handled,request;public,static,flash,map,get,output,flash,map,http,servlet,request,request,return,flash,map,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMap getOutputFlashMap(HttpServletRequest request);1495868221;Return "output" FlashMap to save attributes for request after redirect._@param request current request_@return a {@link FlashMap} instance, never {@code null} within a_{@code DispatcherServlet}-handled request;public static FlashMap getOutputFlashMap(HttpServletRequest request) {_		return (FlashMap) request.getAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE)__	};return,output,flash,map,to,save,attributes,for,request,after,redirect,param,request,current,request,return,a,link,flash,map,instance,never,code,null,within,a,code,dispatcher,servlet,handled,request;public,static,flash,map,get,output,flash,map,http,servlet,request,request,return,flash,map,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMap getOutputFlashMap(HttpServletRequest request);1496837955;Return "output" FlashMap to save attributes for request after redirect._@param request current request_@return a {@link FlashMap} instance, never {@code null} within a_{@code DispatcherServlet}-handled request;public static FlashMap getOutputFlashMap(HttpServletRequest request) {_		return (FlashMap) request.getAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE)__	};return,output,flash,map,to,save,attributes,for,request,after,redirect,param,request,current,request,return,a,link,flash,map,instance,never,code,null,within,a,code,dispatcher,servlet,handled,request;public,static,flash,map,get,output,flash,map,http,servlet,request,request,return,flash,map,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMap getOutputFlashMap(HttpServletRequest request);1530174524;Return "output" FlashMap to save attributes for request after redirect._@param request current request_@return a {@link FlashMap} instance, never {@code null} within a_{@code DispatcherServlet}-handled request;public static FlashMap getOutputFlashMap(HttpServletRequest request) {_		return (FlashMap) request.getAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE)__	};return,output,flash,map,to,save,attributes,for,request,after,redirect,param,request,current,request,return,a,link,flash,map,instance,never,code,null,within,a,code,dispatcher,servlet,handled,request;public,static,flash,map,get,output,flash,map,http,servlet,request,request,return,flash,map,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMapManager getFlashMapManager(HttpServletRequest request);1328092788;Return the FlashMapManager instance to save flash attributes with_before a redirect._@param request the current request;public static FlashMapManager getFlashMapManager(HttpServletRequest request) {_		return (FlashMapManager) request.getAttribute(DispatcherServlet.FLASH_MAP_MANAGER_ATTRIBUTE)__	};return,the,flash,map,manager,instance,to,save,flash,attributes,with,before,a,redirect,param,request,the,current,request;public,static,flash,map,manager,get,flash,map,manager,http,servlet,request,request,return,flash,map,manager,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMapManager getFlashMapManager(HttpServletRequest request);1356735495;Return the FlashMapManager instance to save flash attributes with_before a redirect._@param request the current request;public static FlashMapManager getFlashMapManager(HttpServletRequest request) {_		return (FlashMapManager) request.getAttribute(DispatcherServlet.FLASH_MAP_MANAGER_ATTRIBUTE)__	};return,the,flash,map,manager,instance,to,save,flash,attributes,with,before,a,redirect,param,request,the,current,request;public,static,flash,map,manager,get,flash,map,manager,http,servlet,request,request,return,flash,map,manager,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMapManager getFlashMapManager(HttpServletRequest request);1380921248;Return the FlashMapManager instance to save flash attributes with_before a redirect._@param request the current request;public static FlashMapManager getFlashMapManager(HttpServletRequest request) {_		return (FlashMapManager) request.getAttribute(DispatcherServlet.FLASH_MAP_MANAGER_ATTRIBUTE)__	};return,the,flash,map,manager,instance,to,save,flash,attributes,with,before,a,redirect,param,request,the,current,request;public,static,flash,map,manager,get,flash,map,manager,http,servlet,request,request,return,flash,map,manager,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMapManager getFlashMapManager(HttpServletRequest request);1383655090;Return the FlashMapManager instance to save flash attributes with_before a redirect._@param request the current request_@return a {@link FlashMapManager} instance (never {@code null} within a DispatcherServlet request);public static FlashMapManager getFlashMapManager(HttpServletRequest request) {_		return (FlashMapManager) request.getAttribute(DispatcherServlet.FLASH_MAP_MANAGER_ATTRIBUTE)__	};return,the,flash,map,manager,instance,to,save,flash,attributes,with,before,a,redirect,param,request,the,current,request,return,a,link,flash,map,manager,instance,never,code,null,within,a,dispatcher,servlet,request;public,static,flash,map,manager,get,flash,map,manager,http,servlet,request,request,return,flash,map,manager,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMapManager getFlashMapManager(HttpServletRequest request);1440533787;Return the FlashMapManager instance to save flash attributes with_before a redirect._@param request the current request_@return a {@link FlashMapManager} instance (never {@code null} within a DispatcherServlet request);public static FlashMapManager getFlashMapManager(HttpServletRequest request) {_		return (FlashMapManager) request.getAttribute(DispatcherServlet.FLASH_MAP_MANAGER_ATTRIBUTE)__	};return,the,flash,map,manager,instance,to,save,flash,attributes,with,before,a,redirect,param,request,the,current,request,return,a,link,flash,map,manager,instance,never,code,null,within,a,dispatcher,servlet,request;public,static,flash,map,manager,get,flash,map,manager,http,servlet,request,request,return,flash,map,manager,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMapManager getFlashMapManager(HttpServletRequest request);1461047077;Return the FlashMapManager instance to save flash attributes with_before a redirect._@param request the current request_@return a {@link FlashMapManager} instance (never {@code null} within a DispatcherServlet request);public static FlashMapManager getFlashMapManager(HttpServletRequest request) {_		return (FlashMapManager) request.getAttribute(DispatcherServlet.FLASH_MAP_MANAGER_ATTRIBUTE)__	};return,the,flash,map,manager,instance,to,save,flash,attributes,with,before,a,redirect,param,request,the,current,request,return,a,link,flash,map,manager,instance,never,code,null,within,a,dispatcher,servlet,request;public,static,flash,map,manager,get,flash,map,manager,http,servlet,request,request,return,flash,map,manager,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMapManager getFlashMapManager(HttpServletRequest request);1467726769;Return the FlashMapManager instance to save flash attributes with_before a redirect._@param request the current request_@return a {@link FlashMapManager} instance (never {@code null} within a DispatcherServlet request);public static FlashMapManager getFlashMapManager(HttpServletRequest request) {_		return (FlashMapManager) request.getAttribute(DispatcherServlet.FLASH_MAP_MANAGER_ATTRIBUTE)__	};return,the,flash,map,manager,instance,to,save,flash,attributes,with,before,a,redirect,param,request,the,current,request,return,a,link,flash,map,manager,instance,never,code,null,within,a,dispatcher,servlet,request;public,static,flash,map,manager,get,flash,map,manager,http,servlet,request,request,return,flash,map,manager,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMapManager getFlashMapManager(HttpServletRequest request);1487706257;Return the {@code FlashMapManager} instance to save flash attributes._<p>As of 5.0 the convenience method {@link #saveOutputFlashMap} may be_used to save the "output" FlashMap._@param request the current request_@return a {@link FlashMapManager} instance, never {@code null} within a_{@code DispatcherServlet}-handled request;public static FlashMapManager getFlashMapManager(HttpServletRequest request) {_		return (FlashMapManager) request.getAttribute(DispatcherServlet.FLASH_MAP_MANAGER_ATTRIBUTE)__	};return,the,code,flash,map,manager,instance,to,save,flash,attributes,p,as,of,5,0,the,convenience,method,link,save,output,flash,map,may,be,used,to,save,the,output,flash,map,param,request,the,current,request,return,a,link,flash,map,manager,instance,never,code,null,within,a,code,dispatcher,servlet,handled,request;public,static,flash,map,manager,get,flash,map,manager,http,servlet,request,request,return,flash,map,manager,request,get,attribute,dispatcher,servlet
RequestContextUtils -> public static FlashMapManager getFlashMapManager(HttpServletRequest request);1495868221;Return the {@code FlashMapManager} instance to save flash attributes._<p>As of 5.0 the convenience method {@link #saveOutputFlashMap} may be_used to save the "output" FlashMap._@param request the current request_@return a {@link FlashMapManager} instance, never {@code null} within a_{@code DispatcherServlet}-handled request;public static FlashMapManager getFlashMapManager(HttpServletRequest request) {_		return (FlashMapManager) request.getAttribute(DispatcherServlet.FLASH_MAP_MANAGER_ATTRIBUTE)__	};return,the,code,flash,map,manager,instance,to,save,flash,attributes,p,as,of,5,0,the,convenience,method,link,save,output,flash,map,may,be,used,to,save,the,output,flash,map,param,request,the,current,request,return,a,link,flash,map,manager,instance,never,code,null,within,a,code,dispatcher,servlet,handled,request;public,static,flash,map,manager,get,flash,map,manager,http,servlet,request,request,return,flash,map,manager,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @Nullable 	public static LocaleResolver getLocaleResolver(HttpServletRequest request);1495868221;Return the LocaleResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current LocaleResolver, or {@code null} if not found;@Nullable_	public static LocaleResolver getLocaleResolver(HttpServletRequest request) {_		return (LocaleResolver) request.getAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE)__	};return,the,locale,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,locale,resolver,or,code,null,if,not,found;nullable,public,static,locale,resolver,get,locale,resolver,http,servlet,request,request,return,locale,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @Nullable 	public static LocaleResolver getLocaleResolver(HttpServletRequest request);1496837955;Return the LocaleResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current LocaleResolver, or {@code null} if not found;@Nullable_	public static LocaleResolver getLocaleResolver(HttpServletRequest request) {_		return (LocaleResolver) request.getAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE)__	};return,the,locale,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,locale,resolver,or,code,null,if,not,found;nullable,public,static,locale,resolver,get,locale,resolver,http,servlet,request,request,return,locale,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @Nullable 	public static LocaleResolver getLocaleResolver(HttpServletRequest request);1530174524;Return the LocaleResolver that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current LocaleResolver, or {@code null} if not found;@Nullable_	public static LocaleResolver getLocaleResolver(HttpServletRequest request) {_		return (LocaleResolver) request.getAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE)__	};return,the,locale,resolver,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,locale,resolver,or,code,null,if,not,found;nullable,public,static,locale,resolver,get,locale,resolver,http,servlet,request,request,return,locale,resolver,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static Map<String, ?> getInputFlashMap(HttpServletRequest request);1495868221;Return read-only "input" flash attributes from request before redirect._@param request current request_@return a read-only Map, or {@code null} if not found_@see FlashMap;@SuppressWarnings("unchecked")_	@Nullable_	public static Map<String, ?> getInputFlashMap(HttpServletRequest request) {_		return (Map<String, ?>) request.getAttribute(DispatcherServlet.INPUT_FLASH_MAP_ATTRIBUTE)__	};return,read,only,input,flash,attributes,from,request,before,redirect,param,request,current,request,return,a,read,only,map,or,code,null,if,not,found,see,flash,map;suppress,warnings,unchecked,nullable,public,static,map,string,get,input,flash,map,http,servlet,request,request,return,map,string,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static Map<String, ?> getInputFlashMap(HttpServletRequest request);1496837955;Return read-only "input" flash attributes from request before redirect._@param request current request_@return a read-only Map, or {@code null} if not found_@see FlashMap;@SuppressWarnings("unchecked")_	@Nullable_	public static Map<String, ?> getInputFlashMap(HttpServletRequest request) {_		return (Map<String, ?>) request.getAttribute(DispatcherServlet.INPUT_FLASH_MAP_ATTRIBUTE)__	};return,read,only,input,flash,attributes,from,request,before,redirect,param,request,current,request,return,a,read,only,map,or,code,null,if,not,found,see,flash,map;suppress,warnings,unchecked,nullable,public,static,map,string,get,input,flash,map,http,servlet,request,request,return,map,string,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static Map<String, ?> getInputFlashMap(HttpServletRequest request);1530174524;Return read-only "input" flash attributes from request before redirect._@param request current request_@return a read-only Map, or {@code null} if not found_@see FlashMap;@SuppressWarnings("unchecked")_	@Nullable_	public static Map<String, ?> getInputFlashMap(HttpServletRequest request) {_		return (Map<String, ?>) request.getAttribute(DispatcherServlet.INPUT_FLASH_MAP_ATTRIBUTE)__	};return,read,only,input,flash,attributes,from,request,before,redirect,param,request,current,request,return,a,read,only,map,or,code,null,if,not,found,see,flash,map;suppress,warnings,unchecked,nullable,public,static,map,string,get,input,flash,map,http,servlet,request,request,return,map,string,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @Nullable 	public static ThemeSource getThemeSource(HttpServletRequest request);1496837955;Return the ThemeSource that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeSource;@Nullable_	public static ThemeSource getThemeSource(HttpServletRequest request) {_		return (ThemeSource) request.getAttribute(DispatcherServlet.THEME_SOURCE_ATTRIBUTE)__	};return,the,theme,source,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,source;nullable,public,static,theme,source,get,theme,source,http,servlet,request,request,return,theme,source,request,get,attribute,dispatcher,servlet
RequestContextUtils -> @Nullable 	public static ThemeSource getThemeSource(HttpServletRequest request);1530174524;Return the ThemeSource that has been bound to the request by the_DispatcherServlet._@param request current HTTP request_@return the current ThemeSource;@Nullable_	public static ThemeSource getThemeSource(HttpServletRequest request) {_		return (ThemeSource) request.getAttribute(DispatcherServlet.THEME_SOURCE_ATTRIBUTE)__	};return,the,theme,source,that,has,been,bound,to,the,request,by,the,dispatcher,servlet,param,request,current,http,request,return,the,current,theme,source;nullable,public,static,theme,source,get,theme,source,http,servlet,request,request,return,theme,source,request,get,attribute,dispatcher,servlet
