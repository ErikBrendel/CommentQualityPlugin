# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources);1409279558;Configure a chain of resource resolvers and transformers to use. This_can be useful for example to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,this,resource,chain,registration,new,resource,chain,registration,cache,resources,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources);1409326189;Configure a chain of resource resolvers and transformers to use. This_can be useful for example to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,this,resource,chain,registration,new,resource,chain,registration,cache,resources,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources);1409817933;Configure a chain of resource resolvers and transformers to use. This_can be useful for example to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy)._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,this,resource,chain,registration,new,resource,chain,registration,cache,resources,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources);1413848647;Configure a chain of resource resolvers and transformers to use. This_can be useful for example to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy)._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,this,resource,chain,registration,new,resource,chain,registration,cache,resources,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources);1427130064;Configure a chain of resource resolvers and transformers to use. This_can be useful for example to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy)._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,this,resource,chain,registration,new,resource,chain,registration,cache,resources,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources);1435584749;Configure a chain of resource resolvers and transformers to use. This_can be useful for example to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy)._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,this,resource,chain,registration,new,resource,chain,registration,cache,resources,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources);1435586278;Configure a chain of resource resolvers and transformers to use. This_can be useful, for example, to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy)_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,this,resource,chain,registration,new,resource,chain,registration,cache,resources,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources);1467730834;Configure a chain of resource resolvers and transformers to use. This_can be useful, for example, to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy)_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,this,resource,chain,registration,new,resource,chain,registration,cache,resources,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources);1498780456;Configure a chain of resource resolvers and transformers to use. This_can be useful, for example, to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy)_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,this,resource,chain,registration,new,resource,chain,registration,cache,resources,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources);1510251306;Configure a chain of resource resolvers and transformers to use. This_can be useful, for example, to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy)_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,this,resource,chain,registration,new,resource,chain,registration,cache,resources,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources);1510940038;Configure a chain of resource resolvers and transformers to use. This_can be useful, for example, to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy)_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,this,resource,chain,registration,new,resource,chain,registration,cache,resources,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources);1511122589;Configure a chain of resource resolvers and transformers to use. This_can be useful, for example, to apply a version strategy to resource URLs._<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations._@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy)_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,this,resource,chain,registration,new,resource,chain,registration,cache,resources,return,this,resource,chain,registration
ResourceHandlerRegistration -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1380330593;Configure the list of {@link ResourceResolver}s to use._<p>_By default {@link PathResourceResolver} is configured. If using this property, it_is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers = resourceResolvers__	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,resource,resolvers
ResourceHandlerRegistration -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1380653018;Configure the list of {@link ResourceResolver}s to use._<p>_By default {@link PathResourceResolver} is configured. If using this property, it_is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers = resourceResolvers__	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,resource,resolvers
ResourceHandlerRegistration -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1397706164;Configure the list of {@link ResourceResolver}s to use._<p>_By default {@link PathResourceResolver} is configured. If using this property, it_is recommended to add {@link PathResourceResolver} as the last resolver._@since 4.1;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers = resourceResolvers__	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver,since,4,1;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,resource,resolvers
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String... resourceLocations);1427130064;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String... resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String... resourceLocations);1435584749;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String... resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String... resourceLocations);1435586278;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String... resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String... resourceLocations);1467730834;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String... resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String... resourceLocations);1498780456;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String... resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String... resourceLocations);1510251306;Add one or more resource locations from which to serve static content._Each location must point to a valid directory. Multiple locations may_be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}}_allows resources to be served both from the web application root and_from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the_web application root taking precedence._<p>For {@link org.springframework.core.io.UrlResource URL-based resources}_(e.g. files, HTTP URLs, etc) this method supports a special prefix to_indicate the charset associated with the URL so that relative paths_appended to it can be encoded correctly, e.g._{@code [charset=Windows-31J]http://example.org/path}._@return the same {@link ResourceHandlerRegistration} instance, for_chained method invocation;public ResourceHandlerRegistration addResourceLocations(String... resourceLocations) {_		MvcNamespaceUtils.loadResourceLocations(_				resourceLocations, this.resourceLoader, this.locations, this.locationCharsets)__		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,p,for,link,org,springframework,core,io,url,resource,url,based,resources,e,g,files,http,urls,etc,this,method,supports,a,special,prefix,to,indicate,the,charset,associated,with,the,url,so,that,relative,paths,appended,to,it,can,be,encoded,correctly,e,g,code,charset,windows,31j,http,example,org,path,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,mvc,namespace,utils,load,resource,locations,resource,locations,this,resource,loader,this,locations,this,location,charsets,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String... resourceLocations);1510940038;Add one or more resource locations from which to serve static content._Each location must point to a valid directory. Multiple locations may_be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}}_allows resources to be served both from the web application root and_from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the_web application root taking precedence._<p>For {@link org.springframework.core.io.UrlResource URL-based resources}_(e.g. files, HTTP URLs, etc) this method supports a special prefix to_indicate the charset associated with the URL so that relative paths_appended to it can be encoded correctly, e.g._{@code [charset=Windows-31J]http://example.org/path}._@return the same {@link ResourceHandlerRegistration} instance, for_chained method invocation;public ResourceHandlerRegistration addResourceLocations(String... resourceLocations) {_		this.locationValues.addAll(Arrays.asList(resourceLocations))__		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,p,for,link,org,springframework,core,io,url,resource,url,based,resources,e,g,files,http,urls,etc,this,method,supports,a,special,prefix,to,indicate,the,charset,associated,with,the,url,so,that,relative,paths,appended,to,it,can,be,encoded,correctly,e,g,code,charset,windows,31j,http,example,org,path,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,this,location,values,add,all,arrays,as,list,resource,locations,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String... resourceLocations);1511122589;Add one or more resource locations from which to serve static content._Each location must point to a valid directory. Multiple locations may_be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}}_allows resources to be served both from the web application root and_from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the_web application root taking precedence._<p>For {@link org.springframework.core.io.UrlResource URL-based resources}_(e.g. files, HTTP URLs, etc) this method supports a special prefix to_indicate the charset associated with the URL so that relative paths_appended to it can be encoded correctly, e.g._{@code [charset=Windows-31J]http://example.org/path}._@return the same {@link ResourceHandlerRegistration} instance, for_chained method invocation;public ResourceHandlerRegistration addResourceLocations(String... resourceLocations) {_		this.locationValues.addAll(Arrays.asList(resourceLocations))__		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,p,for,link,org,springframework,core,io,url,resource,url,based,resources,e,g,files,http,urls,etc,this,method,supports,a,special,prefix,to,indicate,the,charset,associated,with,the,url,so,that,relative,paths,appended,to,it,can,be,encoded,correctly,e,g,code,charset,windows,31j,http,example,org,path,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,this,location,values,add,all,arrays,as,list,resource,locations,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration(String... pathPatterns);1510940038;Create a {@link ResourceHandlerRegistration} instance._@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(String... pathPatterns);1511122589;Create a {@link ResourceHandlerRegistration} instance._@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,path,patterns,path,patterns
ResourceHandlerRegistration -> private Cache getDefaultResourceCache();1406912647;Return a default instance of a {@code ConcurrentCacheMap} for_caching resolved/transformed resources.;private Cache getDefaultResourceCache() {_		if(this.resourceCache == null) {_			this.resourceCache = new ConcurrentMapCache(RESOURCE_CACHE_NAME)__		}_		return this.resourceCache__	};return,a,default,instance,of,a,code,concurrent,cache,map,for,caching,resolved,transformed,resources;private,cache,get,default,resource,cache,if,this,resource,cache,null,this,resource,cache,new,concurrent,map,cache,return,this,resource,cache
ResourceHandlerRegistration -> private Cache getDefaultResourceCache();1409160643;Return a default instance of a {@code ConcurrentCacheMap} for_caching resolved/transformed resources.;private Cache getDefaultResourceCache() {_		if(this.resourceCache == null) {_			this.resourceCache = new ConcurrentMapCache(RESOURCE_CACHE_NAME)__		}_		return this.resourceCache__	};return,a,default,instance,of,a,code,concurrent,cache,map,for,caching,resolved,transformed,resources;private,cache,get,default,resource,cache,if,this,resource,cache,null,this,resource,cache,new,concurrent,map,cache,return,this,resource,cache
ResourceHandlerRegistration -> private Cache getDefaultResourceCache();1409250308;Return a default instance of a {@code ConcurrentCacheMap} for_caching resolved/transformed resources.;private Cache getDefaultResourceCache() {_		if(this.resourceCache == null) {_			this.resourceCache = new ConcurrentMapCache(RESOURCE_CACHE_NAME)__		}_		return this.resourceCache__	};return,a,default,instance,of,a,code,concurrent,cache,map,for,caching,resolved,transformed,resources;private,cache,get,default,resource,cache,if,this,resource,cache,null,this,resource,cache,new,concurrent,map,cache,return,this,resource,cache
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache);1409279558;Configure a chain of resource resolvers and transformers to use. This_can be useful for example to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy._@param cache the cache to use for storing resolved and transformed resources__by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache}_is used._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources, cache)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,param,cache,the,cache,to,use,for,storing,resolved,and,transformed,resources,by,default,a,link,org,springframework,cache,concurrent,concurrent,map,cache,is,used,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,cache,cache,this,resource,chain,registration,new,resource,chain,registration,cache,resources,cache,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache);1409326189;Configure a chain of resource resolvers and transformers to use. This_can be useful for example to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy._@param cache the cache to use for storing resolved and transformed resources__by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache}_is used._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources, cache)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,param,cache,the,cache,to,use,for,storing,resolved,and,transformed,resources,by,default,a,link,org,springframework,cache,concurrent,concurrent,map,cache,is,used,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,cache,cache,this,resource,chain,registration,new,resource,chain,registration,cache,resources,cache,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache);1409817933;Configure a chain of resource resolvers and transformers to use. This_can be useful for example to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy._@param cache the cache to use for storing resolved and transformed resources__by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache}_is used._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources, cache)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,param,cache,the,cache,to,use,for,storing,resolved,and,transformed,resources,by,default,a,link,org,springframework,cache,concurrent,concurrent,map,cache,is,used,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,cache,cache,this,resource,chain,registration,new,resource,chain,registration,cache,resources,cache,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache);1413848647;Configure a chain of resource resolvers and transformers to use. This_can be useful for example to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy._@param cache the cache to use for storing resolved and transformed resources__by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache}_is used._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources, cache)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,param,cache,the,cache,to,use,for,storing,resolved,and,transformed,resources,by,default,a,link,org,springframework,cache,concurrent,concurrent,map,cache,is,used,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,cache,cache,this,resource,chain,registration,new,resource,chain,registration,cache,resources,cache,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache);1427130064;Configure a chain of resource resolvers and transformers to use. This_can be useful for example to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy._@param cache the cache to use for storing resolved and transformed resources__by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache}_is used._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources, cache)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,param,cache,the,cache,to,use,for,storing,resolved,and,transformed,resources,by,default,a,link,org,springframework,cache,concurrent,concurrent,map,cache,is,used,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,cache,cache,this,resource,chain,registration,new,resource,chain,registration,cache,resources,cache,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache);1435584749;Configure a chain of resource resolvers and transformers to use. This_can be useful for example to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy._@param cache the cache to use for storing resolved and transformed resources__by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache}_is used. As Resources aren't serializable and can be dependent of the application host,_one should not use a distributed cache but rather an in-memory cache._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources, cache)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,param,cache,the,cache,to,use,for,storing,resolved,and,transformed,resources,by,default,a,link,org,springframework,cache,concurrent,concurrent,map,cache,is,used,as,resources,aren,t,serializable,and,can,be,dependent,of,the,application,host,one,should,not,use,a,distributed,cache,but,rather,an,in,memory,cache,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,cache,cache,this,resource,chain,registration,new,resource,chain,registration,cache,resources,cache,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache);1435586278;Configure a chain of resource resolvers and transformers to use. This_can be useful, for example, to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy_@param cache the cache to use for storing resolved and transformed resources__by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache}_is used. Since Resources aren't serializable and can be dependent on the_application host, one should not use a distributed cache but rather an_in-memory cache._@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources, cache)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,param,cache,the,cache,to,use,for,storing,resolved,and,transformed,resources,by,default,a,link,org,springframework,cache,concurrent,concurrent,map,cache,is,used,since,resources,aren,t,serializable,and,can,be,dependent,on,the,application,host,one,should,not,use,a,distributed,cache,but,rather,an,in,memory,cache,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,cache,cache,this,resource,chain,registration,new,resource,chain,registration,cache,resources,cache,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache);1467730834;Configure a chain of resource resolvers and transformers to use. This_can be useful, for example, to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy_@param cache the cache to use for storing resolved and transformed resources__by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache}_is used. Since Resources aren't serializable and can be dependent on the_application host, one should not use a distributed cache but rather an_in-memory cache._@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources, cache)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,param,cache,the,cache,to,use,for,storing,resolved,and,transformed,resources,by,default,a,link,org,springframework,cache,concurrent,concurrent,map,cache,is,used,since,resources,aren,t,serializable,and,can,be,dependent,on,the,application,host,one,should,not,use,a,distributed,cache,but,rather,an,in,memory,cache,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,cache,cache,this,resource,chain,registration,new,resource,chain,registration,cache,resources,cache,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache);1498780456;Configure a chain of resource resolvers and transformers to use. This_can be useful, for example, to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy_@param cache the cache to use for storing resolved and transformed resources__by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache}_is used. Since Resources aren't serializable and can be dependent on the_application host, one should not use a distributed cache but rather an_in-memory cache._@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources, cache)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,param,cache,the,cache,to,use,for,storing,resolved,and,transformed,resources,by,default,a,link,org,springframework,cache,concurrent,concurrent,map,cache,is,used,since,resources,aren,t,serializable,and,can,be,dependent,on,the,application,host,one,should,not,use,a,distributed,cache,but,rather,an,in,memory,cache,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,cache,cache,this,resource,chain,registration,new,resource,chain,registration,cache,resources,cache,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache);1510251306;Configure a chain of resource resolvers and transformers to use. This_can be useful, for example, to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy_@param cache the cache to use for storing resolved and transformed resources__by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache}_is used. Since Resources aren't serializable and can be dependent on the_application host, one should not use a distributed cache but rather an_in-memory cache._@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources, cache)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,param,cache,the,cache,to,use,for,storing,resolved,and,transformed,resources,by,default,a,link,org,springframework,cache,concurrent,concurrent,map,cache,is,used,since,resources,aren,t,serializable,and,can,be,dependent,on,the,application,host,one,should,not,use,a,distributed,cache,but,rather,an,in,memory,cache,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,cache,cache,this,resource,chain,registration,new,resource,chain,registration,cache,resources,cache,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache);1510940038;Configure a chain of resource resolvers and transformers to use. This_can be useful, for example, to apply a version strategy to resource URLs.__<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations.__@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy_@param cache the cache to use for storing resolved and transformed resources__by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache}_is used. Since Resources aren't serializable and can be dependent on the_application host, one should not use a distributed cache but rather an_in-memory cache._@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources, cache)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,param,cache,the,cache,to,use,for,storing,resolved,and,transformed,resources,by,default,a,link,org,springframework,cache,concurrent,concurrent,map,cache,is,used,since,resources,aren,t,serializable,and,can,be,dependent,on,the,application,host,one,should,not,use,a,distributed,cache,but,rather,an,in,memory,cache,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,cache,cache,this,resource,chain,registration,new,resource,chain,registration,cache,resources,cache,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache);1511122589;Configure a chain of resource resolvers and transformers to use. This_can be useful, for example, to apply a version strategy to resource URLs._<p>If this method is not invoked, by default only a simple_{@link PathResourceResolver} is used in order to match URL paths to_resources under the configured locations._@param cacheResources whether to cache the result of resource resolution__setting this to "true" is recommended for production (and "false" for_development, especially when applying a version strategy_@param cache the cache to use for storing resolved and transformed resources__by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache}_is used. Since Resources aren't serializable and can be dependent on the_application host, one should not use a distributed cache but rather an_in-memory cache._@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.1;public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache) {_		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources, cache)__		return this.resourceChainRegistration__	};configure,a,chain,of,resource,resolvers,and,transformers,to,use,this,can,be,useful,for,example,to,apply,a,version,strategy,to,resource,urls,p,if,this,method,is,not,invoked,by,default,only,a,simple,link,path,resource,resolver,is,used,in,order,to,match,url,paths,to,resources,under,the,configured,locations,param,cache,resources,whether,to,cache,the,result,of,resource,resolution,setting,this,to,true,is,recommended,for,production,and,false,for,development,especially,when,applying,a,version,strategy,param,cache,the,cache,to,use,for,storing,resolved,and,transformed,resources,by,default,a,link,org,springframework,cache,concurrent,concurrent,map,cache,is,used,since,resources,aren,t,serializable,and,can,be,dependent,on,the,application,host,one,should,not,use,a,distributed,cache,but,rather,an,in,memory,cache,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,1;public,resource,chain,registration,resource,chain,boolean,cache,resources,cache,cache,this,resource,chain,registration,new,resource,chain,registration,cache,resources,cache,return,this,resource,chain,registration
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1328020251;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1356735495;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1380330593;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1380653018;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1381195788;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1397706164;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1398398484;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1401238462;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1406912647;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1409160643;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1409250308;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1409279558;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1409326189;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1409817933;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1413848647;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1427130064;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1435584749;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1435586278;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1467730834;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1498780456;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1510251306;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1510940038;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod);1511122589;Specify the cache period for the resources served by the resource handler, in seconds. The default is to not_send any cache headers but to rely on last-modified timestamps only. Set to 0 in order to send cache headers_that prevent caching, or to a positive number of seconds to send cache headers with the given max-age value._@param cachePeriod the time to cache resources in seconds_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation;public ResourceHandlerRegistration setCachePeriod(Integer cachePeriod) {_		this.cachePeriod = cachePeriod__		return this__	};specify,the,cache,period,for,the,resources,served,by,the,resource,handler,in,seconds,the,default,is,to,not,send,any,cache,headers,but,to,rely,on,last,modified,timestamps,only,set,to,0,in,order,to,send,cache,headers,that,prevent,caching,or,to,a,positive,number,of,seconds,to,send,cache,headers,with,the,given,max,age,value,param,cache,period,the,time,to,cache,resources,in,seconds,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,set,cache,period,integer,cache,period,this,cache,period,cache,period,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1328020251;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1356735495;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1380330593;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1380653018;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1381195788;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1397706164;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1398398484;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1401238462;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1406912647;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1409160643;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1409250308;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1409279558;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1409326189;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1409817933;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1413848647;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1427130064;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1435584749;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1435586278;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1467730834;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1498780456;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns);1510251306;Create a {@link ResourceHandlerRegistration} instance._@param resourceLoader a resource loader for turning a String location into a {@link Resource}_@param pathPatterns one or more resource URL path patterns;public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {_		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling.")__		this.resourceLoader = resourceLoader__		this.pathPatterns = pathPatterns__	};create,a,link,resource,handler,registration,instance,param,resource,loader,a,resource,loader,for,turning,a,string,location,into,a,link,resource,param,path,patterns,one,or,more,resource,url,path,patterns;public,resource,handler,registration,resource,loader,resource,loader,string,path,patterns,assert,not,empty,path,patterns,at,least,one,path,pattern,is,required,for,resource,handling,this,resource,loader,resource,loader,this,path,patterns,path,patterns
ResourceHandlerRegistration -> public ResourceHandlerRegistration addTransformer(ResourceTransformer transformer);1406912647;Add a {@code ResourceTransformer} to the chain, allowing to transform the content_of server-side resources when serving them to HTTP clients.__<p>{@link ResourceTransformer}s are registered, in the following order:_<ol>_<li>a {@link org.springframework.web.servlet.resource.CachingResourceTransformer}_for caching the results of the next Transformers_ this transformer is only registered if you_did not provide your own instance of {@link CachingResourceTransformer} at the beginning of the chain</li>_<li>a {@link CssLinkResourceTransformer} for updating links within CSS files_ this transformer_is only registered if a versioning configuration has been applied with {@code addVersionStrategy},_{@code addVersion}, etc</li>_<li>all {@code ResourceTransformer}s registered using this method, in the order of methods calls</li>_</ol>__@param transformer a {@link ResourceTransformer} to add to the chain of transformers_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@see ResourceResolver_@since 4.1;public ResourceHandlerRegistration addTransformer(ResourceTransformer transformer) {_		Assert.notNull(transformer, "The provided ResourceTransformer should not be null")__		this.customTransformers.add(transformer)__		return this__	};add,a,code,resource,transformer,to,the,chain,allowing,to,transform,the,content,of,server,side,resources,when,serving,them,to,http,clients,p,link,resource,transformer,s,are,registered,in,the,following,order,ol,li,a,link,org,springframework,web,servlet,resource,caching,resource,transformer,for,caching,the,results,of,the,next,transformers,this,transformer,is,only,registered,if,you,did,not,provide,your,own,instance,of,link,caching,resource,transformer,at,the,beginning,of,the,chain,li,li,a,link,css,link,resource,transformer,for,updating,links,within,css,files,this,transformer,is,only,registered,if,a,versioning,configuration,has,been,applied,with,code,add,version,strategy,code,add,version,etc,li,li,all,code,resource,transformer,s,registered,using,this,method,in,the,order,of,methods,calls,li,ol,param,transformer,a,link,resource,transformer,to,add,to,the,chain,of,transformers,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,see,resource,resolver,since,4,1;public,resource,handler,registration,add,transformer,resource,transformer,transformer,assert,not,null,transformer,the,provided,resource,transformer,should,not,be,null,this,custom,transformers,add,transformer,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addTransformer(ResourceTransformer transformer);1409160643;Add a {@code ResourceTransformer} to the chain, allowing to transform the content_of server-side resources when serving them to HTTP clients.__<p>{@link ResourceTransformer}s are registered, in the following order:_<ol>_<li>a {@link org.springframework.web.servlet.resource.CachingResourceTransformer}_for caching the results of the next Transformers_ this transformer is only registered if you_did not provide your own instance of {@link CachingResourceTransformer} at the beginning of the chain</li>_<li>a {@link CssLinkResourceTransformer} for updating links within CSS files_ this transformer_is only registered if a versioning configuration has been applied with {@code addVersionStrategy},_{@code addVersion}, etc</li>_<li>all {@code ResourceTransformer}s registered using this method, in the order of methods calls</li>_</ol>__@param transformer a {@link ResourceTransformer} to add to the chain of transformers_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@see ResourceResolver_@since 4.1;public ResourceHandlerRegistration addTransformer(ResourceTransformer transformer) {_		Assert.notNull(transformer, "The provided ResourceTransformer should not be null")__		this.customTransformers.add(transformer)__		return this__	};add,a,code,resource,transformer,to,the,chain,allowing,to,transform,the,content,of,server,side,resources,when,serving,them,to,http,clients,p,link,resource,transformer,s,are,registered,in,the,following,order,ol,li,a,link,org,springframework,web,servlet,resource,caching,resource,transformer,for,caching,the,results,of,the,next,transformers,this,transformer,is,only,registered,if,you,did,not,provide,your,own,instance,of,link,caching,resource,transformer,at,the,beginning,of,the,chain,li,li,a,link,css,link,resource,transformer,for,updating,links,within,css,files,this,transformer,is,only,registered,if,a,versioning,configuration,has,been,applied,with,code,add,version,strategy,code,add,version,etc,li,li,all,code,resource,transformer,s,registered,using,this,method,in,the,order,of,methods,calls,li,ol,param,transformer,a,link,resource,transformer,to,add,to,the,chain,of,transformers,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,see,resource,resolver,since,4,1;public,resource,handler,registration,add,transformer,resource,transformer,transformer,assert,not,null,transformer,the,provided,resource,transformer,should,not,be,null,this,custom,transformers,add,transformer,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addTransformer(ResourceTransformer transformer);1409250308;Add a {@code ResourceTransformer} to the chain, allowing to transform the content_of server-side resources when serving them to HTTP clients.__<p>{@link ResourceTransformer}s are registered, in the following order:_<ol>_<li>a {@link org.springframework.web.servlet.resource.CachingResourceTransformer}_for caching the results of the next Transformers_ this transformer is only registered if you_did not provide your own instance of {@link CachingResourceTransformer} at the beginning of the chain</li>_<li>a {@link CssLinkResourceTransformer} for updating links within CSS files_ this transformer_is only registered if a versioning configuration has been applied with {@code addVersionStrategy},_{@code addVersion}, etc</li>_<li>all {@code ResourceTransformer}s registered using this method, in the order of methods calls</li>_</ol>__@param transformer a {@link ResourceTransformer} to add to the chain of transformers_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@see ResourceResolver_@since 4.1;public ResourceHandlerRegistration addTransformer(ResourceTransformer transformer) {_		Assert.notNull(transformer, "The provided ResourceTransformer should not be null")__		this.customTransformers.add(transformer)__		if (transformer instanceof CssLinkResourceTransformer) {_			this.hasCssLinkTransformer = true__		}_		return this__	};add,a,code,resource,transformer,to,the,chain,allowing,to,transform,the,content,of,server,side,resources,when,serving,them,to,http,clients,p,link,resource,transformer,s,are,registered,in,the,following,order,ol,li,a,link,org,springframework,web,servlet,resource,caching,resource,transformer,for,caching,the,results,of,the,next,transformers,this,transformer,is,only,registered,if,you,did,not,provide,your,own,instance,of,link,caching,resource,transformer,at,the,beginning,of,the,chain,li,li,a,link,css,link,resource,transformer,for,updating,links,within,css,files,this,transformer,is,only,registered,if,a,versioning,configuration,has,been,applied,with,code,add,version,strategy,code,add,version,etc,li,li,all,code,resource,transformer,s,registered,using,this,method,in,the,order,of,methods,calls,li,ol,param,transformer,a,link,resource,transformer,to,add,to,the,chain,of,transformers,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,see,resource,resolver,since,4,1;public,resource,handler,registration,add,transformer,resource,transformer,transformer,assert,not,null,transformer,the,provided,resource,transformer,should,not,be,null,this,custom,transformers,add,transformer,if,transformer,instanceof,css,link,resource,transformer,this,has,css,link,transformer,true,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResolver(ResourceResolver resolver);1406912647;Add a {@code ResourceResolver} to the chain, allowing to resolve server-side resources from_HTTP requests.__<p>{@link ResourceResolver}s are registered, in the following order:_<ol>_<li>a {@link org.springframework.web.servlet.resource.CachingResourceResolver}_for caching the results of the next Resolvers_ this resolver is only registered if you_did not provide your own instance of {@link CachingResourceResolver} at the beginning of the chain</li>_<li>all {@code ResourceResolver}s registered using this method, in the order of methods calls</li>_<li>a {@link VersionResourceResolver} if a versioning configuration has been applied with_{@code addVersionStrategy}, {@code addVersion}, etc.</li>_<li>a {@link PathResourceResolver} for resolving resources on the file system</li>_</ol>__@param resolver a {@link ResourceResolver} to add to the chain of resolvers_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@see ResourceResolver_@since 4.1;public ResourceHandlerRegistration addResolver(ResourceResolver resolver) {_		Assert.notNull(resolver, "The provided ResourceResolver should not be null")__		this.customResolvers.add(resolver)__		return this__	};add,a,code,resource,resolver,to,the,chain,allowing,to,resolve,server,side,resources,from,http,requests,p,link,resource,resolver,s,are,registered,in,the,following,order,ol,li,a,link,org,springframework,web,servlet,resource,caching,resource,resolver,for,caching,the,results,of,the,next,resolvers,this,resolver,is,only,registered,if,you,did,not,provide,your,own,instance,of,link,caching,resource,resolver,at,the,beginning,of,the,chain,li,li,all,code,resource,resolver,s,registered,using,this,method,in,the,order,of,methods,calls,li,li,a,link,version,resource,resolver,if,a,versioning,configuration,has,been,applied,with,code,add,version,strategy,code,add,version,etc,li,li,a,link,path,resource,resolver,for,resolving,resources,on,the,file,system,li,ol,param,resolver,a,link,resource,resolver,to,add,to,the,chain,of,resolvers,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,see,resource,resolver,since,4,1;public,resource,handler,registration,add,resolver,resource,resolver,resolver,assert,not,null,resolver,the,provided,resource,resolver,should,not,be,null,this,custom,resolvers,add,resolver,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResolver(ResourceResolver resolver);1409160643;Add a {@code ResourceResolver} to the chain, allowing to resolve server-side resources from_HTTP requests.__<p>{@link ResourceResolver}s are registered, in the following order:_<ol>_<li>a {@link org.springframework.web.servlet.resource.CachingResourceResolver}_for caching the results of the next Resolvers_ this resolver is only registered if you_did not provide your own instance of {@link CachingResourceResolver} at the beginning of the chain</li>_<li>all {@code ResourceResolver}s registered using this method, in the order of methods calls</li>_<li>a {@link VersionResourceResolver} if a versioning configuration has been applied with_{@code addVersionStrategy}, {@code addVersion}, etc.</li>_<li>a {@link PathResourceResolver} for resolving resources on the file system</li>_</ol>__@param resolver a {@link ResourceResolver} to add to the chain of resolvers_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@see ResourceResolver_@since 4.1;public ResourceHandlerRegistration addResolver(ResourceResolver resolver) {_		Assert.notNull(resolver, "The provided ResourceResolver should not be null")__		this.customResolvers.add(resolver)__		return this__	};add,a,code,resource,resolver,to,the,chain,allowing,to,resolve,server,side,resources,from,http,requests,p,link,resource,resolver,s,are,registered,in,the,following,order,ol,li,a,link,org,springframework,web,servlet,resource,caching,resource,resolver,for,caching,the,results,of,the,next,resolvers,this,resolver,is,only,registered,if,you,did,not,provide,your,own,instance,of,link,caching,resource,resolver,at,the,beginning,of,the,chain,li,li,all,code,resource,resolver,s,registered,using,this,method,in,the,order,of,methods,calls,li,li,a,link,version,resource,resolver,if,a,versioning,configuration,has,been,applied,with,code,add,version,strategy,code,add,version,etc,li,li,a,link,path,resource,resolver,for,resolving,resources,on,the,file,system,li,ol,param,resolver,a,link,resource,resolver,to,add,to,the,chain,of,resolvers,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,see,resource,resolver,since,4,1;public,resource,handler,registration,add,resolver,resource,resolver,resolver,assert,not,null,resolver,the,provided,resource,resolver,should,not,be,null,this,custom,resolvers,add,resolver,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResolver(ResourceResolver resolver);1409250308;Add a {@code ResourceResolver} to the chain, allowing to resolve server-side resources from_HTTP requests.__<p>{@link ResourceResolver}s are registered, in the following order:_<ol>_<li>a {@link org.springframework.web.servlet.resource.CachingResourceResolver}_for caching the results of the next Resolvers_ this resolver is only registered if you_did not provide your own instance of {@link CachingResourceResolver} at the beginning of the chain</li>_<li>all {@code ResourceResolver}s registered using this method, in the order of methods calls</li>_<li>a {@link VersionResourceResolver} if a versioning configuration has been applied with_{@code addVersionStrategy}, {@code addVersion}, etc.</li>_<li>a {@link PathResourceResolver} for resolving resources on the file system</li>_</ol>__@param resolver a {@link ResourceResolver} to add to the chain of resolvers_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@see ResourceResolver_@since 4.1;public ResourceHandlerRegistration addResolver(ResourceResolver resolver) {_		Assert.notNull(resolver, "The provided ResourceResolver should not be null")__		this.customResolvers.add(resolver)__		if (resolver instanceof VersionResourceResolver) {_			this.hasVersionResolver = true__		}_		return this__	};add,a,code,resource,resolver,to,the,chain,allowing,to,resolve,server,side,resources,from,http,requests,p,link,resource,resolver,s,are,registered,in,the,following,order,ol,li,a,link,org,springframework,web,servlet,resource,caching,resource,resolver,for,caching,the,results,of,the,next,resolvers,this,resolver,is,only,registered,if,you,did,not,provide,your,own,instance,of,link,caching,resource,resolver,at,the,beginning,of,the,chain,li,li,all,code,resource,resolver,s,registered,using,this,method,in,the,order,of,methods,calls,li,li,a,link,version,resource,resolver,if,a,versioning,configuration,has,been,applied,with,code,add,version,strategy,code,add,version,etc,li,li,a,link,path,resource,resolver,for,resolving,resources,on,the,file,system,li,ol,param,resolver,a,link,resource,resolver,to,add,to,the,chain,of,resolvers,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,see,resource,resolver,since,4,1;public,resource,handler,registration,add,resolver,resource,resolver,resolver,assert,not,null,resolver,the,provided,resource,resolver,should,not,be,null,this,custom,resolvers,add,resolver,if,resolver,instanceof,version,resource,resolver,this,has,version,resolver,true,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration enableDevMode();1406912647;Disable automatic registration of caching Resolver/Transformer, thus disabling {@code Resource} caching_if no caching Resolver/Transformer was manually registered._<p>Useful when updating static resources at runtime, i.e. during the development phase.</p>_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@see ResourceResolver_@see ResourceTransformer_@since 4.1;public ResourceHandlerRegistration enableDevMode() {_		this.isDevMode = true__		return this__	};disable,automatic,registration,of,caching,resolver,transformer,thus,disabling,code,resource,caching,if,no,caching,resolver,transformer,was,manually,registered,p,useful,when,updating,static,resources,at,runtime,i,e,during,the,development,phase,p,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,see,resource,resolver,see,resource,transformer,since,4,1;public,resource,handler,registration,enable,dev,mode,this,is,dev,mode,true,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration enableDevMode();1409160643;Disable automatic registration of caching Resolver/Transformer, thus disabling {@code Resource} caching_if no caching Resolver/Transformer was manually registered._<p>Useful when updating static resources at runtime, i.e. during the development phase.</p>_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@see ResourceResolver_@see ResourceTransformer_@since 4.1;public ResourceHandlerRegistration enableDevMode() {_		this.isDevMode = true__		return this__	};disable,automatic,registration,of,caching,resolver,transformer,thus,disabling,code,resource,caching,if,no,caching,resolver,transformer,was,manually,registered,p,useful,when,updating,static,resources,at,runtime,i,e,during,the,development,phase,p,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,see,resource,resolver,see,resource,transformer,since,4,1;public,resource,handler,registration,enable,dev,mode,this,is,dev,mode,true,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration enableDevMode();1409250308;Disable automatic registration of caching Resolver/Transformer, thus disabling {@code Resource} caching_if no caching Resolver/Transformer was manually registered._<p>Useful when updating static resources at runtime, i.e. during the development phase.</p>_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@see ResourceResolver_@see ResourceTransformer_@since 4.1;public ResourceHandlerRegistration enableDevMode() {_		this.isDevMode = true__		return this__	};disable,automatic,registration,of,caching,resolver,transformer,thus,disabling,code,resource,caching,if,no,caching,resolver,transformer,was,manually,registered,p,useful,when,updating,static,resources,at,runtime,i,e,during,the,development,phase,p,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,see,resource,resolver,see,resource,transformer,since,4,1;public,resource,handler,registration,enable,dev,mode,this,is,dev,mode,true,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String...resourceLocations);1328020251;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String...resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String...resourceLocations);1356735495;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String...resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String...resourceLocations);1380330593;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String...resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String...resourceLocations);1380653018;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String...resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String...resourceLocations);1381195788;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String...resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String...resourceLocations);1397706164;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String...resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String...resourceLocations);1398398484;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String...resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String...resourceLocations);1401238462;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String...resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String...resourceLocations);1406912647;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String...resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String...resourceLocations);1409160643;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String...resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String...resourceLocations);1409250308;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String...resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String...resourceLocations);1409279558;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String...resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String...resourceLocations);1409326189;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String...resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String...resourceLocations);1409817933;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String...resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addResourceLocations(String...resourceLocations);1413848647;Add one or more resource locations from which to serve static content. Each location must point to a valid_directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked_for a given resource in the order specified._<p>For example, {{@code "/"}, {@code "classpath:/META-INF/public-web-resources/"}} allows resources to_be served both from the web application root and from any JAR on the classpath that contains a_{@code /META-INF/public-web-resources/} directory, with resources in the web application root taking precedence._@return the same {@link ResourceHandlerRegistration} instance for chained method invocation;public ResourceHandlerRegistration addResourceLocations(String...resourceLocations) {_		for (String location : resourceLocations) {_			this.locations.add(resourceLoader.getResource(location))__		}_		return this__	};add,one,or,more,resource,locations,from,which,to,serve,static,content,each,location,must,point,to,a,valid,directory,multiple,locations,may,be,specified,as,a,comma,separated,list,and,the,locations,will,be,checked,for,a,given,resource,in,the,order,specified,p,for,example,code,code,classpath,meta,inf,public,web,resources,allows,resources,to,be,served,both,from,the,web,application,root,and,from,any,jar,on,the,classpath,that,contains,a,code,meta,inf,public,web,resources,directory,with,resources,in,the,web,application,root,taking,precedence,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation;public,resource,handler,registration,add,resource,locations,string,resource,locations,for,string,location,resource,locations,this,locations,add,resource,loader,get,resource,location,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl);1427130064;Specify the {@link org.springframework.http.CacheControl} which should be used_by the the resource handler.__<p>Setting a custom value here will override the configuration set with {@link #setCachePeriod}.__@param cacheControl the CacheControl configuration to use_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation__@since 4.2;public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__		return this__	};specify,the,link,org,springframework,http,cache,control,which,should,be,used,by,the,the,resource,handler,p,setting,a,custom,value,here,will,override,the,configuration,set,with,link,set,cache,period,param,cache,control,the,cache,control,configuration,to,use,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,2;public,resource,handler,registration,set,cache,control,cache,control,cache,control,this,cache,control,cache,control,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl);1435584749;Specify the {@link org.springframework.http.CacheControl} which should be used_by the the resource handler.__<p>Setting a custom value here will override the configuration set with {@link #setCachePeriod}.__@param cacheControl the CacheControl configuration to use_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation__@since 4.2;public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__		return this__	};specify,the,link,org,springframework,http,cache,control,which,should,be,used,by,the,the,resource,handler,p,setting,a,custom,value,here,will,override,the,configuration,set,with,link,set,cache,period,param,cache,control,the,cache,control,configuration,to,use,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,2;public,resource,handler,registration,set,cache,control,cache,control,cache,control,this,cache,control,cache,control,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl);1435586278;Specify the {@link org.springframework.http.CacheControl} which should be used_by the resource handler.__<p>Setting a custom value here will override the configuration set with {@link #setCachePeriod}.__@param cacheControl the CacheControl configuration to use_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.2;public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__		return this__	};specify,the,link,org,springframework,http,cache,control,which,should,be,used,by,the,resource,handler,p,setting,a,custom,value,here,will,override,the,configuration,set,with,link,set,cache,period,param,cache,control,the,cache,control,configuration,to,use,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,2;public,resource,handler,registration,set,cache,control,cache,control,cache,control,this,cache,control,cache,control,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl);1467730834;Specify the {@link org.springframework.http.CacheControl} which should be used_by the resource handler.__<p>Setting a custom value here will override the configuration set with {@link #setCachePeriod}.__@param cacheControl the CacheControl configuration to use_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.2;public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__		return this__	};specify,the,link,org,springframework,http,cache,control,which,should,be,used,by,the,resource,handler,p,setting,a,custom,value,here,will,override,the,configuration,set,with,link,set,cache,period,param,cache,control,the,cache,control,configuration,to,use,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,2;public,resource,handler,registration,set,cache,control,cache,control,cache,control,this,cache,control,cache,control,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl);1498780456;Specify the {@link org.springframework.http.CacheControl} which should be used_by the resource handler.__<p>Setting a custom value here will override the configuration set with {@link #setCachePeriod}.__@param cacheControl the CacheControl configuration to use_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.2;public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__		return this__	};specify,the,link,org,springframework,http,cache,control,which,should,be,used,by,the,resource,handler,p,setting,a,custom,value,here,will,override,the,configuration,set,with,link,set,cache,period,param,cache,control,the,cache,control,configuration,to,use,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,2;public,resource,handler,registration,set,cache,control,cache,control,cache,control,this,cache,control,cache,control,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl);1510251306;Specify the {@link org.springframework.http.CacheControl} which should be used_by the resource handler.__<p>Setting a custom value here will override the configuration set with {@link #setCachePeriod}.__@param cacheControl the CacheControl configuration to use_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.2;public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__		return this__	};specify,the,link,org,springframework,http,cache,control,which,should,be,used,by,the,resource,handler,p,setting,a,custom,value,here,will,override,the,configuration,set,with,link,set,cache,period,param,cache,control,the,cache,control,configuration,to,use,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,2;public,resource,handler,registration,set,cache,control,cache,control,cache,control,this,cache,control,cache,control,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl);1510940038;Specify the {@link org.springframework.http.CacheControl} which should be used_by the resource handler.__<p>Setting a custom value here will override the configuration set with {@link #setCachePeriod}.__@param cacheControl the CacheControl configuration to use_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.2;public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__		return this__	};specify,the,link,org,springframework,http,cache,control,which,should,be,used,by,the,resource,handler,p,setting,a,custom,value,here,will,override,the,configuration,set,with,link,set,cache,period,param,cache,control,the,cache,control,configuration,to,use,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,2;public,resource,handler,registration,set,cache,control,cache,control,cache,control,this,cache,control,cache,control,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl);1511122589;Specify the {@link org.springframework.http.CacheControl} which should be used_by the resource handler._<p>Setting a custom value here will override the configuration set with {@link #setCachePeriod}._@param cacheControl the CacheControl configuration to use_@return the same {@link ResourceHandlerRegistration} instance, for chained method invocation_@since 4.2;public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__		return this__	};specify,the,link,org,springframework,http,cache,control,which,should,be,used,by,the,resource,handler,p,setting,a,custom,value,here,will,override,the,configuration,set,with,link,set,cache,period,param,cache,control,the,cache,control,configuration,to,use,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,since,4,2;public,resource,handler,registration,set,cache,control,cache,control,cache,control,this,cache,control,cache,control,return,this
ResourceHandlerRegistration -> public void setResourceTransformers(List<ResourceTransformer> transformers);1380330593;Configure the list of {@link ResourceTransformer}s to use.;public void setResourceTransformers(List<ResourceTransformer> transformers) {_		this.resourceTransformers = transformers__	};configure,the,list,of,link,resource,transformer,s,to,use;public,void,set,resource,transformers,list,resource,transformer,transformers,this,resource,transformers,transformers
ResourceHandlerRegistration -> public void setResourceTransformers(List<ResourceTransformer> transformers);1380653018;Configure the list of {@link ResourceTransformer}s to use.;public void setResourceTransformers(List<ResourceTransformer> transformers) {_		this.resourceTransformers = transformers__	};configure,the,list,of,link,resource,transformer,s,to,use;public,void,set,resource,transformers,list,resource,transformer,transformers,this,resource,transformers,transformers
ResourceHandlerRegistration -> public ResourceHandlerRegistration addVersionStrategy(VersionStrategy strategy, String... pathPatterns);1406912647;Apply Resource Versioning on the matching resources_ this will update resources' URLs to include_a version string calculated by a {@link VersionStrategy}. This is often used for cache busting._<p>Note that a {@link CssLinkResourceTransformer} will be automatically registered to_support versioned resources in CSS files.</p>_@param strategy the versioning strategy to use_@param pathPatterns one or more resource URL path patterns_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@see VersionResourceResolver_@see VersionStrategy_@since 4.1;public ResourceHandlerRegistration addVersionStrategy(VersionStrategy strategy, String... pathPatterns) {_		for(String pattern : pathPatterns) {_			this.versionStrategies.put(pattern, strategy)__		}_		return this__	};apply,resource,versioning,on,the,matching,resources,this,will,update,resources,urls,to,include,a,version,string,calculated,by,a,link,version,strategy,this,is,often,used,for,cache,busting,p,note,that,a,link,css,link,resource,transformer,will,be,automatically,registered,to,support,versioned,resources,in,css,files,p,param,strategy,the,versioning,strategy,to,use,param,path,patterns,one,or,more,resource,url,path,patterns,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,see,version,resource,resolver,see,version,strategy,since,4,1;public,resource,handler,registration,add,version,strategy,version,strategy,strategy,string,path,patterns,for,string,pattern,path,patterns,this,version,strategies,put,pattern,strategy,return,this
ResourceHandlerRegistration -> public ResourceHandlerRegistration addVersionStrategy(VersionStrategy strategy, String... pathPatterns);1409160643;Apply Resource Versioning on the matching resources_ this will update resources' URLs to include_a version string calculated by a {@link VersionStrategy}. This is often used for cache busting._<p>Note that a {@link CssLinkResourceTransformer} will be automatically registered to_support versioned resources in CSS files.</p>_@param strategy the versioning strategy to use_@param pathPatterns one or more resource URL path patterns_@return the same {@link ResourceHandlerRegistration} instance for chained method invocation_@see VersionResourceResolver_@see VersionStrategy_@since 4.1;public ResourceHandlerRegistration addVersionStrategy(VersionStrategy strategy, String... pathPatterns) {_		if (this.versionResolver == null) {_			this.versionResolver = new VersionResourceResolver()__			this.customResolvers.add(this.versionResolver)__			this.customTransformers.add(new CssLinkResourceTransformer())__		}_		for(String pattern : pathPatterns) {_			this.versionResolver.getVersionStrategyMap().put(pattern, strategy)__		}_		return this__	};apply,resource,versioning,on,the,matching,resources,this,will,update,resources,urls,to,include,a,version,string,calculated,by,a,link,version,strategy,this,is,often,used,for,cache,busting,p,note,that,a,link,css,link,resource,transformer,will,be,automatically,registered,to,support,versioned,resources,in,css,files,p,param,strategy,the,versioning,strategy,to,use,param,path,patterns,one,or,more,resource,url,path,patterns,return,the,same,link,resource,handler,registration,instance,for,chained,method,invocation,see,version,resource,resolver,see,version,strategy,since,4,1;public,resource,handler,registration,add,version,strategy,version,strategy,strategy,string,path,patterns,if,this,version,resolver,null,this,version,resolver,new,version,resource,resolver,this,custom,resolvers,add,this,version,resolver,this,custom,transformers,add,new,css,link,resource,transformer,for,string,pattern,path,patterns,this,version,resolver,get,version,strategy,map,put,pattern,strategy,return,this
ResourceHandlerRegistration -> protected String[] getPathPatterns();1328020251;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1356735495;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1380330593;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1380653018;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1381195788;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1397706164;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1398398484;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1401238462;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1406912647;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1409160643;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1409250308;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1409279558;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1409326189;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1409817933;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1413848647;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1427130064;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1435584749;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1435586278;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1467730834;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1498780456;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1510251306;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1510940038;Returns the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};returns,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected String[] getPathPatterns();1511122589;Return the URL path patterns for the resource handler.;protected String[] getPathPatterns() {_		return this.pathPatterns__	};return,the,url,path,patterns,for,the,resource,handler;protected,string,get,path,patterns,return,this,path,patterns
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1328020251;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		Assert.isTrue(!CollectionUtils.isEmpty(locations), "At least one location is required for resource handling.")__		ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler()__		requestHandler.setLocations(locations)__		if (cachePeriod != null) {_			requestHandler.setCacheSeconds(cachePeriod)__		}_		return requestHandler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,assert,is,true,collection,utils,is,empty,locations,at,least,one,location,is,required,for,resource,handling,resource,http,request,handler,request,handler,new,resource,http,request,handler,request,handler,set,locations,locations,if,cache,period,null,request,handler,set,cache,seconds,cache,period,return,request,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1356735495;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		Assert.isTrue(!CollectionUtils.isEmpty(locations), "At least one location is required for resource handling.")__		ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler()__		requestHandler.setLocations(locations)__		if (cachePeriod != null) {_			requestHandler.setCacheSeconds(cachePeriod)__		}_		return requestHandler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,assert,is,true,collection,utils,is,empty,locations,at,least,one,location,is,required,for,resource,handling,resource,http,request,handler,request,handler,new,resource,http,request,handler,request,handler,set,locations,locations,if,cache,period,null,request,handler,set,cache,seconds,cache,period,return,request,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1380330593;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		Assert.isTrue(!CollectionUtils.isEmpty(locations), "At least one location is required for resource handling.")__		ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler()__		if (this.resourceResolvers != null) {_			requestHandler.setResourceResolvers(this.resourceResolvers)__		}_		if (this.resourceTransformers != null) {_			requestHandler.setResourceTransformers(this.resourceTransformers)__		}_		requestHandler.setLocations(this.locations)__		if (this.cachePeriod != null) {_			requestHandler.setCacheSeconds(this.cachePeriod)__		}_		return requestHandler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,assert,is,true,collection,utils,is,empty,locations,at,least,one,location,is,required,for,resource,handling,resource,http,request,handler,request,handler,new,resource,http,request,handler,if,this,resource,resolvers,null,request,handler,set,resource,resolvers,this,resource,resolvers,if,this,resource,transformers,null,request,handler,set,resource,transformers,this,resource,transformers,request,handler,set,locations,this,locations,if,this,cache,period,null,request,handler,set,cache,seconds,this,cache,period,return,request,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1380653018;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		Assert.isTrue(!CollectionUtils.isEmpty(locations), "At least one location is required for resource handling.")__		ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler()__		if (this.resourceResolvers != null) {_			requestHandler.setResourceResolvers(this.resourceResolvers)__		}_		if (this.resourceTransformers != null) {_			requestHandler.setResourceTransformers(this.resourceTransformers)__		}_		requestHandler.setLocations(this.locations)__		if (this.cachePeriod != null) {_			requestHandler.setCacheSeconds(this.cachePeriod)__		}_		return requestHandler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,assert,is,true,collection,utils,is,empty,locations,at,least,one,location,is,required,for,resource,handling,resource,http,request,handler,request,handler,new,resource,http,request,handler,if,this,resource,resolvers,null,request,handler,set,resource,resolvers,this,resource,resolvers,if,this,resource,transformers,null,request,handler,set,resource,transformers,this,resource,transformers,request,handler,set,locations,this,locations,if,this,cache,period,null,request,handler,set,cache,seconds,this,cache,period,return,request,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1381195788;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		Assert.isTrue(!CollectionUtils.isEmpty(locations), "At least one location is required for resource handling.")__		ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler()__		requestHandler.setLocations(locations)__		if (cachePeriod != null) {_			requestHandler.setCacheSeconds(cachePeriod)__		}_		return requestHandler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,assert,is,true,collection,utils,is,empty,locations,at,least,one,location,is,required,for,resource,handling,resource,http,request,handler,request,handler,new,resource,http,request,handler,request,handler,set,locations,locations,if,cache,period,null,request,handler,set,cache,seconds,cache,period,return,request,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1397706164;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		Assert.isTrue(!CollectionUtils.isEmpty(locations), "At least one location is required for resource handling.")__		ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler()__		if (this.resourceResolvers != null) {_			requestHandler.setResourceResolvers(this.resourceResolvers)__		}_		requestHandler.setLocations(this.locations)__		if (this.cachePeriod != null) {_			requestHandler.setCacheSeconds(this.cachePeriod)__		}_		return requestHandler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,assert,is,true,collection,utils,is,empty,locations,at,least,one,location,is,required,for,resource,handling,resource,http,request,handler,request,handler,new,resource,http,request,handler,if,this,resource,resolvers,null,request,handler,set,resource,resolvers,this,resource,resolvers,request,handler,set,locations,this,locations,if,this,cache,period,null,request,handler,set,cache,seconds,this,cache,period,return,request,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1398398484;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		Assert.isTrue(!CollectionUtils.isEmpty(locations), "At least one location is required for resource handling.")__		ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler()__		if (this.resourceResolvers != null) {_			requestHandler.setResourceResolvers(this.resourceResolvers)__		}_		requestHandler.setLocations(this.locations)__		if (this.cachePeriod != null) {_			requestHandler.setCacheSeconds(this.cachePeriod)__		}_		return requestHandler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,assert,is,true,collection,utils,is,empty,locations,at,least,one,location,is,required,for,resource,handling,resource,http,request,handler,request,handler,new,resource,http,request,handler,if,this,resource,resolvers,null,request,handler,set,resource,resolvers,this,resource,resolvers,request,handler,set,locations,this,locations,if,this,cache,period,null,request,handler,set,cache,seconds,this,cache,period,return,request,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1401238462;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		Assert.isTrue(!CollectionUtils.isEmpty(locations), "At least one location is required for resource handling.")__		ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler()__		if (this.resourceResolvers != null) {_			requestHandler.setResourceResolvers(this.resourceResolvers)__		}_		if (this.resourceTransformers != null) {_			requestHandler.setResourceTransformers(this.resourceTransformers)__		}_		requestHandler.setLocations(this.locations)__		if (this.cachePeriod != null) {_			requestHandler.setCacheSeconds(this.cachePeriod)__		}_		return requestHandler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,assert,is,true,collection,utils,is,empty,locations,at,least,one,location,is,required,for,resource,handling,resource,http,request,handler,request,handler,new,resource,http,request,handler,if,this,resource,resolvers,null,request,handler,set,resource,resolvers,this,resource,resolvers,if,this,resource,transformers,null,request,handler,set,resource,transformers,this,resource,transformers,request,handler,set,locations,this,locations,if,this,cache,period,null,request,handler,set,cache,seconds,this,cache,period,return,request,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1406912647;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		Assert.isTrue(!CollectionUtils.isEmpty(locations), "At least one location is required for resource handling.")__		ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler()__		List<ResourceResolver> resourceResolvers = getResourceResolvers()__		if (!resourceResolvers.isEmpty()) {_			requestHandler.setResourceResolvers(resourceResolvers)__		}_		List<ResourceTransformer> resourceTransformers = getResourceTransformers()__		if (!resourceTransformers.isEmpty()) {_			requestHandler.setResourceTransformers(resourceTransformers)__		}_		requestHandler.setLocations(this.locations)__		if (this.cachePeriod != null) {_			requestHandler.setCacheSeconds(this.cachePeriod)__		}_		return requestHandler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,assert,is,true,collection,utils,is,empty,locations,at,least,one,location,is,required,for,resource,handling,resource,http,request,handler,request,handler,new,resource,http,request,handler,list,resource,resolver,resource,resolvers,get,resource,resolvers,if,resource,resolvers,is,empty,request,handler,set,resource,resolvers,resource,resolvers,list,resource,transformer,resource,transformers,get,resource,transformers,if,resource,transformers,is,empty,request,handler,set,resource,transformers,resource,transformers,request,handler,set,locations,this,locations,if,this,cache,period,null,request,handler,set,cache,seconds,this,cache,period,return,request,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1409160643;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		Assert.isTrue(!CollectionUtils.isEmpty(locations), "At least one location is required for resource handling.")__		ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler()__		List<ResourceResolver> resourceResolvers = getResourceResolvers()__		if (!CollectionUtils.isEmpty(resourceResolvers)) {_			requestHandler.setResourceResolvers(resourceResolvers)__		}_		List<ResourceTransformer> resourceTransformers = getResourceTransformers()__		if (!CollectionUtils.isEmpty(resourceTransformers)) {_			requestHandler.setResourceTransformers(resourceTransformers)__		}_		requestHandler.setLocations(this.locations)__		if (this.cachePeriod != null) {_			requestHandler.setCacheSeconds(this.cachePeriod)__		}_		return requestHandler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,assert,is,true,collection,utils,is,empty,locations,at,least,one,location,is,required,for,resource,handling,resource,http,request,handler,request,handler,new,resource,http,request,handler,list,resource,resolver,resource,resolvers,get,resource,resolvers,if,collection,utils,is,empty,resource,resolvers,request,handler,set,resource,resolvers,resource,resolvers,list,resource,transformer,resource,transformers,get,resource,transformers,if,collection,utils,is,empty,resource,transformers,request,handler,set,resource,transformers,resource,transformers,request,handler,set,locations,this,locations,if,this,cache,period,null,request,handler,set,cache,seconds,this,cache,period,return,request,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1409250308;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		Assert.isTrue(!CollectionUtils.isEmpty(locations), "At least one location is required for resource handling.")__		ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler()__		List<ResourceResolver> resourceResolvers = getResourceResolvers()__		if (!CollectionUtils.isEmpty(resourceResolvers)) {_			requestHandler.setResourceResolvers(resourceResolvers)__		}_		List<ResourceTransformer> resourceTransformers = getResourceTransformers()__		if (!CollectionUtils.isEmpty(resourceTransformers)) {_			requestHandler.setResourceTransformers(resourceTransformers)__		}_		requestHandler.setLocations(this.locations)__		if (this.cachePeriod != null) {_			requestHandler.setCacheSeconds(this.cachePeriod)__		}_		return requestHandler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,assert,is,true,collection,utils,is,empty,locations,at,least,one,location,is,required,for,resource,handling,resource,http,request,handler,request,handler,new,resource,http,request,handler,list,resource,resolver,resource,resolvers,get,resource,resolvers,if,collection,utils,is,empty,resource,resolvers,request,handler,set,resource,resolvers,resource,resolvers,list,resource,transformer,resource,transformers,get,resource,transformers,if,collection,utils,is,empty,resource,transformers,request,handler,set,resource,transformers,resource,transformers,request,handler,set,locations,this,locations,if,this,cache,period,null,request,handler,set,cache,seconds,this,cache,period,return,request,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1409279558;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		Assert.isTrue(!CollectionUtils.isEmpty(locations), "At least one location is required for resource handling.")__		ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler()__		if (this.resourceChainRegistration != null) {_			handler.setResourceResolvers(this.resourceChainRegistration.getResourceResolvers())__			handler.setResourceTransformers(this.resourceChainRegistration.getResourceTransformers())__		}_		handler.setLocations(this.locations)__		if (this.cachePeriod != null) {_			handler.setCacheSeconds(this.cachePeriod)__		}_		return handler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,assert,is,true,collection,utils,is,empty,locations,at,least,one,location,is,required,for,resource,handling,resource,http,request,handler,handler,new,resource,http,request,handler,if,this,resource,chain,registration,null,handler,set,resource,resolvers,this,resource,chain,registration,get,resource,resolvers,handler,set,resource,transformers,this,resource,chain,registration,get,resource,transformers,handler,set,locations,this,locations,if,this,cache,period,null,handler,set,cache,seconds,this,cache,period,return,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1409326189;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler()__		if (this.resourceChainRegistration != null) {_			handler.setResourceResolvers(this.resourceChainRegistration.getResourceResolvers())__			handler.setResourceTransformers(this.resourceChainRegistration.getResourceTransformers())__		}_		handler.setLocations(this.locations)__		if (this.cachePeriod != null) {_			handler.setCacheSeconds(this.cachePeriod)__		}_		return handler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,resource,http,request,handler,handler,new,resource,http,request,handler,if,this,resource,chain,registration,null,handler,set,resource,resolvers,this,resource,chain,registration,get,resource,resolvers,handler,set,resource,transformers,this,resource,chain,registration,get,resource,transformers,handler,set,locations,this,locations,if,this,cache,period,null,handler,set,cache,seconds,this,cache,period,return,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1409817933;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler()__		if (this.resourceChainRegistration != null) {_			handler.setResourceResolvers(this.resourceChainRegistration.getResourceResolvers())__			handler.setResourceTransformers(this.resourceChainRegistration.getResourceTransformers())__		}_		handler.setLocations(this.locations)__		if (this.cachePeriod != null) {_			handler.setCacheSeconds(this.cachePeriod)__		}_		return handler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,resource,http,request,handler,handler,new,resource,http,request,handler,if,this,resource,chain,registration,null,handler,set,resource,resolvers,this,resource,chain,registration,get,resource,resolvers,handler,set,resource,transformers,this,resource,chain,registration,get,resource,transformers,handler,set,locations,this,locations,if,this,cache,period,null,handler,set,cache,seconds,this,cache,period,return,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1413848647;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler()__		if (this.resourceChainRegistration != null) {_			handler.setResourceResolvers(this.resourceChainRegistration.getResourceResolvers())__			handler.setResourceTransformers(this.resourceChainRegistration.getResourceTransformers())__		}_		handler.setLocations(this.locations)__		if (this.cachePeriod != null) {_			handler.setCacheSeconds(this.cachePeriod)__		}_		return handler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,resource,http,request,handler,handler,new,resource,http,request,handler,if,this,resource,chain,registration,null,handler,set,resource,resolvers,this,resource,chain,registration,get,resource,resolvers,handler,set,resource,transformers,this,resource,chain,registration,get,resource,transformers,handler,set,locations,this,locations,if,this,cache,period,null,handler,set,cache,seconds,this,cache,period,return,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1427130064;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler()__		if (this.resourceChainRegistration != null) {_			handler.setResourceResolvers(this.resourceChainRegistration.getResourceResolvers())__			handler.setResourceTransformers(this.resourceChainRegistration.getResourceTransformers())__		}_		handler.setLocations(this.locations)__		if (this.cacheControl != null) {_			handler.setCacheControl(this.cacheControl)__		}_		else if (this.cachePeriod != null) {_			handler.setCacheSeconds(this.cachePeriod)__		}_		return handler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,resource,http,request,handler,handler,new,resource,http,request,handler,if,this,resource,chain,registration,null,handler,set,resource,resolvers,this,resource,chain,registration,get,resource,resolvers,handler,set,resource,transformers,this,resource,chain,registration,get,resource,transformers,handler,set,locations,this,locations,if,this,cache,control,null,handler,set,cache,control,this,cache,control,else,if,this,cache,period,null,handler,set,cache,seconds,this,cache,period,return,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1435584749;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler()__		if (this.resourceChainRegistration != null) {_			handler.setResourceResolvers(this.resourceChainRegistration.getResourceResolvers())__			handler.setResourceTransformers(this.resourceChainRegistration.getResourceTransformers())__		}_		handler.setLocations(this.locations)__		if (this.cacheControl != null) {_			handler.setCacheControl(this.cacheControl)__		}_		else if (this.cachePeriod != null) {_			handler.setCacheSeconds(this.cachePeriod)__		}_		return handler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,resource,http,request,handler,handler,new,resource,http,request,handler,if,this,resource,chain,registration,null,handler,set,resource,resolvers,this,resource,chain,registration,get,resource,resolvers,handler,set,resource,transformers,this,resource,chain,registration,get,resource,transformers,handler,set,locations,this,locations,if,this,cache,control,null,handler,set,cache,control,this,cache,control,else,if,this,cache,period,null,handler,set,cache,seconds,this,cache,period,return,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1435586278;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler()__		if (this.resourceChainRegistration != null) {_			handler.setResourceResolvers(this.resourceChainRegistration.getResourceResolvers())__			handler.setResourceTransformers(this.resourceChainRegistration.getResourceTransformers())__		}_		handler.setLocations(this.locations)__		if (this.cacheControl != null) {_			handler.setCacheControl(this.cacheControl)__		}_		else if (this.cachePeriod != null) {_			handler.setCacheSeconds(this.cachePeriod)__		}_		return handler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,resource,http,request,handler,handler,new,resource,http,request,handler,if,this,resource,chain,registration,null,handler,set,resource,resolvers,this,resource,chain,registration,get,resource,resolvers,handler,set,resource,transformers,this,resource,chain,registration,get,resource,transformers,handler,set,locations,this,locations,if,this,cache,control,null,handler,set,cache,control,this,cache,control,else,if,this,cache,period,null,handler,set,cache,seconds,this,cache,period,return,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1467730834;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler()__		if (this.resourceChainRegistration != null) {_			handler.setResourceResolvers(this.resourceChainRegistration.getResourceResolvers())__			handler.setResourceTransformers(this.resourceChainRegistration.getResourceTransformers())__		}_		handler.setLocations(this.locations)__		if (this.cacheControl != null) {_			handler.setCacheControl(this.cacheControl)__		}_		else if (this.cachePeriod != null) {_			handler.setCacheSeconds(this.cachePeriod)__		}_		return handler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,resource,http,request,handler,handler,new,resource,http,request,handler,if,this,resource,chain,registration,null,handler,set,resource,resolvers,this,resource,chain,registration,get,resource,resolvers,handler,set,resource,transformers,this,resource,chain,registration,get,resource,transformers,handler,set,locations,this,locations,if,this,cache,control,null,handler,set,cache,control,this,cache,control,else,if,this,cache,period,null,handler,set,cache,seconds,this,cache,period,return,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1498780456;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler()__		if (this.resourceChainRegistration != null) {_			handler.setResourceResolvers(this.resourceChainRegistration.getResourceResolvers())__			handler.setResourceTransformers(this.resourceChainRegistration.getResourceTransformers())__		}_		handler.setLocations(this.locations)__		if (this.cacheControl != null) {_			handler.setCacheControl(this.cacheControl)__		}_		else if (this.cachePeriod != null) {_			handler.setCacheSeconds(this.cachePeriod)__		}_		return handler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,resource,http,request,handler,handler,new,resource,http,request,handler,if,this,resource,chain,registration,null,handler,set,resource,resolvers,this,resource,chain,registration,get,resource,resolvers,handler,set,resource,transformers,this,resource,chain,registration,get,resource,transformers,handler,set,locations,this,locations,if,this,cache,control,null,handler,set,cache,control,this,cache,control,else,if,this,cache,period,null,handler,set,cache,seconds,this,cache,period,return,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1510251306;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler()__		if (this.resourceChainRegistration != null) {_			handler.setResourceResolvers(this.resourceChainRegistration.getResourceResolvers())__			handler.setResourceTransformers(this.resourceChainRegistration.getResourceTransformers())__		}_		handler.setLocations(this.locations)__		handler.setLocationCharsets(this.locationCharsets)__		if (this.cacheControl != null) {_			handler.setCacheControl(this.cacheControl)__		}_		else if (this.cachePeriod != null) {_			handler.setCacheSeconds(this.cachePeriod)__		}_		return handler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,resource,http,request,handler,handler,new,resource,http,request,handler,if,this,resource,chain,registration,null,handler,set,resource,resolvers,this,resource,chain,registration,get,resource,resolvers,handler,set,resource,transformers,this,resource,chain,registration,get,resource,transformers,handler,set,locations,this,locations,handler,set,location,charsets,this,location,charsets,if,this,cache,control,null,handler,set,cache,control,this,cache,control,else,if,this,cache,period,null,handler,set,cache,seconds,this,cache,period,return,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1510940038;Returns a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler()__		if (this.resourceChainRegistration != null) {_			handler.setResourceResolvers(this.resourceChainRegistration.getResourceResolvers())__			handler.setResourceTransformers(this.resourceChainRegistration.getResourceTransformers())__		}_		handler.setLocationValues(this.locationValues)__		if (this.cacheControl != null) {_			handler.setCacheControl(this.cacheControl)__		}_		else if (this.cachePeriod != null) {_			handler.setCacheSeconds(this.cachePeriod)__		}_		return handler__	};returns,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,resource,http,request,handler,handler,new,resource,http,request,handler,if,this,resource,chain,registration,null,handler,set,resource,resolvers,this,resource,chain,registration,get,resource,resolvers,handler,set,resource,transformers,this,resource,chain,registration,get,resource,transformers,handler,set,location,values,this,location,values,if,this,cache,control,null,handler,set,cache,control,this,cache,control,else,if,this,cache,period,null,handler,set,cache,seconds,this,cache,period,return,handler
ResourceHandlerRegistration -> protected ResourceHttpRequestHandler getRequestHandler();1511122589;Return a {@link ResourceHttpRequestHandler} instance.;protected ResourceHttpRequestHandler getRequestHandler() {_		ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler()__		if (this.resourceChainRegistration != null) {_			handler.setResourceResolvers(this.resourceChainRegistration.getResourceResolvers())__			handler.setResourceTransformers(this.resourceChainRegistration.getResourceTransformers())__		}_		handler.setLocationValues(this.locationValues)__		if (this.cacheControl != null) {_			handler.setCacheControl(this.cacheControl)__		}_		else if (this.cachePeriod != null) {_			handler.setCacheSeconds(this.cachePeriod)__		}_		return handler__	};return,a,link,resource,http,request,handler,instance;protected,resource,http,request,handler,get,request,handler,resource,http,request,handler,handler,new,resource,http,request,handler,if,this,resource,chain,registration,null,handler,set,resource,resolvers,this,resource,chain,registration,get,resource,resolvers,handler,set,resource,transformers,this,resource,chain,registration,get,resource,transformers,handler,set,location,values,this,location,values,if,this,cache,control,null,handler,set,cache,control,this,cache,control,else,if,this,cache,period,null,handler,set,cache,seconds,this,cache,period,return,handler
