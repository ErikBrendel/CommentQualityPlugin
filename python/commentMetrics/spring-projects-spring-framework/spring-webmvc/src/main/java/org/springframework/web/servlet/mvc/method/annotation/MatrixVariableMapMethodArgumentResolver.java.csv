commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public boolean supportsParameter(MethodParameter parameter) {     MatrixVariable matrixVariable = parameter.getParameterAnnotation(MatrixVariable.class).     return (matrixVariable != null && Map.class.isAssignableFrom(parameter.getParameterType()) && !StringUtils.hasText(matrixVariable.name())). }
false;public;4;38;;@Override @Nullable public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest request, @Nullable WebDataBinderFactory binderFactory) throws Exception {     @SuppressWarnings("unchecked")     Map<String, MultiValueMap<String, String>> matrixVariables = (Map<String, MultiValueMap<String, String>>) request.getAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST).     if (CollectionUtils.isEmpty(matrixVariables)) {         return Collections.emptyMap().     }     MultiValueMap<String, String> map = new LinkedMultiValueMap<>().     MatrixVariable ann = parameter.getParameterAnnotation(MatrixVariable.class).     Assert.state(ann != null, "No MatrixVariable annotation").     String pathVariable = ann.pathVar().     if (!pathVariable.equals(ValueConstants.DEFAULT_NONE)) {         MultiValueMap<String, String> mapForPathVariable = matrixVariables.get(pathVariable).         if (mapForPathVariable == null) {             return Collections.emptyMap().         }         map.putAll(mapForPathVariable).     } else {         for (MultiValueMap<String, String> vars : matrixVariables.values()) {             vars.forEach((name, values) -> {                 for (String value : values) {                     map.add(name, value).                 }             }).         }     }     return (isSingleValueMap(parameter) ? map.toSingleValueMap() : map). }
false;private;1;9;;private boolean isSingleValueMap(MethodParameter parameter) {     if (!MultiValueMap.class.isAssignableFrom(parameter.getParameterType())) {         ResolvableType[] genericTypes = ResolvableType.forMethodParameter(parameter).getGenerics().         if (genericTypes.length == 2) {             return !List.class.isAssignableFrom(genericTypes[1].toClass()).         }     }     return false. }
