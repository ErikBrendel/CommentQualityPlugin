commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the name of the corresponding attribute in the {@code HttpSession},  * holding the current {@link Locale} value.  * <p>The default is an internal {@link #LOCALE_SESSION_ATTRIBUTE_NAME}.  * @since 4.3.8  */ ;/**  * Specify the name of the corresponding attribute in the {@code HttpSession},  * holding the current {@link Locale} value.  * <p>The default is an internal {@link #LOCALE_SESSION_ATTRIBUTE_NAME}.  * @since 4.3.8  */ public void setLocaleAttributeName(String localeAttributeName) {     this.localeAttributeName = localeAttributeName. }
true;public;1;3;/**  * Specify the name of the corresponding attribute in the {@code HttpSession},  * holding the current {@link TimeZone} value.  * <p>The default is an internal {@link #TIME_ZONE_SESSION_ATTRIBUTE_NAME}.  * @since 4.3.8  */ ;/**  * Specify the name of the corresponding attribute in the {@code HttpSession},  * holding the current {@link TimeZone} value.  * <p>The default is an internal {@link #TIME_ZONE_SESSION_ATTRIBUTE_NAME}.  * @since 4.3.8  */ public void setTimeZoneAttributeName(String timeZoneAttributeName) {     this.timeZoneAttributeName = timeZoneAttributeName. }
false;public;1;8;;@Override public Locale resolveLocale(HttpServletRequest request) {     Locale locale = (Locale) WebUtils.getSessionAttribute(request, this.localeAttributeName).     if (locale == null) {         locale = determineDefaultLocale(request).     }     return locale. }
false;public;0;8;;@Override public Locale getLocale() {     Locale locale = (Locale) WebUtils.getSessionAttribute(request, localeAttributeName).     if (locale == null) {         locale = determineDefaultLocale(request).     }     return locale. }
false;public;0;9;;@Override @Nullable public TimeZone getTimeZone() {     TimeZone timeZone = (TimeZone) WebUtils.getSessionAttribute(request, timeZoneAttributeName).     if (timeZone == null) {         timeZone = determineDefaultTimeZone(request).     }     return timeZone. }
false;public;1;22;;@Override public LocaleContext resolveLocaleContext(final HttpServletRequest request) {     return new TimeZoneAwareLocaleContext() {          @Override         public Locale getLocale() {             Locale locale = (Locale) WebUtils.getSessionAttribute(request, localeAttributeName).             if (locale == null) {                 locale = determineDefaultLocale(request).             }             return locale.         }          @Override         @Nullable         public TimeZone getTimeZone() {             TimeZone timeZone = (TimeZone) WebUtils.getSessionAttribute(request, timeZoneAttributeName).             if (timeZone == null) {                 timeZone = determineDefaultTimeZone(request).             }             return timeZone.         }     }. }
false;public;3;15;;@Override public void setLocaleContext(HttpServletRequest request, @Nullable HttpServletResponse response, @Nullable LocaleContext localeContext) {     Locale locale = null.     TimeZone timeZone = null.     if (localeContext != null) {         locale = localeContext.getLocale().         if (localeContext instanceof TimeZoneAwareLocaleContext) {             timeZone = ((TimeZoneAwareLocaleContext) localeContext).getTimeZone().         }     }     WebUtils.setSessionAttribute(request, this.localeAttributeName, locale).     WebUtils.setSessionAttribute(request, this.timeZoneAttributeName, timeZone). }
true;protected;1;7;/**  * Determine the default locale for the given request,  * Called if no Locale session attribute has been found.  * <p>The default implementation returns the specified default locale,  * if any, else falls back to the request's accept-header locale.  * @param request the request to resolve the locale for  * @return the default locale (never {@code null})  * @see #setDefaultLocale  * @see javax.servlet.http.HttpServletRequest#getLocale()  */ ;/**  * Determine the default locale for the given request,  * Called if no Locale session attribute has been found.  * <p>The default implementation returns the specified default locale,  * if any, else falls back to the request's accept-header locale.  * @param request the request to resolve the locale for  * @return the default locale (never {@code null})  * @see #setDefaultLocale  * @see javax.servlet.http.HttpServletRequest#getLocale()  */ protected Locale determineDefaultLocale(HttpServletRequest request) {     Locale defaultLocale = getDefaultLocale().     if (defaultLocale == null) {         defaultLocale = request.getLocale().     }     return defaultLocale. }
true;protected;1;4;/**  * Determine the default time zone for the given request,  * Called if no TimeZone session attribute has been found.  * <p>The default implementation returns the specified default time zone,  * if any, or {@code null} otherwise.  * @param request the request to resolve the time zone for  * @return the default time zone (or {@code null} if none defined)  * @see #setDefaultTimeZone  */ ;/**  * Determine the default time zone for the given request,  * Called if no TimeZone session attribute has been found.  * <p>The default implementation returns the specified default time zone,  * if any, or {@code null} otherwise.  * @param request the request to resolve the time zone for  * @return the default time zone (or {@code null} if none defined)  * @see #setDefaultTimeZone  */ @Nullable protected TimeZone determineDefaultTimeZone(HttpServletRequest request) {     return getDefaultTimeZone(). }
