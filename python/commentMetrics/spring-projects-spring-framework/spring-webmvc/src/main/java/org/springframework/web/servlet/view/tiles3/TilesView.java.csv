commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link Renderer} to use.  * If not set, by default {@link DefinitionRenderer} is used.  */ ;/**  * Set the {@link Renderer} to use.  * If not set, by default {@link DefinitionRenderer} is used.  */ public void setRenderer(Renderer renderer) {     this.renderer = renderer. }
true;protected;1;3;/**  * Whether to expose JSTL attributes. By default set to {@code true}.  * @see JstlUtils#exposeLocalizationContext(RequestContext)  */ ;/**  * Whether to expose JSTL attributes. By default set to {@code true}.  * @see JstlUtils#exposeLocalizationContext(RequestContext)  */ protected void setExposeJstlAttributes(boolean exposeJstlAttributes) {     this.exposeJstlAttributes = exposeJstlAttributes. }
true;public;1;3;/**  * Specify whether to always include the view rather than forward to it.  * <p>Default is "false". Switch this flag on to enforce the use of a  * Servlet include, even if a forward would be possible.  * @since 4.1.2  * @see TilesViewResolver#setAlwaysInclude  */ ;/**  * Specify whether to always include the view rather than forward to it.  * <p>Default is "false". Switch this flag on to enforce the use of a  * Servlet include, even if a forward would be possible.  * @since 4.1.2  * @see TilesViewResolver#setAlwaysInclude  */ public void setAlwaysInclude(boolean alwaysInclude) {     this.alwaysInclude = alwaysInclude. }
false;public;0;13;;@Override public void afterPropertiesSet() throws Exception {     super.afterPropertiesSet().     ServletContext servletContext = getServletContext().     Assert.state(servletContext != null, "No ServletContext").     this.applicationContext = ServletUtil.getApplicationContext(servletContext).     if (this.renderer == null) {         TilesContainer container = TilesAccess.getContainer(this.applicationContext).         this.renderer = new DefinitionRenderer(container).     } }
false;public;0;4;;@Override public Locale getRequestLocale() {     return locale. }
false;public;1;19;;@Override public boolean checkResource(final Locale locale) throws Exception {     Assert.state(this.renderer != null, "No Renderer set").     HttpServletRequest servletRequest = null.     RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes().     if (requestAttributes instanceof ServletRequestAttributes) {         servletRequest = ((ServletRequestAttributes) requestAttributes).getRequest().     }     Request request = new ServletRequest(this.applicationContext, servletRequest, null) {          @Override         public Locale getRequestLocale() {             return locale.         }     }.     return this.renderer.isRenderable(getUrl(), request). }
false;protected;3;17;;@Override protected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {     Assert.state(this.renderer != null, "No Renderer set").     exposeModelAsRequestAttributes(model, request).     if (this.exposeJstlAttributes) {         JstlUtils.exposeLocalizationContext(new RequestContext(request, getServletContext())).     }     if (this.alwaysInclude) {         request.setAttribute(AbstractRequest.FORCE_INCLUDE_ATTRIBUTE_NAME, true).     }     Request tilesRequest = createTilesRequest(request, response).     this.renderer.render(getUrl(), tilesRequest). }
false;public;0;4;;@Override public Locale getRequestLocale() {     return RequestContextUtils.getLocale(request). }
true;protected;2;8;/**  * Create a Tiles {@link Request}.  * <p>This implementation creates a {@link ServletRequest}.  * @param request the current request  * @param response the current response  * @return the Tiles request  */ ;/**  * Create a Tiles {@link Request}.  * <p>This implementation creates a {@link ServletRequest}.  * @param request the current request  * @param response the current response  * @return the Tiles request  */ protected Request createTilesRequest(final HttpServletRequest request, HttpServletResponse response) {     return new ServletRequest(this.applicationContext, request, response) {          @Override         public Locale getRequestLocale() {             return RequestContextUtils.getLocale(request).         }     }. }
