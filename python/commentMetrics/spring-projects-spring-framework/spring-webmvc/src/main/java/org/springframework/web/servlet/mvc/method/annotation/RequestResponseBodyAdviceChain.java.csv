commented;modifiers;parameterAmount;loc;comment;code
false;static;2;15;;@SuppressWarnings("unchecked") static <T> List<T> getAdviceByType(@Nullable List<Object> requestResponseBodyAdvice, Class<T> adviceType) {     if (requestResponseBodyAdvice != null) {         List<T> result = new ArrayList<>().         for (Object advice : requestResponseBodyAdvice) {             Class<?> beanType = (advice instanceof ControllerAdviceBean ? ((ControllerAdviceBean) advice).getBeanType() : advice.getClass()).             if (beanType != null && adviceType.isAssignableFrom(beanType)) {                 result.add((T) advice).             }         }         return result.     }     return Collections.emptyList(). }
false;public;3;4;;@Override public boolean supports(MethodParameter param, Type type, Class<? extends HttpMessageConverter<?>> converterType) {     throw new UnsupportedOperationException("Not implemented"). }
false;public;2;4;;@Override public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {     throw new UnsupportedOperationException("Not implemented"). }
false;public;4;11;;@Override public HttpInputMessage beforeBodyRead(HttpInputMessage request, MethodParameter parameter, Type targetType, Class<? extends HttpMessageConverter<?>> converterType) throws IOException {     for (RequestBodyAdvice advice : getMatchingAdvice(parameter, RequestBodyAdvice.class)) {         if (advice.supports(parameter, targetType, converterType)) {             request = advice.beforeBodyRead(request, parameter, targetType, converterType).         }     }     return request. }
false;public;5;11;;@Override public Object afterBodyRead(Object body, HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class<? extends HttpMessageConverter<?>> converterType) {     for (RequestBodyAdvice advice : getMatchingAdvice(parameter, RequestBodyAdvice.class)) {         if (advice.supports(parameter, targetType, converterType)) {             body = advice.afterBodyRead(body, inputMessage, parameter, targetType, converterType).         }     }     return body. }
false;public;6;8;;@Override @Nullable public Object beforeBodyWrite(@Nullable Object body, MethodParameter returnType, MediaType contentType, Class<? extends HttpMessageConverter<?>> converterType, ServerHttpRequest request, ServerHttpResponse response) {     return processBody(body, returnType, contentType, converterType, request, response). }
false;public;5;12;;@Override @Nullable public Object handleEmptyBody(@Nullable Object body, HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class<? extends HttpMessageConverter<?>> converterType) {     for (RequestBodyAdvice advice : getMatchingAdvice(parameter, RequestBodyAdvice.class)) {         if (advice.supports(parameter, targetType, converterType)) {             body = advice.handleEmptyBody(body, inputMessage, parameter, targetType, converterType).         }     }     return body. }
false;private;6;14;;@SuppressWarnings("unchecked") @Nullable private <T> Object processBody(@Nullable Object body, MethodParameter returnType, MediaType contentType, Class<? extends HttpMessageConverter<?>> converterType, ServerHttpRequest request, ServerHttpResponse response) {     for (ResponseBodyAdvice<?> advice : getMatchingAdvice(returnType, ResponseBodyAdvice.class)) {         if (advice.supports(returnType, converterType)) {             body = ((ResponseBodyAdvice<T>) advice).beforeBodyWrite((T) body, returnType, contentType, converterType, request, response).         }     }     return body. }
false;private;2;21;;@SuppressWarnings("unchecked") private <A> List<A> getMatchingAdvice(MethodParameter parameter, Class<? extends A> adviceType) {     List<Object> availableAdvice = getAdvice(adviceType).     if (CollectionUtils.isEmpty(availableAdvice)) {         return Collections.emptyList().     }     List<A> result = new ArrayList<>(availableAdvice.size()).     for (Object advice : availableAdvice) {         if (advice instanceof ControllerAdviceBean) {             ControllerAdviceBean adviceBean = (ControllerAdviceBean) advice.             if (!adviceBean.isApplicableToBeanType(parameter.getContainingClass())) {                 continue.             }             advice = adviceBean.resolveBean().         }         if (adviceType.isAssignableFrom(advice.getClass())) {             result.add((A) advice).         }     }     return result. }
false;private;1;11;;private List<Object> getAdvice(Class<?> adviceType) {     if (RequestBodyAdvice.class == adviceType) {         return this.requestBodyAdvice.     } else if (ResponseBodyAdvice.class == adviceType) {         return this.responseBodyAdvice.     } else {         throw new IllegalArgumentException("Unexpected adviceType: " + adviceType).     } }
