commented;modifiers;parameterAmount;loc;comment;code
true;protected,final;4;15;/**  * Instantiate the model attribute from a URI template variable or from a  * request parameter if the name matches to the model attribute name and  * if there is an appropriate type conversion strategy. If none of these  * are true delegate back to the base class.  * @see #createAttributeFromRequestValue  */ ;/**  * Instantiate the model attribute from a URI template variable or from a  * request parameter if the name matches to the model attribute name and  * if there is an appropriate type conversion strategy. If none of these  * are true delegate back to the base class.  * @see #createAttributeFromRequestValue  */ @Override protected final Object createAttribute(String attributeName, MethodParameter parameter, WebDataBinderFactory binderFactory, NativeWebRequest request) throws Exception {     String value = getRequestValueForAttribute(attributeName, request).     if (value != null) {         Object attribute = createAttributeFromRequestValue(value, attributeName, parameter, binderFactory, request).         if (attribute != null) {             return attribute.         }     }     return super.createAttribute(attributeName, parameter, binderFactory, request). }
true;protected;2;13;/**  * Obtain a value from the request that may be used to instantiate the  * model attribute through type conversion from String to the target type.  * <p>The default implementation looks for the attribute name to match  * a URI variable first and then a request parameter.  * @param attributeName the model attribute name  * @param request the current request  * @return the request value to try to convert, or {@code null} if none  */ ;/**  * Obtain a value from the request that may be used to instantiate the  * model attribute through type conversion from String to the target type.  * <p>The default implementation looks for the attribute name to match  * a URI variable first and then a request parameter.  * @param attributeName the model attribute name  * @param request the current request  * @return the request value to try to convert, or {@code null} if none  */ @Nullable protected String getRequestValueForAttribute(String attributeName, NativeWebRequest request) {     Map<String, String> variables = getUriTemplateVariables(request).     String variableValue = variables.get(attributeName).     if (StringUtils.hasText(variableValue)) {         return variableValue.     }     String parameterValue = request.getParameter(attributeName).     if (StringUtils.hasText(parameterValue)) {         return parameterValue.     }     return null. }
false;protected,final;1;6;;@SuppressWarnings("unchecked") protected final Map<String, String> getUriTemplateVariables(NativeWebRequest request) {     Map<String, String> variables = (Map<String, String>) request.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST).     return (variables != null ? variables : Collections.emptyMap()). }
true;protected;5;16;/**  * Create a model attribute from a String request value (e.g. URI template  * variable, request parameter) using type conversion.  * <p>The default implementation converts only if there a registered  * {@link Converter} that can perform the conversion.  * @param sourceValue the source value to create the model attribute from  * @param attributeName the name of the attribute (never {@code null})  * @param parameter the method parameter  * @param binderFactory for creating WebDataBinder instance  * @param request the current request  * @return the created model attribute, or {@code null} if no suitable  * conversion found  */ ;/**  * Create a model attribute from a String request value (e.g. URI template  * variable, request parameter) using type conversion.  * <p>The default implementation converts only if there a registered  * {@link Converter} that can perform the conversion.  * @param sourceValue the source value to create the model attribute from  * @param attributeName the name of the attribute (never {@code null})  * @param parameter the method parameter  * @param binderFactory for creating WebDataBinder instance  * @param request the current request  * @return the created model attribute, or {@code null} if no suitable  * conversion found  */ @Nullable protected Object createAttributeFromRequestValue(String sourceValue, String attributeName, MethodParameter parameter, WebDataBinderFactory binderFactory, NativeWebRequest request) throws Exception {     DataBinder binder = binderFactory.createBinder(request, null, attributeName).     ConversionService conversionService = binder.getConversionService().     if (conversionService != null) {         TypeDescriptor source = TypeDescriptor.valueOf(String.class).         TypeDescriptor target = new TypeDescriptor(parameter).         if (conversionService.canConvert(source, target)) {             return binder.convertIfNecessary(sourceValue, parameter.getParameterType(), parameter).         }     }     return null. }
true;protected;2;7;/**  * This implementation downcasts {@link WebDataBinder} to  * {@link ServletRequestDataBinder} before binding.  * @see ServletRequestDataBinderFactory  */ ;/**  * This implementation downcasts {@link WebDataBinder} to  * {@link ServletRequestDataBinder} before binding.  * @see ServletRequestDataBinderFactory  */ @Override protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) {     ServletRequest servletRequest = request.getNativeRequest(ServletRequest.class).     Assert.state(servletRequest != null, "No ServletRequest").     ServletRequestDataBinder servletBinder = (ServletRequestDataBinder) binder.     servletBinder.bind(servletRequest). }
