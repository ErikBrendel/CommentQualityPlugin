commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the list of exception resolvers to delegate to.  */ ;/**  * Set the list of exception resolvers to delegate to.  */ public void setExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {     this.resolvers = exceptionResolvers. }
true;public;0;3;/**  * Return the list of exception resolvers to delegate to.  */ ;/**  * Return the list of exception resolvers to delegate to.  */ public List<HandlerExceptionResolver> getExceptionResolvers() {     return (this.resolvers != null ? Collections.unmodifiableList(this.resolvers) : Collections.emptyList()). }
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
true;public;4;15;/**  * Resolve the exception by iterating over the list of configured exception resolvers.  * <p>The first one to return a {@link ModelAndView} wins. Otherwise {@code null} is returned.  */ ;/**  * Resolve the exception by iterating over the list of configured exception resolvers.  * <p>The first one to return a {@link ModelAndView} wins. Otherwise {@code null} is returned.  */ @Override @Nullable public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {     if (this.resolvers != null) {         for (HandlerExceptionResolver handlerExceptionResolver : this.resolvers) {             ModelAndView mav = handlerExceptionResolver.resolveException(request, response, handler, ex).             if (mav != null) {                 return mav.             }         }     }     return null. }
