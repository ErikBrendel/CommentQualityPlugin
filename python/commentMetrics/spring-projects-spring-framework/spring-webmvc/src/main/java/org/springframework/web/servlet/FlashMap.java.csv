commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Provide a URL path to help identify the target request for this FlashMap.  * <p>The path may be absolute (e.g. "/application/resource") or relative to the  * current request (e.g. "../resource").  */ ;/**  * Provide a URL path to help identify the target request for this FlashMap.  * <p>The path may be absolute (e.g. "/application/resource") or relative to the  * current request (e.g. "../resource").  */ public void setTargetRequestPath(@Nullable String path) {     this.targetRequestPath = path. }
true;public;0;4;/**  * Return the target URL path (or {@code null} if none specified).  */ ;/**  * Return the target URL path (or {@code null} if none specified).  */ @Nullable public String getTargetRequestPath() {     return this.targetRequestPath. }
true;public;1;10;/**  * Provide request parameters identifying the request for this FlashMap.  * @param params a Map with the names and values of expected parameters  */ ;/**  * Provide request parameters identifying the request for this FlashMap.  * @param params a Map with the names and values of expected parameters  */ public FlashMap addTargetRequestParams(@Nullable MultiValueMap<String, String> params) {     if (params != null) {         params.forEach((key, values) -> {             for (String value : values) {                 addTargetRequestParam(key, value).             }         }).     }     return this. }
true;public;2;6;/**  * Provide a request parameter identifying the request for this FlashMap.  * @param name the expected parameter name (skipped if empty)  * @param value the expected value (skipped if empty)  */ ;/**  * Provide a request parameter identifying the request for this FlashMap.  * @param name the expected parameter name (skipped if empty)  * @param value the expected value (skipped if empty)  */ public FlashMap addTargetRequestParam(String name, String value) {     if (StringUtils.hasText(name) && StringUtils.hasText(value)) {         this.targetRequestParams.add(name, value).     }     return this. }
true;public;0;3;/**  * Return the parameters identifying the target request, or an empty map.  */ ;/**  * Return the parameters identifying the target request, or an empty map.  */ public MultiValueMap<String, String> getTargetRequestParams() {     return this.targetRequestParams. }
true;public;1;3;/**  * Start the expiration period for this instance.  * @param timeToLive the number of seconds before expiration  */ ;/**  * Start the expiration period for this instance.  * @param timeToLive the number of seconds before expiration  */ public void startExpirationPeriod(int timeToLive) {     this.expirationTime = System.currentTimeMillis() + timeToLive * 1000. }
true;public;1;3;/**  * Set the expiration time for the FlashMap. This is provided for serialization  * purposes but can also be used instead {@link #startExpirationPeriod(int)}.  * @since 4.2  */ ;/**  * Set the expiration time for the FlashMap. This is provided for serialization  * purposes but can also be used instead {@link #startExpirationPeriod(int)}.  * @since 4.2  */ public void setExpirationTime(long expirationTime) {     this.expirationTime = expirationTime. }
true;public;0;3;/**  * Return the expiration time for the FlashMap or -1 if the expiration  * period has not started.  * @since 4.2  */ ;/**  * Return the expiration time for the FlashMap or -1 if the expiration  * period has not started.  * @since 4.2  */ public long getExpirationTime() {     return this.expirationTime. }
true;public;0;3;/**  * Return whether this instance has expired depending on the amount of  * elapsed time since the call to {@link #startExpirationPeriod}.  */ ;/**  * Return whether this instance has expired depending on the amount of  * elapsed time since the call to {@link #startExpirationPeriod}.  */ public boolean isExpired() {     return (this.expirationTime != -1 && System.currentTimeMillis() > this.expirationTime). }
true;public;1;11;/**  * Compare two FlashMaps and prefer the one that specifies a target URL  * path or has more target URL parameters. Before comparing FlashMap  * instances ensure that they match a given request.  */ ;/**  * Compare two FlashMaps and prefer the one that specifies a target URL  * path or has more target URL parameters. Before comparing FlashMap  * instances ensure that they match a given request.  */ @Override public int compareTo(FlashMap other) {     int thisUrlPath = (this.targetRequestPath != null ? 1 : 0).     int otherUrlPath = (other.targetRequestPath != null ? 1 : 0).     if (thisUrlPath != otherUrlPath) {         return otherUrlPath - thisUrlPath.     } else {         return other.targetRequestParams.size() - this.targetRequestParams.size().     } }
false;public;1;13;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof FlashMap)) {         return false.     }     FlashMap otherFlashMap = (FlashMap) other.     return (super.equals(otherFlashMap) && ObjectUtils.nullSafeEquals(this.targetRequestPath, otherFlashMap.targetRequestPath) && this.targetRequestParams.equals(otherFlashMap.targetRequestParams)). }
false;public;0;7;;@Override public int hashCode() {     int result = super.hashCode().     result = 31 * result + ObjectUtils.nullSafeHashCode(this.targetRequestPath).     result = 31 * result + this.targetRequestParams.hashCode().     return result. }
false;public;0;5;;@Override public String toString() {     return "FlashMap [attributes=" + super.toString() + ", targetRequestPath=" + this.targetRequestPath + ", targetRequestParams=" + this.targetRequestParams + "]". }
