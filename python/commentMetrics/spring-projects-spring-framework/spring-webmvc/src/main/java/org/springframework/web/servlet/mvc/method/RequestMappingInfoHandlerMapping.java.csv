# id;timestamp;commentText;codeText;commentWords;codeWords
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasProducesMismatch();1467230340;Any partial matches for "methods", "consumes", and "produces"?;public boolean hasProducesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,and,produces;public,boolean,has,produces,mismatch,for,partial,match,match,this,partial,matches,if,match,has,produces,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasProducesMismatch();1467730834;Any partial matches for "methods", "consumes", and "produces"?;public boolean hasProducesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,and,produces;public,boolean,has,produces,mismatch,for,partial,match,match,this,partial,matches,if,match,has,produces,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasProducesMismatch();1469219300;Any partial matches for "methods", "consumes", and "produces"?;public boolean hasProducesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,and,produces;public,boolean,has,produces,mismatch,for,partial,match,match,this,partial,matches,if,match,has,produces,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasProducesMismatch();1506370168;Any partial matches for "methods", "consumes", and "produces"?;public boolean hasProducesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,and,produces;public,boolean,has,produces,mismatch,for,partial,match,match,this,partial,matches,if,match,has,produces,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasProducesMismatch();1518770299;Any partial matches for "methods", "consumes", and "produces"?;public boolean hasProducesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,and,produces;public,boolean,has,produces,mismatch,for,partial,match,match,this,partial,matches,if,match,has,produces,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasProducesMismatch();1518987682;Any partial matches for "methods", "consumes", and "produces"?;public boolean hasProducesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,and,produces;public,boolean,has,produces,mismatch,for,partial,match,match,this,partial,matches,if,match,has,produces,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasProducesMismatch();1520433598;Any partial matches for "methods", "consumes", and "produces"?;public boolean hasProducesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,and,produces;public,boolean,has,produces,mismatch,for,partial,match,match,this,partial,matches,if,match,has,produces,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasProducesMismatch();1520434198;Any partial matches for "methods", "consumes", and "produces"?;public boolean hasProducesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,and,produces;public,boolean,has,produces,mismatch,for,partial,match,match,this,partial,matches,if,match,has,produces,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasProducesMismatch();1522843494;Any partial matches for "methods", "consumes", and "produces"?;public boolean hasProducesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,and,produces;public,boolean,has,produces,mismatch,for,partial,match,match,this,partial,matches,if,match,has,produces,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasProducesMismatch();1526303103;Any partial matches for "methods", "consumes", and "produces"?;public boolean hasProducesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,and,produces;public,boolean,has,produces,mismatch,for,partial,match,match,this,partial,matches,if,match,has,produces,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasProducesMismatch();1527188919;Any partial matches for "methods", "consumes", and "produces"?;public boolean hasProducesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,and,produces;public,boolean,has,produces,mismatch,for,partial,match,match,this,partial,matches,if,match,has,produces,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasProducesMismatch();1530174524;Any partial matches for "methods", "consumes", and "produces"?;public boolean hasProducesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,and,produces;public,boolean,has,produces,mismatch,for,partial,match,match,this,partial,matches,if,match,has,produces,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasProducesMismatch();1531966442;Any partial matches for "methods", "consumes", and "produces"?;public boolean hasProducesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,and,produces;public,boolean,has,produces,mismatch,for,partial,match,match,this,partial,matches,if,match,has,produces,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasConsumesMismatch();1467230340;Any partial matches for "methods" and "consumes"?;public boolean hasConsumesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,and,consumes;public,boolean,has,consumes,mismatch,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasConsumesMismatch();1467730834;Any partial matches for "methods" and "consumes"?;public boolean hasConsumesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,and,consumes;public,boolean,has,consumes,mismatch,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasConsumesMismatch();1469219300;Any partial matches for "methods" and "consumes"?;public boolean hasConsumesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,and,consumes;public,boolean,has,consumes,mismatch,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasConsumesMismatch();1506370168;Any partial matches for "methods" and "consumes"?;public boolean hasConsumesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,and,consumes;public,boolean,has,consumes,mismatch,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasConsumesMismatch();1518770299;Any partial matches for "methods" and "consumes"?;public boolean hasConsumesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,and,consumes;public,boolean,has,consumes,mismatch,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasConsumesMismatch();1518987682;Any partial matches for "methods" and "consumes"?;public boolean hasConsumesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,and,consumes;public,boolean,has,consumes,mismatch,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasConsumesMismatch();1520433598;Any partial matches for "methods" and "consumes"?;public boolean hasConsumesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,and,consumes;public,boolean,has,consumes,mismatch,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasConsumesMismatch();1520434198;Any partial matches for "methods" and "consumes"?;public boolean hasConsumesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,and,consumes;public,boolean,has,consumes,mismatch,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasConsumesMismatch();1522843494;Any partial matches for "methods" and "consumes"?;public boolean hasConsumesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,and,consumes;public,boolean,has,consumes,mismatch,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasConsumesMismatch();1526303103;Any partial matches for "methods" and "consumes"?;public boolean hasConsumesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,and,consumes;public,boolean,has,consumes,mismatch,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasConsumesMismatch();1527188919;Any partial matches for "methods" and "consumes"?;public boolean hasConsumesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,and,consumes;public,boolean,has,consumes,mismatch,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasConsumesMismatch();1530174524;Any partial matches for "methods" and "consumes"?;public boolean hasConsumesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,and,consumes;public,boolean,has,consumes,mismatch,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasConsumesMismatch();1531966442;Any partial matches for "methods" and "consumes"?;public boolean hasConsumesMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,and,consumes;public,boolean,has,consumes,mismatch,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getProducibleMediaTypes();1467230340;Return declared "producible" types but only among those that also_match the "methods" and "consumes" conditions.;public Set<MediaType> getProducibleMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<MediaType>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					result.addAll(match.getInfo().getProducesCondition().getProducibleMediaTypes())__				}_			}_			return result__		};return,declared,producible,types,but,only,among,those,that,also,match,the,methods,and,consumes,conditions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,media,type,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,result,add,all,match,get,info,get,produces,condition,get,producible,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getProducibleMediaTypes();1467730834;Return declared "producible" types but only among those that also_match the "methods" and "consumes" conditions.;public Set<MediaType> getProducibleMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					result.addAll(match.getInfo().getProducesCondition().getProducibleMediaTypes())__				}_			}_			return result__		};return,declared,producible,types,but,only,among,those,that,also,match,the,methods,and,consumes,conditions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,result,add,all,match,get,info,get,produces,condition,get,producible,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getProducibleMediaTypes();1469219300;Return declared "producible" types but only among those that also_match the "methods" and "consumes" conditions.;public Set<MediaType> getProducibleMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					result.addAll(match.getInfo().getProducesCondition().getProducibleMediaTypes())__				}_			}_			return result__		};return,declared,producible,types,but,only,among,those,that,also,match,the,methods,and,consumes,conditions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,result,add,all,match,get,info,get,produces,condition,get,producible,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getProducibleMediaTypes();1506370168;Return declared "producible" types but only among those that also_match the "methods" and "consumes" conditions.;public Set<MediaType> getProducibleMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					result.addAll(match.getInfo().getProducesCondition().getProducibleMediaTypes())__				}_			}_			return result__		};return,declared,producible,types,but,only,among,those,that,also,match,the,methods,and,consumes,conditions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,result,add,all,match,get,info,get,produces,condition,get,producible,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getProducibleMediaTypes();1518770299;Return declared "producible" types but only among those that also_match the "methods" and "consumes" conditions.;public Set<MediaType> getProducibleMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					result.addAll(match.getInfo().getProducesCondition().getProducibleMediaTypes())__				}_			}_			return result__		};return,declared,producible,types,but,only,among,those,that,also,match,the,methods,and,consumes,conditions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,result,add,all,match,get,info,get,produces,condition,get,producible,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getProducibleMediaTypes();1518987682;Return declared "producible" types but only among those that also_match the "methods" and "consumes" conditions.;public Set<MediaType> getProducibleMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					result.addAll(match.getInfo().getProducesCondition().getProducibleMediaTypes())__				}_			}_			return result__		};return,declared,producible,types,but,only,among,those,that,also,match,the,methods,and,consumes,conditions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,result,add,all,match,get,info,get,produces,condition,get,producible,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getProducibleMediaTypes();1520433598;Return declared "producible" types but only among those that also_match the "methods" and "consumes" conditions.;public Set<MediaType> getProducibleMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					result.addAll(match.getInfo().getProducesCondition().getProducibleMediaTypes())__				}_			}_			return result__		};return,declared,producible,types,but,only,among,those,that,also,match,the,methods,and,consumes,conditions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,result,add,all,match,get,info,get,produces,condition,get,producible,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getProducibleMediaTypes();1520434198;Return declared "producible" types but only among those that also_match the "methods" and "consumes" conditions.;public Set<MediaType> getProducibleMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					result.addAll(match.getInfo().getProducesCondition().getProducibleMediaTypes())__				}_			}_			return result__		};return,declared,producible,types,but,only,among,those,that,also,match,the,methods,and,consumes,conditions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,result,add,all,match,get,info,get,produces,condition,get,producible,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getProducibleMediaTypes();1522843494;Return declared "producible" types but only among those that also_match the "methods" and "consumes" conditions.;public Set<MediaType> getProducibleMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					result.addAll(match.getInfo().getProducesCondition().getProducibleMediaTypes())__				}_			}_			return result__		};return,declared,producible,types,but,only,among,those,that,also,match,the,methods,and,consumes,conditions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,result,add,all,match,get,info,get,produces,condition,get,producible,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getProducibleMediaTypes();1526303103;Return declared "producible" types but only among those that also_match the "methods" and "consumes" conditions.;public Set<MediaType> getProducibleMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					result.addAll(match.getInfo().getProducesCondition().getProducibleMediaTypes())__				}_			}_			return result__		};return,declared,producible,types,but,only,among,those,that,also,match,the,methods,and,consumes,conditions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,result,add,all,match,get,info,get,produces,condition,get,producible,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getProducibleMediaTypes();1527188919;Return declared "producible" types but only among those that also_match the "methods" and "consumes" conditions.;public Set<MediaType> getProducibleMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					result.addAll(match.getInfo().getProducesCondition().getProducibleMediaTypes())__				}_			}_			return result__		};return,declared,producible,types,but,only,among,those,that,also,match,the,methods,and,consumes,conditions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,result,add,all,match,get,info,get,produces,condition,get,producible,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getProducibleMediaTypes();1530174524;Return declared "producible" types but only among those that also_match the "methods" and "consumes" conditions.;public Set<MediaType> getProducibleMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					result.addAll(match.getInfo().getProducesCondition().getProducibleMediaTypes())__				}_			}_			return result__		};return,declared,producible,types,but,only,among,those,that,also,match,the,methods,and,consumes,conditions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,result,add,all,match,get,info,get,produces,condition,get,producible,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getProducibleMediaTypes();1531966442;Return declared "producible" types but only among those that also_match the "methods" and "consumes" conditions.;public Set<MediaType> getProducibleMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasConsumesMatch()) {_					result.addAll(match.getInfo().getProducesCondition().getProducibleMediaTypes())__				}_			}_			return result__		};return,declared,producible,types,but,only,among,those,that,also,match,the,methods,and,consumes,conditions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,consumes,match,result,add,all,match,get,info,get,produces,condition,get,producible,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasMethodsMismatch();1467230340;Any partial matches for "methods"?;public boolean hasMethodsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods;public,boolean,has,methods,mismatch,for,partial,match,match,this,partial,matches,if,match,has,methods,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasMethodsMismatch();1467730834;Any partial matches for "methods"?;public boolean hasMethodsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods;public,boolean,has,methods,mismatch,for,partial,match,match,this,partial,matches,if,match,has,methods,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasMethodsMismatch();1469219300;Any partial matches for "methods"?;public boolean hasMethodsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods;public,boolean,has,methods,mismatch,for,partial,match,match,this,partial,matches,if,match,has,methods,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasMethodsMismatch();1506370168;Any partial matches for "methods"?;public boolean hasMethodsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods;public,boolean,has,methods,mismatch,for,partial,match,match,this,partial,matches,if,match,has,methods,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasMethodsMismatch();1518770299;Any partial matches for "methods"?;public boolean hasMethodsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods;public,boolean,has,methods,mismatch,for,partial,match,match,this,partial,matches,if,match,has,methods,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasMethodsMismatch();1518987682;Any partial matches for "methods"?;public boolean hasMethodsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods;public,boolean,has,methods,mismatch,for,partial,match,match,this,partial,matches,if,match,has,methods,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasMethodsMismatch();1520433598;Any partial matches for "methods"?;public boolean hasMethodsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods;public,boolean,has,methods,mismatch,for,partial,match,match,this,partial,matches,if,match,has,methods,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasMethodsMismatch();1520434198;Any partial matches for "methods"?;public boolean hasMethodsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods;public,boolean,has,methods,mismatch,for,partial,match,match,this,partial,matches,if,match,has,methods,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasMethodsMismatch();1522843494;Any partial matches for "methods"?;public boolean hasMethodsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods;public,boolean,has,methods,mismatch,for,partial,match,match,this,partial,matches,if,match,has,methods,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasMethodsMismatch();1526303103;Any partial matches for "methods"?;public boolean hasMethodsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods;public,boolean,has,methods,mismatch,for,partial,match,match,this,partial,matches,if,match,has,methods,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasMethodsMismatch();1527188919;Any partial matches for "methods"?;public boolean hasMethodsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods;public,boolean,has,methods,mismatch,for,partial,match,match,this,partial,matches,if,match,has,methods,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasMethodsMismatch();1530174524;Any partial matches for "methods"?;public boolean hasMethodsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods;public,boolean,has,methods,mismatch,for,partial,match,match,this,partial,matches,if,match,has,methods,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasMethodsMismatch();1531966442;Any partial matches for "methods"?;public boolean hasMethodsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods;public,boolean,has,methods,mismatch,for,partial,match,match,this,partial,matches,if,match,has,methods,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasParamsMismatch();1467230340;Any partial matches for "methods", "consumes", "produces", and "params"?;public boolean hasParamsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasParamsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,produces,and,params;public,boolean,has,params,mismatch,for,partial,match,match,this,partial,matches,if,match,has,params,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasParamsMismatch();1467730834;Any partial matches for "methods", "consumes", "produces", and "params"?;public boolean hasParamsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasParamsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,produces,and,params;public,boolean,has,params,mismatch,for,partial,match,match,this,partial,matches,if,match,has,params,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasParamsMismatch();1469219300;Any partial matches for "methods", "consumes", "produces", and "params"?;public boolean hasParamsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasParamsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,produces,and,params;public,boolean,has,params,mismatch,for,partial,match,match,this,partial,matches,if,match,has,params,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasParamsMismatch();1506370168;Any partial matches for "methods", "consumes", "produces", and "params"?;public boolean hasParamsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasParamsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,produces,and,params;public,boolean,has,params,mismatch,for,partial,match,match,this,partial,matches,if,match,has,params,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasParamsMismatch();1518770299;Any partial matches for "methods", "consumes", "produces", and "params"?;public boolean hasParamsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasParamsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,produces,and,params;public,boolean,has,params,mismatch,for,partial,match,match,this,partial,matches,if,match,has,params,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasParamsMismatch();1518987682;Any partial matches for "methods", "consumes", "produces", and "params"?;public boolean hasParamsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasParamsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,produces,and,params;public,boolean,has,params,mismatch,for,partial,match,match,this,partial,matches,if,match,has,params,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasParamsMismatch();1520433598;Any partial matches for "methods", "consumes", "produces", and "params"?;public boolean hasParamsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasParamsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,produces,and,params;public,boolean,has,params,mismatch,for,partial,match,match,this,partial,matches,if,match,has,params,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasParamsMismatch();1520434198;Any partial matches for "methods", "consumes", "produces", and "params"?;public boolean hasParamsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasParamsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,produces,and,params;public,boolean,has,params,mismatch,for,partial,match,match,this,partial,matches,if,match,has,params,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasParamsMismatch();1522843494;Any partial matches for "methods", "consumes", "produces", and "params"?;public boolean hasParamsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasParamsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,produces,and,params;public,boolean,has,params,mismatch,for,partial,match,match,this,partial,matches,if,match,has,params,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasParamsMismatch();1526303103;Any partial matches for "methods", "consumes", "produces", and "params"?;public boolean hasParamsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasParamsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,produces,and,params;public,boolean,has,params,mismatch,for,partial,match,match,this,partial,matches,if,match,has,params,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasParamsMismatch();1527188919;Any partial matches for "methods", "consumes", "produces", and "params"?;public boolean hasParamsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasParamsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,produces,and,params;public,boolean,has,params,mismatch,for,partial,match,match,this,partial,matches,if,match,has,params,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasParamsMismatch();1530174524;Any partial matches for "methods", "consumes", "produces", and "params"?;public boolean hasParamsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasParamsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,produces,and,params;public,boolean,has,params,mismatch,for,partial,match,match,this,partial,matches,if,match,has,params,match,return,false,return,true
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean hasParamsMismatch();1531966442;Any partial matches for "methods", "consumes", "produces", and "params"?;public boolean hasParamsMismatch() {_			for (PartialMatch match : this.partialMatches) {_				if (match.hasParamsMatch()) {_					return false__				}_			}_			return true__		};any,partial,matches,for,methods,consumes,produces,and,params;public,boolean,has,params,mismatch,for,partial,match,match,this,partial,matches,if,match,has,params,match,return,false,return,true
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1328020251;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1335774711;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1337284880;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1346174472;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1346183762;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1356735495;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1357119239;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1362408075;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1366717989;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1368482696;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1375896097;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1383151171;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1385412762;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1392410324;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1399404473;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1415280583;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1428377636;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1453684721;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1453757723;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1467230340;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1467730834;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1469219300;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1506370168;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1518770299;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1518987682;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1520433598;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1520434198;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1522843494;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1526303103;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1527188919;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1530174524;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> @Override 	protected Set<String> getMappingPathPatterns(RequestMappingInfo info);1531966442;Get the URL path patterns associated with this {@link RequestMappingInfo}.;@Override_	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {_		return info.getPatternsCondition().getPatterns()__	};get,the,url,path,patterns,associated,with,this,link,request,mapping,info;override,protected,set,string,get,mapping,path,patterns,request,mapping,info,info,return,info,get,patterns,condition,get,patterns
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public List<String[]> getParamConditions();1467230340;Return declared "params" conditions but only among those that also_match the "methods", "consumes", and "params" conditions.;public List<String[]> getParamConditions() {_			List<String[]> result = new ArrayList<String[]>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					Set<NameValueExpression<String>> set = match.getInfo().getParamsCondition().getExpressions()__					if (!CollectionUtils.isEmpty(set)) {_						int i = 0__						String[] array = new String[set.size()]__						for (NameValueExpression<String> expression : set) {_							array[i++] = expression.toString()__						}_						result.add(array)__					}_				}_			}_			return result__		};return,declared,params,conditions,but,only,among,those,that,also,match,the,methods,consumes,and,params,conditions;public,list,string,get,param,conditions,list,string,result,new,array,list,string,for,partial,match,match,this,partial,matches,if,match,has,produces,match,set,name,value,expression,string,set,match,get,info,get,params,condition,get,expressions,if,collection,utils,is,empty,set,int,i,0,string,array,new,string,set,size,for,name,value,expression,string,expression,set,array,i,expression,to,string,result,add,array,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public List<String[]> getParamConditions();1467730834;Return declared "params" conditions but only among those that also_match the "methods", "consumes", and "params" conditions.;public List<String[]> getParamConditions() {_			List<String[]> result = new ArrayList<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					Set<NameValueExpression<String>> set = match.getInfo().getParamsCondition().getExpressions()__					if (!CollectionUtils.isEmpty(set)) {_						int i = 0__						String[] array = new String[set.size()]__						for (NameValueExpression<String> expression : set) {_							array[i++] = expression.toString()__						}_						result.add(array)__					}_				}_			}_			return result__		};return,declared,params,conditions,but,only,among,those,that,also,match,the,methods,consumes,and,params,conditions;public,list,string,get,param,conditions,list,string,result,new,array,list,for,partial,match,match,this,partial,matches,if,match,has,produces,match,set,name,value,expression,string,set,match,get,info,get,params,condition,get,expressions,if,collection,utils,is,empty,set,int,i,0,string,array,new,string,set,size,for,name,value,expression,string,expression,set,array,i,expression,to,string,result,add,array,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public List<String[]> getParamConditions();1469219300;Return declared "params" conditions but only among those that also_match the "methods", "consumes", and "params" conditions.;public List<String[]> getParamConditions() {_			List<String[]> result = new ArrayList<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					Set<NameValueExpression<String>> set = match.getInfo().getParamsCondition().getExpressions()__					if (!CollectionUtils.isEmpty(set)) {_						int i = 0__						String[] array = new String[set.size()]__						for (NameValueExpression<String> expression : set) {_							array[i++] = expression.toString()__						}_						result.add(array)__					}_				}_			}_			return result__		};return,declared,params,conditions,but,only,among,those,that,also,match,the,methods,consumes,and,params,conditions;public,list,string,get,param,conditions,list,string,result,new,array,list,for,partial,match,match,this,partial,matches,if,match,has,produces,match,set,name,value,expression,string,set,match,get,info,get,params,condition,get,expressions,if,collection,utils,is,empty,set,int,i,0,string,array,new,string,set,size,for,name,value,expression,string,expression,set,array,i,expression,to,string,result,add,array,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public List<String[]> getParamConditions();1506370168;Return declared "params" conditions but only among those that also_match the "methods", "consumes", and "params" conditions.;public List<String[]> getParamConditions() {_			List<String[]> result = new ArrayList<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					Set<NameValueExpression<String>> set = match.getInfo().getParamsCondition().getExpressions()__					if (!CollectionUtils.isEmpty(set)) {_						int i = 0__						String[] array = new String[set.size()]__						for (NameValueExpression<String> expression : set) {_							array[i++] = expression.toString()__						}_						result.add(array)__					}_				}_			}_			return result__		};return,declared,params,conditions,but,only,among,those,that,also,match,the,methods,consumes,and,params,conditions;public,list,string,get,param,conditions,list,string,result,new,array,list,for,partial,match,match,this,partial,matches,if,match,has,produces,match,set,name,value,expression,string,set,match,get,info,get,params,condition,get,expressions,if,collection,utils,is,empty,set,int,i,0,string,array,new,string,set,size,for,name,value,expression,string,expression,set,array,i,expression,to,string,result,add,array,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public List<String[]> getParamConditions();1518770299;Return declared "params" conditions but only among those that also_match the "methods", "consumes", and "params" conditions.;public List<String[]> getParamConditions() {_			List<String[]> result = new ArrayList<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					Set<NameValueExpression<String>> set = match.getInfo().getParamsCondition().getExpressions()__					if (!CollectionUtils.isEmpty(set)) {_						int i = 0__						String[] array = new String[set.size()]__						for (NameValueExpression<String> expression : set) {_							array[i++] = expression.toString()__						}_						result.add(array)__					}_				}_			}_			return result__		};return,declared,params,conditions,but,only,among,those,that,also,match,the,methods,consumes,and,params,conditions;public,list,string,get,param,conditions,list,string,result,new,array,list,for,partial,match,match,this,partial,matches,if,match,has,produces,match,set,name,value,expression,string,set,match,get,info,get,params,condition,get,expressions,if,collection,utils,is,empty,set,int,i,0,string,array,new,string,set,size,for,name,value,expression,string,expression,set,array,i,expression,to,string,result,add,array,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public List<String[]> getParamConditions();1518987682;Return declared "params" conditions but only among those that also_match the "methods", "consumes", and "params" conditions.;public List<String[]> getParamConditions() {_			List<String[]> result = new ArrayList<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					Set<NameValueExpression<String>> set = match.getInfo().getParamsCondition().getExpressions()__					if (!CollectionUtils.isEmpty(set)) {_						int i = 0__						String[] array = new String[set.size()]__						for (NameValueExpression<String> expression : set) {_							array[i++] = expression.toString()__						}_						result.add(array)__					}_				}_			}_			return result__		};return,declared,params,conditions,but,only,among,those,that,also,match,the,methods,consumes,and,params,conditions;public,list,string,get,param,conditions,list,string,result,new,array,list,for,partial,match,match,this,partial,matches,if,match,has,produces,match,set,name,value,expression,string,set,match,get,info,get,params,condition,get,expressions,if,collection,utils,is,empty,set,int,i,0,string,array,new,string,set,size,for,name,value,expression,string,expression,set,array,i,expression,to,string,result,add,array,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public List<String[]> getParamConditions();1520433598;Return declared "params" conditions but only among those that also_match the "methods", "consumes", and "params" conditions.;public List<String[]> getParamConditions() {_			List<String[]> result = new ArrayList<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					Set<NameValueExpression<String>> set = match.getInfo().getParamsCondition().getExpressions()__					if (!CollectionUtils.isEmpty(set)) {_						int i = 0__						String[] array = new String[set.size()]__						for (NameValueExpression<String> expression : set) {_							array[i++] = expression.toString()__						}_						result.add(array)__					}_				}_			}_			return result__		};return,declared,params,conditions,but,only,among,those,that,also,match,the,methods,consumes,and,params,conditions;public,list,string,get,param,conditions,list,string,result,new,array,list,for,partial,match,match,this,partial,matches,if,match,has,produces,match,set,name,value,expression,string,set,match,get,info,get,params,condition,get,expressions,if,collection,utils,is,empty,set,int,i,0,string,array,new,string,set,size,for,name,value,expression,string,expression,set,array,i,expression,to,string,result,add,array,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public List<String[]> getParamConditions();1520434198;Return declared "params" conditions but only among those that also_match the "methods", "consumes", and "params" conditions.;public List<String[]> getParamConditions() {_			List<String[]> result = new ArrayList<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					Set<NameValueExpression<String>> set = match.getInfo().getParamsCondition().getExpressions()__					if (!CollectionUtils.isEmpty(set)) {_						int i = 0__						String[] array = new String[set.size()]__						for (NameValueExpression<String> expression : set) {_							array[i++] = expression.toString()__						}_						result.add(array)__					}_				}_			}_			return result__		};return,declared,params,conditions,but,only,among,those,that,also,match,the,methods,consumes,and,params,conditions;public,list,string,get,param,conditions,list,string,result,new,array,list,for,partial,match,match,this,partial,matches,if,match,has,produces,match,set,name,value,expression,string,set,match,get,info,get,params,condition,get,expressions,if,collection,utils,is,empty,set,int,i,0,string,array,new,string,set,size,for,name,value,expression,string,expression,set,array,i,expression,to,string,result,add,array,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public List<String[]> getParamConditions();1522843494;Return declared "params" conditions but only among those that also_match the "methods", "consumes", and "params" conditions.;public List<String[]> getParamConditions() {_			List<String[]> result = new ArrayList<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					Set<NameValueExpression<String>> set = match.getInfo().getParamsCondition().getExpressions()__					if (!CollectionUtils.isEmpty(set)) {_						int i = 0__						String[] array = new String[set.size()]__						for (NameValueExpression<String> expression : set) {_							array[i++] = expression.toString()__						}_						result.add(array)__					}_				}_			}_			return result__		};return,declared,params,conditions,but,only,among,those,that,also,match,the,methods,consumes,and,params,conditions;public,list,string,get,param,conditions,list,string,result,new,array,list,for,partial,match,match,this,partial,matches,if,match,has,produces,match,set,name,value,expression,string,set,match,get,info,get,params,condition,get,expressions,if,collection,utils,is,empty,set,int,i,0,string,array,new,string,set,size,for,name,value,expression,string,expression,set,array,i,expression,to,string,result,add,array,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public List<String[]> getParamConditions();1526303103;Return declared "params" conditions but only among those that also_match the "methods", "consumes", and "params" conditions.;public List<String[]> getParamConditions() {_			List<String[]> result = new ArrayList<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					Set<NameValueExpression<String>> set = match.getInfo().getParamsCondition().getExpressions()__					if (!CollectionUtils.isEmpty(set)) {_						int i = 0__						String[] array = new String[set.size()]__						for (NameValueExpression<String> expression : set) {_							array[i++] = expression.toString()__						}_						result.add(array)__					}_				}_			}_			return result__		};return,declared,params,conditions,but,only,among,those,that,also,match,the,methods,consumes,and,params,conditions;public,list,string,get,param,conditions,list,string,result,new,array,list,for,partial,match,match,this,partial,matches,if,match,has,produces,match,set,name,value,expression,string,set,match,get,info,get,params,condition,get,expressions,if,collection,utils,is,empty,set,int,i,0,string,array,new,string,set,size,for,name,value,expression,string,expression,set,array,i,expression,to,string,result,add,array,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public List<String[]> getParamConditions();1527188919;Return declared "params" conditions but only among those that also_match the "methods", "consumes", and "params" conditions.;public List<String[]> getParamConditions() {_			List<String[]> result = new ArrayList<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					Set<NameValueExpression<String>> set = match.getInfo().getParamsCondition().getExpressions()__					if (!CollectionUtils.isEmpty(set)) {_						int i = 0__						String[] array = new String[set.size()]__						for (NameValueExpression<String> expression : set) {_							array[i++] = expression.toString()__						}_						result.add(array)__					}_				}_			}_			return result__		};return,declared,params,conditions,but,only,among,those,that,also,match,the,methods,consumes,and,params,conditions;public,list,string,get,param,conditions,list,string,result,new,array,list,for,partial,match,match,this,partial,matches,if,match,has,produces,match,set,name,value,expression,string,set,match,get,info,get,params,condition,get,expressions,if,collection,utils,is,empty,set,int,i,0,string,array,new,string,set,size,for,name,value,expression,string,expression,set,array,i,expression,to,string,result,add,array,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public List<String[]> getParamConditions();1530174524;Return declared "params" conditions but only among those that also_match the "methods", "consumes", and "params" conditions.;public List<String[]> getParamConditions() {_			List<String[]> result = new ArrayList<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					Set<NameValueExpression<String>> set = match.getInfo().getParamsCondition().getExpressions()__					if (!CollectionUtils.isEmpty(set)) {_						int i = 0__						String[] array = new String[set.size()]__						for (NameValueExpression<String> expression : set) {_							array[i++] = expression.toString()__						}_						result.add(array)__					}_				}_			}_			return result__		};return,declared,params,conditions,but,only,among,those,that,also,match,the,methods,consumes,and,params,conditions;public,list,string,get,param,conditions,list,string,result,new,array,list,for,partial,match,match,this,partial,matches,if,match,has,produces,match,set,name,value,expression,string,set,match,get,info,get,params,condition,get,expressions,if,collection,utils,is,empty,set,int,i,0,string,array,new,string,set,size,for,name,value,expression,string,expression,set,array,i,expression,to,string,result,add,array,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public List<String[]> getParamConditions();1531966442;Return declared "params" conditions but only among those that also_match the "methods", "consumes", and "params" conditions.;public List<String[]> getParamConditions() {_			List<String[]> result = new ArrayList<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasProducesMatch()) {_					Set<NameValueExpression<String>> set = match.getInfo().getParamsCondition().getExpressions()__					if (!CollectionUtils.isEmpty(set)) {_						int i = 0__						String[] array = new String[set.size()]__						for (NameValueExpression<String> expression : set) {_							array[i++] = expression.toString()__						}_						result.add(array)__					}_				}_			}_			return result__		};return,declared,params,conditions,but,only,among,those,that,also,match,the,methods,consumes,and,params,conditions;public,list,string,get,param,conditions,list,string,result,new,array,list,for,partial,match,match,this,partial,matches,if,match,has,produces,match,set,name,value,expression,string,set,match,get,info,get,params,condition,get,expressions,if,collection,utils,is,empty,set,int,i,0,string,array,new,string,set,size,for,name,value,expression,string,expression,set,array,i,expression,to,string,result,add,array,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean isEmpty();1467230340;Whether there any partial matches.;public boolean isEmpty() {_			return this.partialMatches.isEmpty()__		};whether,there,any,partial,matches;public,boolean,is,empty,return,this,partial,matches,is,empty
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean isEmpty();1467730834;Whether there any partial matches.;public boolean isEmpty() {_			return this.partialMatches.isEmpty()__		};whether,there,any,partial,matches;public,boolean,is,empty,return,this,partial,matches,is,empty
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean isEmpty();1469219300;Whether there any partial matches.;public boolean isEmpty() {_			return this.partialMatches.isEmpty()__		};whether,there,any,partial,matches;public,boolean,is,empty,return,this,partial,matches,is,empty
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean isEmpty();1506370168;Whether there any partial matches.;public boolean isEmpty() {_			return this.partialMatches.isEmpty()__		};whether,there,any,partial,matches;public,boolean,is,empty,return,this,partial,matches,is,empty
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean isEmpty();1518770299;Whether there any partial matches.;public boolean isEmpty() {_			return this.partialMatches.isEmpty()__		};whether,there,any,partial,matches;public,boolean,is,empty,return,this,partial,matches,is,empty
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean isEmpty();1518987682;Whether there any partial matches.;public boolean isEmpty() {_			return this.partialMatches.isEmpty()__		};whether,there,any,partial,matches;public,boolean,is,empty,return,this,partial,matches,is,empty
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean isEmpty();1520433598;Whether there any partial matches.;public boolean isEmpty() {_			return this.partialMatches.isEmpty()__		};whether,there,any,partial,matches;public,boolean,is,empty,return,this,partial,matches,is,empty
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean isEmpty();1520434198;Whether there any partial matches.;public boolean isEmpty() {_			return this.partialMatches.isEmpty()__		};whether,there,any,partial,matches;public,boolean,is,empty,return,this,partial,matches,is,empty
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean isEmpty();1522843494;Whether there any partial matches.;public boolean isEmpty() {_			return this.partialMatches.isEmpty()__		};whether,there,any,partial,matches;public,boolean,is,empty,return,this,partial,matches,is,empty
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean isEmpty();1526303103;Whether there any partial matches.;public boolean isEmpty() {_			return this.partialMatches.isEmpty()__		};whether,there,any,partial,matches;public,boolean,is,empty,return,this,partial,matches,is,empty
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean isEmpty();1527188919;Whether there any partial matches.;public boolean isEmpty() {_			return this.partialMatches.isEmpty()__		};whether,there,any,partial,matches;public,boolean,is,empty,return,this,partial,matches,is,empty
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean isEmpty();1530174524;Whether there any partial matches.;public boolean isEmpty() {_			return this.partialMatches.isEmpty()__		};whether,there,any,partial,matches;public,boolean,is,empty,return,this,partial,matches,is,empty
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public boolean isEmpty();1531966442;Whether there any partial matches.;public boolean isEmpty() {_			return this.partialMatches.isEmpty()__		};whether,there,any,partial,matches;public,boolean,is,empty,return,this,partial,matches,is,empty
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch( 			Set<RequestMappingInfo> infos, String lookupPath, HttpServletRequest request) throws ServletException;1520434198;Iterate all RequestMappingInfo's once again, look if any match by URL at_least and raise exceptions according to what doesn't match._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(_			Set<RequestMappingInfo> infos, String lookupPath, HttpServletRequest request) throws ServletException {__		PartialMatchHelper helper = new PartialMatchHelper(infos, request)__		if (helper.isEmpty()) {_			return null__		}__		if (helper.hasMethodsMismatch()) {_			Set<String> methods = helper.getAllowedMethods()__			if (HttpMethod.OPTIONS.matches(request.getMethod())) {_				HttpOptionsHandler handler = new HttpOptionsHandler(methods)__				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD)__			}_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), methods)__		}__		if (helper.hasConsumesMismatch()) {_			Set<MediaType> mediaTypes = helper.getConsumableMediaTypes()__			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<>(mediaTypes))__		}__		if (helper.hasProducesMismatch()) {_			Set<MediaType> mediaTypes = helper.getProducibleMediaTypes()__			throw new HttpMediaTypeNotAcceptableException(new ArrayList<>(mediaTypes))__		}__		if (helper.hasParamsMismatch()) {_			List<String[]> conditions = helper.getParamConditions()__			throw new UnsatisfiedServletRequestParameterException(conditions, request.getParameterMap())__		}__		return null__	};iterate,all,request,mapping,info,s,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,according,to,what,doesn,t,match,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,partial,match,helper,helper,new,partial,match,helper,infos,request,if,helper,is,empty,return,null,if,helper,has,methods,mismatch,set,string,methods,helper,get,allowed,methods,if,http,method,options,matches,request,get,method,http,options,handler,handler,new,http,options,handler,methods,return,new,handler,method,handler,throw,new,http,request,method,not,supported,exception,request,get,method,methods,if,helper,has,consumes,mismatch,set,media,type,media,types,helper,get,consumable,media,types,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,types,if,helper,has,produces,mismatch,set,media,type,media,types,helper,get,producible,media,types,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,types,if,helper,has,params,mismatch,list,string,conditions,helper,get,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,conditions,request,get,parameter,map,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch( 			Set<RequestMappingInfo> infos, String lookupPath, HttpServletRequest request) throws ServletException;1522843494;Iterate all RequestMappingInfo's once again, look if any match by URL at_least and raise exceptions according to what doesn't match._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(_			Set<RequestMappingInfo> infos, String lookupPath, HttpServletRequest request) throws ServletException {__		PartialMatchHelper helper = new PartialMatchHelper(infos, request)__		if (helper.isEmpty()) {_			return null__		}__		if (helper.hasMethodsMismatch()) {_			Set<String> methods = helper.getAllowedMethods()__			if (HttpMethod.OPTIONS.matches(request.getMethod())) {_				HttpOptionsHandler handler = new HttpOptionsHandler(methods)__				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD)__			}_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), methods)__		}__		if (helper.hasConsumesMismatch()) {_			Set<MediaType> mediaTypes = helper.getConsumableMediaTypes()__			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<>(mediaTypes))__		}__		if (helper.hasProducesMismatch()) {_			Set<MediaType> mediaTypes = helper.getProducibleMediaTypes()__			throw new HttpMediaTypeNotAcceptableException(new ArrayList<>(mediaTypes))__		}__		if (helper.hasParamsMismatch()) {_			List<String[]> conditions = helper.getParamConditions()__			throw new UnsatisfiedServletRequestParameterException(conditions, request.getParameterMap())__		}__		return null__	};iterate,all,request,mapping,info,s,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,according,to,what,doesn,t,match,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,partial,match,helper,helper,new,partial,match,helper,infos,request,if,helper,is,empty,return,null,if,helper,has,methods,mismatch,set,string,methods,helper,get,allowed,methods,if,http,method,options,matches,request,get,method,http,options,handler,handler,new,http,options,handler,methods,return,new,handler,method,handler,throw,new,http,request,method,not,supported,exception,request,get,method,methods,if,helper,has,consumes,mismatch,set,media,type,media,types,helper,get,consumable,media,types,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,types,if,helper,has,produces,mismatch,set,media,type,media,types,helper,get,producible,media,types,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,types,if,helper,has,params,mismatch,list,string,conditions,helper,get,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,conditions,request,get,parameter,map,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch( 			Set<RequestMappingInfo> infos, String lookupPath, HttpServletRequest request) throws ServletException;1526303103;Iterate all RequestMappingInfo's once again, look if any match by URL at_least and raise exceptions according to what doesn't match._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(_			Set<RequestMappingInfo> infos, String lookupPath, HttpServletRequest request) throws ServletException {__		PartialMatchHelper helper = new PartialMatchHelper(infos, request)__		if (helper.isEmpty()) {_			return null__		}__		if (helper.hasMethodsMismatch()) {_			Set<String> methods = helper.getAllowedMethods()__			if (HttpMethod.OPTIONS.matches(request.getMethod())) {_				HttpOptionsHandler handler = new HttpOptionsHandler(methods)__				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD)__			}_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), methods)__		}__		if (helper.hasConsumesMismatch()) {_			Set<MediaType> mediaTypes = helper.getConsumableMediaTypes()__			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<>(mediaTypes))__		}__		if (helper.hasProducesMismatch()) {_			Set<MediaType> mediaTypes = helper.getProducibleMediaTypes()__			throw new HttpMediaTypeNotAcceptableException(new ArrayList<>(mediaTypes))__		}__		if (helper.hasParamsMismatch()) {_			List<String[]> conditions = helper.getParamConditions()__			throw new UnsatisfiedServletRequestParameterException(conditions, request.getParameterMap())__		}__		return null__	};iterate,all,request,mapping,info,s,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,according,to,what,doesn,t,match,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,partial,match,helper,helper,new,partial,match,helper,infos,request,if,helper,is,empty,return,null,if,helper,has,methods,mismatch,set,string,methods,helper,get,allowed,methods,if,http,method,options,matches,request,get,method,http,options,handler,handler,new,http,options,handler,methods,return,new,handler,method,handler,throw,new,http,request,method,not,supported,exception,request,get,method,methods,if,helper,has,consumes,mismatch,set,media,type,media,types,helper,get,consumable,media,types,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,types,if,helper,has,produces,mismatch,set,media,type,media,types,helper,get,producible,media,types,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,types,if,helper,has,params,mismatch,list,string,conditions,helper,get,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,conditions,request,get,parameter,map,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch( 			Set<RequestMappingInfo> infos, String lookupPath, HttpServletRequest request) throws ServletException;1527188919;Iterate all RequestMappingInfo's once again, look if any match by URL at_least and raise exceptions according to what doesn't match._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(_			Set<RequestMappingInfo> infos, String lookupPath, HttpServletRequest request) throws ServletException {__		PartialMatchHelper helper = new PartialMatchHelper(infos, request)__		if (helper.isEmpty()) {_			return null__		}__		if (helper.hasMethodsMismatch()) {_			Set<String> methods = helper.getAllowedMethods()__			if (HttpMethod.OPTIONS.matches(request.getMethod())) {_				HttpOptionsHandler handler = new HttpOptionsHandler(methods)__				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD)__			}_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), methods)__		}__		if (helper.hasConsumesMismatch()) {_			Set<MediaType> mediaTypes = helper.getConsumableMediaTypes()__			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<>(mediaTypes))__		}__		if (helper.hasProducesMismatch()) {_			Set<MediaType> mediaTypes = helper.getProducibleMediaTypes()__			throw new HttpMediaTypeNotAcceptableException(new ArrayList<>(mediaTypes))__		}__		if (helper.hasParamsMismatch()) {_			List<String[]> conditions = helper.getParamConditions()__			throw new UnsatisfiedServletRequestParameterException(conditions, request.getParameterMap())__		}__		return null__	};iterate,all,request,mapping,info,s,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,according,to,what,doesn,t,match,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,partial,match,helper,helper,new,partial,match,helper,infos,request,if,helper,is,empty,return,null,if,helper,has,methods,mismatch,set,string,methods,helper,get,allowed,methods,if,http,method,options,matches,request,get,method,http,options,handler,handler,new,http,options,handler,methods,return,new,handler,method,handler,throw,new,http,request,method,not,supported,exception,request,get,method,methods,if,helper,has,consumes,mismatch,set,media,type,media,types,helper,get,consumable,media,types,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,types,if,helper,has,produces,mismatch,set,media,type,media,types,helper,get,producible,media,types,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,types,if,helper,has,params,mismatch,list,string,conditions,helper,get,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,conditions,request,get,parameter,map,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch( 			Set<RequestMappingInfo> infos, String lookupPath, HttpServletRequest request) throws ServletException;1530174524;Iterate all RequestMappingInfo's once again, look if any match by URL at_least and raise exceptions according to what doesn't match._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(_			Set<RequestMappingInfo> infos, String lookupPath, HttpServletRequest request) throws ServletException {__		PartialMatchHelper helper = new PartialMatchHelper(infos, request)__		if (helper.isEmpty()) {_			return null__		}__		if (helper.hasMethodsMismatch()) {_			Set<String> methods = helper.getAllowedMethods()__			if (HttpMethod.OPTIONS.matches(request.getMethod())) {_				HttpOptionsHandler handler = new HttpOptionsHandler(methods)__				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD)__			}_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), methods)__		}__		if (helper.hasConsumesMismatch()) {_			Set<MediaType> mediaTypes = helper.getConsumableMediaTypes()__			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<>(mediaTypes))__		}__		if (helper.hasProducesMismatch()) {_			Set<MediaType> mediaTypes = helper.getProducibleMediaTypes()__			throw new HttpMediaTypeNotAcceptableException(new ArrayList<>(mediaTypes))__		}__		if (helper.hasParamsMismatch()) {_			List<String[]> conditions = helper.getParamConditions()__			throw new UnsatisfiedServletRequestParameterException(conditions, request.getParameterMap())__		}__		return null__	};iterate,all,request,mapping,info,s,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,according,to,what,doesn,t,match,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,partial,match,helper,helper,new,partial,match,helper,infos,request,if,helper,is,empty,return,null,if,helper,has,methods,mismatch,set,string,methods,helper,get,allowed,methods,if,http,method,options,matches,request,get,method,http,options,handler,handler,new,http,options,handler,methods,return,new,handler,method,handler,throw,new,http,request,method,not,supported,exception,request,get,method,methods,if,helper,has,consumes,mismatch,set,media,type,media,types,helper,get,consumable,media,types,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,types,if,helper,has,produces,mismatch,set,media,type,media,types,helper,get,producible,media,types,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,types,if,helper,has,params,mismatch,list,string,conditions,helper,get,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,conditions,request,get,parameter,map,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch( 			Set<RequestMappingInfo> infos, String lookupPath, HttpServletRequest request) throws ServletException;1531966442;Iterate all RequestMappingInfo's once again, look if any match by URL at_least and raise exceptions according to what doesn't match._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(_			Set<RequestMappingInfo> infos, String lookupPath, HttpServletRequest request) throws ServletException {__		PartialMatchHelper helper = new PartialMatchHelper(infos, request)__		if (helper.isEmpty()) {_			return null__		}__		if (helper.hasMethodsMismatch()) {_			Set<String> methods = helper.getAllowedMethods()__			if (HttpMethod.OPTIONS.matches(request.getMethod())) {_				HttpOptionsHandler handler = new HttpOptionsHandler(methods)__				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD)__			}_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), methods)__		}__		if (helper.hasConsumesMismatch()) {_			Set<MediaType> mediaTypes = helper.getConsumableMediaTypes()__			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<>(mediaTypes))__		}__		if (helper.hasProducesMismatch()) {_			Set<MediaType> mediaTypes = helper.getProducibleMediaTypes()__			throw new HttpMediaTypeNotAcceptableException(new ArrayList<>(mediaTypes))__		}__		if (helper.hasParamsMismatch()) {_			List<String[]> conditions = helper.getParamConditions()__			throw new UnsatisfiedServletRequestParameterException(conditions, request.getParameterMap())__		}__		return null__	};iterate,all,request,mapping,info,s,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,according,to,what,doesn,t,match,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,partial,match,helper,helper,new,partial,match,helper,infos,request,if,helper,is,empty,return,null,if,helper,has,methods,mismatch,set,string,methods,helper,get,allowed,methods,if,http,method,options,matches,request,get,method,http,options,handler,handler,new,http,options,handler,methods,return,new,handler,method,handler,throw,new,http,request,method,not,supported,exception,request,get,method,methods,if,helper,has,consumes,mismatch,set,media,type,media,types,helper,get,consumable,media,types,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,types,if,helper,has,produces,mismatch,set,media,type,media,types,helper,get,producible,media,types,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,types,if,helper,has,params,mismatch,list,string,conditions,helper,get,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,conditions,request,get,parameter,map,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1328020251;Expose URI template variables and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		String bestPattern = patterns.isEmpty() ? lookupPath : patterns.iterator().next()__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		_		Map<String, String> uriTemplateVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)___		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,set,string,patterns,info,get,patterns,condition,get,patterns,string,best,pattern,patterns,is,empty,lookup,path,patterns,iterator,next,request,set,attribute,best,pattern,map,string,string,uri,template,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,request,set,attribute,handler,mapping,uri,template,variables,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1335774711;Expose URI template variables and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		String bestPattern = patterns.isEmpty() ? lookupPath : patterns.iterator().next()__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		_		Map<String, String> uriTemplateVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)___		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,set,string,patterns,info,get,patterns,condition,get,patterns,string,best,pattern,patterns,is,empty,lookup,path,patterns,iterator,next,request,set,attribute,best,pattern,map,string,string,uri,template,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,request,set,attribute,handler,mapping,uri,template,variables,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1337284880;Expose URI template variables and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		String bestPattern = patterns.isEmpty() ? lookupPath : patterns.iterator().next()__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)___		Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__		Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedVars)___		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,set,string,patterns,info,get,patterns,condition,get,patterns,string,best,pattern,patterns,is,empty,lookup,path,patterns,iterator,next,request,set,attribute,best,pattern,map,string,string,vars,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,request,set,attribute,handler,mapping,decoded,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1346174472;Expose URI template variables, matrix variables, and producible media types in the request.__@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		String bestPattern = patterns.isEmpty() ? lookupPath : patterns.iterator().next()__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)___		Map<String, String> uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__		Map<String, String> decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, extractMatrixVariables(uriVariables))__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,set,string,patterns,info,get,patterns,condition,get,patterns,string,best,pattern,patterns,is,empty,lookup,path,patterns,iterator,next,request,set,attribute,best,pattern,map,string,string,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,map,string,string,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,request,set,attribute,handler,mapping,extract,matrix,variables,uri,variables,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1346183762;Expose URI template variables, matrix variables, and producible media types in the request.__@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		String bestPattern = patterns.isEmpty() ? lookupPath : patterns.iterator().next()__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)___		Map<String, String> uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__		Map<String, String> decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, extractMatrixVariables(uriVariables))__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,set,string,patterns,info,get,patterns,condition,get,patterns,string,best,pattern,patterns,is,empty,lookup,path,patterns,iterator,next,request,set,attribute,best,pattern,map,string,string,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,map,string,string,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,request,set,attribute,handler,mapping,extract,matrix,variables,uri,variables,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1356735495;Expose URI template variables, matrix variables, and producible media types in the request.__@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		String bestPattern = patterns.isEmpty() ? lookupPath : patterns.iterator().next()__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)___		Map<String, String> uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__		Map<String, String> decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, extractMatrixVariables(uriVariables))__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,set,string,patterns,info,get,patterns,condition,get,patterns,string,best,pattern,patterns,is,empty,lookup,path,patterns,iterator,next,request,set,attribute,best,pattern,map,string,string,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,map,string,string,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,request,set,attribute,handler,mapping,extract,matrix,variables,uri,variables,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1357119239;Expose URI template variables, matrix variables, and producible media types in the request.__@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		String bestPattern = patterns.isEmpty() ? lookupPath : patterns.iterator().next()__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)___		Map<String, String> uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__		Map<String, String> decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, extractMatrixVariables(uriVariables))__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,set,string,patterns,info,get,patterns,condition,get,patterns,string,best,pattern,patterns,is,empty,lookup,path,patterns,iterator,next,request,set,attribute,best,pattern,map,string,string,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,map,string,string,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,request,set,attribute,handler,mapping,extract,matrix,variables,uri,variables,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1362408075;Expose URI template variables, matrix variables, and producible media types in the request.__@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		String bestPattern = patterns.isEmpty() ? lookupPath : patterns.iterator().next()__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)___		Map<String, String> uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__		Map<String, String> decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, extractMatrixVariables(request, uriVariables))__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,set,string,patterns,info,get,patterns,condition,get,patterns,string,best,pattern,patterns,is,empty,lookup,path,patterns,iterator,next,request,set,attribute,best,pattern,map,string,string,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,map,string,string,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,request,set,attribute,handler,mapping,extract,matrix,variables,request,uri,variables,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1366717989;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		String bestPattern = patterns.isEmpty() ? lookupPath : patterns.iterator().next()__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)___		Map<String, String> uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__		Map<String, String> decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, extractMatrixVariables(request, uriVariables))__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,set,string,patterns,info,get,patterns,condition,get,patterns,string,best,pattern,patterns,is,empty,lookup,path,patterns,iterator,next,request,set,attribute,best,pattern,map,string,string,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,map,string,string,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,request,set,attribute,handler,mapping,extract,matrix,variables,request,uri,variables,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1368482696;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		String bestPattern = patterns.isEmpty() ? lookupPath : patterns.iterator().next()__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)___		Map<String, String> uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__		Map<String, String> decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, extractMatrixVariables(request, uriVariables))__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,set,string,patterns,info,get,patterns,condition,get,patterns,string,best,pattern,patterns,is,empty,lookup,path,patterns,iterator,next,request,set,attribute,best,pattern,map,string,string,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,map,string,string,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,request,set,attribute,handler,mapping,extract,matrix,variables,request,uri,variables,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1375896097;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		String bestPattern = patterns.isEmpty() ? lookupPath : patterns.iterator().next()__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)___		Map<String, String> uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__		Map<String, String> decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, extractMatrixVariables(request, uriVariables))__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,set,string,patterns,info,get,patterns,condition,get,patterns,string,best,pattern,patterns,is,empty,lookup,path,patterns,iterator,next,request,set,attribute,best,pattern,map,string,string,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,map,string,string,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,request,set,attribute,handler,mapping,extract,matrix,variables,request,uri,variables,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1383151171;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1385412762;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1392410324;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1399404473;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1415280583;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1428377636;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1453684721;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1453757723;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1467230340;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1467730834;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1469219300;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1506370168;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1518770299;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1518987682;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1520433598;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1520434198;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1522843494;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1526303103;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables__		Map<String, String> decodedUriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__			decodedUriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__			decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,map,string,string,decoded,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,decoded,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,best,pattern,request,set,attribute,handler,mapping,decoded,uri,variables,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1527188919;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		Map<String, String> decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,request,set,attribute,best,pattern,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,map,string,string,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,handler,mapping,decoded,uri,variables,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1530174524;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		Map<String, String> decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,request,set,attribute,best,pattern,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,map,string,string,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,handler,mapping,decoded,uri,variables,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request);1531966442;Expose URI template variables, matrix variables, and producible media types in the request._@see HandlerMapping#URI_TEMPLATE_VARIABLES_ATTRIBUTE_@see HandlerMapping#MATRIX_VARIABLES_ATTRIBUTE_@see HandlerMapping#PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE;@Override_	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {_		super.handleMatch(info, lookupPath, request)___		String bestPattern__		Map<String, String> uriVariables___		Set<String> patterns = info.getPatternsCondition().getPatterns()__		if (patterns.isEmpty()) {_			bestPattern = lookupPath__			uriVariables = Collections.emptyMap()__		}_		else {_			bestPattern = patterns.iterator().next()__			uriVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath)__		}__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern)___		if (isMatrixVariableContentAvailable()) {_			Map<String, MultiValueMap<String, String>> matrixVars = extractMatrixVariables(request, uriVariables)__			request.setAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, matrixVars)__		}__		Map<String, String> decodedUriVariables = getUrlPathHelper().decodePathVariables(request, uriVariables)__		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, decodedUriVariables)___		if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {_			Set<MediaType> mediaTypes = info.getProducesCondition().getProducibleMediaTypes()__			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes)__		}_	};expose,uri,template,variables,matrix,variables,and,producible,media,types,in,the,request,see,handler,mapping,see,handler,mapping,see,handler,mapping;override,protected,void,handle,match,request,mapping,info,info,string,lookup,path,http,servlet,request,request,super,handle,match,info,lookup,path,request,string,best,pattern,map,string,string,uri,variables,set,string,patterns,info,get,patterns,condition,get,patterns,if,patterns,is,empty,best,pattern,lookup,path,uri,variables,collections,empty,map,else,best,pattern,patterns,iterator,next,uri,variables,get,path,matcher,extract,uri,template,variables,best,pattern,lookup,path,request,set,attribute,best,pattern,if,is,matrix,variable,content,available,map,string,multi,value,map,string,string,matrix,vars,extract,matrix,variables,request,uri,variables,request,set,attribute,handler,mapping,matrix,vars,map,string,string,decoded,uri,variables,get,url,path,helper,decode,path,variables,request,uri,variables,request,set,attribute,handler,mapping,decoded,uri,variables,if,info,get,produces,condition,get,producible,media,types,is,empty,set,media,type,media,types,info,get,produces,condition,get,producible,media,types,request,set,attribute,media,types
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1328020251;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@returns an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,returns,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1335774711;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1337284880;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1346174472;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1346183762;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1356735495;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1357119239;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1362408075;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1366717989;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1368482696;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1375896097;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1383151171;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1385412762;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1392410324;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1399404473;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1415280583;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1428377636;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1453684721;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1453757723;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1467230340;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1467730834;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1469219300;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1506370168;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1518770299;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1518987682;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1520433598;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1520434198;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1522843494;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1526303103;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1527188919;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1530174524;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> @Override 	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request);1531966442;Check if the given RequestMappingInfo matches the current request and_return a (potentially new) instance with conditions that match the_current request -- for example with a subset of URL patterns._@return an info in case of a match_ or {@code null} otherwise.;@Override_	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {_		return info.getMatchingCondition(request)__	};check,if,the,given,request,mapping,info,matches,the,current,request,and,return,a,potentially,new,instance,with,conditions,that,match,the,current,request,for,example,with,a,subset,of,url,patterns,return,an,info,in,case,of,a,match,or,code,null,otherwise;override,protected,request,mapping,info,get,matching,mapping,request,mapping,info,info,http,servlet,request,request,return,info,get,matching,condition,request
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<String> getAllowedMethods();1467230340;Return declared HTTP methods.;public Set<String> getAllowedMethods() {_			Set<String> result = new LinkedHashSet<String>()__			for (PartialMatch match : this.partialMatches) {_				for (RequestMethod method : match.getInfo().getMethodsCondition().getMethods()) {_					result.add(method.name())__				}_			}_			return result__		};return,declared,http,methods;public,set,string,get,allowed,methods,set,string,result,new,linked,hash,set,string,for,partial,match,match,this,partial,matches,for,request,method,method,match,get,info,get,methods,condition,get,methods,result,add,method,name,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<String> getAllowedMethods();1467730834;Return declared HTTP methods.;public Set<String> getAllowedMethods() {_			Set<String> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				for (RequestMethod method : match.getInfo().getMethodsCondition().getMethods()) {_					result.add(method.name())__				}_			}_			return result__		};return,declared,http,methods;public,set,string,get,allowed,methods,set,string,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,for,request,method,method,match,get,info,get,methods,condition,get,methods,result,add,method,name,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<String> getAllowedMethods();1469219300;Return declared HTTP methods.;public Set<String> getAllowedMethods() {_			Set<String> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				for (RequestMethod method : match.getInfo().getMethodsCondition().getMethods()) {_					result.add(method.name())__				}_			}_			return result__		};return,declared,http,methods;public,set,string,get,allowed,methods,set,string,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,for,request,method,method,match,get,info,get,methods,condition,get,methods,result,add,method,name,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<String> getAllowedMethods();1506370168;Return declared HTTP methods.;public Set<String> getAllowedMethods() {_			Set<String> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				for (RequestMethod method : match.getInfo().getMethodsCondition().getMethods()) {_					result.add(method.name())__				}_			}_			return result__		};return,declared,http,methods;public,set,string,get,allowed,methods,set,string,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,for,request,method,method,match,get,info,get,methods,condition,get,methods,result,add,method,name,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<String> getAllowedMethods();1518770299;Return declared HTTP methods.;public Set<String> getAllowedMethods() {_			Set<String> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				for (RequestMethod method : match.getInfo().getMethodsCondition().getMethods()) {_					result.add(method.name())__				}_			}_			return result__		};return,declared,http,methods;public,set,string,get,allowed,methods,set,string,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,for,request,method,method,match,get,info,get,methods,condition,get,methods,result,add,method,name,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<String> getAllowedMethods();1518987682;Return declared HTTP methods.;public Set<String> getAllowedMethods() {_			Set<String> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				for (RequestMethod method : match.getInfo().getMethodsCondition().getMethods()) {_					result.add(method.name())__				}_			}_			return result__		};return,declared,http,methods;public,set,string,get,allowed,methods,set,string,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,for,request,method,method,match,get,info,get,methods,condition,get,methods,result,add,method,name,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<String> getAllowedMethods();1520433598;Return declared HTTP methods.;public Set<String> getAllowedMethods() {_			Set<String> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				for (RequestMethod method : match.getInfo().getMethodsCondition().getMethods()) {_					result.add(method.name())__				}_			}_			return result__		};return,declared,http,methods;public,set,string,get,allowed,methods,set,string,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,for,request,method,method,match,get,info,get,methods,condition,get,methods,result,add,method,name,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<String> getAllowedMethods();1520434198;Return declared HTTP methods.;public Set<String> getAllowedMethods() {_			Set<String> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				for (RequestMethod method : match.getInfo().getMethodsCondition().getMethods()) {_					result.add(method.name())__				}_			}_			return result__		};return,declared,http,methods;public,set,string,get,allowed,methods,set,string,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,for,request,method,method,match,get,info,get,methods,condition,get,methods,result,add,method,name,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<String> getAllowedMethods();1522843494;Return declared HTTP methods.;public Set<String> getAllowedMethods() {_			Set<String> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				for (RequestMethod method : match.getInfo().getMethodsCondition().getMethods()) {_					result.add(method.name())__				}_			}_			return result__		};return,declared,http,methods;public,set,string,get,allowed,methods,set,string,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,for,request,method,method,match,get,info,get,methods,condition,get,methods,result,add,method,name,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<String> getAllowedMethods();1526303103;Return declared HTTP methods.;public Set<String> getAllowedMethods() {_			Set<String> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				for (RequestMethod method : match.getInfo().getMethodsCondition().getMethods()) {_					result.add(method.name())__				}_			}_			return result__		};return,declared,http,methods;public,set,string,get,allowed,methods,set,string,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,for,request,method,method,match,get,info,get,methods,condition,get,methods,result,add,method,name,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<String> getAllowedMethods();1527188919;Return declared HTTP methods.;public Set<String> getAllowedMethods() {_			Set<String> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				for (RequestMethod method : match.getInfo().getMethodsCondition().getMethods()) {_					result.add(method.name())__				}_			}_			return result__		};return,declared,http,methods;public,set,string,get,allowed,methods,set,string,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,for,request,method,method,match,get,info,get,methods,condition,get,methods,result,add,method,name,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<String> getAllowedMethods();1530174524;Return declared HTTP methods.;public Set<String> getAllowedMethods() {_			Set<String> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				for (RequestMethod method : match.getInfo().getMethodsCondition().getMethods()) {_					result.add(method.name())__				}_			}_			return result__		};return,declared,http,methods;public,set,string,get,allowed,methods,set,string,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,for,request,method,method,match,get,info,get,methods,condition,get,methods,result,add,method,name,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<String> getAllowedMethods();1531966442;Return declared HTTP methods.;public Set<String> getAllowedMethods() {_			Set<String> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				for (RequestMethod method : match.getInfo().getMethodsCondition().getMethods()) {_					result.add(method.name())__				}_			}_			return result__		};return,declared,http,methods;public,set,string,get,allowed,methods,set,string,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,for,request,method,method,match,get,info,get,methods,condition,get,methods,result,add,method,name,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> PartialMatch -> public PartialMatch(RequestMappingInfo info, HttpServletRequest request);1467230340;@param info RequestMappingInfo that matches the URL path._@param request the current request;public PartialMatch(RequestMappingInfo info, HttpServletRequest request) {_				this.info = info__				this.methodsMatch = info.getMethodsCondition().getMatchingCondition(request) != null__				this.consumesMatch = info.getConsumesCondition().getMatchingCondition(request) != null__				this.producesMatch = info.getProducesCondition().getMatchingCondition(request) != null__				this.paramsMatch = info.getParamsCondition().getMatchingCondition(request) != null__			};param,info,request,mapping,info,that,matches,the,url,path,param,request,the,current,request;public,partial,match,request,mapping,info,info,http,servlet,request,request,this,info,info,this,methods,match,info,get,methods,condition,get,matching,condition,request,null,this,consumes,match,info,get,consumes,condition,get,matching,condition,request,null,this,produces,match,info,get,produces,condition,get,matching,condition,request,null,this,params,match,info,get,params,condition,get,matching,condition,request,null
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> PartialMatch -> public PartialMatch(RequestMappingInfo info, HttpServletRequest request);1467730834;@param info RequestMappingInfo that matches the URL path._@param request the current request;public PartialMatch(RequestMappingInfo info, HttpServletRequest request) {_				this.info = info__				this.methodsMatch = info.getMethodsCondition().getMatchingCondition(request) != null__				this.consumesMatch = info.getConsumesCondition().getMatchingCondition(request) != null__				this.producesMatch = info.getProducesCondition().getMatchingCondition(request) != null__				this.paramsMatch = info.getParamsCondition().getMatchingCondition(request) != null__			};param,info,request,mapping,info,that,matches,the,url,path,param,request,the,current,request;public,partial,match,request,mapping,info,info,http,servlet,request,request,this,info,info,this,methods,match,info,get,methods,condition,get,matching,condition,request,null,this,consumes,match,info,get,consumes,condition,get,matching,condition,request,null,this,produces,match,info,get,produces,condition,get,matching,condition,request,null,this,params,match,info,get,params,condition,get,matching,condition,request,null
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> PartialMatch -> public PartialMatch(RequestMappingInfo info, HttpServletRequest request);1469219300;@param info RequestMappingInfo that matches the URL path._@param request the current request;public PartialMatch(RequestMappingInfo info, HttpServletRequest request) {_				this.info = info__				this.methodsMatch = (info.getMethodsCondition().getMatchingCondition(request) != null)__				this.consumesMatch = (info.getConsumesCondition().getMatchingCondition(request) != null)__				this.producesMatch = (info.getProducesCondition().getMatchingCondition(request) != null)__				this.paramsMatch = (info.getParamsCondition().getMatchingCondition(request) != null)__			};param,info,request,mapping,info,that,matches,the,url,path,param,request,the,current,request;public,partial,match,request,mapping,info,info,http,servlet,request,request,this,info,info,this,methods,match,info,get,methods,condition,get,matching,condition,request,null,this,consumes,match,info,get,consumes,condition,get,matching,condition,request,null,this,produces,match,info,get,produces,condition,get,matching,condition,request,null,this,params,match,info,get,params,condition,get,matching,condition,request,null
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> PartialMatch -> public PartialMatch(RequestMappingInfo info, HttpServletRequest request);1506370168;@param info RequestMappingInfo that matches the URL path._@param request the current request;public PartialMatch(RequestMappingInfo info, HttpServletRequest request) {_				this.info = info__				this.methodsMatch = (info.getMethodsCondition().getMatchingCondition(request) != null)__				this.consumesMatch = (info.getConsumesCondition().getMatchingCondition(request) != null)__				this.producesMatch = (info.getProducesCondition().getMatchingCondition(request) != null)__				this.paramsMatch = (info.getParamsCondition().getMatchingCondition(request) != null)__			};param,info,request,mapping,info,that,matches,the,url,path,param,request,the,current,request;public,partial,match,request,mapping,info,info,http,servlet,request,request,this,info,info,this,methods,match,info,get,methods,condition,get,matching,condition,request,null,this,consumes,match,info,get,consumes,condition,get,matching,condition,request,null,this,produces,match,info,get,produces,condition,get,matching,condition,request,null,this,params,match,info,get,params,condition,get,matching,condition,request,null
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> PartialMatch -> public PartialMatch(RequestMappingInfo info, HttpServletRequest request);1518770299;@param info RequestMappingInfo that matches the URL path._@param request the current request;public PartialMatch(RequestMappingInfo info, HttpServletRequest request) {_				this.info = info__				this.methodsMatch = (info.getMethodsCondition().getMatchingCondition(request) != null)__				this.consumesMatch = (info.getConsumesCondition().getMatchingCondition(request) != null)__				this.producesMatch = (info.getProducesCondition().getMatchingCondition(request) != null)__				this.paramsMatch = (info.getParamsCondition().getMatchingCondition(request) != null)__			};param,info,request,mapping,info,that,matches,the,url,path,param,request,the,current,request;public,partial,match,request,mapping,info,info,http,servlet,request,request,this,info,info,this,methods,match,info,get,methods,condition,get,matching,condition,request,null,this,consumes,match,info,get,consumes,condition,get,matching,condition,request,null,this,produces,match,info,get,produces,condition,get,matching,condition,request,null,this,params,match,info,get,params,condition,get,matching,condition,request,null
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> PartialMatch -> public PartialMatch(RequestMappingInfo info, HttpServletRequest request);1518987682;@param info RequestMappingInfo that matches the URL path._@param request the current request;public PartialMatch(RequestMappingInfo info, HttpServletRequest request) {_				this.info = info__				this.methodsMatch = (info.getMethodsCondition().getMatchingCondition(request) != null)__				this.consumesMatch = (info.getConsumesCondition().getMatchingCondition(request) != null)__				this.producesMatch = (info.getProducesCondition().getMatchingCondition(request) != null)__				this.paramsMatch = (info.getParamsCondition().getMatchingCondition(request) != null)__			};param,info,request,mapping,info,that,matches,the,url,path,param,request,the,current,request;public,partial,match,request,mapping,info,info,http,servlet,request,request,this,info,info,this,methods,match,info,get,methods,condition,get,matching,condition,request,null,this,consumes,match,info,get,consumes,condition,get,matching,condition,request,null,this,produces,match,info,get,produces,condition,get,matching,condition,request,null,this,params,match,info,get,params,condition,get,matching,condition,request,null
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> PartialMatch -> public PartialMatch(RequestMappingInfo info, HttpServletRequest request);1520433598;@param info RequestMappingInfo that matches the URL path._@param request the current request;public PartialMatch(RequestMappingInfo info, HttpServletRequest request) {_				this.info = info__				this.methodsMatch = (info.getMethodsCondition().getMatchingCondition(request) != null)__				this.consumesMatch = (info.getConsumesCondition().getMatchingCondition(request) != null)__				this.producesMatch = (info.getProducesCondition().getMatchingCondition(request) != null)__				this.paramsMatch = (info.getParamsCondition().getMatchingCondition(request) != null)__			};param,info,request,mapping,info,that,matches,the,url,path,param,request,the,current,request;public,partial,match,request,mapping,info,info,http,servlet,request,request,this,info,info,this,methods,match,info,get,methods,condition,get,matching,condition,request,null,this,consumes,match,info,get,consumes,condition,get,matching,condition,request,null,this,produces,match,info,get,produces,condition,get,matching,condition,request,null,this,params,match,info,get,params,condition,get,matching,condition,request,null
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> PartialMatch -> public PartialMatch(RequestMappingInfo info, HttpServletRequest request);1520434198;@param info RequestMappingInfo that matches the URL path._@param request the current request;public PartialMatch(RequestMappingInfo info, HttpServletRequest request) {_				this.info = info__				this.methodsMatch = (info.getMethodsCondition().getMatchingCondition(request) != null)__				this.consumesMatch = (info.getConsumesCondition().getMatchingCondition(request) != null)__				this.producesMatch = (info.getProducesCondition().getMatchingCondition(request) != null)__				this.paramsMatch = (info.getParamsCondition().getMatchingCondition(request) != null)__			};param,info,request,mapping,info,that,matches,the,url,path,param,request,the,current,request;public,partial,match,request,mapping,info,info,http,servlet,request,request,this,info,info,this,methods,match,info,get,methods,condition,get,matching,condition,request,null,this,consumes,match,info,get,consumes,condition,get,matching,condition,request,null,this,produces,match,info,get,produces,condition,get,matching,condition,request,null,this,params,match,info,get,params,condition,get,matching,condition,request,null
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> PartialMatch -> public PartialMatch(RequestMappingInfo info, HttpServletRequest request);1522843494;@param info RequestMappingInfo that matches the URL path._@param request the current request;public PartialMatch(RequestMappingInfo info, HttpServletRequest request) {_				this.info = info__				this.methodsMatch = (info.getMethodsCondition().getMatchingCondition(request) != null)__				this.consumesMatch = (info.getConsumesCondition().getMatchingCondition(request) != null)__				this.producesMatch = (info.getProducesCondition().getMatchingCondition(request) != null)__				this.paramsMatch = (info.getParamsCondition().getMatchingCondition(request) != null)__			};param,info,request,mapping,info,that,matches,the,url,path,param,request,the,current,request;public,partial,match,request,mapping,info,info,http,servlet,request,request,this,info,info,this,methods,match,info,get,methods,condition,get,matching,condition,request,null,this,consumes,match,info,get,consumes,condition,get,matching,condition,request,null,this,produces,match,info,get,produces,condition,get,matching,condition,request,null,this,params,match,info,get,params,condition,get,matching,condition,request,null
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> PartialMatch -> public PartialMatch(RequestMappingInfo info, HttpServletRequest request);1526303103;@param info RequestMappingInfo that matches the URL path._@param request the current request;public PartialMatch(RequestMappingInfo info, HttpServletRequest request) {_				this.info = info__				this.methodsMatch = (info.getMethodsCondition().getMatchingCondition(request) != null)__				this.consumesMatch = (info.getConsumesCondition().getMatchingCondition(request) != null)__				this.producesMatch = (info.getProducesCondition().getMatchingCondition(request) != null)__				this.paramsMatch = (info.getParamsCondition().getMatchingCondition(request) != null)__			};param,info,request,mapping,info,that,matches,the,url,path,param,request,the,current,request;public,partial,match,request,mapping,info,info,http,servlet,request,request,this,info,info,this,methods,match,info,get,methods,condition,get,matching,condition,request,null,this,consumes,match,info,get,consumes,condition,get,matching,condition,request,null,this,produces,match,info,get,produces,condition,get,matching,condition,request,null,this,params,match,info,get,params,condition,get,matching,condition,request,null
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> PartialMatch -> public PartialMatch(RequestMappingInfo info, HttpServletRequest request);1527188919;@param info RequestMappingInfo that matches the URL path._@param request the current request;public PartialMatch(RequestMappingInfo info, HttpServletRequest request) {_				this.info = info__				this.methodsMatch = (info.getMethodsCondition().getMatchingCondition(request) != null)__				this.consumesMatch = (info.getConsumesCondition().getMatchingCondition(request) != null)__				this.producesMatch = (info.getProducesCondition().getMatchingCondition(request) != null)__				this.paramsMatch = (info.getParamsCondition().getMatchingCondition(request) != null)__			};param,info,request,mapping,info,that,matches,the,url,path,param,request,the,current,request;public,partial,match,request,mapping,info,info,http,servlet,request,request,this,info,info,this,methods,match,info,get,methods,condition,get,matching,condition,request,null,this,consumes,match,info,get,consumes,condition,get,matching,condition,request,null,this,produces,match,info,get,produces,condition,get,matching,condition,request,null,this,params,match,info,get,params,condition,get,matching,condition,request,null
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> PartialMatch -> public PartialMatch(RequestMappingInfo info, HttpServletRequest request);1530174524;Create a new {@link PartialMatch} instance._@param info the RequestMappingInfo that matches the URL path._@param request the current request;public PartialMatch(RequestMappingInfo info, HttpServletRequest request) {_				this.info = info__				this.methodsMatch = (info.getMethodsCondition().getMatchingCondition(request) != null)__				this.consumesMatch = (info.getConsumesCondition().getMatchingCondition(request) != null)__				this.producesMatch = (info.getProducesCondition().getMatchingCondition(request) != null)__				this.paramsMatch = (info.getParamsCondition().getMatchingCondition(request) != null)__			};create,a,new,link,partial,match,instance,param,info,the,request,mapping,info,that,matches,the,url,path,param,request,the,current,request;public,partial,match,request,mapping,info,info,http,servlet,request,request,this,info,info,this,methods,match,info,get,methods,condition,get,matching,condition,request,null,this,consumes,match,info,get,consumes,condition,get,matching,condition,request,null,this,produces,match,info,get,produces,condition,get,matching,condition,request,null,this,params,match,info,get,params,condition,get,matching,condition,request,null
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> PartialMatch -> public PartialMatch(RequestMappingInfo info, HttpServletRequest request);1531966442;Create a new {@link PartialMatch} instance._@param info the RequestMappingInfo that matches the URL path._@param request the current request;public PartialMatch(RequestMappingInfo info, HttpServletRequest request) {_				this.info = info__				this.methodsMatch = (info.getMethodsCondition().getMatchingCondition(request) != null)__				this.consumesMatch = (info.getConsumesCondition().getMatchingCondition(request) != null)__				this.producesMatch = (info.getProducesCondition().getMatchingCondition(request) != null)__				this.paramsMatch = (info.getParamsCondition().getMatchingCondition(request) != null)__			};create,a,new,link,partial,match,instance,param,info,the,request,mapping,info,that,matches,the,url,path,param,request,the,current,request;public,partial,match,request,mapping,info,info,http,servlet,request,request,this,info,info,this,methods,match,info,get,methods,condition,get,matching,condition,request,null,this,consumes,match,info,get,consumes,condition,get,matching,condition,request,null,this,produces,match,info,get,produces,condition,get,matching,condition,request,null,this,params,match,info,get,params,condition,get,matching,condition,request,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos, String lookupPath, 			HttpServletRequest request) throws ServletException;1467230340;Iterate all RequestMappingInfo's once again, look if any match by URL at_least and raise exceptions according to what doesn't match.__@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos, String lookupPath,_			HttpServletRequest request) throws ServletException {__		PartialMatchHelper helper = new PartialMatchHelper(infos, request)___		if (helper.isEmpty()) {_			return null__		}__		if (helper.hasMethodsMismatch()) {_			Set<String> methods = helper.getAllowedMethods()__			if (HttpMethod.OPTIONS.matches(request.getMethod())) {_				HttpOptionsHandler handler = new HttpOptionsHandler(methods)__				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD)__			}_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), methods)__		}__		if (helper.hasConsumesMismatch()) {_			Set<MediaType> mediaTypes = helper.getConsumableMediaTypes()__			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(mediaTypes))__		}__		if (helper.hasProducesMismatch()) {_			Set<MediaType> mediaTypes = helper.getProducibleMediaTypes()__			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(mediaTypes))__		}__		if (helper.hasParamsMismatch()) {_			List<String[]> conditions = helper.getParamConditions()__			throw new UnsatisfiedServletRequestParameterException(conditions, request.getParameterMap())__		}__		return null__	};iterate,all,request,mapping,info,s,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,according,to,what,doesn,t,match,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,partial,match,helper,helper,new,partial,match,helper,infos,request,if,helper,is,empty,return,null,if,helper,has,methods,mismatch,set,string,methods,helper,get,allowed,methods,if,http,method,options,matches,request,get,method,http,options,handler,handler,new,http,options,handler,methods,return,new,handler,method,handler,throw,new,http,request,method,not,supported,exception,request,get,method,methods,if,helper,has,consumes,mismatch,set,media,type,media,types,helper,get,consumable,media,types,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,media,types,if,helper,has,produces,mismatch,set,media,type,media,types,helper,get,producible,media,types,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,media,types,if,helper,has,params,mismatch,list,string,conditions,helper,get,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,conditions,request,get,parameter,map,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos, String lookupPath, 			HttpServletRequest request) throws ServletException;1467730834;Iterate all RequestMappingInfo's once again, look if any match by URL at_least and raise exceptions according to what doesn't match.__@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos, String lookupPath,_			HttpServletRequest request) throws ServletException {__		PartialMatchHelper helper = new PartialMatchHelper(infos, request)___		if (helper.isEmpty()) {_			return null__		}__		if (helper.hasMethodsMismatch()) {_			Set<String> methods = helper.getAllowedMethods()__			if (HttpMethod.OPTIONS.matches(request.getMethod())) {_				HttpOptionsHandler handler = new HttpOptionsHandler(methods)__				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD)__			}_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), methods)__		}__		if (helper.hasConsumesMismatch()) {_			Set<MediaType> mediaTypes = helper.getConsumableMediaTypes()__			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<>(mediaTypes))__		}__		if (helper.hasProducesMismatch()) {_			Set<MediaType> mediaTypes = helper.getProducibleMediaTypes()__			throw new HttpMediaTypeNotAcceptableException(new ArrayList<>(mediaTypes))__		}__		if (helper.hasParamsMismatch()) {_			List<String[]> conditions = helper.getParamConditions()__			throw new UnsatisfiedServletRequestParameterException(conditions, request.getParameterMap())__		}__		return null__	};iterate,all,request,mapping,info,s,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,according,to,what,doesn,t,match,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,partial,match,helper,helper,new,partial,match,helper,infos,request,if,helper,is,empty,return,null,if,helper,has,methods,mismatch,set,string,methods,helper,get,allowed,methods,if,http,method,options,matches,request,get,method,http,options,handler,handler,new,http,options,handler,methods,return,new,handler,method,handler,throw,new,http,request,method,not,supported,exception,request,get,method,methods,if,helper,has,consumes,mismatch,set,media,type,media,types,helper,get,consumable,media,types,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,types,if,helper,has,produces,mismatch,set,media,type,media,types,helper,get,producible,media,types,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,types,if,helper,has,params,mismatch,list,string,conditions,helper,get,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,conditions,request,get,parameter,map,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos, String lookupPath, 			HttpServletRequest request) throws ServletException;1469219300;Iterate all RequestMappingInfo's once again, look if any match by URL at_least and raise exceptions according to what doesn't match._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos, String lookupPath,_			HttpServletRequest request) throws ServletException {__		PartialMatchHelper helper = new PartialMatchHelper(infos, request)___		if (helper.isEmpty()) {_			return null__		}__		if (helper.hasMethodsMismatch()) {_			Set<String> methods = helper.getAllowedMethods()__			if (HttpMethod.OPTIONS.matches(request.getMethod())) {_				HttpOptionsHandler handler = new HttpOptionsHandler(methods)__				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD)__			}_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), methods)__		}__		if (helper.hasConsumesMismatch()) {_			Set<MediaType> mediaTypes = helper.getConsumableMediaTypes()__			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<>(mediaTypes))__		}__		if (helper.hasProducesMismatch()) {_			Set<MediaType> mediaTypes = helper.getProducibleMediaTypes()__			throw new HttpMediaTypeNotAcceptableException(new ArrayList<>(mediaTypes))__		}__		if (helper.hasParamsMismatch()) {_			List<String[]> conditions = helper.getParamConditions()__			throw new UnsatisfiedServletRequestParameterException(conditions, request.getParameterMap())__		}__		return null__	};iterate,all,request,mapping,info,s,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,according,to,what,doesn,t,match,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,partial,match,helper,helper,new,partial,match,helper,infos,request,if,helper,is,empty,return,null,if,helper,has,methods,mismatch,set,string,methods,helper,get,allowed,methods,if,http,method,options,matches,request,get,method,http,options,handler,handler,new,http,options,handler,methods,return,new,handler,method,handler,throw,new,http,request,method,not,supported,exception,request,get,method,methods,if,helper,has,consumes,mismatch,set,media,type,media,types,helper,get,consumable,media,types,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,types,if,helper,has,produces,mismatch,set,media,type,media,types,helper,get,producible,media,types,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,types,if,helper,has,params,mismatch,list,string,conditions,helper,get,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,conditions,request,get,parameter,map,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos, String lookupPath, 			HttpServletRequest request) throws ServletException;1506370168;Iterate all RequestMappingInfo's once again, look if any match by URL at_least and raise exceptions according to what doesn't match._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos, String lookupPath,_			HttpServletRequest request) throws ServletException {__		PartialMatchHelper helper = new PartialMatchHelper(infos, request)___		if (helper.isEmpty()) {_			return null__		}__		if (helper.hasMethodsMismatch()) {_			Set<String> methods = helper.getAllowedMethods()__			if (HttpMethod.OPTIONS.matches(request.getMethod())) {_				HttpOptionsHandler handler = new HttpOptionsHandler(methods)__				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD)__			}_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), methods)__		}__		if (helper.hasConsumesMismatch()) {_			Set<MediaType> mediaTypes = helper.getConsumableMediaTypes()__			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<>(mediaTypes))__		}__		if (helper.hasProducesMismatch()) {_			Set<MediaType> mediaTypes = helper.getProducibleMediaTypes()__			throw new HttpMediaTypeNotAcceptableException(new ArrayList<>(mediaTypes))__		}__		if (helper.hasParamsMismatch()) {_			List<String[]> conditions = helper.getParamConditions()__			throw new UnsatisfiedServletRequestParameterException(conditions, request.getParameterMap())__		}__		return null__	};iterate,all,request,mapping,info,s,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,according,to,what,doesn,t,match,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,partial,match,helper,helper,new,partial,match,helper,infos,request,if,helper,is,empty,return,null,if,helper,has,methods,mismatch,set,string,methods,helper,get,allowed,methods,if,http,method,options,matches,request,get,method,http,options,handler,handler,new,http,options,handler,methods,return,new,handler,method,handler,throw,new,http,request,method,not,supported,exception,request,get,method,methods,if,helper,has,consumes,mismatch,set,media,type,media,types,helper,get,consumable,media,types,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,types,if,helper,has,produces,mismatch,set,media,type,media,types,helper,get,producible,media,types,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,types,if,helper,has,params,mismatch,list,string,conditions,helper,get,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,conditions,request,get,parameter,map,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos, String lookupPath, 			HttpServletRequest request) throws ServletException;1518770299;Iterate all RequestMappingInfo's once again, look if any match by URL at_least and raise exceptions according to what doesn't match._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos, String lookupPath,_			HttpServletRequest request) throws ServletException {__		PartialMatchHelper helper = new PartialMatchHelper(infos, request)___		if (helper.isEmpty()) {_			return null__		}__		if (helper.hasMethodsMismatch()) {_			Set<String> methods = helper.getAllowedMethods()__			if (HttpMethod.OPTIONS.matches(request.getMethod())) {_				HttpOptionsHandler handler = new HttpOptionsHandler(methods)__				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD)__			}_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), methods)__		}__		if (helper.hasConsumesMismatch()) {_			Set<MediaType> mediaTypes = helper.getConsumableMediaTypes()__			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<>(mediaTypes))__		}__		if (helper.hasProducesMismatch()) {_			Set<MediaType> mediaTypes = helper.getProducibleMediaTypes()__			throw new HttpMediaTypeNotAcceptableException(new ArrayList<>(mediaTypes))__		}__		if (helper.hasParamsMismatch()) {_			List<String[]> conditions = helper.getParamConditions()__			throw new UnsatisfiedServletRequestParameterException(conditions, request.getParameterMap())__		}__		return null__	};iterate,all,request,mapping,info,s,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,according,to,what,doesn,t,match,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,partial,match,helper,helper,new,partial,match,helper,infos,request,if,helper,is,empty,return,null,if,helper,has,methods,mismatch,set,string,methods,helper,get,allowed,methods,if,http,method,options,matches,request,get,method,http,options,handler,handler,new,http,options,handler,methods,return,new,handler,method,handler,throw,new,http,request,method,not,supported,exception,request,get,method,methods,if,helper,has,consumes,mismatch,set,media,type,media,types,helper,get,consumable,media,types,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,types,if,helper,has,produces,mismatch,set,media,type,media,types,helper,get,producible,media,types,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,types,if,helper,has,params,mismatch,list,string,conditions,helper,get,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,conditions,request,get,parameter,map,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos, String lookupPath, 			HttpServletRequest request) throws ServletException;1518987682;Iterate all RequestMappingInfo's once again, look if any match by URL at_least and raise exceptions according to what doesn't match._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos, String lookupPath,_			HttpServletRequest request) throws ServletException {__		PartialMatchHelper helper = new PartialMatchHelper(infos, request)___		if (helper.isEmpty()) {_			return null__		}__		if (helper.hasMethodsMismatch()) {_			Set<String> methods = helper.getAllowedMethods()__			if (HttpMethod.OPTIONS.matches(request.getMethod())) {_				HttpOptionsHandler handler = new HttpOptionsHandler(methods)__				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD)__			}_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), methods)__		}__		if (helper.hasConsumesMismatch()) {_			Set<MediaType> mediaTypes = helper.getConsumableMediaTypes()__			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<>(mediaTypes))__		}__		if (helper.hasProducesMismatch()) {_			Set<MediaType> mediaTypes = helper.getProducibleMediaTypes()__			throw new HttpMediaTypeNotAcceptableException(new ArrayList<>(mediaTypes))__		}__		if (helper.hasParamsMismatch()) {_			List<String[]> conditions = helper.getParamConditions()__			throw new UnsatisfiedServletRequestParameterException(conditions, request.getParameterMap())__		}__		return null__	};iterate,all,request,mapping,info,s,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,according,to,what,doesn,t,match,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,partial,match,helper,helper,new,partial,match,helper,infos,request,if,helper,is,empty,return,null,if,helper,has,methods,mismatch,set,string,methods,helper,get,allowed,methods,if,http,method,options,matches,request,get,method,http,options,handler,handler,new,http,options,handler,methods,return,new,handler,method,handler,throw,new,http,request,method,not,supported,exception,request,get,method,methods,if,helper,has,consumes,mismatch,set,media,type,media,types,helper,get,consumable,media,types,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,types,if,helper,has,produces,mismatch,set,media,type,media,types,helper,get,producible,media,types,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,types,if,helper,has,params,mismatch,list,string,conditions,helper,get,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,conditions,request,get,parameter,map,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos, String lookupPath, 			HttpServletRequest request) throws ServletException;1520433598;Iterate all RequestMappingInfo's once again, look if any match by URL at_least and raise exceptions according to what doesn't match._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos, String lookupPath,_			HttpServletRequest request) throws ServletException {__		PartialMatchHelper helper = new PartialMatchHelper(infos, request)___		if (helper.isEmpty()) {_			return null__		}__		if (helper.hasMethodsMismatch()) {_			Set<String> methods = helper.getAllowedMethods()__			if (HttpMethod.OPTIONS.matches(request.getMethod())) {_				HttpOptionsHandler handler = new HttpOptionsHandler(methods)__				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD)__			}_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), methods)__		}__		if (helper.hasConsumesMismatch()) {_			Set<MediaType> mediaTypes = helper.getConsumableMediaTypes()__			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<>(mediaTypes))__		}__		if (helper.hasProducesMismatch()) {_			Set<MediaType> mediaTypes = helper.getProducibleMediaTypes()__			throw new HttpMediaTypeNotAcceptableException(new ArrayList<>(mediaTypes))__		}__		if (helper.hasParamsMismatch()) {_			List<String[]> conditions = helper.getParamConditions()__			throw new UnsatisfiedServletRequestParameterException(conditions, request.getParameterMap())__		}__		return null__	};iterate,all,request,mapping,info,s,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,according,to,what,doesn,t,match,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,partial,match,helper,helper,new,partial,match,helper,infos,request,if,helper,is,empty,return,null,if,helper,has,methods,mismatch,set,string,methods,helper,get,allowed,methods,if,http,method,options,matches,request,get,method,http,options,handler,handler,new,http,options,handler,methods,return,new,handler,method,handler,throw,new,http,request,method,not,supported,exception,request,get,method,methods,if,helper,has,consumes,mismatch,set,media,type,media,types,helper,get,consumable,media,types,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,types,if,helper,has,produces,mismatch,set,media,type,media,types,helper,get,producible,media,types,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,types,if,helper,has,params,mismatch,list,string,conditions,helper,get,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,conditions,request,get,parameter,map,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1328020251;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1335774711;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1337284880;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1346174472;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1346183762;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1356735495;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			@Override_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,override,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1357119239;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1362408075;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1366717989;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1368482696;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			@Override_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,override,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1375896097;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			@Override_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,override,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1383151171;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			@Override_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,override,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1385412762;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			@Override_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,override,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1392410324;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			@Override_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,override,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1399404473;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			@Override_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,override,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1415280583;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			@Override_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,override,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1428377636;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			@Override_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,override,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1453684721;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			@Override_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,override,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1453757723;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			@Override_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,override,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1467230340;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			@Override_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,override,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1467730834;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			@Override_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,override,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1469219300;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			@Override_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,override,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1506370168;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return new Comparator<RequestMappingInfo>() {_			@Override_			public int compare(RequestMappingInfo info1, RequestMappingInfo info2) {_				return info1.compareTo(info2, request)__			}_		}__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,new,comparator,request,mapping,info,override,public,int,compare,request,mapping,info,info1,request,mapping,info,info2,return,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1518770299;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return (info1, info2) -> info1.compareTo(info2, request)__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,info1,info2,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1518987682;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return (info1, info2) -> info1.compareTo(info2, request)__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,info1,info2,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1520433598;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return (info1, info2) -> info1.compareTo(info2, request)__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,info1,info2,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1520434198;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return (info1, info2) -> info1.compareTo(info2, request)__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,info1,info2,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1522843494;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return (info1, info2) -> info1.compareTo(info2, request)__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,info1,info2,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1526303103;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return (info1, info2) -> info1.compareTo(info2, request)__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,info1,info2,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1527188919;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return (info1, info2) -> info1.compareTo(info2, request)__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,info1,info2,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1530174524;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return (info1, info2) -> info1.compareTo(info2, request)__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,info1,info2,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> @Override 	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request);1531966442;Provide a Comparator to sort RequestMappingInfos matched to a request.;@Override_	protected Comparator<RequestMappingInfo> getMappingComparator(final HttpServletRequest request) {_		return (info1, info2) -> info1.compareTo(info2, request)__	};provide,a,comparator,to,sort,request,mapping,infos,matched,to,a,request;override,protected,comparator,request,mapping,info,get,mapping,comparator,final,http,servlet,request,request,return,info1,info2,info1,compare,to,info2,request
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getConsumableMediaTypes();1467230340;Return declared "consumable" types but only among those that also_match the "methods" condition.;public Set<MediaType> getConsumableMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<MediaType>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					result.addAll(match.getInfo().getConsumesCondition().getConsumableMediaTypes())__				}_			}_			return result__		};return,declared,consumable,types,but,only,among,those,that,also,match,the,methods,condition;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,media,type,for,partial,match,match,this,partial,matches,if,match,has,methods,match,result,add,all,match,get,info,get,consumes,condition,get,consumable,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getConsumableMediaTypes();1467730834;Return declared "consumable" types but only among those that also_match the "methods" condition.;public Set<MediaType> getConsumableMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					result.addAll(match.getInfo().getConsumesCondition().getConsumableMediaTypes())__				}_			}_			return result__		};return,declared,consumable,types,but,only,among,those,that,also,match,the,methods,condition;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,methods,match,result,add,all,match,get,info,get,consumes,condition,get,consumable,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getConsumableMediaTypes();1469219300;Return declared "consumable" types but only among those that also_match the "methods" condition.;public Set<MediaType> getConsumableMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					result.addAll(match.getInfo().getConsumesCondition().getConsumableMediaTypes())__				}_			}_			return result__		};return,declared,consumable,types,but,only,among,those,that,also,match,the,methods,condition;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,methods,match,result,add,all,match,get,info,get,consumes,condition,get,consumable,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getConsumableMediaTypes();1506370168;Return declared "consumable" types but only among those that also_match the "methods" condition.;public Set<MediaType> getConsumableMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					result.addAll(match.getInfo().getConsumesCondition().getConsumableMediaTypes())__				}_			}_			return result__		};return,declared,consumable,types,but,only,among,those,that,also,match,the,methods,condition;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,methods,match,result,add,all,match,get,info,get,consumes,condition,get,consumable,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getConsumableMediaTypes();1518770299;Return declared "consumable" types but only among those that also_match the "methods" condition.;public Set<MediaType> getConsumableMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					result.addAll(match.getInfo().getConsumesCondition().getConsumableMediaTypes())__				}_			}_			return result__		};return,declared,consumable,types,but,only,among,those,that,also,match,the,methods,condition;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,methods,match,result,add,all,match,get,info,get,consumes,condition,get,consumable,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getConsumableMediaTypes();1518987682;Return declared "consumable" types but only among those that also_match the "methods" condition.;public Set<MediaType> getConsumableMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					result.addAll(match.getInfo().getConsumesCondition().getConsumableMediaTypes())__				}_			}_			return result__		};return,declared,consumable,types,but,only,among,those,that,also,match,the,methods,condition;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,methods,match,result,add,all,match,get,info,get,consumes,condition,get,consumable,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getConsumableMediaTypes();1520433598;Return declared "consumable" types but only among those that also_match the "methods" condition.;public Set<MediaType> getConsumableMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					result.addAll(match.getInfo().getConsumesCondition().getConsumableMediaTypes())__				}_			}_			return result__		};return,declared,consumable,types,but,only,among,those,that,also,match,the,methods,condition;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,methods,match,result,add,all,match,get,info,get,consumes,condition,get,consumable,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getConsumableMediaTypes();1520434198;Return declared "consumable" types but only among those that also_match the "methods" condition.;public Set<MediaType> getConsumableMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					result.addAll(match.getInfo().getConsumesCondition().getConsumableMediaTypes())__				}_			}_			return result__		};return,declared,consumable,types,but,only,among,those,that,also,match,the,methods,condition;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,methods,match,result,add,all,match,get,info,get,consumes,condition,get,consumable,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getConsumableMediaTypes();1522843494;Return declared "consumable" types but only among those that also_match the "methods" condition.;public Set<MediaType> getConsumableMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					result.addAll(match.getInfo().getConsumesCondition().getConsumableMediaTypes())__				}_			}_			return result__		};return,declared,consumable,types,but,only,among,those,that,also,match,the,methods,condition;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,methods,match,result,add,all,match,get,info,get,consumes,condition,get,consumable,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getConsumableMediaTypes();1526303103;Return declared "consumable" types but only among those that also_match the "methods" condition.;public Set<MediaType> getConsumableMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					result.addAll(match.getInfo().getConsumesCondition().getConsumableMediaTypes())__				}_			}_			return result__		};return,declared,consumable,types,but,only,among,those,that,also,match,the,methods,condition;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,methods,match,result,add,all,match,get,info,get,consumes,condition,get,consumable,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getConsumableMediaTypes();1527188919;Return declared "consumable" types but only among those that also_match the "methods" condition.;public Set<MediaType> getConsumableMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					result.addAll(match.getInfo().getConsumesCondition().getConsumableMediaTypes())__				}_			}_			return result__		};return,declared,consumable,types,but,only,among,those,that,also,match,the,methods,condition;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,methods,match,result,add,all,match,get,info,get,consumes,condition,get,consumable,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getConsumableMediaTypes();1530174524;Return declared "consumable" types but only among those that also_match the "methods" condition.;public Set<MediaType> getConsumableMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					result.addAll(match.getInfo().getConsumesCondition().getConsumableMediaTypes())__				}_			}_			return result__		};return,declared,consumable,types,but,only,among,those,that,also,match,the,methods,condition;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,methods,match,result,add,all,match,get,info,get,consumes,condition,get,consumable,media,types,return,result
RequestMappingInfoHandlerMapping -> PartialMatchHelper -> public Set<MediaType> getConsumableMediaTypes();1531966442;Return declared "consumable" types but only among those that also_match the "methods" condition.;public Set<MediaType> getConsumableMediaTypes() {_			Set<MediaType> result = new LinkedHashSet<>()__			for (PartialMatch match : this.partialMatches) {_				if (match.hasMethodsMatch()) {_					result.addAll(match.getInfo().getConsumesCondition().getConsumableMediaTypes())__				}_			}_			return result__		};return,declared,consumable,types,but,only,among,those,that,also,match,the,methods,condition;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,partial,match,match,this,partial,matches,if,match,has,methods,match,result,add,all,match,get,info,get,consumes,condition,get,consumable,media,types,return,result
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 			String lookupPath, HttpServletRequest request) throws ServletException;1346183762;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly.__@throws HttpRequestMethodNotSupportedException_if there are matches by URL but not by HTTP method_@throws HttpMediaTypeNotAcceptableException_if there are matches by URL but not by consumable media types_@throws HttpMediaTypeNotAcceptableException_if there are matches by URL but not by producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_			String lookupPath, HttpServletRequest request) throws ServletException {__		Set<String> allowedMethods = new HashSet<String>(6)___		Set<RequestMappingInfo> patternMatches = new HashSet<RequestMappingInfo>()__		Set<RequestMappingInfo> patternAndMethodMatches = new HashSet<RequestMappingInfo>()___		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				patternMatches.add(info)__				if (info.getMethodsCondition().getMatchingCondition(request) != null) {_					patternAndMethodMatches.add(info)__				}_				else {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_			}_		}__		if (patternMatches.isEmpty()) {_			return null__		}_		else if (patternAndMethodMatches.isEmpty() && !allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}__		Set<MediaType> consumableMediaTypes__		Set<MediaType> producibleMediaTypes___		if (patternAndMethodMatches.isEmpty()) {_			consumableMediaTypes = getConsumableMediaTypes(request, patternMatches)__			producibleMediaTypes = getProdicubleMediaTypes(request, patternMatches)__		}_		else {_			consumableMediaTypes = getConsumableMediaTypes(request, patternAndMethodMatches)__			producibleMediaTypes = getProdicubleMediaTypes(request, patternAndMethodMatches)__		}__		if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				contentType = MediaType.parseMediaType(request.getContentType())__			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,media,types,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,hash,set,string,6,set,request,mapping,info,pattern,matches,new,hash,set,request,mapping,info,set,request,mapping,info,pattern,and,method,matches,new,hash,set,request,mapping,info,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,pattern,matches,add,info,if,info,get,methods,condition,get,matching,condition,request,null,pattern,and,method,matches,add,info,else,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,pattern,matches,is,empty,return,null,else,if,pattern,and,method,matches,is,empty,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,set,media,type,consumable,media,types,set,media,type,producible,media,types,if,pattern,and,method,matches,is,empty,consumable,media,types,get,consumable,media,types,request,pattern,matches,producible,media,types,get,prodicuble,media,types,request,pattern,matches,else,consumable,media,types,get,consumable,media,types,request,pattern,and,method,matches,producible,media,types,get,prodicuble,media,types,request,pattern,and,method,matches,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,content,type,media,type,parse,media,type,request,get,content,type,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 			String lookupPath, HttpServletRequest request) throws ServletException;1356735495;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly.__@throws HttpRequestMethodNotSupportedException_if there are matches by URL but not by HTTP method_@throws HttpMediaTypeNotAcceptableException_if there are matches by URL but not by consumable media types_@throws HttpMediaTypeNotAcceptableException_if there are matches by URL but not by producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_			String lookupPath, HttpServletRequest request) throws ServletException {__		Set<String> allowedMethods = new HashSet<String>(6)___		Set<RequestMappingInfo> patternMatches = new HashSet<RequestMappingInfo>()__		Set<RequestMappingInfo> patternAndMethodMatches = new HashSet<RequestMappingInfo>()___		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				patternMatches.add(info)__				if (info.getMethodsCondition().getMatchingCondition(request) != null) {_					patternAndMethodMatches.add(info)__				}_				else {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_			}_		}__		if (patternMatches.isEmpty()) {_			return null__		}_		else if (patternAndMethodMatches.isEmpty() && !allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}__		Set<MediaType> consumableMediaTypes__		Set<MediaType> producibleMediaTypes___		if (patternAndMethodMatches.isEmpty()) {_			consumableMediaTypes = getConsumableMediaTypes(request, patternMatches)__			producibleMediaTypes = getProdicubleMediaTypes(request, patternMatches)__		}_		else {_			consumableMediaTypes = getConsumableMediaTypes(request, patternAndMethodMatches)__			producibleMediaTypes = getProdicubleMediaTypes(request, patternAndMethodMatches)__		}__		if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				contentType = MediaType.parseMediaType(request.getContentType())__			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,media,types,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,hash,set,string,6,set,request,mapping,info,pattern,matches,new,hash,set,request,mapping,info,set,request,mapping,info,pattern,and,method,matches,new,hash,set,request,mapping,info,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,pattern,matches,add,info,if,info,get,methods,condition,get,matching,condition,request,null,pattern,and,method,matches,add,info,else,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,pattern,matches,is,empty,return,null,else,if,pattern,and,method,matches,is,empty,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,set,media,type,consumable,media,types,set,media,type,producible,media,types,if,pattern,and,method,matches,is,empty,consumable,media,types,get,consumable,media,types,request,pattern,matches,producible,media,types,get,prodicuble,media,types,request,pattern,matches,else,consumable,media,types,get,consumable,media,types,request,pattern,and,method,matches,producible,media,types,get,prodicuble,media,types,request,pattern,and,method,matches,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,content,type,media,type,parse,media,type,request,get,content,type,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 			String lookupPath, HttpServletRequest request) throws ServletException;1357119239;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly.__@throws HttpRequestMethodNotSupportedException_if there are matches by URL but not by HTTP method_@throws HttpMediaTypeNotAcceptableException_if there are matches by URL but not by consumable media types_@throws HttpMediaTypeNotAcceptableException_if there are matches by URL but not by producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_			String lookupPath, HttpServletRequest request) throws ServletException {__		Set<String> allowedMethods = new HashSet<String>(6)___		Set<RequestMappingInfo> patternMatches = new HashSet<RequestMappingInfo>()__		Set<RequestMappingInfo> patternAndMethodMatches = new HashSet<RequestMappingInfo>()___		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				patternMatches.add(info)__				if (info.getMethodsCondition().getMatchingCondition(request) != null) {_					patternAndMethodMatches.add(info)__				}_				else {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_			}_		}__		if (patternMatches.isEmpty()) {_			return null__		}_		else if (patternAndMethodMatches.isEmpty() && !allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}__		Set<MediaType> consumableMediaTypes__		Set<MediaType> producibleMediaTypes___		if (patternAndMethodMatches.isEmpty()) {_			consumableMediaTypes = getConsumableMediaTypes(request, patternMatches)__			producibleMediaTypes = getProdicubleMediaTypes(request, patternMatches)__		}_		else {_			consumableMediaTypes = getConsumableMediaTypes(request, patternAndMethodMatches)__			producibleMediaTypes = getProdicubleMediaTypes(request, patternAndMethodMatches)__		}__		if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				contentType = MediaType.parseMediaType(request.getContentType())__			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,media,types,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,hash,set,string,6,set,request,mapping,info,pattern,matches,new,hash,set,request,mapping,info,set,request,mapping,info,pattern,and,method,matches,new,hash,set,request,mapping,info,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,pattern,matches,add,info,if,info,get,methods,condition,get,matching,condition,request,null,pattern,and,method,matches,add,info,else,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,pattern,matches,is,empty,return,null,else,if,pattern,and,method,matches,is,empty,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,set,media,type,consumable,media,types,set,media,type,producible,media,types,if,pattern,and,method,matches,is,empty,consumable,media,types,get,consumable,media,types,request,pattern,matches,producible,media,types,get,prodicuble,media,types,request,pattern,matches,else,consumable,media,types,get,consumable,media,types,request,pattern,and,method,matches,producible,media,types,get,prodicuble,media,types,request,pattern,and,method,matches,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,content,type,media,type,parse,media,type,request,get,content,type,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 			String lookupPath, HttpServletRequest request) throws ServletException;1362408075;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly.__@throws HttpRequestMethodNotSupportedException_if there are matches by URL but not by HTTP method_@throws HttpMediaTypeNotAcceptableException_if there are matches by URL but not by consumable media types_@throws HttpMediaTypeNotAcceptableException_if there are matches by URL but not by producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_			String lookupPath, HttpServletRequest request) throws ServletException {__		Set<String> allowedMethods = new HashSet<String>(6)___		Set<RequestMappingInfo> patternMatches = new HashSet<RequestMappingInfo>()__		Set<RequestMappingInfo> patternAndMethodMatches = new HashSet<RequestMappingInfo>()___		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				patternMatches.add(info)__				if (info.getMethodsCondition().getMatchingCondition(request) != null) {_					patternAndMethodMatches.add(info)__				}_				else {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_			}_		}__		if (patternMatches.isEmpty()) {_			return null__		}_		else if (patternAndMethodMatches.isEmpty() && !allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}__		Set<MediaType> consumableMediaTypes__		Set<MediaType> producibleMediaTypes__		Set<String> paramConditions___		if (patternAndMethodMatches.isEmpty()) {_			consumableMediaTypes = getConsumableMediaTypes(request, patternMatches)__			producibleMediaTypes = getProdicubleMediaTypes(request, patternMatches)__			paramConditions = getRequestParams(request, patternMatches)__		}_		else {_			consumableMediaTypes = getConsumableMediaTypes(request, patternAndMethodMatches)__			producibleMediaTypes = getProdicubleMediaTypes(request, patternAndMethodMatches)__			paramConditions = getRequestParams(request, patternAndMethodMatches)__		}__		if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (IllegalArgumentException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else if (!CollectionUtils.isEmpty(paramConditions)) {_			String[] params = paramConditions.toArray(new String[paramConditions.size()])__			throw new UnsatisfiedServletRequestParameterException(params, request.getParameterMap())__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,media,types,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,hash,set,string,6,set,request,mapping,info,pattern,matches,new,hash,set,request,mapping,info,set,request,mapping,info,pattern,and,method,matches,new,hash,set,request,mapping,info,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,pattern,matches,add,info,if,info,get,methods,condition,get,matching,condition,request,null,pattern,and,method,matches,add,info,else,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,pattern,matches,is,empty,return,null,else,if,pattern,and,method,matches,is,empty,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,set,media,type,consumable,media,types,set,media,type,producible,media,types,set,string,param,conditions,if,pattern,and,method,matches,is,empty,consumable,media,types,get,consumable,media,types,request,pattern,matches,producible,media,types,get,prodicuble,media,types,request,pattern,matches,param,conditions,get,request,params,request,pattern,matches,else,consumable,media,types,get,consumable,media,types,request,pattern,and,method,matches,producible,media,types,get,prodicuble,media,types,request,pattern,and,method,matches,param,conditions,get,request,params,request,pattern,and,method,matches,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,illegal,argument,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,if,collection,utils,is,empty,param,conditions,string,params,param,conditions,to,array,new,string,param,conditions,size,throw,new,unsatisfied,servlet,request,parameter,exception,params,request,get,parameter,map,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 			String lookupPath, HttpServletRequest request) throws ServletException;1366717989;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_			String lookupPath, HttpServletRequest request) throws ServletException {__		Set<String> allowedMethods = new LinkedHashSet<String>(4)___		Set<RequestMappingInfo> patternMatches = new HashSet<RequestMappingInfo>()__		Set<RequestMappingInfo> patternAndMethodMatches = new HashSet<RequestMappingInfo>()___		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				patternMatches.add(info)__				if (info.getMethodsCondition().getMatchingCondition(request) != null) {_					patternAndMethodMatches.add(info)__				}_				else {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_			}_		}__		if (patternMatches.isEmpty()) {_			return null__		}_		else if (patternAndMethodMatches.isEmpty() && !allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}__		Set<MediaType> consumableMediaTypes__		Set<MediaType> producibleMediaTypes__		Set<String> paramConditions___		if (patternAndMethodMatches.isEmpty()) {_			consumableMediaTypes = getConsumableMediaTypes(request, patternMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternMatches)__			paramConditions = getRequestParams(request, patternMatches)__		}_		else {_			consumableMediaTypes = getConsumableMediaTypes(request, patternAndMethodMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternAndMethodMatches)__			paramConditions = getRequestParams(request, patternAndMethodMatches)__		}__		if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (IllegalArgumentException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else if (!CollectionUtils.isEmpty(paramConditions)) {_			String[] params = paramConditions.toArray(new String[paramConditions.size()])__			throw new UnsatisfiedServletRequestParameterException(params, request.getParameterMap())__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,linked,hash,set,string,4,set,request,mapping,info,pattern,matches,new,hash,set,request,mapping,info,set,request,mapping,info,pattern,and,method,matches,new,hash,set,request,mapping,info,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,pattern,matches,add,info,if,info,get,methods,condition,get,matching,condition,request,null,pattern,and,method,matches,add,info,else,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,pattern,matches,is,empty,return,null,else,if,pattern,and,method,matches,is,empty,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,set,media,type,consumable,media,types,set,media,type,producible,media,types,set,string,param,conditions,if,pattern,and,method,matches,is,empty,consumable,media,types,get,consumable,media,types,request,pattern,matches,producible,media,types,get,producible,media,types,request,pattern,matches,param,conditions,get,request,params,request,pattern,matches,else,consumable,media,types,get,consumable,media,types,request,pattern,and,method,matches,producible,media,types,get,producible,media,types,request,pattern,and,method,matches,param,conditions,get,request,params,request,pattern,and,method,matches,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,illegal,argument,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,if,collection,utils,is,empty,param,conditions,string,params,param,conditions,to,array,new,string,param,conditions,size,throw,new,unsatisfied,servlet,request,parameter,exception,params,request,get,parameter,map,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 			String lookupPath, HttpServletRequest request) throws ServletException;1368482696;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_			String lookupPath, HttpServletRequest request) throws ServletException {__		Set<String> allowedMethods = new LinkedHashSet<String>(4)___		Set<RequestMappingInfo> patternMatches = new HashSet<RequestMappingInfo>()__		Set<RequestMappingInfo> patternAndMethodMatches = new HashSet<RequestMappingInfo>()___		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				patternMatches.add(info)__				if (info.getMethodsCondition().getMatchingCondition(request) != null) {_					patternAndMethodMatches.add(info)__				}_				else {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_			}_		}__		if (patternMatches.isEmpty()) {_			return null__		}_		else if (patternAndMethodMatches.isEmpty() && !allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}__		Set<MediaType> consumableMediaTypes__		Set<MediaType> producibleMediaTypes__		Set<String> paramConditions___		if (patternAndMethodMatches.isEmpty()) {_			consumableMediaTypes = getConsumableMediaTypes(request, patternMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternMatches)__			paramConditions = getRequestParams(request, patternMatches)__		}_		else {_			consumableMediaTypes = getConsumableMediaTypes(request, patternAndMethodMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternAndMethodMatches)__			paramConditions = getRequestParams(request, patternAndMethodMatches)__		}__		if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (IllegalArgumentException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else if (!CollectionUtils.isEmpty(paramConditions)) {_			String[] params = paramConditions.toArray(new String[paramConditions.size()])__			throw new UnsatisfiedServletRequestParameterException(params, request.getParameterMap())__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,linked,hash,set,string,4,set,request,mapping,info,pattern,matches,new,hash,set,request,mapping,info,set,request,mapping,info,pattern,and,method,matches,new,hash,set,request,mapping,info,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,pattern,matches,add,info,if,info,get,methods,condition,get,matching,condition,request,null,pattern,and,method,matches,add,info,else,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,pattern,matches,is,empty,return,null,else,if,pattern,and,method,matches,is,empty,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,set,media,type,consumable,media,types,set,media,type,producible,media,types,set,string,param,conditions,if,pattern,and,method,matches,is,empty,consumable,media,types,get,consumable,media,types,request,pattern,matches,producible,media,types,get,producible,media,types,request,pattern,matches,param,conditions,get,request,params,request,pattern,matches,else,consumable,media,types,get,consumable,media,types,request,pattern,and,method,matches,producible,media,types,get,producible,media,types,request,pattern,and,method,matches,param,conditions,get,request,params,request,pattern,and,method,matches,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,illegal,argument,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,if,collection,utils,is,empty,param,conditions,string,params,param,conditions,to,array,new,string,param,conditions,size,throw,new,unsatisfied,servlet,request,parameter,exception,params,request,get,parameter,map,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 			String lookupPath, HttpServletRequest request) throws ServletException;1375896097;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_			String lookupPath, HttpServletRequest request) throws ServletException {__		Set<String> allowedMethods = new LinkedHashSet<String>(4)___		Set<RequestMappingInfo> patternMatches = new HashSet<RequestMappingInfo>()__		Set<RequestMappingInfo> patternAndMethodMatches = new HashSet<RequestMappingInfo>()___		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				patternMatches.add(info)__				if (info.getMethodsCondition().getMatchingCondition(request) != null) {_					patternAndMethodMatches.add(info)__				}_				else {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_			}_		}__		if (patternMatches.isEmpty()) {_			return null__		}_		else if (patternAndMethodMatches.isEmpty() && !allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}__		Set<MediaType> consumableMediaTypes__		Set<MediaType> producibleMediaTypes__		Set<String> paramConditions___		if (patternAndMethodMatches.isEmpty()) {_			consumableMediaTypes = getConsumableMediaTypes(request, patternMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternMatches)__			paramConditions = getRequestParams(request, patternMatches)__		}_		else {_			consumableMediaTypes = getConsumableMediaTypes(request, patternAndMethodMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternAndMethodMatches)__			paramConditions = getRequestParams(request, patternAndMethodMatches)__		}__		if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else if (!CollectionUtils.isEmpty(paramConditions)) {_			String[] params = paramConditions.toArray(new String[paramConditions.size()])__			throw new UnsatisfiedServletRequestParameterException(params, request.getParameterMap())__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,linked,hash,set,string,4,set,request,mapping,info,pattern,matches,new,hash,set,request,mapping,info,set,request,mapping,info,pattern,and,method,matches,new,hash,set,request,mapping,info,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,pattern,matches,add,info,if,info,get,methods,condition,get,matching,condition,request,null,pattern,and,method,matches,add,info,else,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,pattern,matches,is,empty,return,null,else,if,pattern,and,method,matches,is,empty,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,set,media,type,consumable,media,types,set,media,type,producible,media,types,set,string,param,conditions,if,pattern,and,method,matches,is,empty,consumable,media,types,get,consumable,media,types,request,pattern,matches,producible,media,types,get,producible,media,types,request,pattern,matches,param,conditions,get,request,params,request,pattern,matches,else,consumable,media,types,get,consumable,media,types,request,pattern,and,method,matches,producible,media,types,get,producible,media,types,request,pattern,and,method,matches,param,conditions,get,request,params,request,pattern,and,method,matches,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,if,collection,utils,is,empty,param,conditions,string,params,param,conditions,to,array,new,string,param,conditions,size,throw,new,unsatisfied,servlet,request,parameter,exception,params,request,get,parameter,map,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 			String lookupPath, HttpServletRequest request) throws ServletException;1383151171;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_			String lookupPath, HttpServletRequest request) throws ServletException {__		Set<String> allowedMethods = new LinkedHashSet<String>(4)___		Set<RequestMappingInfo> patternMatches = new HashSet<RequestMappingInfo>()__		Set<RequestMappingInfo> patternAndMethodMatches = new HashSet<RequestMappingInfo>()___		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				patternMatches.add(info)__				if (info.getMethodsCondition().getMatchingCondition(request) != null) {_					patternAndMethodMatches.add(info)__				}_				else {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_			}_		}__		if (patternMatches.isEmpty()) {_			return null__		}_		else if (patternAndMethodMatches.isEmpty() && !allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}__		Set<MediaType> consumableMediaTypes__		Set<MediaType> producibleMediaTypes__		Set<String> paramConditions___		if (patternAndMethodMatches.isEmpty()) {_			consumableMediaTypes = getConsumableMediaTypes(request, patternMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternMatches)__			paramConditions = getRequestParams(request, patternMatches)__		}_		else {_			consumableMediaTypes = getConsumableMediaTypes(request, patternAndMethodMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternAndMethodMatches)__			paramConditions = getRequestParams(request, patternAndMethodMatches)__		}__		if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else if (!CollectionUtils.isEmpty(paramConditions)) {_			String[] params = paramConditions.toArray(new String[paramConditions.size()])__			throw new UnsatisfiedServletRequestParameterException(params, request.getParameterMap())__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,linked,hash,set,string,4,set,request,mapping,info,pattern,matches,new,hash,set,request,mapping,info,set,request,mapping,info,pattern,and,method,matches,new,hash,set,request,mapping,info,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,pattern,matches,add,info,if,info,get,methods,condition,get,matching,condition,request,null,pattern,and,method,matches,add,info,else,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,pattern,matches,is,empty,return,null,else,if,pattern,and,method,matches,is,empty,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,set,media,type,consumable,media,types,set,media,type,producible,media,types,set,string,param,conditions,if,pattern,and,method,matches,is,empty,consumable,media,types,get,consumable,media,types,request,pattern,matches,producible,media,types,get,producible,media,types,request,pattern,matches,param,conditions,get,request,params,request,pattern,matches,else,consumable,media,types,get,consumable,media,types,request,pattern,and,method,matches,producible,media,types,get,producible,media,types,request,pattern,and,method,matches,param,conditions,get,request,params,request,pattern,and,method,matches,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,if,collection,utils,is,empty,param,conditions,string,params,param,conditions,to,array,new,string,param,conditions,size,throw,new,unsatisfied,servlet,request,parameter,exception,params,request,get,parameter,map,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 			String lookupPath, HttpServletRequest request) throws ServletException;1385412762;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_			String lookupPath, HttpServletRequest request) throws ServletException {__		Set<String> allowedMethods = new LinkedHashSet<String>(4)___		Set<RequestMappingInfo> patternMatches = new HashSet<RequestMappingInfo>()__		Set<RequestMappingInfo> patternAndMethodMatches = new HashSet<RequestMappingInfo>()___		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				patternMatches.add(info)__				if (info.getMethodsCondition().getMatchingCondition(request) != null) {_					patternAndMethodMatches.add(info)__				}_				else {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_			}_		}__		if (patternMatches.isEmpty()) {_			return null__		}_		else if (patternAndMethodMatches.isEmpty() && !allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}__		Set<MediaType> consumableMediaTypes__		Set<MediaType> producibleMediaTypes__		Set<String> paramConditions___		if (patternAndMethodMatches.isEmpty()) {_			consumableMediaTypes = getConsumableMediaTypes(request, patternMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternMatches)__			paramConditions = getRequestParams(request, patternMatches)__		}_		else {_			consumableMediaTypes = getConsumableMediaTypes(request, patternAndMethodMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternAndMethodMatches)__			paramConditions = getRequestParams(request, patternAndMethodMatches)__		}__		if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else if (!CollectionUtils.isEmpty(paramConditions)) {_			String[] params = paramConditions.toArray(new String[paramConditions.size()])__			throw new UnsatisfiedServletRequestParameterException(params, request.getParameterMap())__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,linked,hash,set,string,4,set,request,mapping,info,pattern,matches,new,hash,set,request,mapping,info,set,request,mapping,info,pattern,and,method,matches,new,hash,set,request,mapping,info,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,pattern,matches,add,info,if,info,get,methods,condition,get,matching,condition,request,null,pattern,and,method,matches,add,info,else,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,pattern,matches,is,empty,return,null,else,if,pattern,and,method,matches,is,empty,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,set,media,type,consumable,media,types,set,media,type,producible,media,types,set,string,param,conditions,if,pattern,and,method,matches,is,empty,consumable,media,types,get,consumable,media,types,request,pattern,matches,producible,media,types,get,producible,media,types,request,pattern,matches,param,conditions,get,request,params,request,pattern,matches,else,consumable,media,types,get,consumable,media,types,request,pattern,and,method,matches,producible,media,types,get,producible,media,types,request,pattern,and,method,matches,param,conditions,get,request,params,request,pattern,and,method,matches,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,if,collection,utils,is,empty,param,conditions,string,params,param,conditions,to,array,new,string,param,conditions,size,throw,new,unsatisfied,servlet,request,parameter,exception,params,request,get,parameter,map,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 			String lookupPath, HttpServletRequest request) throws ServletException;1392410324;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_			String lookupPath, HttpServletRequest request) throws ServletException {__		Set<String> allowedMethods = new LinkedHashSet<String>(4)___		Set<RequestMappingInfo> patternMatches = new HashSet<RequestMappingInfo>()__		Set<RequestMappingInfo> patternAndMethodMatches = new HashSet<RequestMappingInfo>()___		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				patternMatches.add(info)__				if (info.getMethodsCondition().getMatchingCondition(request) != null) {_					patternAndMethodMatches.add(info)__				}_				else {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_			}_		}__		if (patternMatches.isEmpty()) {_			return null__		}_		else if (patternAndMethodMatches.isEmpty() && !allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}__		Set<MediaType> consumableMediaTypes__		Set<MediaType> producibleMediaTypes__		Set<String> paramConditions___		if (patternAndMethodMatches.isEmpty()) {_			consumableMediaTypes = getConsumableMediaTypes(request, patternMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternMatches)__			paramConditions = getRequestParams(request, patternMatches)__		}_		else {_			consumableMediaTypes = getConsumableMediaTypes(request, patternAndMethodMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternAndMethodMatches)__			paramConditions = getRequestParams(request, patternAndMethodMatches)__		}__		if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else if (!CollectionUtils.isEmpty(paramConditions)) {_			String[] params = paramConditions.toArray(new String[paramConditions.size()])__			throw new UnsatisfiedServletRequestParameterException(params, request.getParameterMap())__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,linked,hash,set,string,4,set,request,mapping,info,pattern,matches,new,hash,set,request,mapping,info,set,request,mapping,info,pattern,and,method,matches,new,hash,set,request,mapping,info,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,pattern,matches,add,info,if,info,get,methods,condition,get,matching,condition,request,null,pattern,and,method,matches,add,info,else,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,pattern,matches,is,empty,return,null,else,if,pattern,and,method,matches,is,empty,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,set,media,type,consumable,media,types,set,media,type,producible,media,types,set,string,param,conditions,if,pattern,and,method,matches,is,empty,consumable,media,types,get,consumable,media,types,request,pattern,matches,producible,media,types,get,producible,media,types,request,pattern,matches,param,conditions,get,request,params,request,pattern,matches,else,consumable,media,types,get,consumable,media,types,request,pattern,and,method,matches,producible,media,types,get,producible,media,types,request,pattern,and,method,matches,param,conditions,get,request,params,request,pattern,and,method,matches,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,if,collection,utils,is,empty,param,conditions,string,params,param,conditions,to,array,new,string,param,conditions,size,throw,new,unsatisfied,servlet,request,parameter,exception,params,request,get,parameter,map,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 			String lookupPath, HttpServletRequest request) throws ServletException;1399404473;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_			String lookupPath, HttpServletRequest request) throws ServletException {__		Set<String> allowedMethods = new LinkedHashSet<String>(4)___		Set<RequestMappingInfo> patternMatches = new HashSet<RequestMappingInfo>()__		Set<RequestMappingInfo> patternAndMethodMatches = new HashSet<RequestMappingInfo>()___		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				patternMatches.add(info)__				if (info.getMethodsCondition().getMatchingCondition(request) != null) {_					patternAndMethodMatches.add(info)__				}_				else {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_			}_		}__		if (patternMatches.isEmpty()) {_			return null__		}_		else if (patternAndMethodMatches.isEmpty() && !allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}__		Set<MediaType> consumableMediaTypes__		Set<MediaType> producibleMediaTypes__		Set<String> paramConditions___		if (patternAndMethodMatches.isEmpty()) {_			consumableMediaTypes = getConsumableMediaTypes(request, patternMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternMatches)__			paramConditions = getRequestParams(request, patternMatches)__		}_		else {_			consumableMediaTypes = getConsumableMediaTypes(request, patternAndMethodMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternAndMethodMatches)__			paramConditions = getRequestParams(request, patternAndMethodMatches)__		}__		if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else if (!CollectionUtils.isEmpty(paramConditions)) {_			String[] params = paramConditions.toArray(new String[paramConditions.size()])__			throw new UnsatisfiedServletRequestParameterException(params, request.getParameterMap())__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,linked,hash,set,string,4,set,request,mapping,info,pattern,matches,new,hash,set,request,mapping,info,set,request,mapping,info,pattern,and,method,matches,new,hash,set,request,mapping,info,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,pattern,matches,add,info,if,info,get,methods,condition,get,matching,condition,request,null,pattern,and,method,matches,add,info,else,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,pattern,matches,is,empty,return,null,else,if,pattern,and,method,matches,is,empty,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,set,media,type,consumable,media,types,set,media,type,producible,media,types,set,string,param,conditions,if,pattern,and,method,matches,is,empty,consumable,media,types,get,consumable,media,types,request,pattern,matches,producible,media,types,get,producible,media,types,request,pattern,matches,param,conditions,get,request,params,request,pattern,matches,else,consumable,media,types,get,consumable,media,types,request,pattern,and,method,matches,producible,media,types,get,producible,media,types,request,pattern,and,method,matches,param,conditions,get,request,params,request,pattern,and,method,matches,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,if,collection,utils,is,empty,param,conditions,string,params,param,conditions,to,array,new,string,param,conditions,size,throw,new,unsatisfied,servlet,request,parameter,exception,params,request,get,parameter,map,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 			String lookupPath, HttpServletRequest request) throws ServletException;1415280583;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_			String lookupPath, HttpServletRequest request) throws ServletException {__		Set<String> allowedMethods = new LinkedHashSet<String>(4)___		Set<RequestMappingInfo> patternMatches = new HashSet<RequestMappingInfo>()__		Set<RequestMappingInfo> patternAndMethodMatches = new HashSet<RequestMappingInfo>()___		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				patternMatches.add(info)__				if (info.getMethodsCondition().getMatchingCondition(request) != null) {_					patternAndMethodMatches.add(info)__				}_				else {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_			}_		}__		if (patternMatches.isEmpty()) {_			return null__		}_		else if (patternAndMethodMatches.isEmpty() && !allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}__		Set<MediaType> consumableMediaTypes__		Set<MediaType> producibleMediaTypes__		Set<String> paramConditions___		if (patternAndMethodMatches.isEmpty()) {_			consumableMediaTypes = getConsumableMediaTypes(request, patternMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternMatches)__			paramConditions = getRequestParams(request, patternMatches)__		}_		else {_			consumableMediaTypes = getConsumableMediaTypes(request, patternAndMethodMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternAndMethodMatches)__			paramConditions = getRequestParams(request, patternAndMethodMatches)__		}__		if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else if (!CollectionUtils.isEmpty(paramConditions)) {_			String[] params = paramConditions.toArray(new String[paramConditions.size()])__			throw new UnsatisfiedServletRequestParameterException(params, request.getParameterMap())__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,linked,hash,set,string,4,set,request,mapping,info,pattern,matches,new,hash,set,request,mapping,info,set,request,mapping,info,pattern,and,method,matches,new,hash,set,request,mapping,info,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,pattern,matches,add,info,if,info,get,methods,condition,get,matching,condition,request,null,pattern,and,method,matches,add,info,else,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,pattern,matches,is,empty,return,null,else,if,pattern,and,method,matches,is,empty,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,set,media,type,consumable,media,types,set,media,type,producible,media,types,set,string,param,conditions,if,pattern,and,method,matches,is,empty,consumable,media,types,get,consumable,media,types,request,pattern,matches,producible,media,types,get,producible,media,types,request,pattern,matches,param,conditions,get,request,params,request,pattern,matches,else,consumable,media,types,get,consumable,media,types,request,pattern,and,method,matches,producible,media,types,get,producible,media,types,request,pattern,and,method,matches,param,conditions,get,request,params,request,pattern,and,method,matches,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,if,collection,utils,is,empty,param,conditions,string,params,param,conditions,to,array,new,string,param,conditions,size,throw,new,unsatisfied,servlet,request,parameter,exception,params,request,get,parameter,map,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 			String lookupPath, HttpServletRequest request) throws ServletException;1428377636;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_			String lookupPath, HttpServletRequest request) throws ServletException {__		Set<String> allowedMethods = new LinkedHashSet<String>(4)___		Set<RequestMappingInfo> patternMatches = new HashSet<RequestMappingInfo>()__		Set<RequestMappingInfo> patternAndMethodMatches = new HashSet<RequestMappingInfo>()___		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				patternMatches.add(info)__				if (info.getMethodsCondition().getMatchingCondition(request) != null) {_					patternAndMethodMatches.add(info)__				}_				else {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_			}_		}__		if (patternMatches.isEmpty()) {_			return null__		}_		else if (patternAndMethodMatches.isEmpty() && !allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}__		Set<MediaType> consumableMediaTypes__		Set<MediaType> producibleMediaTypes__		List<String[]> paramConditions___		if (patternAndMethodMatches.isEmpty()) {_			consumableMediaTypes = getConsumableMediaTypes(request, patternMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternMatches)__			paramConditions = getRequestParams(request, patternMatches)__		}_		else {_			consumableMediaTypes = getConsumableMediaTypes(request, patternAndMethodMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternAndMethodMatches)__			paramConditions = getRequestParams(request, patternAndMethodMatches)__		}__		if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else if (!CollectionUtils.isEmpty(paramConditions)) {_			throw new UnsatisfiedServletRequestParameterException(paramConditions, request.getParameterMap())__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,linked,hash,set,string,4,set,request,mapping,info,pattern,matches,new,hash,set,request,mapping,info,set,request,mapping,info,pattern,and,method,matches,new,hash,set,request,mapping,info,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,pattern,matches,add,info,if,info,get,methods,condition,get,matching,condition,request,null,pattern,and,method,matches,add,info,else,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,pattern,matches,is,empty,return,null,else,if,pattern,and,method,matches,is,empty,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,set,media,type,consumable,media,types,set,media,type,producible,media,types,list,string,param,conditions,if,pattern,and,method,matches,is,empty,consumable,media,types,get,consumable,media,types,request,pattern,matches,producible,media,types,get,producible,media,types,request,pattern,matches,param,conditions,get,request,params,request,pattern,matches,else,consumable,media,types,get,consumable,media,types,request,pattern,and,method,matches,producible,media,types,get,producible,media,types,request,pattern,and,method,matches,param,conditions,get,request,params,request,pattern,and,method,matches,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,if,collection,utils,is,empty,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,param,conditions,request,get,parameter,map,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 			String lookupPath, HttpServletRequest request) throws ServletException;1453684721;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_			String lookupPath, HttpServletRequest request) throws ServletException {__		Set<String> allowedMethods = new LinkedHashSet<String>(4)___		Set<RequestMappingInfo> patternMatches = new HashSet<RequestMappingInfo>()__		Set<RequestMappingInfo> patternAndMethodMatches = new HashSet<RequestMappingInfo>()___		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				patternMatches.add(info)__				if (info.getMethodsCondition().getMatchingCondition(request) != null) {_					patternAndMethodMatches.add(info)__				}_				else {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_			}_		}__		if (patternMatches.isEmpty()) {_			return null__		}_		else if (patternAndMethodMatches.isEmpty()) {_			if (HttpMethod.OPTIONS.matches(request.getMethod())) {_				HttpOptionsHandler handler = new HttpOptionsHandler(allowedMethods)__				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD)__			}_			else if (!allowedMethods.isEmpty()) {_				throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__			}_		}__		Set<MediaType> consumableMediaTypes__		Set<MediaType> producibleMediaTypes__		List<String[]> paramConditions___		if (patternAndMethodMatches.isEmpty()) {_			consumableMediaTypes = getConsumableMediaTypes(request, patternMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternMatches)__			paramConditions = getRequestParams(request, patternMatches)__		}_		else {_			consumableMediaTypes = getConsumableMediaTypes(request, patternAndMethodMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternAndMethodMatches)__			paramConditions = getRequestParams(request, patternAndMethodMatches)__		}__		if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else if (!CollectionUtils.isEmpty(paramConditions)) {_			throw new UnsatisfiedServletRequestParameterException(paramConditions, request.getParameterMap())__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,linked,hash,set,string,4,set,request,mapping,info,pattern,matches,new,hash,set,request,mapping,info,set,request,mapping,info,pattern,and,method,matches,new,hash,set,request,mapping,info,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,pattern,matches,add,info,if,info,get,methods,condition,get,matching,condition,request,null,pattern,and,method,matches,add,info,else,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,pattern,matches,is,empty,return,null,else,if,pattern,and,method,matches,is,empty,if,http,method,options,matches,request,get,method,http,options,handler,handler,new,http,options,handler,allowed,methods,return,new,handler,method,handler,else,if,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,set,media,type,consumable,media,types,set,media,type,producible,media,types,list,string,param,conditions,if,pattern,and,method,matches,is,empty,consumable,media,types,get,consumable,media,types,request,pattern,matches,producible,media,types,get,producible,media,types,request,pattern,matches,param,conditions,get,request,params,request,pattern,matches,else,consumable,media,types,get,consumable,media,types,request,pattern,and,method,matches,producible,media,types,get,producible,media,types,request,pattern,and,method,matches,param,conditions,get,request,params,request,pattern,and,method,matches,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,if,collection,utils,is,empty,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,param,conditions,request,get,parameter,map,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 			String lookupPath, HttpServletRequest request) throws ServletException;1453757723;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly._@throws HttpRequestMethodNotSupportedException if there are matches by URL_but not by HTTP method_@throws HttpMediaTypeNotAcceptableException if there are matches by URL_but not by consumable/producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_			String lookupPath, HttpServletRequest request) throws ServletException {__		Set<String> allowedMethods = new LinkedHashSet<String>(4)___		Set<RequestMappingInfo> patternMatches = new HashSet<RequestMappingInfo>()__		Set<RequestMappingInfo> patternAndMethodMatches = new HashSet<RequestMappingInfo>()___		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				patternMatches.add(info)__				if (info.getMethodsCondition().getMatchingCondition(request) != null) {_					patternAndMethodMatches.add(info)__				}_				else {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_			}_		}__		if (patternMatches.isEmpty()) {_			return null__		}_		else if (patternAndMethodMatches.isEmpty()) {_			if (HttpMethod.OPTIONS.matches(request.getMethod())) {_				HttpOptionsHandler handler = new HttpOptionsHandler(allowedMethods)__				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD)__			}_			else if (!allowedMethods.isEmpty()) {_				throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__			}_		}__		Set<MediaType> consumableMediaTypes__		Set<MediaType> producibleMediaTypes__		List<String[]> paramConditions___		if (patternAndMethodMatches.isEmpty()) {_			consumableMediaTypes = getConsumableMediaTypes(request, patternMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternMatches)__			paramConditions = getRequestParams(request, patternMatches)__		}_		else {_			consumableMediaTypes = getConsumableMediaTypes(request, patternAndMethodMatches)__			producibleMediaTypes = getProducibleMediaTypes(request, patternAndMethodMatches)__			paramConditions = getRequestParams(request, patternAndMethodMatches)__		}__		if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				try {_					contentType = MediaType.parseMediaType(request.getContentType())__				}_				catch (InvalidMediaTypeException ex) {_					throw new HttpMediaTypeNotSupportedException(ex.getMessage())__				}_			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else if (!CollectionUtils.isEmpty(paramConditions)) {_			throw new UnsatisfiedServletRequestParameterException(paramConditions, request.getParameterMap())__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,linked,hash,set,string,4,set,request,mapping,info,pattern,matches,new,hash,set,request,mapping,info,set,request,mapping,info,pattern,and,method,matches,new,hash,set,request,mapping,info,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,pattern,matches,add,info,if,info,get,methods,condition,get,matching,condition,request,null,pattern,and,method,matches,add,info,else,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,pattern,matches,is,empty,return,null,else,if,pattern,and,method,matches,is,empty,if,http,method,options,matches,request,get,method,http,options,handler,handler,new,http,options,handler,allowed,methods,return,new,handler,method,handler,else,if,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,set,media,type,consumable,media,types,set,media,type,producible,media,types,list,string,param,conditions,if,pattern,and,method,matches,is,empty,consumable,media,types,get,consumable,media,types,request,pattern,matches,producible,media,types,get,producible,media,types,request,pattern,matches,param,conditions,get,request,params,request,pattern,matches,else,consumable,media,types,get,consumable,media,types,request,pattern,and,method,matches,producible,media,types,get,producible,media,types,request,pattern,and,method,matches,param,conditions,get,request,params,request,pattern,and,method,matches,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,try,content,type,media,type,parse,media,type,request,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,if,collection,utils,is,empty,param,conditions,throw,new,unsatisfied,servlet,request,parameter,exception,param,conditions,request,get,parameter,map,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 										  String lookupPath, 										  HttpServletRequest request) throws ServletException;1335774711;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly.__@throws HttpRequestMethodNotSupportedException_if there are matches by URL but not by HTTP method_@throws HttpMediaTypeNotAcceptableException_if there are matches by URL but not by consumable media types_@throws HttpMediaTypeNotAcceptableException_if there are matches by URL but not by producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_										  String lookupPath,_										  HttpServletRequest request) throws ServletException {_		Set<String> allowedMethods = new HashSet<String>(6)__		Set<MediaType> consumableMediaTypes = new HashSet<MediaType>()__		Set<MediaType> producibleMediaTypes = new HashSet<MediaType>()__		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				if (info.getMethodsCondition().getMatchingCondition(request) == null) {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_				if (info.getConsumesCondition().getMatchingCondition(request) == null) {_					consumableMediaTypes.addAll(info.getConsumesCondition().getConsumableMediaTypes())__				}_				if (info.getProducesCondition().getMatchingCondition(request) == null) {_					producibleMediaTypes.addAll(info.getProducesCondition().getProducibleMediaTypes())__				}_			}_		}_		if (!allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}_		else if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				contentType = MediaType.parseMediaType(request.getContentType())__			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,media,types,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,hash,set,string,6,set,media,type,consumable,media,types,new,hash,set,media,type,set,media,type,producible,media,types,new,hash,set,media,type,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,if,info,get,methods,condition,get,matching,condition,request,null,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,info,get,consumes,condition,get,matching,condition,request,null,consumable,media,types,add,all,info,get,consumes,condition,get,consumable,media,types,if,info,get,produces,condition,get,matching,condition,request,null,producible,media,types,add,all,info,get,produces,condition,get,producible,media,types,if,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,else,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,content,type,media,type,parse,media,type,request,get,content,type,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 										  String lookupPath, 										  HttpServletRequest request) throws ServletException;1337284880;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly.__@throws HttpRequestMethodNotSupportedException_if there are matches by URL but not by HTTP method_@throws HttpMediaTypeNotAcceptableException_if there are matches by URL but not by consumable media types_@throws HttpMediaTypeNotAcceptableException_if there are matches by URL but not by producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_										  String lookupPath,_										  HttpServletRequest request) throws ServletException {_		Set<String> allowedMethods = new HashSet<String>(6)__		Set<MediaType> consumableMediaTypes = new HashSet<MediaType>()__		Set<MediaType> producibleMediaTypes = new HashSet<MediaType>()__		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				if (info.getMethodsCondition().getMatchingCondition(request) == null) {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_				if (info.getConsumesCondition().getMatchingCondition(request) == null) {_					consumableMediaTypes.addAll(info.getConsumesCondition().getConsumableMediaTypes())__				}_				if (info.getProducesCondition().getMatchingCondition(request) == null) {_					producibleMediaTypes.addAll(info.getProducesCondition().getProducibleMediaTypes())__				}_			}_		}_		if (!allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}_		else if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				contentType = MediaType.parseMediaType(request.getContentType())__			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,media,types,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,hash,set,string,6,set,media,type,consumable,media,types,new,hash,set,media,type,set,media,type,producible,media,types,new,hash,set,media,type,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,if,info,get,methods,condition,get,matching,condition,request,null,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,info,get,consumes,condition,get,matching,condition,request,null,consumable,media,types,add,all,info,get,consumes,condition,get,consumable,media,types,if,info,get,produces,condition,get,matching,condition,request,null,producible,media,types,add,all,info,get,produces,condition,get,producible,media,types,if,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,else,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,content,type,media,type,parse,media,type,request,get,content,type,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,return,null
RequestMappingInfoHandlerMapping -> @Override 	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos, 										  String lookupPath, 										  HttpServletRequest request) throws ServletException;1346174472;Iterate all RequestMappingInfos once again, look if any match by URL at_least and raise exceptions accordingly.__@throws HttpRequestMethodNotSupportedException_if there are matches by URL but not by HTTP method_@throws HttpMediaTypeNotAcceptableException_if there are matches by URL but not by consumable media types_@throws HttpMediaTypeNotAcceptableException_if there are matches by URL but not by producible media types;@Override_	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> requestMappingInfos,_										  String lookupPath,_										  HttpServletRequest request) throws ServletException {_		Set<String> allowedMethods = new HashSet<String>(6)__		Set<MediaType> consumableMediaTypes = new HashSet<MediaType>()__		Set<MediaType> producibleMediaTypes = new HashSet<MediaType>()__		for (RequestMappingInfo info : requestMappingInfos) {_			if (info.getPatternsCondition().getMatchingCondition(request) != null) {_				if (info.getMethodsCondition().getMatchingCondition(request) == null) {_					for (RequestMethod method : info.getMethodsCondition().getMethods()) {_						allowedMethods.add(method.name())__					}_				}_				if (info.getConsumesCondition().getMatchingCondition(request) == null) {_					consumableMediaTypes.addAll(info.getConsumesCondition().getConsumableMediaTypes())__				}_				if (info.getProducesCondition().getMatchingCondition(request) == null) {_					producibleMediaTypes.addAll(info.getProducesCondition().getProducibleMediaTypes())__				}_			}_		}_		if (!allowedMethods.isEmpty()) {_			throw new HttpRequestMethodNotSupportedException(request.getMethod(), allowedMethods)__		}_		else if (!consumableMediaTypes.isEmpty()) {_			MediaType contentType = null__			if (StringUtils.hasLength(request.getContentType())) {_				contentType = MediaType.parseMediaType(request.getContentType())__			}_			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(consumableMediaTypes))__		}_		else if (!producibleMediaTypes.isEmpty()) {_			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(producibleMediaTypes))__		}_		else {_			return null__		}_	};iterate,all,request,mapping,infos,once,again,look,if,any,match,by,url,at,least,and,raise,exceptions,accordingly,throws,http,request,method,not,supported,exception,if,there,are,matches,by,url,but,not,by,http,method,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,consumable,media,types,throws,http,media,type,not,acceptable,exception,if,there,are,matches,by,url,but,not,by,producible,media,types;override,protected,handler,method,handle,no,match,set,request,mapping,info,request,mapping,infos,string,lookup,path,http,servlet,request,request,throws,servlet,exception,set,string,allowed,methods,new,hash,set,string,6,set,media,type,consumable,media,types,new,hash,set,media,type,set,media,type,producible,media,types,new,hash,set,media,type,for,request,mapping,info,info,request,mapping,infos,if,info,get,patterns,condition,get,matching,condition,request,null,if,info,get,methods,condition,get,matching,condition,request,null,for,request,method,method,info,get,methods,condition,get,methods,allowed,methods,add,method,name,if,info,get,consumes,condition,get,matching,condition,request,null,consumable,media,types,add,all,info,get,consumes,condition,get,consumable,media,types,if,info,get,produces,condition,get,matching,condition,request,null,producible,media,types,add,all,info,get,produces,condition,get,producible,media,types,if,allowed,methods,is,empty,throw,new,http,request,method,not,supported,exception,request,get,method,allowed,methods,else,if,consumable,media,types,is,empty,media,type,content,type,null,if,string,utils,has,length,request,get,content,type,content,type,media,type,parse,media,type,request,get,content,type,throw,new,http,media,type,not,supported,exception,content,type,new,array,list,media,type,consumable,media,types,else,if,producible,media,types,is,empty,throw,new,http,media,type,not,acceptable,exception,new,array,list,media,type,producible,media,types,else,return,null
