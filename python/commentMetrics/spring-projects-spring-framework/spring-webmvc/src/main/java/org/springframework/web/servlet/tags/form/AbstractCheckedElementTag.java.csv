commented;modifiers;parameterAmount;loc;comment;code
true;protected;2;3;/**  * Render the '{@code input(checkbox)}' with the supplied value, marking the  * '{@code input}' element as 'checked' if the supplied value matches the  * bound value.  */ ;/**  * Render the '{@code input(checkbox)}' with the supplied value, marking the  * '{@code input}' element as 'checked' if the supplied value matches the  * bound value.  */ protected void renderFromValue(@Nullable Object value, TagWriter tagWriter) throws JspException {     renderFromValue(value, value, tagWriter). }
true;protected;3;9;/**  * Render the '{@code input(checkbox)}' with the supplied value, marking the  * '{@code input}' element as 'checked' if the supplied value matches the  * bound value.  */ ;/**  * Render the '{@code input(checkbox)}' with the supplied value, marking the  * '{@code input}' element as 'checked' if the supplied value matches the  * bound value.  */ protected void renderFromValue(@Nullable Object item, @Nullable Object value, TagWriter tagWriter) throws JspException {     String displayValue = convertToDisplayString(value).     tagWriter.writeAttribute("value", processFieldValue(getName(), displayValue, getInputType())).     if (isOptionSelected(value) || (value != item && isOptionSelected(item))) {         tagWriter.writeAttribute("checked", "checked").     } }
true;private;1;3;/**  * Determines whether the supplied value matched the selected value  * through delegating to {@link SelectedValueComparator#isSelected}.  */ ;/**  * Determines whether the supplied value matched the selected value  * through delegating to {@link SelectedValueComparator#isSelected}.  */ private boolean isOptionSelected(@Nullable Object value) throws JspException {     return SelectedValueComparator.isSelected(getBindStatus(), value). }
true;protected;2;6;/**  * Render the '{@code input(checkbox)}' with the supplied value, marking  * the '{@code input}' element as 'checked' if the supplied Boolean is  * {@code true}.  */ ;/**  * Render the '{@code input(checkbox)}' with the supplied value, marking  * the '{@code input}' element as 'checked' if the supplied Boolean is  * {@code true}.  */ protected void renderFromBoolean(Boolean boundValue, TagWriter tagWriter) throws JspException {     tagWriter.writeAttribute("value", processFieldValue(getName(), "true", getInputType())).     if (boundValue) {         tagWriter.writeAttribute("checked", "checked").     } }
true;protected;0;6;/**  * Return a unique ID for the bound name within the current PageContext.  */ ;/**  * Return a unique ID for the bound name within the current PageContext.  */ @Override @Nullable protected String autogenerateId() throws JspException {     String id = super.autogenerateId().     return (id != null ? TagIdGenerator.nextId(id, this.pageContext) : null). }
true;protected,abstract;1;2;/**  * Writes the '{@code input}' element to the supplied  * {@link TagWriter},  * marking it as 'checked' if appropriate.  */ ;/**  * Writes the '{@code input}' element to the supplied  * {@link TagWriter},  * marking it as 'checked' if appropriate.  */ @Override protected abstract int writeTagContent(TagWriter tagWriter) throws JspException.
true;protected;2;4;/**  * Flags "type" as an illegal dynamic attribute.  */ ;/**  * Flags "type" as an illegal dynamic attribute.  */ @Override protected boolean isValidDynamicAttribute(String localName, Object value) {     return !"type".equals(localName). }
true;protected,abstract;0;1;/**  * Return the type of the HTML input element to generate:  * "checkbox" or "radio".  */ ;/**  * Return the type of the HTML input element to generate:  * "checkbox" or "radio".  */ protected abstract String getInputType().
