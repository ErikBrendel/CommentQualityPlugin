# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractHandlerMethodExceptionResolver -> @Override 	protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1328020251;Checks if the handler is a {@link HandlerMethod} instance and performs the check against the bean_instance it contains. If the provided handler is not an instance of {@link HandlerMethod},_{@code false} is returned instead.;@Override_	protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler == null) {_			return super.shouldApplyTo(request, handler)__		}_		else if (handler instanceof HandlerMethod) {_			HandlerMethod handlerMethod = (HandlerMethod) handler__			handler = handlerMethod.getBean()__			return super.shouldApplyTo(request, handler)__		}_		else {_			return false__		}_	};checks,if,the,handler,is,a,link,handler,method,instance,and,performs,the,check,against,the,bean,instance,it,contains,if,the,provided,handler,is,not,an,instance,of,link,handler,method,code,false,is,returned,instead;override,protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,return,super,should,apply,to,request,handler,else,if,handler,instanceof,handler,method,handler,method,handler,method,handler,method,handler,handler,handler,method,get,bean,return,super,should,apply,to,request,handler,else,return,false
AbstractHandlerMethodExceptionResolver -> @Override 	protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1344976537;Checks if the handler is a {@link HandlerMethod} and then delegates to the_base class implementation of {@link #shouldApplyTo(HttpServletRequest, Object)}_passing the bean of the {@code HandlerMethod}. Otherwise returns {@code false}.;@Override_	protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler == null) {_			return super.shouldApplyTo(request, handler)__		}_		else if (handler instanceof HandlerMethod) {_			HandlerMethod handlerMethod = (HandlerMethod) handler__			handler = handlerMethod.getBean()__			return super.shouldApplyTo(request, handler)__		}_		else {_			return false__		}_	};checks,if,the,handler,is,a,link,handler,method,and,then,delegates,to,the,base,class,implementation,of,link,should,apply,to,http,servlet,request,object,passing,the,bean,of,the,code,handler,method,otherwise,returns,code,false;override,protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,return,super,should,apply,to,request,handler,else,if,handler,instanceof,handler,method,handler,method,handler,method,handler,method,handler,handler,handler,method,get,bean,return,super,should,apply,to,request,handler,else,return,false
AbstractHandlerMethodExceptionResolver -> @Override 	protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1356735495;Checks if the handler is a {@link HandlerMethod} and then delegates to the_base class implementation of {@link #shouldApplyTo(HttpServletRequest, Object)}_passing the bean of the {@code HandlerMethod}. Otherwise returns {@code false}.;@Override_	protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler == null) {_			return super.shouldApplyTo(request, handler)__		}_		else if (handler instanceof HandlerMethod) {_			HandlerMethod handlerMethod = (HandlerMethod) handler__			handler = handlerMethod.getBean()__			return super.shouldApplyTo(request, handler)__		}_		else {_			return false__		}_	};checks,if,the,handler,is,a,link,handler,method,and,then,delegates,to,the,base,class,implementation,of,link,should,apply,to,http,servlet,request,object,passing,the,bean,of,the,code,handler,method,otherwise,returns,code,false;override,protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,return,super,should,apply,to,request,handler,else,if,handler,instanceof,handler,method,handler,method,handler,method,handler,method,handler,handler,handler,method,get,bean,return,super,should,apply,to,request,handler,else,return,false
AbstractHandlerMethodExceptionResolver -> @Override 	protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1465327321;Checks if the handler is a {@link HandlerMethod} and then delegates to the_base class implementation of {@code #shouldApplyTo(HttpServletRequest, Object)}_passing the bean of the {@code HandlerMethod}. Otherwise returns {@code false}.;@Override_	protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler == null) {_			return super.shouldApplyTo(request, handler)__		}_		else if (handler instanceof HandlerMethod) {_			HandlerMethod handlerMethod = (HandlerMethod) handler__			handler = handlerMethod.getBean()__			return super.shouldApplyTo(request, handler)__		}_		else {_			return false__		}_	};checks,if,the,handler,is,a,link,handler,method,and,then,delegates,to,the,base,class,implementation,of,code,should,apply,to,http,servlet,request,object,passing,the,bean,of,the,code,handler,method,otherwise,returns,code,false;override,protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,return,super,should,apply,to,request,handler,else,if,handler,instanceof,handler,method,handler,method,handler,method,handler,method,handler,handler,handler,method,get,bean,return,super,should,apply,to,request,handler,else,return,false
AbstractHandlerMethodExceptionResolver -> @Override 	protected boolean shouldApplyTo(HttpServletRequest request, Object handler);1495868221;Checks if the handler is a {@link HandlerMethod} and then delegates to the_base class implementation of {@code #shouldApplyTo(HttpServletRequest, Object)}_passing the bean of the {@code HandlerMethod}. Otherwise returns {@code false}.;@Override_	protected boolean shouldApplyTo(HttpServletRequest request, Object handler) {_		if (handler == null) {_			return super.shouldApplyTo(request, handler)__		}_		else if (handler instanceof HandlerMethod) {_			HandlerMethod handlerMethod = (HandlerMethod) handler__			handler = handlerMethod.getBean()__			return super.shouldApplyTo(request, handler)__		}_		else {_			return false__		}_	};checks,if,the,handler,is,a,link,handler,method,and,then,delegates,to,the,base,class,implementation,of,code,should,apply,to,http,servlet,request,object,passing,the,bean,of,the,code,handler,method,otherwise,returns,code,false;override,protected,boolean,should,apply,to,http,servlet,request,request,object,handler,if,handler,null,return,super,should,apply,to,request,handler,else,if,handler,instanceof,handler,method,handler,method,handler,method,handler,method,handler,handler,handler,method,get,bean,return,super,should,apply,to,request,handler,else,return,false
AbstractHandlerMethodExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveHandlerMethodException( 			HttpServletRequest request, HttpServletResponse response, @Nullable HandlerMethod handlerMethod, Exception ex)_;1495868221;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handlerMethod the executed handler method, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;@Nullable_	protected abstract ModelAndView doResolveHandlerMethodException(_			HttpServletRequest request, HttpServletResponse response, @Nullable HandlerMethod handlerMethod, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,method,the,executed,handler,method,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;nullable,protected,abstract,model,and,view,do,resolve,handler,method,exception,http,servlet,request,request,http,servlet,response,response,nullable,handler,method,handler,method,exception,ex
AbstractHandlerMethodExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveHandlerMethodException( 			HttpServletRequest request, HttpServletResponse response, @Nullable HandlerMethod handlerMethod, Exception ex)_;1496242568;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handlerMethod the executed handler method, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;@Nullable_	protected abstract ModelAndView doResolveHandlerMethodException(_			HttpServletRequest request, HttpServletResponse response, @Nullable HandlerMethod handlerMethod, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,method,the,executed,handler,method,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;nullable,protected,abstract,model,and,view,do,resolve,handler,method,exception,http,servlet,request,request,http,servlet,response,response,nullable,handler,method,handler,method,exception,ex
AbstractHandlerMethodExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveHandlerMethodException( 			HttpServletRequest request, HttpServletResponse response, @Nullable HandlerMethod handlerMethod, Exception ex)_;1496837955;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handlerMethod the executed handler method, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;@Nullable_	protected abstract ModelAndView doResolveHandlerMethodException(_			HttpServletRequest request, HttpServletResponse response, @Nullable HandlerMethod handlerMethod, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,method,the,executed,handler,method,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;nullable,protected,abstract,model,and,view,do,resolve,handler,method,exception,http,servlet,request,request,http,servlet,response,response,nullable,handler,method,handler,method,exception,ex
AbstractHandlerMethodExceptionResolver -> @Nullable 	protected abstract ModelAndView doResolveHandlerMethodException( 			HttpServletRequest request, HttpServletResponse response, @Nullable HandlerMethod handlerMethod, Exception ex)_;1502974979;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handlerMethod the executed handler method, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;@Nullable_	protected abstract ModelAndView doResolveHandlerMethodException(_			HttpServletRequest request, HttpServletResponse response, @Nullable HandlerMethod handlerMethod, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,method,the,executed,handler,method,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;nullable,protected,abstract,model,and,view,do,resolve,handler,method,exception,http,servlet,request,request,http,servlet,response,response,nullable,handler,method,handler,method,exception,ex
AbstractHandlerMethodExceptionResolver -> protected abstract ModelAndView doResolveHandlerMethodException( 			HttpServletRequest request, HttpServletResponse response, 			HandlerMethod handlerMethod, Exception ex)_;1328020251;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handlerMethod the executed handler method, or <code>null</code> if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or <code>null</code> for default processing;protected abstract ModelAndView doResolveHandlerMethodException(_			HttpServletRequest request, HttpServletResponse response,_			HandlerMethod handlerMethod, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,method,the,executed,handler,method,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,code,for,default,processing;protected,abstract,model,and,view,do,resolve,handler,method,exception,http,servlet,request,request,http,servlet,response,response,handler,method,handler,method,exception,ex
AbstractHandlerMethodExceptionResolver -> protected abstract ModelAndView doResolveHandlerMethodException( 			HttpServletRequest request, HttpServletResponse response, 			HandlerMethod handlerMethod, Exception ex)_;1344976537;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handlerMethod the executed handler method, or <code>null</code> if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or <code>null</code> for default processing;protected abstract ModelAndView doResolveHandlerMethodException(_			HttpServletRequest request, HttpServletResponse response,_			HandlerMethod handlerMethod, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,method,the,executed,handler,method,or,code,null,code,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,code,for,default,processing;protected,abstract,model,and,view,do,resolve,handler,method,exception,http,servlet,request,request,http,servlet,response,response,handler,method,handler,method,exception,ex
AbstractHandlerMethodExceptionResolver -> protected abstract ModelAndView doResolveHandlerMethodException( 			HttpServletRequest request, HttpServletResponse response, 			HandlerMethod handlerMethod, Exception ex)_;1356735495;Actually resolve the given exception that got thrown during on handler execution,_returning a ModelAndView that represents a specific error page if appropriate._<p>May be overridden in subclasses, in order to apply specific exception checks._Note that this template method will be invoked <i>after</i> checking whether this_resolved applies ("mappedHandlers" etc), so an implementation may simply proceed_with its actual exception handling._@param request current HTTP request_@param response current HTTP response_@param handlerMethod the executed handler method, or {@code null} if none chosen at the time_of the exception (for example, if multipart resolution failed)_@param ex the exception that got thrown during handler execution_@return a corresponding ModelAndView to forward to, or {@code null} for default processing;protected abstract ModelAndView doResolveHandlerMethodException(_			HttpServletRequest request, HttpServletResponse response,_			HandlerMethod handlerMethod, Exception ex)_;actually,resolve,the,given,exception,that,got,thrown,during,on,handler,execution,returning,a,model,and,view,that,represents,a,specific,error,page,if,appropriate,p,may,be,overridden,in,subclasses,in,order,to,apply,specific,exception,checks,note,that,this,template,method,will,be,invoked,i,after,i,checking,whether,this,resolved,applies,mapped,handlers,etc,so,an,implementation,may,simply,proceed,with,its,actual,exception,handling,param,request,current,http,request,param,response,current,http,response,param,handler,method,the,executed,handler,method,or,code,null,if,none,chosen,at,the,time,of,the,exception,for,example,if,multipart,resolution,failed,param,ex,the,exception,that,got,thrown,during,handler,execution,return,a,corresponding,model,and,view,to,forward,to,or,code,null,for,default,processing;protected,abstract,model,and,view,do,resolve,handler,method,exception,http,servlet,request,request,http,servlet,response,response,handler,method,handler,method,exception,ex
AbstractHandlerMethodExceptionResolver -> @Override 	protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1496242568;Checks if the handler is a {@link HandlerMethod} and then delegates to the_base class implementation of {@code #shouldApplyTo(HttpServletRequest, Object)}_passing the bean of the {@code HandlerMethod}. Otherwise returns {@code false}.;@Override_	protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler == null) {_			return super.shouldApplyTo(request, handler)__		}_		else if (handler instanceof HandlerMethod) {_			HandlerMethod handlerMethod = (HandlerMethod) handler__			handler = handlerMethod.getBean()__			return super.shouldApplyTo(request, handler)__		}_		else {_			return false__		}_	};checks,if,the,handler,is,a,link,handler,method,and,then,delegates,to,the,base,class,implementation,of,code,should,apply,to,http,servlet,request,object,passing,the,bean,of,the,code,handler,method,otherwise,returns,code,false;override,protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,return,super,should,apply,to,request,handler,else,if,handler,instanceof,handler,method,handler,method,handler,method,handler,method,handler,handler,handler,method,get,bean,return,super,should,apply,to,request,handler,else,return,false
AbstractHandlerMethodExceptionResolver -> @Override 	protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1496837955;Checks if the handler is a {@link HandlerMethod} and then delegates to the_base class implementation of {@code #shouldApplyTo(HttpServletRequest, Object)}_passing the bean of the {@code HandlerMethod}. Otherwise returns {@code false}.;@Override_	protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler == null) {_			return super.shouldApplyTo(request, null)__		}_		else if (handler instanceof HandlerMethod) {_			HandlerMethod handlerMethod = (HandlerMethod) handler__			handler = handlerMethod.getBean()__			return super.shouldApplyTo(request, handler)__		}_		else {_			return false__		}_	};checks,if,the,handler,is,a,link,handler,method,and,then,delegates,to,the,base,class,implementation,of,code,should,apply,to,http,servlet,request,object,passing,the,bean,of,the,code,handler,method,otherwise,returns,code,false;override,protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,return,super,should,apply,to,request,null,else,if,handler,instanceof,handler,method,handler,method,handler,method,handler,method,handler,handler,handler,method,get,bean,return,super,should,apply,to,request,handler,else,return,false
AbstractHandlerMethodExceptionResolver -> @Override 	protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler);1502974979;Checks if the handler is a {@link HandlerMethod} and then delegates to the_base class implementation of {@code #shouldApplyTo(HttpServletRequest, Object)}_passing the bean of the {@code HandlerMethod}. Otherwise returns {@code false}.;@Override_	protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {_		if (handler == null) {_			return super.shouldApplyTo(request, null)__		}_		else if (handler instanceof HandlerMethod) {_			HandlerMethod handlerMethod = (HandlerMethod) handler__			handler = handlerMethod.getBean()__			return super.shouldApplyTo(request, handler)__		}_		else {_			return false__		}_	};checks,if,the,handler,is,a,link,handler,method,and,then,delegates,to,the,base,class,implementation,of,code,should,apply,to,http,servlet,request,object,passing,the,bean,of,the,code,handler,method,otherwise,returns,code,false;override,protected,boolean,should,apply,to,http,servlet,request,request,nullable,object,handler,if,handler,null,return,super,should,apply,to,request,null,else,if,handler,instanceof,handler,method,handler,method,handler,method,handler,method,handler,handler,handler,method,get,bean,return,super,should,apply,to,request,handler,else,return,false
