commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set a view name for this ModelAndView, to be resolved by the  * DispatcherServlet via a ViewResolver. Will override any  * pre-existing view name or View.  */ ;/**  * Set a view name for this ModelAndView, to be resolved by the  * DispatcherServlet via a ViewResolver. Will override any  * pre-existing view name or View.  */ public void setViewName(@Nullable String viewName) {     this.view = viewName. }
true;public;0;4;/**  * Return the view name to be resolved by the DispatcherServlet  * via a ViewResolver, or {@code null} if we are using a View object.  */ ;/**  * Return the view name to be resolved by the DispatcherServlet  * via a ViewResolver, or {@code null} if we are using a View object.  */ @Nullable public String getViewName() {     return (this.view instanceof String ? (String) this.view : null). }
true;public;1;3;/**  * Set a View object for this ModelAndView. Will override any  * pre-existing view name or View.  */ ;/**  * Set a View object for this ModelAndView. Will override any  * pre-existing view name or View.  */ public void setView(@Nullable View view) {     this.view = view. }
true;public;0;4;/**  * Return the View object, or {@code null} if we are using a view name  * to be resolved by the DispatcherServlet via a ViewResolver.  */ ;/**  * Return the View object, or {@code null} if we are using a view name  * to be resolved by the DispatcherServlet via a ViewResolver.  */ @Nullable public View getView() {     return (this.view instanceof View ? (View) this.view : null). }
true;public;0;3;/**  * Indicate whether or not this {@code ModelAndView} has a view, either  * as a view name or as a direct {@link View} instance.  */ ;/**  * Indicate whether or not this {@code ModelAndView} has a view, either  * as a view name or as a direct {@link View} instance.  */ public boolean hasView() {     return (this.view != null). }
true;public;0;3;/**  * Return whether we use a view reference, i.e. {@code true}  * if the view has been specified via a name to be resolved by the  * DispatcherServlet via a ViewResolver.  */ ;/**  * Return whether we use a view reference, i.e. {@code true}  * if the view has been specified via a name to be resolved by the  * DispatcherServlet via a ViewResolver.  */ public boolean isReference() {     return (this.view instanceof String). }
true;protected;0;4;/**  * Return the model map. May return {@code null}.  * Called by DispatcherServlet for evaluation of the model.  */ ;/**  * Return the model map. May return {@code null}.  * Called by DispatcherServlet for evaluation of the model.  */ @Nullable protected Map<String, Object> getModelInternal() {     return this.model. }
true;public;0;6;/**  * Return the underlying {@code ModelMap} instance (never {@code null}).  */ ;/**  * Return the underlying {@code ModelMap} instance (never {@code null}).  */ public ModelMap getModelMap() {     if (this.model == null) {         this.model = new ModelMap().     }     return this.model. }
true;public;0;3;/**  * Return the model map. Never returns {@code null}.  * To be called by application code for modifying the model.  */ ;/**  * Return the model map. Never returns {@code null}.  * To be called by application code for modifying the model.  */ public Map<String, Object> getModel() {     return getModelMap(). }
true;public;1;3;/**  * Set the HTTP status to use for the response.  * <p>The response status is set just prior to View rendering.  * @since 4.3  */ ;/**  * Set the HTTP status to use for the response.  * <p>The response status is set just prior to View rendering.  * @since 4.3  */ public void setStatus(@Nullable HttpStatus status) {     this.status = status. }
true;public;0;4;/**  * Return the configured HTTP status for the response, if any.  * @since 4.3  */ ;/**  * Return the configured HTTP status for the response, if any.  * @since 4.3  */ @Nullable public HttpStatus getStatus() {     return this.status. }
true;public;2;4;/**  * Add an attribute to the model.  * @param attributeName name of the object to add to the model (never {@code null})  * @param attributeValue object to add to the model (can be {@code null})  * @see ModelMap#addAttribute(String, Object)  * @see #getModelMap()  */ ;/**  * Add an attribute to the model.  * @param attributeName name of the object to add to the model (never {@code null})  * @param attributeValue object to add to the model (can be {@code null})  * @see ModelMap#addAttribute(String, Object)  * @see #getModelMap()  */ public ModelAndView addObject(String attributeName, @Nullable Object attributeValue) {     getModelMap().addAttribute(attributeName, attributeValue).     return this. }
true;public;1;4;/**  * Add an attribute to the model using parameter name generation.  * @param attributeValue the object to add to the model (never {@code null})  * @see ModelMap#addAttribute(Object)  * @see #getModelMap()  */ ;/**  * Add an attribute to the model using parameter name generation.  * @param attributeValue the object to add to the model (never {@code null})  * @see ModelMap#addAttribute(Object)  * @see #getModelMap()  */ public ModelAndView addObject(Object attributeValue) {     getModelMap().addAttribute(attributeValue).     return this. }
true;public;1;4;/**  * Add all attributes contained in the provided Map to the model.  * @param modelMap a Map of attributeName -> attributeValue pairs  * @see ModelMap#addAllAttributes(Map)  * @see #getModelMap()  */ ;/**  * Add all attributes contained in the provided Map to the model.  * @param modelMap a Map of attributeName -> attributeValue pairs  * @see ModelMap#addAllAttributes(Map)  * @see #getModelMap()  */ public ModelAndView addAllObjects(@Nullable Map<String, ?> modelMap) {     getModelMap().addAllAttributes(modelMap).     return this. }
true;public;0;5;/**  * Clear the state of this ModelAndView object.  * The object will be empty afterwards.  * <p>Can be used to suppress rendering of a given ModelAndView object  * in the {@code postHandle} method of a HandlerInterceptor.  * @see #isEmpty()  * @see HandlerInterceptor#postHandle  */ ;/**  * Clear the state of this ModelAndView object.  * The object will be empty afterwards.  * <p>Can be used to suppress rendering of a given ModelAndView object  * in the {@code postHandle} method of a HandlerInterceptor.  * @see #isEmpty()  * @see HandlerInterceptor#postHandle  */ public void clear() {     this.view = null.     this.model = null.     this.cleared = true. }
true;public;0;3;/**  * Return whether this ModelAndView object is empty,  * i.e. whether it does not hold any view and does not contain a model.  */ ;/**  * Return whether this ModelAndView object is empty,  * i.e. whether it does not hold any view and does not contain a model.  */ public boolean isEmpty() {     return (this.view == null && CollectionUtils.isEmpty(this.model)). }
true;public;0;3;/**  * Return whether this ModelAndView object is empty as a result of a call to {@link #clear}  * i.e. whether it does not hold any view and does not contain a model.  * <p>Returns {@code false} if any additional state was added to the instance  * <strong>after</strong> the call to {@link #clear}.  * @see #clear()  */ ;/**  * Return whether this ModelAndView object is empty as a result of a call to {@link #clear}  * i.e. whether it does not hold any view and does not contain a model.  * <p>Returns {@code false} if any additional state was added to the instance  * <strong>after</strong> the call to {@link #clear}.  * @see #clear()  */ public boolean wasCleared() {     return (this.cleared && isEmpty()). }
true;public;0;4;/**  * Return diagnostic information about this model and view.  */ ;/**  * Return diagnostic information about this model and view.  */ @Override public String toString() {     return "ModelAndView [view=" + formatView() + ". model=" + this.model + "]". }
false;private;0;3;;private String formatView() {     return isReference() ? "\"" + this.view + "\"" : "[" + this.view + "]". }
