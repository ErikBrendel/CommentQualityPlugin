commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean supportsParameter(MethodParameter parameter) {     return parameter.hasParameterAnnotation(RequestBody.class). }
false;public;1;5;;@Override public boolean supportsReturnType(MethodParameter returnType) {     return (AnnotatedElementUtils.hasAnnotation(returnType.getContainingClass(), ResponseBody.class) || returnType.hasMethodAnnotation(ResponseBody.class)). }
true;public;4;23;/**  * Throws MethodArgumentNotValidException if validation fails.  * @throws HttpMessageNotReadableException if {@link RequestBody#required()}  * is {@code true} and there is no body content or if there is no suitable  * converter to read the content with.  */ ;/**  * Throws MethodArgumentNotValidException if validation fails.  * @throws HttpMessageNotReadableException if {@link RequestBody#required()}  * is {@code true} and there is no body content or if there is no suitable  * converter to read the content with.  */ @Override public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {     parameter = parameter.nestedIfOptional().     Object arg = readWithMessageConverters(webRequest, parameter, parameter.getNestedGenericParameterType()).     String name = Conventions.getVariableNameForParameter(parameter).     if (binderFactory != null) {         WebDataBinder binder = binderFactory.createBinder(webRequest, arg, name).         if (arg != null) {             validateIfApplicable(binder, parameter).             if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {                 throw new MethodArgumentNotValidException(parameter, binder.getBindingResult()).             }         }         if (mavContainer != null) {             mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult()).         }     }     return adaptArgumentIfNecessary(arg, parameter). }
false;protected;3;15;;@Override protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter, Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {     HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class).     Assert.state(servletRequest != null, "No HttpServletRequest").     ServletServerHttpRequest inputMessage = new ServletServerHttpRequest(servletRequest).     Object arg = readWithMessageConverters(inputMessage, parameter, paramType).     if (arg == null && checkRequired(parameter)) {         throw new HttpMessageNotReadableException("Required request body is missing: " + parameter.getExecutable().toGenericString(), inputMessage).     }     return arg. }
false;protected;1;4;;protected boolean checkRequired(MethodParameter parameter) {     RequestBody requestBody = parameter.getParameterAnnotation(RequestBody.class).     return (requestBody != null && requestBody.required() && !parameter.isOptional()). }
false;public;4;12;;@Override public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {     mavContainer.setRequestHandled(true).     ServletServerHttpRequest inputMessage = createInputMessage(webRequest).     ServletServerHttpResponse outputMessage = createOutputMessage(webRequest).     // Try even with null return value. ResponseBodyAdvice could get involved.     writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage). }
