commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the value of the '{@code for}' attribute.  * <p>Defaults to the value of {@link #getPath}. may be a runtime expression.  */ ;/**  * Set the value of the '{@code for}' attribute.  * <p>Defaults to the value of {@link #getPath}. may be a runtime expression.  */ public void setFor(String forId) {     this.forId = forId. }
true;protected;0;4;/**  * Get the value of the '{@code id}' attribute.  * <p>May be a runtime expression.  */ ;/**  * Get the value of the '{@code id}' attribute.  * <p>May be a runtime expression.  */ @Nullable protected String getFor() {     return this.forId. }
true;protected;1;9;/**  * Writes the opening '{@code label}' tag and forces a block tag so  * that body content is written correctly.  * @return {@link javax.servlet.jsp.tagext.Tag#EVAL_BODY_INCLUDE}  */ ;/**  * Writes the opening '{@code label}' tag and forces a block tag so  * that body content is written correctly.  * @return {@link javax.servlet.jsp.tagext.Tag#EVAL_BODY_INCLUDE}  */ @Override protected int writeTagContent(TagWriter tagWriter) throws JspException {     tagWriter.startTag(LABEL_TAG).     tagWriter.writeAttribute(FOR_ATTRIBUTE, resolveFor()).     writeDefaultAttributes(tagWriter).     tagWriter.forceBlock().     this.tagWriter = tagWriter.     return EVAL_BODY_INCLUDE. }
true;protected;0;6;/**  * Overrides {@code #getName()} to always return {@code null},  * because the '{@code name}' attribute is not supported by the  * '{@code label}' tag.  * @return the value for the HTML '{@code name}' attribute  */ ;/**  * Overrides {@code #getName()} to always return {@code null},  * because the '{@code name}' attribute is not supported by the  * '{@code label}' tag.  * @return the value for the HTML '{@code name}' attribute  */ @Override @Nullable protected String getName() throws JspException {     // This also suppresses the 'id' attribute (which is okay for a <label/>)     return null. }
true;protected;0;8;/**  * Determine the '{@code for}' attribute value for this tag,  * autogenerating one if none specified.  * @see #getFor()  * @see #autogenerateFor()  */ ;/**  * Determine the '{@code for}' attribute value for this tag,  * autogenerating one if none specified.  * @see #getFor()  * @see #autogenerateFor()  */ protected String resolveFor() throws JspException {     if (StringUtils.hasText(this.forId)) {         return getDisplayString(evaluate(FOR_ATTRIBUTE, this.forId)).     } else {         return autogenerateFor().     } }
true;protected;0;3;/**  * Autogenerate the '{@code for}' attribute value for this tag.  * <p>The default implementation delegates to {@link #getPropertyPath()},  * deleting invalid characters (such as "[" or "]").  */ ;/**  * Autogenerate the '{@code for}' attribute value for this tag.  * <p>The default implementation delegates to {@link #getPropertyPath()},  * deleting invalid characters (such as "[" or "]").  */ protected String autogenerateFor() throws JspException {     return StringUtils.deleteAny(getPropertyPath(), "[]"). }
true;public;0;6;/**  * Close the '{@code label}' tag.  */ ;/**  * Close the '{@code label}' tag.  */ @Override public int doEndTag() throws JspException {     Assert.state(this.tagWriter != null, "No TagWriter set").     this.tagWriter.endTag().     return EVAL_PAGE. }
true;public;0;5;/**  * Disposes of the {@link TagWriter} instance.  */ ;/**  * Disposes of the {@link TagWriter} instance.  */ @Override public void doFinally() {     super.doFinally().     this.tagWriter = null. }
