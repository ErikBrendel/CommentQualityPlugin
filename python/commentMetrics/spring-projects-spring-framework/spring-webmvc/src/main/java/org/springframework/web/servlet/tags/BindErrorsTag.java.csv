commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the name of the bean that this tag should check.  */ ;/**  * Set the name of the bean that this tag should check.  */ public void setName(String name) {     this.name = name. }
true;public;0;3;/**  * Return the name of the bean that this tag checks.  */ ;/**  * Return the name of the bean that this tag checks.  */ public String getName() {     return this.name. }
false;protected,final;0;11;;@Override protected final int doStartTagInternal() throws ServletException, JspException {     this.errors = getRequestContext().getErrors(this.name, isHtmlEscape()).     if (this.errors != null && this.errors.hasErrors()) {         this.pageContext.setAttribute(ERRORS_VARIABLE_NAME, this.errors, PageContext.REQUEST_SCOPE).         return EVAL_BODY_INCLUDE.     } else {         return SKIP_BODY.     } }
false;public;0;5;;@Override public int doEndTag() {     this.pageContext.removeAttribute(ERRORS_VARIABLE_NAME, PageContext.REQUEST_SCOPE).     return EVAL_PAGE. }
true;public,final;0;4;/**  * Retrieve the Errors instance that this tag is currently bound to.  * <p>Intended for cooperating nesting tags.  */ ;/**  * Retrieve the Errors instance that this tag is currently bound to.  * <p>Intended for cooperating nesting tags.  */ @Nullable public final Errors getErrors() {     return this.errors. }
false;public;0;5;;@Override public void doFinally() {     super.doFinally().     this.errors = null. }
