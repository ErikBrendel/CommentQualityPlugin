commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link Marshaller} to be used by this view.  */ ;/**  * Set the {@link Marshaller} to be used by this view.  */ public void setMarshaller(Marshaller marshaller) {     this.marshaller = marshaller. }
true;public;1;3;/**  * Set the name of the model key that represents the object to be marshalled.  * If not specified, the model map will be searched for a supported value type.  * @see Marshaller#supports(Class)  */ ;/**  * Set the name of the model key that represents the object to be marshalled.  * If not specified, the model map will be searched for a supported value type.  * @see Marshaller#supports(Class)  */ public void setModelKey(String modelKey) {     this.modelKey = modelKey. }
false;protected;0;4;;@Override protected void initApplicationContext() {     Assert.notNull(this.marshaller, "Property 'marshaller' is required"). }
false;protected;3;17;;@Override protected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {     Object toBeMarshalled = locateToBeMarshalled(model).     if (toBeMarshalled == null) {         throw new IllegalStateException("Unable to locate object to be marshalled in model: " + model).     }     Assert.state(this.marshaller != null, "No Marshaller set").     ByteArrayOutputStream baos = new ByteArrayOutputStream(1024).     this.marshaller.marshal(toBeMarshalled, new StreamResult(baos)).     setResponseContentType(request, response).     response.setContentLength(baos.size()).     baos.writeTo(response.getOutputStream()). }
true;protected;1;22;/**  * Locate the object to be marshalled.  * <p>The default implementation first attempts to look under the configured  * {@linkplain #setModelKey(String) model key}, if any, before attempting to  * locate an object of {@linkplain Marshaller#supports(Class) supported type}.  * @param model the model Map  * @return the Object to be marshalled (or {@code null} if none found)  * @throws IllegalStateException if the model object specified by the  * {@linkplain #setModelKey(String) model key} is not supported by the marshaller  * @see #setModelKey(String)  */ ;/**  * Locate the object to be marshalled.  * <p>The default implementation first attempts to look under the configured  * {@linkplain #setModelKey(String) model key}, if any, before attempting to  * locate an object of {@linkplain Marshaller#supports(Class) supported type}.  * @param model the model Map  * @return the Object to be marshalled (or {@code null} if none found)  * @throws IllegalStateException if the model object specified by the  * {@linkplain #setModelKey(String) model key} is not supported by the marshaller  * @see #setModelKey(String)  */ @Nullable protected Object locateToBeMarshalled(Map<String, Object> model) throws IllegalStateException {     if (this.modelKey != null) {         Object value = model.get(this.modelKey).         if (value == null) {             throw new IllegalStateException("Model contains no object with key [" + this.modelKey + "]").         }         if (!isEligibleForMarshalling(this.modelKey, value)) {             throw new IllegalStateException("Model object [" + value + "] retrieved via key [" + this.modelKey + "] is not supported by the Marshaller").         }         return value.     }     for (Map.Entry<String, Object> entry : model.entrySet()) {         Object value = entry.getValue().         if (value != null && (model.size() == 1 || !(value instanceof BindingResult)) && isEligibleForMarshalling(entry.getKey(), value)) {             return value.         }     }     return null. }
true;protected;2;8;/**  * Check whether the given value from the current view's model is eligible  * for marshalling through the configured {@link Marshaller}.  * <p>The default implementation calls {@link Marshaller#supports(Class)},  * unwrapping a given {@link JAXBElement} first if applicable.  * @param modelKey the value's key in the model (never {@code null})  * @param value the value to check (never {@code null})  * @return whether the given value is to be considered as eligible  * @see Marshaller#supports(Class)  */ ;/**  * Check whether the given value from the current view's model is eligible  * for marshalling through the configured {@link Marshaller}.  * <p>The default implementation calls {@link Marshaller#supports(Class)},  * unwrapping a given {@link JAXBElement} first if applicable.  * @param modelKey the value's key in the model (never {@code null})  * @param value the value to check (never {@code null})  * @return whether the given value is to be considered as eligible  * @see Marshaller#supports(Class)  */ protected boolean isEligibleForMarshalling(String modelKey, Object value) {     Assert.state(this.marshaller != null, "No Marshaller set").     Class<?> classToCheck = value.getClass().     if (value instanceof JAXBElement) {         classToCheck = ((JAXBElement<?>) value).getDeclaredType().     }     return this.marshaller.supports(classToCheck). }
