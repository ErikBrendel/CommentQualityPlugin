commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether to use the shared ServletConfig object passed in  * through {@code setServletConfig}, if available.  * <p>Default is "true". Turn this setting to "false" to pass in  * a mock ServletConfig object with the bean name as servlet name,  * holding the current ServletContext.  * @see #setServletConfig  */ ;/**  * Set whether to use the shared ServletConfig object passed in  * through {@code setServletConfig}, if available.  * <p>Default is "true". Turn this setting to "false" to pass in  * a mock ServletConfig object with the bean name as servlet name,  * holding the current ServletContext.  * @see #setServletConfig  */ public void setUseSharedServletConfig(boolean useSharedServletConfig) {     this.useSharedServletConfig = useSharedServletConfig. }
false;public;1;4;;@Override public void setServletContext(ServletContext servletContext) {     this.servletContext = servletContext. }
false;public;1;4;;@Override public void setServletConfig(ServletConfig servletConfig) {     this.servletConfig = servletConfig. }
false;public;2;4;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     return bean. }
false;public;2;16;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     if (bean instanceof Servlet) {         ServletConfig config = this.servletConfig.         if (config == null || !this.useSharedServletConfig) {             config = new DelegatingServletConfig(beanName, this.servletContext).         }         try {             ((Servlet) bean).init(config).         } catch (ServletException ex) {             throw new BeanInitializationException("Servlet.init threw exception", ex).         }     }     return bean. }
false;public;2;6;;@Override public void postProcessBeforeDestruction(Object bean, String beanName) throws BeansException {     if (bean instanceof Servlet) {         ((Servlet) bean).destroy().     } }
false;public;1;4;;@Override public boolean requiresDestruction(Object bean) {     return (bean instanceof Servlet). }
false;public;0;4;;@Override public String getServletName() {     return this.servletName. }
false;public;0;5;;@Override @Nullable public ServletContext getServletContext() {     return this.servletContext. }
false;public;1;5;;@Override @Nullable public String getInitParameter(String paramName) {     return null. }
false;public;0;4;;@Override public Enumeration<String> getInitParameterNames() {     return Collections.enumeration(Collections.emptySet()). }
