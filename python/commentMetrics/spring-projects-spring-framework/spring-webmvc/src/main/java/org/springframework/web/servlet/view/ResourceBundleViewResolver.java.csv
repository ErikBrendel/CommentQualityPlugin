# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceBundleViewResolver -> protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException;1328020251;Obtain the resource bundle for the given basename and {@link Locale}._@param basename the basename to look for_@param locale the <code>Locale</code> to look for_@return the corresponding <code>ResourceBundle</code>_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader);protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,link,locale,param,basename,the,basename,to,look,for,param,locale,the,code,locale,code,to,look,for,return,the,corresponding,code,resource,bundle,code,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader;protected,resource,bundle,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleViewResolver -> protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException;1356735495;Obtain the resource bundle for the given basename and {@link Locale}._@param basename the basename to look for_@param locale the {@code Locale} to look for_@return the corresponding {@code ResourceBundle}_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader);protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,link,locale,param,basename,the,basename,to,look,for,param,locale,the,code,locale,to,look,for,return,the,corresponding,code,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader;protected,resource,bundle,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleViewResolver -> protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException;1357119239;Obtain the resource bundle for the given basename and {@link Locale}._@param basename the basename to look for_@param locale the {@code Locale} to look for_@return the corresponding {@code ResourceBundle}_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader);protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,link,locale,param,basename,the,basename,to,look,for,param,locale,the,code,locale,to,look,for,return,the,corresponding,code,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader;protected,resource,bundle,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleViewResolver -> protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException;1362408075;Obtain the resource bundle for the given basename and {@link Locale}._@param basename the basename to look for_@param locale the {@code Locale} to look for_@return the corresponding {@code ResourceBundle}_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader);protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,link,locale,param,basename,the,basename,to,look,for,param,locale,the,code,locale,to,look,for,return,the,corresponding,code,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader;protected,resource,bundle,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleViewResolver -> protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException;1368482696;Obtain the resource bundle for the given basename and {@link Locale}._@param basename the basename to look for_@param locale the {@code Locale} to look for_@return the corresponding {@code ResourceBundle}_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader);protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,link,locale,param,basename,the,basename,to,look,for,param,locale,the,code,locale,to,look,for,return,the,corresponding,code,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader;protected,resource,bundle,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleViewResolver -> protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException;1407511029;Obtain the resource bundle for the given basename and {@link Locale}._@param basename the basename to look for_@param locale the {@code Locale} to look for_@return the corresponding {@code ResourceBundle}_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader);protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,link,locale,param,basename,the,basename,to,look,for,param,locale,the,code,locale,to,look,for,return,the,corresponding,code,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader;protected,resource,bundle,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleViewResolver -> protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException;1407935098;Obtain the resource bundle for the given basename and {@link Locale}._@param basename the basename to look for_@param locale the {@code Locale} to look for_@return the corresponding {@code ResourceBundle}_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader);protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,link,locale,param,basename,the,basename,to,look,for,param,locale,the,code,locale,to,look,for,return,the,corresponding,code,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader;protected,resource,bundle,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleViewResolver -> protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException;1467730834;Obtain the resource bundle for the given basename and {@link Locale}._@param basename the basename to look for_@param locale the {@code Locale} to look for_@return the corresponding {@code ResourceBundle}_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader);protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,link,locale,param,basename,the,basename,to,look,for,param,locale,the,code,locale,to,look,for,return,the,corresponding,code,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader;protected,resource,bundle,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleViewResolver -> protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException;1498780456;Obtain the resource bundle for the given basename and {@link Locale}._@param basename the basename to look for_@param locale the {@code Locale} to look for_@return the corresponding {@code ResourceBundle}_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader);protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,link,locale,param,basename,the,basename,to,look,for,param,locale,the,code,locale,to,look,for,return,the,corresponding,code,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader;protected,resource,bundle,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleViewResolver -> protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException;1520528267;Obtain the resource bundle for the given basename and {@link Locale}._@param basename the basename to look for_@param locale the {@code Locale} to look for_@return the corresponding {@code ResourceBundle}_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader);protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,link,locale,param,basename,the,basename,to,look,for,param,locale,the,code,locale,to,look,for,return,the,corresponding,code,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader;protected,resource,bundle,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleViewResolver -> protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException;1522448444;Obtain the resource bundle for the given basename and {@link Locale}._@param basename the basename to look for_@param locale the {@code Locale} to look for_@return the corresponding {@code ResourceBundle}_@throws MissingResourceException if no matching bundle could be found_@see java.util.ResourceBundle#getBundle(String, java.util.Locale, ClassLoader);protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,link,locale,param,basename,the,basename,to,look,for,param,locale,the,code,locale,to,look,for,return,the,corresponding,code,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,java,util,resource,bundle,get,bundle,string,java,util,locale,class,loader;protected,resource,bundle,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleViewResolver -> protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException;1522511361;Obtain the resource bundle for the given basename and {@link Locale}._@param basename the basename to look for_@param locale the {@code Locale} to look for_@return the corresponding {@code ResourceBundle}_@throws MissingResourceException if no matching bundle could be found_@see ResourceBundle#getBundle(String, Locale, ClassLoader);protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,link,locale,param,basename,the,basename,to,look,for,param,locale,the,code,locale,to,look,for,return,the,corresponding,code,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,resource,bundle,get,bundle,string,locale,class,loader;protected,resource,bundle,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleViewResolver -> protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException;1522530428;Obtain the resource bundle for the given basename and {@link Locale}._@param basename the basename to look for_@param locale the {@code Locale} to look for_@return the corresponding {@code ResourceBundle}_@throws MissingResourceException if no matching bundle could be found_@see ResourceBundle#getBundle(String, Locale, ClassLoader);protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,link,locale,param,basename,the,basename,to,look,for,param,locale,the,code,locale,to,look,for,return,the,corresponding,code,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,resource,bundle,get,bundle,string,locale,class,loader;protected,resource,bundle,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleViewResolver -> protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException;1530174524;Obtain the resource bundle for the given basename and {@link Locale}._@param basename the basename to look for_@param locale the {@code Locale} to look for_@return the corresponding {@code ResourceBundle}_@throws MissingResourceException if no matching bundle could be found_@see ResourceBundle#getBundle(String, Locale, ClassLoader);protected ResourceBundle getBundle(String basename, Locale locale) throws MissingResourceException {_		return ResourceBundle.getBundle(basename, locale, getBundleClassLoader())__	};obtain,the,resource,bundle,for,the,given,basename,and,link,locale,param,basename,the,basename,to,look,for,param,locale,the,code,locale,to,look,for,return,the,corresponding,code,resource,bundle,throws,missing,resource,exception,if,no,matching,bundle,could,be,found,see,resource,bundle,get,bundle,string,locale,class,loader;protected,resource,bundle,get,bundle,string,basename,locale,locale,throws,missing,resource,exception,return,resource,bundle,get,bundle,basename,locale,get,bundle,class,loader
ResourceBundleViewResolver -> @Override 	public void afterPropertiesSet() throws BeansException;1356735495;Eagerly initialize Locales if necessary._@see #setLocalesToInitialize;@Override_	public void afterPropertiesSet() throws BeansException {_		if (this.localesToInitialize != null) {_			for (Locale locale : this.localesToInitialize) {_				initFactory(locale)__			}_		}_	};eagerly,initialize,locales,if,necessary,see,set,locales,to,initialize;override,public,void,after,properties,set,throws,beans,exception,if,this,locales,to,initialize,null,for,locale,locale,this,locales,to,initialize,init,factory,locale
ResourceBundleViewResolver -> @Override 	public void afterPropertiesSet() throws BeansException;1368482696;Eagerly initialize Locales if necessary._@see #setLocalesToInitialize;@Override_	public void afterPropertiesSet() throws BeansException {_		if (this.localesToInitialize != null) {_			for (Locale locale : this.localesToInitialize) {_				initFactory(locale)__			}_		}_	};eagerly,initialize,locales,if,necessary,see,set,locales,to,initialize;override,public,void,after,properties,set,throws,beans,exception,if,this,locales,to,initialize,null,for,locale,locale,this,locales,to,initialize,init,factory,locale
ResourceBundleViewResolver -> @Override 	public void afterPropertiesSet() throws BeansException;1407511029;Eagerly initialize Locales if necessary._@see #setLocalesToInitialize;@Override_	public void afterPropertiesSet() throws BeansException {_		if (this.localesToInitialize != null) {_			for (Locale locale : this.localesToInitialize) {_				initFactory(locale)__			}_		}_	};eagerly,initialize,locales,if,necessary,see,set,locales,to,initialize;override,public,void,after,properties,set,throws,beans,exception,if,this,locales,to,initialize,null,for,locale,locale,this,locales,to,initialize,init,factory,locale
ResourceBundleViewResolver -> @Override 	public void afterPropertiesSet() throws BeansException;1407935098;Eagerly initialize Locales if necessary._@see #setLocalesToInitialize;@Override_	public void afterPropertiesSet() throws BeansException {_		if (this.localesToInitialize != null) {_			for (Locale locale : this.localesToInitialize) {_				initFactory(locale)__			}_		}_	};eagerly,initialize,locales,if,necessary,see,set,locales,to,initialize;override,public,void,after,properties,set,throws,beans,exception,if,this,locales,to,initialize,null,for,locale,locale,this,locales,to,initialize,init,factory,locale
ResourceBundleViewResolver -> @Override 	public void afterPropertiesSet() throws BeansException;1467730834;Eagerly initialize Locales if necessary._@see #setLocalesToInitialize;@Override_	public void afterPropertiesSet() throws BeansException {_		if (this.localesToInitialize != null) {_			for (Locale locale : this.localesToInitialize) {_				initFactory(locale)__			}_		}_	};eagerly,initialize,locales,if,necessary,see,set,locales,to,initialize;override,public,void,after,properties,set,throws,beans,exception,if,this,locales,to,initialize,null,for,locale,locale,this,locales,to,initialize,init,factory,locale
ResourceBundleViewResolver -> @Override 	public void afterPropertiesSet() throws BeansException;1498780456;Eagerly initialize Locales if necessary._@see #setLocalesToInitialize;@Override_	public void afterPropertiesSet() throws BeansException {_		if (this.localesToInitialize != null) {_			for (Locale locale : this.localesToInitialize) {_				initFactory(locale)__			}_		}_	};eagerly,initialize,locales,if,necessary,see,set,locales,to,initialize;override,public,void,after,properties,set,throws,beans,exception,if,this,locales,to,initialize,null,for,locale,locale,this,locales,to,initialize,init,factory,locale
ResourceBundleViewResolver -> @Override 	public void afterPropertiesSet() throws BeansException;1520528267;Eagerly initialize Locales if necessary._@see #setLocalesToInitialize;@Override_	public void afterPropertiesSet() throws BeansException {_		if (this.localesToInitialize != null) {_			for (Locale locale : this.localesToInitialize) {_				initFactory(locale)__			}_		}_	};eagerly,initialize,locales,if,necessary,see,set,locales,to,initialize;override,public,void,after,properties,set,throws,beans,exception,if,this,locales,to,initialize,null,for,locale,locale,this,locales,to,initialize,init,factory,locale
ResourceBundleViewResolver -> @Override 	public void afterPropertiesSet() throws BeansException;1522448444;Eagerly initialize Locales if necessary._@see #setLocalesToInitialize;@Override_	public void afterPropertiesSet() throws BeansException {_		if (this.localesToInitialize != null) {_			for (Locale locale : this.localesToInitialize) {_				initFactory(locale)__			}_		}_	};eagerly,initialize,locales,if,necessary,see,set,locales,to,initialize;override,public,void,after,properties,set,throws,beans,exception,if,this,locales,to,initialize,null,for,locale,locale,this,locales,to,initialize,init,factory,locale
ResourceBundleViewResolver -> @Override 	public void afterPropertiesSet() throws BeansException;1522511361;Eagerly initialize Locales if necessary._@see #setLocalesToInitialize;@Override_	public void afterPropertiesSet() throws BeansException {_		if (this.localesToInitialize != null) {_			for (Locale locale : this.localesToInitialize) {_				initFactory(locale)__			}_		}_	};eagerly,initialize,locales,if,necessary,see,set,locales,to,initialize;override,public,void,after,properties,set,throws,beans,exception,if,this,locales,to,initialize,null,for,locale,locale,this,locales,to,initialize,init,factory,locale
ResourceBundleViewResolver -> @Override 	public void afterPropertiesSet() throws BeansException;1522530428;Eagerly initialize Locales if necessary._@see #setLocalesToInitialize;@Override_	public void afterPropertiesSet() throws BeansException {_		if (this.localesToInitialize != null) {_			for (Locale locale : this.localesToInitialize) {_				initFactory(locale)__			}_		}_	};eagerly,initialize,locales,if,necessary,see,set,locales,to,initialize;override,public,void,after,properties,set,throws,beans,exception,if,this,locales,to,initialize,null,for,locale,locale,this,locales,to,initialize,init,factory,locale
ResourceBundleViewResolver -> @Override 	public void afterPropertiesSet() throws BeansException;1530174524;Eagerly initialize Locales if necessary._@see #setLocalesToInitialize;@Override_	public void afterPropertiesSet() throws BeansException {_		if (this.localesToInitialize != null) {_			for (Locale locale : this.localesToInitialize) {_				initFactory(locale)__			}_		}_	};eagerly,initialize,locales,if,necessary,see,set,locales,to,initialize;override,public,void,after,properties,set,throws,beans,exception,if,this,locales,to,initialize,null,for,locale,locale,this,locales,to,initialize,init,factory,locale
ResourceBundleViewResolver -> public void setBasenames(String... basenames);1407511029;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions. The default is a single basename "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames) {_		this.basenames = basenames__	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,the,default,is,a,single,basename,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,this,basenames,basenames
ResourceBundleViewResolver -> public void setBasenames(String... basenames);1407935098;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions. The default is a single basename "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames) {_		this.basenames = basenames__	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,the,default,is,a,single,basename,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,this,basenames,basenames
ResourceBundleViewResolver -> public void setBasenames(String... basenames);1467730834;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions. The default is a single basename "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames) {_		this.basenames = basenames__	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,the,default,is,a,single,basename,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,this,basenames,basenames
ResourceBundleViewResolver -> public void setBasenames(String... basenames);1498780456;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions. The default is a single basename "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames) {_		this.basenames = basenames__	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,the,default,is,a,single,basename,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,this,basenames,basenames
ResourceBundleViewResolver -> public void setBasenames(String... basenames);1520528267;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions. The default is a single basename "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames) {_		this.basenames = basenames__	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,the,default,is,a,single,basename,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,this,basenames,basenames
ResourceBundleViewResolver -> public void setBasenames(String... basenames);1522448444;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions. The default is a single basename "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String... basenames) {_		this.basenames = basenames__	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,the,default,is,a,single,basename,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,this,basenames,basenames
ResourceBundleViewResolver -> public void setBasenames(String... basenames);1522511361;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions. The default is a single basename "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see ResourceBundle#getBundle(String);public void setBasenames(String... basenames) {_		this.basenames = basenames__	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,the,default,is,a,single,basename,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,this,basenames,basenames
ResourceBundleViewResolver -> public void setBasenames(String... basenames);1522530428;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions. The default is a single basename "views"._<p>{@code ResourceBundle} supports different locale suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>The associated resource bundles will be checked sequentially when resolving_a message code. Note that message definitions in a <i>previous</i> resource_bundle will override ones in a later bundle, due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see ResourceBundle#getBundle(String)_@see ResourceBundle#getBundle(String, Locale);public void setBasenames(String... basenames) {_		this.basenames = basenames__	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,the,default,is,a,single,basename,views,p,code,resource,bundle,supports,different,locale,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,resource,bundle,get,bundle,string,see,resource,bundle,get,bundle,string,locale;public,void,set,basenames,string,basenames,this,basenames,basenames
ResourceBundleViewResolver -> public void setBasenames(String... basenames);1530174524;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions. The default is a single basename "views"._<p>{@code ResourceBundle} supports different locale suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>The associated resource bundles will be checked sequentially when resolving_a message code. Note that message definitions in a <i>previous</i> resource_bundle will override ones in a later bundle, due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see ResourceBundle#getBundle(String)_@see ResourceBundle#getBundle(String, Locale);public void setBasenames(String... basenames) {_		this.basenames = basenames__	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,the,default,is,a,single,basename,views,p,code,resource,bundle,supports,different,locale,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,resource,bundle,get,bundle,string,see,resource,bundle,get,bundle,string,locale;public,void,set,basenames,string,basenames,this,basenames,basenames
ResourceBundleViewResolver -> public void setBasename(String basename);1328020251;Set a single basename, following {@link java.util.ResourceBundle} conventions._The default is "views"._<p><code>ResourceBundle</code> supports different suffixes. For example,_a base name of "views" might map to <code>ResourceBundle</code> files_"views", "views_en_au" and "views_de"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic <code>java.util.ResourceBundle</code> usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(new String[] {basename})__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,the,default,is,views,p,code,resource,bundle,code,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,code,files,views,and,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,code,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,new,string,basename
ResourceBundleViewResolver -> public void setBasename(String basename);1356735495;Set a single basename, following {@link java.util.ResourceBundle} conventions._The default is "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(new String[] {basename})__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,the,default,is,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,new,string,basename
ResourceBundleViewResolver -> public void setBasename(String basename);1357119239;Set a single basename, following {@link java.util.ResourceBundle} conventions._The default is "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(new String[] {basename})__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,the,default,is,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,new,string,basename
ResourceBundleViewResolver -> public void setBasename(String basename);1362408075;Set a single basename, following {@link java.util.ResourceBundle} conventions._The default is "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(new String[] {basename})__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,the,default,is,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,new,string,basename
ResourceBundleViewResolver -> public void setBasename(String basename);1368482696;Set a single basename, following {@link java.util.ResourceBundle} conventions._The default is "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(new String[] {basename})__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,the,default,is,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,new,string,basename
ResourceBundleViewResolver -> public void setBasename(String basename);1407511029;Set a single basename, following {@link java.util.ResourceBundle} conventions._The default is "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(new String[] {basename})__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,the,default,is,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,new,string,basename
ResourceBundleViewResolver -> public void setBasename(String basename);1407935098;Set a single basename, following {@link java.util.ResourceBundle} conventions._The default is "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,the,default,is,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleViewResolver -> public void setBasename(String basename);1467730834;Set a single basename, following {@link java.util.ResourceBundle} conventions._The default is "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,the,default,is,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleViewResolver -> public void setBasename(String basename);1498780456;Set a single basename, following {@link java.util.ResourceBundle} conventions._The default is "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,the,default,is,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleViewResolver -> public void setBasename(String basename);1520528267;Set a single basename, following {@link java.util.ResourceBundle} conventions._The default is "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,the,default,is,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleViewResolver -> public void setBasename(String basename);1522448444;Set a single basename, following {@link java.util.ResourceBundle} conventions._The default is "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see java.util.ResourceBundle#getBundle(String);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,the,default,is,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleViewResolver -> public void setBasename(String basename);1522511361;Set a single basename, following {@link java.util.ResourceBundle} conventions._The default is "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see ResourceBundle#getBundle(String)_@see ResourceBundle#getBundle(String, Locale);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,the,default,is,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,resource,bundle,get,bundle,string,see,resource,bundle,get,bundle,string,locale;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleViewResolver -> public void setBasename(String basename);1522530428;Set a single basename, following {@link java.util.ResourceBundle} conventions._The default is "views"._<p>{@code ResourceBundle} supports different locale suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see ResourceBundle#getBundle(String)_@see ResourceBundle#getBundle(String, Locale);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,the,default,is,views,p,code,resource,bundle,supports,different,locale,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,resource,bundle,get,bundle,string,see,resource,bundle,get,bundle,string,locale;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleViewResolver -> public void setBasename(String basename);1530174524;Set a single basename, following {@link java.util.ResourceBundle} conventions._The default is "views"._<p>{@code ResourceBundle} supports different locale suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasenames_@see ResourceBundle#getBundle(String)_@see ResourceBundle#getBundle(String, Locale);public void setBasename(String basename) {_		setBasenames(basename)__	};set,a,single,basename,following,link,java,util,resource,bundle,conventions,the,default,is,views,p,code,resource,bundle,supports,different,locale,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basenames,see,resource,bundle,get,bundle,string,see,resource,bundle,get,bundle,string,locale;public,void,set,basename,string,basename,set,basenames,basename
ResourceBundleViewResolver -> public void setDefaultParentView(String defaultParentView);1328020251;Set the default parent for views defined in the <code>ResourceBundle</code>._<p>This avoids repeated "yyy1.(parent)=xxx", "yyy2.(parent)=xxx" definitions_in the bundle, especially if all defined views share the same parent._<p>The parent will typically define the view class and common attributes._Concrete views might simply consist of an URL definition then:_a la "yyy1.url=/my.jsp", "yyy2.url=/your.jsp"._<p>View definitions that define their own parent or carry their own_class can still override this. Strictly speaking, the rule that a_default parent setting does not apply to a bean definition that_carries a class is there for backwards compatiblity reasons._It still matches the typical use case.;public void setDefaultParentView(String defaultParentView) {_		this.defaultParentView = defaultParentView__	};set,the,default,parent,for,views,defined,in,the,code,resource,bundle,code,p,this,avoids,repeated,yyy1,parent,xxx,yyy2,parent,xxx,definitions,in,the,bundle,especially,if,all,defined,views,share,the,same,parent,p,the,parent,will,typically,define,the,view,class,and,common,attributes,concrete,views,might,simply,consist,of,an,url,definition,then,a,la,yyy1,url,my,jsp,yyy2,url,your,jsp,p,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatiblity,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,view,string,default,parent,view,this,default,parent,view,default,parent,view
ResourceBundleViewResolver -> public void setDefaultParentView(String defaultParentView);1356735495;Set the default parent for views defined in the {@code ResourceBundle}._<p>This avoids repeated "yyy1.(parent)=xxx", "yyy2.(parent)=xxx" definitions_in the bundle, especially if all defined views share the same parent._<p>The parent will typically define the view class and common attributes._Concrete views might simply consist of an URL definition then:_a la "yyy1.url=/my.jsp", "yyy2.url=/your.jsp"._<p>View definitions that define their own parent or carry their own_class can still override this. Strictly speaking, the rule that a_default parent setting does not apply to a bean definition that_carries a class is there for backwards compatiblity reasons._It still matches the typical use case.;public void setDefaultParentView(String defaultParentView) {_		this.defaultParentView = defaultParentView__	};set,the,default,parent,for,views,defined,in,the,code,resource,bundle,p,this,avoids,repeated,yyy1,parent,xxx,yyy2,parent,xxx,definitions,in,the,bundle,especially,if,all,defined,views,share,the,same,parent,p,the,parent,will,typically,define,the,view,class,and,common,attributes,concrete,views,might,simply,consist,of,an,url,definition,then,a,la,yyy1,url,my,jsp,yyy2,url,your,jsp,p,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatiblity,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,view,string,default,parent,view,this,default,parent,view,default,parent,view
ResourceBundleViewResolver -> public void setDefaultParentView(String defaultParentView);1357119239;Set the default parent for views defined in the {@code ResourceBundle}._<p>This avoids repeated "yyy1.(parent)=xxx", "yyy2.(parent)=xxx" definitions_in the bundle, especially if all defined views share the same parent._<p>The parent will typically define the view class and common attributes._Concrete views might simply consist of an URL definition then:_a la "yyy1.url=/my.jsp", "yyy2.url=/your.jsp"._<p>View definitions that define their own parent or carry their own_class can still override this. Strictly speaking, the rule that a_default parent setting does not apply to a bean definition that_carries a class is there for backwards compatiblity reasons._It still matches the typical use case.;public void setDefaultParentView(String defaultParentView) {_		this.defaultParentView = defaultParentView__	};set,the,default,parent,for,views,defined,in,the,code,resource,bundle,p,this,avoids,repeated,yyy1,parent,xxx,yyy2,parent,xxx,definitions,in,the,bundle,especially,if,all,defined,views,share,the,same,parent,p,the,parent,will,typically,define,the,view,class,and,common,attributes,concrete,views,might,simply,consist,of,an,url,definition,then,a,la,yyy1,url,my,jsp,yyy2,url,your,jsp,p,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatiblity,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,view,string,default,parent,view,this,default,parent,view,default,parent,view
ResourceBundleViewResolver -> public void setDefaultParentView(String defaultParentView);1362408075;Set the default parent for views defined in the {@code ResourceBundle}._<p>This avoids repeated "yyy1.(parent)=xxx", "yyy2.(parent)=xxx" definitions_in the bundle, especially if all defined views share the same parent._<p>The parent will typically define the view class and common attributes._Concrete views might simply consist of an URL definition then:_a la "yyy1.url=/my.jsp", "yyy2.url=/your.jsp"._<p>View definitions that define their own parent or carry their own_class can still override this. Strictly speaking, the rule that a_default parent setting does not apply to a bean definition that_carries a class is there for backwards compatibility reasons._It still matches the typical use case.;public void setDefaultParentView(String defaultParentView) {_		this.defaultParentView = defaultParentView__	};set,the,default,parent,for,views,defined,in,the,code,resource,bundle,p,this,avoids,repeated,yyy1,parent,xxx,yyy2,parent,xxx,definitions,in,the,bundle,especially,if,all,defined,views,share,the,same,parent,p,the,parent,will,typically,define,the,view,class,and,common,attributes,concrete,views,might,simply,consist,of,an,url,definition,then,a,la,yyy1,url,my,jsp,yyy2,url,your,jsp,p,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,view,string,default,parent,view,this,default,parent,view,default,parent,view
ResourceBundleViewResolver -> public void setDefaultParentView(String defaultParentView);1368482696;Set the default parent for views defined in the {@code ResourceBundle}._<p>This avoids repeated "yyy1.(parent)=xxx", "yyy2.(parent)=xxx" definitions_in the bundle, especially if all defined views share the same parent._<p>The parent will typically define the view class and common attributes._Concrete views might simply consist of an URL definition then:_a la "yyy1.url=/my.jsp", "yyy2.url=/your.jsp"._<p>View definitions that define their own parent or carry their own_class can still override this. Strictly speaking, the rule that a_default parent setting does not apply to a bean definition that_carries a class is there for backwards compatibility reasons._It still matches the typical use case.;public void setDefaultParentView(String defaultParentView) {_		this.defaultParentView = defaultParentView__	};set,the,default,parent,for,views,defined,in,the,code,resource,bundle,p,this,avoids,repeated,yyy1,parent,xxx,yyy2,parent,xxx,definitions,in,the,bundle,especially,if,all,defined,views,share,the,same,parent,p,the,parent,will,typically,define,the,view,class,and,common,attributes,concrete,views,might,simply,consist,of,an,url,definition,then,a,la,yyy1,url,my,jsp,yyy2,url,your,jsp,p,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,view,string,default,parent,view,this,default,parent,view,default,parent,view
ResourceBundleViewResolver -> public void setDefaultParentView(String defaultParentView);1407511029;Set the default parent for views defined in the {@code ResourceBundle}._<p>This avoids repeated "yyy1.(parent)=xxx", "yyy2.(parent)=xxx" definitions_in the bundle, especially if all defined views share the same parent._<p>The parent will typically define the view class and common attributes._Concrete views might simply consist of an URL definition then:_a la "yyy1.url=/my.jsp", "yyy2.url=/your.jsp"._<p>View definitions that define their own parent or carry their own_class can still override this. Strictly speaking, the rule that a_default parent setting does not apply to a bean definition that_carries a class is there for backwards compatibility reasons._It still matches the typical use case.;public void setDefaultParentView(String defaultParentView) {_		this.defaultParentView = defaultParentView__	};set,the,default,parent,for,views,defined,in,the,code,resource,bundle,p,this,avoids,repeated,yyy1,parent,xxx,yyy2,parent,xxx,definitions,in,the,bundle,especially,if,all,defined,views,share,the,same,parent,p,the,parent,will,typically,define,the,view,class,and,common,attributes,concrete,views,might,simply,consist,of,an,url,definition,then,a,la,yyy1,url,my,jsp,yyy2,url,your,jsp,p,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,view,string,default,parent,view,this,default,parent,view,default,parent,view
ResourceBundleViewResolver -> public void setDefaultParentView(String defaultParentView);1407935098;Set the default parent for views defined in the {@code ResourceBundle}._<p>This avoids repeated "yyy1.(parent)=xxx", "yyy2.(parent)=xxx" definitions_in the bundle, especially if all defined views share the same parent._<p>The parent will typically define the view class and common attributes._Concrete views might simply consist of an URL definition then:_a la "yyy1.url=/my.jsp", "yyy2.url=/your.jsp"._<p>View definitions that define their own parent or carry their own_class can still override this. Strictly speaking, the rule that a_default parent setting does not apply to a bean definition that_carries a class is there for backwards compatibility reasons._It still matches the typical use case.;public void setDefaultParentView(String defaultParentView) {_		this.defaultParentView = defaultParentView__	};set,the,default,parent,for,views,defined,in,the,code,resource,bundle,p,this,avoids,repeated,yyy1,parent,xxx,yyy2,parent,xxx,definitions,in,the,bundle,especially,if,all,defined,views,share,the,same,parent,p,the,parent,will,typically,define,the,view,class,and,common,attributes,concrete,views,might,simply,consist,of,an,url,definition,then,a,la,yyy1,url,my,jsp,yyy2,url,your,jsp,p,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,view,string,default,parent,view,this,default,parent,view,default,parent,view
ResourceBundleViewResolver -> public void setDefaultParentView(String defaultParentView);1467730834;Set the default parent for views defined in the {@code ResourceBundle}._<p>This avoids repeated "yyy1.(parent)=xxx", "yyy2.(parent)=xxx" definitions_in the bundle, especially if all defined views share the same parent._<p>The parent will typically define the view class and common attributes._Concrete views might simply consist of an URL definition then:_a la "yyy1.url=/my.jsp", "yyy2.url=/your.jsp"._<p>View definitions that define their own parent or carry their own_class can still override this. Strictly speaking, the rule that a_default parent setting does not apply to a bean definition that_carries a class is there for backwards compatibility reasons._It still matches the typical use case.;public void setDefaultParentView(String defaultParentView) {_		this.defaultParentView = defaultParentView__	};set,the,default,parent,for,views,defined,in,the,code,resource,bundle,p,this,avoids,repeated,yyy1,parent,xxx,yyy2,parent,xxx,definitions,in,the,bundle,especially,if,all,defined,views,share,the,same,parent,p,the,parent,will,typically,define,the,view,class,and,common,attributes,concrete,views,might,simply,consist,of,an,url,definition,then,a,la,yyy1,url,my,jsp,yyy2,url,your,jsp,p,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,view,string,default,parent,view,this,default,parent,view,default,parent,view
ResourceBundleViewResolver -> public void setDefaultParentView(String defaultParentView);1498780456;Set the default parent for views defined in the {@code ResourceBundle}._<p>This avoids repeated "yyy1.(parent)=xxx", "yyy2.(parent)=xxx" definitions_in the bundle, especially if all defined views share the same parent._<p>The parent will typically define the view class and common attributes._Concrete views might simply consist of an URL definition then:_a la "yyy1.url=/my.jsp", "yyy2.url=/your.jsp"._<p>View definitions that define their own parent or carry their own_class can still override this. Strictly speaking, the rule that a_default parent setting does not apply to a bean definition that_carries a class is there for backwards compatibility reasons._It still matches the typical use case.;public void setDefaultParentView(String defaultParentView) {_		this.defaultParentView = defaultParentView__	};set,the,default,parent,for,views,defined,in,the,code,resource,bundle,p,this,avoids,repeated,yyy1,parent,xxx,yyy2,parent,xxx,definitions,in,the,bundle,especially,if,all,defined,views,share,the,same,parent,p,the,parent,will,typically,define,the,view,class,and,common,attributes,concrete,views,might,simply,consist,of,an,url,definition,then,a,la,yyy1,url,my,jsp,yyy2,url,your,jsp,p,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,view,string,default,parent,view,this,default,parent,view,default,parent,view
ResourceBundleViewResolver -> public void setDefaultParentView(String defaultParentView);1520528267;Set the default parent for views defined in the {@code ResourceBundle}._<p>This avoids repeated "yyy1.(parent)=xxx", "yyy2.(parent)=xxx" definitions_in the bundle, especially if all defined views share the same parent._<p>The parent will typically define the view class and common attributes._Concrete views might simply consist of an URL definition then:_a la "yyy1.url=/my.jsp", "yyy2.url=/your.jsp"._<p>View definitions that define their own parent or carry their own_class can still override this. Strictly speaking, the rule that a_default parent setting does not apply to a bean definition that_carries a class is there for backwards compatibility reasons._It still matches the typical use case.;public void setDefaultParentView(String defaultParentView) {_		this.defaultParentView = defaultParentView__	};set,the,default,parent,for,views,defined,in,the,code,resource,bundle,p,this,avoids,repeated,yyy1,parent,xxx,yyy2,parent,xxx,definitions,in,the,bundle,especially,if,all,defined,views,share,the,same,parent,p,the,parent,will,typically,define,the,view,class,and,common,attributes,concrete,views,might,simply,consist,of,an,url,definition,then,a,la,yyy1,url,my,jsp,yyy2,url,your,jsp,p,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,view,string,default,parent,view,this,default,parent,view,default,parent,view
ResourceBundleViewResolver -> public void setDefaultParentView(String defaultParentView);1522448444;Set the default parent for views defined in the {@code ResourceBundle}._<p>This avoids repeated "yyy1.(parent)=xxx", "yyy2.(parent)=xxx" definitions_in the bundle, especially if all defined views share the same parent._<p>The parent will typically define the view class and common attributes._Concrete views might simply consist of an URL definition then:_a la "yyy1.url=/my.jsp", "yyy2.url=/your.jsp"._<p>View definitions that define their own parent or carry their own_class can still override this. Strictly speaking, the rule that a_default parent setting does not apply to a bean definition that_carries a class is there for backwards compatibility reasons._It still matches the typical use case.;public void setDefaultParentView(String defaultParentView) {_		this.defaultParentView = defaultParentView__	};set,the,default,parent,for,views,defined,in,the,code,resource,bundle,p,this,avoids,repeated,yyy1,parent,xxx,yyy2,parent,xxx,definitions,in,the,bundle,especially,if,all,defined,views,share,the,same,parent,p,the,parent,will,typically,define,the,view,class,and,common,attributes,concrete,views,might,simply,consist,of,an,url,definition,then,a,la,yyy1,url,my,jsp,yyy2,url,your,jsp,p,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,view,string,default,parent,view,this,default,parent,view,default,parent,view
ResourceBundleViewResolver -> public void setDefaultParentView(String defaultParentView);1522511361;Set the default parent for views defined in the {@code ResourceBundle}._<p>This avoids repeated "yyy1.(parent)=xxx", "yyy2.(parent)=xxx" definitions_in the bundle, especially if all defined views share the same parent._<p>The parent will typically define the view class and common attributes._Concrete views might simply consist of an URL definition then:_a la "yyy1.url=/my.jsp", "yyy2.url=/your.jsp"._<p>View definitions that define their own parent or carry their own_class can still override this. Strictly speaking, the rule that a_default parent setting does not apply to a bean definition that_carries a class is there for backwards compatibility reasons._It still matches the typical use case.;public void setDefaultParentView(String defaultParentView) {_		this.defaultParentView = defaultParentView__	};set,the,default,parent,for,views,defined,in,the,code,resource,bundle,p,this,avoids,repeated,yyy1,parent,xxx,yyy2,parent,xxx,definitions,in,the,bundle,especially,if,all,defined,views,share,the,same,parent,p,the,parent,will,typically,define,the,view,class,and,common,attributes,concrete,views,might,simply,consist,of,an,url,definition,then,a,la,yyy1,url,my,jsp,yyy2,url,your,jsp,p,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,view,string,default,parent,view,this,default,parent,view,default,parent,view
ResourceBundleViewResolver -> public void setDefaultParentView(String defaultParentView);1522530428;Set the default parent for views defined in the {@code ResourceBundle}._<p>This avoids repeated "yyy1.(parent)=xxx", "yyy2.(parent)=xxx" definitions_in the bundle, especially if all defined views share the same parent._<p>The parent will typically define the view class and common attributes._Concrete views might simply consist of an URL definition then:_a la "yyy1.url=/my.jsp", "yyy2.url=/your.jsp"._<p>View definitions that define their own parent or carry their own_class can still override this. Strictly speaking, the rule that a_default parent setting does not apply to a bean definition that_carries a class is there for backwards compatibility reasons._It still matches the typical use case.;public void setDefaultParentView(String defaultParentView) {_		this.defaultParentView = defaultParentView__	};set,the,default,parent,for,views,defined,in,the,code,resource,bundle,p,this,avoids,repeated,yyy1,parent,xxx,yyy2,parent,xxx,definitions,in,the,bundle,especially,if,all,defined,views,share,the,same,parent,p,the,parent,will,typically,define,the,view,class,and,common,attributes,concrete,views,might,simply,consist,of,an,url,definition,then,a,la,yyy1,url,my,jsp,yyy2,url,your,jsp,p,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,view,string,default,parent,view,this,default,parent,view,default,parent,view
ResourceBundleViewResolver -> public void setDefaultParentView(String defaultParentView);1530174524;Set the default parent for views defined in the {@code ResourceBundle}._<p>This avoids repeated "yyy1.(parent)=xxx", "yyy2.(parent)=xxx" definitions_in the bundle, especially if all defined views share the same parent._<p>The parent will typically define the view class and common attributes._Concrete views might simply consist of an URL definition then:_a la "yyy1.url=/my.jsp", "yyy2.url=/your.jsp"._<p>View definitions that define their own parent or carry their own_class can still override this. Strictly speaking, the rule that a_default parent setting does not apply to a bean definition that_carries a class is there for backwards compatibility reasons._It still matches the typical use case.;public void setDefaultParentView(String defaultParentView) {_		this.defaultParentView = defaultParentView__	};set,the,default,parent,for,views,defined,in,the,code,resource,bundle,p,this,avoids,repeated,yyy1,parent,xxx,yyy2,parent,xxx,definitions,in,the,bundle,especially,if,all,defined,views,share,the,same,parent,p,the,parent,will,typically,define,the,view,class,and,common,attributes,concrete,views,might,simply,consist,of,an,url,definition,then,a,la,yyy1,url,my,jsp,yyy2,url,your,jsp,p,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,view,string,default,parent,view,this,default,parent,view,default,parent,view
ResourceBundleViewResolver -> protected ClassLoader getBundleClassLoader();1328020251;Return the {@link ClassLoader} to load resource bundles with._<p>Default is the specified bundle <code>ClassLoader</code>,_usually the thread context <code>ClassLoader</code>.;protected ClassLoader getBundleClassLoader() {_		return this.bundleClassLoader__	};return,the,link,class,loader,to,load,resource,bundles,with,p,default,is,the,specified,bundle,code,class,loader,code,usually,the,thread,context,code,class,loader,code;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader
ResourceBundleViewResolver -> protected ClassLoader getBundleClassLoader();1356735495;Return the {@link ClassLoader} to load resource bundles with._<p>Default is the specified bundle {@code ClassLoader},_usually the thread context {@code ClassLoader}.;protected ClassLoader getBundleClassLoader() {_		return this.bundleClassLoader__	};return,the,link,class,loader,to,load,resource,bundles,with,p,default,is,the,specified,bundle,code,class,loader,usually,the,thread,context,code,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader
ResourceBundleViewResolver -> protected ClassLoader getBundleClassLoader();1357119239;Return the {@link ClassLoader} to load resource bundles with._<p>Default is the specified bundle {@code ClassLoader},_usually the thread context {@code ClassLoader}.;protected ClassLoader getBundleClassLoader() {_		return this.bundleClassLoader__	};return,the,link,class,loader,to,load,resource,bundles,with,p,default,is,the,specified,bundle,code,class,loader,usually,the,thread,context,code,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader
ResourceBundleViewResolver -> protected ClassLoader getBundleClassLoader();1362408075;Return the {@link ClassLoader} to load resource bundles with._<p>Default is the specified bundle {@code ClassLoader},_usually the thread context {@code ClassLoader}.;protected ClassLoader getBundleClassLoader() {_		return this.bundleClassLoader__	};return,the,link,class,loader,to,load,resource,bundles,with,p,default,is,the,specified,bundle,code,class,loader,usually,the,thread,context,code,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader
ResourceBundleViewResolver -> protected ClassLoader getBundleClassLoader();1368482696;Return the {@link ClassLoader} to load resource bundles with._<p>Default is the specified bundle {@code ClassLoader},_usually the thread context {@code ClassLoader}.;protected ClassLoader getBundleClassLoader() {_		return this.bundleClassLoader__	};return,the,link,class,loader,to,load,resource,bundles,with,p,default,is,the,specified,bundle,code,class,loader,usually,the,thread,context,code,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader
ResourceBundleViewResolver -> protected ClassLoader getBundleClassLoader();1407511029;Return the {@link ClassLoader} to load resource bundles with._<p>Default is the specified bundle {@code ClassLoader},_usually the thread context {@code ClassLoader}.;protected ClassLoader getBundleClassLoader() {_		return this.bundleClassLoader__	};return,the,link,class,loader,to,load,resource,bundles,with,p,default,is,the,specified,bundle,code,class,loader,usually,the,thread,context,code,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader
ResourceBundleViewResolver -> protected ClassLoader getBundleClassLoader();1407935098;Return the {@link ClassLoader} to load resource bundles with._<p>Default is the specified bundle {@code ClassLoader},_usually the thread context {@code ClassLoader}.;protected ClassLoader getBundleClassLoader() {_		return this.bundleClassLoader__	};return,the,link,class,loader,to,load,resource,bundles,with,p,default,is,the,specified,bundle,code,class,loader,usually,the,thread,context,code,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader
ResourceBundleViewResolver -> protected ClassLoader getBundleClassLoader();1467730834;Return the {@link ClassLoader} to load resource bundles with._<p>Default is the specified bundle {@code ClassLoader},_usually the thread context {@code ClassLoader}.;protected ClassLoader getBundleClassLoader() {_		return this.bundleClassLoader__	};return,the,link,class,loader,to,load,resource,bundles,with,p,default,is,the,specified,bundle,code,class,loader,usually,the,thread,context,code,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader
ResourceBundleViewResolver -> protected ClassLoader getBundleClassLoader();1498780456;Return the {@link ClassLoader} to load resource bundles with._<p>Default is the specified bundle {@code ClassLoader},_usually the thread context {@code ClassLoader}.;protected ClassLoader getBundleClassLoader() {_		return this.bundleClassLoader__	};return,the,link,class,loader,to,load,resource,bundles,with,p,default,is,the,specified,bundle,code,class,loader,usually,the,thread,context,code,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader
ResourceBundleViewResolver -> protected ClassLoader getBundleClassLoader();1520528267;Return the {@link ClassLoader} to load resource bundles with._<p>Default is the specified bundle {@code ClassLoader},_usually the thread context {@code ClassLoader}.;protected ClassLoader getBundleClassLoader() {_		return this.bundleClassLoader__	};return,the,link,class,loader,to,load,resource,bundles,with,p,default,is,the,specified,bundle,code,class,loader,usually,the,thread,context,code,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader
ResourceBundleViewResolver -> protected ClassLoader getBundleClassLoader();1522448444;Return the {@link ClassLoader} to load resource bundles with._<p>Default is the specified bundle {@code ClassLoader},_usually the thread context {@code ClassLoader}.;protected ClassLoader getBundleClassLoader() {_		return this.bundleClassLoader__	};return,the,link,class,loader,to,load,resource,bundles,with,p,default,is,the,specified,bundle,code,class,loader,usually,the,thread,context,code,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader
ResourceBundleViewResolver -> protected ClassLoader getBundleClassLoader();1522511361;Return the {@link ClassLoader} to load resource bundles with._<p>Default is the specified bundle {@code ClassLoader},_usually the thread context {@code ClassLoader}.;protected ClassLoader getBundleClassLoader() {_		return this.bundleClassLoader__	};return,the,link,class,loader,to,load,resource,bundles,with,p,default,is,the,specified,bundle,code,class,loader,usually,the,thread,context,code,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader
ResourceBundleViewResolver -> protected ClassLoader getBundleClassLoader();1522530428;Return the {@link ClassLoader} to load resource bundles with._<p>Default is the specified bundle {@code ClassLoader},_usually the thread context {@code ClassLoader}.;protected ClassLoader getBundleClassLoader() {_		return this.bundleClassLoader__	};return,the,link,class,loader,to,load,resource,bundles,with,p,default,is,the,specified,bundle,code,class,loader,usually,the,thread,context,code,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader
ResourceBundleViewResolver -> protected ClassLoader getBundleClassLoader();1530174524;Return the {@link ClassLoader} to load resource bundles with._<p>Default is the specified bundle {@code ClassLoader},_usually the thread context {@code ClassLoader}.;protected ClassLoader getBundleClassLoader() {_		return this.bundleClassLoader__	};return,the,link,class,loader,to,load,resource,bundles,with,p,default,is,the,specified,bundle,code,class,loader,usually,the,thread,context,code,class,loader;protected,class,loader,get,bundle,class,loader,return,this,bundle,class,loader
ResourceBundleViewResolver -> public void setBasenames(String[] basenames);1328020251;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions. The default is a single basename "views"._<p><code>ResourceBundle</code> supports different suffixes. For example,_a base name of "views" might map to <code>ResourceBundle</code> files_"views", "views_en_au" and "views_de"._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic <code>java.util.ResourceBundle</code> usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String[] basenames) {_		this.basenames = basenames__	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,the,default,is,a,single,basename,views,p,code,resource,bundle,code,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,code,files,views,and,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,code,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,this,basenames,basenames
ResourceBundleViewResolver -> public void setBasenames(String[] basenames);1356735495;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions. The default is a single basename "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String[] basenames) {_		this.basenames = basenames__	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,the,default,is,a,single,basename,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,this,basenames,basenames
ResourceBundleViewResolver -> public void setBasenames(String[] basenames);1357119239;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions. The default is a single basename "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String[] basenames) {_		this.basenames = basenames__	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,the,default,is,a,single,basename,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,this,basenames,basenames
ResourceBundleViewResolver -> public void setBasenames(String[] basenames);1362408075;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions. The default is a single basename "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String[] basenames) {_		this.basenames = basenames__	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,the,default,is,a,single,basename,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,this,basenames,basenames
ResourceBundleViewResolver -> public void setBasenames(String[] basenames);1368482696;Set an array of basenames, each following {@link java.util.ResourceBundle}_conventions. The default is a single basename "views"._<p>{@code ResourceBundle} supports different suffixes. For example,_a base name of "views" might map to {@code ResourceBundle} files_"views", "views_en_au" and "views_de"._<p>The associated resource bundles will be checked sequentially_when resolving a message code. Note that message definitions in a_<i>previous</i> resource bundle will override ones in a later bundle,_due to the sequential lookup._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see #setBasename_@see java.util.ResourceBundle#getBundle(String);public void setBasenames(String[] basenames) {_		this.basenames = basenames__	};set,an,array,of,basenames,each,following,link,java,util,resource,bundle,conventions,the,default,is,a,single,basename,views,p,code,resource,bundle,supports,different,suffixes,for,example,a,base,name,of,views,might,map,to,code,resource,bundle,files,views,and,p,the,associated,resource,bundles,will,be,checked,sequentially,when,resolving,a,message,code,note,that,message,definitions,in,a,i,previous,i,resource,bundle,will,override,ones,in,a,later,bundle,due,to,the,sequential,lookup,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,set,basename,see,java,util,resource,bundle,get,bundle,string;public,void,set,basenames,string,basenames,this,basenames,basenames
ResourceBundleViewResolver -> public void destroy() throws BeansException;1328020251;Close the bundle View factories on context shutdown.;public void destroy() throws BeansException {_		for (ConfigurableApplicationContext factory : this.bundleCache.values()) {_			factory.close()__		}_		this.localeCache.clear()__		this.bundleCache.clear()__	};close,the,bundle,view,factories,on,context,shutdown;public,void,destroy,throws,beans,exception,for,configurable,application,context,factory,this,bundle,cache,values,factory,close,this,locale,cache,clear,this,bundle,cache,clear
ResourceBundleViewResolver -> public void destroy() throws BeansException;1357119239;Close the bundle View factories on context shutdown.;public void destroy() throws BeansException {_		for (ConfigurableApplicationContext factory : this.bundleCache.values()) {_			factory.close()__		}_		this.localeCache.clear()__		this.bundleCache.clear()__	};close,the,bundle,view,factories,on,context,shutdown;public,void,destroy,throws,beans,exception,for,configurable,application,context,factory,this,bundle,cache,values,factory,close,this,locale,cache,clear,this,bundle,cache,clear
ResourceBundleViewResolver -> public void destroy() throws BeansException;1362408075;Close the bundle View factories on context shutdown.;public void destroy() throws BeansException {_		for (ConfigurableApplicationContext factory : this.bundleCache.values()) {_			factory.close()__		}_		this.localeCache.clear()__		this.bundleCache.clear()__	};close,the,bundle,view,factories,on,context,shutdown;public,void,destroy,throws,beans,exception,for,configurable,application,context,factory,this,bundle,cache,values,factory,close,this,locale,cache,clear,this,bundle,cache,clear
ResourceBundleViewResolver -> protected synchronized BeanFactory initFactory(Locale locale) throws BeansException;1328020251;Initialize the View {@link BeanFactory} from the <code>ResourceBundle</code>,_for the given {@link Locale locale}._<p>Synchronized because of access by parallel threads._@param locale the target <code>Locale</code>_@return the View factory for the given Locale_@throws BeansException in case of initialization errors;protected synchronized BeanFactory initFactory(Locale locale) throws BeansException {_		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.localeCache.get(locale)__			if (cachedFactory != null) {_				return cachedFactory__			}_		}__		_		List<ResourceBundle> bundles = new LinkedList<ResourceBundle>()__		for (String basename : this.basenames) {_			ResourceBundle bundle = getBundle(basename, locale)__			bundles.add(bundle)__		}__		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.bundleCache.get(bundles)__			if (cachedFactory != null) {_				this.localeCache.put(locale, cachedFactory)__				return cachedFactory__			}_		}__		_		GenericWebApplicationContext factory = new GenericWebApplicationContext()__		factory.setParent(getApplicationContext())__		factory.setServletContext(getServletContext())___		_		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(factory)__		reader.setDefaultParentBean(this.defaultParentView)__		for (ResourceBundle bundle : bundles) {_			reader.registerBeanDefinitions(bundle)__		}__		factory.refresh()___		_		if (isCache()) {_			this.localeCache.put(locale, factory)__			this.bundleCache.put(bundles, factory)__		}__		return factory__	};initialize,the,view,link,bean,factory,from,the,code,resource,bundle,code,for,the,given,link,locale,locale,p,synchronized,because,of,access,by,parallel,threads,param,locale,the,target,code,locale,code,return,the,view,factory,for,the,given,locale,throws,beans,exception,in,case,of,initialization,errors;protected,synchronized,bean,factory,init,factory,locale,locale,throws,beans,exception,if,is,cache,bean,factory,cached,factory,this,locale,cache,get,locale,if,cached,factory,null,return,cached,factory,list,resource,bundle,bundles,new,linked,list,resource,bundle,for,string,basename,this,basenames,resource,bundle,bundle,get,bundle,basename,locale,bundles,add,bundle,if,is,cache,bean,factory,cached,factory,this,bundle,cache,get,bundles,if,cached,factory,null,this,locale,cache,put,locale,cached,factory,return,cached,factory,generic,web,application,context,factory,new,generic,web,application,context,factory,set,parent,get,application,context,factory,set,servlet,context,get,servlet,context,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,factory,reader,set,default,parent,bean,this,default,parent,view,for,resource,bundle,bundle,bundles,reader,register,bean,definitions,bundle,factory,refresh,if,is,cache,this,locale,cache,put,locale,factory,this,bundle,cache,put,bundles,factory,return,factory
ResourceBundleViewResolver -> protected synchronized BeanFactory initFactory(Locale locale) throws BeansException;1356735495;Initialize the View {@link BeanFactory} from the {@code ResourceBundle},_for the given {@link Locale locale}._<p>Synchronized because of access by parallel threads._@param locale the target {@code Locale}_@return the View factory for the given Locale_@throws BeansException in case of initialization errors;protected synchronized BeanFactory initFactory(Locale locale) throws BeansException {_		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.localeCache.get(locale)__			if (cachedFactory != null) {_				return cachedFactory__			}_		}__		_		List<ResourceBundle> bundles = new LinkedList<ResourceBundle>()__		for (String basename : this.basenames) {_			ResourceBundle bundle = getBundle(basename, locale)__			bundles.add(bundle)__		}__		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.bundleCache.get(bundles)__			if (cachedFactory != null) {_				this.localeCache.put(locale, cachedFactory)__				return cachedFactory__			}_		}__		_		GenericWebApplicationContext factory = new GenericWebApplicationContext()__		factory.setParent(getApplicationContext())__		factory.setServletContext(getServletContext())___		_		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(factory)__		reader.setDefaultParentBean(this.defaultParentView)__		for (ResourceBundle bundle : bundles) {_			reader.registerBeanDefinitions(bundle)__		}__		factory.refresh()___		_		if (isCache()) {_			this.localeCache.put(locale, factory)__			this.bundleCache.put(bundles, factory)__		}__		return factory__	};initialize,the,view,link,bean,factory,from,the,code,resource,bundle,for,the,given,link,locale,locale,p,synchronized,because,of,access,by,parallel,threads,param,locale,the,target,code,locale,return,the,view,factory,for,the,given,locale,throws,beans,exception,in,case,of,initialization,errors;protected,synchronized,bean,factory,init,factory,locale,locale,throws,beans,exception,if,is,cache,bean,factory,cached,factory,this,locale,cache,get,locale,if,cached,factory,null,return,cached,factory,list,resource,bundle,bundles,new,linked,list,resource,bundle,for,string,basename,this,basenames,resource,bundle,bundle,get,bundle,basename,locale,bundles,add,bundle,if,is,cache,bean,factory,cached,factory,this,bundle,cache,get,bundles,if,cached,factory,null,this,locale,cache,put,locale,cached,factory,return,cached,factory,generic,web,application,context,factory,new,generic,web,application,context,factory,set,parent,get,application,context,factory,set,servlet,context,get,servlet,context,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,factory,reader,set,default,parent,bean,this,default,parent,view,for,resource,bundle,bundle,bundles,reader,register,bean,definitions,bundle,factory,refresh,if,is,cache,this,locale,cache,put,locale,factory,this,bundle,cache,put,bundles,factory,return,factory
ResourceBundleViewResolver -> protected synchronized BeanFactory initFactory(Locale locale) throws BeansException;1357119239;Initialize the View {@link BeanFactory} from the {@code ResourceBundle},_for the given {@link Locale locale}._<p>Synchronized because of access by parallel threads._@param locale the target {@code Locale}_@return the View factory for the given Locale_@throws BeansException in case of initialization errors;protected synchronized BeanFactory initFactory(Locale locale) throws BeansException {_		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.localeCache.get(locale)__			if (cachedFactory != null) {_				return cachedFactory__			}_		}__		_		List<ResourceBundle> bundles = new LinkedList<ResourceBundle>()__		for (String basename : this.basenames) {_			ResourceBundle bundle = getBundle(basename, locale)__			bundles.add(bundle)__		}__		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.bundleCache.get(bundles)__			if (cachedFactory != null) {_				this.localeCache.put(locale, cachedFactory)__				return cachedFactory__			}_		}__		_		GenericWebApplicationContext factory = new GenericWebApplicationContext()__		factory.setParent(getApplicationContext())__		factory.setServletContext(getServletContext())___		_		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(factory)__		reader.setDefaultParentBean(this.defaultParentView)__		for (ResourceBundle bundle : bundles) {_			reader.registerBeanDefinitions(bundle)__		}__		factory.refresh()___		_		if (isCache()) {_			this.localeCache.put(locale, factory)__			this.bundleCache.put(bundles, factory)__		}__		return factory__	};initialize,the,view,link,bean,factory,from,the,code,resource,bundle,for,the,given,link,locale,locale,p,synchronized,because,of,access,by,parallel,threads,param,locale,the,target,code,locale,return,the,view,factory,for,the,given,locale,throws,beans,exception,in,case,of,initialization,errors;protected,synchronized,bean,factory,init,factory,locale,locale,throws,beans,exception,if,is,cache,bean,factory,cached,factory,this,locale,cache,get,locale,if,cached,factory,null,return,cached,factory,list,resource,bundle,bundles,new,linked,list,resource,bundle,for,string,basename,this,basenames,resource,bundle,bundle,get,bundle,basename,locale,bundles,add,bundle,if,is,cache,bean,factory,cached,factory,this,bundle,cache,get,bundles,if,cached,factory,null,this,locale,cache,put,locale,cached,factory,return,cached,factory,generic,web,application,context,factory,new,generic,web,application,context,factory,set,parent,get,application,context,factory,set,servlet,context,get,servlet,context,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,factory,reader,set,default,parent,bean,this,default,parent,view,for,resource,bundle,bundle,bundles,reader,register,bean,definitions,bundle,factory,refresh,if,is,cache,this,locale,cache,put,locale,factory,this,bundle,cache,put,bundles,factory,return,factory
ResourceBundleViewResolver -> protected synchronized BeanFactory initFactory(Locale locale) throws BeansException;1362408075;Initialize the View {@link BeanFactory} from the {@code ResourceBundle},_for the given {@link Locale locale}._<p>Synchronized because of access by parallel threads._@param locale the target {@code Locale}_@return the View factory for the given Locale_@throws BeansException in case of initialization errors;protected synchronized BeanFactory initFactory(Locale locale) throws BeansException {_		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.localeCache.get(locale)__			if (cachedFactory != null) {_				return cachedFactory__			}_		}__		_		List<ResourceBundle> bundles = new LinkedList<ResourceBundle>()__		for (String basename : this.basenames) {_			ResourceBundle bundle = getBundle(basename, locale)__			bundles.add(bundle)__		}__		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.bundleCache.get(bundles)__			if (cachedFactory != null) {_				this.localeCache.put(locale, cachedFactory)__				return cachedFactory__			}_		}__		_		GenericWebApplicationContext factory = new GenericWebApplicationContext()__		factory.setParent(getApplicationContext())__		factory.setServletContext(getServletContext())___		_		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(factory)__		reader.setDefaultParentBean(this.defaultParentView)__		for (ResourceBundle bundle : bundles) {_			reader.registerBeanDefinitions(bundle)__		}__		factory.refresh()___		_		if (isCache()) {_			this.localeCache.put(locale, factory)__			this.bundleCache.put(bundles, factory)__		}__		return factory__	};initialize,the,view,link,bean,factory,from,the,code,resource,bundle,for,the,given,link,locale,locale,p,synchronized,because,of,access,by,parallel,threads,param,locale,the,target,code,locale,return,the,view,factory,for,the,given,locale,throws,beans,exception,in,case,of,initialization,errors;protected,synchronized,bean,factory,init,factory,locale,locale,throws,beans,exception,if,is,cache,bean,factory,cached,factory,this,locale,cache,get,locale,if,cached,factory,null,return,cached,factory,list,resource,bundle,bundles,new,linked,list,resource,bundle,for,string,basename,this,basenames,resource,bundle,bundle,get,bundle,basename,locale,bundles,add,bundle,if,is,cache,bean,factory,cached,factory,this,bundle,cache,get,bundles,if,cached,factory,null,this,locale,cache,put,locale,cached,factory,return,cached,factory,generic,web,application,context,factory,new,generic,web,application,context,factory,set,parent,get,application,context,factory,set,servlet,context,get,servlet,context,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,factory,reader,set,default,parent,bean,this,default,parent,view,for,resource,bundle,bundle,bundles,reader,register,bean,definitions,bundle,factory,refresh,if,is,cache,this,locale,cache,put,locale,factory,this,bundle,cache,put,bundles,factory,return,factory
ResourceBundleViewResolver -> protected synchronized BeanFactory initFactory(Locale locale) throws BeansException;1368482696;Initialize the View {@link BeanFactory} from the {@code ResourceBundle},_for the given {@link Locale locale}._<p>Synchronized because of access by parallel threads._@param locale the target {@code Locale}_@return the View factory for the given Locale_@throws BeansException in case of initialization errors;protected synchronized BeanFactory initFactory(Locale locale) throws BeansException {_		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.localeCache.get(locale)__			if (cachedFactory != null) {_				return cachedFactory__			}_		}__		_		List<ResourceBundle> bundles = new LinkedList<ResourceBundle>()__		for (String basename : this.basenames) {_			ResourceBundle bundle = getBundle(basename, locale)__			bundles.add(bundle)__		}__		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.bundleCache.get(bundles)__			if (cachedFactory != null) {_				this.localeCache.put(locale, cachedFactory)__				return cachedFactory__			}_		}__		_		GenericWebApplicationContext factory = new GenericWebApplicationContext()__		factory.setParent(getApplicationContext())__		factory.setServletContext(getServletContext())___		_		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(factory)__		reader.setDefaultParentBean(this.defaultParentView)__		for (ResourceBundle bundle : bundles) {_			reader.registerBeanDefinitions(bundle)__		}__		factory.refresh()___		_		if (isCache()) {_			this.localeCache.put(locale, factory)__			this.bundleCache.put(bundles, factory)__		}__		return factory__	};initialize,the,view,link,bean,factory,from,the,code,resource,bundle,for,the,given,link,locale,locale,p,synchronized,because,of,access,by,parallel,threads,param,locale,the,target,code,locale,return,the,view,factory,for,the,given,locale,throws,beans,exception,in,case,of,initialization,errors;protected,synchronized,bean,factory,init,factory,locale,locale,throws,beans,exception,if,is,cache,bean,factory,cached,factory,this,locale,cache,get,locale,if,cached,factory,null,return,cached,factory,list,resource,bundle,bundles,new,linked,list,resource,bundle,for,string,basename,this,basenames,resource,bundle,bundle,get,bundle,basename,locale,bundles,add,bundle,if,is,cache,bean,factory,cached,factory,this,bundle,cache,get,bundles,if,cached,factory,null,this,locale,cache,put,locale,cached,factory,return,cached,factory,generic,web,application,context,factory,new,generic,web,application,context,factory,set,parent,get,application,context,factory,set,servlet,context,get,servlet,context,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,factory,reader,set,default,parent,bean,this,default,parent,view,for,resource,bundle,bundle,bundles,reader,register,bean,definitions,bundle,factory,refresh,if,is,cache,this,locale,cache,put,locale,factory,this,bundle,cache,put,bundles,factory,return,factory
ResourceBundleViewResolver -> protected synchronized BeanFactory initFactory(Locale locale) throws BeansException;1407511029;Initialize the View {@link BeanFactory} from the {@code ResourceBundle},_for the given {@link Locale locale}._<p>Synchronized because of access by parallel threads._@param locale the target {@code Locale}_@return the View factory for the given Locale_@throws BeansException in case of initialization errors;protected synchronized BeanFactory initFactory(Locale locale) throws BeansException {_		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.localeCache.get(locale)__			if (cachedFactory != null) {_				return cachedFactory__			}_		}__		_		List<ResourceBundle> bundles = new LinkedList<ResourceBundle>()__		for (String basename : this.basenames) {_			ResourceBundle bundle = getBundle(basename, locale)__			bundles.add(bundle)__		}__		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.bundleCache.get(bundles)__			if (cachedFactory != null) {_				this.localeCache.put(locale, cachedFactory)__				return cachedFactory__			}_		}__		_		GenericWebApplicationContext factory = new GenericWebApplicationContext()__		factory.setParent(getApplicationContext())__		factory.setServletContext(getServletContext())___		_		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(factory)__		reader.setDefaultParentBean(this.defaultParentView)__		for (ResourceBundle bundle : bundles) {_			reader.registerBeanDefinitions(bundle)__		}__		factory.refresh()___		_		if (isCache()) {_			this.localeCache.put(locale, factory)__			this.bundleCache.put(bundles, factory)__		}__		return factory__	};initialize,the,view,link,bean,factory,from,the,code,resource,bundle,for,the,given,link,locale,locale,p,synchronized,because,of,access,by,parallel,threads,param,locale,the,target,code,locale,return,the,view,factory,for,the,given,locale,throws,beans,exception,in,case,of,initialization,errors;protected,synchronized,bean,factory,init,factory,locale,locale,throws,beans,exception,if,is,cache,bean,factory,cached,factory,this,locale,cache,get,locale,if,cached,factory,null,return,cached,factory,list,resource,bundle,bundles,new,linked,list,resource,bundle,for,string,basename,this,basenames,resource,bundle,bundle,get,bundle,basename,locale,bundles,add,bundle,if,is,cache,bean,factory,cached,factory,this,bundle,cache,get,bundles,if,cached,factory,null,this,locale,cache,put,locale,cached,factory,return,cached,factory,generic,web,application,context,factory,new,generic,web,application,context,factory,set,parent,get,application,context,factory,set,servlet,context,get,servlet,context,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,factory,reader,set,default,parent,bean,this,default,parent,view,for,resource,bundle,bundle,bundles,reader,register,bean,definitions,bundle,factory,refresh,if,is,cache,this,locale,cache,put,locale,factory,this,bundle,cache,put,bundles,factory,return,factory
ResourceBundleViewResolver -> protected synchronized BeanFactory initFactory(Locale locale) throws BeansException;1407935098;Initialize the View {@link BeanFactory} from the {@code ResourceBundle},_for the given {@link Locale locale}._<p>Synchronized because of access by parallel threads._@param locale the target {@code Locale}_@return the View factory for the given Locale_@throws BeansException in case of initialization errors;protected synchronized BeanFactory initFactory(Locale locale) throws BeansException {_		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.localeCache.get(locale)__			if (cachedFactory != null) {_				return cachedFactory__			}_		}__		_		List<ResourceBundle> bundles = new LinkedList<ResourceBundle>()__		for (String basename : this.basenames) {_			ResourceBundle bundle = getBundle(basename, locale)__			bundles.add(bundle)__		}__		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.bundleCache.get(bundles)__			if (cachedFactory != null) {_				this.localeCache.put(locale, cachedFactory)__				return cachedFactory__			}_		}__		_		GenericWebApplicationContext factory = new GenericWebApplicationContext()__		factory.setParent(getApplicationContext())__		factory.setServletContext(getServletContext())___		_		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(factory)__		reader.setDefaultParentBean(this.defaultParentView)__		for (ResourceBundle bundle : bundles) {_			reader.registerBeanDefinitions(bundle)__		}__		factory.refresh()___		_		if (isCache()) {_			this.localeCache.put(locale, factory)__			this.bundleCache.put(bundles, factory)__		}__		return factory__	};initialize,the,view,link,bean,factory,from,the,code,resource,bundle,for,the,given,link,locale,locale,p,synchronized,because,of,access,by,parallel,threads,param,locale,the,target,code,locale,return,the,view,factory,for,the,given,locale,throws,beans,exception,in,case,of,initialization,errors;protected,synchronized,bean,factory,init,factory,locale,locale,throws,beans,exception,if,is,cache,bean,factory,cached,factory,this,locale,cache,get,locale,if,cached,factory,null,return,cached,factory,list,resource,bundle,bundles,new,linked,list,resource,bundle,for,string,basename,this,basenames,resource,bundle,bundle,get,bundle,basename,locale,bundles,add,bundle,if,is,cache,bean,factory,cached,factory,this,bundle,cache,get,bundles,if,cached,factory,null,this,locale,cache,put,locale,cached,factory,return,cached,factory,generic,web,application,context,factory,new,generic,web,application,context,factory,set,parent,get,application,context,factory,set,servlet,context,get,servlet,context,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,factory,reader,set,default,parent,bean,this,default,parent,view,for,resource,bundle,bundle,bundles,reader,register,bean,definitions,bundle,factory,refresh,if,is,cache,this,locale,cache,put,locale,factory,this,bundle,cache,put,bundles,factory,return,factory
ResourceBundleViewResolver -> protected synchronized BeanFactory initFactory(Locale locale) throws BeansException;1467730834;Initialize the View {@link BeanFactory} from the {@code ResourceBundle},_for the given {@link Locale locale}._<p>Synchronized because of access by parallel threads._@param locale the target {@code Locale}_@return the View factory for the given Locale_@throws BeansException in case of initialization errors;protected synchronized BeanFactory initFactory(Locale locale) throws BeansException {_		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.localeCache.get(locale)__			if (cachedFactory != null) {_				return cachedFactory__			}_		}__		_		List<ResourceBundle> bundles = new LinkedList<>()__		for (String basename : this.basenames) {_			ResourceBundle bundle = getBundle(basename, locale)__			bundles.add(bundle)__		}__		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.bundleCache.get(bundles)__			if (cachedFactory != null) {_				this.localeCache.put(locale, cachedFactory)__				return cachedFactory__			}_		}__		_		GenericWebApplicationContext factory = new GenericWebApplicationContext()__		factory.setParent(getApplicationContext())__		factory.setServletContext(getServletContext())___		_		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(factory)__		reader.setDefaultParentBean(this.defaultParentView)__		for (ResourceBundle bundle : bundles) {_			reader.registerBeanDefinitions(bundle)__		}__		factory.refresh()___		_		if (isCache()) {_			this.localeCache.put(locale, factory)__			this.bundleCache.put(bundles, factory)__		}__		return factory__	};initialize,the,view,link,bean,factory,from,the,code,resource,bundle,for,the,given,link,locale,locale,p,synchronized,because,of,access,by,parallel,threads,param,locale,the,target,code,locale,return,the,view,factory,for,the,given,locale,throws,beans,exception,in,case,of,initialization,errors;protected,synchronized,bean,factory,init,factory,locale,locale,throws,beans,exception,if,is,cache,bean,factory,cached,factory,this,locale,cache,get,locale,if,cached,factory,null,return,cached,factory,list,resource,bundle,bundles,new,linked,list,for,string,basename,this,basenames,resource,bundle,bundle,get,bundle,basename,locale,bundles,add,bundle,if,is,cache,bean,factory,cached,factory,this,bundle,cache,get,bundles,if,cached,factory,null,this,locale,cache,put,locale,cached,factory,return,cached,factory,generic,web,application,context,factory,new,generic,web,application,context,factory,set,parent,get,application,context,factory,set,servlet,context,get,servlet,context,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,factory,reader,set,default,parent,bean,this,default,parent,view,for,resource,bundle,bundle,bundles,reader,register,bean,definitions,bundle,factory,refresh,if,is,cache,this,locale,cache,put,locale,factory,this,bundle,cache,put,bundles,factory,return,factory
ResourceBundleViewResolver -> protected synchronized BeanFactory initFactory(Locale locale) throws BeansException;1498780456;Initialize the View {@link BeanFactory} from the {@code ResourceBundle},_for the given {@link Locale locale}._<p>Synchronized because of access by parallel threads._@param locale the target {@code Locale}_@return the View factory for the given Locale_@throws BeansException in case of initialization errors;protected synchronized BeanFactory initFactory(Locale locale) throws BeansException {_		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.localeCache.get(locale)__			if (cachedFactory != null) {_				return cachedFactory__			}_		}__		_		List<ResourceBundle> bundles = new LinkedList<>()__		for (String basename : this.basenames) {_			ResourceBundle bundle = getBundle(basename, locale)__			bundles.add(bundle)__		}__		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.bundleCache.get(bundles)__			if (cachedFactory != null) {_				this.localeCache.put(locale, cachedFactory)__				return cachedFactory__			}_		}__		_		GenericWebApplicationContext factory = new GenericWebApplicationContext()__		factory.setParent(getApplicationContext())__		factory.setServletContext(getServletContext())___		_		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(factory)__		reader.setDefaultParentBean(this.defaultParentView)__		for (ResourceBundle bundle : bundles) {_			reader.registerBeanDefinitions(bundle)__		}__		factory.refresh()___		_		if (isCache()) {_			this.localeCache.put(locale, factory)__			this.bundleCache.put(bundles, factory)__		}__		return factory__	};initialize,the,view,link,bean,factory,from,the,code,resource,bundle,for,the,given,link,locale,locale,p,synchronized,because,of,access,by,parallel,threads,param,locale,the,target,code,locale,return,the,view,factory,for,the,given,locale,throws,beans,exception,in,case,of,initialization,errors;protected,synchronized,bean,factory,init,factory,locale,locale,throws,beans,exception,if,is,cache,bean,factory,cached,factory,this,locale,cache,get,locale,if,cached,factory,null,return,cached,factory,list,resource,bundle,bundles,new,linked,list,for,string,basename,this,basenames,resource,bundle,bundle,get,bundle,basename,locale,bundles,add,bundle,if,is,cache,bean,factory,cached,factory,this,bundle,cache,get,bundles,if,cached,factory,null,this,locale,cache,put,locale,cached,factory,return,cached,factory,generic,web,application,context,factory,new,generic,web,application,context,factory,set,parent,get,application,context,factory,set,servlet,context,get,servlet,context,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,factory,reader,set,default,parent,bean,this,default,parent,view,for,resource,bundle,bundle,bundles,reader,register,bean,definitions,bundle,factory,refresh,if,is,cache,this,locale,cache,put,locale,factory,this,bundle,cache,put,bundles,factory,return,factory
ResourceBundleViewResolver -> protected synchronized BeanFactory initFactory(Locale locale) throws BeansException;1520528267;Initialize the View {@link BeanFactory} from the {@code ResourceBundle},_for the given {@link Locale locale}._<p>Synchronized because of access by parallel threads._@param locale the target {@code Locale}_@return the View factory for the given Locale_@throws BeansException in case of initialization errors;protected synchronized BeanFactory initFactory(Locale locale) throws BeansException {_		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.localeCache.get(locale)__			if (cachedFactory != null) {_				return cachedFactory__			}_		}__		_		List<ResourceBundle> bundles = new LinkedList<>()__		for (String basename : this.basenames) {_			ResourceBundle bundle = getBundle(basename, locale)__			bundles.add(bundle)__		}__		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.bundleCache.get(bundles)__			if (cachedFactory != null) {_				this.localeCache.put(locale, cachedFactory)__				return cachedFactory__			}_		}__		_		GenericWebApplicationContext factory = new GenericWebApplicationContext()__		factory.setParent(getApplicationContext())__		factory.setServletContext(getServletContext())___		_		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(factory)__		reader.setDefaultParentBean(this.defaultParentView)__		for (ResourceBundle bundle : bundles) {_			reader.registerBeanDefinitions(bundle)__		}__		factory.refresh()___		_		if (isCache()) {_			this.localeCache.put(locale, factory)__			this.bundleCache.put(bundles, factory)__		}__		return factory__	};initialize,the,view,link,bean,factory,from,the,code,resource,bundle,for,the,given,link,locale,locale,p,synchronized,because,of,access,by,parallel,threads,param,locale,the,target,code,locale,return,the,view,factory,for,the,given,locale,throws,beans,exception,in,case,of,initialization,errors;protected,synchronized,bean,factory,init,factory,locale,locale,throws,beans,exception,if,is,cache,bean,factory,cached,factory,this,locale,cache,get,locale,if,cached,factory,null,return,cached,factory,list,resource,bundle,bundles,new,linked,list,for,string,basename,this,basenames,resource,bundle,bundle,get,bundle,basename,locale,bundles,add,bundle,if,is,cache,bean,factory,cached,factory,this,bundle,cache,get,bundles,if,cached,factory,null,this,locale,cache,put,locale,cached,factory,return,cached,factory,generic,web,application,context,factory,new,generic,web,application,context,factory,set,parent,get,application,context,factory,set,servlet,context,get,servlet,context,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,factory,reader,set,default,parent,bean,this,default,parent,view,for,resource,bundle,bundle,bundles,reader,register,bean,definitions,bundle,factory,refresh,if,is,cache,this,locale,cache,put,locale,factory,this,bundle,cache,put,bundles,factory,return,factory
ResourceBundleViewResolver -> protected synchronized BeanFactory initFactory(Locale locale) throws BeansException;1522448444;Initialize the View {@link BeanFactory} from the {@code ResourceBundle},_for the given {@link Locale locale}._<p>Synchronized because of access by parallel threads._@param locale the target {@code Locale}_@return the View factory for the given Locale_@throws BeansException in case of initialization errors;protected synchronized BeanFactory initFactory(Locale locale) throws BeansException {_		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.localeCache.get(locale)__			if (cachedFactory != null) {_				return cachedFactory__			}_		}__		_		List<ResourceBundle> bundles = new LinkedList<>()__		for (String basename : this.basenames) {_			ResourceBundle bundle = getBundle(basename, locale)__			bundles.add(bundle)__		}__		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.bundleCache.get(bundles)__			if (cachedFactory != null) {_				this.localeCache.put(locale, cachedFactory)__				return cachedFactory__			}_		}__		_		GenericWebApplicationContext factory = new GenericWebApplicationContext()__		factory.setParent(getApplicationContext())__		factory.setServletContext(getServletContext())___		_		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(factory)__		reader.setDefaultParentBean(this.defaultParentView)__		for (ResourceBundle bundle : bundles) {_			reader.registerBeanDefinitions(bundle)__		}__		factory.refresh()___		_		if (isCache()) {_			this.localeCache.put(locale, factory)__			this.bundleCache.put(bundles, factory)__		}__		return factory__	};initialize,the,view,link,bean,factory,from,the,code,resource,bundle,for,the,given,link,locale,locale,p,synchronized,because,of,access,by,parallel,threads,param,locale,the,target,code,locale,return,the,view,factory,for,the,given,locale,throws,beans,exception,in,case,of,initialization,errors;protected,synchronized,bean,factory,init,factory,locale,locale,throws,beans,exception,if,is,cache,bean,factory,cached,factory,this,locale,cache,get,locale,if,cached,factory,null,return,cached,factory,list,resource,bundle,bundles,new,linked,list,for,string,basename,this,basenames,resource,bundle,bundle,get,bundle,basename,locale,bundles,add,bundle,if,is,cache,bean,factory,cached,factory,this,bundle,cache,get,bundles,if,cached,factory,null,this,locale,cache,put,locale,cached,factory,return,cached,factory,generic,web,application,context,factory,new,generic,web,application,context,factory,set,parent,get,application,context,factory,set,servlet,context,get,servlet,context,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,factory,reader,set,default,parent,bean,this,default,parent,view,for,resource,bundle,bundle,bundles,reader,register,bean,definitions,bundle,factory,refresh,if,is,cache,this,locale,cache,put,locale,factory,this,bundle,cache,put,bundles,factory,return,factory
ResourceBundleViewResolver -> protected synchronized BeanFactory initFactory(Locale locale) throws BeansException;1522511361;Initialize the View {@link BeanFactory} from the {@code ResourceBundle},_for the given {@link Locale locale}._<p>Synchronized because of access by parallel threads._@param locale the target {@code Locale}_@return the View factory for the given Locale_@throws BeansException in case of initialization errors;protected synchronized BeanFactory initFactory(Locale locale) throws BeansException {_		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.localeCache.get(locale)__			if (cachedFactory != null) {_				return cachedFactory__			}_		}__		_		List<ResourceBundle> bundles = new LinkedList<>()__		for (String basename : this.basenames) {_			ResourceBundle bundle = getBundle(basename, locale)__			bundles.add(bundle)__		}__		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.bundleCache.get(bundles)__			if (cachedFactory != null) {_				this.localeCache.put(locale, cachedFactory)__				return cachedFactory__			}_		}__		_		GenericWebApplicationContext factory = new GenericWebApplicationContext()__		factory.setParent(getApplicationContext())__		factory.setServletContext(getServletContext())___		_		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(factory)__		reader.setDefaultParentBean(this.defaultParentView)__		for (ResourceBundle bundle : bundles) {_			reader.registerBeanDefinitions(bundle)__		}__		factory.refresh()___		_		if (isCache()) {_			this.localeCache.put(locale, factory)__			this.bundleCache.put(bundles, factory)__		}__		return factory__	};initialize,the,view,link,bean,factory,from,the,code,resource,bundle,for,the,given,link,locale,locale,p,synchronized,because,of,access,by,parallel,threads,param,locale,the,target,code,locale,return,the,view,factory,for,the,given,locale,throws,beans,exception,in,case,of,initialization,errors;protected,synchronized,bean,factory,init,factory,locale,locale,throws,beans,exception,if,is,cache,bean,factory,cached,factory,this,locale,cache,get,locale,if,cached,factory,null,return,cached,factory,list,resource,bundle,bundles,new,linked,list,for,string,basename,this,basenames,resource,bundle,bundle,get,bundle,basename,locale,bundles,add,bundle,if,is,cache,bean,factory,cached,factory,this,bundle,cache,get,bundles,if,cached,factory,null,this,locale,cache,put,locale,cached,factory,return,cached,factory,generic,web,application,context,factory,new,generic,web,application,context,factory,set,parent,get,application,context,factory,set,servlet,context,get,servlet,context,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,factory,reader,set,default,parent,bean,this,default,parent,view,for,resource,bundle,bundle,bundles,reader,register,bean,definitions,bundle,factory,refresh,if,is,cache,this,locale,cache,put,locale,factory,this,bundle,cache,put,bundles,factory,return,factory
ResourceBundleViewResolver -> protected synchronized BeanFactory initFactory(Locale locale) throws BeansException;1522530428;Initialize the View {@link BeanFactory} from the {@code ResourceBundle},_for the given {@link Locale locale}._<p>Synchronized because of access by parallel threads._@param locale the target {@code Locale}_@return the View factory for the given Locale_@throws BeansException in case of initialization errors;protected synchronized BeanFactory initFactory(Locale locale) throws BeansException {_		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.localeCache.get(locale)__			if (cachedFactory != null) {_				return cachedFactory__			}_		}__		_		List<ResourceBundle> bundles = new LinkedList<>()__		for (String basename : this.basenames) {_			ResourceBundle bundle = getBundle(basename, locale)__			bundles.add(bundle)__		}__		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.bundleCache.get(bundles)__			if (cachedFactory != null) {_				this.localeCache.put(locale, cachedFactory)__				return cachedFactory__			}_		}__		_		GenericWebApplicationContext factory = new GenericWebApplicationContext()__		factory.setParent(getApplicationContext())__		factory.setServletContext(getServletContext())___		_		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(factory)__		reader.setDefaultParentBean(this.defaultParentView)__		for (ResourceBundle bundle : bundles) {_			reader.registerBeanDefinitions(bundle)__		}__		factory.refresh()___		_		if (isCache()) {_			this.localeCache.put(locale, factory)__			this.bundleCache.put(bundles, factory)__		}__		return factory__	};initialize,the,view,link,bean,factory,from,the,code,resource,bundle,for,the,given,link,locale,locale,p,synchronized,because,of,access,by,parallel,threads,param,locale,the,target,code,locale,return,the,view,factory,for,the,given,locale,throws,beans,exception,in,case,of,initialization,errors;protected,synchronized,bean,factory,init,factory,locale,locale,throws,beans,exception,if,is,cache,bean,factory,cached,factory,this,locale,cache,get,locale,if,cached,factory,null,return,cached,factory,list,resource,bundle,bundles,new,linked,list,for,string,basename,this,basenames,resource,bundle,bundle,get,bundle,basename,locale,bundles,add,bundle,if,is,cache,bean,factory,cached,factory,this,bundle,cache,get,bundles,if,cached,factory,null,this,locale,cache,put,locale,cached,factory,return,cached,factory,generic,web,application,context,factory,new,generic,web,application,context,factory,set,parent,get,application,context,factory,set,servlet,context,get,servlet,context,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,factory,reader,set,default,parent,bean,this,default,parent,view,for,resource,bundle,bundle,bundles,reader,register,bean,definitions,bundle,factory,refresh,if,is,cache,this,locale,cache,put,locale,factory,this,bundle,cache,put,bundles,factory,return,factory
ResourceBundleViewResolver -> protected synchronized BeanFactory initFactory(Locale locale) throws BeansException;1530174524;Initialize the View {@link BeanFactory} from the {@code ResourceBundle},_for the given {@link Locale locale}._<p>Synchronized because of access by parallel threads._@param locale the target {@code Locale}_@return the View factory for the given Locale_@throws BeansException in case of initialization errors;protected synchronized BeanFactory initFactory(Locale locale) throws BeansException {_		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.localeCache.get(locale)__			if (cachedFactory != null) {_				return cachedFactory__			}_		}__		_		List<ResourceBundle> bundles = new LinkedList<>()__		for (String basename : this.basenames) {_			ResourceBundle bundle = getBundle(basename, locale)__			bundles.add(bundle)__		}__		_		_		if (isCache()) {_			BeanFactory cachedFactory = this.bundleCache.get(bundles)__			if (cachedFactory != null) {_				this.localeCache.put(locale, cachedFactory)__				return cachedFactory__			}_		}__		_		GenericWebApplicationContext factory = new GenericWebApplicationContext()__		factory.setParent(getApplicationContext())__		factory.setServletContext(getServletContext())___		_		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(factory)__		reader.setDefaultParentBean(this.defaultParentView)__		for (ResourceBundle bundle : bundles) {_			reader.registerBeanDefinitions(bundle)__		}__		factory.refresh()___		_		if (isCache()) {_			this.localeCache.put(locale, factory)__			this.bundleCache.put(bundles, factory)__		}__		return factory__	};initialize,the,view,link,bean,factory,from,the,code,resource,bundle,for,the,given,link,locale,locale,p,synchronized,because,of,access,by,parallel,threads,param,locale,the,target,code,locale,return,the,view,factory,for,the,given,locale,throws,beans,exception,in,case,of,initialization,errors;protected,synchronized,bean,factory,init,factory,locale,locale,throws,beans,exception,if,is,cache,bean,factory,cached,factory,this,locale,cache,get,locale,if,cached,factory,null,return,cached,factory,list,resource,bundle,bundles,new,linked,list,for,string,basename,this,basenames,resource,bundle,bundle,get,bundle,basename,locale,bundles,add,bundle,if,is,cache,bean,factory,cached,factory,this,bundle,cache,get,bundles,if,cached,factory,null,this,locale,cache,put,locale,cached,factory,return,cached,factory,generic,web,application,context,factory,new,generic,web,application,context,factory,set,parent,get,application,context,factory,set,servlet,context,get,servlet,context,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,factory,reader,set,default,parent,bean,this,default,parent,view,for,resource,bundle,bundle,bundles,reader,register,bean,definitions,bundle,factory,refresh,if,is,cache,this,locale,cache,put,locale,factory,this,bundle,cache,put,bundles,factory,return,factory
ResourceBundleViewResolver -> @Override 	public void destroy() throws BeansException;1356735495;Close the bundle View factories on context shutdown.;@Override_	public void destroy() throws BeansException {_		for (ConfigurableApplicationContext factory : this.bundleCache.values()) {_			factory.close()__		}_		this.localeCache.clear()__		this.bundleCache.clear()__	};close,the,bundle,view,factories,on,context,shutdown;override,public,void,destroy,throws,beans,exception,for,configurable,application,context,factory,this,bundle,cache,values,factory,close,this,locale,cache,clear,this,bundle,cache,clear
ResourceBundleViewResolver -> @Override 	public void destroy() throws BeansException;1368482696;Close the bundle View factories on context shutdown.;@Override_	public void destroy() throws BeansException {_		for (ConfigurableApplicationContext factory : this.bundleCache.values()) {_			factory.close()__		}_		this.localeCache.clear()__		this.bundleCache.clear()__	};close,the,bundle,view,factories,on,context,shutdown;override,public,void,destroy,throws,beans,exception,for,configurable,application,context,factory,this,bundle,cache,values,factory,close,this,locale,cache,clear,this,bundle,cache,clear
ResourceBundleViewResolver -> @Override 	public void destroy() throws BeansException;1407511029;Close the bundle View factories on context shutdown.;@Override_	public void destroy() throws BeansException {_		for (ConfigurableApplicationContext factory : this.bundleCache.values()) {_			factory.close()__		}_		this.localeCache.clear()__		this.bundleCache.clear()__	};close,the,bundle,view,factories,on,context,shutdown;override,public,void,destroy,throws,beans,exception,for,configurable,application,context,factory,this,bundle,cache,values,factory,close,this,locale,cache,clear,this,bundle,cache,clear
ResourceBundleViewResolver -> @Override 	public void destroy() throws BeansException;1407935098;Close the bundle View factories on context shutdown.;@Override_	public void destroy() throws BeansException {_		for (ConfigurableApplicationContext factory : this.bundleCache.values()) {_			factory.close()__		}_		this.localeCache.clear()__		this.bundleCache.clear()__	};close,the,bundle,view,factories,on,context,shutdown;override,public,void,destroy,throws,beans,exception,for,configurable,application,context,factory,this,bundle,cache,values,factory,close,this,locale,cache,clear,this,bundle,cache,clear
ResourceBundleViewResolver -> @Override 	public void destroy() throws BeansException;1467730834;Close the bundle View factories on context shutdown.;@Override_	public void destroy() throws BeansException {_		for (ConfigurableApplicationContext factory : this.bundleCache.values()) {_			factory.close()__		}_		this.localeCache.clear()__		this.bundleCache.clear()__	};close,the,bundle,view,factories,on,context,shutdown;override,public,void,destroy,throws,beans,exception,for,configurable,application,context,factory,this,bundle,cache,values,factory,close,this,locale,cache,clear,this,bundle,cache,clear
ResourceBundleViewResolver -> @Override 	public void destroy() throws BeansException;1498780456;Close the bundle View factories on context shutdown.;@Override_	public void destroy() throws BeansException {_		for (ConfigurableApplicationContext factory : this.bundleCache.values()) {_			factory.close()__		}_		this.localeCache.clear()__		this.bundleCache.clear()__	};close,the,bundle,view,factories,on,context,shutdown;override,public,void,destroy,throws,beans,exception,for,configurable,application,context,factory,this,bundle,cache,values,factory,close,this,locale,cache,clear,this,bundle,cache,clear
ResourceBundleViewResolver -> @Override 	public void destroy() throws BeansException;1520528267;Close the bundle View factories on context shutdown.;@Override_	public void destroy() throws BeansException {_		for (ConfigurableApplicationContext factory : this.bundleCache.values()) {_			factory.close()__		}_		this.localeCache.clear()__		this.bundleCache.clear()__	};close,the,bundle,view,factories,on,context,shutdown;override,public,void,destroy,throws,beans,exception,for,configurable,application,context,factory,this,bundle,cache,values,factory,close,this,locale,cache,clear,this,bundle,cache,clear
ResourceBundleViewResolver -> @Override 	public void destroy() throws BeansException;1522448444;Close the bundle View factories on context shutdown.;@Override_	public void destroy() throws BeansException {_		for (ConfigurableApplicationContext factory : this.bundleCache.values()) {_			factory.close()__		}_		this.localeCache.clear()__		this.bundleCache.clear()__	};close,the,bundle,view,factories,on,context,shutdown;override,public,void,destroy,throws,beans,exception,for,configurable,application,context,factory,this,bundle,cache,values,factory,close,this,locale,cache,clear,this,bundle,cache,clear
ResourceBundleViewResolver -> @Override 	public void destroy() throws BeansException;1522511361;Close the bundle View factories on context shutdown.;@Override_	public void destroy() throws BeansException {_		for (ConfigurableApplicationContext factory : this.bundleCache.values()) {_			factory.close()__		}_		this.localeCache.clear()__		this.bundleCache.clear()__	};close,the,bundle,view,factories,on,context,shutdown;override,public,void,destroy,throws,beans,exception,for,configurable,application,context,factory,this,bundle,cache,values,factory,close,this,locale,cache,clear,this,bundle,cache,clear
ResourceBundleViewResolver -> @Override 	public void destroy() throws BeansException;1522530428;Close the bundle View factories on context shutdown.;@Override_	public void destroy() throws BeansException {_		for (ConfigurableApplicationContext factory : this.bundleCache.values()) {_			factory.close()__		}_		this.localeCache.clear()__		this.bundleCache.clear()__	};close,the,bundle,view,factories,on,context,shutdown;override,public,void,destroy,throws,beans,exception,for,configurable,application,context,factory,this,bundle,cache,values,factory,close,this,locale,cache,clear,this,bundle,cache,clear
ResourceBundleViewResolver -> @Override 	public void destroy() throws BeansException;1530174524;Close the bundle View factories on context shutdown.;@Override_	public void destroy() throws BeansException {_		for (ConfigurableApplicationContext factory : this.bundleCache.values()) {_			factory.close()__		}_		this.localeCache.clear()__		this.bundleCache.clear()__	};close,the,bundle,view,factories,on,context,shutdown;override,public,void,destroy,throws,beans,exception,for,configurable,application,context,factory,this,bundle,cache,values,factory,close,this,locale,cache,clear,this,bundle,cache,clear
ResourceBundleViewResolver -> public void afterPropertiesSet() throws BeansException;1328020251;Eagerly initialize Locales if necessary._@see #setLocalesToInitialize;public void afterPropertiesSet() throws BeansException {_		if (this.localesToInitialize != null) {_			for (Locale locale : this.localesToInitialize) {_				initFactory(locale)__			}_		}_	};eagerly,initialize,locales,if,necessary,see,set,locales,to,initialize;public,void,after,properties,set,throws,beans,exception,if,this,locales,to,initialize,null,for,locale,locale,this,locales,to,initialize,init,factory,locale
ResourceBundleViewResolver -> public void afterPropertiesSet() throws BeansException;1357119239;Eagerly initialize Locales if necessary._@see #setLocalesToInitialize;public void afterPropertiesSet() throws BeansException {_		if (this.localesToInitialize != null) {_			for (Locale locale : this.localesToInitialize) {_				initFactory(locale)__			}_		}_	};eagerly,initialize,locales,if,necessary,see,set,locales,to,initialize;public,void,after,properties,set,throws,beans,exception,if,this,locales,to,initialize,null,for,locale,locale,this,locales,to,initialize,init,factory,locale
ResourceBundleViewResolver -> public void afterPropertiesSet() throws BeansException;1362408075;Eagerly initialize Locales if necessary._@see #setLocalesToInitialize;public void afterPropertiesSet() throws BeansException {_		if (this.localesToInitialize != null) {_			for (Locale locale : this.localesToInitialize) {_				initFactory(locale)__			}_		}_	};eagerly,initialize,locales,if,necessary,see,set,locales,to,initialize;public,void,after,properties,set,throws,beans,exception,if,this,locales,to,initialize,null,for,locale,locale,this,locales,to,initialize,init,factory,locale
ResourceBundleViewResolver -> public void setLocalesToInitialize(Locale... localesToInitialize);1407935098;Specify Locales to initialize eagerly, rather than lazily when actually accessed._<p>Allows for pre-initialization of common Locales, eagerly checking_the view configuration for those Locales.;public void setLocalesToInitialize(Locale... localesToInitialize) {_		this.localesToInitialize = localesToInitialize__	};specify,locales,to,initialize,eagerly,rather,than,lazily,when,actually,accessed,p,allows,for,pre,initialization,of,common,locales,eagerly,checking,the,view,configuration,for,those,locales;public,void,set,locales,to,initialize,locale,locales,to,initialize,this,locales,to,initialize,locales,to,initialize
ResourceBundleViewResolver -> public void setLocalesToInitialize(Locale... localesToInitialize);1467730834;Specify Locales to initialize eagerly, rather than lazily when actually accessed._<p>Allows for pre-initialization of common Locales, eagerly checking_the view configuration for those Locales.;public void setLocalesToInitialize(Locale... localesToInitialize) {_		this.localesToInitialize = localesToInitialize__	};specify,locales,to,initialize,eagerly,rather,than,lazily,when,actually,accessed,p,allows,for,pre,initialization,of,common,locales,eagerly,checking,the,view,configuration,for,those,locales;public,void,set,locales,to,initialize,locale,locales,to,initialize,this,locales,to,initialize,locales,to,initialize
ResourceBundleViewResolver -> public void setLocalesToInitialize(Locale... localesToInitialize);1498780456;Specify Locales to initialize eagerly, rather than lazily when actually accessed._<p>Allows for pre-initialization of common Locales, eagerly checking_the view configuration for those Locales.;public void setLocalesToInitialize(Locale... localesToInitialize) {_		this.localesToInitialize = localesToInitialize__	};specify,locales,to,initialize,eagerly,rather,than,lazily,when,actually,accessed,p,allows,for,pre,initialization,of,common,locales,eagerly,checking,the,view,configuration,for,those,locales;public,void,set,locales,to,initialize,locale,locales,to,initialize,this,locales,to,initialize,locales,to,initialize
ResourceBundleViewResolver -> public void setLocalesToInitialize(Locale... localesToInitialize);1520528267;Specify Locales to initialize eagerly, rather than lazily when actually accessed._<p>Allows for pre-initialization of common Locales, eagerly checking_the view configuration for those Locales.;public void setLocalesToInitialize(Locale... localesToInitialize) {_		this.localesToInitialize = localesToInitialize__	};specify,locales,to,initialize,eagerly,rather,than,lazily,when,actually,accessed,p,allows,for,pre,initialization,of,common,locales,eagerly,checking,the,view,configuration,for,those,locales;public,void,set,locales,to,initialize,locale,locales,to,initialize,this,locales,to,initialize,locales,to,initialize
ResourceBundleViewResolver -> public void setLocalesToInitialize(Locale... localesToInitialize);1522448444;Specify Locales to initialize eagerly, rather than lazily when actually accessed._<p>Allows for pre-initialization of common Locales, eagerly checking_the view configuration for those Locales.;public void setLocalesToInitialize(Locale... localesToInitialize) {_		this.localesToInitialize = localesToInitialize__	};specify,locales,to,initialize,eagerly,rather,than,lazily,when,actually,accessed,p,allows,for,pre,initialization,of,common,locales,eagerly,checking,the,view,configuration,for,those,locales;public,void,set,locales,to,initialize,locale,locales,to,initialize,this,locales,to,initialize,locales,to,initialize
ResourceBundleViewResolver -> public void setLocalesToInitialize(Locale... localesToInitialize);1522511361;Specify Locales to initialize eagerly, rather than lazily when actually accessed._<p>Allows for pre-initialization of common Locales, eagerly checking_the view configuration for those Locales.;public void setLocalesToInitialize(Locale... localesToInitialize) {_		this.localesToInitialize = localesToInitialize__	};specify,locales,to,initialize,eagerly,rather,than,lazily,when,actually,accessed,p,allows,for,pre,initialization,of,common,locales,eagerly,checking,the,view,configuration,for,those,locales;public,void,set,locales,to,initialize,locale,locales,to,initialize,this,locales,to,initialize,locales,to,initialize
ResourceBundleViewResolver -> public void setLocalesToInitialize(Locale... localesToInitialize);1522530428;Specify Locales to initialize eagerly, rather than lazily when actually accessed._<p>Allows for pre-initialization of common Locales, eagerly checking_the view configuration for those Locales.;public void setLocalesToInitialize(Locale... localesToInitialize) {_		this.localesToInitialize = localesToInitialize__	};specify,locales,to,initialize,eagerly,rather,than,lazily,when,actually,accessed,p,allows,for,pre,initialization,of,common,locales,eagerly,checking,the,view,configuration,for,those,locales;public,void,set,locales,to,initialize,locale,locales,to,initialize,this,locales,to,initialize,locales,to,initialize
ResourceBundleViewResolver -> public void setLocalesToInitialize(Locale... localesToInitialize);1530174524;Specify Locales to initialize eagerly, rather than lazily when actually accessed._<p>Allows for pre-initialization of common Locales, eagerly checking_the view configuration for those Locales.;public void setLocalesToInitialize(Locale... localesToInitialize) {_		this.localesToInitialize = localesToInitialize__	};specify,locales,to,initialize,eagerly,rather,than,lazily,when,actually,accessed,p,allows,for,pre,initialization,of,common,locales,eagerly,checking,the,view,configuration,for,those,locales;public,void,set,locales,to,initialize,locale,locales,to,initialize,this,locales,to,initialize,locales,to,initialize
ResourceBundleViewResolver -> public void setLocalesToInitialize(Locale[] localesToInitialize);1328020251;Specify Locales to initialize eagerly, rather than lazily when actually accessed._<p>Allows for pre-initialization of common Locales, eagerly checking_the view configuration for those Locales.;public void setLocalesToInitialize(Locale[] localesToInitialize) {_		this.localesToInitialize = localesToInitialize__	};specify,locales,to,initialize,eagerly,rather,than,lazily,when,actually,accessed,p,allows,for,pre,initialization,of,common,locales,eagerly,checking,the,view,configuration,for,those,locales;public,void,set,locales,to,initialize,locale,locales,to,initialize,this,locales,to,initialize,locales,to,initialize
ResourceBundleViewResolver -> public void setLocalesToInitialize(Locale[] localesToInitialize);1356735495;Specify Locales to initialize eagerly, rather than lazily when actually accessed._<p>Allows for pre-initialization of common Locales, eagerly checking_the view configuration for those Locales.;public void setLocalesToInitialize(Locale[] localesToInitialize) {_		this.localesToInitialize = localesToInitialize__	};specify,locales,to,initialize,eagerly,rather,than,lazily,when,actually,accessed,p,allows,for,pre,initialization,of,common,locales,eagerly,checking,the,view,configuration,for,those,locales;public,void,set,locales,to,initialize,locale,locales,to,initialize,this,locales,to,initialize,locales,to,initialize
ResourceBundleViewResolver -> public void setLocalesToInitialize(Locale[] localesToInitialize);1357119239;Specify Locales to initialize eagerly, rather than lazily when actually accessed._<p>Allows for pre-initialization of common Locales, eagerly checking_the view configuration for those Locales.;public void setLocalesToInitialize(Locale[] localesToInitialize) {_		this.localesToInitialize = localesToInitialize__	};specify,locales,to,initialize,eagerly,rather,than,lazily,when,actually,accessed,p,allows,for,pre,initialization,of,common,locales,eagerly,checking,the,view,configuration,for,those,locales;public,void,set,locales,to,initialize,locale,locales,to,initialize,this,locales,to,initialize,locales,to,initialize
ResourceBundleViewResolver -> public void setLocalesToInitialize(Locale[] localesToInitialize);1362408075;Specify Locales to initialize eagerly, rather than lazily when actually accessed._<p>Allows for pre-initialization of common Locales, eagerly checking_the view configuration for those Locales.;public void setLocalesToInitialize(Locale[] localesToInitialize) {_		this.localesToInitialize = localesToInitialize__	};specify,locales,to,initialize,eagerly,rather,than,lazily,when,actually,accessed,p,allows,for,pre,initialization,of,common,locales,eagerly,checking,the,view,configuration,for,those,locales;public,void,set,locales,to,initialize,locale,locales,to,initialize,this,locales,to,initialize,locales,to,initialize
ResourceBundleViewResolver -> public void setLocalesToInitialize(Locale[] localesToInitialize);1368482696;Specify Locales to initialize eagerly, rather than lazily when actually accessed._<p>Allows for pre-initialization of common Locales, eagerly checking_the view configuration for those Locales.;public void setLocalesToInitialize(Locale[] localesToInitialize) {_		this.localesToInitialize = localesToInitialize__	};specify,locales,to,initialize,eagerly,rather,than,lazily,when,actually,accessed,p,allows,for,pre,initialization,of,common,locales,eagerly,checking,the,view,configuration,for,those,locales;public,void,set,locales,to,initialize,locale,locales,to,initialize,this,locales,to,initialize,locales,to,initialize
ResourceBundleViewResolver -> public void setLocalesToInitialize(Locale[] localesToInitialize);1407511029;Specify Locales to initialize eagerly, rather than lazily when actually accessed._<p>Allows for pre-initialization of common Locales, eagerly checking_the view configuration for those Locales.;public void setLocalesToInitialize(Locale[] localesToInitialize) {_		this.localesToInitialize = localesToInitialize__	};specify,locales,to,initialize,eagerly,rather,than,lazily,when,actually,accessed,p,allows,for,pre,initialization,of,common,locales,eagerly,checking,the,view,configuration,for,those,locales;public,void,set,locales,to,initialize,locale,locales,to,initialize,this,locales,to,initialize,locales,to,initialize
ResourceBundleViewResolver -> public void setOrder(int order);1522448444;Specify the order value for this ViewResolver bean._<p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered._@see org.springframework.core.Ordered#getOrder();public void setOrder(int order) {_		this.order = order__	};specify,the,order,value,for,this,view,resolver,bean,p,the,default,value,is,code,ordered,meaning,non,ordered,see,org,springframework,core,ordered,get,order;public,void,set,order,int,order,this,order,order
ResourceBundleViewResolver -> public void setOrder(int order);1522511361;Specify the order value for this ViewResolver bean._<p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered._@see org.springframework.core.Ordered#getOrder();public void setOrder(int order) {_		this.order = order__	};specify,the,order,value,for,this,view,resolver,bean,p,the,default,value,is,code,ordered,meaning,non,ordered,see,org,springframework,core,ordered,get,order;public,void,set,order,int,order,this,order,order
ResourceBundleViewResolver -> public void setOrder(int order);1522530428;Specify the order value for this ViewResolver bean._<p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered._@see org.springframework.core.Ordered#getOrder();public void setOrder(int order) {_		this.order = order__	};specify,the,order,value,for,this,view,resolver,bean,p,the,default,value,is,code,ordered,meaning,non,ordered,see,org,springframework,core,ordered,get,order;public,void,set,order,int,order,this,order,order
ResourceBundleViewResolver -> public void setOrder(int order);1530174524;Specify the order value for this ViewResolver bean._<p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered._@see org.springframework.core.Ordered#getOrder();public void setOrder(int order) {_		this.order = order__	};specify,the,order,value,for,this,view,resolver,bean,p,the,default,value,is,code,ordered,meaning,non,ordered,see,org,springframework,core,ordered,get,order;public,void,set,order,int,order,this,order,order
ResourceBundleViewResolver -> public void setBundleClassLoader(ClassLoader classLoader);1328020251;Set the {@link ClassLoader} to load resource bundles with._Default is the thread context <code>ClassLoader</code>.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,link,class,loader,to,load,resource,bundles,with,default,is,the,thread,context,code,class,loader,code;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleViewResolver -> public void setBundleClassLoader(ClassLoader classLoader);1356735495;Set the {@link ClassLoader} to load resource bundles with._Default is the thread context {@code ClassLoader}.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,link,class,loader,to,load,resource,bundles,with,default,is,the,thread,context,code,class,loader;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleViewResolver -> public void setBundleClassLoader(ClassLoader classLoader);1357119239;Set the {@link ClassLoader} to load resource bundles with._Default is the thread context {@code ClassLoader}.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,link,class,loader,to,load,resource,bundles,with,default,is,the,thread,context,code,class,loader;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleViewResolver -> public void setBundleClassLoader(ClassLoader classLoader);1362408075;Set the {@link ClassLoader} to load resource bundles with._Default is the thread context {@code ClassLoader}.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,link,class,loader,to,load,resource,bundles,with,default,is,the,thread,context,code,class,loader;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleViewResolver -> public void setBundleClassLoader(ClassLoader classLoader);1368482696;Set the {@link ClassLoader} to load resource bundles with._Default is the thread context {@code ClassLoader}.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,link,class,loader,to,load,resource,bundles,with,default,is,the,thread,context,code,class,loader;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleViewResolver -> public void setBundleClassLoader(ClassLoader classLoader);1407511029;Set the {@link ClassLoader} to load resource bundles with._Default is the thread context {@code ClassLoader}.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,link,class,loader,to,load,resource,bundles,with,default,is,the,thread,context,code,class,loader;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleViewResolver -> public void setBundleClassLoader(ClassLoader classLoader);1407935098;Set the {@link ClassLoader} to load resource bundles with._Default is the thread context {@code ClassLoader}.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,link,class,loader,to,load,resource,bundles,with,default,is,the,thread,context,code,class,loader;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleViewResolver -> public void setBundleClassLoader(ClassLoader classLoader);1467730834;Set the {@link ClassLoader} to load resource bundles with._Default is the thread context {@code ClassLoader}.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,link,class,loader,to,load,resource,bundles,with,default,is,the,thread,context,code,class,loader;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleViewResolver -> public void setBundleClassLoader(ClassLoader classLoader);1498780456;Set the {@link ClassLoader} to load resource bundles with._Default is the thread context {@code ClassLoader}.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,link,class,loader,to,load,resource,bundles,with,default,is,the,thread,context,code,class,loader;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleViewResolver -> public void setBundleClassLoader(ClassLoader classLoader);1520528267;Set the {@link ClassLoader} to load resource bundles with._Default is the thread context {@code ClassLoader}.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,link,class,loader,to,load,resource,bundles,with,default,is,the,thread,context,code,class,loader;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleViewResolver -> public void setBundleClassLoader(ClassLoader classLoader);1522448444;Set the {@link ClassLoader} to load resource bundles with._Default is the thread context {@code ClassLoader}.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,link,class,loader,to,load,resource,bundles,with,default,is,the,thread,context,code,class,loader;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleViewResolver -> public void setBundleClassLoader(ClassLoader classLoader);1522511361;Set the {@link ClassLoader} to load resource bundles with._Default is the thread context {@code ClassLoader}.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,link,class,loader,to,load,resource,bundles,with,default,is,the,thread,context,code,class,loader;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleViewResolver -> public void setBundleClassLoader(ClassLoader classLoader);1522530428;Set the {@link ClassLoader} to load resource bundles with._Default is the thread context {@code ClassLoader}.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,link,class,loader,to,load,resource,bundles,with,default,is,the,thread,context,code,class,loader;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
ResourceBundleViewResolver -> public void setBundleClassLoader(ClassLoader classLoader);1530174524;Set the {@link ClassLoader} to load resource bundles with._Default is the thread context {@code ClassLoader}.;public void setBundleClassLoader(ClassLoader classLoader) {_		this.bundleClassLoader = classLoader__	};set,the,link,class,loader,to,load,resource,bundles,with,default,is,the,thread,context,code,class,loader;public,void,set,bundle,class,loader,class,loader,class,loader,this,bundle,class,loader,class,loader
