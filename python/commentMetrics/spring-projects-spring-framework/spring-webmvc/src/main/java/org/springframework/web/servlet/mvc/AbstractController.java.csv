# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractController -> public final void setSynchronizeOnSession(boolean synchronizeOnSession);1328020251;Set if controller execution should be synchronized on the session,_to serialize parallel invocations from the same client._<p>More specifically, the execution of the <code>handleRequestInternal</code>_method will get synchronized if this flag is "true". The best available_session mutex will be used for the synchronization_ ideally, this will_be a mutex exposed by HttpSessionMutexListener._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the <code>SESSION_MUTEX_ATTRIBUTE</code> constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@see org.springframework.web.servlet.mvc.AbstractController#handleRequestInternal_@see org.springframework.web.util.HttpSessionMutexListener_@see org.springframework.web.util.WebUtils#getSessionMutex(javax.servlet.http.HttpSession);public final void setSynchronizeOnSession(boolean synchronizeOnSession) {_		this.synchronizeOnSession = synchronizeOnSession__	};set,if,controller,execution,should,be,synchronized,on,the,session,to,serialize,parallel,invocations,from,the,same,client,p,more,specifically,the,execution,of,the,code,handle,request,internal,code,method,will,get,synchronized,if,this,flag,is,true,the,best,available,session,mutex,will,be,used,for,the,synchronization,ideally,this,will,be,a,mutex,exposed,by,http,session,mutex,listener,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,see,org,springframework,web,servlet,mvc,abstract,controller,handle,request,internal,see,org,springframework,web,util,http,session,mutex,listener,see,org,springframework,web,util,web,utils,get,session,mutex,javax,servlet,http,http,session;public,final,void,set,synchronize,on,session,boolean,synchronize,on,session,this,synchronize,on,session,synchronize,on,session
AbstractController -> public final void setSynchronizeOnSession(boolean synchronizeOnSession);1356735495;Set if controller execution should be synchronized on the session,_to serialize parallel invocations from the same client._<p>More specifically, the execution of the {@code handleRequestInternal}_method will get synchronized if this flag is "true". The best available_session mutex will be used for the synchronization_ ideally, this will_be a mutex exposed by HttpSessionMutexListener._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@see AbstractController#handleRequestInternal_@see org.springframework.web.util.HttpSessionMutexListener_@see org.springframework.web.util.WebUtils#getSessionMutex(javax.servlet.http.HttpSession);public final void setSynchronizeOnSession(boolean synchronizeOnSession) {_		this.synchronizeOnSession = synchronizeOnSession__	};set,if,controller,execution,should,be,synchronized,on,the,session,to,serialize,parallel,invocations,from,the,same,client,p,more,specifically,the,execution,of,the,code,handle,request,internal,method,will,get,synchronized,if,this,flag,is,true,the,best,available,session,mutex,will,be,used,for,the,synchronization,ideally,this,will,be,a,mutex,exposed,by,http,session,mutex,listener,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,see,abstract,controller,handle,request,internal,see,org,springframework,web,util,http,session,mutex,listener,see,org,springframework,web,util,web,utils,get,session,mutex,javax,servlet,http,http,session;public,final,void,set,synchronize,on,session,boolean,synchronize,on,session,this,synchronize,on,session,synchronize,on,session
AbstractController -> public final void setSynchronizeOnSession(boolean synchronizeOnSession);1357119239;Set if controller execution should be synchronized on the session,_to serialize parallel invocations from the same client._<p>More specifically, the execution of the {@code handleRequestInternal}_method will get synchronized if this flag is "true". The best available_session mutex will be used for the synchronization_ ideally, this will_be a mutex exposed by HttpSessionMutexListener._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@see AbstractController#handleRequestInternal_@see org.springframework.web.util.HttpSessionMutexListener_@see org.springframework.web.util.WebUtils#getSessionMutex(javax.servlet.http.HttpSession);public final void setSynchronizeOnSession(boolean synchronizeOnSession) {_		this.synchronizeOnSession = synchronizeOnSession__	};set,if,controller,execution,should,be,synchronized,on,the,session,to,serialize,parallel,invocations,from,the,same,client,p,more,specifically,the,execution,of,the,code,handle,request,internal,method,will,get,synchronized,if,this,flag,is,true,the,best,available,session,mutex,will,be,used,for,the,synchronization,ideally,this,will,be,a,mutex,exposed,by,http,session,mutex,listener,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,see,abstract,controller,handle,request,internal,see,org,springframework,web,util,http,session,mutex,listener,see,org,springframework,web,util,web,utils,get,session,mutex,javax,servlet,http,http,session;public,final,void,set,synchronize,on,session,boolean,synchronize,on,session,this,synchronize,on,session,synchronize,on,session
AbstractController -> public final void setSynchronizeOnSession(boolean synchronizeOnSession);1368482696;Set if controller execution should be synchronized on the session,_to serialize parallel invocations from the same client._<p>More specifically, the execution of the {@code handleRequestInternal}_method will get synchronized if this flag is "true". The best available_session mutex will be used for the synchronization_ ideally, this will_be a mutex exposed by HttpSessionMutexListener._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@see AbstractController#handleRequestInternal_@see org.springframework.web.util.HttpSessionMutexListener_@see org.springframework.web.util.WebUtils#getSessionMutex(javax.servlet.http.HttpSession);public final void setSynchronizeOnSession(boolean synchronizeOnSession) {_		this.synchronizeOnSession = synchronizeOnSession__	};set,if,controller,execution,should,be,synchronized,on,the,session,to,serialize,parallel,invocations,from,the,same,client,p,more,specifically,the,execution,of,the,code,handle,request,internal,method,will,get,synchronized,if,this,flag,is,true,the,best,available,session,mutex,will,be,used,for,the,synchronization,ideally,this,will,be,a,mutex,exposed,by,http,session,mutex,listener,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,see,abstract,controller,handle,request,internal,see,org,springframework,web,util,http,session,mutex,listener,see,org,springframework,web,util,web,utils,get,session,mutex,javax,servlet,http,http,session;public,final,void,set,synchronize,on,session,boolean,synchronize,on,session,this,synchronize,on,session,synchronize,on,session
AbstractController -> public final void setSynchronizeOnSession(boolean synchronizeOnSession);1414619099;Set if controller execution should be synchronized on the session,_to serialize parallel invocations from the same client._<p>More specifically, the execution of the {@code handleRequestInternal}_method will get synchronized if this flag is "true". The best available_session mutex will be used for the synchronization_ ideally, this will_be a mutex exposed by HttpSessionMutexListener._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@see AbstractController#handleRequestInternal_@see org.springframework.web.util.HttpSessionMutexListener_@see org.springframework.web.util.WebUtils#getSessionMutex(javax.servlet.http.HttpSession);public final void setSynchronizeOnSession(boolean synchronizeOnSession) {_		this.synchronizeOnSession = synchronizeOnSession__	};set,if,controller,execution,should,be,synchronized,on,the,session,to,serialize,parallel,invocations,from,the,same,client,p,more,specifically,the,execution,of,the,code,handle,request,internal,method,will,get,synchronized,if,this,flag,is,true,the,best,available,session,mutex,will,be,used,for,the,synchronization,ideally,this,will,be,a,mutex,exposed,by,http,session,mutex,listener,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,see,abstract,controller,handle,request,internal,see,org,springframework,web,util,http,session,mutex,listener,see,org,springframework,web,util,web,utils,get,session,mutex,javax,servlet,http,http,session;public,final,void,set,synchronize,on,session,boolean,synchronize,on,session,this,synchronize,on,session,synchronize,on,session
AbstractController -> public final void setSynchronizeOnSession(boolean synchronizeOnSession);1427130064;Set if controller execution should be synchronized on the session,_to serialize parallel invocations from the same client._<p>More specifically, the execution of the {@code handleRequestInternal}_method will get synchronized if this flag is "true". The best available_session mutex will be used for the synchronization_ ideally, this will_be a mutex exposed by HttpSessionMutexListener._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@see AbstractController#handleRequestInternal_@see org.springframework.web.util.HttpSessionMutexListener_@see org.springframework.web.util.WebUtils#getSessionMutex(javax.servlet.http.HttpSession);public final void setSynchronizeOnSession(boolean synchronizeOnSession) {_		this.synchronizeOnSession = synchronizeOnSession__	};set,if,controller,execution,should,be,synchronized,on,the,session,to,serialize,parallel,invocations,from,the,same,client,p,more,specifically,the,execution,of,the,code,handle,request,internal,method,will,get,synchronized,if,this,flag,is,true,the,best,available,session,mutex,will,be,used,for,the,synchronization,ideally,this,will,be,a,mutex,exposed,by,http,session,mutex,listener,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,see,abstract,controller,handle,request,internal,see,org,springframework,web,util,http,session,mutex,listener,see,org,springframework,web,util,web,utils,get,session,mutex,javax,servlet,http,http,session;public,final,void,set,synchronize,on,session,boolean,synchronize,on,session,this,synchronize,on,session,synchronize,on,session
AbstractController -> public final void setSynchronizeOnSession(boolean synchronizeOnSession);1437503583;Set if controller execution should be synchronized on the session,_to serialize parallel invocations from the same client._<p>More specifically, the execution of the {@code handleRequestInternal}_method will get synchronized if this flag is "true". The best available_session mutex will be used for the synchronization_ ideally, this will_be a mutex exposed by HttpSessionMutexListener._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@see AbstractController#handleRequestInternal_@see org.springframework.web.util.HttpSessionMutexListener_@see org.springframework.web.util.WebUtils#getSessionMutex(javax.servlet.http.HttpSession);public final void setSynchronizeOnSession(boolean synchronizeOnSession) {_		this.synchronizeOnSession = synchronizeOnSession__	};set,if,controller,execution,should,be,synchronized,on,the,session,to,serialize,parallel,invocations,from,the,same,client,p,more,specifically,the,execution,of,the,code,handle,request,internal,method,will,get,synchronized,if,this,flag,is,true,the,best,available,session,mutex,will,be,used,for,the,synchronization,ideally,this,will,be,a,mutex,exposed,by,http,session,mutex,listener,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,see,abstract,controller,handle,request,internal,see,org,springframework,web,util,http,session,mutex,listener,see,org,springframework,web,util,web,utils,get,session,mutex,javax,servlet,http,http,session;public,final,void,set,synchronize,on,session,boolean,synchronize,on,session,this,synchronize,on,session,synchronize,on,session
AbstractController -> public final void setSynchronizeOnSession(boolean synchronizeOnSession);1450439838;Set if controller execution should be synchronized on the session,_to serialize parallel invocations from the same client._<p>More specifically, the execution of the {@code handleRequestInternal}_method will get synchronized if this flag is "true". The best available_session mutex will be used for the synchronization_ ideally, this will_be a mutex exposed by HttpSessionMutexListener._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@see AbstractController#handleRequestInternal_@see org.springframework.web.util.HttpSessionMutexListener_@see org.springframework.web.util.WebUtils#getSessionMutex(javax.servlet.http.HttpSession);public final void setSynchronizeOnSession(boolean synchronizeOnSession) {_		this.synchronizeOnSession = synchronizeOnSession__	};set,if,controller,execution,should,be,synchronized,on,the,session,to,serialize,parallel,invocations,from,the,same,client,p,more,specifically,the,execution,of,the,code,handle,request,internal,method,will,get,synchronized,if,this,flag,is,true,the,best,available,session,mutex,will,be,used,for,the,synchronization,ideally,this,will,be,a,mutex,exposed,by,http,session,mutex,listener,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,see,abstract,controller,handle,request,internal,see,org,springframework,web,util,http,session,mutex,listener,see,org,springframework,web,util,web,utils,get,session,mutex,javax,servlet,http,http,session;public,final,void,set,synchronize,on,session,boolean,synchronize,on,session,this,synchronize,on,session,synchronize,on,session
AbstractController -> public final void setSynchronizeOnSession(boolean synchronizeOnSession);1453729744;Set if controller execution should be synchronized on the session,_to serialize parallel invocations from the same client._<p>More specifically, the execution of the {@code handleRequestInternal}_method will get synchronized if this flag is "true". The best available_session mutex will be used for the synchronization_ ideally, this will_be a mutex exposed by HttpSessionMutexListener._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@see AbstractController#handleRequestInternal_@see org.springframework.web.util.HttpSessionMutexListener_@see org.springframework.web.util.WebUtils#getSessionMutex(javax.servlet.http.HttpSession);public final void setSynchronizeOnSession(boolean synchronizeOnSession) {_		this.synchronizeOnSession = synchronizeOnSession__	};set,if,controller,execution,should,be,synchronized,on,the,session,to,serialize,parallel,invocations,from,the,same,client,p,more,specifically,the,execution,of,the,code,handle,request,internal,method,will,get,synchronized,if,this,flag,is,true,the,best,available,session,mutex,will,be,used,for,the,synchronization,ideally,this,will,be,a,mutex,exposed,by,http,session,mutex,listener,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,see,abstract,controller,handle,request,internal,see,org,springframework,web,util,http,session,mutex,listener,see,org,springframework,web,util,web,utils,get,session,mutex,javax,servlet,http,http,session;public,final,void,set,synchronize,on,session,boolean,synchronize,on,session,this,synchronize,on,session,synchronize,on,session
AbstractController -> public final void setSynchronizeOnSession(boolean synchronizeOnSession);1453757723;Set if controller execution should be synchronized on the session,_to serialize parallel invocations from the same client._<p>More specifically, the execution of the {@code handleRequestInternal}_method will get synchronized if this flag is "true". The best available_session mutex will be used for the synchronization_ ideally, this will_be a mutex exposed by HttpSessionMutexListener._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@see AbstractController#handleRequestInternal_@see org.springframework.web.util.HttpSessionMutexListener_@see org.springframework.web.util.WebUtils#getSessionMutex(javax.servlet.http.HttpSession);public final void setSynchronizeOnSession(boolean synchronizeOnSession) {_		this.synchronizeOnSession = synchronizeOnSession__	};set,if,controller,execution,should,be,synchronized,on,the,session,to,serialize,parallel,invocations,from,the,same,client,p,more,specifically,the,execution,of,the,code,handle,request,internal,method,will,get,synchronized,if,this,flag,is,true,the,best,available,session,mutex,will,be,used,for,the,synchronization,ideally,this,will,be,a,mutex,exposed,by,http,session,mutex,listener,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,see,abstract,controller,handle,request,internal,see,org,springframework,web,util,http,session,mutex,listener,see,org,springframework,web,util,web,utils,get,session,mutex,javax,servlet,http,http,session;public,final,void,set,synchronize,on,session,boolean,synchronize,on,session,this,synchronize,on,session,synchronize,on,session
AbstractController -> public final void setSynchronizeOnSession(boolean synchronizeOnSession);1495868221;Set if controller execution should be synchronized on the session,_to serialize parallel invocations from the same client._<p>More specifically, the execution of the {@code handleRequestInternal}_method will get synchronized if this flag is "true". The best available_session mutex will be used for the synchronization_ ideally, this will_be a mutex exposed by HttpSessionMutexListener._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@see AbstractController#handleRequestInternal_@see org.springframework.web.util.HttpSessionMutexListener_@see org.springframework.web.util.WebUtils#getSessionMutex(javax.servlet.http.HttpSession);public final void setSynchronizeOnSession(boolean synchronizeOnSession) {_		this.synchronizeOnSession = synchronizeOnSession__	};set,if,controller,execution,should,be,synchronized,on,the,session,to,serialize,parallel,invocations,from,the,same,client,p,more,specifically,the,execution,of,the,code,handle,request,internal,method,will,get,synchronized,if,this,flag,is,true,the,best,available,session,mutex,will,be,used,for,the,synchronization,ideally,this,will,be,a,mutex,exposed,by,http,session,mutex,listener,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,see,abstract,controller,handle,request,internal,see,org,springframework,web,util,http,session,mutex,listener,see,org,springframework,web,util,web,utils,get,session,mutex,javax,servlet,http,http,session;public,final,void,set,synchronize,on,session,boolean,synchronize,on,session,this,synchronize,on,session,synchronize,on,session
AbstractController -> public final void setSynchronizeOnSession(boolean synchronizeOnSession);1502974979;Set if controller execution should be synchronized on the session,_to serialize parallel invocations from the same client._<p>More specifically, the execution of the {@code handleRequestInternal}_method will get synchronized if this flag is "true". The best available_session mutex will be used for the synchronization_ ideally, this will_be a mutex exposed by HttpSessionMutexListener._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@see AbstractController#handleRequestInternal_@see org.springframework.web.util.HttpSessionMutexListener_@see org.springframework.web.util.WebUtils#getSessionMutex(javax.servlet.http.HttpSession);public final void setSynchronizeOnSession(boolean synchronizeOnSession) {_		this.synchronizeOnSession = synchronizeOnSession__	};set,if,controller,execution,should,be,synchronized,on,the,session,to,serialize,parallel,invocations,from,the,same,client,p,more,specifically,the,execution,of,the,code,handle,request,internal,method,will,get,synchronized,if,this,flag,is,true,the,best,available,session,mutex,will,be,used,for,the,synchronization,ideally,this,will,be,a,mutex,exposed,by,http,session,mutex,listener,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,see,abstract,controller,handle,request,internal,see,org,springframework,web,util,http,session,mutex,listener,see,org,springframework,web,util,web,utils,get,session,mutex,javax,servlet,http,http,session;public,final,void,set,synchronize,on,session,boolean,synchronize,on,session,this,synchronize,on,session,synchronize,on,session
AbstractController -> public final void setSynchronizeOnSession(boolean synchronizeOnSession);1508532146;Set if controller execution should be synchronized on the session,_to serialize parallel invocations from the same client._<p>More specifically, the execution of the {@code handleRequestInternal}_method will get synchronized if this flag is "true". The best available_session mutex will be used for the synchronization_ ideally, this will_be a mutex exposed by HttpSessionMutexListener._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@see AbstractController#handleRequestInternal_@see org.springframework.web.util.HttpSessionMutexListener_@see org.springframework.web.util.WebUtils#getSessionMutex(javax.servlet.http.HttpSession);public final void setSynchronizeOnSession(boolean synchronizeOnSession) {_		this.synchronizeOnSession = synchronizeOnSession__	};set,if,controller,execution,should,be,synchronized,on,the,session,to,serialize,parallel,invocations,from,the,same,client,p,more,specifically,the,execution,of,the,code,handle,request,internal,method,will,get,synchronized,if,this,flag,is,true,the,best,available,session,mutex,will,be,used,for,the,synchronization,ideally,this,will,be,a,mutex,exposed,by,http,session,mutex,listener,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,see,abstract,controller,handle,request,internal,see,org,springframework,web,util,http,session,mutex,listener,see,org,springframework,web,util,web,utils,get,session,mutex,javax,servlet,http,http,session;public,final,void,set,synchronize,on,session,boolean,synchronize,on,session,this,synchronize,on,session,synchronize,on,session
AbstractController -> public final void setSynchronizeOnSession(boolean synchronizeOnSession);1530174524;Set if controller execution should be synchronized on the session,_to serialize parallel invocations from the same client._<p>More specifically, the execution of the {@code handleRequestInternal}_method will get synchronized if this flag is "true". The best available_session mutex will be used for the synchronization_ ideally, this will_be a mutex exposed by HttpSessionMutexListener._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the HttpSession reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@see AbstractController#handleRequestInternal_@see org.springframework.web.util.HttpSessionMutexListener_@see org.springframework.web.util.WebUtils#getSessionMutex(javax.servlet.http.HttpSession);public final void setSynchronizeOnSession(boolean synchronizeOnSession) {_		this.synchronizeOnSession = synchronizeOnSession__	};set,if,controller,execution,should,be,synchronized,on,the,session,to,serialize,parallel,invocations,from,the,same,client,p,more,specifically,the,execution,of,the,code,handle,request,internal,method,will,get,synchronized,if,this,flag,is,true,the,best,available,session,mutex,will,be,used,for,the,synchronization,ideally,this,will,be,a,mutex,exposed,by,http,session,mutex,listener,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,http,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,see,abstract,controller,handle,request,internal,see,org,springframework,web,util,http,session,mutex,listener,see,org,springframework,web,util,web,utils,get,session,mutex,javax,servlet,http,http,session;public,final,void,set,synchronize,on,session,boolean,synchronize,on,session,this,synchronize,on,session,synchronize,on,session
AbstractController -> @Nullable 	protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) 			throws Exception_;1495868221;Template method. Subclasses must implement this._The contract is the same as for {@code handleRequest}._@see #handleRequest;@Nullable_	protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)_			throws Exception_;template,method,subclasses,must,implement,this,the,contract,is,the,same,as,for,code,handle,request,see,handle,request;nullable,protected,abstract,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,throws,exception
AbstractController -> @Nullable 	protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) 			throws Exception_;1502974979;Template method. Subclasses must implement this._The contract is the same as for {@code handleRequest}._@see #handleRequest;@Nullable_	protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)_			throws Exception_;template,method,subclasses,must,implement,this,the,contract,is,the,same,as,for,code,handle,request,see,handle,request;nullable,protected,abstract,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,throws,exception
AbstractController -> @Nullable 	protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) 			throws Exception_;1508532146;Template method. Subclasses must implement this._The contract is the same as for {@code handleRequest}._@see #handleRequest;@Nullable_	protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)_			throws Exception_;template,method,subclasses,must,implement,this,the,contract,is,the,same,as,for,code,handle,request,see,handle,request;nullable,protected,abstract,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,throws,exception
AbstractController -> @Nullable 	protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) 			throws Exception_;1530174524;Template method. Subclasses must implement this._The contract is the same as for {@code handleRequest}._@see #handleRequest;@Nullable_	protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)_			throws Exception_;template,method,subclasses,must,implement,this,the,contract,is,the,same,as,for,code,handle,request,see,handle,request;nullable,protected,abstract,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,throws,exception
AbstractController -> protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) 			throws Exception_;1437503583;Template method. Subclasses must implement this._The contract is the same as for {@code handleRequest}._@see #handleRequest;protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)_			throws Exception_;template,method,subclasses,must,implement,this,the,contract,is,the,same,as,for,code,handle,request,see,handle,request;protected,abstract,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,throws,exception
AbstractController -> protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) 			throws Exception_;1450439838;Template method. Subclasses must implement this._The contract is the same as for {@code handleRequest}._@see #handleRequest;protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)_			throws Exception_;template,method,subclasses,must,implement,this,the,contract,is,the,same,as,for,code,handle,request,see,handle,request;protected,abstract,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,throws,exception
AbstractController -> protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) 			throws Exception_;1453729744;Template method. Subclasses must implement this._The contract is the same as for {@code handleRequest}._@see #handleRequest;protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)_			throws Exception_;template,method,subclasses,must,implement,this,the,contract,is,the,same,as,for,code,handle,request,see,handle,request;protected,abstract,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,throws,exception
AbstractController -> protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) 			throws Exception_;1453757723;Template method. Subclasses must implement this._The contract is the same as for {@code handleRequest}._@see #handleRequest;protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)_			throws Exception_;template,method,subclasses,must,implement,this,the,contract,is,the,same,as,for,code,handle,request,see,handle,request;protected,abstract,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,throws,exception
AbstractController -> public AbstractController();1450439838;Create a new AbstractController which supports_HTTP methods GET, HEAD and POST by default.;public AbstractController() {_		this(true)__	};create,a,new,abstract,controller,which,supports,http,methods,get,head,and,post,by,default;public,abstract,controller,this,true
AbstractController -> public AbstractController();1453729744;Create a new AbstractController which supports_HTTP methods GET, HEAD and POST by default.;public AbstractController() {_		this(true)__	};create,a,new,abstract,controller,which,supports,http,methods,get,head,and,post,by,default;public,abstract,controller,this,true
AbstractController -> public AbstractController();1453757723;Create a new AbstractController which supports_HTTP methods GET, HEAD and POST by default.;public AbstractController() {_		this(true)__	};create,a,new,abstract,controller,which,supports,http,methods,get,head,and,post,by,default;public,abstract,controller,this,true
AbstractController -> public AbstractController();1495868221;Create a new AbstractController which supports_HTTP methods GET, HEAD and POST by default.;public AbstractController() {_		this(true)__	};create,a,new,abstract,controller,which,supports,http,methods,get,head,and,post,by,default;public,abstract,controller,this,true
AbstractController -> public AbstractController();1502974979;Create a new AbstractController which supports_HTTP methods GET, HEAD and POST by default.;public AbstractController() {_		this(true)__	};create,a,new,abstract,controller,which,supports,http,methods,get,head,and,post,by,default;public,abstract,controller,this,true
AbstractController -> public AbstractController();1508532146;Create a new AbstractController which supports_HTTP methods GET, HEAD and POST by default.;public AbstractController() {_		this(true)__	};create,a,new,abstract,controller,which,supports,http,methods,get,head,and,post,by,default;public,abstract,controller,this,true
AbstractController -> public AbstractController();1530174524;Create a new AbstractController which supports_HTTP methods GET, HEAD and POST by default.;public AbstractController() {_		this(true)__	};create,a,new,abstract,controller,which,supports,http,methods,get,head,and,post,by,default;public,abstract,controller,this,true
AbstractController -> public AbstractController(boolean restrictDefaultSupportedMethods);1450439838;Create a new AbstractController._@param restrictDefaultSupportedMethods {@code true} if this_controller should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted_@since 4.3;public AbstractController(boolean restrictDefaultSupportedMethods) {_		super(restrictDefaultSupportedMethods)__	};create,a,new,abstract,controller,param,restrict,default,supported,methods,code,true,if,this,controller,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted,since,4,3;public,abstract,controller,boolean,restrict,default,supported,methods,super,restrict,default,supported,methods
AbstractController -> public AbstractController(boolean restrictDefaultSupportedMethods);1453729744;Create a new AbstractController._@param restrictDefaultSupportedMethods {@code true} if this_controller should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted_@since 4.3;public AbstractController(boolean restrictDefaultSupportedMethods) {_		super(restrictDefaultSupportedMethods)__	};create,a,new,abstract,controller,param,restrict,default,supported,methods,code,true,if,this,controller,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted,since,4,3;public,abstract,controller,boolean,restrict,default,supported,methods,super,restrict,default,supported,methods
AbstractController -> public AbstractController(boolean restrictDefaultSupportedMethods);1453757723;Create a new AbstractController._@param restrictDefaultSupportedMethods {@code true} if this_controller should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted_@since 4.3;public AbstractController(boolean restrictDefaultSupportedMethods) {_		super(restrictDefaultSupportedMethods)__	};create,a,new,abstract,controller,param,restrict,default,supported,methods,code,true,if,this,controller,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted,since,4,3;public,abstract,controller,boolean,restrict,default,supported,methods,super,restrict,default,supported,methods
AbstractController -> public AbstractController(boolean restrictDefaultSupportedMethods);1495868221;Create a new AbstractController._@param restrictDefaultSupportedMethods {@code true} if this_controller should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted_@since 4.3;public AbstractController(boolean restrictDefaultSupportedMethods) {_		super(restrictDefaultSupportedMethods)__	};create,a,new,abstract,controller,param,restrict,default,supported,methods,code,true,if,this,controller,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted,since,4,3;public,abstract,controller,boolean,restrict,default,supported,methods,super,restrict,default,supported,methods
AbstractController -> public AbstractController(boolean restrictDefaultSupportedMethods);1502974979;Create a new AbstractController._@param restrictDefaultSupportedMethods {@code true} if this_controller should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted_@since 4.3;public AbstractController(boolean restrictDefaultSupportedMethods) {_		super(restrictDefaultSupportedMethods)__	};create,a,new,abstract,controller,param,restrict,default,supported,methods,code,true,if,this,controller,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted,since,4,3;public,abstract,controller,boolean,restrict,default,supported,methods,super,restrict,default,supported,methods
AbstractController -> public AbstractController(boolean restrictDefaultSupportedMethods);1508532146;Create a new AbstractController._@param restrictDefaultSupportedMethods {@code true} if this_controller should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted_@since 4.3;public AbstractController(boolean restrictDefaultSupportedMethods) {_		super(restrictDefaultSupportedMethods)__	};create,a,new,abstract,controller,param,restrict,default,supported,methods,code,true,if,this,controller,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted,since,4,3;public,abstract,controller,boolean,restrict,default,supported,methods,super,restrict,default,supported,methods
AbstractController -> public AbstractController(boolean restrictDefaultSupportedMethods);1530174524;Create a new AbstractController._@param restrictDefaultSupportedMethods {@code true} if this_controller should support HTTP methods GET, HEAD and POST by default,_or {@code false} if it should be unrestricted_@since 4.3;public AbstractController(boolean restrictDefaultSupportedMethods) {_		super(restrictDefaultSupportedMethods)__	};create,a,new,abstract,controller,param,restrict,default,supported,methods,code,true,if,this,controller,should,support,http,methods,get,head,and,post,by,default,or,code,false,if,it,should,be,unrestricted,since,4,3;public,abstract,controller,boolean,restrict,default,supported,methods,super,restrict,default,supported,methods
AbstractController -> protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) 	    throws Exception_;1328020251;Template method. Subclasses must implement this._The contract is the same as for <code>handleRequest</code>._@see #handleRequest;protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)_	    throws Exception_;template,method,subclasses,must,implement,this,the,contract,is,the,same,as,for,code,handle,request,code,see,handle,request;protected,abstract,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,throws,exception
AbstractController -> protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) 	    throws Exception_;1356735495;Template method. Subclasses must implement this._The contract is the same as for {@code handleRequest}._@see #handleRequest;protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)_	    throws Exception_;template,method,subclasses,must,implement,this,the,contract,is,the,same,as,for,code,handle,request,see,handle,request;protected,abstract,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,throws,exception
AbstractController -> protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) 	    throws Exception_;1357119239;Template method. Subclasses must implement this._The contract is the same as for {@code handleRequest}._@see #handleRequest;protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)_	    throws Exception_;template,method,subclasses,must,implement,this,the,contract,is,the,same,as,for,code,handle,request,see,handle,request;protected,abstract,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,throws,exception
AbstractController -> protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) 	    throws Exception_;1368482696;Template method. Subclasses must implement this._The contract is the same as for {@code handleRequest}._@see #handleRequest;protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)_	    throws Exception_;template,method,subclasses,must,implement,this,the,contract,is,the,same,as,for,code,handle,request,see,handle,request;protected,abstract,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,throws,exception
AbstractController -> protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) 	    throws Exception_;1414619099;Template method. Subclasses must implement this._The contract is the same as for {@code handleRequest}._@see #handleRequest;protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)_	    throws Exception_;template,method,subclasses,must,implement,this,the,contract,is,the,same,as,for,code,handle,request,see,handle,request;protected,abstract,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,throws,exception
AbstractController -> protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) 	    throws Exception_;1427130064;Template method. Subclasses must implement this._The contract is the same as for {@code handleRequest}._@see #handleRequest;protected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)_	    throws Exception_;template,method,subclasses,must,implement,this,the,contract,is,the,same,as,for,code,handle,request,see,handle,request;protected,abstract,model,and,view,handle,request,internal,http,servlet,request,request,http,servlet,response,response,throws,exception
AbstractController -> public final boolean isSynchronizeOnSession();1328020251;Return whether controller execution should be synchronized on the session.;public final boolean isSynchronizeOnSession() {_		return this.synchronizeOnSession__	};return,whether,controller,execution,should,be,synchronized,on,the,session;public,final,boolean,is,synchronize,on,session,return,this,synchronize,on,session
AbstractController -> public final boolean isSynchronizeOnSession();1356735495;Return whether controller execution should be synchronized on the session.;public final boolean isSynchronizeOnSession() {_		return this.synchronizeOnSession__	};return,whether,controller,execution,should,be,synchronized,on,the,session;public,final,boolean,is,synchronize,on,session,return,this,synchronize,on,session
AbstractController -> public final boolean isSynchronizeOnSession();1357119239;Return whether controller execution should be synchronized on the session.;public final boolean isSynchronizeOnSession() {_		return this.synchronizeOnSession__	};return,whether,controller,execution,should,be,synchronized,on,the,session;public,final,boolean,is,synchronize,on,session,return,this,synchronize,on,session
AbstractController -> public final boolean isSynchronizeOnSession();1368482696;Return whether controller execution should be synchronized on the session.;public final boolean isSynchronizeOnSession() {_		return this.synchronizeOnSession__	};return,whether,controller,execution,should,be,synchronized,on,the,session;public,final,boolean,is,synchronize,on,session,return,this,synchronize,on,session
AbstractController -> public final boolean isSynchronizeOnSession();1414619099;Return whether controller execution should be synchronized on the session.;public final boolean isSynchronizeOnSession() {_		return this.synchronizeOnSession__	};return,whether,controller,execution,should,be,synchronized,on,the,session;public,final,boolean,is,synchronize,on,session,return,this,synchronize,on,session
AbstractController -> public final boolean isSynchronizeOnSession();1427130064;Return whether controller execution should be synchronized on the session.;public final boolean isSynchronizeOnSession() {_		return this.synchronizeOnSession__	};return,whether,controller,execution,should,be,synchronized,on,the,session;public,final,boolean,is,synchronize,on,session,return,this,synchronize,on,session
AbstractController -> public final boolean isSynchronizeOnSession();1437503583;Return whether controller execution should be synchronized on the session.;public final boolean isSynchronizeOnSession() {_		return this.synchronizeOnSession__	};return,whether,controller,execution,should,be,synchronized,on,the,session;public,final,boolean,is,synchronize,on,session,return,this,synchronize,on,session
AbstractController -> public final boolean isSynchronizeOnSession();1450439838;Return whether controller execution should be synchronized on the session.;public final boolean isSynchronizeOnSession() {_		return this.synchronizeOnSession__	};return,whether,controller,execution,should,be,synchronized,on,the,session;public,final,boolean,is,synchronize,on,session,return,this,synchronize,on,session
AbstractController -> public final boolean isSynchronizeOnSession();1453729744;Return whether controller execution should be synchronized on the session.;public final boolean isSynchronizeOnSession() {_		return this.synchronizeOnSession__	};return,whether,controller,execution,should,be,synchronized,on,the,session;public,final,boolean,is,synchronize,on,session,return,this,synchronize,on,session
AbstractController -> public final boolean isSynchronizeOnSession();1453757723;Return whether controller execution should be synchronized on the session.;public final boolean isSynchronizeOnSession() {_		return this.synchronizeOnSession__	};return,whether,controller,execution,should,be,synchronized,on,the,session;public,final,boolean,is,synchronize,on,session,return,this,synchronize,on,session
AbstractController -> public final boolean isSynchronizeOnSession();1495868221;Return whether controller execution should be synchronized on the session.;public final boolean isSynchronizeOnSession() {_		return this.synchronizeOnSession__	};return,whether,controller,execution,should,be,synchronized,on,the,session;public,final,boolean,is,synchronize,on,session,return,this,synchronize,on,session
AbstractController -> public final boolean isSynchronizeOnSession();1502974979;Return whether controller execution should be synchronized on the session.;public final boolean isSynchronizeOnSession() {_		return this.synchronizeOnSession__	};return,whether,controller,execution,should,be,synchronized,on,the,session;public,final,boolean,is,synchronize,on,session,return,this,synchronize,on,session
AbstractController -> public final boolean isSynchronizeOnSession();1508532146;Return whether controller execution should be synchronized on the session.;public final boolean isSynchronizeOnSession() {_		return this.synchronizeOnSession__	};return,whether,controller,execution,should,be,synchronized,on,the,session;public,final,boolean,is,synchronize,on,session,return,this,synchronize,on,session
AbstractController -> public final boolean isSynchronizeOnSession();1530174524;Return whether controller execution should be synchronized on the session.;public final boolean isSynchronizeOnSession() {_		return this.synchronizeOnSession__	};return,whether,controller,execution,should,be,synchronized,on,the,session;public,final,boolean,is,synchronize,on,session,return,this,synchronize,on,session
