commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public boolean supportsReturnType(MethodParameter returnType) {     if (StreamingResponseBody.class.isAssignableFrom(returnType.getParameterType())) {         return true.     } else if (ResponseEntity.class.isAssignableFrom(returnType.getParameterType())) {         Class<?> bodyType = ResolvableType.forMethodParameter(returnType).getGeneric().resolve().         return (bodyType != null && StreamingResponseBody.class.isAssignableFrom(bodyType)).     }     return false. }
false;public;4;36;;@Override @SuppressWarnings("resource") public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {     if (returnValue == null) {         mavContainer.setRequestHandled(true).         return.     }     HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class).     Assert.state(response != null, "No HttpServletResponse").     ServerHttpResponse outputMessage = new ServletServerHttpResponse(response).     if (returnValue instanceof ResponseEntity) {         ResponseEntity<?> responseEntity = (ResponseEntity<?>) returnValue.         response.setStatus(responseEntity.getStatusCodeValue()).         outputMessage.getHeaders().putAll(responseEntity.getHeaders()).         returnValue = responseEntity.getBody().         if (returnValue == null) {             mavContainer.setRequestHandled(true).             outputMessage.flush().             return.         }     }     ServletRequest request = webRequest.getNativeRequest(ServletRequest.class).     Assert.state(request != null, "No ServletRequest").     ShallowEtagHeaderFilter.disableContentCaching(request).     Assert.isInstanceOf(StreamingResponseBody.class, returnValue, "StreamingResponseBody expected").     StreamingResponseBody streamingBody = (StreamingResponseBody) returnValue.     Callable<Void> callable = new StreamingResponseBodyTask(outputMessage.getBody(), streamingBody).     WebAsyncUtils.getAsyncManager(webRequest).startCallableProcessing(callable, mavContainer). }
false;public;0;5;;@Override public Void call() throws Exception {     this.streamingBody.writeTo(this.outputStream).     return null. }
