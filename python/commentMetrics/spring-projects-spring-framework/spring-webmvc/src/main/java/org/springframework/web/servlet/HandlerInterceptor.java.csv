# id;timestamp;commentText;codeText;commentWords;codeWords
HandlerInterceptor -> void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception_;1328020251;Callback after completion of request processing, that is, after rendering_the view. Will be called on any outcome of handler execution, thus allows_for proper resource cleanup._<p>Note: Will only be called if this interceptor's <code>preHandle</code>_method has successfully completed and returned <code>true</code>!_<p>As with the {@code postHandle} method, the method will be invoked on each_interceptor in the chain in reverse order, so the first interceptor will be_the last to be invoked._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance examination_@param ex exception thrown on handler execution, if any_@throws Exception in case of errors;void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception_;callback,after,completion,of,request,processing,that,is,after,rendering,the,view,will,be,called,on,any,outcome,of,handler,execution,thus,allows,for,proper,resource,cleanup,p,note,will,only,be,called,if,this,interceptor,s,code,pre,handle,code,method,has,successfully,completed,and,returned,code,true,code,p,as,with,the,code,post,handle,method,the,method,will,be,invoked,on,each,interceptor,in,the,chain,in,reverse,order,so,the,first,interceptor,will,be,the,last,to,be,invoked,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,examination,param,ex,exception,thrown,on,handler,execution,if,any,throws,exception,in,case,of,errors;void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
HandlerInterceptor -> void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception_;1344035753;Callback after completion of request processing, that is, after rendering_the view. Will be called on any outcome of handler execution, thus allows_for proper resource cleanup._<p>Note: Will only be called if this interceptor's <code>preHandle</code>_method has successfully completed and returned <code>true</code>!_<p>As with the {@code postHandle} method, the method will be invoked on each_interceptor in the chain in reverse order, so the first interceptor will be_the last to be invoked._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance examination_@param ex exception thrown on handler execution, if any_@throws Exception in case of errors;void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception_;callback,after,completion,of,request,processing,that,is,after,rendering,the,view,will,be,called,on,any,outcome,of,handler,execution,thus,allows,for,proper,resource,cleanup,p,note,will,only,be,called,if,this,interceptor,s,code,pre,handle,code,method,has,successfully,completed,and,returned,code,true,code,p,as,with,the,code,post,handle,method,the,method,will,be,invoked,on,each,interceptor,in,the,chain,in,reverse,order,so,the,first,interceptor,will,be,the,last,to,be,invoked,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,examination,param,ex,exception,thrown,on,handler,execution,if,any,throws,exception,in,case,of,errors;void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
HandlerInterceptor -> void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception_;1348061150;Callback after completion of request processing, that is, after rendering_the view. Will be called on any outcome of handler execution, thus allows_for proper resource cleanup._<p>Note: Will only be called if this interceptor's <code>preHandle</code>_method has successfully completed and returned <code>true</code>!_<p>As with the {@code postHandle} method, the method will be invoked on each_interceptor in the chain in reverse order, so the first interceptor will be_the last to be invoked._@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started async_execution, for type and/or instance examination_@param ex exception thrown on handler execution, if any_@throws Exception in case of errors;void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception_;callback,after,completion,of,request,processing,that,is,after,rendering,the,view,will,be,called,on,any,outcome,of,handler,execution,thus,allows,for,proper,resource,cleanup,p,note,will,only,be,called,if,this,interceptor,s,code,pre,handle,code,method,has,successfully,completed,and,returned,code,true,code,p,as,with,the,code,post,handle,method,the,method,will,be,invoked,on,each,interceptor,in,the,chain,in,reverse,order,so,the,first,interceptor,will,be,the,last,to,be,invoked,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,async,execution,for,type,and,or,instance,examination,param,ex,exception,thrown,on,handler,execution,if,any,throws,exception,in,case,of,errors;void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
HandlerInterceptor -> void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception_;1356735495;Callback after completion of request processing, that is, after rendering_the view. Will be called on any outcome of handler execution, thus allows_for proper resource cleanup._<p>Note: Will only be called if this interceptor's {@code preHandle}_method has successfully completed and returned {@code true}!_<p>As with the {@code postHandle} method, the method will be invoked on each_interceptor in the chain in reverse order, so the first interceptor will be_the last to be invoked._@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started async_execution, for type and/or instance examination_@param ex exception thrown on handler execution, if any_@throws Exception in case of errors;void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception_;callback,after,completion,of,request,processing,that,is,after,rendering,the,view,will,be,called,on,any,outcome,of,handler,execution,thus,allows,for,proper,resource,cleanup,p,note,will,only,be,called,if,this,interceptor,s,code,pre,handle,method,has,successfully,completed,and,returned,code,true,p,as,with,the,code,post,handle,method,the,method,will,be,invoked,on,each,interceptor,in,the,chain,in,reverse,order,so,the,first,interceptor,will,be,the,last,to,be,invoked,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,async,execution,for,type,and,or,instance,examination,param,ex,exception,thrown,on,handler,execution,if,any,throws,exception,in,case,of,errors;void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
HandlerInterceptor -> void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception_;1414619099;Intercept the execution of a handler. Called after HandlerAdapter actually_invoked the handler, but before the DispatcherServlet renders the view._Can expose additional model objects to the view via the given ModelAndView._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can post-process an execution,_getting applied in inverse order of the execution chain._@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started async_execution, for type and/or instance examination_@param modelAndView the {@code ModelAndView} that the handler returned_(can also be {@code null})_@throws Exception in case of errors;void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,adapter,actually,invoked,the,handler,but,before,the,dispatcher,servlet,renders,the,view,can,expose,additional,model,objects,to,the,view,via,the,given,model,and,view,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,post,process,an,execution,getting,applied,in,inverse,order,of,the,execution,chain,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,async,execution,for,type,and,or,instance,examination,param,model,and,view,the,code,model,and,view,that,the,handler,returned,can,also,be,code,null,throws,exception,in,case,of,errors;void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
HandlerInterceptor -> void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception_;1426885081;Intercept the execution of a handler. Called after HandlerAdapter actually_invoked the handler, but before the DispatcherServlet renders the view._Can expose additional model objects to the view via the given ModelAndView.__<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can post-process an execution,_getting applied in inverse order of the execution chain.__<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}.__@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started async_execution, for type and/or instance examination_@param modelAndView the {@code ModelAndView} that the handler returned_(can also be {@code null})_@throws Exception in case of errors;void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,adapter,actually,invoked,the,handler,but,before,the,dispatcher,servlet,renders,the,view,can,expose,additional,model,objects,to,the,view,via,the,given,model,and,view,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,post,process,an,execution,getting,applied,in,inverse,order,of,the,execution,chain,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,async,execution,for,type,and,or,instance,examination,param,model,and,view,the,code,model,and,view,that,the,handler,returned,can,also,be,code,null,throws,exception,in,case,of,errors;void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
HandlerInterceptor -> void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception_;1427228652;Intercept the execution of a handler. Called after HandlerAdapter actually_invoked the handler, but before the DispatcherServlet renders the view._Can expose additional model objects to the view via the given ModelAndView.__<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can post-process an execution,_getting applied in inverse order of the execution chain.__<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}.__@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started async_execution, for type and/or instance examination_@param modelAndView the {@code ModelAndView} that the handler returned_(can also be {@code null})_@throws Exception in case of errors;void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,adapter,actually,invoked,the,handler,but,before,the,dispatcher,servlet,renders,the,view,can,expose,additional,model,objects,to,the,view,via,the,given,model,and,view,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,post,process,an,execution,getting,applied,in,inverse,order,of,the,execution,chain,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,async,execution,for,type,and,or,instance,examination,param,model,and,view,the,code,model,and,view,that,the,handler,returned,can,also,be,code,null,throws,exception,in,case,of,errors;void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
HandlerInterceptor -> void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception_;1467190636;Intercept the execution of a handler. Called after HandlerAdapter actually_invoked the handler, but before the DispatcherServlet renders the view._Can expose additional model objects to the view via the given ModelAndView._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can post-process an execution,_getting applied in inverse order of the execution chain._<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}._@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started asynchronous_execution, for type and/or instance examination_@param modelAndView the {@code ModelAndView} that the handler returned_(can also be {@code null})_@throws Exception in case of errors;void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,adapter,actually,invoked,the,handler,but,before,the,dispatcher,servlet,renders,the,view,can,expose,additional,model,objects,to,the,view,via,the,given,model,and,view,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,post,process,an,execution,getting,applied,in,inverse,order,of,the,execution,chain,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,asynchronous,execution,for,type,and,or,instance,examination,param,model,and,view,the,code,model,and,view,that,the,handler,returned,can,also,be,code,null,throws,exception,in,case,of,errors;void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
HandlerInterceptor -> boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) 	    throws Exception_;1328020251;Intercept the execution of a handler. Called after HandlerMapping determined_an appropriate handler object, but before HandlerAdapter invokes the handler._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can decide to abort the execution chain,_typically sending a HTTP error or writing a custom response._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance evaluation_@return <code>true</code> if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself._@throws Exception in case of errors;boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)_	    throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,mapping,determined,an,appropriate,handler,object,but,before,handler,adapter,invokes,the,handler,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,decide,to,abort,the,execution,chain,typically,sending,a,http,error,or,writing,a,custom,response,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,evaluation,return,code,true,code,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself,throws,exception,in,case,of,errors;boolean,pre,handle,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception
HandlerInterceptor -> boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) 	    throws Exception_;1344035753;Intercept the execution of a handler. Called after HandlerMapping determined_an appropriate handler object, but before HandlerAdapter invokes the handler._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can decide to abort the execution chain,_typically sending a HTTP error or writing a custom response._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance evaluation_@return <code>true</code> if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself._@throws Exception in case of errors;boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)_	    throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,mapping,determined,an,appropriate,handler,object,but,before,handler,adapter,invokes,the,handler,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,decide,to,abort,the,execution,chain,typically,sending,a,http,error,or,writing,a,custom,response,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,evaluation,return,code,true,code,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself,throws,exception,in,case,of,errors;boolean,pre,handle,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception
HandlerInterceptor -> boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) 	    throws Exception_;1348061150;Intercept the execution of a handler. Called after HandlerMapping determined_an appropriate handler object, but before HandlerAdapter invokes the handler._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can decide to abort the execution chain,_typically sending a HTTP error or writing a custom response._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance evaluation_@return <code>true</code> if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself._@throws Exception in case of errors;boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)_	    throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,mapping,determined,an,appropriate,handler,object,but,before,handler,adapter,invokes,the,handler,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,decide,to,abort,the,execution,chain,typically,sending,a,http,error,or,writing,a,custom,response,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,evaluation,return,code,true,code,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself,throws,exception,in,case,of,errors;boolean,pre,handle,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception
HandlerInterceptor -> boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) 	    throws Exception_;1356735495;Intercept the execution of a handler. Called after HandlerMapping determined_an appropriate handler object, but before HandlerAdapter invokes the handler._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can decide to abort the execution chain,_typically sending a HTTP error or writing a custom response._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance evaluation_@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself._@throws Exception in case of errors;boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)_	    throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,mapping,determined,an,appropriate,handler,object,but,before,handler,adapter,invokes,the,handler,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,decide,to,abort,the,execution,chain,typically,sending,a,http,error,or,writing,a,custom,response,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,evaluation,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself,throws,exception,in,case,of,errors;boolean,pre,handle,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception
HandlerInterceptor -> boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) 	    throws Exception_;1414619099;Intercept the execution of a handler. Called after HandlerMapping determined_an appropriate handler object, but before HandlerAdapter invokes the handler._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can decide to abort the execution chain,_typically sending a HTTP error or writing a custom response._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance evaluation_@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself._@throws Exception in case of errors;boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)_	    throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,mapping,determined,an,appropriate,handler,object,but,before,handler,adapter,invokes,the,handler,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,decide,to,abort,the,execution,chain,typically,sending,a,http,error,or,writing,a,custom,response,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,evaluation,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself,throws,exception,in,case,of,errors;boolean,pre,handle,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception
HandlerInterceptor -> boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) 	    throws Exception_;1426885081;Intercept the execution of a handler. Called after HandlerMapping determined_an appropriate handler object, but before HandlerAdapter invokes the handler.__<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can decide to abort the execution chain,_typically sending a HTTP error or writing a custom response.__<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}.__@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance evaluation_@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself._@throws Exception in case of errors;boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)_	    throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,mapping,determined,an,appropriate,handler,object,but,before,handler,adapter,invokes,the,handler,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,decide,to,abort,the,execution,chain,typically,sending,a,http,error,or,writing,a,custom,response,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,evaluation,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself,throws,exception,in,case,of,errors;boolean,pre,handle,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception
HandlerInterceptor -> boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) 	    throws Exception_;1427228652;Intercept the execution of a handler. Called after HandlerMapping determined_an appropriate handler object, but before HandlerAdapter invokes the handler.__<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can decide to abort the execution chain,_typically sending a HTTP error or writing a custom response.__<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}.__@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance evaluation_@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself._@throws Exception in case of errors;boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)_	    throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,mapping,determined,an,appropriate,handler,object,but,before,handler,adapter,invokes,the,handler,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,decide,to,abort,the,execution,chain,typically,sending,a,http,error,or,writing,a,custom,response,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,evaluation,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself,throws,exception,in,case,of,errors;boolean,pre,handle,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception
HandlerInterceptor -> boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) 	    throws Exception_;1467190636;Intercept the execution of a handler. Called after HandlerMapping determined_an appropriate handler object, but before HandlerAdapter invokes the handler._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can decide to abort the execution chain,_typically sending a HTTP error or writing a custom response._<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance evaluation_@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself._@throws Exception in case of errors;boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)_	    throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,mapping,determined,an,appropriate,handler,object,but,before,handler,adapter,invokes,the,handler,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,decide,to,abort,the,execution,chain,typically,sending,a,http,error,or,writing,a,custom,response,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,evaluation,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself,throws,exception,in,case,of,errors;boolean,pre,handle,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception
HandlerInterceptor -> default void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) 			throws Exception;1495868221;Intercept the execution of a handler. Called after HandlerAdapter actually_invoked the handler, but before the DispatcherServlet renders the view._Can expose additional model objects to the view via the given ModelAndView._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can post-process an execution,_getting applied in inverse order of the execution chain._<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}._<p>The default implementation is empty._@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started asynchronous_execution, for type and/or instance examination_@param modelAndView the {@code ModelAndView} that the handler returned_(can also be {@code null})_@throws Exception in case of errors;default void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView)_			throws Exception {_	};intercept,the,execution,of,a,handler,called,after,handler,adapter,actually,invoked,the,handler,but,before,the,dispatcher,servlet,renders,the,view,can,expose,additional,model,objects,to,the,view,via,the,given,model,and,view,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,post,process,an,execution,getting,applied,in,inverse,order,of,the,execution,chain,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,p,the,default,implementation,is,empty,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,asynchronous,execution,for,type,and,or,instance,examination,param,model,and,view,the,code,model,and,view,that,the,handler,returned,can,also,be,code,null,throws,exception,in,case,of,errors;default,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,nullable,model,and,view,model,and,view,throws,exception
HandlerInterceptor -> default void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) 			throws Exception;1496837955;Intercept the execution of a handler. Called after HandlerAdapter actually_invoked the handler, but before the DispatcherServlet renders the view._Can expose additional model objects to the view via the given ModelAndView._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can post-process an execution,_getting applied in inverse order of the execution chain._<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}._<p>The default implementation is empty._@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started asynchronous_execution, for type and/or instance examination_@param modelAndView the {@code ModelAndView} that the handler returned_(can also be {@code null})_@throws Exception in case of errors;default void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView)_			throws Exception {_	};intercept,the,execution,of,a,handler,called,after,handler,adapter,actually,invoked,the,handler,but,before,the,dispatcher,servlet,renders,the,view,can,expose,additional,model,objects,to,the,view,via,the,given,model,and,view,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,post,process,an,execution,getting,applied,in,inverse,order,of,the,execution,chain,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,p,the,default,implementation,is,empty,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,asynchronous,execution,for,type,and,or,instance,examination,param,model,and,view,the,code,model,and,view,that,the,handler,returned,can,also,be,code,null,throws,exception,in,case,of,errors;default,void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,nullable,model,and,view,model,and,view,throws,exception
HandlerInterceptor -> void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception_;1414619099;Callback after completion of request processing, that is, after rendering_the view. Will be called on any outcome of handler execution, thus allows_for proper resource cleanup._<p>Note: Will only be called if this interceptor's {@code preHandle}_method has successfully completed and returned {@code true}!_<p>As with the {@code postHandle} method, the method will be invoked on each_interceptor in the chain in reverse order, so the first interceptor will be_the last to be invoked._@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started async_execution, for type and/or instance examination_@param ex exception thrown on handler execution, if any_@throws Exception in case of errors;void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception_;callback,after,completion,of,request,processing,that,is,after,rendering,the,view,will,be,called,on,any,outcome,of,handler,execution,thus,allows,for,proper,resource,cleanup,p,note,will,only,be,called,if,this,interceptor,s,code,pre,handle,method,has,successfully,completed,and,returned,code,true,p,as,with,the,code,post,handle,method,the,method,will,be,invoked,on,each,interceptor,in,the,chain,in,reverse,order,so,the,first,interceptor,will,be,the,last,to,be,invoked,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,async,execution,for,type,and,or,instance,examination,param,ex,exception,thrown,on,handler,execution,if,any,throws,exception,in,case,of,errors;void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
HandlerInterceptor -> void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception_;1426885081;Callback after completion of request processing, that is, after rendering_the view. Will be called on any outcome of handler execution, thus allows_for proper resource cleanup.__<p>Note: Will only be called if this interceptor's {@code preHandle}_method has successfully completed and returned {@code true}!__<p>As with the {@code postHandle} method, the method will be invoked on each_interceptor in the chain in reverse order, so the first interceptor will be_the last to be invoked.__<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}.__@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started async_execution, for type and/or instance examination_@param ex exception thrown on handler execution, if any_@throws Exception in case of errors;void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception_;callback,after,completion,of,request,processing,that,is,after,rendering,the,view,will,be,called,on,any,outcome,of,handler,execution,thus,allows,for,proper,resource,cleanup,p,note,will,only,be,called,if,this,interceptor,s,code,pre,handle,method,has,successfully,completed,and,returned,code,true,p,as,with,the,code,post,handle,method,the,method,will,be,invoked,on,each,interceptor,in,the,chain,in,reverse,order,so,the,first,interceptor,will,be,the,last,to,be,invoked,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,async,execution,for,type,and,or,instance,examination,param,ex,exception,thrown,on,handler,execution,if,any,throws,exception,in,case,of,errors;void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
HandlerInterceptor -> void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception_;1427228652;Callback after completion of request processing, that is, after rendering_the view. Will be called on any outcome of handler execution, thus allows_for proper resource cleanup.__<p>Note: Will only be called if this interceptor's {@code preHandle}_method has successfully completed and returned {@code true}!__<p>As with the {@code postHandle} method, the method will be invoked on each_interceptor in the chain in reverse order, so the first interceptor will be_the last to be invoked.__<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}.__@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started async_execution, for type and/or instance examination_@param ex exception thrown on handler execution, if any_@throws Exception in case of errors;void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception_;callback,after,completion,of,request,processing,that,is,after,rendering,the,view,will,be,called,on,any,outcome,of,handler,execution,thus,allows,for,proper,resource,cleanup,p,note,will,only,be,called,if,this,interceptor,s,code,pre,handle,method,has,successfully,completed,and,returned,code,true,p,as,with,the,code,post,handle,method,the,method,will,be,invoked,on,each,interceptor,in,the,chain,in,reverse,order,so,the,first,interceptor,will,be,the,last,to,be,invoked,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,async,execution,for,type,and,or,instance,examination,param,ex,exception,thrown,on,handler,execution,if,any,throws,exception,in,case,of,errors;void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
HandlerInterceptor -> void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception_;1467190636;Callback after completion of request processing, that is, after rendering_the view. Will be called on any outcome of handler execution, thus allows_for proper resource cleanup._<p>Note: Will only be called if this interceptor's {@code preHandle}_method has successfully completed and returned {@code true}!_<p>As with the {@code postHandle} method, the method will be invoked on each_interceptor in the chain in reverse order, so the first interceptor will be_the last to be invoked._<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}._@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started asynchronous_execution, for type and/or instance examination_@param ex exception thrown on handler execution, if any_@throws Exception in case of errors;void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception_;callback,after,completion,of,request,processing,that,is,after,rendering,the,view,will,be,called,on,any,outcome,of,handler,execution,thus,allows,for,proper,resource,cleanup,p,note,will,only,be,called,if,this,interceptor,s,code,pre,handle,method,has,successfully,completed,and,returned,code,true,p,as,with,the,code,post,handle,method,the,method,will,be,invoked,on,each,interceptor,in,the,chain,in,reverse,order,so,the,first,interceptor,will,be,the,last,to,be,invoked,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,asynchronous,execution,for,type,and,or,instance,examination,param,ex,exception,thrown,on,handler,execution,if,any,throws,exception,in,case,of,errors;void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
HandlerInterceptor -> default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) 			throws Exception;1467810608;Intercept the execution of a handler. Called after HandlerMapping determined_an appropriate handler object, but before HandlerAdapter invokes the handler._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can decide to abort the execution chain,_typically sending a HTTP error or writing a custom response._<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}._<p>The default implementation returns {@code true}._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance evaluation_@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself._@throws Exception in case of errors;default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)_			throws Exception {__		return true__	};intercept,the,execution,of,a,handler,called,after,handler,mapping,determined,an,appropriate,handler,object,but,before,handler,adapter,invokes,the,handler,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,decide,to,abort,the,execution,chain,typically,sending,a,http,error,or,writing,a,custom,response,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,p,the,default,implementation,returns,code,true,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,evaluation,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself,throws,exception,in,case,of,errors;default,boolean,pre,handle,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception,return,true
HandlerInterceptor -> default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) 			throws Exception;1495868221;Intercept the execution of a handler. Called after HandlerMapping determined_an appropriate handler object, but before HandlerAdapter invokes the handler._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can decide to abort the execution chain,_typically sending a HTTP error or writing a custom response._<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}._<p>The default implementation returns {@code true}._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance evaluation_@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself._@throws Exception in case of errors;default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)_			throws Exception {__		return true__	};intercept,the,execution,of,a,handler,called,after,handler,mapping,determined,an,appropriate,handler,object,but,before,handler,adapter,invokes,the,handler,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,decide,to,abort,the,execution,chain,typically,sending,a,http,error,or,writing,a,custom,response,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,p,the,default,implementation,returns,code,true,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,evaluation,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself,throws,exception,in,case,of,errors;default,boolean,pre,handle,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception,return,true
HandlerInterceptor -> default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) 			throws Exception;1496837955;Intercept the execution of a handler. Called after HandlerMapping determined_an appropriate handler object, but before HandlerAdapter invokes the handler._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can decide to abort the execution chain,_typically sending a HTTP error or writing a custom response._<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}._<p>The default implementation returns {@code true}._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance evaluation_@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself._@throws Exception in case of errors;default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)_			throws Exception {__		return true__	};intercept,the,execution,of,a,handler,called,after,handler,mapping,determined,an,appropriate,handler,object,but,before,handler,adapter,invokes,the,handler,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,decide,to,abort,the,execution,chain,typically,sending,a,http,error,or,writing,a,custom,response,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,p,the,default,implementation,returns,code,true,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,evaluation,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself,throws,exception,in,case,of,errors;default,boolean,pre,handle,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception,return,true
HandlerInterceptor -> default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) 			throws Exception;1500495740;Intercept the execution of a handler. Called after HandlerMapping determined_an appropriate handler object, but before HandlerAdapter invokes the handler._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can decide to abort the execution chain,_typically sending a HTTP error or writing a custom response._<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}._<p>The default implementation returns {@code true}._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance evaluation_@return {@code true} if the execution chain should proceed with the_next interceptor or the handler itself. Else, DispatcherServlet assumes_that this interceptor has already dealt with the response itself._@throws Exception in case of errors;default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)_			throws Exception {__		return true__	};intercept,the,execution,of,a,handler,called,after,handler,mapping,determined,an,appropriate,handler,object,but,before,handler,adapter,invokes,the,handler,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,decide,to,abort,the,execution,chain,typically,sending,a,http,error,or,writing,a,custom,response,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,p,the,default,implementation,returns,code,true,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,evaluation,return,code,true,if,the,execution,chain,should,proceed,with,the,next,interceptor,or,the,handler,itself,else,dispatcher,servlet,assumes,that,this,interceptor,has,already,dealt,with,the,response,itself,throws,exception,in,case,of,errors;default,boolean,pre,handle,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception,return,true
HandlerInterceptor -> void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception_;1328020251;Intercept the execution of a handler. Called after HandlerAdapter actually_invoked the handler, but before the DispatcherServlet renders the view._Can expose additional model objects to the view via the given ModelAndView._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can post-process an execution,_getting applied in inverse order of the execution chain._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance examination_@param modelAndView the <code>ModelAndView</code> that the handler returned_(can also be <code>null</code>)_@throws Exception in case of errors;void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,adapter,actually,invoked,the,handler,but,before,the,dispatcher,servlet,renders,the,view,can,expose,additional,model,objects,to,the,view,via,the,given,model,and,view,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,post,process,an,execution,getting,applied,in,inverse,order,of,the,execution,chain,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,examination,param,model,and,view,the,code,model,and,view,code,that,the,handler,returned,can,also,be,code,null,code,throws,exception,in,case,of,errors;void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
HandlerInterceptor -> void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception_;1344035753;Intercept the execution of a handler. Called after HandlerAdapter actually_invoked the handler, but before the DispatcherServlet renders the view._Can expose additional model objects to the view via the given ModelAndView._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can post-process an execution,_getting applied in inverse order of the execution chain._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance examination_@param modelAndView the <code>ModelAndView</code> that the handler returned_(can also be <code>null</code>)_@throws Exception in case of errors;void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,adapter,actually,invoked,the,handler,but,before,the,dispatcher,servlet,renders,the,view,can,expose,additional,model,objects,to,the,view,via,the,given,model,and,view,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,post,process,an,execution,getting,applied,in,inverse,order,of,the,execution,chain,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,examination,param,model,and,view,the,code,model,and,view,code,that,the,handler,returned,can,also,be,code,null,code,throws,exception,in,case,of,errors;void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
HandlerInterceptor -> void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception_;1348061150;Intercept the execution of a handler. Called after HandlerAdapter actually_invoked the handler, but before the DispatcherServlet renders the view._Can expose additional model objects to the view via the given ModelAndView._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can post-process an execution,_getting applied in inverse order of the execution chain._@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started async_execution, for type and/or instance examination_@param modelAndView the <code>ModelAndView</code> that the handler returned_(can also be <code>null</code>)_@throws Exception in case of errors;void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,adapter,actually,invoked,the,handler,but,before,the,dispatcher,servlet,renders,the,view,can,expose,additional,model,objects,to,the,view,via,the,given,model,and,view,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,post,process,an,execution,getting,applied,in,inverse,order,of,the,execution,chain,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,async,execution,for,type,and,or,instance,examination,param,model,and,view,the,code,model,and,view,code,that,the,handler,returned,can,also,be,code,null,code,throws,exception,in,case,of,errors;void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
HandlerInterceptor -> void postHandle( 			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 			throws Exception_;1356735495;Intercept the execution of a handler. Called after HandlerAdapter actually_invoked the handler, but before the DispatcherServlet renders the view._Can expose additional model objects to the view via the given ModelAndView._<p>DispatcherServlet processes a handler in an execution chain, consisting_of any number of interceptors, with the handler itself at the end._With this method, each interceptor can post-process an execution,_getting applied in inverse order of the execution chain._@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started async_execution, for type and/or instance examination_@param modelAndView the {@code ModelAndView} that the handler returned_(can also be {@code null})_@throws Exception in case of errors;void postHandle(_			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)_			throws Exception_;intercept,the,execution,of,a,handler,called,after,handler,adapter,actually,invoked,the,handler,but,before,the,dispatcher,servlet,renders,the,view,can,expose,additional,model,objects,to,the,view,via,the,given,model,and,view,p,dispatcher,servlet,processes,a,handler,in,an,execution,chain,consisting,of,any,number,of,interceptors,with,the,handler,itself,at,the,end,with,this,method,each,interceptor,can,post,process,an,execution,getting,applied,in,inverse,order,of,the,execution,chain,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,async,execution,for,type,and,or,instance,examination,param,model,and,view,the,code,model,and,view,that,the,handler,returned,can,also,be,code,null,throws,exception,in,case,of,errors;void,post,handle,http,servlet,request,request,http,servlet,response,response,object,handler,model,and,view,model,and,view,throws,exception
HandlerInterceptor -> default void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1467810608;Callback after completion of request processing, that is, after rendering_the view. Will be called on any outcome of handler execution, thus allows_for proper resource cleanup._<p>Note: Will only be called if this interceptor's {@code preHandle}_method has successfully completed and returned {@code true}!_<p>As with the {@code postHandle} method, the method will be invoked on each_interceptor in the chain in reverse order, so the first interceptor will be_the last to be invoked._<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}._<p>The default implementation is empty._@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started asynchronous_execution, for type and/or instance examination_@param ex exception thrown on handler execution, if any_@throws Exception in case of errors;default void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};callback,after,completion,of,request,processing,that,is,after,rendering,the,view,will,be,called,on,any,outcome,of,handler,execution,thus,allows,for,proper,resource,cleanup,p,note,will,only,be,called,if,this,interceptor,s,code,pre,handle,method,has,successfully,completed,and,returned,code,true,p,as,with,the,code,post,handle,method,the,method,will,be,invoked,on,each,interceptor,in,the,chain,in,reverse,order,so,the,first,interceptor,will,be,the,last,to,be,invoked,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,p,the,default,implementation,is,empty,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,asynchronous,execution,for,type,and,or,instance,examination,param,ex,exception,thrown,on,handler,execution,if,any,throws,exception,in,case,of,errors;default,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
HandlerInterceptor -> default void afterCompletion( 			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 			throws Exception;1495868221;Callback after completion of request processing, that is, after rendering_the view. Will be called on any outcome of handler execution, thus allows_for proper resource cleanup._<p>Note: Will only be called if this interceptor's {@code preHandle}_method has successfully completed and returned {@code true}!_<p>As with the {@code postHandle} method, the method will be invoked on each_interceptor in the chain in reverse order, so the first interceptor will be_the last to be invoked._<p><strong>Note:</strong> special considerations apply for asynchronous_request processing. For more details see_{@link org.springframework.web.servlet.AsyncHandlerInterceptor}._<p>The default implementation is empty._@param request current HTTP request_@param response current HTTP response_@param handler handler (or {@link HandlerMethod}) that started asynchronous_execution, for type and/or instance examination_@param ex exception thrown on handler execution, if any_@throws Exception in case of errors;default void afterCompletion(_			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)_			throws Exception {_	};callback,after,completion,of,request,processing,that,is,after,rendering,the,view,will,be,called,on,any,outcome,of,handler,execution,thus,allows,for,proper,resource,cleanup,p,note,will,only,be,called,if,this,interceptor,s,code,pre,handle,method,has,successfully,completed,and,returned,code,true,p,as,with,the,code,post,handle,method,the,method,will,be,invoked,on,each,interceptor,in,the,chain,in,reverse,order,so,the,first,interceptor,will,be,the,last,to,be,invoked,p,strong,note,strong,special,considerations,apply,for,asynchronous,request,processing,for,more,details,see,link,org,springframework,web,servlet,async,handler,interceptor,p,the,default,implementation,is,empty,param,request,current,http,request,param,response,current,http,response,param,handler,handler,or,link,handler,method,that,started,asynchronous,execution,for,type,and,or,instance,examination,param,ex,exception,thrown,on,handler,execution,if,any,throws,exception,in,case,of,errors;default,void,after,completion,http,servlet,request,request,http,servlet,response,response,object,handler,exception,ex,throws,exception
