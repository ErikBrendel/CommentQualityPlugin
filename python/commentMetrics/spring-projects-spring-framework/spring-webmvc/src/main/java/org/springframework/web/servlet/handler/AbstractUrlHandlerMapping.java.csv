# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request);1328020251;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request) {_		request.setAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,handler,mapping,best,matching,pattern,request,set,attribute,handler,mapping,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request);1337188970;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request) {_		request.setAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,handler,mapping,best,matching,pattern,request,set,attribute,handler,mapping,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request);1337286955;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request) {_		request.setAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,handler,mapping,best,matching,pattern,request,set,attribute,handler,mapping,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request);1356735495;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request) {_		request.setAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,handler,mapping,best,matching,pattern,request,set,attribute,handler,mapping,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request);1413848647;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request) {_		request.setAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,handler,mapping,best,matching,pattern,request,set,attribute,handler,mapping,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request);1428953605;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request) {_		request.setAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,handler,mapping,best,matching,pattern,request,set,attribute,handler,mapping,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request);1467051782;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request) {_		request.setAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,handler,mapping,best,matching,pattern,request,set,attribute,handler,mapping,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request);1467290306;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request) {_		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,best,matching,pattern,request,set,attribute,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request);1467730834;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request) {_		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,best,matching,pattern,request,set,attribute,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request);1485810955;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request) {_		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,best,matching,pattern,request,set,attribute,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request);1495868221;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request) {_		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,best,matching,pattern,request,set,attribute,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request);1496837955;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request) {_		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,best,matching,pattern,request,set,attribute,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request);1500448076;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request) {_		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,best,matching,pattern,request,set,attribute,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request);1502974979;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, HttpServletRequest request) {_		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,best,matching,pattern,request,set,attribute,path,within,mapping
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1328020251;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1337188970;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1337286955;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1356735495;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1413848647;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1428953605;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1467051782;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1467290306;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1467730834;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1485810955;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1495868221;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1496837955;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1500448076;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1502974979;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1508532146;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1518772998;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1529361191;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1529721864;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1530174524;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1542771062;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected boolean supportsTypeLevelMappings();1551080576;Indicates whether this handler mapping support type-level mappings. Default to {@code false}.;protected boolean supportsTypeLevelMappings() {_		return false__	};indicates,whether,this,handler,mapping,support,type,level,mappings,default,to,code,false;protected,boolean,supports,type,level,mappings,return,false
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables);1495868221;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,nullable,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables);1496837955;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,nullable,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables);1500448076;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,nullable,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables);1502974979;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,nullable,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables);1508532146;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,nullable,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables);1518772998;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,nullable,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables);1529361191;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,nullable,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables);1529721864;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,nullable,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables);1530174524;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,nullable,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables);1542771062;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,nullable,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables);1551080576;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, @Nullable Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,nullable,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, 			HttpServletRequest request);1508532146;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping,_			HttpServletRequest request) {__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,best,matching,pattern,request,set,attribute,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, 			HttpServletRequest request);1518772998;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping,_			HttpServletRequest request) {__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,best,matching,pattern,request,set,attribute,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, 			HttpServletRequest request);1529361191;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping,_			HttpServletRequest request) {__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,best,matching,pattern,request,set,attribute,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, 			HttpServletRequest request);1529721864;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping,_			HttpServletRequest request) {__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,best,matching,pattern,request,set,attribute,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, 			HttpServletRequest request);1530174524;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping,_			HttpServletRequest request) {__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,best,matching,pattern,request,set,attribute,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, 			HttpServletRequest request);1542771062;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping,_			HttpServletRequest request) {__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,best,matching,pattern,request,set,attribute,path,within,mapping
AbstractUrlHandlerMapping -> protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping, 			HttpServletRequest request);1551080576;Expose the path within the current mapping as request attribute._@param pathWithinMapping the path within the current mapping_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposePathWithinMapping(String bestMatchingPattern, String pathWithinMapping,_			HttpServletRequest request) {__		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestMatchingPattern)__		request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping)__	};expose,the,path,within,the,current,mapping,as,request,attribute,param,path,within,mapping,the,path,within,the,current,mapping,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,path,within,mapping,string,best,matching,pattern,string,path,within,mapping,http,servlet,request,request,request,set,attribute,best,matching,pattern,request,set,attribute,path,within,mapping
AbstractUrlHandlerMapping -> @Nullable 	public Object getRootHandler();1495868221;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;@Nullable_	public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;nullable,public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> @Nullable 	public Object getRootHandler();1496837955;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;@Nullable_	public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;nullable,public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> @Nullable 	public Object getRootHandler();1500448076;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;@Nullable_	public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;nullable,public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> @Nullable 	public Object getRootHandler();1502974979;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;@Nullable_	public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;nullable,public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> @Nullable 	public Object getRootHandler();1508532146;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;@Nullable_	public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;nullable,public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> @Nullable 	public Object getRootHandler();1518772998;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;@Nullable_	public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;nullable,public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> @Nullable 	public Object getRootHandler();1529361191;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;@Nullable_	public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;nullable,public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> @Nullable 	public Object getRootHandler();1529721864;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;@Nullable_	public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;nullable,public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> @Nullable 	public Object getRootHandler();1530174524;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;@Nullable_	public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;nullable,public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> @Nullable 	public Object getRootHandler();1542771062;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;@Nullable_	public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;nullable,public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> @Nullable 	public Object getRootHandler();1551080576;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;@Nullable_	public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;nullable,public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1328020251;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1337188970;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1337286955;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1356735495;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1413848647;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1428953605;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1467051782;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1467290306;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1467730834;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1485810955;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1495868221;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1496837955;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1500448076;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1502974979;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1508532146;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1518772998;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1529361191;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1529721864;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1530174524;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1542771062;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException;1551080576;Register the specified handler for the given URL paths._@param urlPaths the URLs that the bean should be mapped to_@param beanName the name of the handler bean_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String[] urlPaths, String beanName) throws BeansException, IllegalStateException {_		Assert.notNull(urlPaths, "URL path array must not be null")__		for (String urlPath : urlPaths) {_			registerHandler(urlPath, beanName)__		}_	};register,the,specified,handler,for,the,given,url,paths,param,url,paths,the,urls,that,the,bean,should,be,mapped,to,param,bean,name,the,name,of,the,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,paths,string,bean,name,throws,beans,exception,illegal,state,exception,assert,not,null,url,paths,url,path,array,must,not,be,null,for,string,url,path,url,paths,register,handler,url,path,bean,name
AbstractUrlHandlerMapping -> protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1328020251;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or <code>null</code> if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}_		_		List<String> matchingPatterns = new ArrayList<String>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_		}_		String bestPatternMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			Collections.sort(matchingPatterns, patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestPatternMatch = matchingPatterns.get(0)__		}_		if (bestPatternMatch != null) {_			handler = this.handlerMap.get(bestPatternMatch)__			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestPatternMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<String, String>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestPatternMatch, matchingPattern) == 0) {_					uriTemplateVariables_							.putAll(getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath))__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestPatternMatch, pathWithinMapping, uriTemplateVariables)__		}_		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,code,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,string,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,pattern,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,collections,sort,matching,patterns,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,pattern,match,matching,patterns,get,0,if,best,pattern,match,null,handler,this,handler,map,get,best,pattern,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,pattern,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,string,string,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,pattern,match,matching,pattern,0,uri,template,variables,put,all,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,pattern,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1337188970;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or <code>null</code> if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}_		_		List<String> matchingPatterns = new ArrayList<String>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_		}_		String bestPatternMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			Collections.sort(matchingPatterns, patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestPatternMatch = matchingPatterns.get(0)__		}_		if (bestPatternMatch != null) {_			handler = this.handlerMap.get(bestPatternMatch)__			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestPatternMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<String, String>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestPatternMatch, matchingPattern) == 0) {_					uriTemplateVariables_							.putAll(getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath))__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestPatternMatch, pathWithinMapping, uriTemplateVariables)__		}_		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,code,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,string,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,pattern,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,collections,sort,matching,patterns,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,pattern,match,matching,patterns,get,0,if,best,pattern,match,null,handler,this,handler,map,get,best,pattern,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,pattern,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,string,string,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,pattern,match,matching,pattern,0,uri,template,variables,put,all,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,pattern,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1337286955;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or <code>null</code> if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}_		_		List<String> matchingPatterns = new ArrayList<String>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_		}_		String bestPatternMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			Collections.sort(matchingPatterns, patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestPatternMatch = matchingPatterns.get(0)__		}_		if (bestPatternMatch != null) {_			handler = this.handlerMap.get(bestPatternMatch)__			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestPatternMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<String, String>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestPatternMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestPatternMatch, pathWithinMapping, uriTemplateVariables)__		}_		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,code,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,string,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,pattern,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,collections,sort,matching,patterns,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,pattern,match,matching,patterns,get,0,if,best,pattern,match,null,handler,this,handler,map,get,best,pattern,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,pattern,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,string,string,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,pattern,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,pattern,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1356735495;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}_		_		List<String> matchingPatterns = new ArrayList<String>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_		}_		String bestPatternMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			Collections.sort(matchingPatterns, patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestPatternMatch = matchingPatterns.get(0)__		}_		if (bestPatternMatch != null) {_			handler = this.handlerMap.get(bestPatternMatch)__			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestPatternMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<String, String>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestPatternMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestPatternMatch, pathWithinMapping, uriTemplateVariables)__		}_		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,string,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,pattern,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,collections,sort,matching,patterns,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,pattern,match,matching,patterns,get,0,if,best,pattern,match,null,handler,this,handler,map,get,best,pattern,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,pattern,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,string,string,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,pattern,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,pattern,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1413848647;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}_		_		List<String> matchingPatterns = new ArrayList<String>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_		}_		String bestPatternMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			Collections.sort(matchingPatterns, patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestPatternMatch = matchingPatterns.get(0)__		}_		if (bestPatternMatch != null) {_			handler = this.handlerMap.get(bestPatternMatch)__			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestPatternMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<String, String>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestPatternMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestPatternMatch, pathWithinMapping, uriTemplateVariables)__		}_		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,string,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,pattern,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,collections,sort,matching,patterns,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,pattern,match,matching,patterns,get,0,if,best,pattern,match,null,handler,this,handler,map,get,best,pattern,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,pattern,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,string,string,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,pattern,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,pattern,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1428953605;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}_		_		List<String> matchingPatterns = new ArrayList<String>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern +"/")__				}_			}_		}_		String bestPatternMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			Collections.sort(matchingPatterns, patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestPatternMatch = matchingPatterns.get(0)__		}_		if (bestPatternMatch != null) {_			handler = this.handlerMap.get(bestPatternMatch)__			if (handler == null) {_				Assert.isTrue(bestPatternMatch.endsWith("/"))__				handler = this.handlerMap.get(bestPatternMatch.substring(0, bestPatternMatch.length() - 1))__			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestPatternMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<String, String>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestPatternMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestPatternMatch, pathWithinMapping, uriTemplateVariables)__		}_		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,string,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,pattern,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,collections,sort,matching,patterns,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,pattern,match,matching,patterns,get,0,if,best,pattern,match,null,handler,this,handler,map,get,best,pattern,match,if,handler,null,assert,is,true,best,pattern,match,ends,with,handler,this,handler,map,get,best,pattern,match,substring,0,best,pattern,match,length,1,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,pattern,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,string,string,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,pattern,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,pattern,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1467051782;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}_		_		List<String> matchingPatterns = new ArrayList<String>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern +"/")__				}_			}_		}_		String bestPatternMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			Collections.sort(matchingPatterns, patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestPatternMatch = matchingPatterns.get(0)__		}_		if (bestPatternMatch != null) {_			handler = this.handlerMap.get(bestPatternMatch)__			if (handler == null) {_				Assert.isTrue(bestPatternMatch.endsWith("/"))__				handler = this.handlerMap.get(bestPatternMatch.substring(0, bestPatternMatch.length() - 1))__			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestPatternMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<String, String>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestPatternMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestPatternMatch, pathWithinMapping, uriTemplateVariables)__		}_		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,string,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,pattern,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,collections,sort,matching,patterns,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,pattern,match,matching,patterns,get,0,if,best,pattern,match,null,handler,this,handler,map,get,best,pattern,match,if,handler,null,assert,is,true,best,pattern,match,ends,with,handler,this,handler,map,get,best,pattern,match,substring,0,best,pattern,match,length,1,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,pattern,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,string,string,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,pattern,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,pattern,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1467290306;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}_		_		List<String> matchingPatterns = new ArrayList<String>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern +"/")__				}_			}_		}_		String bestPatternMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			Collections.sort(matchingPatterns, patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestPatternMatch = matchingPatterns.get(0)__		}_		if (bestPatternMatch != null) {_			handler = this.handlerMap.get(bestPatternMatch)__			if (handler == null) {_				Assert.isTrue(bestPatternMatch.endsWith("/"))__				handler = this.handlerMap.get(bestPatternMatch.substring(0, bestPatternMatch.length() - 1))__			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestPatternMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<String, String>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestPatternMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestPatternMatch, pathWithinMapping, uriTemplateVariables)__		}_		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,string,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,pattern,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,collections,sort,matching,patterns,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,pattern,match,matching,patterns,get,0,if,best,pattern,match,null,handler,this,handler,map,get,best,pattern,match,if,handler,null,assert,is,true,best,pattern,match,ends,with,handler,this,handler,map,get,best,pattern,match,substring,0,best,pattern,match,length,1,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,pattern,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,string,string,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,pattern,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,pattern,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1467730834;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}_		_		List<String> matchingPatterns = new ArrayList<>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern +"/")__				}_			}_		}_		String bestPatternMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			Collections.sort(matchingPatterns, patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestPatternMatch = matchingPatterns.get(0)__		}_		if (bestPatternMatch != null) {_			handler = this.handlerMap.get(bestPatternMatch)__			if (handler == null) {_				Assert.isTrue(bestPatternMatch.endsWith("/"))__				handler = this.handlerMap.get(bestPatternMatch.substring(0, bestPatternMatch.length() - 1))__			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestPatternMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestPatternMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestPatternMatch, pathWithinMapping, uriTemplateVariables)__		}_		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,pattern,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,collections,sort,matching,patterns,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,pattern,match,matching,patterns,get,0,if,best,pattern,match,null,handler,this,handler,map,get,best,pattern,match,if,handler,null,assert,is,true,best,pattern,match,ends,with,handler,this,handler,map,get,best,pattern,match,substring,0,best,pattern,match,length,1,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,pattern,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,pattern,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,pattern,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1485810955;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}__		_		List<String> matchingPatterns = new ArrayList<>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern +"/")__				}_			}_		}__		String bestMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			Collections.sort(matchingPatterns, patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestMatch = matchingPatterns.get(0)__		}_		if (bestMatch != null) {_			handler = this.handlerMap.get(bestMatch)__			if (handler == null) {_				if (bestMatch.endsWith("/")) {_					handler = this.handlerMap.get(bestMatch.substring(0, bestMatch.length() - 1))__				}_				if (handler == null) {_					throw new IllegalStateException(_							"Could not find handler for best pattern match [" + bestMatch + "]")__				}_			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestMatch, pathWithinMapping, uriTemplateVariables)__		}__		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,collections,sort,matching,patterns,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,match,matching,patterns,get,0,if,best,match,null,handler,this,handler,map,get,best,match,if,handler,null,if,best,match,ends,with,handler,this,handler,map,get,best,match,substring,0,best,match,length,1,if,handler,null,throw,new,illegal,state,exception,could,not,find,handler,for,best,pattern,match,best,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> @Nullable 	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1495868221;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}__		_		List<String> matchingPatterns = new ArrayList<>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern +"/")__				}_			}_		}__		String bestMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			Collections.sort(matchingPatterns, patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestMatch = matchingPatterns.get(0)__		}_		if (bestMatch != null) {_			handler = this.handlerMap.get(bestMatch)__			if (handler == null) {_				if (bestMatch.endsWith("/")) {_					handler = this.handlerMap.get(bestMatch.substring(0, bestMatch.length() - 1))__				}_				if (handler == null) {_					throw new IllegalStateException(_							"Could not find handler for best pattern match [" + bestMatch + "]")__				}_			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = getApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestMatch, pathWithinMapping, uriTemplateVariables)__		}__		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;nullable,protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,collections,sort,matching,patterns,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,match,matching,patterns,get,0,if,best,match,null,handler,this,handler,map,get,best,match,if,handler,null,if,best,match,ends,with,handler,this,handler,map,get,best,match,substring,0,best,match,length,1,if,handler,null,throw,new,illegal,state,exception,could,not,find,handler,for,best,pattern,match,best,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,get,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> @Nullable 	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1496837955;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}__		_		List<String> matchingPatterns = new ArrayList<>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern +"/")__				}_			}_		}__		String bestMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			Collections.sort(matchingPatterns, patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestMatch = matchingPatterns.get(0)__		}_		if (bestMatch != null) {_			handler = this.handlerMap.get(bestMatch)__			if (handler == null) {_				if (bestMatch.endsWith("/")) {_					handler = this.handlerMap.get(bestMatch.substring(0, bestMatch.length() - 1))__				}_				if (handler == null) {_					throw new IllegalStateException(_							"Could not find handler for best pattern match [" + bestMatch + "]")__				}_			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestMatch, pathWithinMapping, uriTemplateVariables)__		}__		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;nullable,protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,collections,sort,matching,patterns,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,match,matching,patterns,get,0,if,best,match,null,handler,this,handler,map,get,best,match,if,handler,null,if,best,match,ends,with,handler,this,handler,map,get,best,match,substring,0,best,match,length,1,if,handler,null,throw,new,illegal,state,exception,could,not,find,handler,for,best,pattern,match,best,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> @Nullable 	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1500448076;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}__		_		List<String> matchingPatterns = new ArrayList<>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern +"/")__				}_			}_		}__		String bestMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			Collections.sort(matchingPatterns, patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestMatch = matchingPatterns.get(0)__		}_		if (bestMatch != null) {_			handler = this.handlerMap.get(bestMatch)__			if (handler == null) {_				if (bestMatch.endsWith("/")) {_					handler = this.handlerMap.get(bestMatch.substring(0, bestMatch.length() - 1))__				}_				if (handler == null) {_					throw new IllegalStateException(_							"Could not find handler for best pattern match [" + bestMatch + "]")__				}_			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestMatch, pathWithinMapping, uriTemplateVariables)__		}__		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;nullable,protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,collections,sort,matching,patterns,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,match,matching,patterns,get,0,if,best,match,null,handler,this,handler,map,get,best,match,if,handler,null,if,best,match,ends,with,handler,this,handler,map,get,best,match,substring,0,best,match,length,1,if,handler,null,throw,new,illegal,state,exception,could,not,find,handler,for,best,pattern,match,best,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> @Nullable 	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1502974979;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}__		_		List<String> matchingPatterns = new ArrayList<>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern +"/")__				}_			}_		}__		String bestMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			Collections.sort(matchingPatterns, patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestMatch = matchingPatterns.get(0)__		}_		if (bestMatch != null) {_			handler = this.handlerMap.get(bestMatch)__			if (handler == null) {_				if (bestMatch.endsWith("/")) {_					handler = this.handlerMap.get(bestMatch.substring(0, bestMatch.length() - 1))__				}_				if (handler == null) {_					throw new IllegalStateException(_							"Could not find handler for best pattern match [" + bestMatch + "]")__				}_			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestMatch, pathWithinMapping, uriTemplateVariables)__		}__		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;nullable,protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,collections,sort,matching,patterns,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,match,matching,patterns,get,0,if,best,match,null,handler,this,handler,map,get,best,match,if,handler,null,if,best,match,ends,with,handler,this,handler,map,get,best,match,substring,0,best,match,length,1,if,handler,null,throw,new,illegal,state,exception,could,not,find,handler,for,best,pattern,match,best,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> @Nullable 	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1508532146;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}__		_		List<String> matchingPatterns = new ArrayList<>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern +"/")__				}_			}_		}__		String bestMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			Collections.sort(matchingPatterns, patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestMatch = matchingPatterns.get(0)__		}_		if (bestMatch != null) {_			handler = this.handlerMap.get(bestMatch)__			if (handler == null) {_				if (bestMatch.endsWith("/")) {_					handler = this.handlerMap.get(bestMatch.substring(0, bestMatch.length() - 1))__				}_				if (handler == null) {_					throw new IllegalStateException(_							"Could not find handler for best pattern match [" + bestMatch + "]")__				}_			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestMatch, pathWithinMapping, uriTemplateVariables)__		}__		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;nullable,protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,collections,sort,matching,patterns,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,match,matching,patterns,get,0,if,best,match,null,handler,this,handler,map,get,best,match,if,handler,null,if,best,match,ends,with,handler,this,handler,map,get,best,match,substring,0,best,match,length,1,if,handler,null,throw,new,illegal,state,exception,could,not,find,handler,for,best,pattern,match,best,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> @Nullable 	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1518772998;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}__		_		List<String> matchingPatterns = new ArrayList<>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern +"/")__				}_			}_		}__		String bestMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			matchingPatterns.sort(patternComparator)__			if (logger.isDebugEnabled()) {_				logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns)__			}_			bestMatch = matchingPatterns.get(0)__		}_		if (bestMatch != null) {_			handler = this.handlerMap.get(bestMatch)__			if (handler == null) {_				if (bestMatch.endsWith("/")) {_					handler = this.handlerMap.get(bestMatch.substring(0, bestMatch.length() - 1))__				}_				if (handler == null) {_					throw new IllegalStateException(_							"Could not find handler for best pattern match [" + bestMatch + "]")__				}_			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isDebugEnabled()) {_				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestMatch, pathWithinMapping, uriTemplateVariables)__		}__		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;nullable,protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,matching,patterns,sort,pattern,comparator,if,logger,is,debug,enabled,logger,debug,matching,patterns,for,request,url,path,are,matching,patterns,best,match,matching,patterns,get,0,if,best,match,null,handler,this,handler,map,get,best,match,if,handler,null,if,best,match,ends,with,handler,this,handler,map,get,best,match,substring,0,best,match,length,1,if,handler,null,throw,new,illegal,state,exception,could,not,find,handler,for,best,pattern,match,best,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,debug,enabled,logger,debug,uri,template,variables,for,request,url,path,are,uri,template,variables,return,build,path,exposing,handler,handler,best,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> @Nullable 	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1529361191;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}__		_		List<String> matchingPatterns = new ArrayList<>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern +"/")__				}_			}_		}__		String bestMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			matchingPatterns.sort(patternComparator)__			if (logger.isTraceEnabled() && matchingPatterns.size() > 1) {_				logger.trace("Matching patterns " + matchingPatterns)__			}_			bestMatch = matchingPatterns.get(0)__		}_		if (bestMatch != null) {_			handler = this.handlerMap.get(bestMatch)__			if (handler == null) {_				if (bestMatch.endsWith("/")) {_					handler = this.handlerMap.get(bestMatch.substring(0, bestMatch.length() - 1))__				}_				if (handler == null) {_					throw new IllegalStateException(_							"Could not find handler for best pattern match [" + bestMatch + "]")__				}_			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isTraceEnabled() && uriTemplateVariables.size() > 0) {_				logger.trace("URI variables " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestMatch, pathWithinMapping, uriTemplateVariables)__		}__		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;nullable,protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,matching,patterns,sort,pattern,comparator,if,logger,is,trace,enabled,matching,patterns,size,1,logger,trace,matching,patterns,matching,patterns,best,match,matching,patterns,get,0,if,best,match,null,handler,this,handler,map,get,best,match,if,handler,null,if,best,match,ends,with,handler,this,handler,map,get,best,match,substring,0,best,match,length,1,if,handler,null,throw,new,illegal,state,exception,could,not,find,handler,for,best,pattern,match,best,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,trace,enabled,uri,template,variables,size,0,logger,trace,uri,variables,uri,template,variables,return,build,path,exposing,handler,handler,best,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> @Nullable 	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1529721864;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}__		_		List<String> matchingPatterns = new ArrayList<>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern +"/")__				}_			}_		}__		String bestMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			matchingPatterns.sort(patternComparator)__			if (logger.isTraceEnabled() && matchingPatterns.size() > 1) {_				logger.trace("Matching patterns " + matchingPatterns)__			}_			bestMatch = matchingPatterns.get(0)__		}_		if (bestMatch != null) {_			handler = this.handlerMap.get(bestMatch)__			if (handler == null) {_				if (bestMatch.endsWith("/")) {_					handler = this.handlerMap.get(bestMatch.substring(0, bestMatch.length() - 1))__				}_				if (handler == null) {_					throw new IllegalStateException(_							"Could not find handler for best pattern match [" + bestMatch + "]")__				}_			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isTraceEnabled() && uriTemplateVariables.size() > 0) {_				logger.trace("URI variables " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestMatch, pathWithinMapping, uriTemplateVariables)__		}__		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;nullable,protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,matching,patterns,sort,pattern,comparator,if,logger,is,trace,enabled,matching,patterns,size,1,logger,trace,matching,patterns,matching,patterns,best,match,matching,patterns,get,0,if,best,match,null,handler,this,handler,map,get,best,match,if,handler,null,if,best,match,ends,with,handler,this,handler,map,get,best,match,substring,0,best,match,length,1,if,handler,null,throw,new,illegal,state,exception,could,not,find,handler,for,best,pattern,match,best,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,trace,enabled,uri,template,variables,size,0,logger,trace,uri,variables,uri,template,variables,return,build,path,exposing,handler,handler,best,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> @Nullable 	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1530174524;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath the URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}__		_		List<String> matchingPatterns = new ArrayList<>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern +"/")__				}_			}_		}__		String bestMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			matchingPatterns.sort(patternComparator)__			if (logger.isTraceEnabled() && matchingPatterns.size() > 1) {_				logger.trace("Matching patterns " + matchingPatterns)__			}_			bestMatch = matchingPatterns.get(0)__		}_		if (bestMatch != null) {_			handler = this.handlerMap.get(bestMatch)__			if (handler == null) {_				if (bestMatch.endsWith("/")) {_					handler = this.handlerMap.get(bestMatch.substring(0, bestMatch.length() - 1))__				}_				if (handler == null) {_					throw new IllegalStateException(_							"Could not find handler for best pattern match [" + bestMatch + "]")__				}_			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isTraceEnabled() && uriTemplateVariables.size() > 0) {_				logger.trace("URI variables " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestMatch, pathWithinMapping, uriTemplateVariables)__		}__		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,the,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;nullable,protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,matching,patterns,sort,pattern,comparator,if,logger,is,trace,enabled,matching,patterns,size,1,logger,trace,matching,patterns,matching,patterns,best,match,matching,patterns,get,0,if,best,match,null,handler,this,handler,map,get,best,match,if,handler,null,if,best,match,ends,with,handler,this,handler,map,get,best,match,substring,0,best,match,length,1,if,handler,null,throw,new,illegal,state,exception,could,not,find,handler,for,best,pattern,match,best,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,trace,enabled,uri,template,variables,size,0,logger,trace,uri,variables,uri,template,variables,return,build,path,exposing,handler,handler,best,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> @Nullable 	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1542771062;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath the URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}__		_		List<String> matchingPatterns = new ArrayList<>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern +"/")__				}_			}_		}__		String bestMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			matchingPatterns.sort(patternComparator)__			if (logger.isTraceEnabled() && matchingPatterns.size() > 1) {_				logger.trace("Matching patterns " + matchingPatterns)__			}_			bestMatch = matchingPatterns.get(0)__		}_		if (bestMatch != null) {_			handler = this.handlerMap.get(bestMatch)__			if (handler == null) {_				if (bestMatch.endsWith("/")) {_					handler = this.handlerMap.get(bestMatch.substring(0, bestMatch.length() - 1))__				}_				if (handler == null) {_					throw new IllegalStateException(_							"Could not find handler for best pattern match [" + bestMatch + "]")__				}_			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isTraceEnabled() && uriTemplateVariables.size() > 0) {_				logger.trace("URI variables " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestMatch, pathWithinMapping, uriTemplateVariables)__		}__		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,the,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;nullable,protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,matching,patterns,sort,pattern,comparator,if,logger,is,trace,enabled,matching,patterns,size,1,logger,trace,matching,patterns,matching,patterns,best,match,matching,patterns,get,0,if,best,match,null,handler,this,handler,map,get,best,match,if,handler,null,if,best,match,ends,with,handler,this,handler,map,get,best,match,substring,0,best,match,length,1,if,handler,null,throw,new,illegal,state,exception,could,not,find,handler,for,best,pattern,match,best,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,trace,enabled,uri,template,variables,size,0,logger,trace,uri,variables,uri,template,variables,return,build,path,exposing,handler,handler,best,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> @Nullable 	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception;1551080576;Look up a handler instance for the given URL path._<p>Supports direct matches, e.g. a registered "/test" matches "/test",_and various Ant-style pattern matches, e.g. a registered "/t*" matches_both "/test" and "/team". For details, see the AntPathMatcher class._<p>Looks for the most exact pattern, where most exact is defined as_the longest path pattern._@param urlPath the URL the bean is mapped to_@param request current HTTP request (to expose the path within the mapping to)_@return the associated handler instance, or {@code null} if not found_@see #exposePathWithinMapping_@see org.springframework.util.AntPathMatcher;@Nullable_	protected Object lookupHandler(String urlPath, HttpServletRequest request) throws Exception {_		_		Object handler = this.handlerMap.get(urlPath)__		if (handler != null) {_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			return buildPathExposingHandler(handler, urlPath, urlPath, null)__		}__		_		List<String> matchingPatterns = new ArrayList<>()__		for (String registeredPattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(registeredPattern, urlPath)) {_				matchingPatterns.add(registeredPattern)__			}_			else if (useTrailingSlashMatch()) {_				if (!registeredPattern.endsWith("/") && getPathMatcher().match(registeredPattern + "/", urlPath)) {_					matchingPatterns.add(registeredPattern + "/")__				}_			}_		}__		String bestMatch = null__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath)__		if (!matchingPatterns.isEmpty()) {_			matchingPatterns.sort(patternComparator)__			if (logger.isTraceEnabled() && matchingPatterns.size() > 1) {_				logger.trace("Matching patterns " + matchingPatterns)__			}_			bestMatch = matchingPatterns.get(0)__		}_		if (bestMatch != null) {_			handler = this.handlerMap.get(bestMatch)__			if (handler == null) {_				if (bestMatch.endsWith("/")) {_					handler = this.handlerMap.get(bestMatch.substring(0, bestMatch.length() - 1))__				}_				if (handler == null) {_					throw new IllegalStateException(_							"Could not find handler for best pattern match [" + bestMatch + "]")__				}_			}_			_			if (handler instanceof String) {_				String handlerName = (String) handler__				handler = obtainApplicationContext().getBean(handlerName)__			}_			validateHandler(handler, request)__			String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestMatch, urlPath)___			_			_			Map<String, String> uriTemplateVariables = new LinkedHashMap<>()__			for (String matchingPattern : matchingPatterns) {_				if (patternComparator.compare(bestMatch, matchingPattern) == 0) {_					Map<String, String> vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath)__					Map<String, String> decodedVars = getUrlPathHelper().decodePathVariables(request, vars)__					uriTemplateVariables.putAll(decodedVars)__				}_			}_			if (logger.isTraceEnabled() && uriTemplateVariables.size() > 0) {_				logger.trace("URI variables " + uriTemplateVariables)__			}_			return buildPathExposingHandler(handler, bestMatch, pathWithinMapping, uriTemplateVariables)__		}__		_		return null__	};look,up,a,handler,instance,for,the,given,url,path,p,supports,direct,matches,e,g,a,registered,test,matches,test,and,various,ant,style,pattern,matches,e,g,a,registered,t,matches,both,test,and,team,for,details,see,the,ant,path,matcher,class,p,looks,for,the,most,exact,pattern,where,most,exact,is,defined,as,the,longest,path,pattern,param,url,path,the,url,the,bean,is,mapped,to,param,request,current,http,request,to,expose,the,path,within,the,mapping,to,return,the,associated,handler,instance,or,code,null,if,not,found,see,expose,path,within,mapping,see,org,springframework,util,ant,path,matcher;nullable,protected,object,lookup,handler,string,url,path,http,servlet,request,request,throws,exception,object,handler,this,handler,map,get,url,path,if,handler,null,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,return,build,path,exposing,handler,handler,url,path,url,path,null,list,string,matching,patterns,new,array,list,for,string,registered,pattern,this,handler,map,key,set,if,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,else,if,use,trailing,slash,match,if,registered,pattern,ends,with,get,path,matcher,match,registered,pattern,url,path,matching,patterns,add,registered,pattern,string,best,match,null,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,url,path,if,matching,patterns,is,empty,matching,patterns,sort,pattern,comparator,if,logger,is,trace,enabled,matching,patterns,size,1,logger,trace,matching,patterns,matching,patterns,best,match,matching,patterns,get,0,if,best,match,null,handler,this,handler,map,get,best,match,if,handler,null,if,best,match,ends,with,handler,this,handler,map,get,best,match,substring,0,best,match,length,1,if,handler,null,throw,new,illegal,state,exception,could,not,find,handler,for,best,pattern,match,best,match,if,handler,instanceof,string,string,handler,name,string,handler,handler,obtain,application,context,get,bean,handler,name,validate,handler,handler,request,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,best,match,url,path,map,string,string,uri,template,variables,new,linked,hash,map,for,string,matching,pattern,matching,patterns,if,pattern,comparator,compare,best,match,matching,pattern,0,map,string,string,vars,get,path,matcher,extract,uri,template,variables,matching,pattern,url,path,map,string,string,decoded,vars,get,url,path,helper,decode,path,variables,request,vars,uri,template,variables,put,all,decoded,vars,if,logger,is,trace,enabled,uri,template,variables,size,0,logger,trace,uri,variables,uri,template,variables,return,build,path,exposing,handler,handler,best,match,path,within,mapping,uri,template,variables,return,null
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1328020251;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,handler,mapping,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1337188970;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,handler,mapping,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1337286955;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,handler,mapping,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1356735495;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,handler,mapping,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1413848647;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,handler,mapping,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1428953605;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,handler,mapping,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1467051782;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,handler,mapping,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1467290306;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1467730834;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1485810955;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1495868221;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1496837955;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1500448076;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1502974979;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1508532146;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1518772998;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1529361191;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1529721864;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1530174524;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1542771062;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,uri,template,variables
AbstractUrlHandlerMapping -> protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request);1551080576;Expose the URI templates variables as request attribute._@param uriTemplateVariables the URI template variables_@param request the request to expose the path to_@see #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;protected void exposeUriTemplateVariables(Map<String, String> uriTemplateVariables, HttpServletRequest request) {_		request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)__	};expose,the,uri,templates,variables,as,request,attribute,param,uri,template,variables,the,uri,template,variables,param,request,the,request,to,expose,the,path,to,see;protected,void,expose,uri,template,variables,map,string,string,uri,template,variables,http,servlet,request,request,request,set,attribute,uri,template,variables
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1428953605;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1467051782;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1467290306;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1467730834;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1485810955;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1495868221;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1496837955;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1500448076;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1502974979;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1508532146;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1518772998;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1529361191;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1529721864;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1530174524;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1542771062;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1551080576;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a URL pattern such as "/users" also matches to "/users/"._<p>The default value is {@code false}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,url,pattern,such,as,users,also,matches,to,users,p,the,default,value,is,code,false;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
AbstractUrlHandlerMapping -> public Object getRootHandler();1328020251;Return the root handler for this handler mapping (registered for "/"),_or <code>null</code> if none.;public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,code,if,none;public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> public Object getRootHandler();1337188970;Return the root handler for this handler mapping (registered for "/"),_or <code>null</code> if none.;public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,code,if,none;public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> public Object getRootHandler();1337286955;Return the root handler for this handler mapping (registered for "/"),_or <code>null</code> if none.;public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,code,if,none;public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> public Object getRootHandler();1356735495;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> public Object getRootHandler();1413848647;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> public Object getRootHandler();1428953605;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> public Object getRootHandler();1467051782;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> public Object getRootHandler();1467290306;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> public Object getRootHandler();1467730834;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> public Object getRootHandler();1485810955;Return the root handler for this handler mapping (registered for "/"),_or {@code null} if none.;public Object getRootHandler() {_		return this.rootHandler__	};return,the,root,handler,for,this,handler,mapping,registered,for,or,code,null,if,none;public,object,get,root,handler,return,this,root,handler
AbstractUrlHandlerMapping -> @Override 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1328020251;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or <code>null</code> if none found;@Override_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = getApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,code,if,none,found;override,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,get,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> @Override 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1337188970;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or <code>null</code> if none found;@Override_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = getApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,code,if,none,found;override,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,get,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> @Override 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1337286955;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or <code>null</code> if none found;@Override_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = getApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,code,if,none,found;override,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,get,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> @Override 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1356735495;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = getApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,get,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> @Override 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1413848647;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = getApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,get,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> @Override 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1428953605;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = getApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,get,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> @Override 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1467051782;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = getApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,get,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> @Override 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1467290306;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = getApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,get,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> @Override 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1467730834;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = getApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,get,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> @Override 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1485810955;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = getApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,get,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1328020251;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1337188970;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1337286955;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1356735495;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1413848647;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1428953605;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1467051782;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1467290306;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1467730834;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1485810955;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1495868221;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1496837955;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1500448076;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1502974979;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1508532146;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1518772998;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1529361191;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1529721864;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1530174524;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1542771062;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> public final Map<String, Object> getHandlerMap();1551080576;Return the registered handlers as an unmodifiable Map, with the registered path_as key and the handler object (or handler bean name in case of a lazy-init handler)_as value._@see #getDefaultHandler();public final Map<String, Object> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,the,registered,handlers,as,an,unmodifiable,map,with,the,registered,path,as,key,and,the,handler,object,or,handler,bean,name,in,case,of,a,lazy,init,handler,as,value,see,get,default,handler;public,final,map,string,object,get,handler,map,return,collections,unmodifiable,map,this,handler,map
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1328020251;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			if (getApplicationContext().isSingleton(handlerName)) {_				resolvedHandler = getApplicationContext().getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,if,get,application,context,is,singleton,handler,name,resolved,handler,get,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1337188970;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			if (getApplicationContext().isSingleton(handlerName)) {_				resolvedHandler = getApplicationContext().getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,if,get,application,context,is,singleton,handler,name,resolved,handler,get,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1337286955;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			if (getApplicationContext().isSingleton(handlerName)) {_				resolvedHandler = getApplicationContext().getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,if,get,application,context,is,singleton,handler,name,resolved,handler,get,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1356735495;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			if (getApplicationContext().isSingleton(handlerName)) {_				resolvedHandler = getApplicationContext().getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,if,get,application,context,is,singleton,handler,name,resolved,handler,get,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1413848647;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			if (getApplicationContext().isSingleton(handlerName)) {_				resolvedHandler = getApplicationContext().getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,if,get,application,context,is,singleton,handler,name,resolved,handler,get,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1428953605;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			if (getApplicationContext().isSingleton(handlerName)) {_				resolvedHandler = getApplicationContext().getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,if,get,application,context,is,singleton,handler,name,resolved,handler,get,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1467051782;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			if (getApplicationContext().isSingleton(handlerName)) {_				resolvedHandler = getApplicationContext().getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,if,get,application,context,is,singleton,handler,name,resolved,handler,get,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1467290306;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			if (getApplicationContext().isSingleton(handlerName)) {_				resolvedHandler = getApplicationContext().getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,if,get,application,context,is,singleton,handler,name,resolved,handler,get,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1467730834;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			if (getApplicationContext().isSingleton(handlerName)) {_				resolvedHandler = getApplicationContext().getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,if,get,application,context,is,singleton,handler,name,resolved,handler,get,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1485810955;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			if (getApplicationContext().isSingleton(handlerName)) {_				resolvedHandler = getApplicationContext().getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,if,get,application,context,is,singleton,handler,name,resolved,handler,get,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1495868221;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			if (getApplicationContext().isSingleton(handlerName)) {_				resolvedHandler = getApplicationContext().getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,if,get,application,context,is,singleton,handler,name,resolved,handler,get,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1496837955;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			ApplicationContext applicationContext = obtainApplicationContext()__			if (applicationContext.isSingleton(handlerName)) {_				resolvedHandler = applicationContext.getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,application,context,application,context,obtain,application,context,if,application,context,is,singleton,handler,name,resolved,handler,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1500448076;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			ApplicationContext applicationContext = obtainApplicationContext()__			if (applicationContext.isSingleton(handlerName)) {_				resolvedHandler = applicationContext.getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,application,context,application,context,obtain,application,context,if,application,context,is,singleton,handler,name,resolved,handler,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1502974979;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			ApplicationContext applicationContext = obtainApplicationContext()__			if (applicationContext.isSingleton(handlerName)) {_				resolvedHandler = applicationContext.getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,application,context,application,context,obtain,application,context,if,application,context,is,singleton,handler,name,resolved,handler,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1508532146;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			ApplicationContext applicationContext = obtainApplicationContext()__			if (applicationContext.isSingleton(handlerName)) {_				resolvedHandler = applicationContext.getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,application,context,application,context,obtain,application,context,if,application,context,is,singleton,handler,name,resolved,handler,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1518772998;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			ApplicationContext applicationContext = obtainApplicationContext()__			if (applicationContext.isSingleton(handlerName)) {_				resolvedHandler = applicationContext.getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isInfoEnabled()) {_					logger.info("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isInfoEnabled()) {_					logger.info("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isInfoEnabled()) {_					logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,application,context,application,context,obtain,application,context,if,application,context,is,singleton,handler,name,resolved,handler,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,info,enabled,logger,info,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,info,enabled,logger,info,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1529361191;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			ApplicationContext applicationContext = obtainApplicationContext()__			if (applicationContext.isSingleton(handlerName)) {_				resolvedHandler = applicationContext.getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isTraceEnabled()) {_					logger.trace("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,application,context,application,context,obtain,application,context,if,application,context,is,singleton,handler,name,resolved,handler,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,trace,enabled,logger,trace,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,trace,enabled,logger,trace,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,trace,enabled,logger,trace,mapped,url,path,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1529721864;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			ApplicationContext applicationContext = obtainApplicationContext()__			if (applicationContext.isSingleton(handlerName)) {_				resolvedHandler = applicationContext.getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isTraceEnabled()) {_					logger.trace("Mapped [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,application,context,application,context,obtain,application,context,if,application,context,is,singleton,handler,name,resolved,handler,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,trace,enabled,logger,trace,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,trace,enabled,logger,trace,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,trace,enabled,logger,trace,mapped,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1530174524;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			ApplicationContext applicationContext = obtainApplicationContext()__			if (applicationContext.isSingleton(handlerName)) {_				resolvedHandler = applicationContext.getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isTraceEnabled()) {_					logger.trace("Mapped [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,application,context,application,context,obtain,application,context,if,application,context,is,singleton,handler,name,resolved,handler,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,trace,enabled,logger,trace,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,trace,enabled,logger,trace,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,trace,enabled,logger,trace,mapped,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1542771062;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			ApplicationContext applicationContext = obtainApplicationContext()__			if (applicationContext.isSingleton(handlerName)) {_				resolvedHandler = applicationContext.getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isTraceEnabled()) {_					logger.trace("Mapped [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,application,context,application,context,obtain,application,context,if,application,context,is,singleton,handler,name,resolved,handler,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,trace,enabled,logger,trace,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,trace,enabled,logger,trace,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,trace,enabled,logger,trace,mapped,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException;1551080576;Register the specified handler for the given URL path._@param urlPath the URL the bean should be mapped to_@param handler the handler instance or handler bean name String_(a bean name will automatically be resolved into the corresponding handler bean)_@throws BeansException if the handler couldn't be registered_@throws IllegalStateException if there is a conflicting handler registered;protected void registerHandler(String urlPath, Object handler) throws BeansException, IllegalStateException {_		Assert.notNull(urlPath, "URL path must not be null")__		Assert.notNull(handler, "Handler object must not be null")__		Object resolvedHandler = handler___		_		if (!this.lazyInitHandlers && handler instanceof String) {_			String handlerName = (String) handler__			ApplicationContext applicationContext = obtainApplicationContext()__			if (applicationContext.isSingleton(handlerName)) {_				resolvedHandler = applicationContext.getBean(handlerName)__			}_		}__		Object mappedHandler = this.handlerMap.get(urlPath)__		if (mappedHandler != null) {_			if (mappedHandler != resolvedHandler) {_				throw new IllegalStateException(_						"Cannot map " + getHandlerDescription(handler) + " to URL path [" + urlPath +_						"]: There is already " + getHandlerDescription(mappedHandler) + " mapped.")__			}_		}_		else {_			if (urlPath.equals("/")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Root mapping to " + getHandlerDescription(handler))__				}_				setRootHandler(resolvedHandler)__			}_			else if (urlPath.equals("/*")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Default mapping to " + getHandlerDescription(handler))__				}_				setDefaultHandler(resolvedHandler)__			}_			else {_				this.handlerMap.put(urlPath, resolvedHandler)__				if (logger.isTraceEnabled()) {_					logger.trace("Mapped [" + urlPath + "] onto " + getHandlerDescription(handler))__				}_			}_		}_	};register,the,specified,handler,for,the,given,url,path,param,url,path,the,url,the,bean,should,be,mapped,to,param,handler,the,handler,instance,or,handler,bean,name,string,a,bean,name,will,automatically,be,resolved,into,the,corresponding,handler,bean,throws,beans,exception,if,the,handler,couldn,t,be,registered,throws,illegal,state,exception,if,there,is,a,conflicting,handler,registered;protected,void,register,handler,string,url,path,object,handler,throws,beans,exception,illegal,state,exception,assert,not,null,url,path,url,path,must,not,be,null,assert,not,null,handler,handler,object,must,not,be,null,object,resolved,handler,handler,if,this,lazy,init,handlers,handler,instanceof,string,string,handler,name,string,handler,application,context,application,context,obtain,application,context,if,application,context,is,singleton,handler,name,resolved,handler,application,context,get,bean,handler,name,object,mapped,handler,this,handler,map,get,url,path,if,mapped,handler,null,if,mapped,handler,resolved,handler,throw,new,illegal,state,exception,cannot,map,get,handler,description,handler,to,url,path,url,path,there,is,already,get,handler,description,mapped,handler,mapped,else,if,url,path,equals,if,logger,is,trace,enabled,logger,trace,root,mapping,to,get,handler,description,handler,set,root,handler,resolved,handler,else,if,url,path,equals,if,logger,is,trace,enabled,logger,trace,default,mapping,to,get,handler,description,handler,set,default,handler,resolved,handler,else,this,handler,map,put,url,path,resolved,handler,if,logger,is,trace,enabled,logger,trace,mapped,url,path,onto,get,handler,description,handler
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1328020251;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1337188970;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1337286955;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1356735495;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1413848647;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1428953605;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1467051782;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1467290306;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1467730834;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1485810955;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1495868221;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1496837955;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1500448076;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1502974979;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1508532146;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1518772998;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1529361191;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1529721864;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1530174524;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1542771062;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> public void setLazyInitHandlers(boolean lazyInitHandlers);1551080576;Set whether to lazily initialize handlers. Only applicable to_singleton handlers, as prototypes are always lazily initialized._Default is "false", as eager initialization allows for more efficiency_through referencing the controller objects directly._<p>If you want to allow your controllers to be lazily initialized,_make them "lazy-init" and set this flag to true. Just making them_"lazy-init" will not work, as they are initialized through the_references from the handler mapping in this case.;public void setLazyInitHandlers(boolean lazyInitHandlers) {_		this.lazyInitHandlers = lazyInitHandlers__	};set,whether,to,lazily,initialize,handlers,only,applicable,to,singleton,handlers,as,prototypes,are,always,lazily,initialized,default,is,false,as,eager,initialization,allows,for,more,efficiency,through,referencing,the,controller,objects,directly,p,if,you,want,to,allow,your,controllers,to,be,lazily,initialized,make,them,lazy,init,and,set,this,flag,to,true,just,making,them,lazy,init,will,not,work,as,they,are,initialized,through,the,references,from,the,handler,mapping,in,this,case;public,void,set,lazy,init,handlers,boolean,lazy,init,handlers,this,lazy,init,handlers,lazy,init,handlers
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, Map<String, String> uriTemplateVariables);1328020251;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be <code>null</code> if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,code,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, Map<String, String> uriTemplateVariables);1337188970;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be <code>null</code> if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,code,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, Map<String, String> uriTemplateVariables);1337286955;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be <code>null</code> if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,code,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, Map<String, String> uriTemplateVariables);1356735495;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, Map<String, String> uriTemplateVariables);1413848647;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, Map<String, String> uriTemplateVariables);1428953605;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, Map<String, String> uriTemplateVariables);1467051782;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, Map<String, String> uriTemplateVariables);1467290306;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, Map<String, String> uriTemplateVariables);1467730834;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, 			String pathWithinMapping, Map<String, String> uriTemplateVariables);1485810955;Build a handler object for the given raw handler, exposing the actual_handler, the {@link #PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE}, as well as_the {@link #URI_TEMPLATE_VARIABLES_ATTRIBUTE} before executing the handler._<p>The default implementation builds a {@link HandlerExecutionChain}_with a special interceptor that exposes the path attribute and uri template variables_@param rawHandler the raw handler to expose_@param pathWithinMapping the path to expose before executing the handler_@param uriTemplateVariables the URI template variables, can be {@code null} if no variables found_@return the final handler object;protected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern,_			String pathWithinMapping, Map<String, String> uriTemplateVariables) {__		HandlerExecutionChain chain = new HandlerExecutionChain(rawHandler)__		chain.addInterceptor(new PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping))__		if (!CollectionUtils.isEmpty(uriTemplateVariables)) {_			chain.addInterceptor(new UriTemplateVariablesHandlerInterceptor(uriTemplateVariables))__		}_		return chain__	};build,a,handler,object,for,the,given,raw,handler,exposing,the,actual,handler,the,link,as,well,as,the,link,before,executing,the,handler,p,the,default,implementation,builds,a,link,handler,execution,chain,with,a,special,interceptor,that,exposes,the,path,attribute,and,uri,template,variables,param,raw,handler,the,raw,handler,to,expose,param,path,within,mapping,the,path,to,expose,before,executing,the,handler,param,uri,template,variables,the,uri,template,variables,can,be,code,null,if,no,variables,found,return,the,final,handler,object;protected,object,build,path,exposing,handler,object,raw,handler,string,best,matching,pattern,string,path,within,mapping,map,string,string,uri,template,variables,handler,execution,chain,chain,new,handler,execution,chain,raw,handler,chain,add,interceptor,new,path,exposing,handler,interceptor,best,matching,pattern,path,within,mapping,if,collection,utils,is,empty,uri,template,variables,chain,add,interceptor,new,uri,template,variables,handler,interceptor,uri,template,variables,return,chain
AbstractUrlHandlerMapping -> public void setRootHandler(Object rootHandler);1328020251;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is <code>null</code>, indicating no root handler.;public void setRootHandler(Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,code,indicating,no,root,handler;public,void,set,root,handler,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(Object rootHandler);1337188970;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is <code>null</code>, indicating no root handler.;public void setRootHandler(Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,code,indicating,no,root,handler;public,void,set,root,handler,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(Object rootHandler);1337286955;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is <code>null</code>, indicating no root handler.;public void setRootHandler(Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,code,indicating,no,root,handler;public,void,set,root,handler,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(Object rootHandler);1356735495;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(Object rootHandler);1413848647;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(Object rootHandler);1428953605;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(Object rootHandler);1467051782;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(Object rootHandler);1467290306;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(Object rootHandler);1467730834;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(Object rootHandler);1485810955;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(Object rootHandler);1495868221;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(Object rootHandler);1496837955;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1428953605;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1467051782;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1467290306;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1467730834;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1485810955;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1495868221;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1496837955;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1500448076;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1502974979;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1508532146;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1518772998;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1529361191;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1529721864;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1530174524;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1542771062;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> public boolean useTrailingSlashMatch();1551080576;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1328020251;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1337188970;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1337286955;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1356735495;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1413848647;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1428953605;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1467051782;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1467290306;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1467730834;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1485810955;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1495868221;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1496837955;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1500448076;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1502974979;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1508532146;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1518772998;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1529361191;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1529721864;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1530174524;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1542771062;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> protected void validateHandler(Object handler, HttpServletRequest request) throws Exception;1551080576;Validate the given handler against the current request._<p>The default implementation is empty. Can be overridden in subclasses,_for example to enforce specific preconditions expressed in URL mappings._@param handler the handler object to validate_@param request current HTTP request_@throws Exception if validation failed;protected void validateHandler(Object handler, HttpServletRequest request) throws Exception {_	};validate,the,given,handler,against,the,current,request,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,for,example,to,enforce,specific,preconditions,expressed,in,url,mappings,param,handler,the,handler,object,to,validate,param,request,current,http,request,throws,exception,if,validation,failed;protected,void,validate,handler,object,handler,http,servlet,request,request,throws,exception
AbstractUrlHandlerMapping -> @Override 	@Nullable 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1495868221;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	@Nullable_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = getApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,nullable,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,get,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> @Override 	@Nullable 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1496837955;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	@Nullable_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = obtainApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,nullable,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,obtain,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> @Override 	@Nullable 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1500448076;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	@Nullable_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = obtainApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,nullable,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,obtain,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> @Override 	@Nullable 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1502974979;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	@Nullable_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = obtainApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,nullable,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,obtain,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> @Override 	@Nullable 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1508532146;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	@Nullable_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = obtainApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,nullable,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,obtain,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> @Override 	@Nullable 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1518772998;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	@Nullable_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = obtainApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		if (handler != null && logger.isDebugEnabled()) {_			logger.debug("Mapping [" + lookupPath + "] to " + handler)__		}_		else if (handler == null && logger.isTraceEnabled()) {_			logger.trace("No handler mapping found for [" + lookupPath + "]")__		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,nullable,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,obtain,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,if,handler,null,logger,is,debug,enabled,logger,debug,mapping,lookup,path,to,handler,else,if,handler,null,logger,is,trace,enabled,logger,trace,no,handler,mapping,found,for,lookup,path,return,handler
AbstractUrlHandlerMapping -> @Override 	@Nullable 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1529361191;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	@Nullable_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = obtainApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,nullable,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,obtain,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,return,handler
AbstractUrlHandlerMapping -> @Override 	@Nullable 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1529721864;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	@Nullable_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = obtainApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,nullable,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,obtain,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,return,handler
AbstractUrlHandlerMapping -> @Override 	@Nullable 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1530174524;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	@Nullable_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = obtainApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,nullable,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,obtain,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,return,handler
AbstractUrlHandlerMapping -> @Override 	@Nullable 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1542771062;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	@Nullable_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = obtainApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,nullable,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,obtain,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,return,handler
AbstractUrlHandlerMapping -> @Override 	@Nullable 	protected Object getHandlerInternal(HttpServletRequest request) throws Exception;1551080576;Look up a handler for the URL path of the given request._@param request current HTTP request_@return the handler instance, or {@code null} if none found;@Override_	@Nullable_	protected Object getHandlerInternal(HttpServletRequest request) throws Exception {_		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request)__		Object handler = lookupHandler(lookupPath, request)__		if (handler == null) {_			_			_			Object rawHandler = null__			if ("/".equals(lookupPath)) {_				rawHandler = getRootHandler()__			}_			if (rawHandler == null) {_				rawHandler = getDefaultHandler()__			}_			if (rawHandler != null) {_				_				if (rawHandler instanceof String) {_					String handlerName = (String) rawHandler__					rawHandler = obtainApplicationContext().getBean(handlerName)__				}_				validateHandler(rawHandler, request)__				handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, null)__			}_		}_		return handler__	};look,up,a,handler,for,the,url,path,of,the,given,request,param,request,current,http,request,return,the,handler,instance,or,code,null,if,none,found;override,nullable,protected,object,get,handler,internal,http,servlet,request,request,throws,exception,string,lookup,path,get,url,path,helper,get,lookup,path,for,request,request,object,handler,lookup,handler,lookup,path,request,if,handler,null,object,raw,handler,null,if,equals,lookup,path,raw,handler,get,root,handler,if,raw,handler,null,raw,handler,get,default,handler,if,raw,handler,null,if,raw,handler,instanceof,string,string,handler,name,string,raw,handler,raw,handler,obtain,application,context,get,bean,handler,name,validate,handler,raw,handler,request,handler,build,path,exposing,handler,raw,handler,lookup,path,lookup,path,null,return,handler
AbstractUrlHandlerMapping -> public void setRootHandler(@Nullable Object rootHandler);1500448076;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(@Nullable Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,nullable,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(@Nullable Object rootHandler);1502974979;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(@Nullable Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,nullable,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(@Nullable Object rootHandler);1508532146;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(@Nullable Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,nullable,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(@Nullable Object rootHandler);1518772998;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(@Nullable Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,nullable,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(@Nullable Object rootHandler);1529361191;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(@Nullable Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,nullable,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(@Nullable Object rootHandler);1529721864;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(@Nullable Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,nullable,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(@Nullable Object rootHandler);1530174524;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(@Nullable Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,nullable,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(@Nullable Object rootHandler);1542771062;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(@Nullable Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,nullable,object,root,handler,this,root,handler,root,handler
AbstractUrlHandlerMapping -> public void setRootHandler(@Nullable Object rootHandler);1551080576;Set the root handler for this handler mapping, that is,_the handler to be registered for the root path ("/")._<p>Default is {@code null}, indicating no root handler.;public void setRootHandler(@Nullable Object rootHandler) {_		this.rootHandler = rootHandler__	};set,the,root,handler,for,this,handler,mapping,that,is,the,handler,to,be,registered,for,the,root,path,p,default,is,code,null,indicating,no,root,handler;public,void,set,root,handler,nullable,object,root,handler,this,root,handler,root,handler
