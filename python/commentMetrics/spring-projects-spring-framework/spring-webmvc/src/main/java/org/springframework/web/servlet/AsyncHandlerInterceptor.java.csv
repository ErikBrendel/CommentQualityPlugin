# id;timestamp;commentText;codeText;commentWords;codeWords
AsyncHandlerInterceptor -> void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response)_;1344035753;Called instead of {@code postHandle} and {@code afterCompletion}, when the_a handler is being executed concurrently. Implementations may use the provided_request and response but should avoid modifying them in ways that would_conflict with the concurrent execution of the handler. A typical use of_this method would be to clean thread local variables.__@param request the current request_@param response the current response;void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response)_;called,instead,of,code,post,handle,and,code,after,completion,when,the,a,handler,is,being,executed,concurrently,implementations,may,use,the,provided,request,and,response,but,should,avoid,modifying,them,in,ways,that,would,conflict,with,the,concurrent,execution,of,the,handler,a,typical,use,of,this,method,would,be,to,clean,thread,local,variables,param,request,the,current,request,param,response,the,current,response;void,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response
AsyncHandlerInterceptor -> void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response)_;1347067811;Called instead of {@code postHandle} and {@code afterCompletion}, when the_a handler is being executed concurrently. Implementations may use the provided_request and response but should avoid modifying them in ways that would_conflict with the concurrent execution of the handler. A typical use of_this method would be to clean thread local variables.__@param request the current request_@param response the current response;void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response)_;called,instead,of,code,post,handle,and,code,after,completion,when,the,a,handler,is,being,executed,concurrently,implementations,may,use,the,provided,request,and,response,but,should,avoid,modifying,them,in,ways,that,would,conflict,with,the,concurrent,execution,of,the,handler,a,typical,use,of,this,method,would,be,to,clean,thread,local,variables,param,request,the,current,request,param,response,the,current,response;void,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response
AsyncHandlerInterceptor -> void afterConcurrentHandlingStarted( 			HttpServletRequest request, HttpServletResponse response, Object handler) 			throws Exception_;1348061150;Called instead of {@code postHandle} and {@code afterCompletion}, when_the a handler is being executed concurrently. Implementations may use the_provided request and response but should avoid modifying them in ways_that would conflict with the concurrent execution of the handler. A_typical use of this method would be to clean thread local variables.__@param request the current request_@param response the current response_@param handler handler (or {@link HandlerMethod}) that started async_execution, for type and/or instance examination_@throws Exception in case of errors;void afterConcurrentHandlingStarted(_			HttpServletRequest request, HttpServletResponse response, Object handler)_			throws Exception_;called,instead,of,code,post,handle,and,code,after,completion,when,the,a,handler,is,being,executed,concurrently,implementations,may,use,the,provided,request,and,response,but,should,avoid,modifying,them,in,ways,that,would,conflict,with,the,concurrent,execution,of,the,handler,a,typical,use,of,this,method,would,be,to,clean,thread,local,variables,param,request,the,current,request,param,response,the,current,response,param,handler,handler,or,link,handler,method,that,started,async,execution,for,type,and,or,instance,examination,throws,exception,in,case,of,errors;void,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception
AsyncHandlerInterceptor -> void afterConcurrentHandlingStarted( 			HttpServletRequest request, HttpServletResponse response, Object handler) 			throws Exception_;1355313310;Called instead of {@code postHandle} and {@code afterCompletion}, when_the a handler is being executed concurrently. Implementations may use the_provided request and response but should avoid modifying them in ways_that would conflict with the concurrent execution of the handler. A_typical use of this method would be to clean thread local variables.__@param request the current request_@param response the current response_@param handler handler (or {@link HandlerMethod}) that started async_execution, for type and/or instance examination_@throws Exception in case of errors;void afterConcurrentHandlingStarted(_			HttpServletRequest request, HttpServletResponse response, Object handler)_			throws Exception_;called,instead,of,code,post,handle,and,code,after,completion,when,the,a,handler,is,being,executed,concurrently,implementations,may,use,the,provided,request,and,response,but,should,avoid,modifying,them,in,ways,that,would,conflict,with,the,concurrent,execution,of,the,handler,a,typical,use,of,this,method,would,be,to,clean,thread,local,variables,param,request,the,current,request,param,response,the,current,response,param,handler,handler,or,link,handler,method,that,started,async,execution,for,type,and,or,instance,examination,throws,exception,in,case,of,errors;void,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception
AsyncHandlerInterceptor -> void afterConcurrentHandlingStarted( 			HttpServletRequest request, HttpServletResponse response, Object handler) 			throws Exception_;1426885081;Called instead of {@code postHandle} and {@code afterCompletion}, when_the a handler is being executed concurrently. Implementations may use the_provided request and response but should avoid modifying them in ways_that would conflict with the concurrent execution of the handler. A_typical use of this method would be to clean thread local variables.__@param request the current request_@param response the current response_@param handler handler (or {@link HandlerMethod}) that started async_execution, for type and/or instance examination_@throws Exception in case of errors;void afterConcurrentHandlingStarted(_			HttpServletRequest request, HttpServletResponse response, Object handler)_			throws Exception_;called,instead,of,code,post,handle,and,code,after,completion,when,the,a,handler,is,being,executed,concurrently,implementations,may,use,the,provided,request,and,response,but,should,avoid,modifying,them,in,ways,that,would,conflict,with,the,concurrent,execution,of,the,handler,a,typical,use,of,this,method,would,be,to,clean,thread,local,variables,param,request,the,current,request,param,response,the,current,response,param,handler,handler,or,link,handler,method,that,started,async,execution,for,type,and,or,instance,examination,throws,exception,in,case,of,errors;void,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception
AsyncHandlerInterceptor -> void afterConcurrentHandlingStarted( 			HttpServletRequest request, HttpServletResponse response, Object handler) 			throws Exception_;1444116924;Called instead of {@code postHandle} and {@code afterCompletion}, when_the a handler is being executed concurrently._<p>Implementations may use the provided request and response but should_avoid modifying them in ways that would conflict with the concurrent_execution of the handler. A typical use of this method would be to_clean up thread-local variables.__@param request the current request_@param response the current response_@param handler the handler (or {@link HandlerMethod}) that started async_execution, for type and/or instance examination_@throws Exception in case of errors;void afterConcurrentHandlingStarted(_			HttpServletRequest request, HttpServletResponse response, Object handler)_			throws Exception_;called,instead,of,code,post,handle,and,code,after,completion,when,the,a,handler,is,being,executed,concurrently,p,implementations,may,use,the,provided,request,and,response,but,should,avoid,modifying,them,in,ways,that,would,conflict,with,the,concurrent,execution,of,the,handler,a,typical,use,of,this,method,would,be,to,clean,up,thread,local,variables,param,request,the,current,request,param,response,the,current,response,param,handler,the,handler,or,link,handler,method,that,started,async,execution,for,type,and,or,instance,examination,throws,exception,in,case,of,errors;void,after,concurrent,handling,started,http,servlet,request,request,http,servlet,response,response,object,handler,throws,exception
AsyncHandlerInterceptor -> AbstractDelegatingCallable getAsyncCallable(HttpServletRequest request, HttpServletResponse response, Object handler)_;1336162578;Invoked <em>after</em> {@link #preHandle(WebRequest)} and <em>before</em>_the handler is executed. The returned {@link Callable} is used only if_handler execution leads to teh start of async processing. It is invoked_the async thread before the request is handled fro._<p>Implementations can use this <code>Callable</code> to initialize_ThreadLocal attributes on the async thread._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance examination_@return a {@link Callable} instance or <code>null</code>;AbstractDelegatingCallable getAsyncCallable(HttpServletRequest request, HttpServletResponse response, Object handler)_;invoked,em,after,em,link,pre,handle,web,request,and,em,before,em,the,handler,is,executed,the,returned,link,callable,is,used,only,if,handler,execution,leads,to,teh,start,of,async,processing,it,is,invoked,the,async,thread,before,the,request,is,handled,fro,p,implementations,can,use,this,code,callable,code,to,initialize,thread,local,attributes,on,the,async,thread,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,examination,return,a,link,callable,instance,or,code,null,code;abstract,delegating,callable,get,async,callable,http,servlet,request,request,http,servlet,response,response,object,handler
AsyncHandlerInterceptor -> AbstractDelegatingCallable getAsyncCallable(HttpServletRequest request, HttpServletResponse response, Object handler)_;1342803001;Invoked <em>after</em> {@link #preHandle(WebRequest)} and <em>before</em>_the handler is executed. The returned {@link Callable} is used only if_handler execution leads to teh start of async processing. It is invoked_the async thread before the request is handled fro._<p>Implementations can use this <code>Callable</code> to initialize_ThreadLocal attributes on the async thread._@param request current HTTP request_@param response current HTTP response_@param handler chosen handler to execute, for type and/or instance examination_@return a {@link Callable} instance or <code>null</code>;AbstractDelegatingCallable getAsyncCallable(HttpServletRequest request, HttpServletResponse response, Object handler)_;invoked,em,after,em,link,pre,handle,web,request,and,em,before,em,the,handler,is,executed,the,returned,link,callable,is,used,only,if,handler,execution,leads,to,teh,start,of,async,processing,it,is,invoked,the,async,thread,before,the,request,is,handled,fro,p,implementations,can,use,this,code,callable,code,to,initialize,thread,local,attributes,on,the,async,thread,param,request,current,http,request,param,response,current,http,response,param,handler,chosen,handler,to,execute,for,type,and,or,instance,examination,return,a,link,callable,instance,or,code,null,code;abstract,delegating,callable,get,async,callable,http,servlet,request,request,http,servlet,response,response,object,handler
