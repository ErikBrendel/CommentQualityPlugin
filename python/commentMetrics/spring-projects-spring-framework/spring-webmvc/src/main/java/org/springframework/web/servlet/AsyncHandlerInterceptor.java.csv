commented;modifiers;parameterAmount;loc;comment;code
true;default;3;3;/**  * Called instead of {@code postHandle} and {@code afterCompletion}  * when the handler is being executed concurrently.  * <p>Implementations may use the provided request and response but should  * avoid modifying them in ways that would conflict with the concurrent  * execution of the handler. A typical use of this method would be to  * clean up thread-local variables.  * @param request the current request  * @param response the current response  * @param handler the handler (or {@link HandlerMethod}) that started async  * execution, for type and/or instance examination  * @throws Exception in case of errors  */ ;/**  * Called instead of {@code postHandle} and {@code afterCompletion}  * when the handler is being executed concurrently.  * <p>Implementations may use the provided request and response but should  * avoid modifying them in ways that would conflict with the concurrent  * execution of the handler. A typical use of this method would be to  * clean up thread-local variables.  * @param request the current request  * @param response the current response  * @param handler the handler (or {@link HandlerMethod}) that started async  * execution, for type and/or instance examination  * @throws Exception in case of errors  */ default void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { }
