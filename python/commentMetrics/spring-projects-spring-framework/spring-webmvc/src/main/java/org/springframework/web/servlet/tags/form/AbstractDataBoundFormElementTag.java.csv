commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the property path from the {@link FormTag#setModelAttribute form object}.  * May be a runtime expression.  */ ;/**  * Set the property path from the {@link FormTag#setModelAttribute form object}.  * May be a runtime expression.  */ public void setPath(String path) {     this.path = path. }
true;protected,final;0;4;/**  * Get the {@link #evaluate resolved} property path for the  * {@link FormTag#setModelAttribute form object}.  */ ;/**  * Get the {@link #evaluate resolved} property path for the  * {@link FormTag#setModelAttribute form object}.  */ protected final String getPath() throws JspException {     String resolvedPath = (String) evaluate("path", this.path).     return (resolvedPath != null ? resolvedPath : ""). }
true;public;1;4;/**  * Set the value of the '{@code id}' attribute.  * <p>May be a runtime expression. defaults to the value of {@link #getName()}.  * Note that the default value may not be valid for certain tags.  */ ;/**  * Set the value of the '{@code id}' attribute.  * <p>May be a runtime expression. defaults to the value of {@link #getName()}.  * Note that the default value may not be valid for certain tags.  */ @Override public void setId(@Nullable String id) {     this.id = id. }
true;public;0;5;/**  * Get the value of the '{@code id}' attribute.  */ ;/**  * Get the value of the '{@code id}' attribute.  */ @Override @Nullable public String getId() {     return this.id. }
true;protected;1;4;/**  * Writes the default set of attributes to the supplied {@link TagWriter}.  * Further abstract sub-classes should override this method to add in  * any additional default attributes but <strong>must</strong> remember  * to call the {@code super} method.  * <p>Concrete sub-classes should call this method when/if they want  * to render default attributes.  * @param tagWriter the {@link TagWriter} to which any attributes are to be written  */ ;/**  * Writes the default set of attributes to the supplied {@link TagWriter}.  * Further abstract sub-classes should override this method to add in  * any additional default attributes but <strong>must</strong> remember  * to call the {@code super} method.  * <p>Concrete sub-classes should call this method when/if they want  * to render default attributes.  * @param tagWriter the {@link TagWriter} to which any attributes are to be written  */ protected void writeDefaultAttributes(TagWriter tagWriter) throws JspException {     writeOptionalAttribute(tagWriter, "id", resolveId()).     writeOptionalAttribute(tagWriter, "name", getName()). }
true;protected;0;9;/**  * Determine the '{@code id}' attribute value for this tag,  * autogenerating one if none specified.  * @see #getId()  * @see #autogenerateId()  */ ;/**  * Determine the '{@code id}' attribute value for this tag,  * autogenerating one if none specified.  * @see #getId()  * @see #autogenerateId()  */ @Nullable protected String resolveId() throws JspException {     Object id = evaluate("id", getId()).     if (id != null) {         String idString = id.toString().         return (StringUtils.hasText(idString) ? idString : null).     }     return autogenerateId(). }
true;protected;0;5;/**  * Autogenerate the '{@code id}' attribute value for this tag.  * <p>The default implementation simply delegates to {@link #getName()},  * deleting invalid characters (such as "[" or "]").  */ ;/**  * Autogenerate the '{@code id}' attribute value for this tag.  * <p>The default implementation simply delegates to {@link #getName()},  * deleting invalid characters (such as "[" or "]").  */ @Nullable protected String autogenerateId() throws JspException {     String name = getName().     return (name != null ? StringUtils.deleteAny(name, "[]") : null). }
true;protected;0;4;/**  * Get the value for the HTML '{@code name}' attribute.  * <p>The default implementation simply delegates to  * {@link #getPropertyPath()} to use the property path as the name.  * For the most part this is desirable as it links with the server-side  * expectation for data binding. However, some subclasses may wish to change  * the value of the '{@code name}' attribute without changing the bind path.  * @return the value for the HTML '{@code name}' attribute  */ ;/**  * Get the value for the HTML '{@code name}' attribute.  * <p>The default implementation simply delegates to  * {@link #getPropertyPath()} to use the property path as the name.  * For the most part this is desirable as it links with the server-side  * expectation for data binding. However, some subclasses may wish to change  * the value of the '{@code name}' attribute without changing the bind path.  * @return the value for the HTML '{@code name}' attribute  */ @Nullable protected String getName() throws JspException {     return getPropertyPath(). }
true;protected;0;12;/**  * Get the {@link BindStatus} for this tag.  */ ;/**  * Get the {@link BindStatus} for this tag.  */ protected BindStatus getBindStatus() throws JspException {     if (this.bindStatus == null) {         // HTML escaping in tags is performed by the ValueFormatter class.         String nestedPath = getNestedPath().         String pathToUse = (nestedPath != null ? nestedPath + getPath() : getPath()).         if (pathToUse.endsWith(PropertyAccessor.NESTED_PROPERTY_SEPARATOR)) {             pathToUse = pathToUse.substring(0, pathToUse.length() - 1).         }         this.bindStatus = new BindStatus(getRequestContext(), pathToUse, false).     }     return this.bindStatus. }
true;protected;0;4;/**  * Get the value of the nested path that may have been exposed by the  * {@link NestedPathTag}.  */ ;/**  * Get the value of the nested path that may have been exposed by the  * {@link NestedPathTag}.  */ @Nullable protected String getNestedPath() {     return (String) this.pageContext.getAttribute(NESTED_PATH_VARIABLE_NAME, PageContext.REQUEST_SCOPE). }
true;protected;0;4;/**  * Build the property path for this tag, including the nested path  * but <i>not</i> prefixed with the name of the form attribute.  * @see #getNestedPath()  * @see #getPath()  */ ;/**  * Build the property path for this tag, including the nested path  * but <i>not</i> prefixed with the name of the form attribute.  * @see #getNestedPath()  * @see #getPath()  */ protected String getPropertyPath() throws JspException {     String expression = getBindStatus().getExpression().     return (expression != null ? expression : ""). }
true;protected,final;0;4;/**  * Get the bound value.  * @see #getBindStatus()  */ ;/**  * Get the bound value.  * @see #getBindStatus()  */ @Nullable protected final Object getBoundValue() throws JspException {     return getBindStatus().getValue(). }
true;protected;0;4;/**  * Get the {@link PropertyEditor}, if any, in use for value bound to this tag.  */ ;/**  * Get the {@link PropertyEditor}, if any, in use for value bound to this tag.  */ @Nullable protected PropertyEditor getPropertyEditor() throws JspException {     return getBindStatus().getEditor(). }
true;public,final;0;5;/**  * Exposes the {@link PropertyEditor} for {@link EditorAwareTag}.  * <p>Use {@link #getPropertyEditor()} for internal rendering purposes.  */ ;/**  * Exposes the {@link PropertyEditor} for {@link EditorAwareTag}.  * <p>Use {@link #getPropertyEditor()} for internal rendering purposes.  */ @Override @Nullable public final PropertyEditor getEditor() throws JspException {     return getPropertyEditor(). }
true;protected;1;4;/**  * Get a display String for the given value, converted by a PropertyEditor  * that the BindStatus may have registered for the value's Class.  */ ;/**  * Get a display String for the given value, converted by a PropertyEditor  * that the BindStatus may have registered for the value's Class.  */ protected String convertToDisplayString(@Nullable Object value) throws JspException {     PropertyEditor editor = (value != null ? getBindStatus().findEditor(value.getClass()) : null).     return getDisplayString(value, editor). }
true;protected,final;3;8;/**  * Process the given form field through a {@link RequestDataValueProcessor}  * instance if one is configured or otherwise returns the same value.  */ ;/**  * Process the given form field through a {@link RequestDataValueProcessor}  * instance if one is configured or otherwise returns the same value.  */ protected final String processFieldValue(@Nullable String name, String value, String type) {     RequestDataValueProcessor processor = getRequestContext().getRequestDataValueProcessor().     ServletRequest request = this.pageContext.getRequest().     if (processor != null && request instanceof HttpServletRequest) {         value = processor.processFormFieldValue((HttpServletRequest) request, name, value, type).     }     return value. }
true;public;0;5;/**  * Disposes of the {@link BindStatus} instance.  */ ;/**  * Disposes of the {@link BindStatus} instance.  */ @Override public void doFinally() {     super.doFinally().     this.bindStatus = null. }
