commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Whether to use suffix pattern match (".*") when matching patterns to  * requests. If enabled a method mapped to "/users" also matches to "/users.*".  * <p>By default this is set to {@code true}.  * @see #registeredSuffixPatternMatch  */ ;/**  * Whether to use suffix pattern match (".*") when matching patterns to  * requests. If enabled a method mapped to "/users" also matches to "/users.*".  * <p>By default this is set to {@code true}.  * @see #registeredSuffixPatternMatch  */ public PathMatchConfigurer setUseSuffixPatternMatch(Boolean suffixPatternMatch) {     this.suffixPatternMatch = suffixPatternMatch.     return this. }
true;public;1;4;/**  * Whether to match to URLs irrespective of the presence of a trailing slash.  * If enabled a method mapped to "/users" also matches to "/users/".  * <p>The default value is {@code true}.  */ ;/**  * Whether to match to URLs irrespective of the presence of a trailing slash.  * If enabled a method mapped to "/users" also matches to "/users/".  * <p>The default value is {@code true}.  */ public PathMatchConfigurer setUseTrailingSlashMatch(Boolean trailingSlashMatch) {     this.trailingSlashMatch = trailingSlashMatch.     return this. }
true;public;1;4;/**  * Whether suffix pattern matching should work only against path extensions  * explicitly registered when you  * {@link WebMvcConfigurer#configureContentNegotiation configure content  * negotiation}. This is generally recommended to reduce ambiguity and to  * avoid issues such as when a "." appears in the path for other reasons.  * <p>By default this is set to "false".  * @see WebMvcConfigurer#configureContentNegotiation  */ ;/**  * Whether suffix pattern matching should work only against path extensions  * explicitly registered when you  * {@link WebMvcConfigurer#configureContentNegotiation configure content  * negotiation}. This is generally recommended to reduce ambiguity and to  * avoid issues such as when a "." appears in the path for other reasons.  * <p>By default this is set to "false".  * @see WebMvcConfigurer#configureContentNegotiation  */ public PathMatchConfigurer setUseRegisteredSuffixPatternMatch(Boolean registeredSuffixPatternMatch) {     this.registeredSuffixPatternMatch = registeredSuffixPatternMatch.     return this. }
true;public;1;4;/**  * Set the UrlPathHelper to use for resolution of lookup paths.  * <p>Use this to override the default UrlPathHelper with a custom subclass,  * or to share common UrlPathHelper settings across multiple HandlerMappings  * and MethodNameResolvers.  */ ;/**  * Set the UrlPathHelper to use for resolution of lookup paths.  * <p>Use this to override the default UrlPathHelper with a custom subclass,  * or to share common UrlPathHelper settings across multiple HandlerMappings  * and MethodNameResolvers.  */ public PathMatchConfigurer setUrlPathHelper(UrlPathHelper urlPathHelper) {     this.urlPathHelper = urlPathHelper.     return this. }
true;public;1;4;/**  * Set the PathMatcher implementation to use for matching URL paths  * against registered URL patterns. Default is AntPathMatcher.  * @see org.springframework.util.AntPathMatcher  */ ;/**  * Set the PathMatcher implementation to use for matching URL paths  * against registered URL patterns. Default is AntPathMatcher.  * @see org.springframework.util.AntPathMatcher  */ public PathMatchConfigurer setPathMatcher(PathMatcher pathMatcher) {     this.pathMatcher = pathMatcher.     return this. }
true;public;2;7;/**  * Configure a path prefix to apply to matching controller methods.  * <p>Prefixes are used to enrich the mappings of every {@code @RequestMapping}  * method whose controller type is matched by the corresponding  * {@code Predicate}. The prefix for the first matching predicate is used.  * <p>Consider using {@link org.springframework.web.method.HandlerTypePredicate  * HandlerTypePredicate} to group controllers.  * @param prefix the prefix to apply  * @param predicate a predicate for matching controller types  * @since 5.1  */ ;/**  * Configure a path prefix to apply to matching controller methods.  * <p>Prefixes are used to enrich the mappings of every {@code @RequestMapping}  * method whose controller type is matched by the corresponding  * {@code Predicate}. The prefix for the first matching predicate is used.  * <p>Consider using {@link org.springframework.web.method.HandlerTypePredicate  * HandlerTypePredicate} to group controllers.  * @param prefix the prefix to apply  * @param predicate a predicate for matching controller types  * @since 5.1  */ public PathMatchConfigurer addPathPrefix(String prefix, Predicate<Class<?>> predicate) {     if (this.pathPrefixes == null) {         this.pathPrefixes = new LinkedHashMap<>().     }     this.pathPrefixes.put(prefix, predicate).     return this. }
false;public;0;4;;@Nullable public Boolean isUseSuffixPatternMatch() {     return this.suffixPatternMatch. }
false;public;0;4;;@Nullable public Boolean isUseTrailingSlashMatch() {     return this.trailingSlashMatch. }
false;public;0;4;;@Nullable public Boolean isUseRegisteredSuffixPatternMatch() {     return this.registeredSuffixPatternMatch. }
false;public;0;4;;@Nullable public UrlPathHelper getUrlPathHelper() {     return this.urlPathHelper. }
false;public;0;4;;@Nullable public PathMatcher getPathMatcher() {     return this.pathMatcher. }
false;protected;0;4;;@Nullable protected Map<String, Predicate<Class<?>>> getPathPrefixes() {     return this.pathPrefixes. }
