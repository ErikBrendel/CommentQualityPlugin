commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the value of the '{@code onfocus}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code onfocus}' attribute.  * May be a runtime expression.  */ public void setOnfocus(String onfocus) {     this.onfocus = onfocus. }
true;protected;0;4;/**  * Get the value of the '{@code onfocus}' attribute.  */ ;/**  * Get the value of the '{@code onfocus}' attribute.  */ @Nullable protected String getOnfocus() {     return this.onfocus. }
true;public;1;3;/**  * Set the value of the '{@code onblur}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code onblur}' attribute.  * May be a runtime expression.  */ public void setOnblur(String onblur) {     this.onblur = onblur. }
true;protected;0;4;/**  * Get the value of the '{@code onblur}' attribute.  */ ;/**  * Get the value of the '{@code onblur}' attribute.  */ @Nullable protected String getOnblur() {     return this.onblur. }
true;public;1;3;/**  * Set the value of the '{@code onchange}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code onchange}' attribute.  * May be a runtime expression.  */ public void setOnchange(String onchange) {     this.onchange = onchange. }
true;protected;0;4;/**  * Get the value of the '{@code onchange}' attribute.  */ ;/**  * Get the value of the '{@code onchange}' attribute.  */ @Nullable protected String getOnchange() {     return this.onchange. }
true;public;1;3;/**  * Set the value of the '{@code accesskey}' attribute.  * May be a runtime expression.  */ ;/**  * Set the value of the '{@code accesskey}' attribute.  * May be a runtime expression.  */ public void setAccesskey(String accesskey) {     this.accesskey = accesskey. }
true;protected;0;4;/**  * Get the value of the '{@code accesskey}' attribute.  */ ;/**  * Get the value of the '{@code accesskey}' attribute.  */ @Nullable protected String getAccesskey() {     return this.accesskey. }
true;public;1;3;/**  * Set the value of the '{@code disabled}' attribute.  */ ;/**  * Set the value of the '{@code disabled}' attribute.  */ public void setDisabled(boolean disabled) {     this.disabled = disabled. }
true;protected;0;3;/**  * Get the value of the '{@code disabled}' attribute.  */ ;/**  * Get the value of the '{@code disabled}' attribute.  */ protected boolean isDisabled() {     return this.disabled. }
true;public;1;3;/**  * Sets the value of the '{@code readonly}' attribute.  */ ;/**  * Sets the value of the '{@code readonly}' attribute.  */ public void setReadonly(boolean readonly) {     this.readonly = readonly. }
true;protected;0;3;/**  * Gets the value of the '{@code readonly}' attribute.  */ ;/**  * Gets the value of the '{@code readonly}' attribute.  */ protected boolean isReadonly() {     return this.readonly. }
true;protected;1;15;/**  * Adds input-specific optional attributes as defined by this base class.  */ ;/**  * Adds input-specific optional attributes as defined by this base class.  */ @Override protected void writeOptionalAttributes(TagWriter tagWriter) throws JspException {     super.writeOptionalAttributes(tagWriter).     writeOptionalAttribute(tagWriter, ONFOCUS_ATTRIBUTE, getOnfocus()).     writeOptionalAttribute(tagWriter, ONBLUR_ATTRIBUTE, getOnblur()).     writeOptionalAttribute(tagWriter, ONCHANGE_ATTRIBUTE, getOnchange()).     writeOptionalAttribute(tagWriter, ACCESSKEY_ATTRIBUTE, getAccesskey()).     if (isDisabled()) {         tagWriter.writeAttribute(DISABLED_ATTRIBUTE, "disabled").     }     if (isReadonly()) {         writeOptionalAttribute(tagWriter, READONLY_ATTRIBUTE, "readonly").     } }
