# id;timestamp;commentText;codeText;commentWords;codeWords
OptionWriter -> private void doRenderFromCollection(Collection optionCollection, TagWriter tagWriter) throws JspException;1328020251;Renders the inner '<code>option</code>' tags using the supplied {@link Collection} of_objects as the source. The value of the {@link #valueProperty} field is used_when rendering the '<code>value</code>' of the '<code>option</code>' and the value of the_{@link #labelProperty} property is used when rendering the label.;private void doRenderFromCollection(Collection optionCollection, TagWriter tagWriter) throws JspException {_		for (Object item : optionCollection) {_			BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(item)__			Object value__			if (this.valueProperty != null) {_				value = wrapper.getPropertyValue(this.valueProperty)__			}_			else if (item instanceof Enum) {_				value = ((Enum<?>) item).name()__			}_			else {_				value = item__			}_			Object label = (this.labelProperty != null ? wrapper.getPropertyValue(this.labelProperty) : item)__			renderOption(tagWriter, item, value, label)__		}_	};renders,the,inner,code,option,code,tags,using,the,supplied,link,collection,of,objects,as,the,source,the,value,of,the,link,value,property,field,is,used,when,rendering,the,code,value,code,of,the,code,option,code,and,the,value,of,the,link,label,property,property,is,used,when,rendering,the,label;private,void,do,render,from,collection,collection,option,collection,tag,writer,tag,writer,throws,jsp,exception,for,object,item,option,collection,bean,wrapper,wrapper,property,accessor,factory,for,bean,property,access,item,object,value,if,this,value,property,null,value,wrapper,get,property,value,this,value,property,else,if,item,instanceof,enum,value,enum,item,name,else,value,item,object,label,this,label,property,null,wrapper,get,property,value,this,label,property,item,render,option,tag,writer,item,value,label
OptionWriter -> private void doRenderFromCollection(Collection optionCollection, TagWriter tagWriter) throws JspException;1356735495;Renders the inner '{@code option}' tags using the supplied {@link Collection} of_objects as the source. The value of the {@link #valueProperty} field is used_when rendering the '{@code value}' of the '{@code option}' and the value of the_{@link #labelProperty} property is used when rendering the label.;private void doRenderFromCollection(Collection optionCollection, TagWriter tagWriter) throws JspException {_		for (Object item : optionCollection) {_			BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(item)__			Object value__			if (this.valueProperty != null) {_				value = wrapper.getPropertyValue(this.valueProperty)__			}_			else if (item instanceof Enum) {_				value = ((Enum<?>) item).name()__			}_			else {_				value = item__			}_			Object label = (this.labelProperty != null ? wrapper.getPropertyValue(this.labelProperty) : item)__			renderOption(tagWriter, item, value, label)__		}_	};renders,the,inner,code,option,tags,using,the,supplied,link,collection,of,objects,as,the,source,the,value,of,the,link,value,property,field,is,used,when,rendering,the,code,value,of,the,code,option,and,the,value,of,the,link,label,property,property,is,used,when,rendering,the,label;private,void,do,render,from,collection,collection,option,collection,tag,writer,tag,writer,throws,jsp,exception,for,object,item,option,collection,bean,wrapper,wrapper,property,accessor,factory,for,bean,property,access,item,object,value,if,this,value,property,null,value,wrapper,get,property,value,this,value,property,else,if,item,instanceof,enum,value,enum,item,name,else,value,item,object,label,this,label,property,null,wrapper,get,property,value,this,label,property,item,render,option,tag,writer,item,value,label
OptionWriter -> private boolean isOptionSelected(Object resolvedValue);1328020251;Determine whether the supplied values matched the selected value._Delegates to {@link SelectedValueComparator#isSelected}.;private boolean isOptionSelected(Object resolvedValue) {_		return SelectedValueComparator.isSelected(this.bindStatus, resolvedValue)__	};determine,whether,the,supplied,values,matched,the,selected,value,delegates,to,link,selected,value,comparator,is,selected;private,boolean,is,option,selected,object,resolved,value,return,selected,value,comparator,is,selected,this,bind,status,resolved,value
OptionWriter -> private boolean isOptionSelected(Object resolvedValue);1356735495;Determine whether the supplied values matched the selected value._Delegates to {@link SelectedValueComparator#isSelected}.;private boolean isOptionSelected(Object resolvedValue) {_		return SelectedValueComparator.isSelected(this.bindStatus, resolvedValue)__	};determine,whether,the,supplied,values,matched,the,selected,value,delegates,to,link,selected,value,comparator,is,selected;private,boolean,is,option,selected,object,resolved,value,return,selected,value,comparator,is,selected,this,bind,status,resolved,value
OptionWriter -> private boolean isOptionSelected(Object resolvedValue);1385412762;Determine whether the supplied values matched the selected value._Delegates to {@link SelectedValueComparator#isSelected}.;private boolean isOptionSelected(Object resolvedValue) {_		return SelectedValueComparator.isSelected(this.bindStatus, resolvedValue)__	};determine,whether,the,supplied,values,matched,the,selected,value,delegates,to,link,selected,value,comparator,is,selected;private,boolean,is,option,selected,object,resolved,value,return,selected,value,comparator,is,selected,this,bind,status,resolved,value
OptionWriter -> private boolean isOptionSelected(Object resolvedValue);1413848647;Determine whether the supplied values matched the selected value._Delegates to {@link SelectedValueComparator#isSelected}.;private boolean isOptionSelected(Object resolvedValue) {_		return SelectedValueComparator.isSelected(this.bindStatus, resolvedValue)__	};determine,whether,the,supplied,values,matched,the,selected,value,delegates,to,link,selected,value,comparator,is,selected;private,boolean,is,option,selected,object,resolved,value,return,selected,value,comparator,is,selected,this,bind,status,resolved,value
OptionWriter -> private void doRenderFromCollection(Collection<?> optionCollection, TagWriter tagWriter) throws JspException;1385412762;Renders the inner '{@code option}' tags using the supplied {@link Collection} of_objects as the source. The value of the {@link #valueProperty} field is used_when rendering the '{@code value}' of the '{@code option}' and the value of the_{@link #labelProperty} property is used when rendering the label.;private void doRenderFromCollection(Collection<?> optionCollection, TagWriter tagWriter) throws JspException {_		for (Object item : optionCollection) {_			BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(item)__			Object value__			if (this.valueProperty != null) {_				value = wrapper.getPropertyValue(this.valueProperty)__			}_			else if (item instanceof Enum) {_				value = ((Enum<?>) item).name()__			}_			else {_				value = item__			}_			Object label = (this.labelProperty != null ? wrapper.getPropertyValue(this.labelProperty) : item)__			renderOption(tagWriter, item, value, label)__		}_	};renders,the,inner,code,option,tags,using,the,supplied,link,collection,of,objects,as,the,source,the,value,of,the,link,value,property,field,is,used,when,rendering,the,code,value,of,the,code,option,and,the,value,of,the,link,label,property,property,is,used,when,rendering,the,label;private,void,do,render,from,collection,collection,option,collection,tag,writer,tag,writer,throws,jsp,exception,for,object,item,option,collection,bean,wrapper,wrapper,property,accessor,factory,for,bean,property,access,item,object,value,if,this,value,property,null,value,wrapper,get,property,value,this,value,property,else,if,item,instanceof,enum,value,enum,item,name,else,value,item,object,label,this,label,property,null,wrapper,get,property,value,this,label,property,item,render,option,tag,writer,item,value,label
OptionWriter -> private void doRenderFromCollection(Collection<?> optionCollection, TagWriter tagWriter) throws JspException;1413848647;Renders the inner '{@code option}' tags using the supplied {@link Collection} of_objects as the source. The value of the {@link #valueProperty} field is used_when rendering the '{@code value}' of the '{@code option}' and the value of the_{@link #labelProperty} property is used when rendering the label.;private void doRenderFromCollection(Collection<?> optionCollection, TagWriter tagWriter) throws JspException {_		for (Object item : optionCollection) {_			BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(item)__			Object value__			if (this.valueProperty != null) {_				value = wrapper.getPropertyValue(this.valueProperty)__			}_			else if (item instanceof Enum) {_				value = ((Enum<?>) item).name()__			}_			else {_				value = item__			}_			Object label = (this.labelProperty != null ? wrapper.getPropertyValue(this.labelProperty) : item)__			renderOption(tagWriter, item, value, label)__		}_	};renders,the,inner,code,option,tags,using,the,supplied,link,collection,of,objects,as,the,source,the,value,of,the,link,value,property,field,is,used,when,rendering,the,code,value,of,the,code,option,and,the,value,of,the,link,label,property,property,is,used,when,rendering,the,label;private,void,do,render,from,collection,collection,option,collection,tag,writer,tag,writer,throws,jsp,exception,for,object,item,option,collection,bean,wrapper,wrapper,property,accessor,factory,for,bean,property,access,item,object,value,if,this,value,property,null,value,wrapper,get,property,value,this,value,property,else,if,item,instanceof,enum,value,enum,item,name,else,value,item,object,label,this,label,property,null,wrapper,get,property,value,this,label,property,item,render,option,tag,writer,item,value,label
OptionWriter -> private void doRenderFromCollection(Collection<?> optionCollection, TagWriter tagWriter) throws JspException;1532981291;Render the inner '{@code option}' tags using the supplied {@link Collection} of_objects as the source. The value of the {@link #valueProperty} field is used_when rendering the '{@code value}' of the '{@code option}' and the value of the_{@link #labelProperty} property is used when rendering the label.;private void doRenderFromCollection(Collection<?> optionCollection, TagWriter tagWriter) throws JspException {_		for (Object item : optionCollection) {_			BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(item)__			Object value__			if (this.valueProperty != null) {_				value = wrapper.getPropertyValue(this.valueProperty)__			}_			else if (item instanceof Enum) {_				value = ((Enum<?>) item).name()__			}_			else {_				value = item__			}_			Object label = (this.labelProperty != null ? wrapper.getPropertyValue(this.labelProperty) : item)__			renderOption(tagWriter, item, value, label)__		}_	};render,the,inner,code,option,tags,using,the,supplied,link,collection,of,objects,as,the,source,the,value,of,the,link,value,property,field,is,used,when,rendering,the,code,value,of,the,code,option,and,the,value,of,the,link,label,property,property,is,used,when,rendering,the,label;private,void,do,render,from,collection,collection,option,collection,tag,writer,tag,writer,throws,jsp,exception,for,object,item,option,collection,bean,wrapper,wrapper,property,accessor,factory,for,bean,property,access,item,object,value,if,this,value,property,null,value,wrapper,get,property,value,this,value,property,else,if,item,instanceof,enum,value,enum,item,name,else,value,item,object,label,this,label,property,null,wrapper,get,property,value,this,label,property,item,render,option,tag,writer,item,value,label
OptionWriter -> public OptionWriter( 			Object optionSource, BindStatus bindStatus, String valueProperty, String labelProperty, boolean htmlEscape);1328020251;Creates a new <code>OptionWriter</code> for the supplied <code>objectSource</code>._@param optionSource the source of the <code>options</code> (never <code>null</code>)_@param bindStatus the {@link BindStatus} for the bound value (never <code>null</code>)_@param valueProperty the name of the property used to render <code>option</code> values_(optional)_@param labelProperty the name of the property used to render <code>option</code> labels_(optional);public OptionWriter(_			Object optionSource, BindStatus bindStatus, String valueProperty, String labelProperty, boolean htmlEscape) {__		Assert.notNull(optionSource, "'optionSource' must not be null")__		Assert.notNull(bindStatus, "'bindStatus' must not be null")__		this.optionSource = optionSource__		this.bindStatus = bindStatus__		this.valueProperty = valueProperty__		this.labelProperty = labelProperty__		this.htmlEscape = htmlEscape__	};creates,a,new,code,option,writer,code,for,the,supplied,code,object,source,code,param,option,source,the,source,of,the,code,options,code,never,code,null,code,param,bind,status,the,link,bind,status,for,the,bound,value,never,code,null,code,param,value,property,the,name,of,the,property,used,to,render,code,option,code,values,optional,param,label,property,the,name,of,the,property,used,to,render,code,option,code,labels,optional;public,option,writer,object,option,source,bind,status,bind,status,string,value,property,string,label,property,boolean,html,escape,assert,not,null,option,source,option,source,must,not,be,null,assert,not,null,bind,status,bind,status,must,not,be,null,this,option,source,option,source,this,bind,status,bind,status,this,value,property,value,property,this,label,property,label,property,this,html,escape,html,escape
OptionWriter -> public OptionWriter( 			Object optionSource, BindStatus bindStatus, String valueProperty, String labelProperty, boolean htmlEscape);1356735495;Creates a new {@code OptionWriter} for the supplied {@code objectSource}._@param optionSource the source of the {@code options} (never {@code null})_@param bindStatus the {@link BindStatus} for the bound value (never {@code null})_@param valueProperty the name of the property used to render {@code option} values_(optional)_@param labelProperty the name of the property used to render {@code option} labels_(optional);public OptionWriter(_			Object optionSource, BindStatus bindStatus, String valueProperty, String labelProperty, boolean htmlEscape) {__		Assert.notNull(optionSource, "'optionSource' must not be null")__		Assert.notNull(bindStatus, "'bindStatus' must not be null")__		this.optionSource = optionSource__		this.bindStatus = bindStatus__		this.valueProperty = valueProperty__		this.labelProperty = labelProperty__		this.htmlEscape = htmlEscape__	};creates,a,new,code,option,writer,for,the,supplied,code,object,source,param,option,source,the,source,of,the,code,options,never,code,null,param,bind,status,the,link,bind,status,for,the,bound,value,never,code,null,param,value,property,the,name,of,the,property,used,to,render,code,option,values,optional,param,label,property,the,name,of,the,property,used,to,render,code,option,labels,optional;public,option,writer,object,option,source,bind,status,bind,status,string,value,property,string,label,property,boolean,html,escape,assert,not,null,option,source,option,source,must,not,be,null,assert,not,null,bind,status,bind,status,must,not,be,null,this,option,source,option,source,this,bind,status,bind,status,this,value,property,value,property,this,label,property,label,property,this,html,escape,html,escape
OptionWriter -> public OptionWriter( 			Object optionSource, BindStatus bindStatus, String valueProperty, String labelProperty, boolean htmlEscape);1385412762;Creates a new {@code OptionWriter} for the supplied {@code objectSource}._@param optionSource the source of the {@code options} (never {@code null})_@param bindStatus the {@link BindStatus} for the bound value (never {@code null})_@param valueProperty the name of the property used to render {@code option} values_(optional)_@param labelProperty the name of the property used to render {@code option} labels_(optional);public OptionWriter(_			Object optionSource, BindStatus bindStatus, String valueProperty, String labelProperty, boolean htmlEscape) {__		Assert.notNull(optionSource, "'optionSource' must not be null")__		Assert.notNull(bindStatus, "'bindStatus' must not be null")__		this.optionSource = optionSource__		this.bindStatus = bindStatus__		this.valueProperty = valueProperty__		this.labelProperty = labelProperty__		this.htmlEscape = htmlEscape__	};creates,a,new,code,option,writer,for,the,supplied,code,object,source,param,option,source,the,source,of,the,code,options,never,code,null,param,bind,status,the,link,bind,status,for,the,bound,value,never,code,null,param,value,property,the,name,of,the,property,used,to,render,code,option,values,optional,param,label,property,the,name,of,the,property,used,to,render,code,option,labels,optional;public,option,writer,object,option,source,bind,status,bind,status,string,value,property,string,label,property,boolean,html,escape,assert,not,null,option,source,option,source,must,not,be,null,assert,not,null,bind,status,bind,status,must,not,be,null,this,option,source,option,source,this,bind,status,bind,status,this,value,property,value,property,this,label,property,label,property,this,html,escape,html,escape
OptionWriter -> public OptionWriter( 			Object optionSource, BindStatus bindStatus, String valueProperty, String labelProperty, boolean htmlEscape);1413848647;Creates a new {@code OptionWriter} for the supplied {@code objectSource}._@param optionSource the source of the {@code options} (never {@code null})_@param bindStatus the {@link BindStatus} for the bound value (never {@code null})_@param valueProperty the name of the property used to render {@code option} values_(optional)_@param labelProperty the name of the property used to render {@code option} labels_(optional);public OptionWriter(_			Object optionSource, BindStatus bindStatus, String valueProperty, String labelProperty, boolean htmlEscape) {__		Assert.notNull(optionSource, "'optionSource' must not be null")__		Assert.notNull(bindStatus, "'bindStatus' must not be null")__		this.optionSource = optionSource__		this.bindStatus = bindStatus__		this.valueProperty = valueProperty__		this.labelProperty = labelProperty__		this.htmlEscape = htmlEscape__	};creates,a,new,code,option,writer,for,the,supplied,code,object,source,param,option,source,the,source,of,the,code,options,never,code,null,param,bind,status,the,link,bind,status,for,the,bound,value,never,code,null,param,value,property,the,name,of,the,property,used,to,render,code,option,values,optional,param,label,property,the,name,of,the,property,used,to,render,code,option,labels,optional;public,option,writer,object,option,source,bind,status,bind,status,string,value,property,string,label,property,boolean,html,escape,assert,not,null,option,source,option,source,must,not,be,null,assert,not,null,bind,status,bind,status,must,not,be,null,this,option,source,option,source,this,bind,status,bind,status,this,value,property,value,property,this,label,property,label,property,this,html,escape,html,escape
OptionWriter -> protected String processOptionValue(String resolvedValue);1328020251;Process the option value before it is written._The default implementation simply returns the same value unchanged.;protected String processOptionValue(String resolvedValue) {_		return resolvedValue__	};process,the,option,value,before,it,is,written,the,default,implementation,simply,returns,the,same,value,unchanged;protected,string,process,option,value,string,resolved,value,return,resolved,value
OptionWriter -> protected String processOptionValue(String resolvedValue);1356735495;Process the option value before it is written._The default implementation simply returns the same value unchanged.;protected String processOptionValue(String resolvedValue) {_		return resolvedValue__	};process,the,option,value,before,it,is,written,the,default,implementation,simply,returns,the,same,value,unchanged;protected,string,process,option,value,string,resolved,value,return,resolved,value
OptionWriter -> protected String processOptionValue(String resolvedValue);1385412762;Process the option value before it is written._The default implementation simply returns the same value unchanged.;protected String processOptionValue(String resolvedValue) {_		return resolvedValue__	};process,the,option,value,before,it,is,written,the,default,implementation,simply,returns,the,same,value,unchanged;protected,string,process,option,value,string,resolved,value,return,resolved,value
OptionWriter -> protected String processOptionValue(String resolvedValue);1413848647;Process the option value before it is written._The default implementation simply returns the same value unchanged.;protected String processOptionValue(String resolvedValue) {_		return resolvedValue__	};process,the,option,value,before,it,is,written,the,default,implementation,simply,returns,the,same,value,unchanged;protected,string,process,option,value,string,resolved,value,return,resolved,value
OptionWriter -> protected String processOptionValue(String resolvedValue);1532981291;Process the option value before it is written._<p>The default implementation simply returns the same value unchanged.;protected String processOptionValue(String resolvedValue) {_		return resolvedValue__	};process,the,option,value,before,it,is,written,p,the,default,implementation,simply,returns,the,same,value,unchanged;protected,string,process,option,value,string,resolved,value,return,resolved,value
OptionWriter -> protected void writeCommonAttributes(TagWriter tagWriter) throws JspException;1328020251;Writes default attributes configured to the supplied {@link TagWriter}.;protected void writeCommonAttributes(TagWriter tagWriter) throws JspException {_	};writes,default,attributes,configured,to,the,supplied,link,tag,writer;protected,void,write,common,attributes,tag,writer,tag,writer,throws,jsp,exception
OptionWriter -> protected void writeCommonAttributes(TagWriter tagWriter) throws JspException;1356735495;Writes default attributes configured to the supplied {@link TagWriter}.;protected void writeCommonAttributes(TagWriter tagWriter) throws JspException {_	};writes,default,attributes,configured,to,the,supplied,link,tag,writer;protected,void,write,common,attributes,tag,writer,tag,writer,throws,jsp,exception
OptionWriter -> protected void writeCommonAttributes(TagWriter tagWriter) throws JspException;1385412762;Writes default attributes configured to the supplied {@link TagWriter}.;protected void writeCommonAttributes(TagWriter tagWriter) throws JspException {_	};writes,default,attributes,configured,to,the,supplied,link,tag,writer;protected,void,write,common,attributes,tag,writer,tag,writer,throws,jsp,exception
OptionWriter -> protected void writeCommonAttributes(TagWriter tagWriter) throws JspException;1413848647;Writes default attributes configured to the supplied {@link TagWriter}.;protected void writeCommonAttributes(TagWriter tagWriter) throws JspException {_	};writes,default,attributes,configured,to,the,supplied,link,tag,writer;protected,void,write,common,attributes,tag,writer,tag,writer,throws,jsp,exception
OptionWriter -> protected void writeCommonAttributes(TagWriter tagWriter) throws JspException;1532981291;Write default attributes configured to the supplied {@link TagWriter}.;protected void writeCommonAttributes(TagWriter tagWriter) throws JspException {_	};write,default,attributes,configured,to,the,supplied,link,tag,writer;protected,void,write,common,attributes,tag,writer,tag,writer,throws,jsp,exception
OptionWriter -> protected boolean isOptionDisabled() throws JspException;1328020251;Determine whether the option fields should be disabled.;protected boolean isOptionDisabled() throws JspException {_		return false__	};determine,whether,the,option,fields,should,be,disabled;protected,boolean,is,option,disabled,throws,jsp,exception,return,false
OptionWriter -> protected boolean isOptionDisabled() throws JspException;1356735495;Determine whether the option fields should be disabled.;protected boolean isOptionDisabled() throws JspException {_		return false__	};determine,whether,the,option,fields,should,be,disabled;protected,boolean,is,option,disabled,throws,jsp,exception,return,false
OptionWriter -> protected boolean isOptionDisabled() throws JspException;1385412762;Determine whether the option fields should be disabled.;protected boolean isOptionDisabled() throws JspException {_		return false__	};determine,whether,the,option,fields,should,be,disabled;protected,boolean,is,option,disabled,throws,jsp,exception,return,false
OptionWriter -> protected boolean isOptionDisabled() throws JspException;1413848647;Determine whether the option fields should be disabled.;protected boolean isOptionDisabled() throws JspException {_		return false__	};determine,whether,the,option,fields,should,be,disabled;protected,boolean,is,option,disabled,throws,jsp,exception,return,false
OptionWriter -> protected boolean isOptionDisabled() throws JspException;1532981291;Determine whether the option fields should be disabled.;protected boolean isOptionDisabled() throws JspException {_		return false__	};determine,whether,the,option,fields,should,be,disabled;protected,boolean,is,option,disabled,throws,jsp,exception,return,false
OptionWriter -> public void writeOptions(TagWriter tagWriter) throws JspException;1328020251;Write the '<code>option</code>' tags for the configured {@link #optionSource} to_the supplied {@link TagWriter}.;public void writeOptions(TagWriter tagWriter) throws JspException {_		if (this.optionSource.getClass().isArray()) {_			renderFromArray(tagWriter)__		}_		else if (this.optionSource instanceof Collection) {_			renderFromCollection(tagWriter)__		}_		else if (this.optionSource instanceof Map) {_			renderFromMap(tagWriter)__		}_		else if (this.optionSource instanceof Class && ((Class) this.optionSource).isEnum()) {_			renderFromEnum(tagWriter)__		}_		else {_			throw new JspException(_					"Type [" + this.optionSource.getClass().getName() + "] is not valid for option items")__		}_	};write,the,code,option,code,tags,for,the,configured,link,option,source,to,the,supplied,link,tag,writer;public,void,write,options,tag,writer,tag,writer,throws,jsp,exception,if,this,option,source,get,class,is,array,render,from,array,tag,writer,else,if,this,option,source,instanceof,collection,render,from,collection,tag,writer,else,if,this,option,source,instanceof,map,render,from,map,tag,writer,else,if,this,option,source,instanceof,class,class,this,option,source,is,enum,render,from,enum,tag,writer,else,throw,new,jsp,exception,type,this,option,source,get,class,get,name,is,not,valid,for,option,items
OptionWriter -> public void writeOptions(TagWriter tagWriter) throws JspException;1356735495;Write the '{@code option}' tags for the configured {@link #optionSource} to_the supplied {@link TagWriter}.;public void writeOptions(TagWriter tagWriter) throws JspException {_		if (this.optionSource.getClass().isArray()) {_			renderFromArray(tagWriter)__		}_		else if (this.optionSource instanceof Collection) {_			renderFromCollection(tagWriter)__		}_		else if (this.optionSource instanceof Map) {_			renderFromMap(tagWriter)__		}_		else if (this.optionSource instanceof Class && ((Class) this.optionSource).isEnum()) {_			renderFromEnum(tagWriter)__		}_		else {_			throw new JspException(_					"Type [" + this.optionSource.getClass().getName() + "] is not valid for option items")__		}_	};write,the,code,option,tags,for,the,configured,link,option,source,to,the,supplied,link,tag,writer;public,void,write,options,tag,writer,tag,writer,throws,jsp,exception,if,this,option,source,get,class,is,array,render,from,array,tag,writer,else,if,this,option,source,instanceof,collection,render,from,collection,tag,writer,else,if,this,option,source,instanceof,map,render,from,map,tag,writer,else,if,this,option,source,instanceof,class,class,this,option,source,is,enum,render,from,enum,tag,writer,else,throw,new,jsp,exception,type,this,option,source,get,class,get,name,is,not,valid,for,option,items
OptionWriter -> public void writeOptions(TagWriter tagWriter) throws JspException;1385412762;Write the '{@code option}' tags for the configured {@link #optionSource} to_the supplied {@link TagWriter}.;public void writeOptions(TagWriter tagWriter) throws JspException {_		if (this.optionSource.getClass().isArray()) {_			renderFromArray(tagWriter)__		}_		else if (this.optionSource instanceof Collection) {_			renderFromCollection(tagWriter)__		}_		else if (this.optionSource instanceof Map) {_			renderFromMap(tagWriter)__		}_		else if (this.optionSource instanceof Class && ((Class<?>) this.optionSource).isEnum()) {_			renderFromEnum(tagWriter)__		}_		else {_			throw new JspException(_					"Type [" + this.optionSource.getClass().getName() + "] is not valid for option items")__		}_	};write,the,code,option,tags,for,the,configured,link,option,source,to,the,supplied,link,tag,writer;public,void,write,options,tag,writer,tag,writer,throws,jsp,exception,if,this,option,source,get,class,is,array,render,from,array,tag,writer,else,if,this,option,source,instanceof,collection,render,from,collection,tag,writer,else,if,this,option,source,instanceof,map,render,from,map,tag,writer,else,if,this,option,source,instanceof,class,class,this,option,source,is,enum,render,from,enum,tag,writer,else,throw,new,jsp,exception,type,this,option,source,get,class,get,name,is,not,valid,for,option,items
OptionWriter -> public void writeOptions(TagWriter tagWriter) throws JspException;1413848647;Write the '{@code option}' tags for the configured {@link #optionSource} to_the supplied {@link TagWriter}.;public void writeOptions(TagWriter tagWriter) throws JspException {_		if (this.optionSource.getClass().isArray()) {_			renderFromArray(tagWriter)__		}_		else if (this.optionSource instanceof Collection) {_			renderFromCollection(tagWriter)__		}_		else if (this.optionSource instanceof Map) {_			renderFromMap(tagWriter)__		}_		else if (this.optionSource instanceof Class && ((Class<?>) this.optionSource).isEnum()) {_			renderFromEnum(tagWriter)__		}_		else {_			throw new JspException(_					"Type [" + this.optionSource.getClass().getName() + "] is not valid for option items")__		}_	};write,the,code,option,tags,for,the,configured,link,option,source,to,the,supplied,link,tag,writer;public,void,write,options,tag,writer,tag,writer,throws,jsp,exception,if,this,option,source,get,class,is,array,render,from,array,tag,writer,else,if,this,option,source,instanceof,collection,render,from,collection,tag,writer,else,if,this,option,source,instanceof,map,render,from,map,tag,writer,else,if,this,option,source,instanceof,class,class,this,option,source,is,enum,render,from,enum,tag,writer,else,throw,new,jsp,exception,type,this,option,source,get,class,get,name,is,not,valid,for,option,items
OptionWriter -> public void writeOptions(TagWriter tagWriter) throws JspException;1532981291;Write the '{@code option}' tags for the configured {@link #optionSource} to_the supplied {@link TagWriter}.;public void writeOptions(TagWriter tagWriter) throws JspException {_		if (this.optionSource.getClass().isArray()) {_			renderFromArray(tagWriter)__		}_		else if (this.optionSource instanceof Collection) {_			renderFromCollection(tagWriter)__		}_		else if (this.optionSource instanceof Map) {_			renderFromMap(tagWriter)__		}_		else if (this.optionSource instanceof Class && ((Class<?>) this.optionSource).isEnum()) {_			renderFromEnum(tagWriter)__		}_		else {_			throw new JspException(_					"Type [" + this.optionSource.getClass().getName() + "] is not valid for option items")__		}_	};write,the,code,option,tags,for,the,configured,link,option,source,to,the,supplied,link,tag,writer;public,void,write,options,tag,writer,tag,writer,throws,jsp,exception,if,this,option,source,get,class,is,array,render,from,array,tag,writer,else,if,this,option,source,instanceof,collection,render,from,collection,tag,writer,else,if,this,option,source,instanceof,map,render,from,map,tag,writer,else,if,this,option,source,instanceof,class,class,this,option,source,is,enum,render,from,enum,tag,writer,else,throw,new,jsp,exception,type,this,option,source,get,class,get,name,is,not,valid,for,option,items
OptionWriter -> private void renderOption(TagWriter tagWriter, Object item, Object value, Object label) throws JspException;1328020251;Renders an HTML '<code>option</code>' with the supplied value and label. Marks the_value as 'selected' if either the item itself or its value match the bound value.;private void renderOption(TagWriter tagWriter, Object item, Object value, Object label) throws JspException {_		tagWriter.startTag("option")__		writeCommonAttributes(tagWriter)___		String valueDisplayString = getDisplayString(value)__		String labelDisplayString = getDisplayString(label)__		_		valueDisplayString = processOptionValue(valueDisplayString)___		_		tagWriter.writeAttribute("value", valueDisplayString)___		if (isOptionSelected(value) || (value != item && isOptionSelected(item))) {_			tagWriter.writeAttribute("selected", "selected")__		}_		if (isOptionDisabled()) {_			tagWriter.writeAttribute("disabled", "disabled")__		}_		tagWriter.appendValue(labelDisplayString)__		tagWriter.endTag()__	};renders,an,html,code,option,code,with,the,supplied,value,and,label,marks,the,value,as,selected,if,either,the,item,itself,or,its,value,match,the,bound,value;private,void,render,option,tag,writer,tag,writer,object,item,object,value,object,label,throws,jsp,exception,tag,writer,start,tag,option,write,common,attributes,tag,writer,string,value,display,string,get,display,string,value,string,label,display,string,get,display,string,label,value,display,string,process,option,value,value,display,string,tag,writer,write,attribute,value,value,display,string,if,is,option,selected,value,value,item,is,option,selected,item,tag,writer,write,attribute,selected,selected,if,is,option,disabled,tag,writer,write,attribute,disabled,disabled,tag,writer,append,value,label,display,string,tag,writer,end,tag
OptionWriter -> private void renderOption(TagWriter tagWriter, Object item, Object value, Object label) throws JspException;1356735495;Renders an HTML '{@code option}' with the supplied value and label. Marks the_value as 'selected' if either the item itself or its value match the bound value.;private void renderOption(TagWriter tagWriter, Object item, Object value, Object label) throws JspException {_		tagWriter.startTag("option")__		writeCommonAttributes(tagWriter)___		String valueDisplayString = getDisplayString(value)__		String labelDisplayString = getDisplayString(label)___		valueDisplayString = processOptionValue(valueDisplayString)___		_		tagWriter.writeAttribute("value", valueDisplayString)___		if (isOptionSelected(value) || (value != item && isOptionSelected(item))) {_			tagWriter.writeAttribute("selected", "selected")__		}_		if (isOptionDisabled()) {_			tagWriter.writeAttribute("disabled", "disabled")__		}_		tagWriter.appendValue(labelDisplayString)__		tagWriter.endTag()__	};renders,an,html,code,option,with,the,supplied,value,and,label,marks,the,value,as,selected,if,either,the,item,itself,or,its,value,match,the,bound,value;private,void,render,option,tag,writer,tag,writer,object,item,object,value,object,label,throws,jsp,exception,tag,writer,start,tag,option,write,common,attributes,tag,writer,string,value,display,string,get,display,string,value,string,label,display,string,get,display,string,label,value,display,string,process,option,value,value,display,string,tag,writer,write,attribute,value,value,display,string,if,is,option,selected,value,value,item,is,option,selected,item,tag,writer,write,attribute,selected,selected,if,is,option,disabled,tag,writer,write,attribute,disabled,disabled,tag,writer,append,value,label,display,string,tag,writer,end,tag
OptionWriter -> private void renderOption(TagWriter tagWriter, Object item, Object value, Object label) throws JspException;1385412762;Renders an HTML '{@code option}' with the supplied value and label. Marks the_value as 'selected' if either the item itself or its value match the bound value.;private void renderOption(TagWriter tagWriter, Object item, Object value, Object label) throws JspException {_		tagWriter.startTag("option")__		writeCommonAttributes(tagWriter)___		String valueDisplayString = getDisplayString(value)__		String labelDisplayString = getDisplayString(label)___		valueDisplayString = processOptionValue(valueDisplayString)___		_		tagWriter.writeAttribute("value", valueDisplayString)___		if (isOptionSelected(value) || (value != item && isOptionSelected(item))) {_			tagWriter.writeAttribute("selected", "selected")__		}_		if (isOptionDisabled()) {_			tagWriter.writeAttribute("disabled", "disabled")__		}_		tagWriter.appendValue(labelDisplayString)__		tagWriter.endTag()__	};renders,an,html,code,option,with,the,supplied,value,and,label,marks,the,value,as,selected,if,either,the,item,itself,or,its,value,match,the,bound,value;private,void,render,option,tag,writer,tag,writer,object,item,object,value,object,label,throws,jsp,exception,tag,writer,start,tag,option,write,common,attributes,tag,writer,string,value,display,string,get,display,string,value,string,label,display,string,get,display,string,label,value,display,string,process,option,value,value,display,string,tag,writer,write,attribute,value,value,display,string,if,is,option,selected,value,value,item,is,option,selected,item,tag,writer,write,attribute,selected,selected,if,is,option,disabled,tag,writer,write,attribute,disabled,disabled,tag,writer,append,value,label,display,string,tag,writer,end,tag
OptionWriter -> private void renderOption(TagWriter tagWriter, Object item, Object value, Object label) throws JspException;1413848647;Renders an HTML '{@code option}' with the supplied value and label. Marks the_value as 'selected' if either the item itself or its value match the bound value.;private void renderOption(TagWriter tagWriter, Object item, Object value, Object label) throws JspException {_		tagWriter.startTag("option")__		writeCommonAttributes(tagWriter)___		String valueDisplayString = getDisplayString(value)__		String labelDisplayString = getDisplayString(label)___		valueDisplayString = processOptionValue(valueDisplayString)___		_		tagWriter.writeAttribute("value", valueDisplayString)___		if (isOptionSelected(value) || (value != item && isOptionSelected(item))) {_			tagWriter.writeAttribute("selected", "selected")__		}_		if (isOptionDisabled()) {_			tagWriter.writeAttribute("disabled", "disabled")__		}_		tagWriter.appendValue(labelDisplayString)__		tagWriter.endTag()__	};renders,an,html,code,option,with,the,supplied,value,and,label,marks,the,value,as,selected,if,either,the,item,itself,or,its,value,match,the,bound,value;private,void,render,option,tag,writer,tag,writer,object,item,object,value,object,label,throws,jsp,exception,tag,writer,start,tag,option,write,common,attributes,tag,writer,string,value,display,string,get,display,string,value,string,label,display,string,get,display,string,label,value,display,string,process,option,value,value,display,string,tag,writer,write,attribute,value,value,display,string,if,is,option,selected,value,value,item,is,option,selected,item,tag,writer,write,attribute,selected,selected,if,is,option,disabled,tag,writer,write,attribute,disabled,disabled,tag,writer,append,value,label,display,string,tag,writer,end,tag
OptionWriter -> private String getDisplayString(Object value);1328020251;Determines the display value of the supplied <code>Object</code>,_HTML-escaped as required.;private String getDisplayString(Object value) {_		PropertyEditor editor = (value != null ? this.bindStatus.findEditor(value.getClass()) : null)__		return ValueFormatter.getDisplayString(value, editor, this.htmlEscape)__	};determines,the,display,value,of,the,supplied,code,object,code,html,escaped,as,required;private,string,get,display,string,object,value,property,editor,editor,value,null,this,bind,status,find,editor,value,get,class,null,return,value,formatter,get,display,string,value,editor,this,html,escape
OptionWriter -> private String getDisplayString(Object value);1356735495;Determines the display value of the supplied {@code Object},_HTML-escaped as required.;private String getDisplayString(Object value) {_		PropertyEditor editor = (value != null ? this.bindStatus.findEditor(value.getClass()) : null)__		return ValueFormatter.getDisplayString(value, editor, this.htmlEscape)__	};determines,the,display,value,of,the,supplied,code,object,html,escaped,as,required;private,string,get,display,string,object,value,property,editor,editor,value,null,this,bind,status,find,editor,value,get,class,null,return,value,formatter,get,display,string,value,editor,this,html,escape
OptionWriter -> private String getDisplayString(Object value);1385412762;Determines the display value of the supplied {@code Object},_HTML-escaped as required.;private String getDisplayString(Object value) {_		PropertyEditor editor = (value != null ? this.bindStatus.findEditor(value.getClass()) : null)__		return ValueFormatter.getDisplayString(value, editor, this.htmlEscape)__	};determines,the,display,value,of,the,supplied,code,object,html,escaped,as,required;private,string,get,display,string,object,value,property,editor,editor,value,null,this,bind,status,find,editor,value,get,class,null,return,value,formatter,get,display,string,value,editor,this,html,escape
OptionWriter -> private String getDisplayString(Object value);1413848647;Determines the display value of the supplied {@code Object},_HTML-escaped as required.;private String getDisplayString(Object value) {_		PropertyEditor editor = (value != null ? this.bindStatus.findEditor(value.getClass()) : null)__		return ValueFormatter.getDisplayString(value, editor, this.htmlEscape)__	};determines,the,display,value,of,the,supplied,code,object,html,escaped,as,required;private,string,get,display,string,object,value,property,editor,editor,value,null,this,bind,status,find,editor,value,get,class,null,return,value,formatter,get,display,string,value,editor,this,html,escape
OptionWriter -> private void renderFromArray(TagWriter tagWriter) throws JspException;1328020251;Renders the inner '<code>option</code>' tags using the {@link #optionSource}._@see #doRenderFromCollection(java.util.Collection, TagWriter);private void renderFromArray(TagWriter tagWriter) throws JspException {_		doRenderFromCollection(CollectionUtils.arrayToList(this.optionSource), tagWriter)__	};renders,the,inner,code,option,code,tags,using,the,link,option,source,see,do,render,from,collection,java,util,collection,tag,writer;private,void,render,from,array,tag,writer,tag,writer,throws,jsp,exception,do,render,from,collection,collection,utils,array,to,list,this,option,source,tag,writer
OptionWriter -> private void renderFromArray(TagWriter tagWriter) throws JspException;1356735495;Renders the inner '{@code option}' tags using the {@link #optionSource}._@see #doRenderFromCollection(java.util.Collection, TagWriter);private void renderFromArray(TagWriter tagWriter) throws JspException {_		doRenderFromCollection(CollectionUtils.arrayToList(this.optionSource), tagWriter)__	};renders,the,inner,code,option,tags,using,the,link,option,source,see,do,render,from,collection,java,util,collection,tag,writer;private,void,render,from,array,tag,writer,tag,writer,throws,jsp,exception,do,render,from,collection,collection,utils,array,to,list,this,option,source,tag,writer
OptionWriter -> private void renderFromArray(TagWriter tagWriter) throws JspException;1385412762;Renders the inner '{@code option}' tags using the {@link #optionSource}._@see #doRenderFromCollection(java.util.Collection, TagWriter);private void renderFromArray(TagWriter tagWriter) throws JspException {_		doRenderFromCollection(CollectionUtils.arrayToList(this.optionSource), tagWriter)__	};renders,the,inner,code,option,tags,using,the,link,option,source,see,do,render,from,collection,java,util,collection,tag,writer;private,void,render,from,array,tag,writer,tag,writer,throws,jsp,exception,do,render,from,collection,collection,utils,array,to,list,this,option,source,tag,writer
OptionWriter -> private void renderFromArray(TagWriter tagWriter) throws JspException;1413848647;Renders the inner '{@code option}' tags using the {@link #optionSource}._@see #doRenderFromCollection(java.util.Collection, TagWriter);private void renderFromArray(TagWriter tagWriter) throws JspException {_		doRenderFromCollection(CollectionUtils.arrayToList(this.optionSource), tagWriter)__	};renders,the,inner,code,option,tags,using,the,link,option,source,see,do,render,from,collection,java,util,collection,tag,writer;private,void,render,from,array,tag,writer,tag,writer,throws,jsp,exception,do,render,from,collection,collection,utils,array,to,list,this,option,source,tag,writer
OptionWriter -> private void renderFromArray(TagWriter tagWriter) throws JspException;1532981291;Render the inner '{@code option}' tags using the {@link #optionSource}._@see #doRenderFromCollection(java.util.Collection, TagWriter);private void renderFromArray(TagWriter tagWriter) throws JspException {_		doRenderFromCollection(CollectionUtils.arrayToList(this.optionSource), tagWriter)__	};render,the,inner,code,option,tags,using,the,link,option,source,see,do,render,from,collection,java,util,collection,tag,writer;private,void,render,from,array,tag,writer,tag,writer,throws,jsp,exception,do,render,from,collection,collection,utils,array,to,list,this,option,source,tag,writer
OptionWriter -> private void renderFromEnum(TagWriter tagWriter) throws JspException;1328020251;Renders the inner '<code>option</code>' tags using the {@link #optionSource}._@see #doRenderFromCollection(java.util.Collection, TagWriter);private void renderFromEnum(TagWriter tagWriter) throws JspException {_		doRenderFromCollection(CollectionUtils.arrayToList(((Class) this.optionSource).getEnumConstants()), tagWriter)__	};renders,the,inner,code,option,code,tags,using,the,link,option,source,see,do,render,from,collection,java,util,collection,tag,writer;private,void,render,from,enum,tag,writer,tag,writer,throws,jsp,exception,do,render,from,collection,collection,utils,array,to,list,class,this,option,source,get,enum,constants,tag,writer
OptionWriter -> private void renderFromEnum(TagWriter tagWriter) throws JspException;1356735495;Renders the inner '{@code option}' tags using the {@link #optionSource}._@see #doRenderFromCollection(java.util.Collection, TagWriter);private void renderFromEnum(TagWriter tagWriter) throws JspException {_		doRenderFromCollection(CollectionUtils.arrayToList(((Class) this.optionSource).getEnumConstants()), tagWriter)__	};renders,the,inner,code,option,tags,using,the,link,option,source,see,do,render,from,collection,java,util,collection,tag,writer;private,void,render,from,enum,tag,writer,tag,writer,throws,jsp,exception,do,render,from,collection,collection,utils,array,to,list,class,this,option,source,get,enum,constants,tag,writer
OptionWriter -> private void renderFromEnum(TagWriter tagWriter) throws JspException;1385412762;Renders the inner '{@code option}' tags using the {@link #optionSource}._@see #doRenderFromCollection(java.util.Collection, TagWriter);private void renderFromEnum(TagWriter tagWriter) throws JspException {_		doRenderFromCollection(CollectionUtils.arrayToList(((Class<?>) this.optionSource).getEnumConstants()), tagWriter)__	};renders,the,inner,code,option,tags,using,the,link,option,source,see,do,render,from,collection,java,util,collection,tag,writer;private,void,render,from,enum,tag,writer,tag,writer,throws,jsp,exception,do,render,from,collection,collection,utils,array,to,list,class,this,option,source,get,enum,constants,tag,writer
OptionWriter -> private void renderFromEnum(TagWriter tagWriter) throws JspException;1413848647;Renders the inner '{@code option}' tags using the {@link #optionSource}._@see #doRenderFromCollection(java.util.Collection, TagWriter);private void renderFromEnum(TagWriter tagWriter) throws JspException {_		doRenderFromCollection(CollectionUtils.arrayToList(((Class<?>) this.optionSource).getEnumConstants()), tagWriter)__	};renders,the,inner,code,option,tags,using,the,link,option,source,see,do,render,from,collection,java,util,collection,tag,writer;private,void,render,from,enum,tag,writer,tag,writer,throws,jsp,exception,do,render,from,collection,collection,utils,array,to,list,class,this,option,source,get,enum,constants,tag,writer
OptionWriter -> private void renderFromEnum(TagWriter tagWriter) throws JspException;1532981291;Render the inner '{@code option}' tags using the {@link #optionSource}._@see #doRenderFromCollection(java.util.Collection, TagWriter);private void renderFromEnum(TagWriter tagWriter) throws JspException {_		doRenderFromCollection(CollectionUtils.arrayToList(((Class<?>) this.optionSource).getEnumConstants()), tagWriter)__	};render,the,inner,code,option,tags,using,the,link,option,source,see,do,render,from,collection,java,util,collection,tag,writer;private,void,render,from,enum,tag,writer,tag,writer,throws,jsp,exception,do,render,from,collection,collection,utils,array,to,list,class,this,option,source,get,enum,constants,tag,writer
OptionWriter -> private void renderFromMap(TagWriter tagWriter) throws JspException;1328020251;Renders the inner '<code>option</code>' tags using the supplied_{@link Map} as the source._@see #renderOption(TagWriter, Object, Object, Object);private void renderFromMap(TagWriter tagWriter) throws JspException {_		Map<?, ?> optionMap = (Map) this.optionSource__		for (Map.Entry entry : optionMap.entrySet()) {_			Object mapKey = entry.getKey()__			Object mapValue = entry.getValue()__			Object renderValue = (this.valueProperty != null ?_					PropertyAccessorFactory.forBeanPropertyAccess(mapKey).getPropertyValue(this.valueProperty) :_					mapKey)__			Object renderLabel = (this.labelProperty != null ?_					PropertyAccessorFactory.forBeanPropertyAccess(mapValue).getPropertyValue(this.labelProperty) :_					mapValue)__			renderOption(tagWriter, mapKey, renderValue, renderLabel)__		}_	};renders,the,inner,code,option,code,tags,using,the,supplied,link,map,as,the,source,see,render,option,tag,writer,object,object,object;private,void,render,from,map,tag,writer,tag,writer,throws,jsp,exception,map,option,map,map,this,option,source,for,map,entry,entry,option,map,entry,set,object,map,key,entry,get,key,object,map,value,entry,get,value,object,render,value,this,value,property,null,property,accessor,factory,for,bean,property,access,map,key,get,property,value,this,value,property,map,key,object,render,label,this,label,property,null,property,accessor,factory,for,bean,property,access,map,value,get,property,value,this,label,property,map,value,render,option,tag,writer,map,key,render,value,render,label
OptionWriter -> private void renderFromMap(TagWriter tagWriter) throws JspException;1356735495;Renders the inner '{@code option}' tags using the supplied_{@link Map} as the source._@see #renderOption(TagWriter, Object, Object, Object);private void renderFromMap(TagWriter tagWriter) throws JspException {_		Map<?, ?> optionMap = (Map) this.optionSource__		for (Map.Entry entry : optionMap.entrySet()) {_			Object mapKey = entry.getKey()__			Object mapValue = entry.getValue()__			Object renderValue = (this.valueProperty != null ?_					PropertyAccessorFactory.forBeanPropertyAccess(mapKey).getPropertyValue(this.valueProperty) :_					mapKey)__			Object renderLabel = (this.labelProperty != null ?_					PropertyAccessorFactory.forBeanPropertyAccess(mapValue).getPropertyValue(this.labelProperty) :_					mapValue)__			renderOption(tagWriter, mapKey, renderValue, renderLabel)__		}_	};renders,the,inner,code,option,tags,using,the,supplied,link,map,as,the,source,see,render,option,tag,writer,object,object,object;private,void,render,from,map,tag,writer,tag,writer,throws,jsp,exception,map,option,map,map,this,option,source,for,map,entry,entry,option,map,entry,set,object,map,key,entry,get,key,object,map,value,entry,get,value,object,render,value,this,value,property,null,property,accessor,factory,for,bean,property,access,map,key,get,property,value,this,value,property,map,key,object,render,label,this,label,property,null,property,accessor,factory,for,bean,property,access,map,value,get,property,value,this,label,property,map,value,render,option,tag,writer,map,key,render,value,render,label
OptionWriter -> private void renderFromMap(TagWriter tagWriter) throws JspException;1385412762;Renders the inner '{@code option}' tags using the supplied_{@link Map} as the source._@see #renderOption(TagWriter, Object, Object, Object);private void renderFromMap(TagWriter tagWriter) throws JspException {_		Map<?, ?> optionMap = (Map<?, ?>) this.optionSource__		for (Map.Entry<?, ?> entry : optionMap.entrySet()) {_			Object mapKey = entry.getKey()__			Object mapValue = entry.getValue()__			Object renderValue = (this.valueProperty != null ?_					PropertyAccessorFactory.forBeanPropertyAccess(mapKey).getPropertyValue(this.valueProperty) :_					mapKey)__			Object renderLabel = (this.labelProperty != null ?_					PropertyAccessorFactory.forBeanPropertyAccess(mapValue).getPropertyValue(this.labelProperty) :_					mapValue)__			renderOption(tagWriter, mapKey, renderValue, renderLabel)__		}_	};renders,the,inner,code,option,tags,using,the,supplied,link,map,as,the,source,see,render,option,tag,writer,object,object,object;private,void,render,from,map,tag,writer,tag,writer,throws,jsp,exception,map,option,map,map,this,option,source,for,map,entry,entry,option,map,entry,set,object,map,key,entry,get,key,object,map,value,entry,get,value,object,render,value,this,value,property,null,property,accessor,factory,for,bean,property,access,map,key,get,property,value,this,value,property,map,key,object,render,label,this,label,property,null,property,accessor,factory,for,bean,property,access,map,value,get,property,value,this,label,property,map,value,render,option,tag,writer,map,key,render,value,render,label
OptionWriter -> private void renderFromMap(TagWriter tagWriter) throws JspException;1413848647;Renders the inner '{@code option}' tags using the supplied_{@link Map} as the source._@see #renderOption(TagWriter, Object, Object, Object);private void renderFromMap(TagWriter tagWriter) throws JspException {_		Map<?, ?> optionMap = (Map<?, ?>) this.optionSource__		for (Map.Entry<?, ?> entry : optionMap.entrySet()) {_			Object mapKey = entry.getKey()__			Object mapValue = entry.getValue()__			Object renderValue = (this.valueProperty != null ?_					PropertyAccessorFactory.forBeanPropertyAccess(mapKey).getPropertyValue(this.valueProperty) :_					mapKey)__			Object renderLabel = (this.labelProperty != null ?_					PropertyAccessorFactory.forBeanPropertyAccess(mapValue).getPropertyValue(this.labelProperty) :_					mapValue)__			renderOption(tagWriter, mapKey, renderValue, renderLabel)__		}_	};renders,the,inner,code,option,tags,using,the,supplied,link,map,as,the,source,see,render,option,tag,writer,object,object,object;private,void,render,from,map,tag,writer,tag,writer,throws,jsp,exception,map,option,map,map,this,option,source,for,map,entry,entry,option,map,entry,set,object,map,key,entry,get,key,object,map,value,entry,get,value,object,render,value,this,value,property,null,property,accessor,factory,for,bean,property,access,map,key,get,property,value,this,value,property,map,key,object,render,label,this,label,property,null,property,accessor,factory,for,bean,property,access,map,value,get,property,value,this,label,property,map,value,render,option,tag,writer,map,key,render,value,render,label
OptionWriter -> private void renderFromMap(TagWriter tagWriter) throws JspException;1532981291;Render the inner '{@code option}' tags using the supplied_{@link Map} as the source._@see #renderOption(TagWriter, Object, Object, Object);private void renderFromMap(TagWriter tagWriter) throws JspException {_		Map<?, ?> optionMap = (Map<?, ?>) this.optionSource__		for (Map.Entry<?, ?> entry : optionMap.entrySet()) {_			Object mapKey = entry.getKey()__			Object mapValue = entry.getValue()__			Object renderValue = (this.valueProperty != null ?_					PropertyAccessorFactory.forBeanPropertyAccess(mapKey).getPropertyValue(this.valueProperty) :_					mapKey)__			Object renderLabel = (this.labelProperty != null ?_					PropertyAccessorFactory.forBeanPropertyAccess(mapValue).getPropertyValue(this.labelProperty) :_					mapValue)__			renderOption(tagWriter, mapKey, renderValue, renderLabel)__		}_	};render,the,inner,code,option,tags,using,the,supplied,link,map,as,the,source,see,render,option,tag,writer,object,object,object;private,void,render,from,map,tag,writer,tag,writer,throws,jsp,exception,map,option,map,map,this,option,source,for,map,entry,entry,option,map,entry,set,object,map,key,entry,get,key,object,map,value,entry,get,value,object,render,value,this,value,property,null,property,accessor,factory,for,bean,property,access,map,key,get,property,value,this,value,property,map,key,object,render,label,this,label,property,null,property,accessor,factory,for,bean,property,access,map,value,get,property,value,this,label,property,map,value,render,option,tag,writer,map,key,render,value,render,label
OptionWriter -> private void renderFromCollection(TagWriter tagWriter) throws JspException;1328020251;Renders the inner '<code>option</code>' tags using the {@link #optionSource}._@see #doRenderFromCollection(java.util.Collection, TagWriter);private void renderFromCollection(TagWriter tagWriter) throws JspException {_		doRenderFromCollection((Collection) this.optionSource, tagWriter)__	};renders,the,inner,code,option,code,tags,using,the,link,option,source,see,do,render,from,collection,java,util,collection,tag,writer;private,void,render,from,collection,tag,writer,tag,writer,throws,jsp,exception,do,render,from,collection,collection,this,option,source,tag,writer
OptionWriter -> private void renderFromCollection(TagWriter tagWriter) throws JspException;1356735495;Renders the inner '{@code option}' tags using the {@link #optionSource}._@see #doRenderFromCollection(java.util.Collection, TagWriter);private void renderFromCollection(TagWriter tagWriter) throws JspException {_		doRenderFromCollection((Collection) this.optionSource, tagWriter)__	};renders,the,inner,code,option,tags,using,the,link,option,source,see,do,render,from,collection,java,util,collection,tag,writer;private,void,render,from,collection,tag,writer,tag,writer,throws,jsp,exception,do,render,from,collection,collection,this,option,source,tag,writer
OptionWriter -> private void renderFromCollection(TagWriter tagWriter) throws JspException;1385412762;Renders the inner '{@code option}' tags using the {@link #optionSource}._@see #doRenderFromCollection(java.util.Collection, TagWriter);private void renderFromCollection(TagWriter tagWriter) throws JspException {_		doRenderFromCollection((Collection<?>) this.optionSource, tagWriter)__	};renders,the,inner,code,option,tags,using,the,link,option,source,see,do,render,from,collection,java,util,collection,tag,writer;private,void,render,from,collection,tag,writer,tag,writer,throws,jsp,exception,do,render,from,collection,collection,this,option,source,tag,writer
OptionWriter -> private void renderFromCollection(TagWriter tagWriter) throws JspException;1413848647;Renders the inner '{@code option}' tags using the {@link #optionSource}._@see #doRenderFromCollection(java.util.Collection, TagWriter);private void renderFromCollection(TagWriter tagWriter) throws JspException {_		doRenderFromCollection((Collection<?>) this.optionSource, tagWriter)__	};renders,the,inner,code,option,tags,using,the,link,option,source,see,do,render,from,collection,java,util,collection,tag,writer;private,void,render,from,collection,tag,writer,tag,writer,throws,jsp,exception,do,render,from,collection,collection,this,option,source,tag,writer
OptionWriter -> private void renderFromCollection(TagWriter tagWriter) throws JspException;1532981291;Render the inner '{@code option}' tags using the {@link #optionSource}._@see #doRenderFromCollection(java.util.Collection, TagWriter);private void renderFromCollection(TagWriter tagWriter) throws JspException {_		doRenderFromCollection((Collection<?>) this.optionSource, tagWriter)__	};render,the,inner,code,option,tags,using,the,link,option,source,see,do,render,from,collection,java,util,collection,tag,writer;private,void,render,from,collection,tag,writer,tag,writer,throws,jsp,exception,do,render,from,collection,collection,this,option,source,tag,writer
