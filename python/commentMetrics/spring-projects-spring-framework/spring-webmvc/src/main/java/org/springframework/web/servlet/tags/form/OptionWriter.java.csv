commented;modifiers;parameterAmount;loc;comment;code
true;public;1;18;/**  * Write the '{@code option}' tags for the configured {@link #optionSource} to  * the supplied {@link TagWriter}.  */ ;/**  * Write the '{@code option}' tags for the configured {@link #optionSource} to  * the supplied {@link TagWriter}.  */ public void writeOptions(TagWriter tagWriter) throws JspException {     if (this.optionSource.getClass().isArray()) {         renderFromArray(tagWriter).     } else if (this.optionSource instanceof Collection) {         renderFromCollection(tagWriter).     } else if (this.optionSource instanceof Map) {         renderFromMap(tagWriter).     } else if (this.optionSource instanceof Class && ((Class<?>) this.optionSource).isEnum()) {         renderFromEnum(tagWriter).     } else {         throw new JspException("Type [" + this.optionSource.getClass().getName() + "] is not valid for option items").     } }
true;private;1;3;/**  * Render the inner '{@code option}' tags using the {@link #optionSource}.  * @see #doRenderFromCollection(java.util.Collection, TagWriter)  */ ;/**  * Render the inner '{@code option}' tags using the {@link #optionSource}.  * @see #doRenderFromCollection(java.util.Collection, TagWriter)  */ private void renderFromArray(TagWriter tagWriter) throws JspException {     doRenderFromCollection(CollectionUtils.arrayToList(this.optionSource), tagWriter). }
true;private;1;14;/**  * Render the inner '{@code option}' tags using the supplied  * {@link Map} as the source.  * @see #renderOption(TagWriter, Object, Object, Object)  */ ;/**  * Render the inner '{@code option}' tags using the supplied  * {@link Map} as the source.  * @see #renderOption(TagWriter, Object, Object, Object)  */ private void renderFromMap(TagWriter tagWriter) throws JspException {     Map<?, ?> optionMap = (Map<?, ?>) this.optionSource.     for (Map.Entry<?, ?> entry : optionMap.entrySet()) {         Object mapKey = entry.getKey().         Object mapValue = entry.getValue().         Object renderValue = (this.valueProperty != null ? PropertyAccessorFactory.forBeanPropertyAccess(mapKey).getPropertyValue(this.valueProperty) : mapKey).         Object renderLabel = (this.labelProperty != null ? PropertyAccessorFactory.forBeanPropertyAccess(mapValue).getPropertyValue(this.labelProperty) : mapValue).         renderOption(tagWriter, mapKey, renderValue, renderLabel).     } }
true;private;1;3;/**  * Render the inner '{@code option}' tags using the {@link #optionSource}.  * @see #doRenderFromCollection(java.util.Collection, TagWriter)  */ ;/**  * Render the inner '{@code option}' tags using the {@link #optionSource}.  * @see #doRenderFromCollection(java.util.Collection, TagWriter)  */ private void renderFromCollection(TagWriter tagWriter) throws JspException {     doRenderFromCollection((Collection<?>) this.optionSource, tagWriter). }
true;private;1;3;/**  * Render the inner '{@code option}' tags using the {@link #optionSource}.  * @see #doRenderFromCollection(java.util.Collection, TagWriter)  */ ;/**  * Render the inner '{@code option}' tags using the {@link #optionSource}.  * @see #doRenderFromCollection(java.util.Collection, TagWriter)  */ private void renderFromEnum(TagWriter tagWriter) throws JspException {     doRenderFromCollection(CollectionUtils.arrayToList(((Class<?>) this.optionSource).getEnumConstants()), tagWriter). }
true;private;2;17;/**  * Render the inner '{@code option}' tags using the supplied {@link Collection} of  * objects as the source. The value of the {@link #valueProperty} field is used  * when rendering the '{@code value}' of the '{@code option}' and the value of the  * {@link #labelProperty} property is used when rendering the label.  */ ;/**  * Render the inner '{@code option}' tags using the supplied {@link Collection} of  * objects as the source. The value of the {@link #valueProperty} field is used  * when rendering the '{@code value}' of the '{@code option}' and the value of the  * {@link #labelProperty} property is used when rendering the label.  */ private void doRenderFromCollection(Collection<?> optionCollection, TagWriter tagWriter) throws JspException {     for (Object item : optionCollection) {         BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(item).         Object value.         if (this.valueProperty != null) {             value = wrapper.getPropertyValue(this.valueProperty).         } else if (item instanceof Enum) {             value = ((Enum<?>) item).name().         } else {             value = item.         }         Object label = (this.labelProperty != null ? wrapper.getPropertyValue(this.labelProperty) : item).         renderOption(tagWriter, item, value, label).     } }
true;private;4;23;/**  * Render an HTML '{@code option}' with the supplied value and label. Marks the  * value as 'selected' if either the item itself or its value match the bound value.  */ ;/**  * Render an HTML '{@code option}' with the supplied value and label. Marks the  * value as 'selected' if either the item itself or its value match the bound value.  */ private void renderOption(TagWriter tagWriter, Object item, @Nullable Object value, @Nullable Object label) throws JspException {     tagWriter.startTag("option").     writeCommonAttributes(tagWriter).     String valueDisplayString = getDisplayString(value).     String labelDisplayString = getDisplayString(label).     valueDisplayString = processOptionValue(valueDisplayString).     // allows render values to handle some strange browser compat issues.     tagWriter.writeAttribute("value", valueDisplayString).     if (isOptionSelected(value) || (value != item && isOptionSelected(item))) {         tagWriter.writeAttribute("selected", "selected").     }     if (isOptionDisabled()) {         tagWriter.writeAttribute("disabled", "disabled").     }     tagWriter.appendValue(labelDisplayString).     tagWriter.endTag(). }
true;private;1;4;/**  * Determine the display value of the supplied {@code Object},  * HTML-escaped as required.  */ ;/**  * Determine the display value of the supplied {@code Object},  * HTML-escaped as required.  */ private String getDisplayString(@Nullable Object value) {     PropertyEditor editor = (value != null ? this.bindStatus.findEditor(value.getClass()) : null).     return ValueFormatter.getDisplayString(value, editor, this.htmlEscape). }
true;protected;1;3;/**  * Process the option value before it is written.  * <p>The default implementation simply returns the same value unchanged.  */ ;/**  * Process the option value before it is written.  * <p>The default implementation simply returns the same value unchanged.  */ protected String processOptionValue(String resolvedValue) {     return resolvedValue. }
true;private;1;3;/**  * Determine whether the supplied values matched the selected value.  * <p>Delegates to {@link SelectedValueComparator#isSelected}.  */ ;/**  * Determine whether the supplied values matched the selected value.  * <p>Delegates to {@link SelectedValueComparator#isSelected}.  */ private boolean isOptionSelected(@Nullable Object resolvedValue) {     return SelectedValueComparator.isSelected(this.bindStatus, resolvedValue). }
true;protected;0;3;/**  * Determine whether the option fields should be disabled.  */ ;/**  * Determine whether the option fields should be disabled.  */ protected boolean isOptionDisabled() throws JspException {     return false. }
true;protected;1;2;/**  * Write default attributes configured to the supplied {@link TagWriter}.  */ ;/**  * Write default attributes configured to the supplied {@link TagWriter}.  */ protected void writeCommonAttributes(TagWriter tagWriter) throws JspException { }
