# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1427679734;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1427679742;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1435692241;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1438078548;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1441284823;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1443043357;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1449660404;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1467730834;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1477860027;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1481630403;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1487362018;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1494019141;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1495868221;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1496837955;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1497346678;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1498780456;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1522843494;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1529361191;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1530174524;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1530737169;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1536942003;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters);1536962806;Basic constructor with converters only.;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters) {_		this(converters, null)__	};basic,constructor,with,converters,only;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,this,converters,null
AbstractMessageConverterMethodArgumentResolver -> protected RequestResponseBodyAdviceChain getAdvice();1427679734;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;protected RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;protected,request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> protected RequestResponseBodyAdviceChain getAdvice();1427679742;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;protected RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;protected,request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> protected RequestResponseBodyAdviceChain getAdvice();1435692241;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;protected RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;protected,request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> protected RequestResponseBodyAdviceChain getAdvice();1438078548;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;protected RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;protected,request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> protected RequestResponseBodyAdviceChain getAdvice();1441284823;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;protected RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;protected,request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> protected RequestResponseBodyAdviceChain getAdvice();1443043357;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;protected RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;protected,request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> protected RequestResponseBodyAdviceChain getAdvice();1449660404;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;protected RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;protected,request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> protected RequestResponseBodyAdviceChain getAdvice();1467730834;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;protected RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;protected,request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> protected RequestResponseBodyAdviceChain getAdvice();1477860027;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;protected RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;protected,request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> protected RequestResponseBodyAdviceChain getAdvice();1481630403;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;protected RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;protected,request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> protected RequestResponseBodyAdviceChain getAdvice();1487362018;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;protected RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;protected,request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> protected RequestResponseBodyAdviceChain getAdvice();1494019141;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;protected RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;protected,request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> protected RequestResponseBodyAdviceChain getAdvice();1495868221;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;protected RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;protected,request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1496837955;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param parameter the method parameter descriptor (may be {@code null})_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@Nullable_	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, parameter, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,parameter,the,method,parameter,descriptor,may,be,code,null,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;nullable,protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,parameter,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,parameter,param,type
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1497346678;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param parameter the method parameter descriptor (may be {@code null})_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@Nullable_	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, parameter, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,parameter,the,method,parameter,descriptor,may,be,code,null,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;nullable,protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,parameter,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,parameter,param,type
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1498780456;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param parameter the method parameter descriptor (may be {@code null})_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@Nullable_	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, parameter, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,parameter,the,method,parameter,descriptor,may,be,code,null,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;nullable,protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,parameter,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,parameter,param,type
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1522843494;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param parameter the method parameter descriptor (may be {@code null})_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@Nullable_	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, parameter, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,parameter,the,method,parameter,descriptor,may,be,code,null,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;nullable,protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,parameter,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,parameter,param,type
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1529361191;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param parameter the method parameter descriptor (may be {@code null})_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@Nullable_	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, parameter, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,parameter,the,method,parameter,descriptor,may,be,code,null,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;nullable,protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,parameter,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,parameter,param,type
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1530174524;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param parameter the method parameter descriptor (may be {@code null})_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@Nullable_	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, parameter, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,parameter,the,method,parameter,descriptor,may,be,code,null,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;nullable,protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,parameter,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,parameter,param,type
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1530737169;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param parameter the method parameter descriptor (may be {@code null})_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@Nullable_	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, parameter, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,parameter,the,method,parameter,descriptor,may,be,code,null,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;nullable,protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,parameter,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,parameter,param,type
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1536942003;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param parameter the method parameter descriptor (may be {@code null})_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@Nullable_	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, parameter, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,parameter,the,method,parameter,descriptor,may,be,code,null,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;nullable,protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,parameter,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,parameter,param,type
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1536962806;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param parameter the method parameter descriptor (may be {@code null})_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@Nullable_	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, parameter, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,parameter,the,method,parameter,descriptor,may,be,code,null,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;nullable,protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,parameter,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,parameter,param,type
AbstractMessageConverterMethodArgumentResolver -> protected Object adaptArgumentIfNecessary(Object arg, MethodParameter parameter);1481630403;Adapt the given argument against the method parameter, if necessary._@param arg the resolved argument_@param parameter the method parameter descriptor_@return the adapted argument, or the original resolved argument as-is_@since 4.3.5;protected Object adaptArgumentIfNecessary(Object arg, MethodParameter parameter) {_		if (parameter.getParameterType() == Optional.class) {_			if (arg == null || (arg instanceof Collection && ((Collection) arg).isEmpty()) ||_					(arg instanceof Object[] && ((Object[]) arg).length == 0)) {_				return Optional.empty()__			}_			else {_				return Optional.of(arg)__			}_		}_		return arg__	};adapt,the,given,argument,against,the,method,parameter,if,necessary,param,arg,the,resolved,argument,param,parameter,the,method,parameter,descriptor,return,the,adapted,argument,or,the,original,resolved,argument,as,is,since,4,3,5;protected,object,adapt,argument,if,necessary,object,arg,method,parameter,parameter,if,parameter,get,parameter,type,optional,class,if,arg,null,arg,instanceof,collection,collection,arg,is,empty,arg,instanceof,object,object,arg,length,0,return,optional,empty,else,return,optional,of,arg,return,arg
AbstractMessageConverterMethodArgumentResolver -> protected Object adaptArgumentIfNecessary(Object arg, MethodParameter parameter);1487362018;Adapt the given argument against the method parameter, if necessary._@param arg the resolved argument_@param parameter the method parameter descriptor_@return the adapted argument, or the original resolved argument as-is_@since 4.3.5;protected Object adaptArgumentIfNecessary(Object arg, MethodParameter parameter) {_		if (parameter.getParameterType() == Optional.class) {_			if (arg == null || (arg instanceof Collection && ((Collection) arg).isEmpty()) ||_					(arg instanceof Object[] && ((Object[]) arg).length == 0)) {_				return Optional.empty()__			}_			else {_				return Optional.of(arg)__			}_		}_		return arg__	};adapt,the,given,argument,against,the,method,parameter,if,necessary,param,arg,the,resolved,argument,param,parameter,the,method,parameter,descriptor,return,the,adapted,argument,or,the,original,resolved,argument,as,is,since,4,3,5;protected,object,adapt,argument,if,necessary,object,arg,method,parameter,parameter,if,parameter,get,parameter,type,optional,class,if,arg,null,arg,instanceof,collection,collection,arg,is,empty,arg,instanceof,object,object,arg,length,0,return,optional,empty,else,return,optional,of,arg,return,arg
AbstractMessageConverterMethodArgumentResolver -> protected Object adaptArgumentIfNecessary(Object arg, MethodParameter parameter);1494019141;Adapt the given argument against the method parameter, if necessary._@param arg the resolved argument_@param parameter the method parameter descriptor_@return the adapted argument, or the original resolved argument as-is_@since 4.3.5;protected Object adaptArgumentIfNecessary(Object arg, MethodParameter parameter) {_		if (parameter.getParameterType() == Optional.class) {_			if (arg == null || (arg instanceof Collection && ((Collection) arg).isEmpty()) ||_					(arg instanceof Object[] && ((Object[]) arg).length == 0)) {_				return Optional.empty()__			}_			else {_				return Optional.of(arg)__			}_		}_		return arg__	};adapt,the,given,argument,against,the,method,parameter,if,necessary,param,arg,the,resolved,argument,param,parameter,the,method,parameter,descriptor,return,the,adapted,argument,or,the,original,resolved,argument,as,is,since,4,3,5;protected,object,adapt,argument,if,necessary,object,arg,method,parameter,parameter,if,parameter,get,parameter,type,optional,class,if,arg,null,arg,instanceof,collection,collection,arg,is,empty,arg,instanceof,object,object,arg,length,0,return,optional,empty,else,return,optional,of,arg,return,arg
AbstractMessageConverterMethodArgumentResolver -> protected Object adaptArgumentIfNecessary(Object arg, MethodParameter parameter);1495868221;Adapt the given argument against the method parameter, if necessary._@param arg the resolved argument_@param parameter the method parameter descriptor_@return the adapted argument, or the original resolved argument as-is_@since 4.3.5;protected Object adaptArgumentIfNecessary(Object arg, MethodParameter parameter) {_		if (parameter.getParameterType() == Optional.class) {_			if (arg == null || (arg instanceof Collection && ((Collection) arg).isEmpty()) ||_					(arg instanceof Object[] && ((Object[]) arg).length == 0)) {_				return Optional.empty()__			}_			else {_				return Optional.of(arg)__			}_		}_		return arg__	};adapt,the,given,argument,against,the,method,parameter,if,necessary,param,arg,the,resolved,argument,param,parameter,the,method,parameter,descriptor,return,the,adapted,argument,or,the,original,resolved,argument,as,is,since,4,3,5;protected,object,adapt,argument,if,necessary,object,arg,method,parameter,parameter,if,parameter,get,parameter,type,optional,class,if,arg,null,arg,instanceof,collection,collection,arg,is,empty,arg,instanceof,object,object,arg,length,0,return,optional,empty,else,return,optional,of,arg,return,arg
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, 			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException;1353602122;Creates the method argument value of the expected parameter type by reading_from the given HttpInputMessage.__@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param methodParam the method argument_@param targetType the type of object to create, not necessarily the same as_the method parameter type (e.g. for {@code HttpEntity<String>} method_parameter the target type is String)_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,_			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException {__				MediaType contentType = inputMessage.getHeaders().getContentType()__				if (contentType == null) {_					contentType = MediaType.APPLICATION_OCTET_STREAM__				}__				Class<?> contextClass = methodParam.getDeclaringClass()__				Map<TypeVariable, Type> map = GenericTypeResolver.getTypeVariableMap(contextClass)__				Class<T> targetClass = (Class<T>) GenericTypeResolver.resolveType(targetType, map)___				for (HttpMessageConverter<?> converter : this.messageConverters) {_					if (converter instanceof GenericHttpMessageConverter) {_						GenericHttpMessageConverter genericConverter = (GenericHttpMessageConverter) converter__						if (genericConverter.canRead(targetType, contextClass, contentType)) {_							if (logger.isDebugEnabled()) {_								logger.debug("Reading [" + targetType + "] as \"" +_										contentType + "\" using [" + converter + "]")__							}_							return (T) genericConverter.read(targetType, contextClass, inputMessage)__						}_					}_					if (targetClass != null) {_						if (converter.canRead(targetClass, contentType)) {_							if (logger.isDebugEnabled()) {_								logger.debug("Reading [" + targetClass.getName() + "] as \"" +_										contentType + "\" using [" + converter + "]")__							}_							return ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__						}_					}_				}__				throw new HttpMediaTypeNotSupportedException(contentType, allSupportedMediaTypes)__			};creates,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,method,param,the,method,argument,param,target,type,the,type,of,object,to,create,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,method,parameter,the,target,type,is,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,method,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,media,type,content,type,input,message,get,headers,get,content,type,if,content,type,null,content,type,media,type,class,context,class,method,param,get,declaring,class,map,type,variable,type,map,generic,type,resolver,get,type,variable,map,context,class,class,t,target,class,class,t,generic,type,resolver,resolve,type,target,type,map,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,type,as,content,type,using,converter,return,t,generic,converter,read,target,type,context,class,input,message,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,class,get,name,as,content,type,using,converter,return,http,message,converter,t,converter,read,target,class,input,message,throw,new,http,media,type,not,supported,exception,content,type,all,supported,media,types
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, 			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException;1356735495;Creates the method argument value of the expected parameter type by reading_from the given HttpInputMessage.__@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param methodParam the method argument_@param targetType the type of object to create, not necessarily the same as_the method parameter type (e.g. for {@code HttpEntity<String>} method_parameter the target type is String)_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,_			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException {__				MediaType contentType = inputMessage.getHeaders().getContentType()__				if (contentType == null) {_					contentType = MediaType.APPLICATION_OCTET_STREAM__				}__				Class<?> contextClass = methodParam.getDeclaringClass()__				Map<TypeVariable, Type> map = GenericTypeResolver.getTypeVariableMap(contextClass)__				Class<T> targetClass = (Class<T>) GenericTypeResolver.resolveType(targetType, map)___				for (HttpMessageConverter<?> converter : this.messageConverters) {_					if (converter instanceof GenericHttpMessageConverter) {_						GenericHttpMessageConverter genericConverter = (GenericHttpMessageConverter) converter__						if (genericConverter.canRead(targetType, contextClass, contentType)) {_							if (logger.isDebugEnabled()) {_								logger.debug("Reading [" + targetType + "] as \"" +_										contentType + "\" using [" + converter + "]")__							}_							return genericConverter.read(targetType, contextClass, inputMessage)__						}_					}_					if (targetClass != null) {_						if (converter.canRead(targetClass, contentType)) {_							if (logger.isDebugEnabled()) {_								logger.debug("Reading [" + targetClass.getName() + "] as \"" +_										contentType + "\" using [" + converter + "]")__							}_							return ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__						}_					}_				}__				throw new HttpMediaTypeNotSupportedException(contentType, allSupportedMediaTypes)__			};creates,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,method,param,the,method,argument,param,target,type,the,type,of,object,to,create,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,method,parameter,the,target,type,is,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,method,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,media,type,content,type,input,message,get,headers,get,content,type,if,content,type,null,content,type,media,type,class,context,class,method,param,get,declaring,class,map,type,variable,type,map,generic,type,resolver,get,type,variable,map,context,class,class,t,target,class,class,t,generic,type,resolver,resolve,type,target,type,map,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,type,as,content,type,using,converter,return,generic,converter,read,target,type,context,class,input,message,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,class,get,name,as,content,type,using,converter,return,http,message,converter,t,converter,read,target,class,input,message,throw,new,http,media,type,not,supported,exception,content,type,all,supported,media,types
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, 			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException;1381389591;Creates the method argument value of the expected parameter type by reading_from the given HttpInputMessage.__@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param methodParam the method argument_@param targetType the type of object to create, not necessarily the same as_the method parameter type (e.g. for {@code HttpEntity<String>} method_parameter the target type is String)_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,_			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException {__				MediaType contentType = inputMessage.getHeaders().getContentType()__				if (contentType == null) {_					contentType = MediaType.APPLICATION_OCTET_STREAM__				}__				Class<?> contextClass = methodParam.getDeclaringClass()__				Class<T> targetClass = (Class<T>) ResolvableType.forType(targetType,_						ResolvableType.forMethodParameter(methodParam)).resolve()___				for (HttpMessageConverter<?> converter : this.messageConverters) {_					if (converter instanceof GenericHttpMessageConverter) {_						GenericHttpMessageConverter genericConverter = (GenericHttpMessageConverter) converter__						if (genericConverter.canRead(targetType, contextClass, contentType)) {_							if (logger.isDebugEnabled()) {_								logger.debug("Reading [" + targetType + "] as \"" +_										contentType + "\" using [" + converter + "]")__							}_							return genericConverter.read(targetType, contextClass, inputMessage)__						}_					}_					if (targetClass != null) {_						if (converter.canRead(targetClass, contentType)) {_							if (logger.isDebugEnabled()) {_								logger.debug("Reading [" + targetClass.getName() + "] as \"" +_										contentType + "\" using [" + converter + "]")__							}_							return ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__						}_					}_				}__				throw new HttpMediaTypeNotSupportedException(contentType, allSupportedMediaTypes)__			};creates,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,method,param,the,method,argument,param,target,type,the,type,of,object,to,create,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,method,parameter,the,target,type,is,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,method,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,media,type,content,type,input,message,get,headers,get,content,type,if,content,type,null,content,type,media,type,class,context,class,method,param,get,declaring,class,class,t,target,class,class,t,resolvable,type,for,type,target,type,resolvable,type,for,method,parameter,method,param,resolve,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,type,as,content,type,using,converter,return,generic,converter,read,target,type,context,class,input,message,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,class,get,name,as,content,type,using,converter,return,http,message,converter,t,converter,read,target,class,input,message,throw,new,http,media,type,not,supported,exception,content,type,all,supported,media,types
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, 			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException;1381788683;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param methodParam the method argument_@param targetType the type of object to create, not necessarily the same as_the method parameter type (e.g. for {@code HttpEntity<String>} method_parameter the target type is String)_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,_			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException {__		MediaType contentType = inputMessage.getHeaders().getContentType()__		if (contentType == null) {_			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = methodParam.getContainingClass()__		Class<T> targetClass = (Class<T>) ResolvableType.forType(targetType,_				ResolvableType.forMethodParameter(methodParam)).resolve()___		for (HttpMessageConverter<?> converter : this.messageConverters) {_			if (converter instanceof GenericHttpMessageConverter) {_				GenericHttpMessageConverter genericConverter = (GenericHttpMessageConverter) converter__				if (genericConverter.canRead(targetType, contextClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Reading [" + targetType + "] as \"" +_								contentType + "\" using [" + converter + "]")__					}_					return genericConverter.read(targetType, contextClass, inputMessage)__				}_			}_			if (targetClass != null) {_				if (converter.canRead(targetClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Reading [" + targetClass.getName() + "] as \"" +_								contentType + "\" using [" + converter + "]")__					}_					return ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__				}_			}_		}__		throw new HttpMediaTypeNotSupportedException(contentType, allSupportedMediaTypes)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,method,param,the,method,argument,param,target,type,the,type,of,object,to,create,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,method,parameter,the,target,type,is,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,method,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,media,type,content,type,input,message,get,headers,get,content,type,if,content,type,null,content,type,media,type,class,context,class,method,param,get,containing,class,class,t,target,class,class,t,resolvable,type,for,type,target,type,resolvable,type,for,method,parameter,method,param,resolve,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,type,as,content,type,using,converter,return,generic,converter,read,target,type,context,class,input,message,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,class,get,name,as,content,type,using,converter,return,http,message,converter,t,converter,read,target,class,input,message,throw,new,http,media,type,not,supported,exception,content,type,all,supported,media,types
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, 			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException;1383683935;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param methodParam the method argument_@param targetType the type of object to create, not necessarily the same as_the method parameter type (e.g. for {@code HttpEntity<String>} method_parameter the target type is String)_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,_			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException {__		MediaType contentType__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}__		if (contentType == null) {_			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = methodParam.getContainingClass()__		Class<T> targetClass = (Class<T>) ResolvableType.forType(targetType,_				ResolvableType.forMethodParameter(methodParam)).resolve()___		for (HttpMessageConverter<?> converter : this.messageConverters) {_			if (converter instanceof GenericHttpMessageConverter) {_				GenericHttpMessageConverter genericConverter = (GenericHttpMessageConverter) converter__				if (genericConverter.canRead(targetType, contextClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Reading [" + targetType + "] as \"" +_								contentType + "\" using [" + converter + "]")__					}_					return genericConverter.read(targetType, contextClass, inputMessage)__				}_			}_			if (targetClass != null) {_				if (converter.canRead(targetClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Reading [" + targetClass.getName() + "] as \"" +_								contentType + "\" using [" + converter + "]")__					}_					return ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__				}_			}_		}__		throw new HttpMediaTypeNotSupportedException(contentType, allSupportedMediaTypes)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,method,param,the,method,argument,param,target,type,the,type,of,object,to,create,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,method,parameter,the,target,type,is,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,method,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,media,type,content,type,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,content,type,media,type,class,context,class,method,param,get,containing,class,class,t,target,class,class,t,resolvable,type,for,type,target,type,resolvable,type,for,method,parameter,method,param,resolve,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,type,as,content,type,using,converter,return,generic,converter,read,target,type,context,class,input,message,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,class,get,name,as,content,type,using,converter,return,http,message,converter,t,converter,read,target,class,input,message,throw,new,http,media,type,not,supported,exception,content,type,all,supported,media,types
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, 			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException;1385412762;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param methodParam the method argument_@param targetType the type of object to create, not necessarily the same as_the method parameter type (e.g. for {@code HttpEntity<String>} method_parameter the target type is String)_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,_			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException {__		MediaType contentType__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}__		if (contentType == null) {_			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = methodParam.getContainingClass()__		Class<T> targetClass = (Class<T>) ResolvableType.forType(targetType,_				ResolvableType.forMethodParameter(methodParam)).resolve()___		for (HttpMessageConverter<?> converter : this.messageConverters) {_			if (converter instanceof GenericHttpMessageConverter) {_				GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__				if (genericConverter.canRead(targetType, contextClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Reading [" + targetType + "] as \"" +_								contentType + "\" using [" + converter + "]")__					}_					return genericConverter.read(targetType, contextClass, inputMessage)__				}_			}_			if (targetClass != null) {_				if (converter.canRead(targetClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Reading [" + targetClass.getName() + "] as \"" +_								contentType + "\" using [" + converter + "]")__					}_					return ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__				}_			}_		}__		throw new HttpMediaTypeNotSupportedException(contentType, allSupportedMediaTypes)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,method,param,the,method,argument,param,target,type,the,type,of,object,to,create,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,method,parameter,the,target,type,is,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,method,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,media,type,content,type,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,content,type,media,type,class,context,class,method,param,get,containing,class,class,t,target,class,class,t,resolvable,type,for,type,target,type,resolvable,type,for,method,parameter,method,param,resolve,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,type,as,content,type,using,converter,return,generic,converter,read,target,type,context,class,input,message,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,class,get,name,as,content,type,using,converter,return,http,message,converter,t,converter,read,target,class,input,message,throw,new,http,media,type,not,supported,exception,content,type,all,supported,media,types
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, 			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException;1387490663;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param methodParam the method argument_@param targetType the type of object to create, not necessarily the same as_the method parameter type (e.g. for {@code HttpEntity<String>} method_parameter the target type is String)_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,_			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException {__		MediaType contentType__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = methodParam.getContainingClass()___		for (HttpMessageConverter<?> converter : this.messageConverters) {_			if (converter instanceof GenericHttpMessageConverter) {_				GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__				if (genericConverter.canRead(targetType, contextClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Reading [" + targetType + "] as \"" +_								contentType + "\" using [" + converter + "]")__					}_					return genericConverter.read(targetType, contextClass, inputMessage)__				}_			}_			Class<T> targetClass = (Class<T>)_					ResolvableType.forMethodParameter(methodParam, targetType).resolve(Object.class)__			if (converter.canRead(targetClass, contentType)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Reading [" + targetClass.getName() + "] as \"" +_							contentType + "\" using [" + converter + "]")__				}_				return ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__			}_		}__		throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,method,param,the,method,argument,param,target,type,the,type,of,object,to,create,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,method,parameter,the,target,type,is,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,method,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,media,type,content,type,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,content,type,media,type,class,context,class,method,param,get,containing,class,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,type,as,content,type,using,converter,return,generic,converter,read,target,type,context,class,input,message,class,t,target,class,class,t,resolvable,type,for,method,parameter,method,param,target,type,resolve,object,class,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,class,get,name,as,content,type,using,converter,return,http,message,converter,t,converter,read,target,class,input,message,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, 			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException;1423592910;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param methodParam the method argument_@param targetType the type of object to create, not necessarily the same as_the method parameter type (e.g. for {@code HttpEntity<String>} method_parameter the target type is String)_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,_			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException {__		MediaType contentType__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = methodParam.getContainingClass()___		for (HttpMessageConverter<?> converter : this.messageConverters) {_			if (converter instanceof GenericHttpMessageConverter) {_				GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__				if (genericConverter.canRead(targetType, contextClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Reading [" + targetType + "] as \"" +_								contentType + "\" using [" + converter + "]")__					}_					return genericConverter.read(targetType, contextClass, inputMessage)__				}_			}_			Class<T> targetClass = (Class<T>)_					ResolvableType.forMethodParameter(methodParam, targetType).resolve(Object.class)__			if (converter.canRead(targetClass, contentType)) {_				if (logger.isDebugEnabled()) {_					logger.debug("Reading [" + targetClass.getName() + "] as \"" +_							contentType + "\" using [" + converter + "]")__				}_				return ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__			}_		}__		throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,method,param,the,method,argument,param,target,type,the,type,of,object,to,create,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,method,parameter,the,target,type,is,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,method,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,media,type,content,type,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,content,type,media,type,class,context,class,method,param,get,containing,class,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,type,as,content,type,using,converter,return,generic,converter,read,target,type,context,class,input,message,class,t,target,class,class,t,resolvable,type,for,method,parameter,method,param,target,type,resolve,object,class,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,class,get,name,as,content,type,using,converter,return,http,message,converter,t,converter,read,target,class,input,message,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, 			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException;1424385427;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param methodParam the method parameter descriptor (may be {@code null})_@param targetType the type of object to create, not necessarily the same as_the method parameter type (e.g. for {@code HttpEntity<String>} method_parameter the target type is String)_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,_			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException {__		MediaType contentType__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = (methodParam != null ? methodParam.getContainingClass() : null)__		Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = (methodParam != null ?_					ResolvableType.forMethodParameter(methodParam) : ResolvableType.forType(targetType))__			targetClass = (Class<T>) resolvableType.resolve()__		}__		for (HttpMessageConverter<?> converter : this.messageConverters) {_			if (converter instanceof GenericHttpMessageConverter) {_				GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__				if (genericConverter.canRead(targetType, contextClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Reading [" + targetType + "] as \"" +_								contentType + "\" using [" + converter + "]")__					}_					return genericConverter.read(targetType, contextClass, inputMessage)__				}_			}_			else if (targetClass != null) {_				if (converter.canRead(targetClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Reading [" + targetClass.getName() + "] as \"" +_								contentType + "\" using [" + converter + "]")__					}_					return ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__				}_			}_		}__		throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,method,param,the,method,parameter,descriptor,may,be,code,null,param,target,type,the,type,of,object,to,create,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,method,parameter,the,target,type,is,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,method,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,media,type,content,type,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,content,type,media,type,class,context,class,method,param,null,method,param,get,containing,class,null,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,method,param,null,resolvable,type,for,method,parameter,method,param,resolvable,type,for,type,target,type,target,class,class,t,resolvable,type,resolve,for,http,message,converter,converter,this,message,converters,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,type,as,content,type,using,converter,return,generic,converter,read,target,type,context,class,input,message,else,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,reading,target,class,get,name,as,content,type,using,converter,return,http,message,converter,t,converter,read,target,class,input,message,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1328020251;Returns the media types supported by all provided message converters preserving their ordering and_further sorting by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};returns,the,media,types,supported,by,all,provided,message,converters,preserving,their,ordering,and,further,sorting,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1345574045;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1345730325;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1351732516;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1353602122;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1356735495;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1381389591;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1381788683;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1383683935;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1385412762;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1387490663;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1423592910;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1424272627;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1424385427;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1427679734;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1427679742;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1435692241;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1438078548;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1441284823;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1443043357;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1449660404;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<MediaType>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<MediaType>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,media,type,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,media,type,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1467730834;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1477860027;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1481630403;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1487362018;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1494019141;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1495868221;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1496837955;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1497346678;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1498780456;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1522843494;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1529361191;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1530174524;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1530737169;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1536942003;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters);1536962806;Return the media types supported by all provided message converters sorted_by specificity via {@link MediaType#sortBySpecificity(List)}.;private static List<MediaType> getAllSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {_		Set<MediaType> allSupportedMediaTypes = new LinkedHashSet<>()__		for (HttpMessageConverter<?> messageConverter : messageConverters) {_			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())__		}_		List<MediaType> result = new ArrayList<>(allSupportedMediaTypes)__		MediaType.sortBySpecificity(result)__		return Collections.unmodifiableList(result)__	};return,the,media,types,supported,by,all,provided,message,converters,sorted,by,specificity,via,link,media,type,sort,by,specificity,list;private,static,list,media,type,get,all,supported,media,types,list,http,message,converter,message,converters,set,media,type,all,supported,media,types,new,linked,hash,set,for,http,message,converter,message,converter,message,converters,all,supported,media,types,add,all,message,converter,get,supported,media,types,list,media,type,result,new,array,list,all,supported,media,types,media,type,sort,by,specificity,result,return,collections,unmodifiable,list,result
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter);1496837955;Adapt the given argument against the method parameter, if necessary._@param arg the resolved argument_@param parameter the method parameter descriptor_@return the adapted argument, or the original resolved argument as-is_@since 4.3.5;@Nullable_	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter) {_		if (parameter.getParameterType() == Optional.class) {_			if (arg == null || (arg instanceof Collection && ((Collection) arg).isEmpty()) ||_					(arg instanceof Object[] && ((Object[]) arg).length == 0)) {_				return Optional.empty()__			}_			else {_				return Optional.of(arg)__			}_		}_		return arg__	};adapt,the,given,argument,against,the,method,parameter,if,necessary,param,arg,the,resolved,argument,param,parameter,the,method,parameter,descriptor,return,the,adapted,argument,or,the,original,resolved,argument,as,is,since,4,3,5;nullable,protected,object,adapt,argument,if,necessary,nullable,object,arg,method,parameter,parameter,if,parameter,get,parameter,type,optional,class,if,arg,null,arg,instanceof,collection,collection,arg,is,empty,arg,instanceof,object,object,arg,length,0,return,optional,empty,else,return,optional,of,arg,return,arg
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter);1497346678;Adapt the given argument against the method parameter, if necessary._@param arg the resolved argument_@param parameter the method parameter descriptor_@return the adapted argument, or the original resolved argument as-is_@since 4.3.5;@Nullable_	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter) {_		if (parameter.getParameterType() == Optional.class) {_			if (arg == null || (arg instanceof Collection && ((Collection) arg).isEmpty()) ||_					(arg instanceof Object[] && ((Object[]) arg).length == 0)) {_				return Optional.empty()__			}_			else {_				return Optional.of(arg)__			}_		}_		return arg__	};adapt,the,given,argument,against,the,method,parameter,if,necessary,param,arg,the,resolved,argument,param,parameter,the,method,parameter,descriptor,return,the,adapted,argument,or,the,original,resolved,argument,as,is,since,4,3,5;nullable,protected,object,adapt,argument,if,necessary,nullable,object,arg,method,parameter,parameter,if,parameter,get,parameter,type,optional,class,if,arg,null,arg,instanceof,collection,collection,arg,is,empty,arg,instanceof,object,object,arg,length,0,return,optional,empty,else,return,optional,of,arg,return,arg
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter);1498780456;Adapt the given argument against the method parameter, if necessary._@param arg the resolved argument_@param parameter the method parameter descriptor_@return the adapted argument, or the original resolved argument as-is_@since 4.3.5;@Nullable_	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter) {_		if (parameter.getParameterType() == Optional.class) {_			if (arg == null || (arg instanceof Collection && ((Collection) arg).isEmpty()) ||_					(arg instanceof Object[] && ((Object[]) arg).length == 0)) {_				return Optional.empty()__			}_			else {_				return Optional.of(arg)__			}_		}_		return arg__	};adapt,the,given,argument,against,the,method,parameter,if,necessary,param,arg,the,resolved,argument,param,parameter,the,method,parameter,descriptor,return,the,adapted,argument,or,the,original,resolved,argument,as,is,since,4,3,5;nullable,protected,object,adapt,argument,if,necessary,nullable,object,arg,method,parameter,parameter,if,parameter,get,parameter,type,optional,class,if,arg,null,arg,instanceof,collection,collection,arg,is,empty,arg,instanceof,object,object,arg,length,0,return,optional,empty,else,return,optional,of,arg,return,arg
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter);1522843494;Adapt the given argument against the method parameter, if necessary._@param arg the resolved argument_@param parameter the method parameter descriptor_@return the adapted argument, or the original resolved argument as-is_@since 4.3.5;@Nullable_	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter) {_		if (parameter.getParameterType() == Optional.class) {_			if (arg == null || (arg instanceof Collection && ((Collection<?>) arg).isEmpty()) ||_					(arg instanceof Object[] && ((Object[]) arg).length == 0)) {_				return Optional.empty()__			}_			else {_				return Optional.of(arg)__			}_		}_		return arg__	};adapt,the,given,argument,against,the,method,parameter,if,necessary,param,arg,the,resolved,argument,param,parameter,the,method,parameter,descriptor,return,the,adapted,argument,or,the,original,resolved,argument,as,is,since,4,3,5;nullable,protected,object,adapt,argument,if,necessary,nullable,object,arg,method,parameter,parameter,if,parameter,get,parameter,type,optional,class,if,arg,null,arg,instanceof,collection,collection,arg,is,empty,arg,instanceof,object,object,arg,length,0,return,optional,empty,else,return,optional,of,arg,return,arg
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter);1529361191;Adapt the given argument against the method parameter, if necessary._@param arg the resolved argument_@param parameter the method parameter descriptor_@return the adapted argument, or the original resolved argument as-is_@since 4.3.5;@Nullable_	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter) {_		if (parameter.getParameterType() == Optional.class) {_			if (arg == null || (arg instanceof Collection && ((Collection<?>) arg).isEmpty()) ||_					(arg instanceof Object[] && ((Object[]) arg).length == 0)) {_				return Optional.empty()__			}_			else {_				return Optional.of(arg)__			}_		}_		return arg__	};adapt,the,given,argument,against,the,method,parameter,if,necessary,param,arg,the,resolved,argument,param,parameter,the,method,parameter,descriptor,return,the,adapted,argument,or,the,original,resolved,argument,as,is,since,4,3,5;nullable,protected,object,adapt,argument,if,necessary,nullable,object,arg,method,parameter,parameter,if,parameter,get,parameter,type,optional,class,if,arg,null,arg,instanceof,collection,collection,arg,is,empty,arg,instanceof,object,object,arg,length,0,return,optional,empty,else,return,optional,of,arg,return,arg
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter);1530174524;Adapt the given argument against the method parameter, if necessary._@param arg the resolved argument_@param parameter the method parameter descriptor_@return the adapted argument, or the original resolved argument as-is_@since 4.3.5;@Nullable_	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter) {_		if (parameter.getParameterType() == Optional.class) {_			if (arg == null || (arg instanceof Collection && ((Collection<?>) arg).isEmpty()) ||_					(arg instanceof Object[] && ((Object[]) arg).length == 0)) {_				return Optional.empty()__			}_			else {_				return Optional.of(arg)__			}_		}_		return arg__	};adapt,the,given,argument,against,the,method,parameter,if,necessary,param,arg,the,resolved,argument,param,parameter,the,method,parameter,descriptor,return,the,adapted,argument,or,the,original,resolved,argument,as,is,since,4,3,5;nullable,protected,object,adapt,argument,if,necessary,nullable,object,arg,method,parameter,parameter,if,parameter,get,parameter,type,optional,class,if,arg,null,arg,instanceof,collection,collection,arg,is,empty,arg,instanceof,object,object,arg,length,0,return,optional,empty,else,return,optional,of,arg,return,arg
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter);1530737169;Adapt the given argument against the method parameter, if necessary._@param arg the resolved argument_@param parameter the method parameter descriptor_@return the adapted argument, or the original resolved argument as-is_@since 4.3.5;@Nullable_	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter) {_		if (parameter.getParameterType() == Optional.class) {_			if (arg == null || (arg instanceof Collection && ((Collection<?>) arg).isEmpty()) ||_					(arg instanceof Object[] && ((Object[]) arg).length == 0)) {_				return Optional.empty()__			}_			else {_				return Optional.of(arg)__			}_		}_		return arg__	};adapt,the,given,argument,against,the,method,parameter,if,necessary,param,arg,the,resolved,argument,param,parameter,the,method,parameter,descriptor,return,the,adapted,argument,or,the,original,resolved,argument,as,is,since,4,3,5;nullable,protected,object,adapt,argument,if,necessary,nullable,object,arg,method,parameter,parameter,if,parameter,get,parameter,type,optional,class,if,arg,null,arg,instanceof,collection,collection,arg,is,empty,arg,instanceof,object,object,arg,length,0,return,optional,empty,else,return,optional,of,arg,return,arg
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter);1536942003;Adapt the given argument against the method parameter, if necessary._@param arg the resolved argument_@param parameter the method parameter descriptor_@return the adapted argument, or the original resolved argument as-is_@since 4.3.5;@Nullable_	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter) {_		if (parameter.getParameterType() == Optional.class) {_			if (arg == null || (arg instanceof Collection && ((Collection<?>) arg).isEmpty()) ||_					(arg instanceof Object[] && ((Object[]) arg).length == 0)) {_				return Optional.empty()__			}_			else {_				return Optional.of(arg)__			}_		}_		return arg__	};adapt,the,given,argument,against,the,method,parameter,if,necessary,param,arg,the,resolved,argument,param,parameter,the,method,parameter,descriptor,return,the,adapted,argument,or,the,original,resolved,argument,as,is,since,4,3,5;nullable,protected,object,adapt,argument,if,necessary,nullable,object,arg,method,parameter,parameter,if,parameter,get,parameter,type,optional,class,if,arg,null,arg,instanceof,collection,collection,arg,is,empty,arg,instanceof,object,object,arg,length,0,return,optional,empty,else,return,optional,of,arg,return,arg
AbstractMessageConverterMethodArgumentResolver -> @Nullable 	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter);1536962806;Adapt the given argument against the method parameter, if necessary._@param arg the resolved argument_@param parameter the method parameter descriptor_@return the adapted argument, or the original resolved argument as-is_@since 4.3.5;@Nullable_	protected Object adaptArgumentIfNecessary(@Nullable Object arg, MethodParameter parameter) {_		if (parameter.getParameterType() == Optional.class) {_			if (arg == null || (arg instanceof Collection && ((Collection<?>) arg).isEmpty()) ||_					(arg instanceof Object[] && ((Object[]) arg).length == 0)) {_				return Optional.empty()__			}_			else {_				return Optional.of(arg)__			}_		}_		return arg__	};adapt,the,given,argument,against,the,method,parameter,if,necessary,param,arg,the,resolved,argument,param,parameter,the,method,parameter,descriptor,return,the,adapted,argument,or,the,original,resolved,argument,as,is,since,4,3,5;nullable,protected,object,adapt,argument,if,necessary,nullable,object,arg,method,parameter,parameter,if,parameter,get,parameter,type,optional,class,if,arg,null,arg,instanceof,collection,collection,arg,is,empty,arg,instanceof,object,object,arg,length,0,return,optional,empty,else,return,optional,of,arg,return,arg
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1481630403;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter descriptor_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,descriptor,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1487362018;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter descriptor_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,descriptor,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1494019141;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter descriptor_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,descriptor,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1495868221;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter descriptor_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,descriptor,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1496837955;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter descriptor_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,descriptor,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1497346678;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter descriptor_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,descriptor,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1498780456;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter descriptor_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,descriptor,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1522843494;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter descriptor_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,descriptor,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1529361191;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter descriptor_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,descriptor,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1530174524;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter descriptor_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,descriptor,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1530737169;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter descriptor_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,descriptor,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1536942003;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter descriptor_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,descriptor,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter);1536962806;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param parameter the method parameter descriptor_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getExecutable().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,parameter,the,method,parameter,descriptor,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,executable,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> RequestResponseBodyAdviceChain getAdvice();1496837955;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> RequestResponseBodyAdviceChain getAdvice();1497346678;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> RequestResponseBodyAdviceChain getAdvice();1498780456;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> RequestResponseBodyAdviceChain getAdvice();1522843494;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> RequestResponseBodyAdviceChain getAdvice();1529361191;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> RequestResponseBodyAdviceChain getAdvice();1530174524;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> RequestResponseBodyAdviceChain getAdvice();1530737169;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> RequestResponseBodyAdviceChain getAdvice();1536942003;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> RequestResponseBodyAdviceChain getAdvice();1536962806;Return the configured {@link RequestBodyAdvice} and_{@link RequestBodyAdvice} where each instance may be wrapped as a_{@link org.springframework.web.method.ControllerAdviceBean ControllerAdviceBean}.;RequestResponseBodyAdviceChain getAdvice() {_		return this.advice__	};return,the,configured,link,request,body,advice,and,link,request,body,advice,where,each,instance,may,be,wrapped,as,a,link,org,springframework,web,method,controller,advice,bean,controller,advice,bean;request,response,body,advice,chain,get,advice,return,this,advice
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam, Class<T> paramType) throws IOException, 			HttpMediaTypeNotSupportedException;1328020251;Creates the method argument value of the expected parameter type by reading from the given request.__@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam, Class<T> paramType) throws IOException,_			HttpMediaTypeNotSupportedException {_			_				HttpInputMessage inputMessage = createInputMessage(webRequest)__				return readWithMessageConverters(inputMessage, methodParam, paramType)__			};creates,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,class,t,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam, Class<T> paramType) throws IOException, 			HttpMediaTypeNotSupportedException;1345574045;Creates the method argument value of the expected parameter type by_reading from the given request.__@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam, Class<T> paramType) throws IOException,_			HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};creates,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,class,t,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1481630403;Validate the request part if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter descriptor_@since 4.1.5_@see #isBindExceptionRequired;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,request,part,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,descriptor,since,4,1,5,see,is,bind,exception,required;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1487362018;Validate the binding target if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter descriptor_@since 4.1.5_@see #isBindExceptionRequired;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,binding,target,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,descriptor,since,4,1,5,see,is,bind,exception,required;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1494019141;Validate the binding target if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter descriptor_@since 4.1.5_@see #isBindExceptionRequired;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,binding,target,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,descriptor,since,4,1,5,see,is,bind,exception,required;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1495868221;Validate the binding target if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter descriptor_@since 4.1.5_@see #isBindExceptionRequired;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,binding,target,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,descriptor,since,4,1,5,see,is,bind,exception,required;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1496837955;Validate the binding target if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter descriptor_@since 4.1.5_@see #isBindExceptionRequired;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,binding,target,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,descriptor,since,4,1,5,see,is,bind,exception,required;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1497346678;Validate the binding target if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter descriptor_@since 4.1.5_@see #isBindExceptionRequired;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,binding,target,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,descriptor,since,4,1,5,see,is,bind,exception,required;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1498780456;Validate the binding target if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter descriptor_@since 4.1.5_@see #isBindExceptionRequired;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,binding,target,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,descriptor,since,4,1,5,see,is,bind,exception,required;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1522843494;Validate the binding target if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter descriptor_@since 4.1.5_@see #isBindExceptionRequired;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,binding,target,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,descriptor,since,4,1,5,see,is,bind,exception,required;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1529361191;Validate the binding target if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter descriptor_@since 4.1.5_@see #isBindExceptionRequired;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,binding,target,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,descriptor,since,4,1,5,see,is,bind,exception,required;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1530174524;Validate the binding target if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter descriptor_@since 4.1.5_@see #isBindExceptionRequired;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,binding,target,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,descriptor,since,4,1,5,see,is,bind,exception,required;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1530737169;Validate the binding target if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter descriptor_@since 4.1.5_@see #isBindExceptionRequired;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,binding,target,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,descriptor,since,4,1,5,see,is,bind,exception,required;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1536942003;Validate the binding target if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter descriptor_@since 4.1.5_@see #isBindExceptionRequired;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,binding,target,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,descriptor,since,4,1,5,see,is,bind,exception,required;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter);1536962806;Validate the binding target if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param parameter the method parameter descriptor_@since 4.1.5_@see #isBindExceptionRequired;protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,binding,target,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,parameter,the,method,parameter,descriptor,since,4,1,5,see,is,bind,exception,required;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	@Nullable 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1496837955;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param parameter the method parameter descriptor_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	@Nullable_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = parameter.getContainingClass()__		Class<T> targetClass = (targetType instanceof Class ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = ResolvableType.forMethodParameter(parameter)__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = (inputMessage instanceof HttpRequest ? ((HttpRequest) inputMessage).getMethod() : null)__		Object body = NO_VALUE___		EmptyBodyCheckingHttpInputMessage message__		try {_			message = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				GenericHttpMessageConverter<?> genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ? genericConverter.canRead(targetType, contextClass, contentType) :_						(targetClass != null && converter.canRead(targetClass, contentType))) {_					if (logger.isDebugEnabled()) {_						logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__					}_					if (message.hasBody()) {_						HttpInputMessage inputMessageToUse =_								getAdvice().beforeBodyRead(message, parameter, targetType, converterType)__						body = (genericConverter != null ? genericConverter.read(targetType, contextClass, message) :_								((HttpMessageConverter<T>) converter).read(targetClass, message))__						body = getAdvice().afterBodyRead(body, inputMessageToUse, parameter, targetType, converterType)__					}_					else {_						body = getAdvice().handleEmptyBody(null, message, parameter, targetType, converterType)__					}_					break__				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("I/O error while reading input message", ex)__		}__		if (body == NO_VALUE) {_			if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||_					(noContentType && !message.hasBody())) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,parameter,the,method,parameter,descriptor,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,nullable,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,parameter,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,parameter,get,containing,class,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,resolvable,type,for,method,parameter,parameter,target,class,class,t,resolvable,type,resolve,http,method,http,method,input,message,instanceof,http,request,http,request,input,message,get,method,null,object,body,empty,body,checking,http,input,message,message,try,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,converter,can,read,target,type,context,class,content,type,target,class,null,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,message,has,body,http,input,message,input,message,to,use,get,advice,before,body,read,message,parameter,target,type,converter,type,body,generic,converter,null,generic,converter,read,target,type,context,class,message,http,message,converter,t,converter,read,target,class,message,body,get,advice,after,body,read,body,input,message,to,use,parameter,target,type,converter,type,else,body,get,advice,handle,empty,body,null,message,parameter,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,i,o,error,while,reading,input,message,ex,if,body,if,http,method,null,contains,http,method,no,content,type,message,has,body,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	@Nullable 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1497346678;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param parameter the method parameter descriptor_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	@Nullable_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = parameter.getContainingClass()__		Class<T> targetClass = (targetType instanceof Class ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = ResolvableType.forMethodParameter(parameter)__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = (inputMessage instanceof HttpRequest ? ((HttpRequest) inputMessage).getMethod() : null)__		Object body = NO_VALUE___		EmptyBodyCheckingHttpInputMessage message__		try {_			message = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				GenericHttpMessageConverter<?> genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ? genericConverter.canRead(targetType, contextClass, contentType) :_						(targetClass != null && converter.canRead(targetClass, contentType))) {_					if (logger.isDebugEnabled()) {_						logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__					}_					if (message.hasBody()) {_						HttpInputMessage msgToUse =_								getAdvice().beforeBodyRead(message, parameter, targetType, converterType)__						body = (genericConverter != null ? genericConverter.read(targetType, contextClass, msgToUse) :_								((HttpMessageConverter<T>) converter).read(targetClass, msgToUse))__						body = getAdvice().afterBodyRead(body, msgToUse, parameter, targetType, converterType)__					}_					else {_						body = getAdvice().handleEmptyBody(null, message, parameter, targetType, converterType)__					}_					break__				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("I/O error while reading input message", ex)__		}__		if (body == NO_VALUE) {_			if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||_					(noContentType && !message.hasBody())) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,parameter,the,method,parameter,descriptor,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,nullable,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,parameter,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,parameter,get,containing,class,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,resolvable,type,for,method,parameter,parameter,target,class,class,t,resolvable,type,resolve,http,method,http,method,input,message,instanceof,http,request,http,request,input,message,get,method,null,object,body,empty,body,checking,http,input,message,message,try,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,converter,can,read,target,type,context,class,content,type,target,class,null,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,message,has,body,http,input,message,msg,to,use,get,advice,before,body,read,message,parameter,target,type,converter,type,body,generic,converter,null,generic,converter,read,target,type,context,class,msg,to,use,http,message,converter,t,converter,read,target,class,msg,to,use,body,get,advice,after,body,read,body,msg,to,use,parameter,target,type,converter,type,else,body,get,advice,handle,empty,body,null,message,parameter,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,i,o,error,while,reading,input,message,ex,if,body,if,http,method,null,contains,http,method,no,content,type,message,has,body,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	@Nullable 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1498780456;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param parameter the method parameter descriptor_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	@Nullable_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = parameter.getContainingClass()__		Class<T> targetClass = (targetType instanceof Class ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = ResolvableType.forMethodParameter(parameter)__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = (inputMessage instanceof HttpRequest ? ((HttpRequest) inputMessage).getMethod() : null)__		Object body = NO_VALUE___		EmptyBodyCheckingHttpInputMessage message__		try {_			message = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				GenericHttpMessageConverter<?> genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ? genericConverter.canRead(targetType, contextClass, contentType) :_						(targetClass != null && converter.canRead(targetClass, contentType))) {_					if (logger.isDebugEnabled()) {_						logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__					}_					if (message.hasBody()) {_						HttpInputMessage msgToUse =_								getAdvice().beforeBodyRead(message, parameter, targetType, converterType)__						body = (genericConverter != null ? genericConverter.read(targetType, contextClass, msgToUse) :_								((HttpMessageConverter<T>) converter).read(targetClass, msgToUse))__						body = getAdvice().afterBodyRead(body, msgToUse, parameter, targetType, converterType)__					}_					else {_						body = getAdvice().handleEmptyBody(null, message, parameter, targetType, converterType)__					}_					break__				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("I/O error while reading input message", ex)__		}__		if (body == NO_VALUE) {_			if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||_					(noContentType && !message.hasBody())) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,parameter,the,method,parameter,descriptor,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,nullable,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,parameter,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,parameter,get,containing,class,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,resolvable,type,for,method,parameter,parameter,target,class,class,t,resolvable,type,resolve,http,method,http,method,input,message,instanceof,http,request,http,request,input,message,get,method,null,object,body,empty,body,checking,http,input,message,message,try,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,converter,can,read,target,type,context,class,content,type,target,class,null,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,message,has,body,http,input,message,msg,to,use,get,advice,before,body,read,message,parameter,target,type,converter,type,body,generic,converter,null,generic,converter,read,target,type,context,class,msg,to,use,http,message,converter,t,converter,read,target,class,msg,to,use,body,get,advice,after,body,read,body,msg,to,use,parameter,target,type,converter,type,else,body,get,advice,handle,empty,body,null,message,parameter,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,i,o,error,while,reading,input,message,ex,if,body,if,http,method,null,contains,http,method,no,content,type,message,has,body,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	@Nullable 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1522843494;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param parameter the method parameter descriptor_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	@Nullable_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = parameter.getContainingClass()__		Class<T> targetClass = (targetType instanceof Class ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = ResolvableType.forMethodParameter(parameter)__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = (inputMessage instanceof HttpRequest ? ((HttpRequest) inputMessage).getMethod() : null)__		Object body = NO_VALUE___		EmptyBodyCheckingHttpInputMessage message__		try {_			message = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				GenericHttpMessageConverter<?> genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ? genericConverter.canRead(targetType, contextClass, contentType) :_						(targetClass != null && converter.canRead(targetClass, contentType))) {_					if (logger.isDebugEnabled()) {_						logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__					}_					if (message.hasBody()) {_						HttpInputMessage msgToUse =_								getAdvice().beforeBodyRead(message, parameter, targetType, converterType)__						body = (genericConverter != null ? genericConverter.read(targetType, contextClass, msgToUse) :_								((HttpMessageConverter<T>) converter).read(targetClass, msgToUse))__						body = getAdvice().afterBodyRead(body, msgToUse, parameter, targetType, converterType)__					}_					else {_						body = getAdvice().handleEmptyBody(null, message, parameter, targetType, converterType)__					}_					break__				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("I/O error while reading input message", ex)__		}__		if (body == NO_VALUE) {_			if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||_					(noContentType && !message.hasBody())) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,parameter,the,method,parameter,descriptor,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,nullable,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,parameter,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,parameter,get,containing,class,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,resolvable,type,for,method,parameter,parameter,target,class,class,t,resolvable,type,resolve,http,method,http,method,input,message,instanceof,http,request,http,request,input,message,get,method,null,object,body,empty,body,checking,http,input,message,message,try,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,converter,can,read,target,type,context,class,content,type,target,class,null,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,message,has,body,http,input,message,msg,to,use,get,advice,before,body,read,message,parameter,target,type,converter,type,body,generic,converter,null,generic,converter,read,target,type,context,class,msg,to,use,http,message,converter,t,converter,read,target,class,msg,to,use,body,get,advice,after,body,read,body,msg,to,use,parameter,target,type,converter,type,else,body,get,advice,handle,empty,body,null,message,parameter,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,i,o,error,while,reading,input,message,ex,if,body,if,http,method,null,contains,http,method,no,content,type,message,has,body,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	@Nullable 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1529361191;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param parameter the method parameter descriptor_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	@Nullable_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = parameter.getContainingClass()__		Class<T> targetClass = (targetType instanceof Class ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = ResolvableType.forMethodParameter(parameter)__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = (inputMessage instanceof HttpRequest ? ((HttpRequest) inputMessage).getMethod() : null)__		Object body = NO_VALUE___		EmptyBodyCheckingHttpInputMessage message__		try {_			message = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				GenericHttpMessageConverter<?> genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ? genericConverter.canRead(targetType, contextClass, contentType) :_						(targetClass != null && converter.canRead(targetClass, contentType))) {_					if (message.hasBody()) {_						HttpInputMessage msgToUse =_								getAdvice().beforeBodyRead(message, parameter, targetType, converterType)__						body = (genericConverter != null ? genericConverter.read(targetType, contextClass, msgToUse) :_								((HttpMessageConverter<T>) converter).read(targetClass, msgToUse))__						body = getAdvice().afterBodyRead(body, msgToUse, parameter, targetType, converterType)__					}_					else {_						body = getAdvice().handleEmptyBody(null, message, parameter, targetType, converterType)__					}_					break__				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("I/O error while reading input message", ex)__		}__		if (body == NO_VALUE) {_			if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||_					(noContentType && !message.hasBody())) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Read \"" + contentType + "\" to " +_					"[" + (body instanceof String ? "\"" + body + "\"" : body) + "]")__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,parameter,the,method,parameter,descriptor,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,nullable,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,parameter,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,parameter,get,containing,class,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,resolvable,type,for,method,parameter,parameter,target,class,class,t,resolvable,type,resolve,http,method,http,method,input,message,instanceof,http,request,http,request,input,message,get,method,null,object,body,empty,body,checking,http,input,message,message,try,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,converter,can,read,target,type,context,class,content,type,target,class,null,converter,can,read,target,class,content,type,if,message,has,body,http,input,message,msg,to,use,get,advice,before,body,read,message,parameter,target,type,converter,type,body,generic,converter,null,generic,converter,read,target,type,context,class,msg,to,use,http,message,converter,t,converter,read,target,class,msg,to,use,body,get,advice,after,body,read,body,msg,to,use,parameter,target,type,converter,type,else,body,get,advice,handle,empty,body,null,message,parameter,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,i,o,error,while,reading,input,message,ex,if,body,if,http,method,null,contains,http,method,no,content,type,message,has,body,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,if,logger,is,debug,enabled,logger,debug,read,content,type,to,body,instanceof,string,body,body,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	@Nullable 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1530174524;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param parameter the method parameter descriptor_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	@Nullable_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = parameter.getContainingClass()__		Class<T> targetClass = (targetType instanceof Class ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = ResolvableType.forMethodParameter(parameter)__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = (inputMessage instanceof HttpRequest ? ((HttpRequest) inputMessage).getMethod() : null)__		Object body = NO_VALUE___		EmptyBodyCheckingHttpInputMessage message__		try {_			message = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				GenericHttpMessageConverter<?> genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ? genericConverter.canRead(targetType, contextClass, contentType) :_						(targetClass != null && converter.canRead(targetClass, contentType))) {_					if (message.hasBody()) {_						HttpInputMessage msgToUse =_								getAdvice().beforeBodyRead(message, parameter, targetType, converterType)__						body = (genericConverter != null ? genericConverter.read(targetType, contextClass, msgToUse) :_								((HttpMessageConverter<T>) converter).read(targetClass, msgToUse))__						body = getAdvice().afterBodyRead(body, msgToUse, parameter, targetType, converterType)__					}_					else {_						body = getAdvice().handleEmptyBody(null, message, parameter, targetType, converterType)__					}_					break__				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("I/O error while reading input message", ex)__		}__		if (body == NO_VALUE) {_			if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||_					(noContentType && !message.hasBody())) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Read \"" + contentType + "\" to " +_					"[" + (body instanceof String ? "\"" + body + "\"" : body) + "]")__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,parameter,the,method,parameter,descriptor,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,nullable,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,parameter,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,parameter,get,containing,class,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,resolvable,type,for,method,parameter,parameter,target,class,class,t,resolvable,type,resolve,http,method,http,method,input,message,instanceof,http,request,http,request,input,message,get,method,null,object,body,empty,body,checking,http,input,message,message,try,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,converter,can,read,target,type,context,class,content,type,target,class,null,converter,can,read,target,class,content,type,if,message,has,body,http,input,message,msg,to,use,get,advice,before,body,read,message,parameter,target,type,converter,type,body,generic,converter,null,generic,converter,read,target,type,context,class,msg,to,use,http,message,converter,t,converter,read,target,class,msg,to,use,body,get,advice,after,body,read,body,msg,to,use,parameter,target,type,converter,type,else,body,get,advice,handle,empty,body,null,message,parameter,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,i,o,error,while,reading,input,message,ex,if,body,if,http,method,null,contains,http,method,no,content,type,message,has,body,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,if,logger,is,debug,enabled,logger,debug,read,content,type,to,body,instanceof,string,body,body,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	@Nullable 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1530737169;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param parameter the method parameter descriptor_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	@Nullable_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = parameter.getContainingClass()__		Class<T> targetClass = (targetType instanceof Class ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = ResolvableType.forMethodParameter(parameter)__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = (inputMessage instanceof HttpRequest ? ((HttpRequest) inputMessage).getMethod() : null)__		Object body = NO_VALUE___		EmptyBodyCheckingHttpInputMessage message__		try {_			message = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				GenericHttpMessageConverter<?> genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ? genericConverter.canRead(targetType, contextClass, contentType) :_						(targetClass != null && converter.canRead(targetClass, contentType))) {_					if (message.hasBody()) {_						HttpInputMessage msgToUse =_								getAdvice().beforeBodyRead(message, parameter, targetType, converterType)__						body = (genericConverter != null ? genericConverter.read(targetType, contextClass, msgToUse) :_								((HttpMessageConverter<T>) converter).read(targetClass, msgToUse))__						body = getAdvice().afterBodyRead(body, msgToUse, parameter, targetType, converterType)__					}_					else {_						body = getAdvice().handleEmptyBody(null, message, parameter, targetType, converterType)__					}_					break__				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("I/O error while reading input message", ex, inputMessage)__		}__		if (body == NO_VALUE) {_			if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||_					(noContentType && !message.hasBody())) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Read \"" + contentType + "\" to " +_					"[" + (body instanceof String ? "\"" + body + "\"" : body) + "]")__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,parameter,the,method,parameter,descriptor,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,nullable,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,parameter,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,parameter,get,containing,class,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,resolvable,type,for,method,parameter,parameter,target,class,class,t,resolvable,type,resolve,http,method,http,method,input,message,instanceof,http,request,http,request,input,message,get,method,null,object,body,empty,body,checking,http,input,message,message,try,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,converter,can,read,target,type,context,class,content,type,target,class,null,converter,can,read,target,class,content,type,if,message,has,body,http,input,message,msg,to,use,get,advice,before,body,read,message,parameter,target,type,converter,type,body,generic,converter,null,generic,converter,read,target,type,context,class,msg,to,use,http,message,converter,t,converter,read,target,class,msg,to,use,body,get,advice,after,body,read,body,msg,to,use,parameter,target,type,converter,type,else,body,get,advice,handle,empty,body,null,message,parameter,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,i,o,error,while,reading,input,message,ex,input,message,if,body,if,http,method,null,contains,http,method,no,content,type,message,has,body,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,if,logger,is,debug,enabled,logger,debug,read,content,type,to,body,instanceof,string,body,body,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	@Nullable 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1536942003;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param parameter the method parameter descriptor_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	@Nullable_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = parameter.getContainingClass()__		Class<T> targetClass = (targetType instanceof Class ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = ResolvableType.forMethodParameter(parameter)__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = (inputMessage instanceof HttpRequest ? ((HttpRequest) inputMessage).getMethod() : null)__		Object body = NO_VALUE___		EmptyBodyCheckingHttpInputMessage message__		try {_			message = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				GenericHttpMessageConverter<?> genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ? genericConverter.canRead(targetType, contextClass, contentType) :_						(targetClass != null && converter.canRead(targetClass, contentType))) {_					if (message.hasBody()) {_						HttpInputMessage msgToUse =_								getAdvice().beforeBodyRead(message, parameter, targetType, converterType)__						body = (genericConverter != null ? genericConverter.read(targetType, contextClass, msgToUse) :_								((HttpMessageConverter<T>) converter).read(targetClass, msgToUse))__						body = getAdvice().afterBodyRead(body, msgToUse, parameter, targetType, converterType)__					}_					else {_						body = getAdvice().handleEmptyBody(null, message, parameter, targetType, converterType)__					}_					break__				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("I/O error while reading input message", ex, inputMessage)__		}__		if (body == NO_VALUE) {_			if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||_					(noContentType && !message.hasBody())) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		if (logger.isDebugEnabled()) {_			boolean traceOn = logger.isTraceEnabled()__			String s = "Read \"" + contentType + "\" to [" +_					RequestMappingHandlerAdapter.formatValue(body, traceOn) + "]"__			if (traceOn) {_				logger.trace(s)__			}_			else {_				logger.debug(s)__			}_		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,parameter,the,method,parameter,descriptor,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,nullable,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,parameter,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,parameter,get,containing,class,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,resolvable,type,for,method,parameter,parameter,target,class,class,t,resolvable,type,resolve,http,method,http,method,input,message,instanceof,http,request,http,request,input,message,get,method,null,object,body,empty,body,checking,http,input,message,message,try,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,converter,can,read,target,type,context,class,content,type,target,class,null,converter,can,read,target,class,content,type,if,message,has,body,http,input,message,msg,to,use,get,advice,before,body,read,message,parameter,target,type,converter,type,body,generic,converter,null,generic,converter,read,target,type,context,class,msg,to,use,http,message,converter,t,converter,read,target,class,msg,to,use,body,get,advice,after,body,read,body,msg,to,use,parameter,target,type,converter,type,else,body,get,advice,handle,empty,body,null,message,parameter,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,i,o,error,while,reading,input,message,ex,input,message,if,body,if,http,method,null,contains,http,method,no,content,type,message,has,body,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,if,logger,is,debug,enabled,boolean,trace,on,logger,is,trace,enabled,string,s,read,content,type,to,request,mapping,handler,adapter,format,value,body,trace,on,if,trace,on,logger,trace,s,else,logger,debug,s,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	@Nullable 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1536962806;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param parameter the method parameter descriptor_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	@Nullable_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = parameter.getContainingClass()__		Class<T> targetClass = (targetType instanceof Class ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = ResolvableType.forMethodParameter(parameter)__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = (inputMessage instanceof HttpRequest ? ((HttpRequest) inputMessage).getMethod() : null)__		Object body = NO_VALUE___		EmptyBodyCheckingHttpInputMessage message__		try {_			message = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				GenericHttpMessageConverter<?> genericConverter =_						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null)__				if (genericConverter != null ? genericConverter.canRead(targetType, contextClass, contentType) :_						(targetClass != null && converter.canRead(targetClass, contentType))) {_					if (message.hasBody()) {_						HttpInputMessage msgToUse =_								getAdvice().beforeBodyRead(message, parameter, targetType, converterType)__						body = (genericConverter != null ? genericConverter.read(targetType, contextClass, msgToUse) :_								((HttpMessageConverter<T>) converter).read(targetClass, msgToUse))__						body = getAdvice().afterBodyRead(body, msgToUse, parameter, targetType, converterType)__					}_					else {_						body = getAdvice().handleEmptyBody(null, message, parameter, targetType, converterType)__					}_					break__				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("I/O error while reading input message", ex, inputMessage)__		}__		if (body == NO_VALUE) {_			if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||_					(noContentType && !message.hasBody())) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		MediaType selectedContentType = contentType__		Object theBody = body__		LogFormatUtils.traceDebug(logger, traceOn -> {_			String formatted = LogFormatUtils.formatValue(theBody, !traceOn)__			return "Read \"" + selectedContentType + "\" to [" + formatted + "]"__		})___		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,parameter,the,method,parameter,descriptor,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,nullable,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,parameter,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,parameter,get,containing,class,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,resolvable,type,for,method,parameter,parameter,target,class,class,t,resolvable,type,resolve,http,method,http,method,input,message,instanceof,http,request,http,request,input,message,get,method,null,object,body,empty,body,checking,http,input,message,message,try,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,generic,http,message,converter,generic,converter,converter,instanceof,generic,http,message,converter,generic,http,message,converter,converter,null,if,generic,converter,null,generic,converter,can,read,target,type,context,class,content,type,target,class,null,converter,can,read,target,class,content,type,if,message,has,body,http,input,message,msg,to,use,get,advice,before,body,read,message,parameter,target,type,converter,type,body,generic,converter,null,generic,converter,read,target,type,context,class,msg,to,use,http,message,converter,t,converter,read,target,class,msg,to,use,body,get,advice,after,body,read,body,msg,to,use,parameter,target,type,converter,type,else,body,get,advice,handle,empty,body,null,message,parameter,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,i,o,error,while,reading,input,message,ex,input,message,if,body,if,http,method,null,contains,http,method,no,content,type,message,has,body,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,media,type,selected,content,type,content,type,object,the,body,body,log,format,utils,trace,debug,logger,trace,on,string,formatted,log,format,utils,format,value,the,body,trace,on,return,read,selected,content,type,to,formatted,return,body
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			List<Object> requestResponseBodyAdvice);1427679734;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			List<Object> requestResponseBodyAdvice);1427679742;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			List<Object> requestResponseBodyAdvice);1435692241;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			List<Object> requestResponseBodyAdvice);1438078548;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			List<Object> requestResponseBodyAdvice);1441284823;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			List<Object> requestResponseBodyAdvice);1443043357;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			List<Object> requestResponseBodyAdvice);1449660404;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			List<Object> requestResponseBodyAdvice);1467730834;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			List<Object> requestResponseBodyAdvice);1477860027;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			List<Object> requestResponseBodyAdvice);1481630403;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			List<Object> requestResponseBodyAdvice);1487362018;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			List<Object> requestResponseBodyAdvice);1494019141;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			List<Object> requestResponseBodyAdvice);1495868221;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1424385427;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1427679734;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1427679742;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1435692241;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1438078548;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1441284823;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1443043357;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1449660404;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1467730834;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam);1477860027;Whether to raise a fatal bind exception on validation errors._@param binder the data binder used to perform data binding_@param methodParam the method argument_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {_		int i = methodParam.getParameterIndex()__		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,fatal,bind,exception,on,validation,errors,param,binder,the,data,binder,used,to,perform,data,binding,param,method,param,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,bind,exception,required,web,data,binder,binder,method,parameter,method,param,int,i,method,param,get,parameter,index,class,param,types,method,param,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			@Nullable List<Object> requestResponseBodyAdvice);1496837955;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			@Nullable List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,nullable,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			@Nullable List<Object> requestResponseBodyAdvice);1497346678;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			@Nullable List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,nullable,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			@Nullable List<Object> requestResponseBodyAdvice);1498780456;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			@Nullable List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,nullable,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			@Nullable List<Object> requestResponseBodyAdvice);1522843494;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			@Nullable List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,nullable,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			@Nullable List<Object> requestResponseBodyAdvice);1529361191;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			@Nullable List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,nullable,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			@Nullable List<Object> requestResponseBodyAdvice);1530174524;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			@Nullable List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,nullable,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			@Nullable List<Object> requestResponseBodyAdvice);1530737169;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			@Nullable List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,nullable,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			@Nullable List<Object> requestResponseBodyAdvice);1536942003;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			@Nullable List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,nullable,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters, 			@Nullable List<Object> requestResponseBodyAdvice);1536962806;Constructor with converters and {@code Request~} and {@code ResponseBodyAdvice}._@since 4.2;public AbstractMessageConverterMethodArgumentResolver(List<HttpMessageConverter<?>> converters,_			@Nullable List<Object> requestResponseBodyAdvice) {__		Assert.notEmpty(converters, "'messageConverters' must not be empty")__		this.messageConverters = converters__		this.allSupportedMediaTypes = getAllSupportedMediaTypes(converters)__		this.advice = new RequestResponseBodyAdviceChain(requestResponseBodyAdvice)__	};constructor,with,converters,and,code,request,and,code,response,body,advice,since,4,2;public,abstract,message,converter,method,argument,resolver,list,http,message,converter,converters,nullable,list,object,request,response,body,advice,assert,not,empty,converters,message,converters,must,not,be,empty,this,message,converters,converters,this,all,supported,media,types,get,all,supported,media,types,converters,this,advice,new,request,response,body,advice,chain,request,response,body,advice
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1328020251;Creates a new {@link HttpInputMessage} from the given {@link NativeWebRequest}.__@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};creates,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1345574045;Creates a new {@link HttpInputMessage} from the given {@link NativeWebRequest}.__@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};creates,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1345730325;Creates a new {@link HttpInputMessage} from the given {@link NativeWebRequest}.__@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};creates,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1351732516;Creates a new {@link HttpInputMessage} from the given {@link NativeWebRequest}.__@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};creates,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1353602122;Creates a new {@link HttpInputMessage} from the given {@link NativeWebRequest}.__@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};creates,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1356735495;Creates a new {@link HttpInputMessage} from the given {@link NativeWebRequest}.__@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};creates,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1381389591;Creates a new {@link HttpInputMessage} from the given {@link NativeWebRequest}.__@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};creates,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1381788683;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1383683935;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1385412762;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1387490663;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1423592910;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1424272627;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1424385427;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1427679734;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1427679742;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1435692241;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1438078548;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1441284823;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1443043357;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1449660404;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1467730834;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1477860027;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1481630403;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1487362018;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1494019141;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1495868221;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1496837955;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		Assert.state(servletRequest != null, "No HttpServletRequest")__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,assert,state,servlet,request,null,no,http,servlet,request,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1497346678;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		Assert.state(servletRequest != null, "No HttpServletRequest")__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,assert,state,servlet,request,null,no,http,servlet,request,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1498780456;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		Assert.state(servletRequest != null, "No HttpServletRequest")__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,assert,state,servlet,request,null,no,http,servlet,request,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1522843494;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		Assert.state(servletRequest != null, "No HttpServletRequest")__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,assert,state,servlet,request,null,no,http,servlet,request,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1529361191;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		Assert.state(servletRequest != null, "No HttpServletRequest")__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,assert,state,servlet,request,null,no,http,servlet,request,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1530174524;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		Assert.state(servletRequest != null, "No HttpServletRequest")__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,assert,state,servlet,request,null,no,http,servlet,request,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1530737169;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		Assert.state(servletRequest != null, "No HttpServletRequest")__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,assert,state,servlet,request,null,no,http,servlet,request,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1536942003;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		Assert.state(servletRequest != null, "No HttpServletRequest")__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,assert,state,servlet,request,null,no,http,servlet,request,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest);1536962806;Create a new {@link HttpInputMessage} from the given {@link NativeWebRequest}._@param webRequest the web request to create an input message from_@return the input message;protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {_		HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class)__		Assert.state(servletRequest != null, "No HttpServletRequest")__		return new ServletServerHttpRequest(servletRequest)__	};create,a,new,link,http,input,message,from,the,given,link,native,web,request,param,web,request,the,web,request,to,create,an,input,message,from,return,the,input,message;protected,servlet,server,http,request,create,input,message,native,web,request,web,request,http,servlet,request,servlet,request,web,request,get,native,request,http,servlet,request,class,assert,state,servlet,request,null,no,http,servlet,request,return,new,servlet,server,http,request,servlet,request
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, 			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException;1345730325;Creates the method argument value of the expected parameter type by_reading from the given request.__@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,_			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};creates,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, 			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException;1351732516;Creates the method argument value of the expected parameter type by_reading from the given request.__@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,_			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};creates,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, 			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException;1353602122;Creates the method argument value of the expected parameter type by_reading from the given request.__@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,_			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};creates,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, 			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException;1356735495;Creates the method argument value of the expected parameter type by_reading from the given request.__@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,_			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};creates,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, 			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException;1381389591;Creates the method argument value of the expected parameter type by_reading from the given request.__@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,_			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};creates,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, 			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException;1381788683;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,_			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, 			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException;1383683935;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,_			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, 			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException;1385412762;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,_			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, 			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException;1387490663;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,_			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, 			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException;1423592910;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,_			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, 			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException;1424272627;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,_			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, 			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException;1424385427;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,_			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, 			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException;1427679734;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,_			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, 			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException;1427679742;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,_			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, 			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException;1435692241;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,_			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1481630403;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param parameter the method parameter descriptor (may be {@code null})_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, parameter, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,parameter,the,method,parameter,descriptor,may,be,code,null,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,parameter,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,parameter,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1487362018;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param parameter the method parameter descriptor (may be {@code null})_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, parameter, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,parameter,the,method,parameter,descriptor,may,be,code,null,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,parameter,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,parameter,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1494019141;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param parameter the method parameter descriptor (may be {@code null})_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, parameter, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,parameter,the,method,parameter,descriptor,may,be,code,null,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,parameter,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,parameter,param,type
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindingErrorFatal(MethodParameter parameter);1423592910;Whether to raise a handler method invocation exception on validation errors._@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindingErrorFatal(MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,handler,method,invocation,exception,on,validation,errors,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,binding,error,fatal,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> protected boolean isBindingErrorFatal(MethodParameter parameter);1424272627;Whether to raise a handler method invocation exception on validation errors._@param parameter the method argument_@return {@code true} if the next method argument is not of type {@link Errors}_@since 4.1.5;protected boolean isBindingErrorFatal(MethodParameter parameter) {_		int i = parameter.getParameterIndex()__		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes()__		boolean hasBindingResult = (paramTypes.length > (i + 1) && Errors.class.isAssignableFrom(paramTypes[i + 1]))__		return !hasBindingResult__	};whether,to,raise,a,handler,method,invocation,exception,on,validation,errors,param,parameter,the,method,argument,return,code,true,if,the,next,method,argument,is,not,of,type,link,errors,since,4,1,5;protected,boolean,is,binding,error,fatal,method,parameter,parameter,int,i,parameter,get,parameter,index,class,param,types,parameter,get,method,get,parameter,types,boolean,has,binding,result,param,types,length,i,1,errors,class,is,assignable,from,param,types,i,1,return,has,binding,result
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1481630403;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param parameter the method parameter descriptor (may be {@code null})_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = (parameter != null ? parameter.getContainingClass() : null)__		Class<T> targetClass = (targetType instanceof Class ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = (parameter != null ?_					ResolvableType.forMethodParameter(parameter) : ResolvableType.forType(targetType))__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = ((HttpRequest) inputMessage).getMethod()__		Object body = NO_VALUE___		try {_			inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				if (converter instanceof GenericHttpMessageConverter) {_					GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__					if (genericConverter.canRead(targetType, contextClass, contentType)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__						}_						if (inputMessage.getBody() != null) {_							inputMessage = getAdvice().beforeBodyRead(inputMessage, parameter, targetType, converterType)__							body = genericConverter.read(targetType, contextClass, inputMessage)__							body = getAdvice().afterBodyRead(body, inputMessage, parameter, targetType, converterType)__						}_						else {_							body = getAdvice().handleEmptyBody(null, inputMessage, parameter, targetType, converterType)__						}_						break__					}_				}_				else if (targetClass != null) {_					if (converter.canRead(targetClass, contentType)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__						}_						if (inputMessage.getBody() != null) {_							inputMessage = getAdvice().beforeBodyRead(inputMessage, parameter, targetType, converterType)__							body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__							body = getAdvice().afterBodyRead(body, inputMessage, parameter, targetType, converterType)__						}_						else {_							body = getAdvice().handleEmptyBody(null, inputMessage, parameter, targetType, converterType)__						}_						break__					}_				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("Could not read document: " + ex.getMessage(), ex)__		}__		if (body == NO_VALUE) {_			if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||_					(noContentType && inputMessage.getBody() == null)) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,parameter,the,method,parameter,descriptor,may,be,code,null,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,parameter,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,parameter,null,parameter,get,containing,class,null,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,parameter,null,resolvable,type,for,method,parameter,parameter,resolvable,type,for,type,target,type,target,class,class,t,resolvable,type,resolve,http,method,http,method,http,request,input,message,get,method,object,body,try,input,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,parameter,target,type,converter,type,body,generic,converter,read,target,type,context,class,input,message,body,get,advice,after,body,read,body,input,message,parameter,target,type,converter,type,else,body,get,advice,handle,empty,body,null,input,message,parameter,target,type,converter,type,break,else,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,parameter,target,type,converter,type,body,http,message,converter,t,converter,read,target,class,input,message,body,get,advice,after,body,read,body,input,message,parameter,target,type,converter,type,else,body,get,advice,handle,empty,body,null,input,message,parameter,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,could,not,read,document,ex,get,message,ex,if,body,if,http,method,null,contains,http,method,no,content,type,input,message,get,body,null,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1487362018;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param parameter the method parameter descriptor (may be {@code null})_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = (parameter != null ? parameter.getContainingClass() : null)__		Class<T> targetClass = (targetType instanceof Class ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = (parameter != null ?_					ResolvableType.forMethodParameter(parameter) : ResolvableType.forType(targetType))__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = ((HttpRequest) inputMessage).getMethod()__		Object body = NO_VALUE___		try {_			inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				if (converter instanceof GenericHttpMessageConverter) {_					GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__					if (genericConverter.canRead(targetType, contextClass, contentType)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__						}_						if (inputMessage.getBody() != null) {_							inputMessage = getAdvice().beforeBodyRead(inputMessage, parameter, targetType, converterType)__							body = genericConverter.read(targetType, contextClass, inputMessage)__							body = getAdvice().afterBodyRead(body, inputMessage, parameter, targetType, converterType)__						}_						else {_							body = getAdvice().handleEmptyBody(null, inputMessage, parameter, targetType, converterType)__						}_						break__					}_				}_				else if (targetClass != null) {_					if (converter.canRead(targetClass, contentType)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__						}_						if (inputMessage.getBody() != null) {_							inputMessage = getAdvice().beforeBodyRead(inputMessage, parameter, targetType, converterType)__							body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__							body = getAdvice().afterBodyRead(body, inputMessage, parameter, targetType, converterType)__						}_						else {_							body = getAdvice().handleEmptyBody(null, inputMessage, parameter, targetType, converterType)__						}_						break__					}_				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("Could not read document: " + ex.getMessage(), ex)__		}__		if (body == NO_VALUE) {_			if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||_					(noContentType && inputMessage.getBody() == null)) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,parameter,the,method,parameter,descriptor,may,be,code,null,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,parameter,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,parameter,null,parameter,get,containing,class,null,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,parameter,null,resolvable,type,for,method,parameter,parameter,resolvable,type,for,type,target,type,target,class,class,t,resolvable,type,resolve,http,method,http,method,http,request,input,message,get,method,object,body,try,input,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,parameter,target,type,converter,type,body,generic,converter,read,target,type,context,class,input,message,body,get,advice,after,body,read,body,input,message,parameter,target,type,converter,type,else,body,get,advice,handle,empty,body,null,input,message,parameter,target,type,converter,type,break,else,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,parameter,target,type,converter,type,body,http,message,converter,t,converter,read,target,class,input,message,body,get,advice,after,body,read,body,input,message,parameter,target,type,converter,type,else,body,get,advice,handle,empty,body,null,input,message,parameter,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,could,not,read,document,ex,get,message,ex,if,body,if,http,method,null,contains,http,method,no,content,type,input,message,get,body,null,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1494019141;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param parameter the method parameter descriptor (may be {@code null})_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = (parameter != null ? parameter.getContainingClass() : null)__		Class<T> targetClass = (targetType instanceof Class ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = (parameter != null ?_					ResolvableType.forMethodParameter(parameter) : ResolvableType.forType(targetType))__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = ((HttpRequest) inputMessage).getMethod()__		Object body = NO_VALUE___		try {_			inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				if (converter instanceof GenericHttpMessageConverter) {_					GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__					if (genericConverter.canRead(targetType, contextClass, contentType)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__						}_						if (inputMessage.getBody() != null) {_							inputMessage = getAdvice().beforeBodyRead(inputMessage, parameter, targetType, converterType)__							body = genericConverter.read(targetType, contextClass, inputMessage)__							body = getAdvice().afterBodyRead(body, inputMessage, parameter, targetType, converterType)__						}_						else {_							body = getAdvice().handleEmptyBody(null, inputMessage, parameter, targetType, converterType)__						}_						break__					}_				}_				else if (targetClass != null) {_					if (converter.canRead(targetClass, contentType)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__						}_						if (inputMessage.getBody() != null) {_							inputMessage = getAdvice().beforeBodyRead(inputMessage, parameter, targetType, converterType)__							body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__							body = getAdvice().afterBodyRead(body, inputMessage, parameter, targetType, converterType)__						}_						else {_							body = getAdvice().handleEmptyBody(null, inputMessage, parameter, targetType, converterType)__						}_						break__					}_				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("I/O error while reading input message", ex)__		}__		if (body == NO_VALUE) {_			if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||_					(noContentType && inputMessage.getBody() == null)) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,parameter,the,method,parameter,descriptor,may,be,code,null,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,parameter,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,parameter,null,parameter,get,containing,class,null,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,parameter,null,resolvable,type,for,method,parameter,parameter,resolvable,type,for,type,target,type,target,class,class,t,resolvable,type,resolve,http,method,http,method,http,request,input,message,get,method,object,body,try,input,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,parameter,target,type,converter,type,body,generic,converter,read,target,type,context,class,input,message,body,get,advice,after,body,read,body,input,message,parameter,target,type,converter,type,else,body,get,advice,handle,empty,body,null,input,message,parameter,target,type,converter,type,break,else,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,parameter,target,type,converter,type,body,http,message,converter,t,converter,read,target,class,input,message,body,get,advice,after,body,read,body,input,message,parameter,target,type,converter,type,else,body,get,advice,handle,empty,body,null,input,message,parameter,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,i,o,error,while,reading,input,message,ex,if,body,if,http,method,null,contains,http,method,no,content,type,input,message,get,body,null,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,return,body
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1424385427;Validate the request part if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter_@see #isBindExceptionRequired_@since 4.1.5;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,request,part,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter,see,is,bind,exception,required,since,4,1,5;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1427679734;Validate the request part if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter_@see #isBindExceptionRequired_@since 4.1.5;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,request,part,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter,see,is,bind,exception,required,since,4,1,5;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1427679742;Validate the request part if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter_@see #isBindExceptionRequired_@since 4.1.5;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,request,part,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter,see,is,bind,exception,required,since,4,1,5;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1435692241;Validate the request part if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter_@see #isBindExceptionRequired_@since 4.1.5;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,request,part,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter,see,is,bind,exception,required,since,4,1,5;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1438078548;Validate the request part if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter_@see #isBindExceptionRequired_@since 4.1.5;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,request,part,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter,see,is,bind,exception,required,since,4,1,5;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1441284823;Validate the request part if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter_@see #isBindExceptionRequired_@since 4.1.5;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,request,part,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter,see,is,bind,exception,required,since,4,1,5;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1443043357;Validate the request part if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter_@see #isBindExceptionRequired_@since 4.1.5;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,request,part,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter,see,is,bind,exception,required,since,4,1,5;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1449660404;Validate the request part if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter_@see #isBindExceptionRequired_@since 4.1.5;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,request,part,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter,see,is,bind,exception,required,since,4,1,5;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1467730834;Validate the request part if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter_@see #isBindExceptionRequired_@since 4.1.5;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,request,part,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter,see,is,bind,exception,required,since,4,1,5;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam);1477860027;Validate the request part if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param binder the DataBinder to be used_@param methodParam the method parameter_@see #isBindExceptionRequired_@since 4.1.5;protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {_		Annotation[] annotations = methodParam.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				binder.validate(validationHints)__				break__			}_		}_	};validate,the,request,part,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,binder,the,data,binder,to,be,used,param,method,param,the,method,parameter,see,is,bind,exception,required,since,4,1,5;protected,void,validate,if,applicable,web,data,binder,binder,method,parameter,method,param,annotation,annotations,method,param,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,binder,validate,validation,hints,break
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, 			MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException;1427679734;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param param the method parameter descriptor (may be {@code null})_@param targetType the type of object to create, not necessarily the same as_the method parameter type (e.g. for {@code HttpEntity<String>} method_parameter the target type is String)_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,_			MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException {__		MediaType contentType__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = (param != null ? param.getContainingClass() : null)__		Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = (param != null ?_					ResolvableType.forMethodParameter(param) : ResolvableType.forType(targetType))__			targetClass = (Class<T>) resolvableType.resolve()__		}__		for (HttpMessageConverter<?> converter : this.messageConverters) {_			Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__			if (converter instanceof GenericHttpMessageConverter) {_				GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__				if (genericConverter.canRead(targetType, contextClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__					}_					inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__					T body = (T) genericConverter.read(targetType, contextClass, inputMessage)__					return getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__				}_			}_			else if (targetClass != null) {_				if (converter.canRead(targetClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__					}_					inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__					T body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__					return getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__				}_			}_		}__		throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,param,the,method,parameter,descriptor,may,be,code,null,param,target,type,the,type,of,object,to,create,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,method,parameter,the,target,type,is,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,media,type,content,type,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,content,type,media,type,class,context,class,param,null,param,get,containing,class,null,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,param,null,resolvable,type,for,method,parameter,param,resolvable,type,for,type,target,type,target,class,class,t,resolvable,type,resolve,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,t,body,t,generic,converter,read,target,type,context,class,input,message,return,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,t,body,http,message,converter,t,converter,read,target,class,input,message,return,get,advice,after,body,read,body,input,message,param,target,type,converter,type,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, 			MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException;1427679742;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param param the method parameter descriptor (may be {@code null})_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,_			MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException {__		MediaType contentType__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = (param != null ? param.getContainingClass() : null)__		Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = (param != null ?_					ResolvableType.forMethodParameter(param) : ResolvableType.forType(targetType))__			targetClass = (Class<T>) resolvableType.resolve()__		}__		inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)__		Object body = NO_VALUE___		for (HttpMessageConverter<?> converter : this.messageConverters) {_			Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__			if (converter instanceof GenericHttpMessageConverter) {_				GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__				if (genericConverter.canRead(targetType, contextClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__					}_					if (inputMessage.getBody() != null) {_						inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__						body = genericConverter.read(targetType, contextClass, inputMessage)__						body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__					}_					else {_						body = null__						body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__					}_					break__				}_			}_			else if (targetClass != null) {_				if (converter.canRead(targetClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__					}_					if (inputMessage.getBody() != null) {_						inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__						body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__						body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__					}_					else {_						body = null__						body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__					}_					break__				}_			}_		}__		if (body == NO_VALUE) {_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,param,the,method,parameter,descriptor,may,be,code,null,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,media,type,content,type,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,content,type,media,type,class,context,class,param,null,param,get,containing,class,null,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,param,null,resolvable,type,for,method,parameter,param,resolvable,type,for,type,target,type,target,class,class,t,resolvable,type,resolve,input,message,new,empty,body,checking,http,input,message,input,message,object,body,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,generic,converter,read,target,type,context,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,else,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,http,message,converter,t,converter,read,target,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,if,body,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, 			MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException;1435692241;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param param the method parameter descriptor (may be {@code null})_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,_			MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException {__		MediaType contentType__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = (param != null ? param.getContainingClass() : null)__		Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = (param != null ?_					ResolvableType.forMethodParameter(param) : ResolvableType.forType(targetType))__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = ((HttpRequest) inputMessage).getMethod()__		inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)__		Object body = NO_VALUE___		for (HttpMessageConverter<?> converter : this.messageConverters) {_			Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__			if (converter instanceof GenericHttpMessageConverter) {_				GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__				if (genericConverter.canRead(targetType, contextClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__					}_					if (inputMessage.getBody() != null) {_						inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__						body = genericConverter.read(targetType, contextClass, inputMessage)__						body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__					}_					else {_						body = null__						body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__					}_					break__				}_			}_			else if (targetClass != null) {_				if (converter.canRead(targetClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__					}_					if (inputMessage.getBody() != null) {_						inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__						body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__						body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__					}_					else {_						body = null__						body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__					}_					break__				}_			}_		}__		if (body == NO_VALUE) {_			if (!SUPPORTED_METHODS.contains(httpMethod)) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,param,the,method,parameter,descriptor,may,be,code,null,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,media,type,content,type,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,content,type,media,type,class,context,class,param,null,param,get,containing,class,null,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,param,null,resolvable,type,for,method,parameter,param,resolvable,type,for,type,target,type,target,class,class,t,resolvable,type,resolve,http,method,http,method,http,request,input,message,get,method,input,message,new,empty,body,checking,http,input,message,input,message,object,body,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,generic,converter,read,target,type,context,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,else,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,http,message,converter,t,converter,read,target,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,if,body,if,contains,http,method,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,return,body
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1438078548;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1441284823;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1443043357;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1449660404;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1467730834;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam, 			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1477860027;Create the method argument value of the expected parameter type by_reading from the given request._@param <T> the expected type of the argument value to be created_@param webRequest the current request_@param methodParam the method argument_@param paramType the type of the argument value to be created_@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam,_			Type paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		HttpInputMessage inputMessage = createInputMessage(webRequest)__		return readWithMessageConverters(inputMessage, methodParam, paramType)__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,request,param,t,the,expected,type,of,the,argument,value,to,be,created,param,web,request,the,current,request,param,method,param,the,method,argument,param,param,type,the,type,of,the,argument,value,to,be,created,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;protected,t,object,read,with,message,converters,native,web,request,web,request,method,parameter,method,param,type,param,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,http,input,message,input,message,create,input,message,web,request,return,read,with,message,converters,input,message,method,param,param,type
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1438078548;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param param the method parameter descriptor (may be {@code null})_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = (param != null ? param.getContainingClass() : null)__		Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = (param != null ?_					ResolvableType.forMethodParameter(param) : ResolvableType.forType(targetType))__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = ((HttpRequest) inputMessage).getMethod()__		inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)__		Object body = NO_VALUE___		for (HttpMessageConverter<?> converter : this.messageConverters) {_			Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__			if (converter instanceof GenericHttpMessageConverter) {_				GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__				if (genericConverter.canRead(targetType, contextClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__					}_					if (inputMessage.getBody() != null) {_						inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__						body = genericConverter.read(targetType, contextClass, inputMessage)__						body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__					}_					else {_						body = null__						body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__					}_					break__				}_			}_			else if (targetClass != null) {_				if (converter.canRead(targetClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__					}_					if (inputMessage.getBody() != null) {_						inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__						body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__						body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__					}_					else {_						body = null__						body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__					}_					break__				}_			}_		}__		if (body == NO_VALUE) {_			if (!SUPPORTED_METHODS.contains(httpMethod)) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,param,the,method,parameter,descriptor,may,be,code,null,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,content,type,media,type,class,context,class,param,null,param,get,containing,class,null,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,param,null,resolvable,type,for,method,parameter,param,resolvable,type,for,type,target,type,target,class,class,t,resolvable,type,resolve,http,method,http,method,http,request,input,message,get,method,input,message,new,empty,body,checking,http,input,message,input,message,object,body,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,generic,converter,read,target,type,context,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,else,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,http,message,converter,t,converter,read,target,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,if,body,if,contains,http,method,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1441284823;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param param the method parameter descriptor (may be {@code null})_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = (param != null ? param.getContainingClass() : null)__		Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = (param != null ?_					ResolvableType.forMethodParameter(param) : ResolvableType.forType(targetType))__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = ((HttpRequest) inputMessage).getMethod()__		inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)__		Object body = NO_VALUE___		for (HttpMessageConverter<?> converter : this.messageConverters) {_			Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__			if (converter instanceof GenericHttpMessageConverter) {_				GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__				if (genericConverter.canRead(targetType, contextClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__					}_					if (inputMessage.getBody() != null) {_						inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__						body = genericConverter.read(targetType, contextClass, inputMessage)__						body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__					}_					else {_						body = null__						body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__					}_					break__				}_			}_			else if (targetClass != null) {_				if (converter.canRead(targetClass, contentType)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__					}_					if (inputMessage.getBody() != null) {_						inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__						body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__						body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__					}_					else {_						body = null__						body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__					}_					break__				}_			}_		}__		if (body == NO_VALUE) {_			if (!SUPPORTED_METHODS.contains(httpMethod)_					|| (noContentType && inputMessage.getBody() == null)) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,param,the,method,parameter,descriptor,may,be,code,null,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,param,null,param,get,containing,class,null,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,param,null,resolvable,type,for,method,parameter,param,resolvable,type,for,type,target,type,target,class,class,t,resolvable,type,resolve,http,method,http,method,http,request,input,message,get,method,input,message,new,empty,body,checking,http,input,message,input,message,object,body,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,generic,converter,read,target,type,context,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,else,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,http,message,converter,t,converter,read,target,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,if,body,if,contains,http,method,no,content,type,input,message,get,body,null,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1443043357;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param param the method parameter descriptor (may be {@code null})_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = (param != null ? param.getContainingClass() : null)__		Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = (param != null ?_					ResolvableType.forMethodParameter(param) : ResolvableType.forType(targetType))__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = ((HttpRequest) inputMessage).getMethod()__		Object body = NO_VALUE___		try {_			inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				if (converter instanceof GenericHttpMessageConverter) {_					GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__					if (genericConverter.canRead(targetType, contextClass, contentType)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__						}_						if (inputMessage.getBody() != null) {_							inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__							body = genericConverter.read(targetType, contextClass, inputMessage)__							body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__						}_						else {_							body = null__							body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__						}_						break__					}_				}_				else if (targetClass != null) {_					if (converter.canRead(targetClass, contentType)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__						}_						if (inputMessage.getBody() != null) {_							inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__							body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__							body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__						}_						else {_							body = null__							body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__						}_						break__					}_				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("Could not read document: " + ex.getMessage(), ex)__		}__		if (body == NO_VALUE) {_			if (!SUPPORTED_METHODS.contains(httpMethod)_					|| (noContentType && inputMessage.getBody() == null)) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,param,the,method,parameter,descriptor,may,be,code,null,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,param,null,param,get,containing,class,null,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,param,null,resolvable,type,for,method,parameter,param,resolvable,type,for,type,target,type,target,class,class,t,resolvable,type,resolve,http,method,http,method,http,request,input,message,get,method,object,body,try,input,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,generic,converter,read,target,type,context,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,else,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,http,message,converter,t,converter,read,target,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,could,not,read,document,ex,get,message,ex,if,body,if,contains,http,method,no,content,type,input,message,get,body,null,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1449660404;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param param the method parameter descriptor (may be {@code null})_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = (param != null ? param.getContainingClass() : null)__		Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = (param != null ?_					ResolvableType.forMethodParameter(param) : ResolvableType.forType(targetType))__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = ((HttpRequest) inputMessage).getMethod()__		Object body = NO_VALUE___		try {_			inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				if (converter instanceof GenericHttpMessageConverter) {_					GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__					if (genericConverter.canRead(targetType, contextClass, contentType)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__						}_						if (inputMessage.getBody() != null) {_							inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__							body = genericConverter.read(targetType, contextClass, inputMessage)__							body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__						}_						else {_							body = null__							body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__						}_						break__					}_				}_				else if (targetClass != null) {_					if (converter.canRead(targetClass, contentType)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__						}_						if (inputMessage.getBody() != null) {_							inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__							body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__							body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__						}_						else {_							body = null__							body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__						}_						break__					}_				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("Could not read document: " + ex.getMessage(), ex)__		}__		if (body == NO_VALUE) {_			if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||_					(noContentType && inputMessage.getBody() == null)) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,param,the,method,parameter,descriptor,may,be,code,null,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,param,null,param,get,containing,class,null,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,param,null,resolvable,type,for,method,parameter,param,resolvable,type,for,type,target,type,target,class,class,t,resolvable,type,resolve,http,method,http,method,http,request,input,message,get,method,object,body,try,input,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,generic,converter,read,target,type,context,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,else,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,http,message,converter,t,converter,read,target,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,could,not,read,document,ex,get,message,ex,if,body,if,http,method,null,contains,http,method,no,content,type,input,message,get,body,null,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1467730834;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param param the method parameter descriptor (may be {@code null})_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = (param != null ? param.getContainingClass() : null)__		Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = (param != null ?_					ResolvableType.forMethodParameter(param) : ResolvableType.forType(targetType))__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = ((HttpRequest) inputMessage).getMethod()__		Object body = NO_VALUE___		try {_			inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				if (converter instanceof GenericHttpMessageConverter) {_					GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__					if (genericConverter.canRead(targetType, contextClass, contentType)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__						}_						if (inputMessage.getBody() != null) {_							inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__							body = genericConverter.read(targetType, contextClass, inputMessage)__							body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__						}_						else {_							body = null__							body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__						}_						break__					}_				}_				else if (targetClass != null) {_					if (converter.canRead(targetClass, contentType)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__						}_						if (inputMessage.getBody() != null) {_							inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__							body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__							body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__						}_						else {_							body = null__							body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__						}_						break__					}_				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("Could not read document: " + ex.getMessage(), ex)__		}__		if (body == NO_VALUE) {_			if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||_					(noContentType && inputMessage.getBody() == null)) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,param,the,method,parameter,descriptor,may,be,code,null,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,param,null,param,get,containing,class,null,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,param,null,resolvable,type,for,method,parameter,param,resolvable,type,for,type,target,type,target,class,class,t,resolvable,type,resolve,http,method,http,method,http,request,input,message,get,method,object,body,try,input,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,generic,converter,read,target,type,context,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,else,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,http,message,converter,t,converter,read,target,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,could,not,read,document,ex,get,message,ex,if,body,if,http,method,null,contains,http,method,no,content,type,input,message,get,body,null,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,return,body
AbstractMessageConverterMethodArgumentResolver -> @SuppressWarnings("unchecked") 	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, 			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException;1477860027;Create the method argument value of the expected parameter type by reading_from the given HttpInputMessage._@param <T> the expected type of the argument value to be created_@param inputMessage the HTTP input message representing the current request_@param param the method parameter descriptor (may be {@code null})_@param targetType the target type, not necessarily the same as the method_parameter type, e.g. for {@code HttpEntity<String>}._@return the created method argument value_@throws IOException if the reading from the request fails_@throws HttpMediaTypeNotSupportedException if no suitable message converter is found;@SuppressWarnings("unchecked")_	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param,_			Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {__		MediaType contentType__		boolean noContentType = false__		try {_			contentType = inputMessage.getHeaders().getContentType()__		}_		catch (InvalidMediaTypeException ex) {_			throw new HttpMediaTypeNotSupportedException(ex.getMessage())__		}_		if (contentType == null) {_			noContentType = true__			contentType = MediaType.APPLICATION_OCTET_STREAM__		}__		Class<?> contextClass = (param != null ? param.getContainingClass() : null)__		Class<T> targetClass = (targetType instanceof Class ? (Class<T>) targetType : null)__		if (targetClass == null) {_			ResolvableType resolvableType = (param != null ?_					ResolvableType.forMethodParameter(param) : ResolvableType.forType(targetType))__			targetClass = (Class<T>) resolvableType.resolve()__		}__		HttpMethod httpMethod = ((HttpRequest) inputMessage).getMethod()__		Object body = NO_VALUE___		try {_			inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)___			for (HttpMessageConverter<?> converter : this.messageConverters) {_				Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()__				if (converter instanceof GenericHttpMessageConverter) {_					GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter__					if (genericConverter.canRead(targetType, contextClass, contentType)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__						}_						if (inputMessage.getBody() != null) {_							inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__							body = genericConverter.read(targetType, contextClass, inputMessage)__							body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__						}_						else {_							body = null__							body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__						}_						break__					}_				}_				else if (targetClass != null) {_					if (converter.canRead(targetClass, contentType)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")__						}_						if (inputMessage.getBody() != null) {_							inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)__							body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)__							body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)__						}_						else {_							body = null__							body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)__						}_						break__					}_				}_			}_		}_		catch (IOException ex) {_			throw new HttpMessageNotReadableException("Could not read document: " + ex.getMessage(), ex)__		}__		if (body == NO_VALUE) {_			if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||_					(noContentType && inputMessage.getBody() == null)) {_				return null__			}_			throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes)__		}__		return body__	};create,the,method,argument,value,of,the,expected,parameter,type,by,reading,from,the,given,http,input,message,param,t,the,expected,type,of,the,argument,value,to,be,created,param,input,message,the,http,input,message,representing,the,current,request,param,param,the,method,parameter,descriptor,may,be,code,null,param,target,type,the,target,type,not,necessarily,the,same,as,the,method,parameter,type,e,g,for,code,http,entity,string,return,the,created,method,argument,value,throws,ioexception,if,the,reading,from,the,request,fails,throws,http,media,type,not,supported,exception,if,no,suitable,message,converter,is,found;suppress,warnings,unchecked,protected,t,object,read,with,message,converters,http,input,message,input,message,method,parameter,param,type,target,type,throws,ioexception,http,media,type,not,supported,exception,http,message,not,readable,exception,media,type,content,type,boolean,no,content,type,false,try,content,type,input,message,get,headers,get,content,type,catch,invalid,media,type,exception,ex,throw,new,http,media,type,not,supported,exception,ex,get,message,if,content,type,null,no,content,type,true,content,type,media,type,class,context,class,param,null,param,get,containing,class,null,class,t,target,class,target,type,instanceof,class,class,t,target,type,null,if,target,class,null,resolvable,type,resolvable,type,param,null,resolvable,type,for,method,parameter,param,resolvable,type,for,type,target,type,target,class,class,t,resolvable,type,resolve,http,method,http,method,http,request,input,message,get,method,object,body,try,input,message,new,empty,body,checking,http,input,message,input,message,for,http,message,converter,converter,this,message,converters,class,http,message,converter,converter,type,class,http,message,converter,converter,get,class,if,converter,instanceof,generic,http,message,converter,generic,http,message,converter,generic,converter,generic,http,message,converter,converter,if,generic,converter,can,read,target,type,context,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,generic,converter,read,target,type,context,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,else,if,target,class,null,if,converter,can,read,target,class,content,type,if,logger,is,debug,enabled,logger,debug,read,target,type,as,content,type,with,converter,if,input,message,get,body,null,input,message,get,advice,before,body,read,input,message,param,target,type,converter,type,body,http,message,converter,t,converter,read,target,class,input,message,body,get,advice,after,body,read,body,input,message,param,target,type,converter,type,else,body,null,body,get,advice,handle,empty,body,body,input,message,param,target,type,converter,type,break,catch,ioexception,ex,throw,new,http,message,not,readable,exception,could,not,read,document,ex,get,message,ex,if,body,if,http,method,null,contains,http,method,no,content,type,input,message,get,body,null,return,null,throw,new,http,media,type,not,supported,exception,content,type,this,all,supported,media,types,return,body
