commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Add URL patterns to which the registered interceptor should apply to.  */ ;/**  * Add URL patterns to which the registered interceptor should apply to.  */ public InterceptorRegistration addPathPatterns(String... patterns) {     return addPathPatterns(Arrays.asList(patterns)). }
true;public;1;4;/**  * List-based variant of {@link #addPathPatterns(String...)}.  * @since 5.0.3  */ ;/**  * List-based variant of {@link #addPathPatterns(String...)}.  * @since 5.0.3  */ public InterceptorRegistration addPathPatterns(List<String> patterns) {     this.includePatterns.addAll(patterns).     return this. }
true;public;1;3;/**  * Add URL patterns to which the registered interceptor should not apply to.  */ ;/**  * Add URL patterns to which the registered interceptor should not apply to.  */ public InterceptorRegistration excludePathPatterns(String... patterns) {     return excludePathPatterns(Arrays.asList(patterns)). }
true;public;1;4;/**  * List-based variant of {@link #excludePathPatterns(String...)}.  * @since 5.0.3  */ ;/**  * List-based variant of {@link #excludePathPatterns(String...)}.  * @since 5.0.3  */ public InterceptorRegistration excludePathPatterns(List<String> patterns) {     this.excludePatterns.addAll(patterns).     return this. }
true;public;1;4;/**  * A PathMatcher implementation to use with this interceptor. This is an optional,  * advanced property required only if using custom PathMatcher implementations  * that support mapping metadata other than the Ant path patterns supported  * by default.  */ ;/**  * A PathMatcher implementation to use with this interceptor. This is an optional,  * advanced property required only if using custom PathMatcher implementations  * that support mapping metadata other than the Ant path patterns supported  * by default.  */ public InterceptorRegistration pathMatcher(PathMatcher pathMatcher) {     this.pathMatcher = pathMatcher.     return this. }
true;public;1;4;/**  * Specify an order position to be used. Default is 0.  * @since 5.0  */ ;/**  * Specify an order position to be used. Default is 0.  * @since 5.0  */ public InterceptorRegistration order(int order) {     this.order = order.     return this. }
true;protected;0;3;/**  * Return the order position to be used.  * @since 5.0  */ ;/**  * Return the order position to be used.  * @since 5.0  */ protected int getOrder() {     return this.order. }
true;protected;0;13;/**  * Build the underlying interceptor. If URL patterns are provided, the returned  * type is {@link MappedInterceptor}. otherwise {@link HandlerInterceptor}.  */ ;/**  * Build the underlying interceptor. If URL patterns are provided, the returned  * type is {@link MappedInterceptor}. otherwise {@link HandlerInterceptor}.  */ protected Object getInterceptor() {     if (this.includePatterns.isEmpty() && this.excludePatterns.isEmpty()) {         return this.interceptor.     }     String[] include = StringUtils.toStringArray(this.includePatterns).     String[] exclude = StringUtils.toStringArray(this.excludePatterns).     MappedInterceptor mappedInterceptor = new MappedInterceptor(include, exclude, this.interceptor).     if (this.pathMatcher != null) {         mappedInterceptor.setPathMatcher(this.pathMatcher).     }     return mappedInterceptor. }
