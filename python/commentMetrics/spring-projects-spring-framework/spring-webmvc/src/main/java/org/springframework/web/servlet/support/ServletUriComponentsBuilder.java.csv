commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;5;/**  * Prepare a builder from the host, port, scheme, and context path of the  * given HttpServletRequest.  */ ;// Factory methods based on a HttpServletRequest /**  * Prepare a builder from the host, port, scheme, and context path of the  * given HttpServletRequest.  */ public static ServletUriComponentsBuilder fromContextPath(HttpServletRequest request) {     ServletUriComponentsBuilder builder = initFromRequest(request).     builder.replacePath(request.getContextPath()).     return builder. }
true;public,static;1;7;/**  * Prepare a builder from the host, port, scheme, context path, and  * servlet mapping of the given HttpServletRequest.  * <p>If the servlet is mapped by name, e.g. {@code "/main/*"}, the path  * will end with "/main". If the servlet is mapped otherwise, e.g.  * {@code "/"} or {@code "*.do"}, the result will be the same as  * if calling {@link #fromContextPath(HttpServletRequest)}.  */ ;/**  * Prepare a builder from the host, port, scheme, context path, and  * servlet mapping of the given HttpServletRequest.  * <p>If the servlet is mapped by name, e.g. {@code "/main/*"}, the path  * will end with "/main". If the servlet is mapped otherwise, e.g.  * {@code "/"} or {@code "*.do"}, the result will be the same as  * if calling {@link #fromContextPath(HttpServletRequest)}.  */ public static ServletUriComponentsBuilder fromServletMapping(HttpServletRequest request) {     ServletUriComponentsBuilder builder = fromContextPath(request).     if (StringUtils.hasText(new UrlPathHelper().getPathWithinServletMapping(request))) {         builder.path(request.getServletPath()).     }     return builder. }
true;public,static;1;5;/**  * Prepare a builder from the host, port, scheme, and path (but not the query)  * of the HttpServletRequest.  */ ;/**  * Prepare a builder from the host, port, scheme, and path (but not the query)  * of the HttpServletRequest.  */ public static ServletUriComponentsBuilder fromRequestUri(HttpServletRequest request) {     ServletUriComponentsBuilder builder = initFromRequest(request).     builder.initPath(request.getRequestURI()).     return builder. }
true;public,static;1;6;/**  * Prepare a builder by copying the scheme, host, port, path, and  * query string of an HttpServletRequest.  */ ;/**  * Prepare a builder by copying the scheme, host, port, path, and  * query string of an HttpServletRequest.  */ public static ServletUriComponentsBuilder fromRequest(HttpServletRequest request) {     ServletUriComponentsBuilder builder = initFromRequest(request).     builder.initPath(request.getRequestURI()).     builder.query(request.getQueryString()).     return builder. }
true;private,static;1;13;/**  * Initialize a builder with a scheme, host,and port (but not path and query).  */ ;/**  * Initialize a builder with a scheme, host,and port (but not path and query).  */ private static ServletUriComponentsBuilder initFromRequest(HttpServletRequest request) {     String scheme = request.getScheme().     String host = request.getServerName().     int port = request.getServerPort().     ServletUriComponentsBuilder builder = new ServletUriComponentsBuilder().     builder.scheme(scheme).     builder.host(host).     if (("http".equals(scheme) && port != 80) || ("https".equals(scheme) && port != 443)) {         builder.port(port).     }     return builder. }
true;public,static;0;3;/**  * Same as {@link #fromContextPath(HttpServletRequest)} except the  * request is obtained through {@link RequestContextHolder}.  */ ;// Alternative methods relying on RequestContextHolder to find the request /**  * Same as {@link #fromContextPath(HttpServletRequest)} except the  * request is obtained through {@link RequestContextHolder}.  */ public static ServletUriComponentsBuilder fromCurrentContextPath() {     return fromContextPath(getCurrentRequest()). }
true;public,static;0;3;/**  * Same as {@link #fromServletMapping(HttpServletRequest)} except the  * request is obtained through {@link RequestContextHolder}.  */ ;/**  * Same as {@link #fromServletMapping(HttpServletRequest)} except the  * request is obtained through {@link RequestContextHolder}.  */ public static ServletUriComponentsBuilder fromCurrentServletMapping() {     return fromServletMapping(getCurrentRequest()). }
true;public,static;0;3;/**  * Same as {@link #fromRequestUri(HttpServletRequest)} except the  * request is obtained through {@link RequestContextHolder}.  */ ;/**  * Same as {@link #fromRequestUri(HttpServletRequest)} except the  * request is obtained through {@link RequestContextHolder}.  */ public static ServletUriComponentsBuilder fromCurrentRequestUri() {     return fromRequestUri(getCurrentRequest()). }
true;public,static;0;3;/**  * Same as {@link #fromRequest(HttpServletRequest)} except the  * request is obtained through {@link RequestContextHolder}.  */ ;/**  * Same as {@link #fromRequest(HttpServletRequest)} except the  * request is obtained through {@link RequestContextHolder}.  */ public static ServletUriComponentsBuilder fromCurrentRequest() {     return fromRequest(getCurrentRequest()). }
true;protected,static;0;5;/**  * Obtain current request through {@link RequestContextHolder}.  */ ;/**  * Obtain current request through {@link RequestContextHolder}.  */ protected static HttpServletRequest getCurrentRequest() {     RequestAttributes attrs = RequestContextHolder.getRequestAttributes().     Assert.state(attrs instanceof ServletRequestAttributes, "No current ServletRequestAttributes").     return ((ServletRequestAttributes) attrs).getRequest(). }
false;private;1;4;;private void initPath(String path) {     this.originalPath = path.     replacePath(path). }
true;public;0;13;/**  * Remove any path extension from the {@link HttpServletRequest#getRequestURI()  * requestURI}. This method must be invoked before any calls to {@link #path(String)}  * or {@link #pathSegment(String...)}.  * <pre>  * GET http://foo.com/rest/books/6.json  *  * ServletUriComponentsBuilder builder = ServletUriComponentsBuilder.fromRequestUri(this.request).  * String ext = builder.removePathExtension().  * String uri = builder.path("/pages/1.{ext}").buildAndExpand(ext).toUriString().  * assertEquals("http://foo.com/rest/books/6/pages/1.json", result).  * </pre>  * @return the removed path extension for possible re-use, or {@code null}  * @since 4.0  */ ;/**  * Remove any path extension from the {@link HttpServletRequest#getRequestURI()  * requestURI}. This method must be invoked before any calls to {@link #path(String)}  * or {@link #pathSegment(String...)}.  * <pre>  * GET http://foo.com/rest/books/6.json  *  * ServletUriComponentsBuilder builder = ServletUriComponentsBuilder.fromRequestUri(this.request).  * String ext = builder.removePathExtension().  * String uri = builder.path("/pages/1.{ext}").buildAndExpand(ext).toUriString().  * assertEquals("http://foo.com/rest/books/6/pages/1.json", result).  * </pre>  * @return the removed path extension for possible re-use, or {@code null}  * @since 4.0  */ @Nullable public String removePathExtension() {     String extension = null.     if (this.originalPath != null) {         extension = UriUtils.extractFileExtension(this.originalPath).         if (!StringUtils.isEmpty(extension)) {             int end = this.originalPath.length() - (extension.length() + 1).             replacePath(this.originalPath.substring(0, end)).         }         this.originalPath = null.     }     return extension. }
false;public;0;4;;@Override public ServletUriComponentsBuilder cloneBuilder() {     return new ServletUriComponentsBuilder(this). }
