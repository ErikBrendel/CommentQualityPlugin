commented;modifiers;parameterAmount;loc;comment;code
false;protected,final;3;19;;@Override protected final void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {     T wireFeed = newFeed().     buildFeedMetadata(model, wireFeed, request).     buildFeedEntries(model, wireFeed, request, response).     setResponseContentType(request, response).     if (!StringUtils.hasText(wireFeed.getEncoding())) {         wireFeed.setEncoding("UTF-8").     }     WireFeedOutput feedOutput = new WireFeedOutput().     ServletOutputStream out = response.getOutputStream().     feedOutput.output(wireFeed, new OutputStreamWriter(out, wireFeed.getEncoding())).     out.flush(). }
true;protected,abstract;0;1;/**  * Create a new feed to hold the entries.  * @return the newly created Feed instance  */ ;/**  * Create a new feed to hold the entries.  * @return the newly created Feed instance  */ protected abstract T newFeed().
true;protected;3;2;/**  * Populate the feed metadata (title, link, description, etc.).  * <p>Default is an empty implementation. Subclasses can override this method  * to add meta fields such as title, link description, etc.  * @param model the model, in case meta information must be populated from it  * @param feed the feed being populated  * @param request in case we need locale etc. Shouldn't look at attributes.  */ ;/**  * Populate the feed metadata (title, link, description, etc.).  * <p>Default is an empty implementation. Subclasses can override this method  * to add meta fields such as title, link description, etc.  * @param model the model, in case meta information must be populated from it  * @param feed the feed being populated  * @param request in case we need locale etc. Shouldn't look at attributes.  */ protected void buildFeedMetadata(Map<String, Object> model, T feed, HttpServletRequest request) { }
true;protected,abstract;4;2;/**  * Subclasses must implement this method to build feed entries, given the model.  * <p>Note that the passed-in HTTP response is just supposed to be used for  * setting cookies or other HTTP headers. The built feed itself will automatically  * get written to the response after this method returns.  * @param model the model Map  * @param feed the feed to add entries to  * @param request in case we need locale etc. Shouldn't look at attributes.  * @param response in case we need to set cookies. Shouldn't write to it.  * @throws Exception any exception that occurred during building  */ ;/**  * Subclasses must implement this method to build feed entries, given the model.  * <p>Note that the passed-in HTTP response is just supposed to be used for  * setting cookies or other HTTP headers. The built feed itself will automatically  * get written to the response after this method returns.  * @param model the model Map  * @param feed the feed to add entries to  * @param request in case we need locale etc. Shouldn't look at attributes.  * @param response in case we need to set cookies. Shouldn't write to it.  * @throws Exception any exception that occurred during building  */ protected abstract void buildFeedEntries(Map<String, Object> model, T feed, HttpServletRequest request, HttpServletResponse response) throws Exception.
