commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the encoding of the FreeMarker template file. Default is determined  * by the FreeMarker Configuration: "ISO-8859-1" if not specified otherwise.  * <p>Specify the encoding in the FreeMarker Configuration rather than per  * template if all your templates share a common encoding.  */ ;/**  * Set the encoding of the FreeMarker template file. Default is determined  * by the FreeMarker Configuration: "ISO-8859-1" if not specified otherwise.  * <p>Specify the encoding in the FreeMarker Configuration rather than per  * template if all your templates share a common encoding.  */ public void setEncoding(@Nullable String encoding) {     this.encoding = encoding. }
true;protected;0;4;/**  * Return the encoding for the FreeMarker template.  */ ;/**  * Return the encoding for the FreeMarker template.  */ @Nullable protected String getEncoding() {     return this.encoding. }
true;public;1;3;/**  * Set the FreeMarker Configuration to be used by this view.  * <p>If this is not set, the default lookup will occur: a single {@link FreeMarkerConfig}  * is expected in the current web application context, with any bean name.  * <strong>Note:</strong> using this method will cause a new instance of {@link TaglibFactory}  * to created for every single {@link FreeMarkerView} instance. This can be quite expensive  * in terms of memory and initial CPU usage. In production it is recommended that you use  * a {@link FreeMarkerConfig} which exposes a single shared {@link TaglibFactory}.  */ ;/**  * Set the FreeMarker Configuration to be used by this view.  * <p>If this is not set, the default lookup will occur: a single {@link FreeMarkerConfig}  * is expected in the current web application context, with any bean name.  * <strong>Note:</strong> using this method will cause a new instance of {@link TaglibFactory}  * to created for every single {@link FreeMarkerView} instance. This can be quite expensive  * in terms of memory and initial CPU usage. In production it is recommended that you use  * a {@link FreeMarkerConfig} which exposes a single shared {@link TaglibFactory}.  */ public void setConfiguration(@Nullable Configuration configuration) {     this.configuration = configuration. }
true;protected;0;4;/**  * Return the FreeMarker configuration used by this view.  */ ;/**  * Return the FreeMarker configuration used by this view.  */ @Nullable protected Configuration getConfiguration() {     return this.configuration. }
true;protected;0;5;/**  * Obtain the FreeMarker configuration for actual use.  * @return the FreeMarker configuration (never {@code null})  * @throws IllegalStateException in case of no Configuration object set  * @since 5.0  */ ;/**  * Obtain the FreeMarker configuration for actual use.  * @return the FreeMarker configuration (never {@code null})  * @throws IllegalStateException in case of no Configuration object set  * @since 5.0  */ protected Configuration obtainConfiguration() {     Configuration configuration = getConfiguration().     Assert.state(configuration != null, "No Configuration set").     return configuration. }
true;protected;1;20;/**  * Invoked on startup. Looks for a single FreeMarkerConfig bean to  * find the relevant Configuration for this factory.  * <p>Checks that the template for the default Locale can be found:  * FreeMarker will check non-Locale-specific templates if a  * locale-specific one is not found.  * @see freemarker.cache.TemplateCache#getTemplate  */ ;/**  * Invoked on startup. Looks for a single FreeMarkerConfig bean to  * find the relevant Configuration for this factory.  * <p>Checks that the template for the default Locale can be found:  * FreeMarker will check non-Locale-specific templates if a  * locale-specific one is not found.  * @see freemarker.cache.TemplateCache#getTemplate  */ @Override protected void initServletContext(ServletContext servletContext) throws BeansException {     if (getConfiguration() != null) {         this.taglibFactory = new TaglibFactory(servletContext).     } else {         FreeMarkerConfig config = autodetectConfiguration().         setConfiguration(config.getConfiguration()).         this.taglibFactory = config.getTaglibFactory().     }     GenericServlet servlet = new GenericServletAdapter().     try {         servlet.init(new DelegatingServletConfig()).     } catch (ServletException ex) {         throw new BeanInitializationException("Initialization of GenericServlet adapter failed", ex).     }     this.servletContextHashModel = new ServletContextHashModel(servlet, getObjectWrapper()). }
true;protected;0;12;/**  * Autodetect a {@link FreeMarkerConfig} object via the ApplicationContext.  * @return the Configuration instance to use for FreeMarkerViews  * @throws BeansException if no Configuration instance could be found  * @see #getApplicationContext  * @see #setConfiguration  */ ;/**  * Autodetect a {@link FreeMarkerConfig} object via the ApplicationContext.  * @return the Configuration instance to use for FreeMarkerViews  * @throws BeansException if no Configuration instance could be found  * @see #getApplicationContext  * @see #setConfiguration  */ protected FreeMarkerConfig autodetectConfiguration() throws BeansException {     try {         return BeanFactoryUtils.beanOfTypeIncludingAncestors(obtainApplicationContext(), FreeMarkerConfig.class, true, false).     } catch (NoSuchBeanDefinitionException ex) {         throw new ApplicationContextException("Must define a single FreeMarkerConfig bean in this web application context " + "(may be inherited): FreeMarkerConfigurer is the usual implementation. " + "This bean may be given any name.", ex).     } }
true;protected;0;5;/**  * Return the configured FreeMarker {@link ObjectWrapper}, or the  * {@link ObjectWrapper#DEFAULT_WRAPPER default wrapper} if none specified.  * @see freemarker.template.Configuration#getObjectWrapper()  */ ;/**  * Return the configured FreeMarker {@link ObjectWrapper}, or the  * {@link ObjectWrapper#DEFAULT_WRAPPER default wrapper} if none specified.  * @see freemarker.template.Configuration#getObjectWrapper()  */ protected ObjectWrapper getObjectWrapper() {     ObjectWrapper ow = obtainConfiguration().getObjectWrapper().     return (ow != null ? ow : new DefaultObjectWrapperBuilder(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS).build()). }
true;public;1;21;/**  * Check that the FreeMarker template used for this view exists and is valid.  * <p>Can be overridden to customize the behavior, for example in case of  * multiple templates to be rendered into a single view.  */ ;/**  * Check that the FreeMarker template used for this view exists and is valid.  * <p>Can be overridden to customize the behavior, for example in case of  * multiple templates to be rendered into a single view.  */ @Override public boolean checkResource(Locale locale) throws Exception {     String url = getUrl().     Assert.state(url != null, "'url' not set").     try {         // Check that we can get the template, even if we might subsequently get it again.         getTemplate(url, locale).         return true.     } catch (FileNotFoundException ex) {         // Allow for ViewResolver chaining...         return false.     } catch (ParseException ex) {         throw new ApplicationContextException("Failed to parse [" + url + "]", ex).     } catch (IOException ex) {         throw new ApplicationContextException("Failed to load [" + url + "]", ex).     } }
true;protected;3;7;/**  * Process the model map by merging it with the FreeMarker template.  * Output is directed to the servlet response.  * <p>This method can be overridden if custom behavior is needed.  */ ;/**  * Process the model map by merging it with the FreeMarker template.  * Output is directed to the servlet response.  * <p>This method can be overridden if custom behavior is needed.  */ @Override protected void renderMergedTemplateModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {     exposeHelpers(model, request).     doRender(model, request, response). }
true;protected;2;2;/**  * Expose helpers unique to each rendering operation. This is necessary so that  * different rendering operations can't overwrite each other's formats etc.  * <p>Called by {@code renderMergedTemplateModel}. The default implementation  * is empty. This method can be overridden to add custom helpers to the model.  * @param model the model that will be passed to the template at merge time  * @param request current HTTP request  * @throws Exception if there's a fatal error while we're adding information to the context  * @see #renderMergedTemplateModel  */ ;/**  * Expose helpers unique to each rendering operation. This is necessary so that  * different rendering operations can't overwrite each other's formats etc.  * <p>Called by {@code renderMergedTemplateModel}. The default implementation  * is empty. This method can be overridden to add custom helpers to the model.  * @param model the model that will be passed to the template at merge time  * @param request current HTTP request  * @throws Exception if there's a fatal error while we're adding information to the context  * @see #renderMergedTemplateModel  */ protected void exposeHelpers(Map<String, Object> model, HttpServletRequest request) throws Exception { }
true;protected;3;12;/**  * Render the FreeMarker view to the given response, using the given model  * map which contains the complete template model to use.  * <p>The default implementation renders the template specified by the "url"  * bean property, retrieved via {@code getTemplate}. It delegates to the  * {@code processTemplate} method to merge the template instance with  * the given template model.  * <p>Adds the standard Freemarker hash models to the model: request parameters,  * request, session and application (ServletContext), as well as the JSP tag  * library hash model.  * <p>Can be overridden to customize the behavior, for example to render  * multiple templates into a single view.  * @param model the model to use for rendering  * @param request current HTTP request  * @param response current servlet response  * @throws IOException if the template file could not be retrieved  * @throws Exception if rendering failed  * @see #setUrl  * @see org.springframework.web.servlet.support.RequestContextUtils#getLocale  * @see #getTemplate(java.util.Locale)  * @see #processTemplate  * @see freemarker.ext.servlet.FreemarkerServlet  */ ;/**  * Render the FreeMarker view to the given response, using the given model  * map which contains the complete template model to use.  * <p>The default implementation renders the template specified by the "url"  * bean property, retrieved via {@code getTemplate}. It delegates to the  * {@code processTemplate} method to merge the template instance with  * the given template model.  * <p>Adds the standard Freemarker hash models to the model: request parameters,  * request, session and application (ServletContext), as well as the JSP tag  * library hash model.  * <p>Can be overridden to customize the behavior, for example to render  * multiple templates into a single view.  * @param model the model to use for rendering  * @param request current HTTP request  * @param response current servlet response  * @throws IOException if the template file could not be retrieved  * @throws Exception if rendering failed  * @see #setUrl  * @see org.springframework.web.servlet.support.RequestContextUtils#getLocale  * @see #getTemplate(java.util.Locale)  * @see #processTemplate  * @see freemarker.ext.servlet.FreemarkerServlet  */ protected void doRender(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {     // Expose model to JSP tags (as request attributes).     exposeModelAsRequestAttributes(model, request).     // Expose all standard FreeMarker hash models.     SimpleHash fmModel = buildTemplateModel(model, request, response).     // Grab the locale-specific version of the template.     Locale locale = RequestContextUtils.getLocale(request).     processTemplate(getTemplate(locale), fmModel, response). }
true;protected;3;12;/**  * Build a FreeMarker template model for the given model Map.  * <p>The default implementation builds a {@link AllHttpScopesHashModel}.  * @param model the model to use for rendering  * @param request current HTTP request  * @param response current servlet response  * @return the FreeMarker template model, as a {@link SimpleHash} or subclass thereof  */ ;/**  * Build a FreeMarker template model for the given model Map.  * <p>The default implementation builds a {@link AllHttpScopesHashModel}.  * @param model the model to use for rendering  * @param request current HTTP request  * @param response current servlet response  * @return the FreeMarker template model, as a {@link SimpleHash} or subclass thereof  */ protected SimpleHash buildTemplateModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) {     AllHttpScopesHashModel fmModel = new AllHttpScopesHashModel(getObjectWrapper(), getServletContext(), request).     fmModel.put(FreemarkerServlet.KEY_JSP_TAGLIBS, this.taglibFactory).     fmModel.put(FreemarkerServlet.KEY_APPLICATION, this.servletContextHashModel).     fmModel.put(FreemarkerServlet.KEY_SESSION, buildSessionModel(request, response)).     fmModel.put(FreemarkerServlet.KEY_REQUEST, new HttpRequestHashModel(request, response, getObjectWrapper())).     fmModel.put(FreemarkerServlet.KEY_REQUEST_PARAMETERS, new HttpRequestParametersHashModel(request)).     fmModel.putAll(model).     return fmModel. }
true;private;2;9;/**  * Build a FreeMarker {@link HttpSessionHashModel} for the given request,  * detecting whether a session already exists and reacting accordingly.  * @param request current HTTP request  * @param response current servlet response  * @return the FreeMarker HttpSessionHashModel  */ ;/**  * Build a FreeMarker {@link HttpSessionHashModel} for the given request,  * detecting whether a session already exists and reacting accordingly.  * @param request current HTTP request  * @param response current servlet response  * @return the FreeMarker HttpSessionHashModel  */ private HttpSessionHashModel buildSessionModel(HttpServletRequest request, HttpServletResponse response) {     HttpSession session = request.getSession(false).     if (session != null) {         return new HttpSessionHashModel(session, getObjectWrapper()).     } else {         return new HttpSessionHashModel(null, request, response, getObjectWrapper()).     } }
true;protected;1;5;/**  * Retrieve the FreeMarker template for the given locale,  * to be rendering by this view.  * <p>By default, the template specified by the "url" bean property  * will be retrieved.  * @param locale the current locale  * @return the FreeMarker template to render  * @throws IOException if the template file could not be retrieved  * @see #setUrl  * @see #getTemplate(String, java.util.Locale)  */ ;/**  * Retrieve the FreeMarker template for the given locale,  * to be rendering by this view.  * <p>By default, the template specified by the "url" bean property  * will be retrieved.  * @param locale the current locale  * @return the FreeMarker template to render  * @throws IOException if the template file could not be retrieved  * @see #setUrl  * @see #getTemplate(String, java.util.Locale)  */ protected Template getTemplate(Locale locale) throws IOException {     String url = getUrl().     Assert.state(url != null, "'url' not set").     return getTemplate(url, locale). }
true;protected;2;5;/**  * Retrieve the FreeMarker template specified by the given name,  * using the encoding specified by the "encoding" bean property.  * <p>Can be called by subclasses to retrieve a specific template,  * for example to render multiple templates into a single view.  * @param name the file name of the desired template  * @param locale the current locale  * @return the FreeMarker template  * @throws IOException if the template file could not be retrieved  */ ;/**  * Retrieve the FreeMarker template specified by the given name,  * using the encoding specified by the "encoding" bean property.  * <p>Can be called by subclasses to retrieve a specific template,  * for example to render multiple templates into a single view.  * @param name the file name of the desired template  * @param locale the current locale  * @return the FreeMarker template  * @throws IOException if the template file could not be retrieved  */ protected Template getTemplate(String name, Locale locale) throws IOException {     return (getEncoding() != null ? obtainConfiguration().getTemplate(name, locale, getEncoding()) : obtainConfiguration().getTemplate(name, locale)). }
true;protected;3;5;/**  * Process the FreeMarker template to the servlet response.  * <p>Can be overridden to customize the behavior.  * @param template the template to process  * @param model the model for the template  * @param response servlet response (use this to get the OutputStream or Writer)  * @throws IOException if the template file could not be retrieved  * @throws TemplateException if thrown by FreeMarker  * @see freemarker.template.Template#process(Object, java.io.Writer)  */ ;/**  * Process the FreeMarker template to the servlet response.  * <p>Can be overridden to customize the behavior.  * @param template the template to process  * @param model the model for the template  * @param response servlet response (use this to get the OutputStream or Writer)  * @throws IOException if the template file could not be retrieved  * @throws TemplateException if thrown by FreeMarker  * @see freemarker.template.Template#process(Object, java.io.Writer)  */ protected void processTemplate(Template template, SimpleHash model, HttpServletResponse response) throws IOException, TemplateException {     template.process(model, response.getWriter()). }
false;public;2;4;;@Override public void service(ServletRequest servletRequest, ServletResponse servletResponse) { // no-op }
false;public;0;5;;@Override @Nullable public String getServletName() {     return FreeMarkerView.this.getBeanName(). }
false;public;0;5;;@Override @Nullable public ServletContext getServletContext() {     return FreeMarkerView.this.getServletContext(). }
false;public;1;5;;@Override @Nullable public String getInitParameter(String paramName) {     return null. }
false;public;0;4;;@Override public Enumeration<String> getInitParameterNames() {     return Collections.enumeration(Collections.emptySet()). }
