commented;modifiers;parameterAmount;loc;comment;code
true;public;1;14;/**  * Add a resource resolver to the chain.  * @param resolver the resolver to add  * @return the current instance for chained method invocation  */ ;/**  * Add a resource resolver to the chain.  * @param resolver the resolver to add  * @return the current instance for chained method invocation  */ public ResourceChainRegistration addResolver(ResourceResolver resolver) {     Assert.notNull(resolver, "The provided ResourceResolver should not be null").     this.resolvers.add(resolver).     if (resolver instanceof VersionResourceResolver) {         this.hasVersionResolver = true.     } else if (resolver instanceof PathResourceResolver) {         this.hasPathResolver = true.     } else if (resolver instanceof WebJarsResourceResolver) {         this.hasWebjarsResolver = true.     }     return this. }
true;public;1;8;/**  * Add a resource transformer to the chain.  * @param transformer the transformer to add  * @return the current instance for chained method invocation  */ ;/**  * Add a resource transformer to the chain.  * @param transformer the transformer to add  * @return the current instance for chained method invocation  */ public ResourceChainRegistration addTransformer(ResourceTransformer transformer) {     Assert.notNull(transformer, "The provided ResourceTransformer should not be null").     this.transformers.add(transformer).     if (transformer instanceof CssLinkResourceTransformer) {         this.hasCssLinkTransformer = true.     }     return this. }
false;protected;0;11;;protected List<ResourceResolver> getResourceResolvers() {     if (!this.hasPathResolver) {         List<ResourceResolver> result = new ArrayList<>(this.resolvers).         if (isWebJarsAssetLocatorPresent && !this.hasWebjarsResolver) {             result.add(new WebJarsResourceResolver()).         }         result.add(new PathResourceResolver()).         return result.     }     return this.resolvers. }
false;protected;0;10;;protected List<ResourceTransformer> getResourceTransformers() {     if (this.hasVersionResolver && !this.hasCssLinkTransformer) {         List<ResourceTransformer> result = new ArrayList<>(this.transformers).         boolean hasTransformers = !this.transformers.isEmpty().         boolean hasCaching = hasTransformers && this.transformers.get(0) instanceof CachingResourceTransformer.         result.add(hasCaching ? 1 : 0, new CssLinkResourceTransformer()).         return result.     }     return this.transformers. }
