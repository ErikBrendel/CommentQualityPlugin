commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the HTML element must be used to render the error messages.  * <p>Defaults to an HTML '{@code <span/>}' tag.  */ ;/**  * Set the HTML element must be used to render the error messages.  * <p>Defaults to an HTML '{@code <span/>}' tag.  */ public void setElement(String element) {     Assert.hasText(element, "'element' cannot be null or blank").     this.element = element. }
true;public;0;3;/**  * Get the HTML element must be used to render the error messages.  */ ;/**  * Get the HTML element must be used to render the error messages.  */ public String getElement() {     return this.element. }
true;public;1;3;/**  * Set the delimiter to be used between error messages.  * <p>Defaults to an HTML '{@code <br/>}' tag.  */ ;/**  * Set the delimiter to be used between error messages.  * <p>Defaults to an HTML '{@code <br/>}' tag.  */ public void setDelimiter(String delimiter) {     this.delimiter = delimiter. }
true;public;0;3;/**  * Return the delimiter to be used between error messages.  */ ;/**  * Return the delimiter to be used between error messages.  */ public String getDelimiter() {     return this.delimiter. }
true;protected;0;9;/**  * Get the value for the HTML '{@code id}' attribute.  * <p>Appends '{@code .errors}' to the value returned by {@link #getPropertyPath()}  * or to the model attribute name if the {@code <form:errors/>} tag's  * '{@code path}' attribute has been omitted.  * @return the value for the HTML '{@code id}' attribute  * @see #getPropertyPath()  */ ;/**  * Get the value for the HTML '{@code id}' attribute.  * <p>Appends '{@code .errors}' to the value returned by {@link #getPropertyPath()}  * or to the model attribute name if the {@code <form:errors/>} tag's  * '{@code path}' attribute has been omitted.  * @return the value for the HTML '{@code id}' attribute  * @see #getPropertyPath()  */ @Override protected String autogenerateId() throws JspException {     String path = getPropertyPath().     if ("".equals(path) || "*".equals(path)) {         path = (String) this.pageContext.getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE).     }     return StringUtils.deleteAny(path, "[]") + ".errors". }
true;protected;0;5;/**  * Get the value for the HTML '{@code name}' attribute.  * <p>Simply returns {@code null} because the '{@code name}' attribute  * is not a validate attribute for the '{@code span}' element.  */ ;/**  * Get the value for the HTML '{@code name}' attribute.  * <p>Simply returns {@code null} because the '{@code name}' attribute  * is not a validate attribute for the '{@code span}' element.  */ @Override @Nullable protected String getName() throws JspException {     return null. }
true;protected;0;10;/**  * Should rendering of this tag proceed at all?  * <p>Only renders output when there are errors for the configured {@link #setPath path}.  * @return {@code true} only when there are errors for the configured {@link #setPath path}  */ ;/**  * Should rendering of this tag proceed at all?  * <p>Only renders output when there are errors for the configured {@link #setPath path}.  * @return {@code true} only when there are errors for the configured {@link #setPath path}  */ @Override protected boolean shouldRender() throws JspException {     try {         return getBindStatus().isError().     } catch (IllegalStateException ex) {         // Neither BindingResult nor target object available.         return false.     } }
false;protected;1;15;;@Override protected void renderDefaultContent(TagWriter tagWriter) throws JspException {     tagWriter.startTag(getElement()).     writeDefaultAttributes(tagWriter).     String delimiter = ObjectUtils.getDisplayString(evaluate("delimiter", getDelimiter())).     String[] errorMessages = getBindStatus().getErrorMessages().     for (int i = 0. i < errorMessages.length. i++) {         String errorMessage = errorMessages[i].         if (i > 0) {             tagWriter.appendValue(delimiter).         }         tagWriter.appendValue(getDisplayString(errorMessage)).     }     tagWriter.endTag(). }
true;protected;0;7;/**  * Exposes any bind status error messages under {@link #MESSAGES_ATTRIBUTE this key}  * in the {@link PageContext#PAGE_SCOPE}.  * <p>Only called if {@link #shouldRender()} returns {@code true}.  * @see #removeAttributes()  */ ;/**  * Exposes any bind status error messages under {@link #MESSAGES_ATTRIBUTE this key}  * in the {@link PageContext#PAGE_SCOPE}.  * <p>Only called if {@link #shouldRender()} returns {@code true}.  * @see #removeAttributes()  */ @Override protected void exposeAttributes() throws JspException {     List<String> errorMessages = new ArrayList<>(Arrays.asList(getBindStatus().getErrorMessages())).     this.oldMessages = this.pageContext.getAttribute(MESSAGES_ATTRIBUTE, PageContext.PAGE_SCOPE).     this.pageContext.setAttribute(MESSAGES_ATTRIBUTE, errorMessages, PageContext.PAGE_SCOPE).     this.errorMessagesWereExposed = true. }
true;protected;0;12;/**  * Removes any bind status error messages that were previously stored under  * {@link #MESSAGES_ATTRIBUTE this key} in the {@link PageContext#PAGE_SCOPE}.  * @see #exposeAttributes()  */ ;/**  * Removes any bind status error messages that were previously stored under  * {@link #MESSAGES_ATTRIBUTE this key} in the {@link PageContext#PAGE_SCOPE}.  * @see #exposeAttributes()  */ @Override protected void removeAttributes() {     if (this.errorMessagesWereExposed) {         if (this.oldMessages != null) {             this.pageContext.setAttribute(MESSAGES_ATTRIBUTE, this.oldMessages, PageContext.PAGE_SCOPE).             this.oldMessages = null.         } else {             this.pageContext.removeAttribute(MESSAGES_ATTRIBUTE, PageContext.PAGE_SCOPE).         }     } }
